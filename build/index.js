/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/demo/index.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@tweenjs/tween.js/src/Tween.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tweenjs/tween.js/src/Tween.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * Tween.js - Licensed under the MIT license
 * https://github.com/tweenjs/tween.js
 * ----------------------------------------------
 *
 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
 * Thank you all, you're awesome!
 */


var _Group = function () {
	this._tweens = {};
	this._tweensAddedDuringUpdate = {};
};

_Group.prototype = {
	getAll: function () {

		return Object.keys(this._tweens).map(function (tweenId) {
			return this._tweens[tweenId];
		}.bind(this));

	},

	removeAll: function () {

		this._tweens = {};

	},

	add: function (tween) {

		this._tweens[tween.getId()] = tween;
		this._tweensAddedDuringUpdate[tween.getId()] = tween;

	},

	remove: function (tween) {

		delete this._tweens[tween.getId()];
		delete this._tweensAddedDuringUpdate[tween.getId()];

	},

	update: function (time, preserve) {

		var tweenIds = Object.keys(this._tweens);

		if (tweenIds.length === 0) {
			return false;
		}

		time = time !== undefined ? time : TWEEN.now();

		// Tweens are updated in "batches". If you add a new tween during an update, then the
		// new tween will be updated in the next batch.
		// If you remove a tween during an update, it may or may not be updated. However,
		// if the removed tween was added during the current batch, then it will not be updated.
		while (tweenIds.length > 0) {
			this._tweensAddedDuringUpdate = {};

			for (var i = 0; i < tweenIds.length; i++) {

				var tween = this._tweens[tweenIds[i]];

				if (tween && tween.update(time) === false) {
					tween._isPlaying = false;

					if (!preserve) {
						delete this._tweens[tweenIds[i]];
					}
				}
			}

			tweenIds = Object.keys(this._tweensAddedDuringUpdate);
		}

		return true;

	}
};

var TWEEN = new _Group();

TWEEN.Group = _Group;
TWEEN._nextId = 0;
TWEEN.nextId = function () {
	return TWEEN._nextId++;
};


// Include a performance.now polyfill.
// In node.js, use process.hrtime.
if (typeof (window) === 'undefined' && typeof (process) !== 'undefined') {
	TWEEN.now = function () {
		var time = process.hrtime();

		// Convert [seconds, nanoseconds] to milliseconds.
		return time[0] * 1000 + time[1] / 1000000;
	};
}
// In a browser, use window.performance.now if it is available.
else if (typeof (window) !== 'undefined' &&
         window.performance !== undefined &&
		 window.performance.now !== undefined) {
	// This must be bound, because directly assigning this function
	// leads to an invocation exception in Chrome.
	TWEEN.now = window.performance.now.bind(window.performance);
}
// Use Date.now if it is available.
else if (Date.now !== undefined) {
	TWEEN.now = Date.now;
}
// Otherwise, use 'new Date().getTime()'.
else {
	TWEEN.now = function () {
		return new Date().getTime();
	};
}


TWEEN.Tween = function (object, group) {
	this._object = object;
	this._valuesStart = {};
	this._valuesEnd = {};
	this._valuesStartRepeat = {};
	this._duration = 1000;
	this._repeat = 0;
	this._repeatDelayTime = undefined;
	this._yoyo = false;
	this._isPlaying = false;
	this._reversed = false;
	this._delayTime = 0;
	this._startTime = null;
	this._easingFunction = TWEEN.Easing.Linear.None;
	this._interpolationFunction = TWEEN.Interpolation.Linear;
	this._chainedTweens = [];
	this._onStartCallback = null;
	this._onStartCallbackFired = false;
	this._onUpdateCallback = null;
	this._onCompleteCallback = null;
	this._onStopCallback = null;
	this._group = group || TWEEN;
	this._id = TWEEN.nextId();

};

TWEEN.Tween.prototype = {
	getId: function getId() {
		return this._id;
	},

	isPlaying: function isPlaying() {
		return this._isPlaying;
	},

	to: function to(properties, duration) {

		this._valuesEnd = properties;

		if (duration !== undefined) {
			this._duration = duration;
		}

		return this;

	},

	start: function start(time) {

		this._group.add(this);

		this._isPlaying = true;

		this._onStartCallbackFired = false;

		this._startTime = time !== undefined ? typeof time === 'string' ? TWEEN.now() + parseFloat(time) : time : TWEEN.now();
		this._startTime += this._delayTime;

		for (var property in this._valuesEnd) {

			// Check if an Array was provided as property value
			if (this._valuesEnd[property] instanceof Array) {

				if (this._valuesEnd[property].length === 0) {
					continue;
				}

				// Create a local copy of the Array with the start value at the front
				this._valuesEnd[property] = [this._object[property]].concat(this._valuesEnd[property]);

			}

			// If `to()` specifies a property that doesn't exist in the source object,
			// we should not set that property in the object
			if (this._object[property] === undefined) {
				continue;
			}

			// Save the starting value.
			this._valuesStart[property] = this._object[property];

			if ((this._valuesStart[property] instanceof Array) === false) {
				this._valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
			}

			this._valuesStartRepeat[property] = this._valuesStart[property] || 0;

		}

		return this;

	},

	stop: function stop() {

		if (!this._isPlaying) {
			return this;
		}

		this._group.remove(this);
		this._isPlaying = false;

		if (this._onStopCallback !== null) {
			this._onStopCallback(this._object);
		}

		this.stopChainedTweens();
		return this;

	},

	end: function end() {

		this.update(this._startTime + this._duration);
		return this;

	},

	stopChainedTweens: function stopChainedTweens() {

		for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
			this._chainedTweens[i].stop();
		}

	},

	group: function group(group) {
		this._group = group;
		return this;
	},

	delay: function delay(amount) {

		this._delayTime = amount;
		return this;

	},

	repeat: function repeat(times) {

		this._repeat = times;
		return this;

	},

	repeatDelay: function repeatDelay(amount) {

		this._repeatDelayTime = amount;
		return this;

	},

	yoyo: function yoyo(yy) {

		this._yoyo = yy;
		return this;

	},

	easing: function easing(eas) {

		this._easingFunction = eas;
		return this;

	},

	interpolation: function interpolation(inter) {

		this._interpolationFunction = inter;
		return this;

	},

	chain: function chain() {

		this._chainedTweens = arguments;
		return this;

	},

	onStart: function onStart(callback) {

		this._onStartCallback = callback;
		return this;

	},

	onUpdate: function onUpdate(callback) {

		this._onUpdateCallback = callback;
		return this;

	},

	onComplete: function onComplete(callback) {

		this._onCompleteCallback = callback;
		return this;

	},

	onStop: function onStop(callback) {

		this._onStopCallback = callback;
		return this;

	},

	update: function update(time) {

		var property;
		var elapsed;
		var value;

		if (time < this._startTime) {
			return true;
		}

		if (this._onStartCallbackFired === false) {

			if (this._onStartCallback !== null) {
				this._onStartCallback(this._object);
			}

			this._onStartCallbackFired = true;
		}

		elapsed = (time - this._startTime) / this._duration;
		elapsed = (this._duration === 0 || elapsed > 1) ? 1 : elapsed;

		value = this._easingFunction(elapsed);

		for (property in this._valuesEnd) {

			// Don't update properties that do not exist in the source object
			if (this._valuesStart[property] === undefined) {
				continue;
			}

			var start = this._valuesStart[property] || 0;
			var end = this._valuesEnd[property];

			if (end instanceof Array) {

				this._object[property] = this._interpolationFunction(end, value);

			} else {

				// Parses relative end values with start as base (e.g.: +10, -3)
				if (typeof (end) === 'string') {

					if (end.charAt(0) === '+' || end.charAt(0) === '-') {
						end = start + parseFloat(end);
					} else {
						end = parseFloat(end);
					}
				}

				// Protect against non numeric properties.
				if (typeof (end) === 'number') {
					this._object[property] = start + (end - start) * value;
				}

			}

		}

		if (this._onUpdateCallback !== null) {
			this._onUpdateCallback(this._object);
		}

		if (elapsed === 1) {

			if (this._repeat > 0) {

				if (isFinite(this._repeat)) {
					this._repeat--;
				}

				// Reassign starting values, restart by making startTime = now
				for (property in this._valuesStartRepeat) {

					if (typeof (this._valuesEnd[property]) === 'string') {
						this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
					}

					if (this._yoyo) {
						var tmp = this._valuesStartRepeat[property];

						this._valuesStartRepeat[property] = this._valuesEnd[property];
						this._valuesEnd[property] = tmp;
					}

					this._valuesStart[property] = this._valuesStartRepeat[property];

				}

				if (this._yoyo) {
					this._reversed = !this._reversed;
				}

				if (this._repeatDelayTime !== undefined) {
					this._startTime = time + this._repeatDelayTime;
				} else {
					this._startTime = time + this._delayTime;
				}

				return true;

			} else {

				if (this._onCompleteCallback !== null) {

					this._onCompleteCallback(this._object);
				}

				for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
					// Make the chained tweens start exactly at the time they should,
					// even if the `update()` method was called way past the duration of the tween
					this._chainedTweens[i].start(this._startTime + this._duration);
				}

				return false;

			}

		}

		return true;

	}
};


TWEEN.Easing = {

	Linear: {

		None: function (k) {

			return k;

		}

	},

	Quadratic: {

		In: function (k) {

			return k * k;

		},

		Out: function (k) {

			return k * (2 - k);

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k;
			}

			return - 0.5 * (--k * (k - 2) - 1);

		}

	},

	Cubic: {

		In: function (k) {

			return k * k * k;

		},

		Out: function (k) {

			return --k * k * k + 1;

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k + 2);

		}

	},

	Quartic: {

		In: function (k) {

			return k * k * k * k;

		},

		Out: function (k) {

			return 1 - (--k * k * k * k);

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k;
			}

			return - 0.5 * ((k -= 2) * k * k * k - 2);

		}

	},

	Quintic: {

		In: function (k) {

			return k * k * k * k * k;

		},

		Out: function (k) {

			return --k * k * k * k * k + 1;

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return 0.5 * k * k * k * k * k;
			}

			return 0.5 * ((k -= 2) * k * k * k * k + 2);

		}

	},

	Sinusoidal: {

		In: function (k) {

			return 1 - Math.cos(k * Math.PI / 2);

		},

		Out: function (k) {

			return Math.sin(k * Math.PI / 2);

		},

		InOut: function (k) {

			return 0.5 * (1 - Math.cos(Math.PI * k));

		}

	},

	Exponential: {

		In: function (k) {

			return k === 0 ? 0 : Math.pow(1024, k - 1);

		},

		Out: function (k) {

			return k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);

		},

		InOut: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			if ((k *= 2) < 1) {
				return 0.5 * Math.pow(1024, k - 1);
			}

			return 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);

		}

	},

	Circular: {

		In: function (k) {

			return 1 - Math.sqrt(1 - k * k);

		},

		Out: function (k) {

			return Math.sqrt(1 - (--k * k));

		},

		InOut: function (k) {

			if ((k *= 2) < 1) {
				return - 0.5 * (Math.sqrt(1 - k * k) - 1);
			}

			return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);

		}

	},

	Elastic: {

		In: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);

		},

		Out: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;

		},

		InOut: function (k) {

			if (k === 0) {
				return 0;
			}

			if (k === 1) {
				return 1;
			}

			k *= 2;

			if (k < 1) {
				return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
			}

			return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;

		}

	},

	Back: {

		In: function (k) {

			var s = 1.70158;

			return k * k * ((s + 1) * k - s);

		},

		Out: function (k) {

			var s = 1.70158;

			return --k * k * ((s + 1) * k + s) + 1;

		},

		InOut: function (k) {

			var s = 1.70158 * 1.525;

			if ((k *= 2) < 1) {
				return 0.5 * (k * k * ((s + 1) * k - s));
			}

			return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);

		}

	},

	Bounce: {

		In: function (k) {

			return 1 - TWEEN.Easing.Bounce.Out(1 - k);

		},

		Out: function (k) {

			if (k < (1 / 2.75)) {
				return 7.5625 * k * k;
			} else if (k < (2 / 2.75)) {
				return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
			} else if (k < (2.5 / 2.75)) {
				return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
			} else {
				return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
			}

		},

		InOut: function (k) {

			if (k < 0.5) {
				return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
			}

			return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;

		}

	}

};

TWEEN.Interpolation = {

	Linear: function (v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.Linear;

		if (k < 0) {
			return fn(v[0], v[1], f);
		}

		if (k > 1) {
			return fn(v[m], v[m - 1], m - f);
		}

		return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);

	},

	Bezier: function (v, k) {

		var b = 0;
		var n = v.length - 1;
		var pw = Math.pow;
		var bn = TWEEN.Interpolation.Utils.Bernstein;

		for (var i = 0; i <= n; i++) {
			b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
		}

		return b;

	},

	CatmullRom: function (v, k) {

		var m = v.length - 1;
		var f = m * k;
		var i = Math.floor(f);
		var fn = TWEEN.Interpolation.Utils.CatmullRom;

		if (v[0] === v[m]) {

			if (k < 0) {
				i = Math.floor(f = m * (1 + k));
			}

			return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);

		} else {

			if (k < 0) {
				return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
			}

			if (k > 1) {
				return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
			}

			return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);

		}

	},

	Utils: {

		Linear: function (p0, p1, t) {

			return (p1 - p0) * t + p0;

		},

		Bernstein: function (n, i) {

			var fc = TWEEN.Interpolation.Utils.Factorial;

			return fc(n) / fc(i) / fc(n - i);

		},

		Factorial: (function () {

			var a = [1];

			return function (n) {

				var s = 1;

				if (a[n]) {
					return a[n];
				}

				for (var i = n; i > 1; i--) {
					s *= i;
				}

				a[n] = s;
				return s;

			};

		})(),

		CatmullRom: function (p0, p1, p2, p3, t) {

			var v0 = (p2 - p0) * 0.5;
			var v1 = (p3 - p1) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;

			return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;

		}

	}

};

// UMD (Universal Module Definition)
(function (root) {

	if (true) {

		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return TWEEN;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

	} else {}

})(this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/hypergl/lib/application.tag.js":
/*!*****************************************************!*\
  !*** ./node_modules/hypergl/lib/application.tag.js ***!
  \*****************************************************/
/*! exports provided: updateQuene, Application, getApplicationInstance */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateQuene", function() { return updateQuene; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Application", function() { return Application; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicationInstance", function() { return getApplicationInstance; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/hypergl/lib/component.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./node_modules/hypergl/lib/config.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var application;
var updateQuene = [];
var Application = /** @class */ (function (_super) {
    __extends(Application, _super);
    function Application(props, context, innerContext) {
        var _this = _super.call(this, props, context, innerContext) || this;
        innerContext.canvas.focus();
        var app = new pc.Application(innerContext.canvas, {
            mouse: innerContext.mouse,
            keyboard: innerContext.keyboard
        });
        application = app;
        app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);
        app.setCanvasResolution(pc.RESOLUTION_AUTO);
        app.scene.ambientLight = new pc.Color(0.2, 0.2, 0.2);
        app.start();
        app.on('update', function (dt) { updateQuene.forEach(function (cb) { cb(dt); }); });
        innerContext.app = app;
        _this.props.gravity && app.systems.rigidbody.setGravity(_this.props.gravity);
        _this.pc = app;
        _this.pc[_config__WEBPACK_IMPORTED_MODULE_1__["KEY"]] = _this;
        return _this;
        // console.log('application init',this);
    }
    Application.prototype.render = function () {
        return this.props.children;
    };
    Application.basename = 'application';
    return Application;
}(_component__WEBPACK_IMPORTED_MODULE_0__["Component"]));

function getApplicationInstance() {
    return application;
}
;
//# sourceMappingURL=application.tag.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/component.js":
/*!***********************************************!*\
  !*** ./node_modules/hypergl/lib/component.js ***!
  \***********************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
var Component = /** @class */ (function () {
    // parent: null | Component;
    // children: Component[] = [];
    // parent: BABYLON.TransformNode;
    function Component(props, context, innerContext) {
        this.context = context;
        this.innerContext = innerContext;
        this.props = props;
    }
    return Component;
}());

//# sourceMappingURL=component.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/audio/audiolisten.js":
/*!******************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/audio/audiolisten.js ***!
  \******************************************************************/
/*! exports provided: AudioListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AudioListen", function() { return AudioListen; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var AudioListen = /** @class */ (function (_super) {
    __extends(AudioListen, _super);
    function AudioListen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AudioListen;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=audiolisten.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/audio/index.js":
/*!************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/audio/index.js ***!
  \************************************************************/
/*! exports provided: Sound, AudioListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sound__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sound */ "./node_modules/hypergl/lib/components/audio/sound.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sound", function() { return _sound__WEBPACK_IMPORTED_MODULE_0__["Sound"]; });

/* harmony import */ var _audiolisten__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audiolisten */ "./node_modules/hypergl/lib/components/audio/audiolisten.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioListen", function() { return _audiolisten__WEBPACK_IMPORTED_MODULE_1__["AudioListen"]; });



//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/audio/sound.js":
/*!************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/audio/sound.js ***!
  \************************************************************/
/*! exports provided: Sound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sound", function() { return Sound; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var Sound = /** @class */ (function (_super) {
    __extends(Sound, _super);
    function Sound() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Sound.addComponent = function (entity, node) {
        var component = _super.addComponent.call(this, entity, node);
        // entity.addComponent('sound');
        // add footsteps slot
        if (node.props.asset) {
            if (node.props.asset instanceof Promise) {
                node.props.asset.then(function (asset) {
                    entity.sound.addSlot('footsteps', {
                        asset: asset.resource,
                        pitch: 1.7,
                        loop: true,
                        autoPlay: true
                    });
                });
            }
            else {
                entity.sound.addSlot('footsteps', {
                    asset: node.props.asset.resource,
                    pitch: 1.7,
                    loop: true,
                    autoPlay: true
                });
            }
        }
        return component;
    };
    return Sound;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=sound.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/camera/camera.js":
/*!**************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/camera/camera.js ***!
  \**************************************************************/
/*! exports provided: Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    function Camera() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Camera;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=camera.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/collision/collision.js":
/*!********************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/collision/collision.js ***!
  \********************************************************************/
/*! exports provided: Collision */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Collision", function() { return Collision; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var Collision = /** @class */ (function (_super) {
    __extends(Collision, _super);
    function Collision() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Collision.addComponent = function (entity, node) {
        var component = _super.addComponent.call(this, entity, node);
        var arr = ['collisionstart', 'collisionend', 'contact', 'triggerenter', 'triggerleave'];
        arr.forEach(function (key) {
            node.props[key] && component.on(key, function (arg) {
                node.props[key](arg, entity);
            }, entity);
        });
        return component;
    };
    return Collision;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=collision.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/index.js":
/*!******************************************************!*\
  !*** ./node_modules/hypergl/lib/components/index.js ***!
  \******************************************************/
/*! exports provided: Camera, PcComponent, Model, Light, ParticleSystem, RigidBody, Collision, Sound, AudioListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _camera_camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera/camera */ "./node_modules/hypergl/lib/components/camera/camera.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return _camera_camera__WEBPACK_IMPORTED_MODULE_0__["Camera"]; });

/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PcComponent", function() { return _pc_component__WEBPACK_IMPORTED_MODULE_1__["PcComponent"]; });

/* harmony import */ var _model_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model/model */ "./node_modules/hypergl/lib/components/model/model.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return _model_model__WEBPACK_IMPORTED_MODULE_2__["Model"]; });

/* harmony import */ var _light_light__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./light/light */ "./node_modules/hypergl/lib/components/light/light.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return _light_light__WEBPACK_IMPORTED_MODULE_3__["Light"]; });

/* harmony import */ var _particlesystem_particlesystem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./particlesystem/particlesystem */ "./node_modules/hypergl/lib/components/particlesystem/particlesystem.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return _particlesystem_particlesystem__WEBPACK_IMPORTED_MODULE_4__["ParticleSystem"]; });

/* harmony import */ var _rigidbody_rigidbody__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rigidbody/rigidbody */ "./node_modules/hypergl/lib/components/rigidbody/rigidbody.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RigidBody", function() { return _rigidbody_rigidbody__WEBPACK_IMPORTED_MODULE_5__["RigidBody"]; });

/* harmony import */ var _collision_collision__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./collision/collision */ "./node_modules/hypergl/lib/components/collision/collision.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Collision", function() { return _collision_collision__WEBPACK_IMPORTED_MODULE_6__["Collision"]; });

/* harmony import */ var _audio_index__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./audio/index */ "./node_modules/hypergl/lib/components/audio/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sound", function() { return _audio_index__WEBPACK_IMPORTED_MODULE_7__["Sound"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioListen", function() { return _audio_index__WEBPACK_IMPORTED_MODULE_7__["AudioListen"]; });









//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/light/light.js":
/*!************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/light/light.js ***!
  \************************************************************/
/*! exports provided: Light */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return Light; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var Light = /** @class */ (function (_super) {
    __extends(Light, _super);
    function Light() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Light;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=light.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/model/model.js":
/*!************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/model/model.js ***!
  \************************************************************/
/*! exports provided: Model */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return Model; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var Model = /** @class */ (function (_super) {
    __extends(Model, _super);
    function Model() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Model.addComponent = function (entity, node) {
        var component;
        if (node.props.type === 'model') {
            component = _super.addComponent.call(this, entity, node, 'model', 'type');
        }
        else {
            component = _super.addComponent.call(this, entity, node);
        }
        _super.asyncAssetsSet.call(this, entity, node, 'model');
        if (node.props.material) {
            if (node.props.material instanceof Promise) {
                node.props.material.then(function (res) {
                    entity.model.model.meshInstances.forEach(function (mesh) {
                        mesh.material = res;
                    });
                });
            }
            else {
                node.props.material && entity.model.model.meshInstances.forEach(function (mesh) {
                    mesh.material = node.props.material;
                });
            }
        }
        return component;
    };
    return Model;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=model.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/particlesystem/particlesystem.js":
/*!******************************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/particlesystem/particlesystem.js ***!
  \******************************************************************************/
/*! exports provided: ParticleSystem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return ParticleSystem; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ParticleSystem = /** @class */ (function (_super) {
    __extends(ParticleSystem, _super);
    function ParticleSystem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParticleSystem.addComponent = function (entity, node) {
        var component = _super.addComponent.call(this, entity, node, 'colorMap', 'normalMap');
        // props.colorMap && props.colorMap.then((asset) => {
        //     entity.particlesystem.colorMap = asset.resource;
        // })
        _super.asyncAssetsSet.call(this, entity, node, 'colorMap', 'normalMap');
        return component;
    };
    return ParticleSystem;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=particlesystem.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/pc.component.js":
/*!*************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/pc.component.js ***!
  \*************************************************************/
/*! exports provided: PcComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PcComponent", function() { return PcComponent; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../component */ "./node_modules/hypergl/lib/component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var PcComponent = /** @class */ (function (_super) {
    __extends(PcComponent, _super);
    function PcComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PcComponent.prototype.isPcComponent = function () {
        return true;
    };
    PcComponent.addComponent = function (entity, node) {
        var keys = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            keys[_i - 2] = arguments[_i];
        }
        keys.push('children');
        var obj = {};
        for (var key in node.props) {
            !keys.includes(key) && (obj[key] = node.props[key]);
        }
        return entity.addComponent(node.type, obj);
    };
    PcComponent.asyncAssetsSet = function (entity, node) {
        var keys = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            keys[_i - 2] = arguments[_i];
        }
        keys.forEach(function (key) {
            var res = node.props[key];
            if (res) {
                if (res instanceof Promise) {
                    res.then(function (asset) {
                        entity[node.type][key] = asset.resource;
                    });
                }
                else {
                    entity[node.type][key] = res.resource;
                }
            }
        });
        // props[] && props.colorMap.then((asset) => {
        //     entity.particlesystem.colorMap = asset.resource;
        // })
    };
    Object.defineProperty(PcComponent, "basename", {
        get: function () {
            return this.name.toLowerCase();
        },
        enumerable: true,
        configurable: true
    });
    return PcComponent;
}(_component__WEBPACK_IMPORTED_MODULE_0__["Component"]));

//# sourceMappingURL=pc.component.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/components/rigidbody/rigidbody.js":
/*!********************************************************************!*\
  !*** ./node_modules/hypergl/lib/components/rigidbody/rigidbody.js ***!
  \********************************************************************/
/*! exports provided: RigidBody */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RigidBody", function() { return RigidBody; });
/* harmony import */ var _pc_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pc.component */ "./node_modules/hypergl/lib/components/pc.component.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var RigidBody = /** @class */ (function (_super) {
    __extends(RigidBody, _super);
    function RigidBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RigidBody;
}(_pc_component__WEBPACK_IMPORTED_MODULE_0__["PcComponent"]));

//# sourceMappingURL=rigidbody.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/config.js":
/*!********************************************!*\
  !*** ./node_modules/hypergl/lib/config.js ***!
  \********************************************/
/*! exports provided: KEY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEY", function() { return KEY; });
var KEY = '__hpc__';
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/entity.tag.js":
/*!************************************************!*\
  !*** ./node_modules/hypergl/lib/entity.tag.js ***!
  \************************************************/
/*! exports provided: Entity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Entity", function() { return Entity; });
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ "./node_modules/hypergl/lib/component.js");
/* harmony import */ var _string_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string_component */ "./node_modules/hypergl/lib/string_component.js");
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ "./node_modules/hypergl/lib/config.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




function getPcParent(parent) {
    while (parent) {
        if (parent instanceof Entity) {
            return parent.pc;
        }
        else {
            parent = parent.parent;
        }
    }
    return Object(_application_tag__WEBPACK_IMPORTED_MODULE_2__["getApplicationInstance"])().root;
}
var Entity = /** @class */ (function (_super) {
    __extends(Entity, _super);
    function Entity(props, context, innerContext, parent) {
        var _this = _super.call(this, props, context, innerContext) || this;
        parent = getPcParent(parent);
        var entity = new pc.Entity();
        entity.name = props.name;
        props.tag && props.tag.split(' ').filter(function (x) { return x !== ''; }).forEach(function (x) {
            entity.tags.add(x);
        });
        _this.props.position && entity.setLocalPosition(_this.props.position);
        _this.props.rotation && entity.rotateLocal(_this.props.rotation);
        _this.props.scale && entity.setLocalScale(_this.props.scale);
        var children = props.children;
        var renderChildren = [];
        for (var i = 0; i < children.length; i++) {
            var node = children[i];
            if (node == null) {
                continue;
            }
            if (node.type === Entity.basename || node.type.isHpcComponent) {
                renderChildren.push(node);
                continue;
            }
            if (typeof node.type !== 'string') {
                node.type = node.type.basename;
            }
            // if(node.type==='light'){debugger;delete node.props.children}
            // entity.addComponent(node.type, node.props);
            _string_component__WEBPACK_IMPORTED_MODULE_1__["stringToComponent"][node.type].addComponent(entity, node);
        }
        if (renderChildren.length > 0) {
            // parent.addChild(entity);
            _this.render = function () { return renderChildren; };
        }
        // if (parent) {
        //     parent.pc.addChild(entity);
        // } else {
        //     innerContext.app.root.addChild(entity);
        // }
        parent.addChild(entity);
        _this.pc = entity;
        _this.pc[_config__WEBPACK_IMPORTED_MODULE_3__["KEY"]] = _this;
        return _this;
    }
    Entity.basename = 'entity';
    return Entity;
}(_component__WEBPACK_IMPORTED_MODULE_0__["Component"]));

//# sourceMappingURL=entity.tag.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/h.js":
/*!***************************************!*\
  !*** ./node_modules/hypergl/lib/h.js ***!
  \***************************************/
/*! exports provided: h */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ "./node_modules/hypergl/lib/node.js");

function h(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        children[_i - 2] = arguments[_i];
    }
    var newChildren = [];
    for (var i = 0; i < children.length; i++) {
        var item = children[i];
        if (typeof item === 'boolean') {
            newChildren.push(null);
        }
        else if (Array.isArray(item)) {
            addChild(newChildren, item);
        }
        else {
            newChildren.push(item);
        }
    }
    return new _node__WEBPACK_IMPORTED_MODULE_0__["Node"](type, props, newChildren);
}
function addChild(newChildren, item) {
    var x;
    while (item.length !== 0) {
        x = item.pop();
        if (Array.isArray(x)) {
            addChild(newChildren, x);
        }
        else {
            newChildren.push(x);
        }
    }
}
//# sourceMappingURL=h.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/hypergl/lib/index.js ***!
  \*******************************************/
/*! exports provided: render, h, Application, Entity, HpcComponent, pc, default, loadAssetsFromUrl, createMaterial, addUpdateListen, randomRange, randomEnum, once, onceTime, getVertexArr, getHpc, Camera, PcComponent, Model, Light, ParticleSystem, RigidBody, Collision, Sound, AudioListen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pc", function() { return pc; });
/* harmony import */ var _playcanvas_playcanvas_latest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./playcanvas/playcanvas-latest.js */ "./node_modules/hypergl/lib/playcanvas/playcanvas-latest.js");
/* harmony import */ var _playcanvas_playcanvas_latest_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_playcanvas_playcanvas_latest_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Application", function() { return _application_tag__WEBPACK_IMPORTED_MODULE_1__["Application"]; });

/* harmony import */ var _script_commponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./script_commponent */ "./node_modules/hypergl/lib/script_commponent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HpcComponent", function() { return _script_commponent__WEBPACK_IMPORTED_MODULE_2__["HpcComponent"]; });

/* harmony import */ var _entity_tag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./entity.tag */ "./node_modules/hypergl/lib/entity.tag.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Entity", function() { return _entity_tag__WEBPACK_IMPORTED_MODULE_3__["Entity"]; });

/* harmony import */ var _h__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./h */ "./node_modules/hypergl/lib/h.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "h", function() { return _h__WEBPACK_IMPORTED_MODULE_4__["h"]; });

/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./render */ "./node_modules/hypergl/lib/render.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _render__WEBPACK_IMPORTED_MODULE_5__["render"]; });

/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util */ "./node_modules/hypergl/lib/util.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "loadAssetsFromUrl", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["loadAssetsFromUrl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createMaterial", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["createMaterial"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addUpdateListen", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["addUpdateListen"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomRange", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["randomRange"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "randomEnum", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["randomEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "once", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["once"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onceTime", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["onceTime"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getVertexArr", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["getVertexArr"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getHpc", function() { return _util__WEBPACK_IMPORTED_MODULE_6__["getHpc"]; });

/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components */ "./node_modules/hypergl/lib/components/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["Camera"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PcComponent", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["PcComponent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Model", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["Model"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["Light"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParticleSystem", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["ParticleSystem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RigidBody", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["RigidBody"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Collision", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["Collision"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Sound", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["Sound"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AudioListen", function() { return _components__WEBPACK_IMPORTED_MODULE_7__["AudioListen"]; });

/// <reference path="../typings/index.d.ts" />




// import { loadAssetsFromUrl, createMaterial, randomRange, randomEnum, once } from './util';


var hpc = {
    h: _h__WEBPACK_IMPORTED_MODULE_4__["h"]
};
window['hpc'] = hpc;
var pc = window['pc'];

/* harmony default export */ __webpack_exports__["default"] = (hpc);


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/node.js":
/*!******************************************!*\
  !*** ./node_modules/hypergl/lib/node.js ***!
  \******************************************/
/*! exports provided: Node */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Node", function() { return Node; });
var Node = /** @class */ (function () {
    function Node(type, props, children) {
        this.type = type;
        this.props = props;
        this.children = children;
        this.props = this.props == null ? {} : this.props;
        this.props.children = children;
    }
    return Node;
}());

//# sourceMappingURL=node.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/playcanvas/ammo.js":
/*!*****************************************************!*\
  !*** ./node_modules/hypergl/lib/playcanvas/ammo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, __dirname) {
// This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.
var Ammo = (function() {
    var Module = this;
  
  var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}
  
  var ENVIRONMENT_IS_NODE=false;
  var ENVIRONMENT_IS_WEB=typeof window==="object";
  var ENVIRONMENT_IS_WORKER=typeof importScripts==="function";
  var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;

  if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=function print(x){process["stdout"].write(x+"\n")};if(!Module["printErr"])Module["printErr"]=function printErr(x){process["stderr"].write(x+"\n")};var nodeFS={};var nodePath={};Module["read"]=function read(filename,binary){filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);if(!ret&&filename!=nodePath["resolve"](filename)){filename=path.join(__dirname,"..","src",filename);ret=nodeFS["readFileSync"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module["readBinary"]=function readBinary(filename){return Module["read"](filename,true)};Module["load"]=function load(f){globalEval(read(f))};Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/");Module["arguments"]=process["argv"].slice(2);if(true){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}))}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available (jsc?)"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}this["Module"]=Module}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WEB){window["Module"]=Module}else{Module["load"]=importScripts}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){throw"NO_DYNAMIC_EXECUTION was set, cannot eval"}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module["dynCall_"+sig].apply(null,args)}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),getAsmConst:(function(code,numArgs){if(!Runtime.asmConstCache)Runtime.asmConstCache={};var func=Runtime.asmConstCache[code];if(func)return func;var args=[];for(var i=0;i<numArgs;i++){args.push(String.fromCharCode(36)+i)}var source=Pointer_stringify(code);if(source[0]==='"'){if(source.indexOf('"',1)===source.length-1){source=source.substr(1,source.length-2)}else{abort("invalid EM_ASM input |"+source+"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)")}}abort("NO_DYNAMIC_EXECUTION was set, cannot eval, so EM_ASM is not functional");return Runtime.asmConstCache[code]=evalled}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),UTF8Processor:(function(){var buffer=[];var needed=0;this.processCChar=(function(code){code=code&255;if(buffer.length==0){if((code&128)==0){return String.fromCharCode(code)}buffer.push(code);if((code&224)==192){needed=1}else if((code&240)==224){needed=2}else{needed=3}return""}if(needed){buffer.push(code);needed--;if(needed>0)return""}var c1=buffer[0];var c2=buffer[1];var c3=buffer[2];var c4=buffer[3];var ret;if(buffer.length==2){ret=String.fromCharCode((c1&31)<<6|c2&63)}else if(buffer.length==3){ret=String.fromCharCode((c1&15)<<12|(c2&63)<<6|c3&63)}else{var codePoint=(c1&7)<<18|(c2&63)<<12|(c3&63)<<6|c4&63;ret=String.fromCharCode(((codePoint-65536)/1024|0)+55296,(codePoint-65536)%1024+56320)}buffer.length=0;return ret});this.processJSString=function processJSString(string){string=unescape(encodeURIComponent(string));var ret=[];for(var i=0;i<string.length;i++){ret.push(string.charCodeAt(i))}return ret}}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY)enlargeMemory();return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}var globalScope=this;function getCFunc(ident){var func=Module["_"+ident];if(!func){abort("NO_DYNAMIC_EXECUTION was set, cannot eval - ccall/cwrap are not functional")}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var stack=0;var JSfuncs={"stackSave":(function(){stack=Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore(stack)}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args){var func=getCFunc(ident);var cArgs=[];if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0)JSfuncs["stackRestore"]();return ret};var sourceRegex=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){funcstr+=JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"="+convertCode.returnValue+";"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){funcstr+=JSsource["stackRestore"].body+";"}funcstr+="return ret})";abort("NO_DYNAMIC_EXECUTION was set, cannot eval - ccall is not functional")}}))();Module["cwrap"]=cwrap;Module["ccall"]=ccall;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function Pointer_stringify(ptr,length){if(length===0)return"";var hasUtf=false;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];if(t>=128)hasUtf=true;else if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(!hasUtf){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}var utf8=new Runtime.UTF8Processor;for(i=0;i<length;i++){t=HEAPU8[ptr+i>>0];ret+=utf8.processCChar(t)}return ret}Module["Pointer_stringify"]=Pointer_stringify;function UTF16ToString(ptr){var i=0;var str="";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module["UTF16ToString"]=UTF16ToString;function stringToUTF16(str,outPtr){for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr+i*2>>1]=codeUnit}HEAP16[outPtr+str.length*2>>1]=0}Module["stringToUTF16"]=stringToUTF16;function UTF32ToString(ptr){var i=0;var str="";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module["UTF32ToString"]=UTF32ToString;function stringToUTF32(str,outPtr){var iChar=0;for(var iCodeUnit=0;iCodeUnit<str.length;++iCodeUnit){var codeUnit=str.charCodeAt(iCodeUnit);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++iCodeUnit);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr+iChar*4>>2]=codeUnit;++iChar}HEAP32[outPtr+iChar*4>>2]=0}Module["stringToUTF32"]=stringToUTF32;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={"v":"void","b":"bool","c":"char","s":"short","i":"int","l":"long","f":"float","d":"double","w":"wchar_t","a":"signed char","h":"unsigned char","t":"unsigned short","j":"unsigned int","m":"unsigned long","x":"long long","y":"unsigned long long","z":"..."};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre="";for(var a=0;a<i;a++)pre+=" ";Module.print(pre+"^")}function parseNested(){i++;if(func[i]==="K")i++;var parts=[];while(func[i]!=="E"){if(func[i]==="S"){i++;var next=func.indexOf("_",i);var num=func.substring(i,next)||0;parts.push(subs[num]||"?");i=next+1;continue}if(func[i]==="C"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret="",list=[];function flushList(){return"("+list.join(", ")+")"}var name;if(func[i]==="N"){name=parseNested().join("::");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]==="K"||first&&func[i]==="L")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]==="I"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+" "+name+"<"+iList.join(", ")+">"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case"P":list.push(parse(true,1,true)[0]+"*");break;case"R":list.push(parse(true,1,true)[0]+"&");break;case"L":{i++;var end=func.indexOf("E",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case"A":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!=="_")throw"?";i++;list.push(parse(true,1,true)[0]+" ["+size+"]");break};case"E":break paramLoop;default:ret+="?"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]==="void")list=[];if(rawList){if(ret){list.push(ret+"?")}return list}else{return ret+flushList()}}var final=func;try{if(func=="Object._main"||func=="_main"){return"main()"}if(typeof func==="number")func=Pointer_stringify(func);if(func[0]!=="_")return func;if(func[1]!=="_")return func;if(func[2]!=="Z")return func;switch(func[3]){case"n":return"operator new()";case"d":return"operator delete()"}final=parse()}catch(e){final+="?"}if(final.indexOf("?")>=0&&!hasLibcxxabi){Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling")}return final}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module["stackTrace"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){return x+4095&-4096}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+TOTAL_MEMORY+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.")}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||67108864;var FAST_MEMORY=Module["FAST_MEMORY"]||2097152;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){Module.printErr("increasing TOTAL_MEMORY to "+totalMemory+" to be compliant with the asm.js spec");TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!=="undefined"&&typeof Float64Array!=="undefined"&&!!(new Int32Array(1))["subarray"]&&!!(new Int32Array(1))["set"],"JS engine does not provide full typed array support");var buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,"Typed arrays 2 must be run on a little-endian system");Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=Module.addOnPreRun=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=Module.addOnInit=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=Module.addOnPreMain=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=Module.addOnExit=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=Module.addOnPostRun=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var ret=(new Runtime.UTF8Processor).processJSString(stringy);if(length){ret.length=length}if(!dontAddNull){ret.push(0)}return ret}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer+i>>0]=array[i]}}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;i++){HEAP8[buffer+i>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer+str.length>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var memoryInitializer=null;STATIC_BASE=8;STATICTOP=STATIC_BASE+21648;__ATINIT__.push({func:(function(){__GLOBAL__I_a()})});allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,49,55,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,49,51,98,116,84,121,112,101,100,79,98,106,101,99,116,0,184,81,0,0,136,0,0,0,64,82,0,0,112,0,0,0,0,0,0,0,1,0,0,0,152,0,0,0,2,4,0,0,0,0,0,0,24,1,0,0,4,0,0,0,5,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,49,57,98,116,71,104,111,115,116,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,50,53,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,184,81,0,0,240,0,0,0,224,81,0,0,216,0,0,0,16,1,0,0,0,0,0,0,49,56,98,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,0,0,0,184,81,0,0,40,1,0,0,0,0,0,0,192,1,0,0,6,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,52,67,108,111,115,101,115,116,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,184,81,0,0,144,1,0,0,224,81,0,0,96,1,0,0,184,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,2,0,0,8,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,50,48,98,116,68,101,102,97,117,108,116,77,111,116,105,111,110,83,116,97,116,101,0,0,49,51,98,116,77,111,116,105,111,110,83,116,97,116,101,0,184,81,0,0,128,2,0,0,224,81,0,0,104,2,0,0,144,2,0,0,0,0,0,0,0,0,0,0,48,3,0,0,10,0,0,0,11,0,0,0,2,0,0,0,2,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,55,67,108,111,115,101,115,116,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,0,0,0,0,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,0,0,0,0,184,81,0,0,248,2,0,0,224,81,0,0,192,2,0,0,40,3,0,0,0,0,0,0,0,0,0,0,176,3,0,0,12,0,0,0,13,0,0,0,3,0,0,0,1,0,0,0,50,57,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,0,0,0,0,0,184,81,0,0,120,3,0,0,224,81,0,0,88,3,0,0,168,3,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,67,111,110,99,114,101,116,101,67,111,110,116,97,99,116,82,101,115,117,108,116,67,97,108,108,98,97,99,107,58,58,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,97,100,100,83,105,110,103,108,101,82,101,115,117,108,116,40,36,49,44,36,50,44,36,51,44,36,52,44,36,53,44,36,54,44,36,55,41,59,32,125,0,0,0,0,0,0,0,0,56,5,0,0,14,0,0,0,15,0,0,0,16,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,50,49,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,0,224,81,0,0,32,5,0,0,160,0,0,0,0,0,0,0,98,116,67,111,110,101,84,119,105,115,116,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,0,0,0,0,0,0,0,0,0,0,48,8,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,5,0,0,0,3,0,0,0,21,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,22,0,0,0,7,0,0,0,1,0,0,0,3,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,23,0,0,0,13,0,0,0,4,0,0,0,14,0,0,0,15,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,24,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,1,0,0,0,2,0,0,0,25,0,0,0,20,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,26,0,0,0,21,0,0,0,6,0,0,0,0,0,0,0,100,101,98,117,103,68,114,97,119,87,111,114,108,100,0,0,115,121,110,99,104,114,111,110,105,122,101,77,111,116,105,111,110,83,116,97,116,101,115,0,115,116,101,112,83,105,109,117,108,97,116,105,111,110,0,0,105,110,116,101,114,110,97,108,83,105,110,103,108,101,83,116,101,112,83,105,109,117,108,97,116,105,111,110,0,0,0,0,117,112,100,97,116,101,65,99,116,105,111,110,115,0,0,0,117,112,100,97,116,101,65,99,116,105,118,97,116,105,111,110,83,116,97,116,101,0,0,0,115,111,108,118,101,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,99,97,108,99,117,108,97,116,101,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,114,101,97,116,101,80,114,101,100,105,99,116,105,118,101,67,111,110,116,97,99,116,115,0,0,0,0,0,0,0,0,114,101,108,101,97,115,101,32,112,114,101,100,105,99,116,105,118,101,32,99,111,110,116,97,99,116,32,109,97,110,105,102,111,108,100,115,0,0,0,0,112,114,101,100,105,99,116,105,118,101,32,99,111,110,118,101,120,83,119,101,101,112,84,101,115,116,0,0,0,0,0,0,105,110,116,101,103,114,97,116,101,84,114,97,110,115,102,111,114,109,115,0,0,0,0,0,67,67,68,32,109,111,116,105,111,110,32,99,108,97,109,112,105,110,103,0,0,0,0,0,97,112,112,108,121,32,115,112,101,99,117,108,97,116,105,118,101,32,99,111,110,116,97,99,116,32,114,101,115,116,105,116,117,116,105,111,110,0,0,0,112,114,101,100,105,99,116,85,110,99,111,110,115,116,114,97,105,110,116,77,111,116,105,111,110,0,0,0,0,0,0,0,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,0,0,50,51,98,116,68,105,115,99,114,101,116,101,68,121,110,97,109,105,99,115,87,111,114,108,100,0,0,0,0,0,0,0,49,53,98,116,68,121,110,97,109,105,99,115,87,111,114,108,100,0,0,0,0,0,0,0,224,81,0,0,8,8,0,0,184,29,0,0,0,0,0,0,224,81,0,0,232,7,0,0,32,8,0,0,0,0,0,0,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,68,97,116,97,0,0,0,0,0,0,0,83,80,72,69,82,69,0,0,0,0,0,0,168,8,0,0,27,0,0,0,28,0,0,0,6,0,0,0,4,0,0,0,51,52,98,116,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,0,0,0,224,81,0,0,128,8,0,0,48,3,0,0,0,0,0,0,0,0,0,0,40,9,0,0,29,0,0,0,30,0,0,0,1,0,0,0,0,0,0,0,50,55,73,110,112,108,97,99,101,83,111,108,118,101,114,73,115,108,97,110,100,67,97,108,108,98,97,99,107,0,0,0,78,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,49,52,73,115,108,97,110,100,67,97,108,108,98,97,99,107,69,0,0,0,184,81,0,0,240,8,0,0,224,81,0,0,208,8,0,0,32,9,0,0,0,0,0,0,0,0,0,0,144,9,0,0,31,0,0,0,32,0,0,0,33,0,0,0,1,0,0,0,22,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,34,0,0,0,50,51,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,224,81,0,0,112,9,0,0,160,0,0,0,0,0,0,0,98,116,71,101,110,101,114,105,99,54,68,111,102,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,0,0,0,0,0,0,0,0,16,10,0,0,35,0,0,0,36,0,0,0,37,0,0,0,1,0,0,0,24,0,0,0,25,0,0,0,1,0,0,0,3,0,0,0,6,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,49,55,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,224,81,0,0,248,9,0,0,160,0,0,0,0,0,0,0,98,116,72,105,110,103,101,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,0,0,0,0,56,11,0,0,38,0,0,0,39,0,0,0,1,0,0,0,26,0,0,0,27,0,0,0,2,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,3,0,0,0,9,0,0,0,40,0,0,0,10,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,48,98,116,75,105,110,101,109,97,116,105,99,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,0,0,0,0,0,0,0,0,51,48,98,116,67,104,97,114,97,99,116,101,114,67,111,110,116,114,111,108,108,101,114,73,110,116,101,114,102,97,99,101,0,0,0,0,0,0,0,0,49,55,98,116,65,99,116,105,111,110,73,110,116,101,114,102,97,99,101,0,0,0,0,0,184,81,0,0,8,11,0,0,224,81,0,0,224,10,0,0,32,11,0,0,0,0,0,0,224,81,0,0,184,10,0,0,40,11,0,0,0,0,0,0,0,0,0,0,144,11,0,0,41,0,0,0,42,0,0,0,2,0,0,0,7,0,0,0,52,51,98,116,75,105,110,101,109,97,116,105,99,67,108,111,115,101,115,116,78,111,116,77,101,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,0,0,0,224,81,0,0,96,11,0,0,48,3,0,0,0,0,0,0,0,0,0,0,248,11,0,0,43,0,0,0,44,0,0,0,45,0,0,0,1,0,0,0,32,0,0,0,33,0,0,0,1,0,0,0,4,0,0,0,8,0,0,0,11,0,0,0,6,0,0,0,0,0,0,0,50,51,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,0,224,81,0,0,216,11,0,0,160,0,0,0,0,0,0,0,98,116,80,111,105,110,116,50,80,111,105,110,116,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,14,0,0,46,0,0,0,47,0,0,0,4,0,0,0,34,0,0,0,7,0,0,0,8,0,0,0,5,0,0,0,0,0,0,0,49,54,98,116,82,97,121,99,97,115,116,86,101,104,105,99,108,101,0,0,0,0,0,0,224,81,0,0,200,14,0,0,32,11,0,0,0,0,0,0,0,0,0,0,40,15,0,0,48,0,0,0,49,0,0,0,2,0,0,0,0,0,0,0,50,53,98,116,68,101,102,97,117,108,116,86,101,104,105,99,108,101,82,97,121,99,97,115,116,101,114,0,0,0,0,0,224,81,0,0,8,15,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,15,0,0,7,0,0,0,50,0,0,0,51,0,0,0,35,0,0,0,12,0,0,0,7,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,116,82,105,103,105,100,66,111,100,121,70,108,111,97,116,68,97,116,97,0,0,0,0,49,49,98,116,82,105,103,105,100,66,111,100,121,0,0,0,224,81,0,0,136,15,0,0,160,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,16,0,0,52,0,0,0,53,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,54,0,0,0,13,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,83,101,116,117,112,0,0,0,0,115,111,108,118,101,71,114,111,117,112,67,97,99,104,101,70,114,105,101,110,100,108,121,73,116,101,114,97,116,105,111,110,115,0,0,0,0,0,0,0,115,111,108,118,101,71,114,111,117,112,0,0,0,0,0,0,51,53,98,116,83,101,113,117,101,110,116,105,97,108,73,109,112,117,108,115,101,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,0,0,49,56,98,116,67,111,110,115,116,114,97,105,110,116,83,111,108,118,101,114,0,0,0,0,184,81,0,0,112,16,0,0,224,81,0,0,72,16,0,0,136,16,0,0,0,0,0,0,0,0,0,0,240,16,0,0,55,0,0,0,56,0,0,0,3,0,0,0,1,0,0,0,37,0,0,0,38,0,0,0,1,0,0,0,5,0,0,0,9,0,0,0,14,0,0,0,8,0,0,0,0,0,0,0,49,56,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,0,0,0,0,224,81,0,0,216,16,0,0,160,0,0,0,0,0,0,0,98,116,83,108,105,100,101,114,67,111,110,115,116,114,97,105,110,116,68,97,116,97,0,0,98,116,84,121,112,101,100,67,111,110,115,116,114,97,105,110,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,20,0,0,57,0,0,0,58,0,0,0,1,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,39,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,40,0,0,0,59,0,0,0,49,50,98,116,65,120,105,115,83,119,101,101,112,51,0,0,50,48,98,116,65,120,105,115,83,119,101,101,112,51,73,110,116,101,114,110,97,108,73,116,69,0,0,0,0,0,0,0,50,49,98,116,66,114,111,97,100,112,104,97,115,101,73,110,116,101,114,102,97,99,101,0,184,81,0,0,24,20,0,0,224,81,0,0,248,19,0,0,48,20,0,0,0,0,0,0,224,81,0,0,232,19,0,0,56,20,0,0,0,0,0,0,0,0,0,0,56,20,0,0,60,0,0,0,61,0,0,0,1,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,2,0,0,0,8,0,0,0,39,0,0,0,15,0,0,0,16,0,0,0,7,0,0,0,40,0,0,0,59,0,0,0,0,0,0,0,48,21,0,0,62,0,0,0,63,0,0,0,9,0,0,0,3,0,0,0,8,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,9,0,0,0,20,0,0,0,10,0,0,0,41,0,0,0,11,0,0,0,10,0,0,0,21,0,0,0,42,0,0,0,43,0,0,0,0,0,0,0,49,53,98,116,78,117,108,108,80,97,105,114,67,97,99,104,101,0,0,0,0,0,0,0,50,50,98,116,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,0,0,0,0,0,0,0,224,81,0,0,0,21,0,0,16,1,0,0,0,0,0,0,224,81,0,0,232,20,0,0,32,21,0,0,0,0,0,0,0,0,0,0,216,21,0,0,64,0,0,0,65,0,0,0,9,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,44,0,0,0,22,0,0,0,1,0,0,0,23,0,0,0,45,0,0,0,9,0,0,0,2,0,0,0,24,0,0,0,11,0,0,0,46,0,0,0,13,0,0,0,14,0,0,0,2,0,0,0,10,0,0,0,11,0,0,0,25,0,0,0,15,0,0,0,8,0,0,0,26,0,0,0,27,0,0,0,12,0,0,0,16,0,0,0,28,0,0,0,13,0,0,0,1,0,0,0,17,0,0,0,49,48,98,116,66,111,120,83,104,97,112,101,0,0,0,0,224,81,0,0,200,21,0,0,128,62,0,0,0,0,0,0,66,111,120,0,0,0,0,0,0,0,0,0,136,22,0,0,66,0,0,0,67,0,0,0,14,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,47,0,0,0,29,0,0,0,2,0,0,0,30,0,0,0,45,0,0,0,10,0,0,0,3,0,0,0,31,0,0,0,12,0,0,0,46,0,0,0,15,0,0,0,18,0,0,0,19,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,68,97,116,97,0,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,0,0,0,0,0,0,0,224,81,0,0,104,22,0,0,112,68,0,0,0,0,0,0,66,86,72,84,82,73,65,78,71,76,69,77,69,83,72,0,0,0,0,0,80,23,0,0,68,0,0,0,69,0,0,0,20,0,0,0,0,0,0,0,90,78,75,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,50,49,98,116,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,184,81,0,0,48,23,0,0,224,81,0,0,192,22,0,0,72,23,0,0,0,0,0,0,0,0,0,0,240,23,0,0,70,0,0,0,71,0,0,0,21,0,0,0,0,0,0,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,55,112,101,114,102,111,114,109,67,111,110,118,101,120,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,83,52,95,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,224,81,0,0,120,23,0,0,72,23,0,0,0,0,0,0,0,0,0,0,128,24,0,0,72,0,0,0,73,0,0,0,22,0,0,0,0,0,0,0,90,78,50,50,98,116,66,118,104,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,52,112,101,114,102,111,114,109,82,97,121,99,97,115,116,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,49,77,121,78,111,100,101,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,224,81,0,0,24,24,0,0,72,23,0,0,0,0,0,0,0,0,0,0,224,25,0,0,74,0,0,0,75,0,0,0,16,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,50,0,0,0,22,0,0,0,3,0,0,0,32,0,0,0,51,0,0,0,11,0,0,0,2,0,0,0,33,0,0,0,13,0,0,0,46,0,0,0,23,0,0,0,24,0,0,0,2,0,0,0,17,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,8,26,0,0,76,0,0,0,77,0,0,0,16,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,50,0,0,0,22,0,0,0,3,0,0,0,35,0,0,0,51,0,0,0,11,0,0,0,2,0,0,0,33,0,0,0,13,0,0,0,46,0,0,0,23,0,0,0,24,0,0,0,2,0,0,0,17,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,48,26,0,0,78,0,0,0,79,0,0,0,16,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,50,0,0,0,22,0,0,0,3,0,0,0,36,0,0,0,51,0,0,0,11,0,0,0,2,0,0,0,33,0,0,0,13,0,0,0,46,0,0,0,23,0,0,0,24,0,0,0,2,0,0,0,17,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,49,52,98,116,67,97,112,115,117,108,101,83,104,97,112,101,0,0,0,0,0,0,0,0,224,81,0,0,200,25,0,0,104,41,0,0,0,0,0,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,88,0,0,0,0,0,0,0,224,81,0,0,240,25,0,0,224,25,0,0,0,0,0,0,49,53,98,116,67,97,112,115,117,108,101,83,104,97,112,101,90,0,0,0,0,0,0,0,224,81,0,0,24,26,0,0,224,25,0,0,0,0,0,0,67,97,112,115,117,108,101,90,0,0,0,0,0,0,0,0,67,97,112,115,117,108,101,88,0,0,0,0,0,0,0,0,98,116,67,97,112,115,117,108,101,83,104,97,112,101,68,97,116,97,0,0,0,0,0,0,67,97,112,115,117,108,101,83,104,97,112,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,26,0,0,80,0,0,0,81,0,0,0,4,0,0,0,14,0,0,0,52,0,0,0,53,0,0,0,15,0,0,0,16,0,0,0,18,0,0,0,37,0,0,0,9,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,10,0,0,0,54,0,0,0,50,49,98,116,67,111,108,108,105,115,105,111,110,68,105,115,112,97,116,99,104,101,114,0,224,81,0,0,216,26,0,0,88,50,0,0,0,0,0,0,0,0,0,0,88,27,0,0,82,0,0,0,83,0,0,0,11,0,0,0,0,0,0,0,50,51,98,116,67,111,108,108,105,115,105,111,110,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,49,55,98,116,79,118,101,114,108,97,112,67,97,108,108,98,97,99,107,0,0,0,0,0,184,81,0,0,56,27,0,0,224,81,0,0,24,27,0,0,80,27,0,0,0,0,0,0,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,0,0,0,0,0,184,81,0,0,136,27,0,0,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,68,97,116,97,0,0,0,0,49,54,98,116,67,111,108,108,105,115,105,111,110,83,104,97,112,101,0,0,0,0,0,0,184,81,0,0,192,27,0,0,0,0,0,0,184,29,0,0,84,0,0,0,85,0,0,0,19,0,0,0,20,0,0,0,5,0,0,0,3,0,0,0,86,0,0,0,1,0,0,0,2,0,0,0,19,0,0,0,55,0,0,0,22,0,0,0,56,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,79,118,101,114,102,108,111,119,32,105,110,32,65,65,66,66,44,32,111,98,106,101,99,116,32,114,101,109,111,118,101,100,32,102,114,111,109,32,115,105,109,117,108,97,116,105,111,110,0,0,0,0,0,0,0,0,73,102,32,121,111,117,32,99,97,110,32,114,101,112,114,111,100,117,99,101,32,116,104,105,115,44,32,112,108,101,97,115,101,32,101,109,97,105,108,32,98,117,103,115,64,99,111,110,116,105,110,117,111,117,115,112,104,121,115,105,99,115,46,99,111,109,10,0,0,0,0,0,80,108,101,97,115,101,32,105,110,99,108,117,100,101,32,97,98,111,118,101,32,105,110,102,111,114,109,97,116,105,111,110,44,32,121,111,117,114,32,80,108,97,116,102,111,114,109,44,32,118,101,114,115,105,111,110,32,111,102,32,79,83,46,10,0,0,0,0,0,0,0,0,84,104,97,110,107,115,46,10,0,0,0,0,0,0,0,0,117,112,100,97,116,101,65,97,98,98,115,0,0,0,0,0,99,97,108,99,117,108,97,116,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,0,0,0,0,0,0,0,112,101,114,102,111,114,109,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,105,111,110,0,0,0,0,0,0,0,100,105,115,112,97,116,99,104,65,108,108,67,111,108,108,105,115,105,111,110,80,97,105,114,115,0,0,0,0,0,0,0,99,111,110,118,101,120,83,119,101,101,112,67,111,109,112,111,117,110,100,0,0,0,0,0,99,111,110,118,101,120,83,119,101,101,112,84,101,115,116,0,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,0,0,0,0,0,0,184,81,0,0,160,29,0,0,0,0,0,0,8,30,0,0,87,0,0,0,88,0,0,0,20,0,0,0,21,0,0,0,252,255,255,255,8,30,0,0,89,0,0,0,90,0,0,0,22,0,0,0,0,0,0,0,49,55,68,101,98,117,103,68,114,97,119,99,97,108,108,98,97,99,107,0,0,0,0,0,64,82,0,0,240,29,0,0,0,0,0,0,2,0,0,0,88,67,0,0,2,0,0,0,136,67,0,0,2,4,0,0,0,0,0,0,104,30,0,0,91,0,0,0,92,0,0,0,26,0,0,0,27,0,0,0,3,0,0,0,0,0,0,0,50,51,98,116,66,114,105,100,103,101,100,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,0,0,0,0,0,0,224,81,0,0,72,30,0,0,240,52,0,0,0,0,0,0,50,52,98,116,66,114,111,97,100,112,104,97,115,101,65,97,98,98,67,97,108,108,98,97,99,107,0,0,0,0,0,0,184,81,0,0,120,30,0,0,0,0,0,0,0,31,0,0,93,0,0,0,94,0,0,0,12,0,0,0,0,0,0,0,50,49,98,116,83,105,110,103,108,101,83,119,101,101,112,67,97,108,108,98,97,99,107,0,50,51,98,116,66,114,111,97,100,112,104,97,115,101,82,97,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,224,81,0,0,208,30,0,0,152,30,0,0,0,0,0,0,224,81,0,0,184,30,0,0,240,30,0,0,0,0,0,0,0,0,0,0,64,31,0,0,95,0,0,0,96,0,0,0,13,0,0,0,0,0,0,0,49,57,98,116,83,105,110,103,108,101,82,97,121,67,97,108,108,98,97,99,107,0,0,0,224,81,0,0,40,31,0,0,240,30,0,0,0,0,0,0,0,0,0,0,8,32,0,0,97,0,0,0,98,0,0,0,14,0,0,0,10,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,49,52,76,111,99,97,108,73,110,102,111,65,100,100,101,114,95,49,0,0,224,81,0,0,104,31,0,0,40,3,0,0,0,0,0,0,0,0,0,0,232,32,0,0,99,0,0,0,100,0,0,0,23,0,0,0,1,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,0,0,0,0,0,0,0,224,81,0,0,48,32,0,0,224,63,0,0,0,0,0,0,0,0,0,0,192,33,0,0,101,0,0,0,102,0,0,0,23,0,0,0,2,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,53,111,98,106,101,99,116,81,117,101,114,121,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,53,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,50,48,67,111,110,118,101,120,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,102,69,51,50,66,114,105,100,103,101,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,0,224,81,0,0,16,33,0,0,224,63,0,0,0,0,0,0,0,0,0,0,112,34,0,0,103,0,0,0,104,0,0,0,15,0,0,0,11,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,49,53,76,111,99,97,108,73,110,102,111,65,100,100,101,114,50,0,0,0,0,224,81,0,0,232,33,0,0,184,1,0,0,0,0,0,0,0,0,0,0,72,35,0,0,105,0,0,0,106,0,0,0,28,0,0,0,57,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,57,82,97,121,84,101,115,116,101,114,95,49,0,78,54,98,116,68,98,118,116,56,73,67,111,108,108,105,100,101,69,0,0,0,0,0,0,184,81,0,0,40,35,0,0,224,81,0,0,168,34,0,0,64,35,0,0,0,0,0,0,0,0,0,0,8,36,0,0,107,0,0,0,108,0,0,0,24,0,0,0,1,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,95,48,0,0,0,0,224,81,0,0,112,35,0,0,176,63,0,0,0,0,0,0,0,0,0,0,200,36,0,0,109,0,0,0,110,0,0,0,24,0,0,0,2,0,0,0,90,78,49,54,98,116,67,111,108,108,105,115,105,111,110,87,111,114,108,100,50,49,114,97,121,84,101,115,116,83,105,110,103,108,101,73,110,116,101,114,110,97,108,69,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,50,95,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,82,78,83,95,49,55,82,97,121,82,101,115,117,108,116,67,97,108,108,98,97,99,107,69,69,50,57,66,114,105,100,103,101,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,0,224,81,0,0,48,36,0,0,176,63,0,0,0,0,0,0,0,0,0,0,24,37,0,0,12,0,0,0,58,0,0,0,29,0,0,0,111,0,0,0,112,0,0,0,0,0,0,0,78,49,50,98,116,67,111,110,118,101,120,67,97,115,116,49,48,67,97,115,116,82,101,115,117,108,116,69,0,0,0,0,184,81,0,0,248,36,0,0,0,0,0,0,192,37,0,0,113,0,0,0,114,0,0,0,25,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,59,0,0,0,41,0,0,0,4,0,0,0,42,0,0,0,45,0,0,0,13,0,0,0,4,0,0,0,43,0,0,0,17,0,0,0,46,0,0,0,60,0,0,0,115,0,0,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,67,104,105,108,100,68,97,116,97,0,0,0,0,0,0,0,0,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,68,97,116,97,0,0,0,0,0,49,53,98,116,67,111,109,112,111,117,110,100,83,104,97,112,101,0,0,0,0,0,0,0,224,81,0,0,168,37,0,0,216,27,0,0,0,0,0,0,67,111,109,112,111,117,110,100,0,0,0,0,0,0,0,0,0,0,0,0,40,39,0,0,116,0,0,0,117,0,0,0,26,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,61,0,0,0,22,0,0,0,5,0,0,0,44,0,0,0,62,0,0,0,14,0,0,0,2,0,0,0,45,0,0,0,18,0,0,0,46,0,0,0,30,0,0,0,31,0,0,0,2,0,0,0,27,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,72,39,0,0,118,0,0,0,119,0,0,0,26,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,61,0,0,0,22,0,0,0,5,0,0,0,46,0,0,0,63,0,0,0,14,0,0,0,2,0,0,0,45,0,0,0,18,0,0,0,46,0,0,0,30,0,0,0,31,0,0,0,2,0,0,0,27,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,104,39,0,0,120,0,0,0,121,0,0,0,26,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,61,0,0,0,22,0,0,0,5,0,0,0,47,0,0,0,64,0,0,0,14,0,0,0,2,0,0,0,45,0,0,0,18,0,0,0,46,0,0,0,30,0,0,0,31,0,0,0,2,0,0,0,27,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,49,49,98,116,67,111,110,101,83,104,97,112,101,0,0,0,224,81,0,0,24,39,0,0,104,41,0,0,0,0,0,0,49,50,98,116,67,111,110,101,83,104,97,112,101,90,0,0,224,81,0,0,56,39,0,0,40,39,0,0,0,0,0,0,49,50,98,116,67,111,110,101,83,104,97,112,101,88,0,0,224,81,0,0,88,39,0,0,40,39,0,0,0,0,0,0,67,111,110,101,88,0,0,0,67,111,110,101,90,0,0,0,98,116,67,111,110,101,83,104,97,112,101,68,97,116,97,0,67,111,110,101,0,0,0,0,0,0,0,0,216,39,0,0,122,0,0,0,123,0,0,0,1,0,0,0,0,0,0,0,50,55,98,116,67,111,110,116,105,110,117,111,117,115,67,111,110,118,101,120,67,111,108,108,105,115,105,111,110,0,0,0,224,81,0,0,184,39,0,0,120,40,0,0,0,0,0,0,0,0,0,0,88,40,0,0,124,0,0,0,125,0,0,0,32,0,0,0,33,0,0,0,4],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([49,54,98,116,80,111,105,110,116,67,111,108,108,101,99,116,111,114,0,0,0,0,0,0,78,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,54,82,101,115,117,108,116,69,0,184,81,0,0,32,40,0,0,224,81,0,0,8,40,0,0,80,40,0,0,0,0,0,0,49,50,98,116,67,111,110,118,101,120,67,97,115,116,0,0,184,81,0,0,104,40,0,0,0,0,0,0,56,41,0,0,126,0,0,0,127,0,0,0,28,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,65,0,0,0,22,0,0,0,6,0,0,0,48,0,0,0,45,0,0,0,14,0,0,0,2,0,0,0,49,0,0,0,19,0,0,0,46,0,0,0,34,0,0,0,35,0,0,0,2,0,0,0,29,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,8,0,0,0,50,0,0,0,51,0,0,0,30,0,0,0,36,0,0,0,52,0,0,0,31,0,0,0,2,0,0,0,1,0,0,0,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,68,97,116,97,0,0,0,49,55,98,116,67,111,110,118,101,120,72,117,108,108,83,104,97,112,101,0,0,0,0,0,224,81,0,0,32,41,0,0,184,62,0,0,0,0,0,0,67,111,110,118,101,120,0,0,50,49,98,116,67,111,110,118,101,120,73,110,116,101,114,110,97,108,83,104,97,112,101,0,224,81,0,0,80,41,0,0,136,41,0,0,0,0,0,0,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,0,224,81,0,0,120,41,0,0,216,27,0,0,0,0,0,0,0,0,0,0,64,42,0,0,128,0,0,0,129,0,0,0,28,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,66,0,0,0,53,0,0,0,6,0,0,0,54,0,0,0,45,0,0,0,14,0,0,0,2,0,0,0,24,0,0,0,11,0,0,0,46,0,0,0,37,0,0,0,38,0,0,0,2,0,0,0,32,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,8,0,0,0,55,0,0,0,56,0,0,0,33,0,0,0,39,0,0,0,57,0,0,0,34,0,0,0,3,0,0,0,0,0,0,0,50,53,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,0,0,0,0,224,81,0,0,32,42,0,0,184,62,0,0,0,0,0,0,67,111,110,118,101,120,84,114,105,109,101,115,104,0,0,0,0,0,0,0,152,42,0,0,130,0,0,0,131,0,0,0,35,0,0,0,0,0,0,0,50,54,76,111,99,97,108,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,0,0,0,224,81,0,0,120,42,0,0,136,67,0,0,0,0,0,0,0,0,0,0,248,43,0,0,132,0,0,0,133,0,0,0,36,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,67,0,0,0,22,0,0,0,7,0,0,0,58,0,0,0,68,0,0,0,15,0,0,0,2,0,0,0,59,0,0,0,20,0,0,0,46,0,0,0,40,0,0,0,41,0,0,0,2,0,0,0,37,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,5,0,0,0,0,0,0,0,32,44,0,0,134,0,0,0,135,0,0,0,36,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,67,0,0,0,22,0,0,0,7,0,0,0,60,0,0,0,68,0,0,0,15,0,0,0,2,0,0,0,59,0,0,0,20,0,0,0,46,0,0,0,40,0,0,0,42,0,0,0,2,0,0,0,38,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,6,0,0,0,0,0,0,0,72,44,0,0,136,0,0,0,137,0,0,0,36,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,67,0,0,0,22,0,0,0,7,0,0,0,61,0,0,0,68,0,0,0,15,0,0,0,2,0,0,0,59,0,0,0,20,0,0,0,46,0,0,0,40,0,0,0,43,0,0,0,2,0,0,0,39,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,7,0,0,0,49,53,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,0,0,0,0,0,0,0,224,81,0,0,224,43,0,0,104,41,0,0,0,0,0,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,88,0,0,0,0,0,0,224,81,0,0,8,44,0,0,248,43,0,0,0,0,0,0,49,54,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,90,0,0,0,0,0,0,224,81,0,0,48,44,0,0,248,43,0,0,0,0,0,0,67,121,108,105,110,100,101,114,90,0,0,0,0,0,0,0,67,121,108,105,110,100,101,114,88,0,0,0,0,0,0,0,98,116,67,121,108,105,110,100,101,114,83,104,97,112,101,68,97,116,97,0,0,0,0,0,67,121,108,105,110,100,101,114,89,0,0,0,0,0,0,0,0,0,0,0,248,44,0,0,138,0,0,0,139,0,0,0,2,0,0,0,44,0,0,0,3,0,0,0,40,0,0,0,3,0,0,0,41,0,0,0,69,0,0,0,62,0,0,0,63,0,0,0,45,0,0,0,70,0,0,0,140,0,0,0,49,54,98,116,68,98,118,116,66,114,111,97,100,112,104,97,115,101,0,0,0,0,0,0,224,81,0,0,224,44,0,0,48,20,0,0,0,0,0,0,0,0,0,0,72,45,0,0,141,0,0,0,142,0,0,0,28,0,0,0,71,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,50,48,66,114,111,97,100,112,104,97,115,101,65,97,98,98,84,101,115,116,101,114,0,0,224,81,0,0,48,45,0,0,64,35,0,0,0,0,0,0,0,0,0,0,152,45,0,0,143,0,0,0,144,0,0,0,28,0,0,0,72,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,49,57,66,114,111,97,100,112,104,97,115,101,82,97,121,84,101,115,116,101,114,0,0,0,224,81,0,0,128,45,0,0,64,35,0,0,0,0,0,0,0,0,0,0,232,45,0,0,145,0,0,0,146,0,0,0,46,0,0,0,73,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,49,56,98,116,68,98,118,116,84,114,101,101,67,111,108,108,105,100,101,114,0,0,0,0,224,81,0,0,208,45,0,0,64,35,0,0,0,0,0,0,0,0,0,0,104,46,0,0,147,0,0,0,148,0,0,0,64,0,0,0,65,0,0,0,21,0,0,0,66,0,0,0,51,49,98,116,68,101,102,97,117,108,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,0,0,50,52,98,116,67,111,108,108,105,115,105,111,110,67,111,110,102,105,103,117,114,97,116,105,111,110,0,0,0,0,0,0,184,81,0,0,64,46,0,0,224,81,0,0,24,46,0,0,96,46,0,0,0,0,0,0,0,0,0,0,240,46,0,0,149,0,0,0,150,0,0,0,5,0,0,0,0,0,0,0,78,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,51,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,67,114,101,97,116,101,70,117,110,99,0,0,0,0,0,0,0,0,184,81,0,0,192,46,0,0,224,81,0,0,144,46,0,0,232,46,0,0,0,0,0,0,0,0,0,0,72,47,0,0,151,0,0,0,152,0,0,0,6,0,0,0,0,0,0,0,78,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,224,81,0,0,24,47,0,0,232,46,0,0,0,0,0,0,0,0,0,0,168,47,0,0,153,0,0,0,154,0,0,0,7,0,0,0,0,0,0,0,78,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,224,81,0,0,112,47,0,0,232,46,0,0,0,0,0,0,0,0,0,0,8,48,0,0,155,0,0,0,156,0,0,0,8,0,0,0,0,0,0,0,78,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,224,81,0,0,208,47,0,0,232,46,0,0,0,0,0,0,0,0,0,0,88,48,0,0,157,0,0,0,158,0,0,0,9,0,0,0,0,0,0,0,78,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,224,81,0,0,48,48,0,0,232,46,0,0,0,0,0,0,0,0,0,0,184,48,0,0,159,0,0,0,160,0,0,0,10,0,0,0,0,0,0,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,224,81,0,0,128,48,0,0,232,46,0,0,0,0,0,0,0,0,0,0,24,49,0,0,161,0,0,0,162,0,0,0,11,0,0,0,0,0,0,0,78,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,224,81,0,0,224,48,0,0,232,46,0,0,0,0,0,0,0,0,0,0,112,49,0,0,163,0,0,0,164,0,0,0,12,0,0,0,0,0,0,0,78,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,224,81,0,0,64,49,0,0,232,46,0,0,0,0,0,0,0,0,0,0,216,49,0,0,165,0,0,0,166,0,0,0,13,0,0,0,0,0,0,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,55,83,119,97,112,112,101,100,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,0,224,81,0,0,152,49,0,0,232,46,0,0,0,0,0,0,0,0,0,0,56,50,0,0,167,0,0,0,168,0,0,0,14,0,0,0,0,0,0,0,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,0,0,0,0,0,0,224,81,0,0,0,50,0,0,232,46,0,0,0,0,0,0,49,50,98,116,68,105,115,112,97,116,99,104,101,114,0,0,184,81,0,0,72,50,0,0,0,0,0,0,184,50,0,0,169,0,0,0,170,0,0,0,4,0,0,0,1,0,0,0,74,0,0,0,0,0,0,0,49,54,98,116,69,109,112,116,121,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,50,48,98,116,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,184,81,0,0,152,50,0,0,224,81,0,0,128,50,0,0,176,50,0,0,0,0,0,0,0,0,0,0,56,51,0,0,18,0,0,0,171,0,0,0,172,0,0,0,35,0,0,0,67,0,0,0,22,0,0,0,75,0,0,0,47,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,104,51,0,0,18,0,0,0,173,0,0,0,174,0,0,0,35,0,0,0,67,0,0,0,22,0,0,0,75,0,0,0,48,0,0,0,43,0,0,0,0,0,0,0,49,51,98,116,71,104,111,115,116,79,98,106,101,99,116,0,224,81,0,0,40,51,0,0,160,27,0,0,0,0,0,0,50,52,98,116,80,97,105,114,67,97,99,104,105,110,103,71,104,111,115,116,79,98,106,101,99,116,0,0,0,0,0,0,224,81,0,0,72,51,0,0,56,51,0,0,0,0,0,0,0,0,0,0,168,51,0,0,175,0,0,0,176,0,0,0,2,0,0,0,0,0,0,0,49,53,98,116,71,106,107,67,111,110,118,101,120,67,97,115,116,0,0,0,0,0,0,0,224,81,0,0,144,51,0,0,120,40,0,0,0,0,0,0,0,0,0,0,40,52,0,0,177,0,0,0,178,0,0,0,1,0,0,0,0,0,0,0,51,48,98,116,71,106,107,69,112,97,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,0,0,0,51,48,98,116,67,111,110,118,101,120,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,0,0,0,184,81,0,0,248,51,0,0,224,81,0,0,208,51,0,0,32,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,52,0,0,179,0,0,0,180,0,0,0,5,0,0,0,0,0,0,0,49,55,98,116,71,106,107,80,97,105,114,68,101,116,101,99,116,111,114,0,0,0,0,0,51,54,98,116,68,105,115,99,114,101,116,101,67,111,108,108,105,115,105,111,110,68,101,116,101,99,116,111,114,73,110,116,101,114,102,97,99,101,0,0,184,81,0,0,120,52,0,0,224,81,0,0,96,52,0,0,160,52,0,0,0,0,0,0,0,0,0,0,240,52,0,0,181,0,0,0,182,0,0,0,26,0,0,0,27,0,0,0,5,0,0,0,0,0,0,0,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,0,0,0,0,0,0,224,81,0,0,216,52,0,0,80,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,57,0,0,183,0,0,0,184,0,0,0,2,0,0,0,0,0,0,0,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,0,0,0,0,0,224,81,0,0,0,57,0,0,32,52,0,0,0,0,0,0,0,0,0,0,8,58,0,0,185,0,0,0,186,0,0,0,49,0,0,0,50,0,0,0,6,0,0,0,0,0,0,0,90,78,51,51,98,116,77,105,110,107,111,119,115,107,105,80,101,110,101,116,114,97,116,105,111,110,68,101,112,116,104,83,111,108,118,101,114,49,50,99,97,108,99,80,101,110,68,101,112,116,104,69,82,50,50,98,116,86,111,114,111,110,111,105,83,105,109,112,108,101,120,83,111,108,118,101,114,80,75,49,51,98,116,67,111,110,118,101,120,83,104,97,112,101,83,52,95,82,75,49,49,98,116,84,114,97,110,115,102,111,114,109,83,55,95,82,57,98,116,86,101,99,116,111,114,51,83,57,95,83,57,95,80,49,50,98,116,73,68,101,98,117,103,68,114,97,119,69,50,48,98,116,73,110,116,101,114,109,101,100,105,97,116,101,82,101,115,117,108,116,0,0,0,0,0,0,224,81,0,0,88,57,0,0,80,40,0,0,0,0,0,0,0,0,0,0,88,58,0,0,187,0,0,0,188,0,0,0,15,0,0,0,68,0,0,0,23,0,0,0,76,0,0,0,77,0,0,0,16,0,0,0,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,0,0,0,0,0,0,0,0,224,81,0,0,64,58,0,0,112,63,0,0,0,0,0,0,0,0,0,0,224,58,0,0,189,0,0,0,190,0,0,0,44,0,0,0,0,0,0,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,48,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,95,48,0,0,0,0,224,81,0,0,128,58,0,0,136,67,0,0,0,0,0,0,0,0,0,0,112,59,0,0,191,0,0,0,192,0,0,0,45,0,0,0,0,0,0,0,90,78,49,52,98,116,79,112,116,105,109,105,122,101,100,66,118,104,53,98,117,105,108,100,69,80,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,98,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,50,57,81,117,97,110,116,105,122,101,100,78,111,100,101,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,0,224,81,0,0,8,59,0,0,136,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,60,0,0,193,0,0,0,194,0,0,0,24,0,0,0,17,0,0,0,51,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,52,0,0,0,72,0,0,0,53,0,0,0,78,0,0,0,54,0,0,0,25,0,0,0,73,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,0,0,224,81,0,0,240,59,0,0,32,21,0,0,0,0,0,0,0,0,0,0,192,60,0,0,195,0,0,0,196,0,0,0,19,0,0,0,0,0,0,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,51,55,114,101,109,111,118,101,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,115,67,111,110,116,97,105,110,105,110,103,80,114,111,120,121,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,56,82,101,109,111,118,101,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,224,81,0,0,56,60,0,0,80,27,0,0,0,0,0,0,0,0,0,0,88,61,0,0,197,0,0,0,198,0,0,0,20,0,0,0,0,0,0,0,90,78,50,56,98,116,72,97,115,104,101,100,79,118,101,114,108,97,112,112,105,110,103,80,97,105,114,67,97,99,104,101,49,57,99,108,101,97,110,80,114,111,120,121,70,114,111,109,80,97,105,114,115,69,80,49,55,98,116,66,114,111,97,100,112,104,97,115,101,80,114,111,120,121,80,49,50,98,116,68,105,115,112,97,116,99,104,101,114,69,49,55,67,108,101,97,110,80,97,105,114,67,97,108,108,98,97,99,107,0,0,0,224,81,0,0,232,60,0,0,80,27,0,0,0,0,0,0,10,215,163,60,0,0,0,0,0,0,0,0,128,62,0,0,199,0,0,0,200,0,0,0,26,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,81,0,0,0,22,0,0,0,6,0,0,0,1,0,0,0,45,0,0,0,14,0,0,0,2,0,0,0,24,0,0,0,11,0,0,0,46,0,0,0,23,0,0,0,55,0,0,0,2,0,0,0,46,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,8,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,83,104,97,112,101,0,0,0,0,0,0,0,224,81,0,0,96,62,0,0,104,41,0,0,0,0,0,0,51,52,98,116,80,111,108,121,104,101,100,114,97,108,67,111,110,118,101,120,65,97,98,98,67,97,99,104,105,110,103,83,104,97,112,101,0,0,0,0,224,81,0,0,144,62,0,0,128,62,0,0,0,0,0,0,0,0,0,0,112,63,0,0,201,0,0,0,202,0,0,0,15,0,0,0,68,0,0,0,23,0,0,0,76,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,116,79,112,116,105,109,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,78,111,100,101,68,97,116,97,0,0,98,116,66,118,104,83,117,98,116,114,101,101,73,110,102,111,68,97,116,97,0,0,0,0,98,116,81,117,97,110,116,105,122,101,100,66,118,104,70,108,111,97,116,68,97,116,97,0,49,52,98,116,81,117,97,110,116,105,122,101,100,66,118,104,0,0,0,0,0,0,0,0,184,81,0,0,88,63,0,0,0,0,0,0,224,63,0,0,203,0,0,0,204,0,0,0,23,0,0,0,1,0,0,0,50,53,98,116,84,114,105,97,110,103,108,101,82,97,121,99,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,224,81,0,0,144,63,0,0,88,67,0,0,0,0,0,0,50,56,98,116,84,114,105,97,110,103,108,101,67,111,110,118,101,120,99,97,115,116,67,97,108,108,98,97,99,107,0,0,224,81,0,0,192,63,0,0,88,67,0,0,0,0,0,0,0,0,0,0,144,64,0,0,205,0,0,0,206,0,0,0,47,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,81,0,0,0,22,0,0,0,8,0,0,0,74,0,0,0,45,0,0,0,14,0,0,0,2,0,0,0,24,0,0,0,11,0,0,0,46,0,0,0,23,0,0,0,56,0,0,0,2,0,0,0,48,0,0,0,11,0,0,0,75,0,0,0,57,0,0,0,8,0,0,0,76,0,0,0,77,0,0,0,49,0,0,0,58,0,0,0,78,0,0,0,50,0,0,0,4,0,0,0,51,0,0,0,49,53,98,116,84,114,105,97,110,103,108,101,83,104,97,112,101,0,0,0,0,0,0,0,224,81,0,0,120,64,0,0,128,62,0,0,0,0,0,0,84,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,0,0,0,0,24,65,0,0,207,0,0,0,208,0,0,0,59,0,0,0,82,0,0,0,105,115,108,97,110,100,85,110,105,111,110,70,105,110,100,65,110,100,81,117,105,99,107,83,111,114,116,0,0,0,0,0,112,114,111,99,101,115,115,73,115,108,97,110,100,115,0,0,50,53,98,116,83,105,109,117,108,97,116,105,111,110,73,115,108,97,110,100,77,97,110,97,103,101,114,0,0,0,0,0,184,81,0,0,248,64,0,0,0,0,0,0,152,65,0,0,209,0,0,0,210,0,0,0,52,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,81,0,0,0,22,0,0,0,9,0,0,0,79,0,0,0,45,0,0,0,16,0,0,0,8,0,0,0,24,0,0,0,11,0,0,0,46,0,0,0,60,0,0,0,61,0,0,0,2,0,0,0,53,0,0,0,11,0,0,0,34,0,0,0,25,0,0,0,0,0,0,0,49,51,98,116,83,112,104,101,114,101,83,104,97,112,101,0,224,81,0,0,136,65,0,0,104,41,0,0,0,0,0,0,0,0,0,0,240,65,0,0,211,0,0,0,212,0,0,0,6,0,0,0,2,0,0,0,83,0,0,0,0,0,0,0,51,50,98,116,83,112,104,101,114,101,83,112,104,101,114,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,224,81,0,0,200,65,0,0,208,69,0,0,0,0,0,0,0,0,0,0,72,66,0,0,213,0,0,0,214,0,0,0,7,0,0,0,3,0,0,0,84,0,0,0,0,0,0,0,51,52,98,116,83,112,104,101,114,101,84,114,105,97,110,103,108,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,224,81,0,0,32,66,0,0,208,69,0,0,0,0,0,0,0,0,0,0,192,66,0,0,215,0,0,0,216,0,0,0,54,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,85,0,0,0,80,0,0,0,10,0,0,0,81,0,0,0,45,0,0,0,10,0,0,0,3,0,0,0,82,0,0,0,26,0,0,0,46,0,0,0,55,0,0,0,0,0,0,0,49,56,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,0,0,0,0,224,81,0,0,168,66,0,0,232,71,0,0,0,0,0,0,98,116,83,116,97,116,105,99,80,108,97,110,101,83,104,97,112,101,68,97,116,97,0,0,83,84,65,84,73,67,80,76,65,78,69,0,0,0,0,0,0,0,0,0,48,67,0,0,217,0,0,0,218,0,0,0,3,0,0,0,0,0,0,0,50,50,98,116,83,117,98,115,105,109,112,108,101,120,67,111,110,118,101,120,67,97,115,116,0,0,0,0,0,0,0,0,224,81,0,0,16,67,0,0,120,40,0,0,0,0,0,0,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,184,81,0,0,64,67,0,0,51,49,98,116,73,110,116,101,114,110,97,108,84,114,105,97,110,103,108,101,73,110,100,101,120,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,184,81,0,0,96,67,0,0,0,0,0,0,240,67,0,0,219,0,0,0,220,0,0,0,56,0,0,0,1,0,0,0,2,0,0,0,86,0,0,0,87,0,0,0,83,0,0,0,88,0,0,0,89,0,0,0,84,0,0,0,62,0,0,0,63,0,0,0,85,0,0,0,27,0,0,0,0,0,0,0,49,52,98,116,84,114,105,97,110,103,108,101,77,101,115,104,0,0,0,0,0,0,0,0,224,81,0,0,216,67,0,0,32,78,0,0,0,0,0,0,0,0,0,0,112,68,0,0,221,0,0,0,222,0,0,0,14,0,0,0,12,0,0,0,1,0,0,0,1,0,0,0,90,0,0,0,29,0,0,0,2,0,0,0,86,0,0,0,45,0,0,0,10,0,0,0,3,0,0,0,87,0,0,0,28,0,0,0,46,0,0,0,57,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,0,0,0,224,81,0,0,88,68,0,0,232,71,0,0,0,0,0,0,84,82,73,65,78,71,76,69,77,69,83,72,0,0,0,0,0,0,0,0,192,68,0,0,223,0,0,0,224,0,0,0,58,0,0,0,0,0,0,0,50,49,83,117,112,112,111,114,116,86,101,114,116,101,120,67,97,108,108,98,97,99,107,0,224,81,0,0,168,68,0,0,88,67,0,0,0,0,0,0,0,0,0,0,80,69,0,0,225,0,0,0,226,0,0,0,59,0,0,0,0,0,0,0,90,78,75,49,57,98,116,84,114,105,97,110,103,108,101,77,101,115,104,83,104,97,112,101,49,57,112,114,111,99,101,115,115,65,108,108,84,114,105,97,110,103,108,101,115,69,80,49,56,98,116,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,82,75,57,98,116,86,101,99,116,111,114,51,83,52,95,69,49,54,70,105,108,116,101,114,101,100,67,97,108,108,98,97,99,107,0,0,0,224,81,0,0,232,68,0,0,136,67,0,0,0,0,0,0,0,0,0,0,152,69,0,0,227,0,0,0,228,0,0,0,8,0,0,0,0,0,0,0,50,50,83,112,104,101,114,101,84,114,105,97,110,103,108,101,68,101,116,101,99,116,111,114,0,0,0,0,0,0,0,0,224,81,0,0,120,69,0,0,160,52,0,0,0,0,0,0,51,48,98,116,65,99,116,105,118,97,116,105,110,103,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,0,224,81,0,0,168,69,0,0,176,50,0,0,0,0,0,0,0,0,0,0,32,70,0,0,229,0,0,0,230,0,0,0,9,0,0,0,4,0,0,0,91,0,0,0,0,0,0,0,50,54,98,116,66,111,120,66,111,120,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,224,81,0,0,0,70,0,0,208,69,0,0,0,0,0,0,0,0,0,0,96,70,0,0,231,0,0,0,232,0,0,0,10,0,0,0,0,0,0,0,49,54,98,116,66,111,120,66,111,120,68,101,116,101,99,116,111,114,0,0,0,0,0,0,224,81,0,0,72,70,0,0,160,52,0,0,0,0,0,0,0,0,0,0,176,70,0,0,233,0,0,0,234,0,0,0,11,0,0,0,5,0,0,0,92,0,0,0,0,0,0,0,50,56,98,116,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,224,81,0,0,144,70,0,0,208,69,0,0,0,0,0,0,0,0,0,0,8,71,0,0,235,0,0,0,236,0,0,0,28,0,0,0,93,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,50,50,98,116,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,224,81,0,0,232,70,0,0,64,35,0,0,0,0,0,0,0,0,0,0,96,71,0,0,237,0,0,0,238,0,0,0,12,0,0,0,6,0,0,0,94,0,0,0,0,0,0,0,51,54,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,224,81,0,0,56,71,0,0,208,69,0,0,0,0,0,0,0,0,0,0,192,71,0,0,239,0,0,0,240,0,0,0,64,0,0,0,95,0,0,0,5,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,51,48,98,116,67,111,109,112,111,117,110,100,67,111,109,112,111,117,110,100,76,101,97,102,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,0,224,81,0,0,152,71,0,0,64,35,0,0,0,0,0,0,49,52,98,116,67,111,110,99,97,118,101,83,104,97,112,101,0,0,0,0,0,0,0,0,224,81,0,0,208,71,0,0,216,27,0,0,0,0,0,0,0,0,0,0,88,72,0,0,241,0,0,0,242,0,0,0,13,0,0,0,7,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,136,72,0,0,243,0,0,0,244,0,0,0,60,0,0,0,0,0,0,0,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,224,81,0,0,48,72,0,0,208,69,0,0,0,0,0,0,50,52,98,116,67,111,110,118,101,120,84,114,105,97,110,103,108,101,67,97,108,108,98,97,99,107,0,0,0,0,0,0,224,81,0,0,104,72,0,0,88,67,0,0,0,0,0,0,0,0,0,0,80,73,0,0,245,0,0,0,246,0,0,0,61,0,0,0,0,0,0,0,90,78,51,51,98,116,67,111,110,118,101,120,67,111,110,99,97,118,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,50,49,99,97,108,99,117,108,97,116,101,84,105,109,101,79,102,73,109,112,97,99,116,69,80,49,55,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,83,49,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,51,49,76,111,99,97,108,84,114,105,97,110,103,108,101,83,112,104,101,114,101,67,97,115,116,67,97,108,108,98,97,99,107,0,0,0,224,81,0,0,176,72,0,0,88,67,0,0,0,0,0,0,0,0,0,0,240,73,0,0,247,0,0,0,248,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,184,73,0,0,249,0,0,0,250,0,0,0,14,0,0,0,8,0,0,0,97,0,0,0,0,0,0,0,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,224,81,0,0,152,73,0,0,208,69,0,0,0,0,0,0,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,48,67,114,101,97,116,101,70,117,110,99,69,0,224,81,0,0,200,73,0,0,232,46,0,0,0,0,0,0,0,0,0,0,64,74,0,0,251,0,0,0,252,0,0,0,26,0,0,0,27,0,0,0,7,0,0,0,0,0,0,0,50,52,98,116,80,101,114,116,117,114,98,101,100,67,111,110,116,97,99,116,82,101,115,117,108,116,0,0,0,0,0,0,224,81,0,0,32,74,0,0,240,52,0,0,0,0,0,0,0,0,0,0,0,75,0,0,253,0,0,0,254,0,0,0,65,0,0,0,66,0,0,0,8,0,0,0,0,0,0,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,50,49,98,116,87,105,116,104,111,117,116,77,97,114,103,105,110,82,101,115,117,108,116,95,48,0,0,224,81,0,0,112,74,0,0,80,40,0,0,0,0,0,0,0,0,0,0,184,75,0,0,255,0,0,0,0,1,0,0,67,0,0,0,68,0,0,0,9,0,0,0,0,0,0,0,90,78,50,51,98,116,67,111,110,118,101,120,67,111,110,118,101,120,65,108,103,111,114,105,116,104,109,49,54,112,114,111,99,101,115,115,67,111,108,108,105,115,105,111,110,69,80,75,50,52,98,116,67,111,108,108,105,115,105,111,110,79,98,106,101,99,116,87,114,97,112,112,101,114,83,50,95,82,75,49,54,98,116,68,105,115,112,97,116,99,104,101,114,73,110,102,111,80,49,54,98,116,77,97,110,105,102,111,108,100,82,101,115,117,108,116,69,49,51,98,116,68,117,109,109,121,82,101,115,117,108,116,0,0,0,0,224,81,0,0,48,75,0,0,80,40,0,0,0,0,0,0,0,0,0,0,16,76,0,0,1,1,0,0,2,1,0,0,15,0,0,0,9,0,0,0,98,0,0,0,0,0,0,0,51,49,98,116,67,111,110,118,101,120,80,108,97,110,101,67,111,108,108,105,115,105,111,110,65,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,224,81,0,0,232,75,0,0,176,50,0,0,0,0,0,0,0,0,0,0,72,76,0,0,3,1,0,0,4,1,0,0,49,56,98,116,67,111,110,118,101,120,80,111,108,121,104,101,100,114,111,110,0,0,0,0,184,81,0,0,48,76,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,76,0,0,5,1,0,0,6,1,0,0,29,0,0,0,30,0,0,0,88,0,0,0,0,0,0,0,50,51,98,116,72,97,115,104,101,100,83,105,109,112,108,101,80,97,105,114,67,97,99,104,101,0,0,0,0,0,0,0,184,81,0,0,168,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,116,73,110,116,73,110,100,101,120,68,97,116,97,0,0,98,116,83,104,111,114,116,73,110,116,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,0,0,0,0,0,98,116,67,104,97,114,73,110,100,101,120,84,114,105,112,108,101,116,68,97,116,97,0,0,98,116,86,101,99,116,111,114,51,70,108,111,97,116,68,97,116,97,0,0,0,0,0,0,98,116,86,101,99,116,111,114,51,68,111,117,98,108,101,68,97,116,97,0,0,0,0,0,98,116,77,101,115,104,80,97,114,116,68,97,116,97,0,0,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,68,97,116,97,0,0,0,0,0,50,51,98,116,83,116,114,105,100,105,110,103,77,101,115,104,73,110,116,101,114,102,97,99,101,0,0,0,0,0,0,0,184,81,0,0,144,77,0,0,0,0,0,0,32,78,0,0,7,1,0,0,8,1,0,0,56,0,0,0,1,0,0,0,2,0,0,0,86,0,0,0,87,0,0,0,83,0,0,0,99,0,0,0,100,0,0,0,84,0,0,0,62,0,0,0,63,0,0,0,85,0,0,0,27,0,0,0,0,0,0,0,50,54,98,116,84,114,105,97,110,103,108,101,73,110,100,101,120,86,101,114,116,101,120,65,114,114,97,121,0,0,0,0,224,81,0,0,0,78,0,0,176,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,111,111,116,0,0,0,0,72,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,40,80,0,0,9,1,0,0,10,1,0,0,89],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+10240);allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,224,81,0,0,24,80,0,0,176,80,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,184,81,0,0,160,80,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,184,81,0,0,184,80,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,224,81,0,0,208,80,0,0,200,80,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,224,81,0,0,8,81,0,0,248,80,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,224,81,0,0,104,81,0,0,248,80,0,0,0,0,0,0,224,81,0,0,64,81,0,0,144,81,0,0,0,0,0,0,0,0,0,0,48,81,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,31,0,0,0,4,0,0,0,16,0,0,0,62,0,0,0,0,0,0,0,40,82,0,0,11,1,0,0,15,1,0,0,13,1,0,0,14,1,0,0,31,0,0,0,5,0,0,0,17,0,0,0,63,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,224,81,0,0,0,82,0,0,48,81,0,0,0,0,0,0,0,0,0,0,136,82,0,0,11,1,0,0,16,1,0,0,13,1,0,0,14,1,0,0,31,0,0,0,6,0,0,0,18,0,0,0,64,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,224,81,0,0,96,82,0,0,48,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+20480);var tempDoublePtr=Runtime.alignMemory(allocate(12,"i8",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}var _cosf=Math_cos;Module["_i64Subtract"]=_i64Subtract;var _fabsf=Math_abs;var ___errno_state=0;function ___setErrNo(value){HEAP32[___errno_state>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator==="object")return navigator["hardwareConcurrency"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["_memset"]=_memset;function _abort(){Module["abort"]()}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}var _acosf=Math_acos;Module["_strlen"]=_strlen;var _sqrtf=Math_sqrt;var FS=undefined;var SOCKFS=undefined;function _send(fd,buf,len,flags){var sock=SOCKFS.getSocket(fd);if(!sock){___setErrNo(ERRNO_CODES.EBADF);return-1}return _write(fd,buf,len)}function _pwrite(fildes,buf,nbyte,offset){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte,offset)}catch(e){FS.handleFSError(e);return-1}}function _write(fildes,buf,nbyte){var stream=FS.getStream(fildes);if(!stream){___setErrNo(ERRNO_CODES.EBADF);return-1}try{var slab=HEAP8;return FS.write(stream,slab,buf,nbyte)}catch(e){FS.handleFSError(e);return-1}}function _fileno(stream){stream=FS.getStreamFromPtr(stream);if(!stream)return-1;return stream.fd}function _fputc(c,stream){var chr=unSign(c&255);HEAP8[_fputc.ret>>0]=chr;var fd=_fileno(stream);var ret=_write(fd,_fputc.ret,1);if(ret==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return-1}else{return chr}}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}Module["_i64Add"]=_i64Add;var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}var _llvm_pow_f32=Math_pow;function _fmod(x,y){return x%y}function _fmodf(){return _fmod.apply(null,arguments)}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}var _atan2f=Math_atan2;function ___cxa_pure_virtual(){ABORT=true;throw"Pure virtual function called!"}function ___cxa_guard_release(){}var _asinf=Math_asin;function ___cxa_guard_acquire(variable){if(!HEAP8[variable>>0]){HEAP8[variable>>0]=1;return 1}return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _emscripten_asm_const_double(code){var args=Array.prototype.slice.call(arguments,1);return+Runtime.getAsmConst(code,args.length).apply(null,args)}function ___cxa_begin_catch(ptr){__ZSt18uncaught_exceptionv.uncaught_exception--;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}var _sinf=Math_sin;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort("cannot dynamically allocate, sbrk now has control")})}var ret=DYNAMICTOP;if(bytes!=0)self.alloc(bytes);return ret}Module["_memmove"]=_memmove;function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}function ___errno_location(){return ___errno_state}Module["_llvm_bswap_i32"]=_llvm_bswap_i32;function _llvm_trap(){abort("trap!")}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var _UItoF=true;function _fwrite(ptr,size,nitems,stream){var bytesToWrite=nitems*size;if(bytesToWrite==0)return 0;var fd=_fileno(stream);var bytesWritten=_write(fd,ptr,bytesToWrite);if(bytesWritten==-1){var streamObj=FS.getStreamFromPtr(stream);if(streamObj)streamObj.error=true;return 0}else{return bytesWritten/size|0}}function __reallyNegative(x){return x<0||x===0&&1/x===-Infinity}function __formatString(format,varargs){var textIndex=format;var argIndex=0;function getNextArg(type){var ret;if(type==="double"){ret=(HEAP32[tempDoublePtr>>2]=HEAP32[varargs+argIndex>>2],HEAP32[tempDoublePtr+4>>2]=HEAP32[varargs+(argIndex+4)>>2],+HEAPF64[tempDoublePtr>>3])}else if(type=="i64"){ret=[HEAP32[varargs+argIndex>>2],HEAP32[varargs+(argIndex+4)>>2]]}else{type="i32";ret=HEAP32[varargs+argIndex>>2]}argIndex+=Runtime.getNativeFieldSize(type);return ret}var ret=[];var curr,next,currArg;while(1){var startTextIndex=textIndex;curr=HEAP8[textIndex>>0];if(curr===0)break;next=HEAP8[textIndex+1>>0];if(curr==37){var flagAlwaysSigned=false;var flagLeftAlign=false;var flagAlternative=false;var flagZeroPad=false;var flagPadSign=false;flagsLoop:while(1){switch(next){case 43:flagAlwaysSigned=true;break;case 45:flagLeftAlign=true;break;case 35:flagAlternative=true;break;case 48:if(flagZeroPad){break flagsLoop}else{flagZeroPad=true;break};case 32:flagPadSign=true;break;default:break flagsLoop}textIndex++;next=HEAP8[textIndex+1>>0]}var width=0;if(next==42){width=getNextArg("i32");textIndex++;next=HEAP8[textIndex+1>>0]}else{while(next>=48&&next<=57){width=width*10+(next-48);textIndex++;next=HEAP8[textIndex+1>>0]}}var precisionSet=false,precision=-1;if(next==46){precision=0;precisionSet=true;textIndex++;next=HEAP8[textIndex+1>>0];if(next==42){precision=getNextArg("i32");textIndex++}else{while(1){var precisionChr=HEAP8[textIndex+1>>0];if(precisionChr<48||precisionChr>57)break;precision=precision*10+(precisionChr-48);textIndex++}}next=HEAP8[textIndex+1>>0]}if(precision<0){precision=6;precisionSet=false}var argSize;switch(String.fromCharCode(next)){case"h":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==104){textIndex++;argSize=1}else{argSize=2}break;case"l":var nextNext=HEAP8[textIndex+2>>0];if(nextNext==108){textIndex++;argSize=8}else{argSize=4}break;case"L":case"q":case"j":argSize=8;break;case"z":case"t":case"I":argSize=4;break;default:argSize=null}if(argSize)textIndex++;next=HEAP8[textIndex+1>>0];switch(String.fromCharCode(next)){case"d":case"i":case"u":case"o":case"x":case"X":case"p":{var signed=next==100||next==105;argSize=argSize||4;var currArg=getNextArg("i"+argSize*8);var origArg=currArg;var argText;if(argSize==8){currArg=Runtime.makeBigInt(currArg[0],currArg[1],next==117)}if(argSize<=4){var limit=Math.pow(256,argSize)-1;currArg=(signed?reSign:unSign)(currArg&limit,argSize*8)}var currAbsArg=Math.abs(currArg);var prefix="";if(next==100||next==105){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],null);else argText=reSign(currArg,8*argSize,1).toString(10)}else if(next==117){if(argSize==8&&i64Math)argText=i64Math.stringify(origArg[0],origArg[1],true);else argText=unSign(currArg,8*argSize,1).toString(10);currArg=Math.abs(currArg)}else if(next==111){argText=(flagAlternative?"0":"")+currAbsArg.toString(8)}else if(next==120||next==88){prefix=flagAlternative&&currArg!=0?"0x":"";if(argSize==8&&i64Math){if(origArg[1]){argText=(origArg[1]>>>0).toString(16);var lower=(origArg[0]>>>0).toString(16);while(lower.length<8)lower="0"+lower;argText+=lower}else{argText=(origArg[0]>>>0).toString(16)}}else if(currArg<0){currArg=-currArg;argText=(currAbsArg-1).toString(16);var buffer=[];for(var i=0;i<argText.length;i++){buffer.push((15-parseInt(argText[i],16)).toString(16))}argText=buffer.join("");while(argText.length<argSize*2)argText="f"+argText}else{argText=currAbsArg.toString(16)}if(next==88){prefix=prefix.toUpperCase();argText=argText.toUpperCase()}}else if(next==112){if(currAbsArg===0){argText="(nil)"}else{prefix="0x";argText=currAbsArg.toString(16)}}if(precisionSet){while(argText.length<precision){argText="0"+argText}}if(currArg>=0){if(flagAlwaysSigned){prefix="+"+prefix}else if(flagPadSign){prefix=" "+prefix}}if(argText.charAt(0)=="-"){prefix="-"+prefix;argText=argText.substr(1)}while(prefix.length+argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad){argText="0"+argText}else{prefix=" "+prefix}}}argText=prefix+argText;argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"f":case"F":case"e":case"E":case"g":case"G":{var currArg=getNextArg("double");var argText;if(isNaN(currArg)){argText="nan";flagZeroPad=false}else if(!isFinite(currArg)){argText=(currArg<0?"-":"")+"inf";flagZeroPad=false}else{var isGeneral=false;var effectivePrecision=Math.min(precision,20);if(next==103||next==71){isGeneral=true;precision=precision||1;var exponent=parseInt(currArg.toExponential(effectivePrecision).split("e")[1],10);if(precision>exponent&&exponent>=-4){next=(next==103?"f":"F").charCodeAt(0);precision-=exponent+1}else{next=(next==103?"e":"E").charCodeAt(0);precision--}effectivePrecision=Math.min(precision,20)}if(next==101||next==69){argText=currArg.toExponential(effectivePrecision);if(/[eE][-+]\d$/.test(argText)){argText=argText.slice(0,-1)+"0"+argText.slice(-1)}}else if(next==102||next==70){argText=currArg.toFixed(effectivePrecision);if(currArg===0&&__reallyNegative(currArg)){argText="-"+argText}}var parts=argText.split("e");if(isGeneral&&!flagAlternative){while(parts[0].length>1&&parts[0].indexOf(".")!=-1&&(parts[0].slice(-1)=="0"||parts[0].slice(-1)==".")){parts[0]=parts[0].slice(0,-1)}}else{if(flagAlternative&&argText.indexOf(".")==-1)parts[0]+=".";while(precision>effectivePrecision++)parts[0]+="0"}argText=parts[0]+(parts.length>1?"e"+parts[1]:"");if(next==69)argText=argText.toUpperCase();if(currArg>=0){if(flagAlwaysSigned){argText="+"+argText}else if(flagPadSign){argText=" "+argText}}}while(argText.length<width){if(flagLeftAlign){argText+=" "}else{if(flagZeroPad&&(argText[0]=="-"||argText[0]=="+")){argText=argText[0]+"0"+argText.slice(1)}else{argText=(flagZeroPad?"0":" ")+argText}}}if(next<97)argText=argText.toUpperCase();argText.split("").forEach((function(chr){ret.push(chr.charCodeAt(0))}));break};case"s":{var arg=getNextArg("i8*");var argLength=arg?_strlen(arg):"(null)".length;if(precisionSet)argLength=Math.min(argLength,precision);if(!flagLeftAlign){while(argLength<width--){ret.push(32)}}if(arg){for(var i=0;i<argLength;i++){ret.push(HEAPU8[arg++>>0])}}else{ret=ret.concat(intArrayFromString("(null)".substr(0,argLength),true))}if(flagLeftAlign){while(argLength<width--){ret.push(32)}}break};case"c":{if(flagLeftAlign)ret.push(getNextArg("i8"));while(--width>0){ret.push(32)}if(!flagLeftAlign)ret.push(getNextArg("i8"));break};case"n":{var ptr=getNextArg("i32*");HEAP32[ptr>>2]=ret.length;break};case"%":{ret.push(curr);break};default:{for(var i=startTextIndex;i<textIndex+2;i++){ret.push(HEAP8[i>>0])}}}textIndex+=2}else{ret.push(curr);textIndex+=1}}return ret}function _fprintf(stream,format,varargs){var result=__formatString(format,varargs);var stack=Runtime.stackSave();var ret=_fwrite(allocate(result,"i8",ALLOC_STACK),1,result.length,stream);Runtime.stackRestore(stack);return ret}function _vfprintf(s,f,va_arg){return _fprintf(s,f,HEAP32[va_arg>>2])}var _stderr=allocate(1,"i32*",ALLOC_STATIC);___errno_state=Runtime.staticAlloc(4);HEAP32[___errno_state>>2]=0;_fputc.ret=allocate([0],"i8",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,"TOTAL_MEMORY not big enough for stack");var ctlz_i8=allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",ALLOC_DYNAMIC);var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_DYNAMIC);function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vid(index,a1,a2){try{Module["dynCall_vid"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiidii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiidii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viidi(index,a1,a2,a3,a4){try{Module["dynCall_viidi"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viddiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viddiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vidii(index,a1,a2,a3,a4){try{Module["dynCall_vidii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vidi(index,a1,a2,a3){try{Module["dynCall_vidi"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{return Module["dynCall_diiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiddddiid(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11){try{Module["dynCall_viiiiddddiid"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_diiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiid(index,a1,a2,a3){try{return Module["dynCall_iiid"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_di(index,a1){try{return Module["dynCall_di"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiidii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_diiidii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viidii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viidii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diii(index,a1,a2,a3){try{return Module["dynCall_diii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10){try{return Module["dynCall_diiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiid(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{return Module["dynCall_diiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_did(index,a1,a2){try{return Module["dynCall_did"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiidddddidi(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12){try{Module["dynCall_viiiidddddidi"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diidii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_diidii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_diiii(index,a1,a2,a3,a4){try{return Module["dynCall_diiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9){try{return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiid(index,a1,a2,a3,a4){try{Module["dynCall_viiid"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viid(index,a1,a2,a3){try{Module["dynCall_viid"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iidid(index,a1,a2,a3,a4){try{return Module["dynCall_iidid"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array};Module.asmLibraryArg={"abort":abort,"assert":assert,"min":Math_min,"invoke_viiiii":invoke_viiiii,"invoke_vid":invoke_vid,"invoke_vi":invoke_vi,"invoke_viiidii":invoke_viiidii,"invoke_vii":invoke_vii,"invoke_iiiiiiiiiii":invoke_iiiiiiiiiii,"invoke_ii":invoke_ii,"invoke_viidi":invoke_viidi,"invoke_viddiii":invoke_viddiii,"invoke_vidii":invoke_vidii,"invoke_iiiii":invoke_iiiii,"invoke_vidi":invoke_vidi,"invoke_diiiiiiii":invoke_diiiiiiii,"invoke_viiiiddddiid":invoke_viiiiddddiid,"invoke_diiiii":invoke_diiiii,"invoke_iiii":invoke_iiii,"invoke_viiiiii":invoke_viiiiii,"invoke_iiid":invoke_iiid,"invoke_di":invoke_di,"invoke_iiiiiii":invoke_iiiiiii,"invoke_diiidii":invoke_diiidii,"invoke_viidii":invoke_viidii,"invoke_viiiiiii":invoke_viiiiiii,"invoke_viiiiiiiii":invoke_viiiiiiiii,"invoke_viiiiiiiiii":invoke_viiiiiiiiii,"invoke_iii":invoke_iii,"invoke_diii":invoke_diii,"invoke_diiiiiiiiii":invoke_diiiiiiiiii,"invoke_viiiid":invoke_viiiid,"invoke_diiiiiiiii":invoke_diiiiiiiii,"invoke_did":invoke_did,"invoke_viiiidddddidi":invoke_viiiidddddidi,"invoke_diidii":invoke_diidii,"invoke_diiii":invoke_diiii,"invoke_iiiiiiiiii":invoke_iiiiiiiiii,"invoke_viiid":invoke_viiid,"invoke_viii":invoke_viii,"invoke_v":invoke_v,"invoke_viid":invoke_viid,"invoke_iidid":invoke_iidid,"invoke_viiii":invoke_viiii,"_emscripten_asm_const_double":_emscripten_asm_const_double,"_cosf":_cosf,"_send":_send,"_sqrtf":_sqrtf,"_fmod":_fmod,"___cxa_guard_acquire":___cxa_guard_acquire,"___setErrNo":___setErrNo,"_vfprintf":_vfprintf,"_atan2f":_atan2f,"_fmodf":_fmodf,"___cxa_guard_release":___cxa_guard_release,"_pwrite":_pwrite,"_acosf":_acosf,"_asinf":_asinf,"_fabsf":_fabsf,"_sbrk":_sbrk,"_llvm_pow_f32":_llvm_pow_f32,"___cxa_begin_catch":___cxa_begin_catch,"_sinf":_sinf,"_fileno":_fileno,"___resumeException":___resumeException,"___cxa_find_matching_catch":___cxa_find_matching_catch,"_sysconf":_sysconf,"__reallyNegative":__reallyNegative,"_pthread_getspecific":_pthread_getspecific,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"_emscripten_memcpy_big":_emscripten_memcpy_big,"_pthread_once":_pthread_once,"_pthread_key_create":_pthread_key_create,"_write":_write,"___errno_location":___errno_location,"_pthread_setspecific":_pthread_setspecific,"_fputc":_fputc,"___cxa_throw":___cxa_throw,"_abort":_abort,"___cxa_allocate_exception":___cxa_allocate_exception,"_fwrite":_fwrite,"_time":_time,"_fprintf":_fprintf,"_gettimeofday":_gettimeofday,"__formatString":__formatString,"_llvm_trap":_llvm_trap,"___cxa_pure_virtual":___cxa_pure_virtual,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"ctlz_i8":ctlz_i8,"NaN":NaN,"Infinity":Infinity,"_stderr":_stderr};// EMSCRIPTEN_START_ASM
  var asm=(function(global,env,buffer) {
  "use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env._stderr|0;var p=0;var q=0;var r=0;var s=0;var t=+env.NaN,u=+env.Infinity;var v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=global.Math.floor;var P=global.Math.abs;var Q=global.Math.sqrt;var R=global.Math.pow;var S=global.Math.cos;var T=global.Math.sin;var U=global.Math.tan;var V=global.Math.acos;var W=global.Math.asin;var X=global.Math.atan;var Y=global.Math.atan2;var Z=global.Math.exp;var _=global.Math.log;var $=global.Math.ceil;var aa=global.Math.imul;var ba=env.abort;var ca=env.assert;var da=env.min;var ea=env.invoke_viiiii;var fa=env.invoke_vid;var ga=env.invoke_vi;var ha=env.invoke_viiidii;var ia=env.invoke_vii;var ja=env.invoke_iiiiiiiiiii;var ka=env.invoke_ii;var la=env.invoke_viidi;var ma=env.invoke_viddiii;var na=env.invoke_vidii;var oa=env.invoke_iiiii;var pa=env.invoke_vidi;var qa=env.invoke_diiiiiiii;var ra=env.invoke_viiiiddddiid;var sa=env.invoke_diiiii;var ta=env.invoke_iiii;var ua=env.invoke_viiiiii;var va=env.invoke_iiid;var wa=env.invoke_di;var xa=env.invoke_iiiiiii;var ya=env.invoke_diiidii;var za=env.invoke_viidii;var Aa=env.invoke_viiiiiii;var Ba=env.invoke_viiiiiiiii;var Ca=env.invoke_viiiiiiiiii;var Da=env.invoke_iii;var Ea=env.invoke_diii;var Fa=env.invoke_diiiiiiiiii;var Ga=env.invoke_viiiid;var Ha=env.invoke_diiiiiiiii;var Ia=env.invoke_did;var Ja=env.invoke_viiiidddddidi;var Ka=env.invoke_diidii;var La=env.invoke_diiii;var Ma=env.invoke_iiiiiiiiii;var Na=env.invoke_viiid;var Oa=env.invoke_viii;var Pa=env.invoke_v;var Qa=env.invoke_viid;var Ra=env.invoke_iidid;var Sa=env.invoke_viiii;var Ta=env._emscripten_asm_const_double;var Ua=env._cosf;var Va=env._send;var Wa=env._sqrtf;var Xa=env._fmod;var Ya=env.___cxa_guard_acquire;var Za=env.___setErrNo;var _a=env._vfprintf;var $a=env._atan2f;var ab=env._fmodf;var bb=env.___cxa_guard_release;var cb=env._pwrite;var db=env._acosf;var eb=env._asinf;var fb=env._fabsf;var gb=env._sbrk;var hb=env._llvm_pow_f32;var ib=env.___cxa_begin_catch;var jb=env._sinf;var kb=env._fileno;var lb=env.___resumeException;var mb=env.___cxa_find_matching_catch;var nb=env._sysconf;var ob=env.__reallyNegative;var pb=env._pthread_getspecific;var qb=env.__ZSt18uncaught_exceptionv;var rb=env._emscripten_memcpy_big;var sb=env._pthread_once;var tb=env._pthread_key_create;var ub=env._write;var vb=env.___errno_location;var wb=env._pthread_setspecific;var xb=env._fputc;var yb=env.___cxa_throw;var zb=env._abort;var Ab=env.___cxa_allocate_exception;var Bb=env._fwrite;var Cb=env._time;var Db=env._fprintf;var Eb=env._gettimeofday;var Fb=env.__formatString;var Gb=env._llvm_trap;var Hb=env.___cxa_pure_virtual;var Ib=0.0;
  // EMSCRIPTEN_START_FUNCS
  function wc(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function xc(){return i|0}function yc(a){a=a|0;i=a}function zc(a,b){a=a|0;b=b|0;if(!p){p=a;q=b}}function Ac(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function Bc(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function Cc(a){a=a|0;E=a}function Dc(){return E|0}function Ec(a){a=a|0;return 52}function Fc(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;var e=0.0,f=0.0,h=0.0;e=+S(+b);f=+S(+c);h=+S(+d);b=+T(+b);c=+T(+c);d=+T(+d);g[a>>2]=f*h;g[a+4>>2]=c*b*h-e*d;g[a+8>>2]=c*e*h+b*d;g[a+12>>2]=0.0;g[a+16>>2]=f*d;g[a+20>>2]=c*b*d+e*h;g[a+24>>2]=c*e*d-b*h;g[a+28>>2]=0.0;g[a+32>>2]=-c;g[a+36>>2]=f*b;g[a+40>>2]=f*e;g[a+44>>2]=0.0;return}function Gc(a,b){a=a|0;b=b|0;var c=0;c=i;Hc(a,b);i=c;return}function Hc(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0.0,h=0,j=0.0,k=0,l=0;c=i;i=i+16|0;f=+g[a>>2];e=+g[a+20>>2];d=+g[a+40>>2];if(f+e+d>0.0){f=+Q(+(f+e+d+1.0));g[c+12>>2]=f*.5;j=(+g[a+36>>2]- +g[a+24>>2])*(.5/f);g[c>>2]=j;d=(+g[a+8>>2]- +g[a+32>>2])*(.5/f);g[c+4>>2]=d;e=(+g[a+16>>2]- +g[a+4>>2])*(.5/f);g[c+8>>2]=e;f=f*.5;g[b>>2]=j;h=b+4|0;g[h>>2]=d;h=b+8|0;g[h>>2]=e;h=b+12|0;g[h>>2]=f;i=c;return}if(f<e)h=e<d?2:1;else h=f<d?2:0;l=((h+1|0)>>>0)%3|0;k=((h+2|0)>>>0)%3|0;d=+Q(+(+g[a+(h<<4)+(h<<2)>>2]- +g[a+(l<<4)+(l<<2)>>2]- +g[a+(k<<4)+(k<<2)>>2]+1.0));g[c+(h<<2)>>2]=d*.5;g[c+12>>2]=(+g[a+(k<<4)+(l<<2)>>2]- +g[a+(l<<4)+(k<<2)>>2])*(.5/d);g[c+(l<<2)>>2]=(+g[a+(l<<4)+(h<<2)>>2]+ +g[a+(h<<4)+(l<<2)>>2])*(.5/d);g[c+(k<<2)>>2]=(+g[a+(k<<4)+(h<<2)>>2]+ +g[a+(h<<4)+(k<<2)>>2])*(.5/d);d=+g[c>>2];e=+g[c+4>>2];f=+g[c+8>>2];j=+g[c+12>>2];g[b>>2]=d;h=b+4|0;g[h>>2]=e;h=b+8|0;g[h>>2]=f;h=b+12|0;g[h>>2]=j;i=c;return}function Ic(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Jc(){var a=0,d=0,e=0;a=i;d=fF(8)|0;a:do if(!d){while(1){d=c[5158]|0;c[5158]=d+0;if(!d)break;sc[d&3]();d=fF(8)|0;if(d)break a}d=Ab(4)|0;c[d>>2]=20472;yb(d|0,20520,265)}while(0);e=d;c[e>>2]=0;c[e+4>>2]=0;b[d+4>>1]=1;b[d+6>>1]=-1;c[d>>2]=840;i=a;return d|0}function Kc(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0.0,l=0;l=i;k=+Vb[c[(c[a>>2]|0)+12>>2]&1](a,b,d,e,f,g,h,j);i=l;return+k}function Lc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Mc(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(95)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}ft(e,a,b,1);i=d;return e|0}function Nc(a){a=a|0;ib(a|0)|0;IE()}function Oc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(95)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}ft(f,a,b,d);i=e;return f|0}function Pc(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Qc(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Rc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Sc(){var a=0,b=0;a=i;b=fF(196)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(196)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);Zx(b,0);i=a;return b|0}function Tc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Uc(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Vc(){var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(215)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[d>>2]=4024;a[d+20>>0]=1;c[d+16>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+40>>0]=1;c[d+36>>2]=0;c[d+28>>2]=0;c[d+32>>2]=0;a[d+60>>0]=1;c[d+56>>2]=0;c[d+48>>2]=0;c[d+52>>2]=0;a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;c[d+72>>2]=0;a[d+100>>0]=1;c[d+96>>2]=0;c[d+88>>2]=0;c[d+92>>2]=0;a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;a[d+140>>0]=1;c[d+136>>2]=0;c[d+128>>2]=0;c[d+132>>2]=0;a[d+160>>0]=1;c[d+156>>2]=0;c[d+148>>2]=0;c[d+152>>2]=0;a[d+180>>0]=1;c[d+176>>2]=0;c[d+168>>2]=0;c[d+172>>2]=0;c[d+192>>2]=0;i=b;return d|0}function Wc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Xc(a){a=a|0;return+(+g[a>>2])}function Yc(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Zc(a){a=a|0;return c[a+4>>2]|0}function _c(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function $c(a){a=a|0;return c[a+8>>2]|0}function ad(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function bd(a){a=a|0;return+(+g[a+12>>2])}function cd(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function dd(b){b=b|0;return(a[b+16>>0]&1)!=0|0}function ed(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function fd(b){b=b|0;return(a[b+24>>0]&1)!=0|0}function gd(b,c){b=b|0;c=c|0;a[b+24>>0]=c&1;return}function hd(b){b=b|0;return(a[b+25>>0]&1)!=0|0}function id(b,c){b=b|0;c=c|0;a[b+25>>0]=c&1;return}function jd(b){b=b|0;return(a[b+26>>0]&1)!=0|0}function kd(b,c){b=b|0;c=c|0;a[b+26>>0]=c&1;return}function ld(a){a=a|0;return+(+g[a+28>>2])}function md(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function nd(b){b=b|0;return(a[b+32>>0]&1)!=0|0}function od(b,c){b=b|0;c=c|0;a[b+32>>0]=c&1;return}function pd(a){a=a|0;return+(+g[a+36>>2])}function qd(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function rd(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function sd(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(75)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;c[e>>2]=6296;c[e+4>>2]=10;c[e+52>>2]=1;g[e+28>>2]=a;g[e+32>>2]=b*.5;g[e+36>>2]=a;g[e+40>>2]=0.0;i=d;return e|0}function td(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function ud(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function vd(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function wd(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function xd(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(135)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}_r(e,a,b,16384,0,0);i=d;return e|0}function yd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(135)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}_r(f,a,b,d&65535,0,0);i=e;return f|0}function zd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;c[5004]=(c[5004]|0)+1;g=fF(135)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}_r(g,a,b,d&65535,e,0);i=f;return g|0}function Ad(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;c[5004]=(c[5004]|0)+1;h=fF(135)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}_r(h,a,b,d&65535,e,f);i=g;return h|0}function Bd(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Cd(){var b=0,d=0,e=0,f=0,h=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(307)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}g[d+164>>2]=1.0;g[d+168>>2]=1.0;g[d+172>>2]=1.0;g[d+176>>2]=0.0;c[d+180>>2]=0;g[d+184>>2]=999999984306749400.0;h=d+188|0;e=d+204|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[e>>2]=1;c[d+208>>2]=-1;c[d+212>>2]=-1;c[d+216>>2]=1;g[d+220>>2]=0.0;g[d+224>>2]=.5;g[d+228>>2]=0.0;g[d+232>>2]=0.0;e=d+236|0;c[d+240>>2]=0;g[d+244>>2]=1.0;h=d+248|0;f=d+4|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=d+8|0;h=d+24|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[h>>2]=1.0;h=d+28|0;f=d+44|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=d+48|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;a[d+280>>0]=1;c[d+276>>2]=0;c[d+268>>2]=0;c[d+272>>2]=0;c[e>>2]=4;c[d>>2]=13056;c[5004]=(c[5004]|0)+1;e=fF(95)|0;if(!e){f=0;h=d+284|0;c[h>>2]=f;i=b;return d|0}c[(e+19&-16)+ -4>>2]=e;if(!(e+19&-16)){f=0;h=d+284|0;c[h>>2]=f;i=b;return d|0}Yz(e+19&-16);f=e+19&-16;h=d+284|0;c[h>>2]=f;i=b;return d|0}function Dd(a){a=a|0;return c[a+192>>2]|0}function Ed(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function Fd(a,b){a=a|0;b=b|0;var d=0;d=i;if(((c[a+216>>2]|0)+ -4|0)>>>0<2){i=d;return}c[a+216>>2]=b;i=d;return}function Gd(a,b){a=a|0;b=b|0;c[a+216>>2]=b;return}function Hd(a){a=a|0;var b=0;b=i;if(c[a+204>>2]&3){i=b;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=b;return}function Id(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b?(c[a+204>>2]&3|0)!=0:0){i=d;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=d;return}function Jd(a){a=a|0;a=c[a+216>>2]|0;return((a|0)==2?0:(a|0)!=5)|0}function Kd(a){a=a|0;return(c[a+204>>2]&2|0)!=0|0}function Ld(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+228>>2]=b;return}function Md(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+224>>2]=b;return}function Nd(a){a=a|0;return a+4|0}function Od(a){a=a|0;return c[a+204>>2]|0}function Pd(a,b){a=a|0;b=b|0;c[a+204>>2]=b;return}function Qd(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];i=d;return}function Rd(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function Sd(a,b){a=a|0;b=+b;g[a+252>>2]=b;return}function Td(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function Ud(a){a=a|0;return c[a+268>>2]|0}function Vd(a,b){a=a|0;b=b|0;return c[(c[a+276>>2]|0)+(b<<2)>>2]|0}function Wd(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+8>>2]&511](a);i=b;return}function Xd(b,d,e){b=+b;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;f=i;h=fF(140)|0;a:do if(!h){while(1){h=c[5158]|0;c[5158]=h+0;if(!h)break;sc[h&3]();h=fF(140)|0;if(h)break a}k=Ab(4)|0;c[k>>2]=20472;yb(k|0,20520,265)}while(0);g[h>>2]=b;c[h+4>>2]=d;d=h+8|0;j=h+56|0;k=d;do k=k+16|0;while((k|0)!=(j|0));c[h+72>>2]=e;j=h+76|0;k=h+100|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;g[k>>2]=.5;g[h+104>>2]=0.0;g[h+108>>2]=0.0;g[h+112>>2]=.800000011920929;g[h+116>>2]=1.0;a[h+120>>0]=0;g[h+124>>2]=.004999999888241291;g[h+128>>2]=.009999999776482582;g[h+132>>2]=.009999999776482582;g[h+136>>2]=.009999999776482582;ln(d);i=f;return h|0}function Yd(b,d,e,f){b=+b;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=fF(140)|0;a:do if(!j){while(1){j=c[5158]|0;c[5158]=j+0;if(!j)break;sc[j&3]();j=fF(140)|0;if(j)break a}l=Ab(4)|0;c[l>>2]=20472;yb(l|0,20520,265)}while(0);g[j>>2]=b;c[j+4>>2]=d;d=j+8|0;k=j+56|0;l=d;do l=l+16|0;while((l|0)!=(k|0));c[j+72>>2]=e;l=j+76|0;c[l+0>>2]=c[f+0>>2];c[l+4>>2]=c[f+4>>2];c[l+8>>2]=c[f+8>>2];c[l+12>>2]=c[f+12>>2];g[j+92>>2]=0.0;g[j+96>>2]=0.0;g[j+100>>2]=.5;g[j+104>>2]=0.0;g[j+108>>2]=0.0;g[j+112>>2]=.800000011920929;g[j+116>>2]=1.0;a[j+120>>0]=0;g[j+124>>2]=.004999999888241291;g[j+128>>2]=.009999999776482582;g[j+132>>2]=.009999999776482582;g[j+136>>2]=.009999999776482582;ln(d);i=h;return j|0}function Zd(a){a=a|0;return+(+g[a+92>>2])}function _d(a,b){a=a|0;b=+b;g[a+92>>2]=b;return}function $d(a){a=a|0;return+(+g[a+96>>2])}function ae(a,b){a=a|0;b=+b;g[a+96>>2]=b;return}function be(a){a=a|0;return+(+g[a+100>>2])}function ce(a,b){a=a|0;b=+b;g[a+100>>2]=b;return}function de(a){a=a|0;return+(+g[a+104>>2])}function ee(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function fe(a){a=a|0;return+(+g[a+108>>2])}function ge(a,b){a=a|0;b=+b;g[a+108>>2]=b;return}function he(a){a=a|0;return+(+g[a+112>>2])}function ie(a,b){a=a|0;b=+b;g[a+112>>2]=b;return}function je(a){a=a|0;return+(+g[a+116>>2])}function ke(a,b){a=a|0;b=+b;g[a+116>>2]=b;return}function le(b){b=b|0;return(a[b+120>>0]&1)!=0|0}function me(b,c){b=b|0;c=c|0;a[b+120>>0]=c&1;return}function ne(a){a=a|0;return+(+g[a+124>>2])}function oe(a,b){a=a|0;b=+b;g[a+124>>2]=b;return}function pe(a){a=a|0;return+(+g[a+128>>2])}function qe(a,b){a=a|0;b=+b;g[a+128>>2]=b;return}function re(a){a=a|0;return+(+g[a+132>>2])}function se(a,b){a=a|0;b=+b;g[a+132>>2]=b;return}function te(a){a=a|0;return+(+g[a+136>>2])}function ue(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function ve(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function we(a){a=a|0;return a+48|0}function xe(a){a=a|0;return a+32|0}function ye(a){a=a|0;return a|0}function ze(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];i=d;return}function Ae(a){a=a|0;return a+16|0}function Be(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+16>>2]=c[b+0>>2];c[a+20>>2]=c[b+4>>2];c[a+24>>2]=c[b+8>>2];c[a+28>>2]=c[b+12>>2];i=d;return}function Ce(a){a=a|0;return a+32|0}function De(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+32>>2]=c[b+0>>2];c[a+36>>2]=c[b+4>>2];c[a+40>>2]=c[b+8>>2];c[a+44>>2]=c[b+12>>2];i=d;return}function Ee(a){a=a|0;return a+48|0}function Fe(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+48>>2]=c[b+0>>2];c[a+52>>2]=c[b+4>>2];c[a+56>>2]=c[b+8>>2];c[a+60>>2]=c[b+12>>2];i=d;return}function Ge(a){a=a|0;return a+64|0}function He(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+64>>2]=c[b+0>>2];c[a+68>>2]=c[b+4>>2];c[a+72>>2]=c[b+8>>2];c[a+76>>2]=c[b+12>>2];i=d;return}function Ie(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Je(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=i;i=i+96|0;c[5004]=(c[5004]|0)+1;h=fF(1331)|0;if(!h)k=0;else{c[(h+19&-16)+ -4>>2]=h;k=h+19&-16}if((a[5024]|0)==0?(Ya(5024)|0)!=0:0){c[f+80>>2]=0;c[f+84>>2]=0;c[f+88>>2]=0;c[f+92>>2]=0;lr(4408,0.0,0,0,f+80|0);bb(5024)}c[f+64>>2]=0;c[f+68>>2]=0;c[f+72>>2]=0;c[f+76>>2]=0;mr(4408,0.0,f+64|0);c[k+4>>2]=6;c[k+8>>2]=-1;c[k+12>>2]=-1;g[k+16>>2]=3.4028234663852886e+38;a[k+20>>0]=1;a[k+21>>0]=0;c[k+24>>2]=-1;j=k+28|0;c[j>>2]=4408;h=k+32|0;c[h>>2]=b;g[k+36>>2]=0.0;g[k+40>>2]=.30000001192092896;c[k+44>>2]=0;c[k>>2]=2368;l=k+112|0;c[l+0>>2]=c[d+0>>2];c[l+4>>2]=c[d+4>>2];c[l+8>>2]=c[d+8>>2];c[l+12>>2]=c[d+12>>2];o=k+128|0;c[o+0>>2]=c[d+16>>2];c[o+4>>2]=c[d+20>>2];c[o+8>>2]=c[d+24>>2];c[o+12>>2]=c[d+28>>2];o=k+144|0;c[o+0>>2]=c[d+32>>2];c[o+4>>2]=c[d+36>>2];c[o+8>>2]=c[d+40>>2];c[o+12>>2]=c[d+44>>2];o=k+160|0;c[o+0>>2]=c[d+48>>2];c[o+4>>2]=c[d+52>>2];c[o+8>>2]=c[d+56>>2];c[o+12>>2]=c[d+60>>2];o=k+48|0;p=k+740|0;m=k+756|0;d=k+680|0;n=d+48|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(n|0));c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;g[m>>2]=.20000000298023224;g[k+760>>2]=.20000000298023224;g[k+764>>2]=.20000000298023224;n=k+768|0;p=k+728|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;g[p>>2]=.699999988079071;g[k+732>>2]=1.0;g[k+736>>2]=.5;a[k+788>>0]=0;g[k+792>>2]=0.0;g[k+808>>2]=0.0;a[k+789>>0]=0;g[k+796>>2]=0.0;g[k+812>>2]=0.0;a[k+790>>0]=0;g[k+800>>2]=0.0;g[k+816>>2]=0.0;g[k+928>>2]=0.0;g[k+876>>2]=0.0;g[k+880>>2]=.10000000149011612;g[k+884>>2]=300.0;g[k+868>>2]=1.0;g[k+872>>2]=-1.0;g[k+896>>2]=0.0;g[k+900>>2]=.20000000298023224;g[k+904>>2]=0.0;g[k+908>>2]=0.0;g[k+888>>2]=1.0;g[k+892>>2]=.5;c[k+924>>2]=0;g[k+916>>2]=0.0;a[k+912>>0]=0;g[k+992>>2]=0.0;g[k+940>>2]=0.0;g[k+944>>2]=.10000000149011612;g[k+948>>2]=300.0;g[k+932>>2]=1.0;g[k+936>>2]=-1.0;g[k+960>>2]=0.0;g[k+964>>2]=.20000000298023224;g[k+968>>2]=0.0;g[k+972>>2]=0.0;g[k+952>>2]=1.0;g[k+956>>2]=.5;c[k+988>>2]=0;g[k+980>>2]=0.0;a[k+976>>0]=0;g[k+1056>>2]=0.0;g[k+1004>>2]=0.0;g[k+1008>>2]=.10000000149011612;g[k+1012>>2]=300.0;g[k+996>>2]=1.0;g[k+1e3>>2]=-1.0;g[k+1024>>2]=0.0;g[k+1028>>2]=.20000000298023224;g[k+1032>>2]=0.0;g[k+1036>>2]=0.0;g[k+1016>>2]=1.0;g[k+1020>>2]=.5;c[k+1052>>2]=0;g[k+1044>>2]=0.0;a[k+1040>>0]=0;a[k+1300>>0]=e&1;a[k+1301>>0]=1;c[k+1304>>2]=0;a[k+1308>>0]=0;no(f,b+4|0,l);c[o+0>>2]=c[f+0>>2];c[o+4>>2]=c[f+4>>2];c[o+8>>2]=c[f+8>>2];c[o+12>>2]=c[f+12>>2];p=k+64|0;c[p+0>>2]=c[f+16>>2];c[p+4>>2]=c[f+20>>2];c[p+8>>2]=c[f+24>>2];c[p+12>>2]=c[f+28>>2];p=k+80|0;c[p+0>>2]=c[f+32>>2];c[p+4>>2]=c[f+36>>2];c[p+8>>2]=c[f+40>>2];c[p+12>>2]=c[f+44>>2];p=k+96|0;c[p+0>>2]=c[f+48>>2];c[p+4>>2]=c[f+52>>2];c[p+8>>2]=c[f+56>>2];c[p+12>>2]=c[f+60>>2];Up(k,(c[j>>2]|0)+4|0,(c[h>>2]|0)+4|0);i=f;return k|0}function Ke(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0;j=i;c[5004]=(c[5004]|0)+1;k=fF(1331)|0;if(!k)l=0;else{c[(k+19&-16)+ -4>>2]=k;l=k+19&-16}c[l+4>>2]=6;c[l+8>>2]=-1;c[l+12>>2]=-1;g[l+16>>2]=3.4028234663852886e+38;a[l+20>>0]=1;a[l+21>>0]=0;c[l+24>>2]=-1;k=l+28|0;c[k>>2]=b;b=l+32|0;c[b>>2]=d;g[l+36>>2]=0.0;g[l+40>>2]=.30000001192092896;c[l+44>>2]=0;c[l>>2]=2368;m=l+48|0;c[m+0>>2]=c[e+0>>2];c[m+4>>2]=c[e+4>>2];c[m+8>>2]=c[e+8>>2];c[m+12>>2]=c[e+12>>2];m=l+64|0;c[m+0>>2]=c[e+16>>2];c[m+4>>2]=c[e+20>>2];c[m+8>>2]=c[e+24>>2];c[m+12>>2]=c[e+28>>2];m=l+80|0;c[m+0>>2]=c[e+32>>2];c[m+4>>2]=c[e+36>>2];c[m+8>>2]=c[e+40>>2];c[m+12>>2]=c[e+44>>2];m=l+96|0;c[m+0>>2]=c[e+48>>2];c[m+4>>2]=c[e+52>>2];c[m+8>>2]=c[e+56>>2];c[m+12>>2]=c[e+60>>2];e=l+112|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=l+128|0;c[e+0>>2]=c[f+16>>2];c[e+4>>2]=c[f+20>>2];c[e+8>>2]=c[f+24>>2];c[e+12>>2]=c[f+28>>2];e=l+144|0;c[e+0>>2]=c[f+32>>2];c[e+4>>2]=c[f+36>>2];c[e+8>>2]=c[f+40>>2];c[e+12>>2]=c[f+44>>2];e=l+160|0;c[e+0>>2]=c[f+48>>2];c[e+4>>2]=c[f+52>>2];c[e+8>>2]=c[f+56>>2];c[e+12>>2]=c[f+60>>2];e=l+740|0;f=l+756|0;m=l+680|0;d=m+48|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(d|0));c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;g[f>>2]=.20000000298023224;g[l+760>>2]=.20000000298023224;g[l+764>>2]=.20000000298023224;f=l+768|0;m=l+728|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;g[m>>2]=.699999988079071;g[l+732>>2]=1.0;g[l+736>>2]=.5;a[l+788>>0]=0;g[l+792>>2]=0.0;g[l+808>>2]=0.0;a[l+789>>0]=0;g[l+796>>2]=0.0;g[l+812>>2]=0.0;a[l+790>>0]=0;g[l+800>>2]=0.0;g[l+816>>2]=0.0;g[l+928>>2]=0.0;g[l+876>>2]=0.0;g[l+880>>2]=.10000000149011612;g[l+884>>2]=300.0;g[l+868>>2]=1.0;g[l+872>>2]=-1.0;g[l+896>>2]=0.0;g[l+900>>2]=.20000000298023224;g[l+904>>2]=0.0;g[l+908>>2]=0.0;g[l+888>>2]=1.0;g[l+892>>2]=.5;c[l+924>>2]=0;g[l+916>>2]=0.0;a[l+912>>0]=0;g[l+992>>2]=0.0;g[l+940>>2]=0.0;g[l+944>>2]=.10000000149011612;g[l+948>>2]=300.0;g[l+932>>2]=1.0;g[l+936>>2]=-1.0;g[l+960>>2]=0.0;g[l+964>>2]=.20000000298023224;g[l+968>>2]=0.0;g[l+972>>2]=0.0;g[l+952>>2]=1.0;g[l+956>>2]=.5;c[l+988>>2]=0;g[l+980>>2]=0.0;a[l+976>>0]=0;g[l+1056>>2]=0.0;g[l+1004>>2]=0.0;g[l+1008>>2]=.10000000149011612;g[l+1012>>2]=300.0;g[l+996>>2]=1.0;g[l+1e3>>2]=-1.0;g[l+1024>>2]=0.0;g[l+1028>>2]=.20000000298023224;g[l+1032>>2]=0.0;g[l+1036>>2]=0.0;g[l+1016>>2]=1.0;g[l+1020>>2]=.5;c[l+1052>>2]=0;g[l+1044>>2]=0.0;a[l+1040>>0]=0;a[l+1300>>0]=h&1;a[l+1301>>0]=1;c[l+1304>>2]=0;a[l+1308>>0]=0;Up(l,(c[k>>2]|0)+4|0,(c[b>>2]|0)+4|0);i=j;return l|0}function Le(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Me(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Ne(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Oe(a){a=a|0;return c[a+192>>2]|0}function Pe(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function Qe(a,b){a=a|0;b=b|0;var d=0;d=i;if(((c[a+216>>2]|0)+ -4|0)>>>0<2){i=d;return}c[a+216>>2]=b;i=d;return}function Re(a,b){a=a|0;b=b|0;c[a+216>>2]=b;return}function Se(a){a=a|0;var b=0;b=i;if(c[a+204>>2]&3){i=b;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=b;return}function Te(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b?(c[a+204>>2]&3|0)!=0:0){i=d;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=d;return}function Ue(a){a=a|0;a=c[a+216>>2]|0;return((a|0)==2?0:(a|0)!=5)|0}function Ve(a){a=a|0;return(c[a+204>>2]&2|0)!=0|0}function We(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+228>>2]=b;return}function Xe(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+224>>2]=b;return}function Ye(a){a=a|0;return a+4|0}function Ze(a){a=a|0;return c[a+204>>2]|0}function _e(a,b){a=a|0;b=b|0;c[a+204>>2]=b;return}function $e(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];i=d;return}function af(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function bf(a,b){a=a|0;b=+b;g[a+252>>2]=b;return}function cf(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function df(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+8>>2]&511](a);i=b;return}function ef(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0;f=i;c[5004]=(c[5004]|0)+1;h=fF(343)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}a[h+20>>0]=1;c[h+16>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+24>>2]=b;g[h+28>>2]=0.0;c[h+32>>2]=0;c[h+36>>2]=1;g[h+40>>2]=1.0;a[h+44>>0]=1;c[h+48>>2]=0;a[h+52>>0]=0;a[h+53>>0]=1;a[h+54>>0]=1;g[h+56>>2]=.03999999910593033;a[h+60>>0]=0;g[h+64>>2]=0.0;c[h+68>>2]=d;c[h+72>>2]=0;a[h+76>>0]=1;c[h+80>>2]=0;c[h+84>>2]=0;c[h+88>>2]=0;g[h+92>>2]=.6000000238418579;g[h+96>>2]=1.0;g[h+100>>2]=.30000001192092896;g[h+104>>2]=.01666666753590107;g[h+108>>2]=0.0;g[h+116>>2]=20.0;c[h+112>>2]=10;g[h+124>>2]=.20000000298023224;g[h+128>>2]=.800000011920929;g[h+132>>2]=0.0;g[h+120>>2]=1.0;c[h+136>>2]=1;g[h+140>>2]=-.03999999910593033;g[h+144>>2]=.10000000149011612;g[h+148>>2]=0.0;g[h+152>>2]=.8500000238418579;c[h+156>>2]=260;c[h+160>>2]=2;c[h+164>>2]=128;g[h+168>>2]=100.0;g[h+172>>2]=1.0000000150474662e+30;c[h>>2]=1392;a[h+192>>0]=1;c[h+188>>2]=0;c[h+180>>2]=0;c[h+184>>2]=0;d=h+196|0;c[d>>2]=0;j=h+200|0;c[j>>2]=e;a[h+224>>0]=1;c[h+220>>2]=0;c[h+212>>2]=0;c[h+216>>2]=0;a[h+244>>0]=1;c[h+240>>2]=0;c[h+232>>2]=0;c[h+236>>2]=0;g[h+248>>2]=0.0;g[h+252>>2]=-10.0;m=h+256|0;a[h+274>>0]=0;a[h+275>>0]=0;l=h+292|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;a[l>>0]=1;c[h+288>>2]=0;c[h+280>>2]=0;c[h+284>>2]=0;c[h+296>>2]=0;a[h+300>>0]=1;a[h+320>>0]=1;c[h+316>>2]=0;c[h+308>>2]=0;c[h+312>>2]=0;if(!e){c[5004]=(c[5004]|0)+1;e=fF(215)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e>>2]=4024;a[e+20>>0]=1;c[e+16>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;a[e+40>>0]=1;c[e+36>>2]=0;c[e+28>>2]=0;c[e+32>>2]=0;a[e+60>>0]=1;c[e+56>>2]=0;c[e+48>>2]=0;c[e+52>>2]=0;a[e+80>>0]=1;c[e+76>>2]=0;c[e+68>>2]=0;c[e+72>>2]=0;a[e+100>>0]=1;c[e+96>>2]=0;c[e+88>>2]=0;c[e+92>>2]=0;a[e+120>>0]=1;c[e+116>>2]=0;c[e+108>>2]=0;c[e+112>>2]=0;a[e+140>>0]=1;c[e+136>>2]=0;c[e+128>>2]=0;c[e+132>>2]=0;a[e+160>>0]=1;c[e+156>>2]=0;c[e+148>>2]=0;c[e+152>>2]=0;a[e+180>>0]=1;c[e+176>>2]=0;c[e+168>>2]=0;c[e+172>>2]=0;c[e+192>>2]=0;c[j>>2]=e;a[h+273>>0]=1}else a[h+273>>0]=0;c[5004]=(c[5004]|0)+1;e=fF(87)|0;if((e|0)!=0?(k=e+19&-16,c[k+ -4>>2]=e,(e+19&-16|0)!=0):0){c[(e+19&-16)>>2]=16568;a[k+20>>0]=1;c[k+16>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;a[k+40>>0]=1;c[k+36>>2]=0;c[k+28>>2]=0;c[k+32>>2]=0;a[k+60>>0]=1;c[k+56>>2]=0;c[k+48>>2]=0;c[k+52>>2]=0;a[k+64>>0]=1;k=e+19&-16}else k=0;c[h+204>>2]=k;a[h+272>>0]=1;c[5004]=(c[5004]|0)+1;k=fF(107)|0;if(!k){m=0;c[d>>2]=m;i=f;return h|0}e=k+19&-16;c[e+ -4>>2]=k;if(!(k+19&-16)){m=0;c[d>>2]=m;i=f;return h|0}m=c[j>>2]|0;c[(k+19&-16)>>2]=2240;c[e+4>>2]=0;c[e+8>>2]=m;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=b;a[e+44>>0]=1;c[e+40>>2]=0;c[e+32>>2]=0;c[e+36>>2]=0;a[e+64>>0]=1;c[e+60>>2]=0;c[e+52>>2]=0;c[e+56>>2]=0;a[e+84>>0]=1;c[e+80>>2]=0;c[e+72>>2]=0;c[e+76>>2]=0;m=k+19&-16;c[d>>2]=m;i=f;return h|0}function ff(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+72>>2]&127](a,b);i=d;return}function gf(b){b=b|0;var d=0;d=i;i=i+16|0;if((a[24]|0)==0?(Ya(24)|0)!=0:0)bb(24);Nb[c[(c[b>>2]|0)+76>>2]&127](d,b);c[2]=c[d+0>>2];c[3]=c[d+4>>2];c[4]=c[d+8>>2];c[5]=c[d+12>>2];i=d;return 8}function hf(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+84>>2]&127](a,b);i=d;return}function jf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+88>>2]&127](a,b,d,e);i=f;return}function kf(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+92>>2]&127](a,b);i=d;return}function lf(a,b){a=a|0;b=b|0;var d=0;d=i;rc[c[(c[a>>2]|0)+56>>2]&127](a,b,0);i=d;return}function mf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;rc[c[(c[a>>2]|0)+56>>2]&127](a,b,d);i=e;return}function nf(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+60>>2]&127](a,b);i=d;return}function of(a,b){a=a|0;b=+b;var d=0;d=i;a=uc[c[(c[a>>2]|0)+52>>2]&1](a,b,1,.01666666753590107)|0;i=d;return a|0}function pf(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;a=uc[c[(c[a>>2]|0)+52>>2]&1](a,b,d,.01666666753590107)|0;i=e;return a|0}function qf(a,b,d,e){a=a|0;b=+b;d=d|0;e=+e;var f=0;f=i;a=uc[c[(c[a>>2]|0)+52>>2]&1](a,b,d,e)|0;i=f;return a|0}function rf(a){a=a|0;return c[a+24>>2]|0}function sf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+32>>2]&127](a,b,d,e);i=f;return}function tf(a){a=a|0;var b=0;b=i;a=c[a+68>>2]|0;a=Pb[c[(c[a>>2]|0)+36>>2]&127](a)|0;i=b;return a|0}function uf(a){a=a|0;return a+28|0}function vf(a,b){a=a|0;b=b|0;var d=0;d=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,2,-3);i=d;return}function wf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,-3);i=e;return}function xf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,e);i=f;return}function yf(a){a=a|0;return c[a+68>>2]|0}function zf(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;var g=0;g=i;Ou(a,b,c,d,e,f);i=g;return}function Af(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;Qu(a,b,c,d);i=e;return}function Bf(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+64>>2]&127](a,b);i=d;return}function Cf(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Df(b){b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(115)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;c[e+52>>2]=0;g[e+56>>2]=1.0;g[e+60>>2]=1.0;g[e+64>>2]=1.0;g[e+68>>2]=0.0;g[e+72>>2]=-1.0;g[e+76>>2]=-1.0;g[e+80>>2]=-1.0;g[e+84>>2]=0.0;a[e+88>>0]=0;c[e>>2]=10656;c[e+92>>2]=b;c[e+4>>2]=3;EA(e);i=d;return e|0}function Ef(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(115)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}c[f+8>>2]=0;g[f+12>>2]=1.0;g[f+16>>2]=1.0;g[f+20>>2]=1.0;g[f+24>>2]=0.0;g[f+44>>2]=.03999999910593033;c[f+52>>2]=0;g[f+56>>2]=1.0;g[f+60>>2]=1.0;g[f+64>>2]=1.0;g[f+68>>2]=0.0;g[f+72>>2]=-1.0;g[f+76>>2]=-1.0;g[f+80>>2]=-1.0;g[f+84>>2]=0.0;a[f+88>>0]=0;c[f>>2]=10656;c[f+92>>2]=b;c[f+4>>2]=3;if(!d){i=e;return f|0}EA(f);i=e;return f|0}function Ff(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Gf(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Hf(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function If(a){a=a|0;return+g[a+4>>2]<1.0|0}function Jf(a){a=a|0;return b[a+8>>1]|0}function Kf(a,c){a=a|0;c=c|0;b[a+8>>1]=c;return}function Lf(a){a=a|0;return b[a+10>>1]|0}function Mf(a,c){a=a|0;c=c|0;b[a+10>>1]=c;return}function Nf(a){a=a|0;return+(+g[a+4>>2])}function Of(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Pf(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Qf(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(379)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}Yr(f,3,b);c[f>>2]=2984;n=f+300|0;c[n+0>>2]=c[d+0>>2];c[n+4>>2]=c[d+4>>2];c[n+8>>2]=c[d+8>>2];c[n+12>>2]=c[d+12>>2];m=+g[d>>2];l=+g[d+4>>2];k=+g[d+8>>2];j=m*+g[b+20>>2]+l*+g[b+24>>2]+k*+g[b+28>>2]+ +g[b+56>>2];h=m*+g[b+36>>2]+l*+g[b+40>>2]+k*+g[b+44>>2]+ +g[b+60>>2];g[f+316>>2]=m*+g[b+4>>2]+l*+g[b+8>>2]+k*+g[b+12>>2]+ +g[b+52>>2];g[f+320>>2]=j;g[f+324>>2]=h;g[f+328>>2]=0.0;c[f+332>>2]=0;a[f+344>>0]=0;g[f+348>>2]=.30000001192092896;g[f+352>>2]=1.0;g[f+356>>2]=0.0;i=e;return f|0}function Rf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0;h=i;c[5004]=(c[5004]|0)+1;j=fF(379)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}c[j+4>>2]=3;c[j+8>>2]=-1;c[j+12>>2]=-1;g[j+16>>2]=3.4028234663852886e+38;a[j+20>>0]=1;a[j+21>>0]=0;c[j+24>>2]=-1;c[j+28>>2]=b;c[j+32>>2]=d;g[j+36>>2]=0.0;g[j+40>>2]=.30000001192092896;c[j+44>>2]=0;c[j>>2]=2984;d=j+300|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];e=j+316|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];c[j+332>>2]=0;a[j+344>>0]=0;g[j+348>>2]=.30000001192092896;g[j+352>>2]=1.0;g[j+356>>2]=0.0;i=h;return j|0}function Sf(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+300>>2]=c[b+0>>2];c[a+304>>2]=c[b+4>>2];c[a+308>>2]=c[b+8>>2];c[a+312>>2]=c[b+12>>2];i=d;return}function Tf(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+316>>2]=c[b+0>>2];c[a+320>>2]=c[b+4>>2];c[a+324>>2]=c[b+8>>2];c[a+328>>2]=c[b+12>>2];i=d;return}function Uf(a){a=a|0;return a+300|0}function Vf(a){a=a|0;return a+316|0}function Wf(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function Xf(a){a=a|0;return a+348|0}function Yf(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+348>>2]=c[b+0>>2];c[a+352>>2]=c[b+4>>2];c[a+356>>2]=c[b+8>>2];i=d;return}function Zf(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function _f(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+8>>2]&127](a,b);i=d;return}function $f(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function ag(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function bg(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+96|0;c[5004]=(c[5004]|0)+1;h=fF(1147)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}if((a[5024]|0)==0?(Ya(5024)|0)!=0:0){c[f+80>>2]=0;c[f+84>>2]=0;c[f+88>>2]=0;c[f+92>>2]=0;lr(4408,0.0,0,0,f+80|0);bb(5024)}c[f+64>>2]=0;c[f+68>>2]=0;c[f+72>>2]=0;c[f+76>>2]=0;mr(4408,0.0,f+64|0);c[h+4>>2]=7;c[h+8>>2]=-1;c[h+12>>2]=-1;g[h+16>>2]=3.4028234663852886e+38;a[h+20>>0]=1;a[h+21>>0]=0;c[h+24>>2]=-1;k=h+28|0;c[k>>2]=4408;j=h+32|0;c[j>>2]=b;g[h+36>>2]=0.0;g[h+40>>2]=.30000001192092896;c[h+44>>2]=0;c[h>>2]=4264;a[h+48>>0]=0;l=h+116|0;c[l+0>>2]=c[d+0>>2];c[l+4>>2]=c[d+4>>2];c[l+8>>2]=c[d+8>>2];c[l+12>>2]=c[d+12>>2];m=h+132|0;c[m+0>>2]=c[d+16>>2];c[m+4>>2]=c[d+20>>2];c[m+8>>2]=c[d+24>>2];c[m+12>>2]=c[d+28>>2];m=h+148|0;c[m+0>>2]=c[d+32>>2];c[m+4>>2]=c[d+36>>2];c[m+8>>2]=c[d+40>>2];c[m+12>>2]=c[d+44>>2];m=h+164|0;c[m+0>>2]=c[d+48>>2];c[m+4>>2]=c[d+52>>2];c[m+8>>2]=c[d+56>>2];c[m+12>>2]=c[d+60>>2];a[h+180>>0]=e&1;d=h+52|0;no(f,b+4|0,l);c[d+0>>2]=c[f+0>>2];c[d+4>>2]=c[f+4>>2];c[d+8>>2]=c[f+8>>2];c[d+12>>2]=c[f+12>>2];d=h+68|0;c[d+0>>2]=c[f+16>>2];c[d+4>>2]=c[f+20>>2];c[d+8>>2]=c[f+24>>2];c[d+12>>2]=c[f+28>>2];d=h+84|0;c[d+0>>2]=c[f+32>>2];c[d+4>>2]=c[f+36>>2];c[d+8>>2]=c[f+40>>2];c[d+12>>2]=c[f+44>>2];d=h+100|0;c[d+0>>2]=c[f+48>>2];c[d+4>>2]=c[f+52>>2];c[d+8>>2]=c[f+56>>2];c[d+12>>2]=c[f+60>>2];g[h+184>>2]=1.0;g[h+188>>2]=-1.0;g[h+192>>2]=0.0;g[h+196>>2]=0.0;g[h+200>>2]=1.0;g[h+204>>2]=.699999988079071;g[h+208>>2]=0.0;g[h+212>>2]=0.0;g[h+216>>2]=1.0;g[h+220>>2]=.699999988079071;g[h+224>>2]=0.0;g[h+228>>2]=0.0;g[h+264>>2]=1.0;g[h+268>>2]=.699999988079071;g[h+272>>2]=1.0;g[h+276>>2]=0.0;g[h+280>>2]=1.0;g[h+284>>2]=.699999988079071;g[h+288>>2]=1.0;g[h+292>>2]=0.0;g[h+232>>2]=1.0;g[h+236>>2]=.699999988079071;g[h+240>>2]=1.0;g[h+244>>2]=0.0;g[h+248>>2]=1.0;g[h+252>>2]=.699999988079071;g[h+256>>2]=1.0;g[h+260>>2]=0.0;a[h+1096>>0]=0;d=h+1100|0;g[h+1116>>2]=0.0;g[h+1120>>2]=0.0;g[h+1124>>2]=0.0;c[h+300>>2]=0;e=h+49|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;a[d+12>>0]=0;a[e>>0]=1;Pr(h,(c[k>>2]|0)+4|0,(c[j>>2]|0)+4|0);i=f;return h|0}function cg(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0;j=i;c[5004]=(c[5004]|0)+1;k=fF(1147)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}c[k+4>>2]=7;c[k+8>>2]=-1;c[k+12>>2]=-1;g[k+16>>2]=3.4028234663852886e+38;a[k+20>>0]=1;a[k+21>>0]=0;c[k+24>>2]=-1;l=k+28|0;c[l>>2]=b;b=k+32|0;c[b>>2]=d;g[k+36>>2]=0.0;g[k+40>>2]=.30000001192092896;c[k+44>>2]=0;c[k>>2]=4264;a[k+48>>0]=0;d=k+52|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=k+68|0;c[d+0>>2]=c[e+16>>2];c[d+4>>2]=c[e+20>>2];c[d+8>>2]=c[e+24>>2];c[d+12>>2]=c[e+28>>2];d=k+84|0;c[d+0>>2]=c[e+32>>2];c[d+4>>2]=c[e+36>>2];c[d+8>>2]=c[e+40>>2];c[d+12>>2]=c[e+44>>2];d=k+100|0;c[d+0>>2]=c[e+48>>2];c[d+4>>2]=c[e+52>>2];c[d+8>>2]=c[e+56>>2];c[d+12>>2]=c[e+60>>2];e=k+116|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=k+132|0;c[e+0>>2]=c[f+16>>2];c[e+4>>2]=c[f+20>>2];c[e+8>>2]=c[f+24>>2];c[e+12>>2]=c[f+28>>2];e=k+148|0;c[e+0>>2]=c[f+32>>2];c[e+4>>2]=c[f+36>>2];c[e+8>>2]=c[f+40>>2];c[e+12>>2]=c[f+44>>2];e=k+164|0;c[e+0>>2]=c[f+48>>2];c[e+4>>2]=c[f+52>>2];c[e+8>>2]=c[f+56>>2];c[e+12>>2]=c[f+60>>2];a[k+180>>0]=h&1;g[k+184>>2]=1.0;g[k+188>>2]=-1.0;g[k+192>>2]=0.0;g[k+196>>2]=0.0;g[k+200>>2]=1.0;g[k+204>>2]=.699999988079071;g[k+208>>2]=0.0;g[k+212>>2]=0.0;g[k+216>>2]=1.0;g[k+220>>2]=.699999988079071;g[k+224>>2]=0.0;g[k+228>>2]=0.0;g[k+264>>2]=1.0;g[k+268>>2]=.699999988079071;g[k+272>>2]=1.0;g[k+276>>2]=0.0;g[k+280>>2]=1.0;g[k+284>>2]=.699999988079071;g[k+288>>2]=1.0;g[k+292>>2]=0.0;g[k+232>>2]=1.0;g[k+236>>2]=.699999988079071;g[k+240>>2]=1.0;g[k+244>>2]=0.0;g[k+248>>2]=1.0;g[k+252>>2]=.699999988079071;g[k+256>>2]=1.0;g[k+260>>2]=0.0;a[k+1096>>0]=0;f=k+1100|0;g[k+1116>>2]=0.0;g[k+1120>>2]=0.0;g[k+1124>>2]=0.0;c[k+300>>2]=0;h=k+49|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;a[f+12>>0]=0;a[h>>0]=1;Pr(k,(c[l>>2]|0)+4|0,(c[b>>2]|0)+4|0);i=j;return k|0}function dg(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function eg(a,b){a=a|0;b=+b;g[a+188>>2]=b;return}function fg(a,b){a=a|0;b=+b;var c=0;c=i;b=+ab(+b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+192>>2]=b;i=c;return}function gg(a,b){a=a|0;b=+b;var c=0;c=i;b=+ab(+b,6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+196>>2]=b;i=c;return}function hg(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function ig(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function jg(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(627)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}Yr(f,5,b);c[f>>2]=1264;k=f+300|0;c[k+0>>2]=c[d+0>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[k+12>>2]=c[d+12>>2];j=f+316|0;c[j+0>>2]=c[d+16>>2];c[j+4>>2]=c[d+20>>2];c[j+8>>2]=c[d+24>>2];c[j+12>>2]=c[d+28>>2];h=f+332|0;c[h+0>>2]=c[d+32>>2];c[h+4>>2]=c[d+36>>2];c[h+8>>2]=c[d+40>>2];c[h+12>>2]=c[d+44>>2];b=f+348|0;c[b+0>>2]=c[d+48>>2];c[b+4>>2]=c[d+52>>2];c[b+8>>2]=c[d+56>>2];c[b+12>>2]=c[d+60>>2];b=f+364|0;d=f+524|0;a[f+527>>0]=0;c[b+0>>2]=c[k+0>>2];c[b+4>>2]=c[k+4>>2];c[b+8>>2]=c[k+8>>2];c[b+12>>2]=c[k+12>>2];b=f+380|0;c[b+0>>2]=c[j+0>>2];c[b+4>>2]=c[j+4>>2];c[b+8>>2]=c[j+8>>2];c[b+12>>2]=c[j+12>>2];b=f+396|0;c[b+0>>2]=c[h+0>>2];c[b+4>>2]=c[h+4>>2];c[b+8>>2]=c[h+8>>2];c[b+12>>2]=c[h+12>>2];b=f+412|0;a[d>>0]=0;a[f+525>>0]=0;a[f+526>>0]=0;a[f+552>>0]=0;d=f+572|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;g[d>>2]=-1.0;g[f+444>>2]=999999984306749400.0;g[f+448>>2]=999999984306749400.0;g[f+452>>2]=999999984306749400.0;g[f+428>>2]=1.0;g[f+432>>2]=.30000001192092896;g[f+436>>2]=1.0;g[f+440>>2]=.009999999776482582;g[f+456>>2]=.05000000074505806;c[f+592>>2]=0;g[f+596>>2]=0.0;g[f+600>>2]=.699999988079071;g[f+604>>2]=0.0;i=e;return f|0}function kg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0;h=i;c[5004]=(c[5004]|0)+1;j=fF(627)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}c[j+4>>2]=5;c[j+8>>2]=-1;c[j+12>>2]=-1;g[j+16>>2]=3.4028234663852886e+38;a[j+20>>0]=1;a[j+21>>0]=0;c[j+24>>2]=-1;c[j+28>>2]=b;c[j+32>>2]=d;g[j+36>>2]=0.0;g[j+40>>2]=.30000001192092896;c[j+44>>2]=0;c[j>>2]=1264;d=j+300|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=j+316|0;c[d+0>>2]=c[e+16>>2];c[d+4>>2]=c[e+20>>2];c[d+8>>2]=c[e+24>>2];c[d+12>>2]=c[e+28>>2];d=j+332|0;c[d+0>>2]=c[e+32>>2];c[d+4>>2]=c[e+36>>2];c[d+8>>2]=c[e+40>>2];c[d+12>>2]=c[e+44>>2];d=j+348|0;c[d+0>>2]=c[e+48>>2];c[d+4>>2]=c[e+52>>2];c[d+8>>2]=c[e+56>>2];c[d+12>>2]=c[e+60>>2];e=j+364|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=j+380|0;c[e+0>>2]=c[f+16>>2];c[e+4>>2]=c[f+20>>2];c[e+8>>2]=c[f+24>>2];c[e+12>>2]=c[f+28>>2];e=j+396|0;c[e+0>>2]=c[f+32>>2];c[e+4>>2]=c[f+36>>2];c[e+8>>2]=c[f+40>>2];c[e+12>>2]=c[f+44>>2];e=j+412|0;c[e+0>>2]=c[f+48>>2];c[e+4>>2]=c[f+52>>2];c[e+8>>2]=c[f+56>>2];c[e+12>>2]=c[f+60>>2];f=j+524|0;a[j+552>>0]=0;a[f>>0]=0;a[f+1>>0]=0;a[f+2>>0]=0;a[f+3>>0]=0;g[j+572>>2]=-1.0;g[j+444>>2]=999999984306749400.0;g[j+448>>2]=999999984306749400.0;g[j+452>>2]=999999984306749400.0;g[j+428>>2]=1.0;g[j+432>>2]=.30000001192092896;g[j+436>>2]=1.0;g[j+440>>2]=.009999999776482582;g[j+456>>2]=.05000000074505806;c[j+592>>2]=0;g[j+596>>2]=0.0;g[j+600>>2]=.699999988079071;g[j+604>>2]=0.0;i=h;return j|0}function lg(a,b,c){a=a|0;b=b|0;c=+c;var d=0;d=i;if((b|0)==4)g[a+448>>2]=c;else if((b|0)==3)g[a+452>>2]=c;else if((b|0)==5)g[a+444>>2]=c;i=d;return}function mg(b,c){b=b|0;c=c|0;a[b+524>>0]=c&1;return}function ng(a,b){a=a|0;b=+b;g[a+440>>2]=b;return}function og(b,c){b=b|0;c=c|0;a[b+552>>0]=c&1;return}function pg(b,c){b=b|0;c=+c;g[b+572>>2]=c;a[b+553>>0]=0;return}function qg(b,c){b=b|0;c=+c;g[b+572>>2]=c;a[b+553>>0]=1;return}function rg(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;c=i;i=i+48|0;Hc(a+364|0,c+16|0);h=-+g[c+16>>2];e=-+g[c+20>>2];m=-+g[c+24>>2];l=+g[c+28>>2];f=+g[b>>2];n=+g[b+12>>2];k=+g[b+8>>2];j=+g[b+4>>2];Hc(a+300|0,c);p=+g[c>>2];q=+g[c+12>>2];d=+g[c+8>>2];o=+g[c+4>>2];g[c+32>>2]=p*(l*n-f*h-j*e-k*m)+(l*f+n*h+k*e-j*m)*q+(f*m+(n*e+l*j)-k*h)*d-(n*m+l*k+j*h-f*e)*o;g[c+36>>2]=p*(n*m+l*k+j*h-f*e)+(q*(f*m+(n*e+l*j)-k*h)+(l*n-f*h-j*e-k*m)*o)-(l*f+n*h+k*e-j*m)*d;g[c+40>>2]=q*(n*m+l*k+j*h-f*e)+(l*n-f*h-j*e-k*m)*d+(l*f+n*h+k*e-j*m)*o-p*(f*m+(n*e+l*j)-k*h);g[c+44>>2]=(l*n-f*h-j*e-k*m)*q-p*(l*f+n*h+k*e-j*m)-(f*m+(n*e+l*j)-k*h)*o-(n*m+l*k+j*h-f*e)*d;Do(a,c+32|0);i=c;return}function sg(a,b){a=a|0;b=b|0;var c=0;c=i;Do(a,b);i=c;return}function tg(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function ug(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function vg(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(95)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;c[e>>2]=9704;g[e+56>>2]=a;g[e+60>>2]=b;c[e+4>>2]=11;c[e+64>>2]=0;c[e+68>>2]=1;c[e+72>>2]=2;g[e+28>>2]=a;g[e+32>>2]=b;g[e+36>>2]=a;g[e+52>>2]=a/+Q(+(a*a+b*b));i=d;return e|0}function wg(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function xg(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function yg(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function zg(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Ag(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Bg(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Cg(){var a=0,b=0;a=i;i=i+32|0;b=fF(92)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(92)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=4096;c[a+12>>2]=4096;c[a+16>>2]=0;c[a+20>>2]=1;zy(b,a);i=a;return b|0}function Dg(a){a=a|0;var b=0,d=0;b=i;d=fF(92)|0;a:do if(!d){while(1){d=c[5158]|0;c[5158]=d+0;if(!d)break;sc[d&3]();d=fF(92)|0;if(d)break a}d=Ab(4)|0;c[d>>2]=20472;yb(d|0,20520,265)}while(0);zy(d,a);i=b;return d|0}function Eg(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Fg(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0.0,l=0;l=i;k=+Vb[c[(c[a>>2]|0)+12>>2]&1](a,b,d,e,f,g,h,j);i=l;return+k}function Gg(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Hg(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(95)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;g[e+56>>2]=a;g[e+60>>2]=b;c[e+4>>2]=11;g[e+52>>2]=a/+Q(+(a*a+b*b));c[e>>2]=9808;c[e+64>>2]=0;c[e+68>>2]=2;c[e+72>>2]=1;g[e+28>>2]=a;g[e+36>>2]=b;g[e+32>>2]=a;i=d;return e|0}function Ig(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Jg(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Kg(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Lg(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(95)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;g[e+56>>2]=a;g[e+60>>2]=b;c[e+4>>2]=11;g[e+52>>2]=a/+Q(+(a*a+b*b));c[e>>2]=9912;c[e+64>>2]=1;c[e+68>>2]=0;c[e+72>>2]=2;g[e+32>>2]=a;g[e+28>>2]=b;g[e+36>>2]=a;i=d;return e|0}function Mg(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Ng(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Og(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Pg(){var a=0,b=0;a=i;c[5004]=(c[5004]|0)+1;b=fF(191)|0;if(!b)b=0;else{c[(b+19&-16)+ -4>>2]=b;b=b+19&-16}UB(b,1,1);i=a;return b|0}function Qg(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(191)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}UB(d,a,1);i=b;return d|0}function Rg(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(191)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}UB(e,a,b);i=d;return e|0}function Sg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=c[a+32>>2]|0;c[g>>2]=(c[g>>2]|0)+1;VB(a,WB(a,b,0)|0);VB(a,WB(a,d,0)|0);VB(a,WB(a,e,0)|0);i=f;return}function Tg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=c[a+32>>2]|0;c[h>>2]=(c[h>>2]|0)+1;VB(a,WB(a,b,f)|0);VB(a,WB(a,d,f)|0);VB(a,WB(a,e,f)|0);i=g;return}function Ug(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Vg(){var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(131)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[d+8>>2]=0;g[d+12>>2]=1.0;g[d+16>>2]=1.0;g[d+20>>2]=1.0;g[d+24>>2]=0.0;g[d+44>>2]=.03999999910593033;c[d+52>>2]=0;g[d+56>>2]=1.0;g[d+60>>2]=1.0;g[d+64>>2]=1.0;g[d+68>>2]=0.0;g[d+72>>2]=-1.0;g[d+76>>2]=-1.0;g[d+80>>2]=-1.0;g[d+84>>2]=0.0;a[d+88>>0]=0;c[d>>2]=10376;a[d+108>>0]=1;c[d+104>>2]=0;c[d+100>>2]=0;c[d+4>>2]=4;c[d+96>>2]=0;EA(d);i=b;return d|0}function Wg(a,b){a=a|0;b=b|0;var c=0;c=i;Gw(a,b,1);i=c;return}function Xg(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Gw(a,b,c);i=d;return}function Yg(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Zg(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function _g(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function $g(){var b=0,d=0,e=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(791)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[d>>2]=1025;c[d+116>>2]=0;a[d+120>>0]=0;e=d+124|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;c[d+300>>2]=0;a[d+304>>0]=0;e=d+308|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;c[d+484>>2]=0;a[d+488>>0]=0;e=d+492|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;c[d+668>>2]=0;a[d+672>>0]=0;e=d+676|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;c[d+740>>2]=0;c[d+744>>2]=0;c[d+748>>2]=0;c[d+768>>2]=0;i=b;return d|0}function ah(a){a=a|0;return c[a+740>>2]|0}function bh(a){a=a|0;return c[a+744>>2]|0}function ch(a){a=a|0;return c[a+748>>2]|0}function dh(a,b){a=a|0;b=b|0;return a+(b*184|0)+4|0}function eh(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function fh(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0,r=0.0;b=i;c[5004]=(c[5004]|0)+1;d=fF(75)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[d+8>>2]=0;h=d+12|0;g[h>>2]=1.0;e=d+16|0;g[e>>2]=1.0;f=d+20|0;g[f>>2]=1.0;g[d+24>>2]=0.0;j=d+44|0;g[j>>2]=.03999999910593033;c[d+52>>2]=0;c[d>>2]=5448;c[d+4>>2]=0;l=+g[a>>2];m=+g[a+4>>2];k=+g[a+8>>2];if(l<m)n=l<k?0:2;else n=m<k?1:2;k=+g[a+(n<<2)>>2]*.10000000149011612;if(k<.03999999910593033){r=+Ts(d);p=+$b[c[(c[d>>2]|0)+48>>2]&15](d);m=+$b[c[(c[d>>2]|0)+48>>2]&15](d);q=d+28|0;r=r+ +g[q>>2];o=d+32|0;p=p+ +g[o>>2];n=d+36|0;m=m+ +g[n>>2];g[j>>2]=k;k=+$b[c[(c[d>>2]|0)+48>>2]&15](d);l=+$b[c[(c[d>>2]|0)+48>>2]&15](d);m=m- +$b[c[(c[d>>2]|0)+48>>2]&15](d);g[q>>2]=r-k;g[o>>2]=p-l;g[n>>2]=m;g[d+40>>2]=0.0;j=c[d>>2]|0}else j=5448|0;m=+$b[c[j+48>>2]&15](d);p=+$b[c[(c[d>>2]|0)+48>>2]&15](d);r=+$b[c[(c[d>>2]|0)+48>>2]&15](d);p=+g[a+4>>2]*+g[e>>2]-p;r=+g[a+8>>2]*+g[f>>2]-r;g[d+28>>2]=+g[a>>2]*+g[h>>2]-m;g[d+32>>2]=p;g[d+36>>2]=r;g[d+40>>2]=0.0;i=b;return d|0}function gh(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function hh(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function ih(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function jh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;f=fF(5260)|0;a:do if(!f){while(1){e=c[5158]|0;c[5158]=e+0;if(!e)break;sc[e&3]();f=fF(5260)|0;if(f)break a}g=Ab(4)|0;c[g>>2]=20472;yb(g|0,20520,265)}while(0);c[f>>2]=6808;c[f+4>>2]=2;a[f+24>>0]=1;c[f+20>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+28>>2]=13504;e=f+5256|0;c[e>>2]=b;c[f+60>>2]=69;c[f+64>>2]=Pb[c[(c[b>>2]|0)+12>>2]&127](b)|0;c[f+68>>2]=Pb[c[(c[b>>2]|0)+8>>2]&127](b)|0;b=0;do{g=0;do{h=c[e>>2]|0;c[f+(b*144|0)+(g<<2)+72>>2]=Yb[c[(c[h>>2]|0)+16>>2]&31](h,b,g)|0;g=g+1|0}while((g|0)<36);b=b+1|0}while((b|0)<36);i=d;return f|0}function kh(a){a=a|0;var b=0;b=i;a=Pb[c[(c[a>>2]|0)+36>>2]&127](a)|0;i=b;return a|0}function lh(a,b){a=a|0;b=b|0;var d=0;d=i;a=gc[c[(c[a>>2]|0)+40>>2]&31](a,b)|0;i=d;return a|0}function mh(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function nh(){var a=0,b=0;a=i;b=fF(24)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(24)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);g[b>>2]=5.880000114440918;g[b+4>>2]=.8299999833106995;g[b+8>>2]=.8799999952316284;g[b+12>>2]=500.0;g[b+16>>2]=10.5;g[b+20>>2]=6.0e3;i=a;return b|0}function oh(a){a=a|0;return+(+g[a>>2])}function ph(a,b){a=a|0;b=+b;g[a>>2]=b;return}function qh(a){a=a|0;return+(+g[a+4>>2])}function rh(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function sh(a){a=a|0;return+(+g[a+8>>2])}function th(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function uh(a){a=a|0;return+(+g[a+12>>2])}function vh(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function wh(a){a=a|0;return+(+g[a+16>>2])}function xh(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function yh(a){a=a|0;return+(+g[a+20>>2])}function zh(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function Ah(){var a=0,b=0;a=i;c[5004]=(c[5004]|0)+1;b=fF(111)|0;if(!b)b=0;else{c[(b+19&-16)+ -4>>2]=b;b=b+19&-16}Ov(b,1);i=a;return b|0}function Bh(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(111)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}Ov(d,a);i=b;return d|0}function Ch(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0;j=i;i=i+128|0;c[b+68>>2]=(c[b+68>>2]|0)+1;c[j+0>>2]=c[d+0>>2];c[j+4>>2]=c[d+4>>2];c[j+8>>2]=c[d+8>>2];c[j+12>>2]=c[d+12>>2];c[j+16>>2]=c[d+16>>2];c[j+20>>2]=c[d+20>>2];c[j+24>>2]=c[d+24>>2];c[j+28>>2]=c[d+28>>2];c[j+32>>2]=c[d+32>>2];c[j+36>>2]=c[d+36>>2];c[j+40>>2]=c[d+40>>2];c[j+44>>2]=c[d+44>>2];c[j+48>>2]=c[d+48>>2];c[j+52>>2]=c[d+52>>2];c[j+56>>2]=c[d+56>>2];c[j+60>>2]=c[d+60>>2];f=c[e+4>>2]|0;h=+$b[c[(c[e>>2]|0)+48>>2]&15](e);vc[c[(c[e>>2]|0)+8>>2]&127](e,d,j+112|0,j+96|0);p=+g[j+112>>2];if(+g[b+32>>2]>p)g[b+32>>2]=p;p=+g[j+96>>2];if(+g[b+48>>2]<p)g[b+48>>2]=p;p=+g[j+116>>2];if(+g[b+36>>2]>p)g[b+36>>2]=p;p=+g[j+100>>2];if(+g[b+52>>2]<p)g[b+52>>2]=p;p=+g[j+120>>2];if(+g[b+40>>2]>p)g[b+40>>2]=p;p=+g[j+104>>2];if(+g[b+56>>2]<p)g[b+56>>2]=p;d=c[b+64>>2]|0;if(!d){d=b+16|0;l=0}else{c[j+64>>2]=c[j+112>>2];c[j+68>>2]=c[j+116>>2];c[j+72>>2]=c[j+120>>2];c[j+76>>2]=c[j+124>>2];c[j+80>>2]=c[j+96>>2];c[j+84>>2]=c[j+100>>2];c[j+88>>2]=c[j+104>>2];c[j+92>>2]=c[j+108>>2];m=c[b+16>>2]|0;l=c[d+4>>2]|0;if(!l){c[5004]=(c[5004]|0)+1;o=fF(63)|0;if((o|0)!=0?(c[(o+19&-16)+ -4>>2]=o,(o+19&-16|0)!=0):0){l=(o+19&-16)+0|0;n=l+44|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(n|0));l=o+19&-16}else l=0}else c[d+4>>2]=0;c[l+32>>2]=0;c[l+36>>2]=m;c[l+40>>2]=0;c[l+0>>2]=c[j+64>>2];c[l+4>>2]=c[j+68>>2];c[l+8>>2]=c[j+72>>2];c[l+12>>2]=c[j+76>>2];c[l+16>>2]=c[j+80>>2];c[l+20>>2]=c[j+84>>2];c[l+24>>2]=c[j+88>>2];c[l+28>>2]=c[j+92>>2];Xx(d,c[d>>2]|0,l);c[d+12>>2]=(c[d+12>>2]|0)+1;d=b+16|0}o=c[d>>2]|0;if((o|0)==(c[b+20>>2]|0)?(k=(o|0)==0?1:o<<1,(o|0)<(k|0)):0){if(!k)m=0;else{c[5004]=(c[5004]|0)+1;m=fF((k*80|3)+16|0)|0;if(!m)m=0;else{c[(m+19&-16)+ -4>>2]=m;m=m+19&-16}o=c[d>>2]|0}if((o|0)>0){n=0;do{q=m+(n*80|0)|0;r=c[b+24>>2]|0;s=r+(n*80|0)|0;c[q+0>>2]=c[s+0>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=m+(n*80|0)+16|0;s=r+(n*80|0)+16|0;c[q+0>>2]=c[s+0>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=m+(n*80|0)+32|0;s=r+(n*80|0)+32|0;c[q+0>>2]=c[s+0>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=m+(n*80|0)+48|0;s=r+(n*80|0)+48|0;c[q+0>>2]=c[s+0>>2];c[q+4>>2]=c[s+4>>2];c[q+8>>2]=c[s+8>>2];c[q+12>>2]=c[s+12>>2];q=m+(n*80|0)+64|0;r=r+(n*80|0)+64|0;c[q+0>>2]=c[r+0>>2];c[q+4>>2]=c[r+4>>2];c[q+8>>2]=c[r+8>>2];c[q+12>>2]=c[r+12>>2];n=n+1|0}while((n|0)!=(o|0))}n=c[b+24>>2]|0;if(n){if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[n+ -4>>2]|0)}c[b+24>>2]=0}a[b+28>>0]=1;c[b+24>>2]=m;c[b+20>>2]=k;o=c[d>>2]|0}s=c[b+24>>2]|0;r=s+(o*80|0)|0;c[r+0>>2]=c[j+0>>2];c[r+4>>2]=c[j+4>>2];c[r+8>>2]=c[j+8>>2];c[r+12>>2]=c[j+12>>2];r=s+(o*80|0)+16|0;c[r+0>>2]=c[j+16>>2];c[r+4>>2]=c[j+20>>2];c[r+8>>2]=c[j+24>>2];c[r+12>>2]=c[j+28>>2];r=s+(o*80|0)+32|0;c[r+0>>2]=c[j+32>>2];c[r+4>>2]=c[j+36>>2];c[r+8>>2]=c[j+40>>2];c[r+12>>2]=c[j+44>>2];r=s+(o*80|0)+48|0;c[r+0>>2]=c[j+48>>2];c[r+4>>2]=c[j+52>>2];c[r+8>>2]=c[j+56>>2];c[r+12>>2]=c[j+60>>2];s=s+(o*80|0)+64|0;c[s>>2]=e;c[s+4>>2]=f;g[s+8>>2]=h;c[s+12>>2]=l;c[d>>2]=(c[d>>2]|0)+1;i=j;return}function Dh(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Eh(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Fh(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Gh(a,d){a=a|0;d=d|0;var e=0,f=0,h=0;e=i;f=fF(80)|0;a:do if(!f){while(1){f=c[5158]|0;c[5158]=f+0;if(!f)break;sc[f&3]();f=fF(80)|0;if(f)break a}f=Ab(4)|0;c[f>>2]=20472;yb(f|0,20520,265)}while(0);g[f+4>>2]=1.0;b[f+8>>1]=1;b[f+10>>1]=-1;c[f>>2]=688;h=f+12|0;c[h+0>>2]=c[a+0>>2];c[h+4>>2]=c[a+4>>2];c[h+8>>2]=c[a+8>>2];c[h+12>>2]=c[a+12>>2];a=f+28|0;c[a+0>>2]=c[d+0>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];c[f+76>>2]=0;i=e;return f|0}function Hh(a){a=a|0;return+g[a+4>>2]<1.0|0}function Ih(a){a=a|0;return a+12|0}function Jh(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+12>>2]=c[b+0>>2];c[a+16>>2]=c[b+4>>2];c[a+20>>2]=c[b+8>>2];c[a+24>>2]=c[b+12>>2];i=d;return}function Kh(a){a=a|0;return a+28|0}function Lh(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+28>>2]=c[b+0>>2];c[a+32>>2]=c[b+4>>2];c[a+36>>2]=c[b+8>>2];c[a+40>>2]=c[b+12>>2];i=d;return}function Mh(a){a=a|0;return a+44|0}function Nh(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+44>>2]=c[b+0>>2];c[a+48>>2]=c[b+4>>2];c[a+52>>2]=c[b+8>>2];c[a+56>>2]=c[b+12>>2];i=d;return}function Oh(a){a=a|0;return a+60|0}function Ph(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+60>>2]=c[b+0>>2];c[a+64>>2]=c[b+4>>2];c[a+68>>2]=c[b+8>>2];c[a+72>>2]=c[b+12>>2];i=d;return}function Qh(a){a=a|0;return b[a+8>>1]|0}function Rh(a,c){a=a|0;c=c|0;b[a+8>>1]=c;return}function Sh(a){a=a|0;return b[a+10>>1]|0}function Th(a,c){a=a|0;c=c|0;b[a+10>>1]=c;return}function Uh(a){a=a|0;return+(+g[a+4>>2])}function Vh(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Wh(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Xh(){var a=0,b=0;a=i;c[5004]=(c[5004]|0)+1;b=fF(219)|0;if(!b)b=0;else{c[(b+19&-16)+ -4>>2]=b;b=b+19&-16}Zh();Zh();Yh(b,464,464);i=a;return b|0}function Yh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;c[a>>2]=600;f=a+4|0;do f=f+16|0;while((f|0)!=(a+52|0));c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];f=a+68|0;do f=f+16|0;while((f|0)!=(a+116|0));c[a+68>>2]=c[d+0>>2];c[a+72>>2]=c[d+4>>2];c[a+76>>2]=c[d+8>>2];c[a+80>>2]=c[d+12>>2];c[a+84>>2]=c[d+16>>2];c[a+88>>2]=c[d+20>>2];c[a+92>>2]=c[d+24>>2];c[a+96>>2]=c[d+28>>2];c[a+100>>2]=c[d+32>>2];c[a+104>>2]=c[d+36>>2];c[a+108>>2]=c[d+40>>2];c[a+112>>2]=c[d+44>>2];c[a+116>>2]=c[d+48>>2];c[a+120>>2]=c[d+52>>2];c[a+124>>2]=c[d+56>>2];c[a+128>>2]=c[d+60>>2];d=a+132|0;do d=d+16|0;while((d|0)!=(a+180|0));c[a+132>>2]=c[b+0>>2];c[a+136>>2]=c[b+4>>2];c[a+140>>2]=c[b+8>>2];c[a+144>>2]=c[b+12>>2];c[a+148>>2]=c[b+16>>2];c[a+152>>2]=c[b+20>>2];c[a+156>>2]=c[b+24>>2];c[a+160>>2]=c[b+28>>2];c[a+164>>2]=c[b+32>>2];c[a+168>>2]=c[b+36>>2];c[a+172>>2]=c[b+40>>2];c[a+176>>2]=c[b+44>>2];c[a+180>>2]=c[b+48>>2];c[a+184>>2]=c[b+52>>2];c[a+188>>2]=c[b+56>>2];c[a+192>>2]=c[b+60>>2];c[a+196>>2]=0;i=e;return}function Zh(){var b=0,d=0;b=i;i=i+48|0;if(a[528]|0){i=b;return}if(!(Ya(528)|0)){i=b;return}if((a[584]|0)==0?(Ya(584)|0)!=0:0){g[b+32>>2]=1.0;g[b+28>>2]=0.0;g[b+24>>2]=0.0;g[b+20>>2]=0.0;g[b+16>>2]=1.0;g[b+12>>2]=0.0;g[b+8>>2]=0.0;g[b+4>>2]=0.0;g[b>>2]=1.0;io(536,b+32|0,b+28|0,b+24|0,b+20|0,b+16|0,b+12|0,b+8|0,b+4|0,b);bb(584);d=464}else d=464;do d=d+16|0;while((d|0)!=512);c[116]=c[134];c[117]=c[135];c[118]=c[136];c[119]=c[137];c[120]=c[138];c[121]=c[139];c[122]=c[140];c[123]=c[141];c[124]=c[142];c[125]=c[143];c[126]=c[144];c[127]=c[145];c[128]=0;c[129]=0;c[130]=0;c[131]=0;bb(528);i=b;return}function _h(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(219)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}Zh();Yh(d,a,464);i=b;return d|0}function $h(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(219)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}Yh(e,a,b);i=d;return e|0}function ai(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+8>>2]&127](a,b);i=d;return}function bi(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function ci(a){a=a|0;return a+4|0}function di(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];i=d;return}function ei(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function fi(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function gi(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function hi(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function ii(a){a=a|0;var b=0;b=i;a=Pb[c[(c[a>>2]|0)+36>>2]&127](a)|0;i=b;return a|0}function ji(a,b){a=a|0;b=b|0;var d=0;d=i;a=gc[c[(c[a>>2]|0)+40>>2]&31](a,b)|0;i=d;return a|0}function ki(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function li(a,d){a=a|0;d=d|0;var e=0,f=0,h=0;e=i;f=fF(84)|0;a:do if(!f){while(1){f=c[5158]|0;c[5158]=f+0;if(!f)break;sc[f&3]();f=fF(84)|0;if(f)break a}f=Ab(4)|0;c[f>>2]=20472;yb(f|0,20520,265)}while(0);g[f+4>>2]=1.0;c[f+8>>2]=0;b[f+12>>1]=1;b[f+14>>1]=-1;c[f+16>>2]=0;c[f>>2]=336;h=f+20|0;c[h+0>>2]=c[a+0>>2];c[h+4>>2]=c[a+4>>2];c[h+8>>2]=c[a+8>>2];c[h+12>>2]=c[a+12>>2];a=f+36|0;c[a+0>>2]=c[d+0>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];i=e;return f|0}function mi(a){a=a|0;return(c[a+8>>2]|0)!=0|0}function ni(a){a=a|0;return a+20|0}function oi(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+20>>2]=c[b+0>>2];c[a+24>>2]=c[b+4>>2];c[a+28>>2]=c[b+8>>2];c[a+32>>2]=c[b+12>>2];i=d;return}function pi(a){a=a|0;return a+36|0}function qi(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+36>>2]=c[b+0>>2];c[a+40>>2]=c[b+4>>2];c[a+44>>2]=c[b+8>>2];c[a+48>>2]=c[b+12>>2];i=d;return}function ri(a){a=a|0;return a+52|0}function si(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+52>>2]=c[b+0>>2];c[a+56>>2]=c[b+4>>2];c[a+60>>2]=c[b+8>>2];c[a+64>>2]=c[b+12>>2];i=d;return}function ti(a){a=a|0;return a+68|0}function ui(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+68>>2]=c[b+0>>2];c[a+72>>2]=c[b+4>>2];c[a+76>>2]=c[b+8>>2];c[a+80>>2]=c[b+12>>2];i=d;return}function vi(a){a=a|0;return b[a+12>>1]|0}function wi(a,c){a=a|0;c=c|0;b[a+12>>1]=c;return}function xi(a){a=a|0;return b[a+14>>1]|0}function yi(a,c){a=a|0;c=c|0;b[a+14>>1]=c;return}function zi(a){a=a|0;return c[a+8>>2]|0}function Ai(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Bi(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Ci(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+64>>2]&127](a,b);i=d;return}function Di(a){a=a|0;return c[a+24>>2]|0}function Ei(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+32>>2]&127](a,b,d,e);i=f;return}function Fi(a){a=a|0;var b=0;b=i;a=c[a+68>>2]|0;a=Pb[c[(c[a>>2]|0)+36>>2]&127](a)|0;i=b;return a|0}function Gi(a){a=a|0;return a+28|0}function Hi(a,b){a=a|0;b=b|0;var d=0;d=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,1,-1);i=d;return}function Ii(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,-1);i=e;return}function Ji(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,e);i=f;return}function Ki(a){a=a|0;return c[a+68>>2]|0}function Li(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;var g=0;g=i;Ou(a,b,c,d,e,f);i=g;return}function Mi(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;Qu(a,b,c,d);i=e;return}function Ni(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Oi(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(75)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;c[e+4>>2]=10;c[e>>2]=6400;c[e+52>>2]=0;g[e+28>>2]=b*.5;g[e+32>>2]=a;g[e+36>>2]=a;g[e+40>>2]=0.0;i=d;return e|0}function Pi(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Qi(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Ri(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Si(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0,h=0;f=i;h=fF(16)|0;a:do if(!h){while(1){h=c[5158]|0;c[5158]=h+0;if(!h)break;sc[h&3]();h=fF(16)|0;if(h)break a}h=Ab(4)|0;c[h>>2]=20472;yb(h|0,20520,265)}while(0);g[h>>2]=a;g[h+4>>2]=b;g[h+8>>2]=d;g[h+12>>2]=e;i=f;return h|0}function Ti(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=e;return}function Ui(a){a=a|0;return+(+g[a>>2])}function Vi(a){a=a|0;return+(+g[a+4>>2])}function Wi(a){a=a|0;return+(+g[a+8>>2])}function Xi(a){a=a|0;return+(+g[a+12>>2])}function Yi(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Zi(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function _i(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function $i(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function aj(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function bj(a,b){a=+a;b=+b;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(75)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+8>>2]=0;g[e+12>>2]=1.0;g[e+16>>2]=1.0;g[e+20>>2]=1.0;g[e+24>>2]=0.0;g[e+44>>2]=.03999999910593033;c[e+4>>2]=10;c[e>>2]=6504;c[e+52>>2]=2;g[e+28>>2]=a;g[e+32>>2]=a;g[e+36>>2]=b*.5;g[e+40>>2]=0.0;i=d;return e|0}function cj(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function dj(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function ej(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function fj(a){a=a|0;var b=0,d=0;b=i;d=fF(8)|0;a:do if(!d){while(1){d=c[5158]|0;c[5158]=d+0;if(!d)break;sc[d&3]();d=fF(8)|0;if(d)break a}d=Ab(4)|0;c[d>>2]=20472;yb(d|0,20520,265)}while(0);c[d>>2]=3832;c[d+4>>2]=a;i=b;return d|0}function gj(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function hj(a){a=a|0;return(c[a+8>>2]|0)!=0|0}function ij(a){a=a|0;return b[a+12>>1]|0}function jj(a,c){a=a|0;c=c|0;b[a+12>>1]=c;return}function kj(a){a=a|0;return b[a+14>>1]|0}function lj(a,c){a=a|0;c=c|0;b[a+14>>1]=c;return}function mj(a){a=a|0;return c[a+8>>2]|0}function nj(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function oj(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function pj(a){a=a|0;return+(+g[a+216>>2])}function qj(a,b){a=a|0;b=+b;g[a+216>>2]=b;return}function rj(a){a=a|0;return+(+g[a+228>>2])}function sj(a,b){a=a|0;b=+b;g[a+228>>2]=b;return}function tj(a){a=a|0;return+(+g[a+244>>2])}function uj(a,b){a=a|0;b=+b;g[a+244>>2]=b;return}function vj(a){a=a|0;return+(+g[a+204>>2])}function wj(a,b){a=a|0;b=+b;g[a+204>>2]=b;return}function xj(a){a=a|0;return+(+g[a+212>>2])}function yj(a,b){a=a|0;b=+b;g[a+212>>2]=b;return}function zj(a){a=a|0;return+(+g[a+220>>2])}function Aj(a,b){a=a|0;b=+b;g[a+220>>2]=b;return}function Bj(a){a=a|0;return+(+g[a+224>>2])}function Cj(a,b){a=a|0;b=+b;g[a+224>>2]=b;return}function Dj(a){a=a|0;return+(+g[a+232>>2])}function Ej(a,b){a=a|0;b=+b;g[a+232>>2]=b;return}function Fj(a){a=a|0;return+(+g[a+248>>2])}function Gj(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function Hj(a){a=a|0;return+(+g[a+208>>2])}function Ij(a,b){a=a|0;b=+b;g[a+208>>2]=b;return}function Jj(b){b=b|0;return(a[b+260>>0]&1)!=0|0}function Kj(b,c){b=b|0;c=c|0;a[b+260>>0]=c&1;return}function Lj(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Mj(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Nj(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Oj(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Pj(){var a=0,b=0;a=i;c[5004]=(c[5004]|0)+1;b=fF(35)|0;if(!b){b=0;i=a;return b|0}c[(b+19&-16)+ -4>>2]=b;b=b+19&-16;i=a;return b|0}function Qj(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0,h=0;f=i;c[5004]=(c[5004]|0)+1;h=fF(35)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}g[h>>2]=a;g[h+4>>2]=b;g[h+8>>2]=d;g[h+12>>2]=e;i=f;return h|0}function Rj(a){a=a|0;return+(+g[a+12>>2])}function Sj(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=e;return}function Tj(a){a=a|0;var b=0.0,c=0.0,d=0.0;d=+g[a>>2];c=+g[a+4>>2];b=+g[a+8>>2];b=+Q(+(d*d+c*c+b*b));return+b}function Uj(a){a=a|0;return+(+g[a>>2])}function Vj(a){a=a|0;return+(+g[a+4>>2])}function Wj(a){a=a|0;return+(+g[a+8>>2])}function Xj(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Yj(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Zj(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function _j(a,b){a=a|0;b=+b;g[a>>2]=+g[a>>2]*b;g[a+4>>2]=+g[a+4>>2]*b;g[a+8>>2]=+g[a+8>>2]*b;return a|0}function $j(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function ak(b,d,e){b=b|0;d=d|0;e=+e;var f=0,h=0,j=0,k=0;f=i;c[5004]=(c[5004]|0)+1;h=fF(203)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}c[h>>2]=2632;a[h+144>>0]=1;c[h+140>>2]=0;c[h+132>>2]=0;c[h+136>>2]=0;c[h+176>>2]=1;g[h+56>>2]=.019999999552965164;k=h+60|0;j=h+170|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;a[j>>0]=1;c[h+8>>2]=b;g[h+52>>2]=e;g[h+48>>2]=0.0;c[h+12>>2]=d;a[h+171>>0]=1;g[h+172>>2]=0.0;g[h+16>>2]=0.0;g[h+20>>2]=0.0;g[h+44>>2]=29.399999618530273;g[h+24>>2]=55.0;g[h+28>>2]=10.0;a[h+168>>0]=0;a[h+169>>0]=0;a[h+180>>0]=1;g[h+36>>2]=.7853981852531433;g[h+40>>2]=.7071067690849304;g[h+108>>2]=0.0;a[h+181>>0]=0;a[h+182>>0]=0;i=f;return h|0}function bk(b,d,e,f){b=b|0;d=d|0;e=+e;f=f|0;var h=0,j=0,k=0;h=i;c[5004]=(c[5004]|0)+1;j=fF(203)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}c[j>>2]=2632;a[j+144>>0]=1;c[j+140>>2]=0;c[j+132>>2]=0;c[j+136>>2]=0;c[j+176>>2]=f;g[j+56>>2]=.019999999552965164;k=j+60|0;f=j+170|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;a[f>>0]=1;c[j+8>>2]=b;g[j+52>>2]=e;g[j+48>>2]=0.0;c[j+12>>2]=d;a[j+171>>0]=1;g[j+172>>2]=0.0;g[j+16>>2]=0.0;g[j+20>>2]=0.0;g[j+44>>2]=29.399999618530273;g[j+24>>2]=55.0;g[j+28>>2]=10.0;a[j+168>>0]=0;a[j+169>>0]=0;a[j+180>>0]=1;g[j+36>>2]=.7853981852531433;g[j+40>>2]=.7071067690849304;g[j+108>>2]=0.0;a[j+181>>0]=0;a[j+182>>0]=0;i=h;return j|0}function ck(a,b){a=a|0;b=b|0;if((b|0)<0)b=0;else b=(b|0)>2?2:b;c[a+176>>2]=b;return}function dk(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+16>>2]&127](a,b);i=d;return}function ek(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;tc[c[(c[a>>2]|0)+20>>2]&7](a,b,d);i=e;return}function fk(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+28>>2]&127](a,b);i=d;return}function gk(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+32>>2]&127](a,b);i=d;return}function hk(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;tc[c[(c[a>>2]|0)+36>>2]&7](a,b,d);i=e;return}function ik(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function jk(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function kk(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function lk(a){a=a|0;var b=0;b=i;a=Pb[c[(c[a>>2]|0)+40>>2]&127](a)|0;i=b;return a|0}function mk(a){a=a|0;var b=0;b=i;Lb[c[(c[a>>2]|0)+44>>2]&511](a);i=b;return}function nk(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function ok(a){a=a|0;return+(+g[a+44>>2])}function pk(a,b){a=a|0;b=+b;g[a+36>>2]=b;g[a+40>>2]=+S(+b);return}function qk(a){a=a|0;return+(+g[a+36>>2])}function rk(a){a=a|0;return c[a+8>>2]|0}function sk(b,c){b=b|0;c=c|0;a[b+170>>0]=c&1;return}function tk(a){a=a|0;var b=0;b=i;a=Pb[c[(c[a>>2]|0)+48>>2]&127](a)|0;i=b;return a|0}function uk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function vk(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;c[5004]=(c[5004]|0)+1;e=fF(103)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}f=e+4|0;c[f>>2]=35;c[e+8>>2]=0;g[e+12>>2]=0.0;c[e>>2]=16992;m=+g[a>>2];l=+g[a+4>>2];k=+g[a+8>>2];h=+g[a+12>>2];j=1.0/+Q(+(m*m+l*l+k*k));g[e+48>>2]=m*j;g[e+52>>2]=l*j;g[e+56>>2]=k*j;g[e+60>>2]=h;g[e+64>>2]=b;a=e+68|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[f>>2]=28;i=d;return e|0}function wk(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function xk(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function yk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function zk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Ak(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+60>>2]&127](a,b);i=d;return}function Bk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Ck(){var a=0,b=0;a=i;c[5004]=(c[5004]|0)+1;b=fF(35)|0;if(!b){b=0;i=a;return b|0}c[(b+19&-16)+ -4>>2]=b;b=b+19&-16;i=a;return b|0}function Dk(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(35)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;g[f+12>>2]=0.0;i=e;return f|0}function Ek(a){a=a|0;var b=0.0,c=0.0,d=0.0;d=+g[a>>2];c=+g[a+4>>2];b=+g[a+8>>2];b=+Q(+(d*d+c*c+b*b));return+b}function Fk(a){a=a|0;return+(+g[a>>2])}function Gk(a){a=a|0;return+(+g[a+4>>2])}function Hk(a){a=a|0;return+(+g[a+8>>2])}function Ik(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Jk(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Kk(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Lk(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=0.0;return}function Mk(a,b){a=a|0;b=+b;g[a>>2]=+g[a>>2]*b;g[a+4>>2]=+g[a+4>>2]*b;g[a+8>>2]=+g[a+8>>2]*b;return a|0}function Nk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Ok(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Pk(a){a=+a;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(71)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[d+8>>2]=0;g[d+12>>2]=1.0;g[d+16>>2]=1.0;g[d+20>>2]=1.0;g[d+24>>2]=0.0;c[d>>2]=16680;c[d+4>>2]=8;g[d+28>>2]=a;g[d+44>>2]=a;i=b;return d|0}function Qk(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function Rk(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Sk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Tk(){var a=0,b=0;a=i;b=fF(24)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(24)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=4096;c[b+12>>2]=4096;c[b+16>>2]=0;c[b+20>>2]=1;i=a;return b|0}function Uk(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Vk(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(783)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}lq(e,a,b,0);i=d;return e|0}function Wk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;c[5004]=(c[5004]|0)+1;f=fF(783)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}lq(f,a,b,d);i=e;return f|0}function Xk(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0;h=i;c[5004]=(c[5004]|0)+1;j=fF(783)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}c[j+4>>2]=4;c[j+8>>2]=-1;c[j+12>>2]=-1;g[j+16>>2]=3.4028234663852886e+38;a[j+20>>0]=1;a[j+21>>0]=0;c[j+24>>2]=-1;c[j+28>>2]=b;c[j+32>>2]=d;g[j+36>>2]=0.0;g[j+40>>2]=.30000001192092896;c[j+44>>2]=0;c[j>>2]=2504;d=j+552|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=j+568|0;c[d+0>>2]=c[e+16>>2];c[d+4>>2]=c[e+20>>2];c[d+8>>2]=c[e+24>>2];c[d+12>>2]=c[e+28>>2];d=j+584|0;c[d+0>>2]=c[e+32>>2];c[d+4>>2]=c[e+36>>2];c[d+8>>2]=c[e+40>>2];c[d+12>>2]=c[e+44>>2];d=j+600|0;c[d+0>>2]=c[e+48>>2];c[d+4>>2]=c[e+52>>2];c[d+8>>2]=c[e+56>>2];c[d+12>>2]=c[e+60>>2];e=j+616|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=j+632|0;c[e+0>>2]=c[f+16>>2];c[e+4>>2]=c[f+20>>2];c[e+8>>2]=c[f+24>>2];c[e+12>>2]=c[f+28>>2];e=j+648|0;c[e+0>>2]=c[f+32>>2];c[e+4>>2]=c[f+36>>2];c[e+8>>2]=c[f+40>>2];c[e+12>>2]=c[f+44>>2];e=j+664|0;c[e+0>>2]=c[f+48>>2];c[e+4>>2]=c[f+52>>2];c[e+8>>2]=c[f+56>>2];c[e+12>>2]=c[f+60>>2];g[j+688>>2]=0.0;g[j+692>>2]=-1.0;g[j+696>>2]=.8999999761581421;g[j+700>>2]=.30000001192092896;g[j+704>>2]=1.0;g[j+708>>2]=0.0;g[j+712>>2]=0.0;a[j+716>>0]=0;a[j+736>>0]=0;a[j+737>>0]=0;a[j+738>>0]=0;a[j+739>>0]=1;a[j+740>>0]=0;c[j+748>>2]=0;g[j+732>>2]=1.0;i=h;return j|0}function Yk(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0;j=i;c[5004]=(c[5004]|0)+1;k=fF(783)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}c[k+4>>2]=4;c[k+8>>2]=-1;c[k+12>>2]=-1;g[k+16>>2]=3.4028234663852886e+38;a[k+20>>0]=1;a[k+21>>0]=0;c[k+24>>2]=-1;c[k+28>>2]=b;c[k+32>>2]=d;g[k+36>>2]=0.0;g[k+40>>2]=.30000001192092896;c[k+44>>2]=0;c[k>>2]=2504;d=k+552|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];d=k+568|0;c[d+0>>2]=c[e+16>>2];c[d+4>>2]=c[e+20>>2];c[d+8>>2]=c[e+24>>2];c[d+12>>2]=c[e+28>>2];d=k+584|0;c[d+0>>2]=c[e+32>>2];c[d+4>>2]=c[e+36>>2];c[d+8>>2]=c[e+40>>2];c[d+12>>2]=c[e+44>>2];d=k+600|0;c[d+0>>2]=c[e+48>>2];c[d+4>>2]=c[e+52>>2];c[d+8>>2]=c[e+56>>2];c[d+12>>2]=c[e+60>>2];e=k+616|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];e=k+632|0;c[e+0>>2]=c[f+16>>2];c[e+4>>2]=c[f+20>>2];c[e+8>>2]=c[f+24>>2];c[e+12>>2]=c[f+28>>2];e=k+648|0;c[e+0>>2]=c[f+32>>2];c[e+4>>2]=c[f+36>>2];c[e+8>>2]=c[f+40>>2];c[e+12>>2]=c[f+44>>2];e=k+664|0;c[e+0>>2]=c[f+48>>2];c[e+4>>2]=c[f+52>>2];c[e+8>>2]=c[f+56>>2];c[e+12>>2]=c[f+60>>2];g[k+688>>2]=0.0;g[k+692>>2]=-1.0;g[k+696>>2]=.8999999761581421;g[k+700>>2]=.30000001192092896;g[k+704>>2]=1.0;g[k+708>>2]=0.0;g[k+712>>2]=0.0;a[k+716>>0]=0;a[k+736>>0]=0;a[k+737>>0]=0;a[k+738>>0]=0;a[k+739>>0]=1;a[k+740>>0]=h&1;c[k+748>>2]=0;g[k+732>>2]=h?-1.0:1.0;i=j;return k|0}function Zk(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;c[5004]=(c[5004]|0)+1;j=fF(783)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}kq(j,a,b,d,e,f,g,0);i=h;return j|0}function _k(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0;j=i;c[5004]=(c[5004]|0)+1;k=fF(783)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}kq(k,a,b,d,e,f,g,h);i=j;return k|0}function $k(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;var f=0;f=i;g[a+692>>2]=(c-b)*.5;b=+ab(+((c-b)*.5+b),6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+688>>2]=b;g[a+696>>2]=d;g[a+700>>2]=e;g[a+704>>2]=1.0;i=f;return}function al(a,b,c,d,e,f){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;var h=0;h=i;g[a+692>>2]=(c-b)*.5;b=+ab(+((c-b)*.5+b),6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;g[a+688>>2]=b;g[a+696>>2]=d;g[a+700>>2]=e;g[a+704>>2]=f;i=h;return}function bl(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function cl(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function dl(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function el(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function fl(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function gl(){var a=0,b=0;a=i;b=fF(12)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(12)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);g[b>>2]=.30000001192092896;g[b+4>>2]=1.0;g[b+8>>2]=0.0;i=a;return b|0}function hl(a){a=a|0;return+(+g[a>>2])}function il(a,b){a=a|0;b=+b;g[a>>2]=b;return}function jl(a){a=a|0;return+(+g[a+4>>2])}function kl(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function ll(a){a=a|0;return+(+g[a+8>>2])}function ml(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function nl(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function ol(){var b=0,d=0,e=0,f=0,h=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(303)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}g[d+164>>2]=1.0;g[d+168>>2]=1.0;g[d+172>>2]=1.0;g[d+176>>2]=0.0;c[d+180>>2]=0;g[d+184>>2]=999999984306749400.0;h=d+188|0;e=d+204|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[e>>2]=1;c[d+208>>2]=-1;c[d+212>>2]=-1;c[d+216>>2]=1;g[d+220>>2]=0.0;g[d+224>>2]=.5;g[d+228>>2]=0.0;g[d+232>>2]=0.0;e=d+236|0;c[d+240>>2]=0;g[d+244>>2]=1.0;h=d+248|0;f=d+4|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=d+8|0;h=d+24|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[h>>2]=1.0;h=d+28|0;f=d+44|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=d+48|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[d>>2]=13008;a[d+280>>0]=1;c[d+276>>2]=0;c[d+268>>2]=0;c[d+272>>2]=0;c[e>>2]=4;i=b;return d|0}function pl(a){a=a|0;return c[a+268>>2]|0}function ql(a,b){a=a|0;b=b|0;return c[(c[a+276>>2]|0)+(b<<2)>>2]|0}function rl(a){a=a|0;return c[a+192>>2]|0}function sl(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function tl(a,b){a=a|0;b=b|0;var d=0;d=i;if(((c[a+216>>2]|0)+ -4|0)>>>0<2){i=d;return}c[a+216>>2]=b;i=d;return}function ul(a,b){a=a|0;b=b|0;c[a+216>>2]=b;return}function vl(a){a=a|0;var b=0;b=i;if(c[a+204>>2]&3){i=b;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=b;return}function wl(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b?(c[a+204>>2]&3|0)!=0:0){i=d;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=d;return}function xl(a){a=a|0;a=c[a+216>>2]|0;return((a|0)==2?0:(a|0)!=5)|0}function yl(a){a=a|0;return(c[a+204>>2]&2|0)!=0|0}function zl(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+228>>2]=b;return}function Al(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+224>>2]=b;return}function Bl(a){a=a|0;return a+4|0}function Cl(a){a=a|0;return c[a+204>>2]|0}function Dl(a,b){a=a|0;b=b|0;c[a+204>>2]=b;return}function El(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];i=d;return}function Fl(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function Gl(a,b){a=a|0;b=+b;g[a+252>>2]=b;return}function Hl(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function Il(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+8>>2]&511](a);i=b;return}function Jl(a){a=a|0;return c[a>>2]|0}function Kl(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Ll(a){a=a|0;return c[a+4>>2]|0}function Ml(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Nl(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Ol(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Pl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;b=i;f=fF(152)|0;a:do if(!f){while(1){f=c[5158]|0;c[5158]=f+0;if(!f)break;sc[f&3]();f=fF(152)|0;if(f)break a}f=Ab(4)|0;c[f>>2]=20472;yb(f|0,20520,265)}while(0);c[f>>2]=3752;a[f+20>>0]=1;c[f+16>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;a[f+40>>0]=1;c[f+36>>2]=0;c[f+28>>2]=0;c[f+32>>2]=0;a[f+60>>0]=1;c[f+56>>2]=0;c[f+48>>2]=0;c[f+52>>2]=0;a[f+80>>0]=1;c[f+76>>2]=0;c[f+68>>2]=0;c[f+72>>2]=0;c[f+100>>2]=e;g[f+104>>2]=0.0;a[f+148>>0]=1;c[f+144>>2]=0;c[f+136>>2]=0;c[f+140>>2]=0;c[f+116>>2]=d;c[f+120>>2]=0;c[f+124>>2]=2;c[f+128>>2]=1;g[f+112>>2]=0.0;g[f+108>>2]=0.0;i=b;return f|0}function Ql(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+144>>2]|0)+(d*284|0)+252>>2]=b;return}function Rl(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+144>>2]|0)+(d*284|0)+232>>2]=b;return}function Sl(a,b){a=a|0;b=b|0;return(c[a+144>>2]|0)+(b*284|0)+92|0}function Tl(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;$q(c[a+116>>2]|0,c[a+144>>2]|0,b,d);i=e;return}function Ul(b,d,e,f,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;h=+h;j=+j;k=k|0;l=l|0;var m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0.0,u=0,v=0,w=0;m=i;i=i+288|0;c[m+144>>2]=c[d+0>>2];c[m+148>>2]=c[d+4>>2];c[m+152>>2]=c[d+8>>2];c[m+156>>2]=c[d+12>>2];w=m+160|0;c[w+0>>2]=c[e+0>>2];c[w+4>>2]=c[e+4>>2];c[w+8>>2]=c[e+8>>2];c[w+12>>2]=c[e+12>>2];v=m+176|0;c[v+0>>2]=c[f+0>>2];c[v+4>>2]=c[f+4>>2];c[v+8>>2]=c[f+8>>2];c[v+12>>2]=c[f+12>>2];o=+g[k>>2];p=+g[k+4>>2];q=+g[k+8>>2];r=+g[k+16>>2];n=+g[k+12>>2];t=+g[k+20>>2];c[m+0>>2]=c[m+144>>2];c[m+4>>2]=c[m+148>>2];c[m+8>>2]=c[m+152>>2];c[m+12>>2]=c[m+156>>2];c[m+16>>2]=c[w+0>>2];c[m+20>>2]=c[w+4>>2];c[m+24>>2]=c[w+8>>2];c[m+28>>2]=c[w+12>>2];c[m+32>>2]=c[v+0>>2];c[m+36>>2]=c[v+4>>2];c[m+40>>2]=c[v+8>>2];c[m+44>>2]=c[v+12>>2];v=c[b+136>>2]|0;if((v|0)==(c[b+140>>2]|0)?(s=(v|0)==0?1:v<<1,(v|0)<(s|0)):0){if(!s)d=0;else{c[5004]=(c[5004]|0)+1;k=fF((s*284|3)+16|0)|0;if(!k)d=0;else{c[(k+19&-16)+ -4>>2]=k;d=k+19&-16}v=c[b+136>>2]|0}if((v|0)>0){w=0;do{k=d+(w*284|0)|0;if(k){u=c[b+144>>2]|0;e=k+0|0;k=u+(w*284|0)+0|0;f=e+92|0;do{c[e>>2]=c[k>>2];e=e+4|0;k=k+4|0}while((e|0)<(f|0));e=d+(w*284|0)+92|0;k=u+(w*284|0)+92|0;c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[e+12>>2]=c[k+12>>2];e=d+(w*284|0)+108|0;k=u+(w*284|0)+108|0;c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[e+12>>2]=c[k+12>>2];e=d+(w*284|0)+124|0;k=u+(w*284|0)+124|0;c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[e+12>>2]=c[k+12>>2];e=d+(w*284|0)+140|0;k=u+(w*284|0)+140|0;c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[e+12>>2]=c[k+12>>2];e=d+(w*284|0)+156|0;k=u+(w*284|0)+156|0;f=e+128|0;do{c[e>>2]=c[k>>2];e=e+4|0;k=k+4|0}while((e|0)<(f|0))}w=w+1|0}while((w|0)!=(v|0))}k=c[b+144>>2]|0;if(k){if(a[b+148>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[b+144>>2]=0}a[b+148>>0]=1;c[b+144>>2]=d;c[b+140>>2]=s;v=c[b+136>>2]|0}s=c[b+144>>2]|0;k=s+(v*284|0)|0;if(!k){w=v;d=s;v=w+1|0;c[b+136>>2]=v;w=d+(w*284|0)|0;d=b+116|0;v=c[d>>2]|0;_q(v,w,0);v=c[b+136>>2]|0;v=v+ -1|0;d=c[d>>2]|0;u=c[b+144>>2]|0;$q(d,u,v,0);i=m;return w|0}e=k+0|0;k=m+48|0;f=e+92|0;do{c[e>>2]=c[k>>2];e=e+4|0;k=k+4|0}while((e|0)<(f|0));e=s+(v*284|0)+92|0;c[e+0>>2]=c[m+240>>2];c[e+4>>2]=c[m+244>>2];c[e+8>>2]=c[m+248>>2];c[e+12>>2]=c[m+252>>2];e=s+(v*284|0)+108|0;c[e+0>>2]=c[m+224>>2];c[e+4>>2]=c[m+228>>2];c[e+8>>2]=c[m+232>>2];c[e+12>>2]=c[m+236>>2];e=s+(v*284|0)+124|0;c[e+0>>2]=c[m+208>>2];c[e+4>>2]=c[m+212>>2];c[e+8>>2]=c[m+216>>2];c[e+12>>2]=c[m+220>>2];e=s+(v*284|0)+140|0;c[e+0>>2]=c[m+192>>2];c[e+4>>2]=c[m+196>>2];c[e+8>>2]=c[m+200>>2];c[e+12>>2]=c[m+204>>2];s=s+(v*284|0)+156|0;e=s+0|0;k=m+0|0;f=e+48|0;do{c[e>>2]=c[k>>2];e=e+4|0;k=k+4|0}while((e|0)<(f|0));g[s+48>>2]=h;g[s+52>>2]=n;g[s+56>>2]=j;g[s+60>>2]=o;g[s+64>>2]=p;g[s+68>>2]=q;g[s+72>>2]=r;g[s+76>>2]=0.0;g[s+80>>2]=0.0;g[s+84>>2]=0.0;g[s+88>>2]=.10000000149011612;g[s+92>>2]=t;g[s+96>>2]=0.0;g[s+100>>2]=0.0;a[s+104>>0]=l&1;e=s+105|0;k=m+256|0;f=e+23|0;do{a[e>>0]=a[k>>0]|0;e=e+1|0;k=k+1|0}while((e|0)<(f|0));w=c[b+136>>2]|0;d=c[b+144>>2]|0;v=w+1|0;c[b+136>>2]=v;w=d+(w*284|0)|0;d=b+116|0;v=c[d>>2]|0;_q(v,w,0);v=c[b+136>>2]|0;v=v+ -1|0;d=c[d>>2]|0;u=c[b+144>>2]|0;$q(d,u,v,0);i=m;return w|0}function Vl(a){a=a|0;return c[a+136>>2]|0}function Wl(a){a=a|0;return c[a+116>>2]|0}function Xl(a,b){a=a|0;b=b|0;return(c[a+144>>2]|0)+(b*284|0)|0}function Yl(a,b,d){a=a|0;b=+b;d=d|0;g[(c[a+144>>2]|0)+(d*284|0)+256>>2]=b;return}function Zl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+24>>2]&127](a,b,d,e);i=f;return}function _l(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function $l(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0;h=i;j=fF(44)|0;a:do if(!j){while(1){j=c[5158]|0;c[5158]=j+0;if(!j)break;sc[j&3]();j=fF(44)|0;if(j)break a}j=Ab(4)|0;c[j>>2]=20472;yb(j|0,20520,265)}while(0);c[j>>2]=a;c[j+4>>2]=b;b=j+8|0;c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];d=j+24|0;c[d+0>>2]=c[e+0>>2];c[d+4>>2]=c[e+4>>2];c[d+8>>2]=c[e+8>>2];c[d+12>>2]=c[e+12>>2];g[j+40>>2]=f;i=h;return j|0}function am(a){a=a|0;return c[a>>2]|0}function bm(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function cm(a){a=a|0;return c[a+4>>2]|0}function dm(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function em(a){a=a|0;return a+8|0}function fm(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+8>>2]=c[b+0>>2];c[a+12>>2]=c[b+4>>2];c[a+16>>2]=c[b+8>>2];c[a+20>>2]=c[b+12>>2];i=d;return}function gm(a){a=a|0;return a+24|0}function hm(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+24>>2]=c[b+0>>2];c[a+28>>2]=c[b+4>>2];c[a+32>>2]=c[b+8>>2];c[a+36>>2]=c[b+12>>2];i=d;return}function im(a){a=a|0;return+(+g[a+40>>2])}function jm(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function km(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function lm(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function mm(b){b=b|0;var d=0,e=0,f=0,h=0;d=i;c[5004]=(c[5004]|0)+1;e=fF(635)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}g[e+164>>2]=1.0;g[e+168>>2]=1.0;g[e+172>>2]=1.0;g[e+176>>2]=0.0;c[e+180>>2]=0;g[e+184>>2]=999999984306749400.0;f=e+188|0;h=e+204|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[h>>2]=1;c[e+208>>2]=-1;c[e+212>>2]=-1;c[e+216>>2]=1;g[e+220>>2]=0.0;g[e+224>>2]=.5;g[e+228>>2]=0.0;g[e+232>>2]=0.0;c[e+236>>2]=1;c[e+240>>2]=0;g[e+244>>2]=1.0;h=e+248|0;f=e+4|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=e+8|0;h=e+24|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[h>>2]=1.0;h=e+28|0;f=e+44|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;g[f>>2]=1.0;f=e+48|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[e>>2]=3912;a[e+500>>0]=1;c[e+496>>2]=0;c[e+488>>2]=0;c[e+492>>2]=0;kr(e,b);i=d;return e|0}function nm(a){a=a|0;return a+4|0}function om(a,b){a=a|0;b=b|0;var c=0;c=i;nr(a,b);i=c;return}function pm(a,b,c){a=a|0;b=+b;c=+c;g[a+472>>2]=b;g[a+476>>2]=c;return}function qm(a,b,c){a=a|0;b=+b;c=+c;if(b<0.0)b=0.0;else b=b>1.0?1.0:b;g[a+444>>2]=b;if(c<0.0)c=0.0;else c=c>1.0?1.0:c;g[a+448>>2]=c;return}function rm(a,b,c){a=a|0;b=+b;c=c|0;var d=0;d=i;mr(a,b,c);i=d;return}function sm(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0;d=i;c[a+348>>2]=c[b+0>>2];c[a+352>>2]=c[b+4>>2];c[a+356>>2]=c[b+8>>2];c[a+360>>2]=c[b+12>>2];h=+g[a+344>>2];f=+g[a+352>>2]*h;e=+g[a+356>>2]*h;g[a+560>>2]=+g[a+348>>2]*h;g[a+564>>2]=f;g[a+568>>2]=e;g[a+572>>2]=0.0;i=d;return}function tm(a,b){a=a|0;b=b|0;var c=0.0,d=0.0;d=+g[b+4>>2]*+g[a+548>>2];c=+g[b+8>>2]*+g[a+552>>2];g[a+428>>2]=+g[a+428>>2]+ +g[b>>2]*+g[a+544>>2];g[a+432>>2]=+g[a+432>>2]+d;g[a+436>>2]=+g[a+436>>2]+c;return}function um(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;d=+g[a+348>>2];f=+g[a+352>>2];h=+g[b+4>>2]*f;i=+g[a+356>>2];j=+g[b+8>>2]*i;g[a+412>>2]=+g[a+412>>2]+ +g[b>>2]*d;g[a+416>>2]=+g[a+416>>2]+h;g[a+420>>2]=+g[a+420>>2]+j;d=+g[b>>2]*d;f=+g[b+4>>2]*f;i=+g[b+8>>2]*i;j=+g[c+4>>2];h=+g[c+8>>2];k=+g[c>>2];e=(h*d-k*i)*+g[a+548>>2];d=(k*f-j*d)*+g[a+552>>2];g[a+428>>2]=+g[a+428>>2]+(j*i-h*f)*+g[a+544>>2];g[a+432>>2]=+g[a+432>>2]+e;g[a+436>>2]=+g[a+436>>2]+d;return}function vm(a,b){a=a|0;b=b|0;var c=0.0,d=0.0;d=+g[b+4>>2]*+g[a+352>>2];c=+g[b+8>>2]*+g[a+356>>2];g[a+412>>2]=+g[a+412>>2]+ +g[b>>2]*+g[a+348>>2];g[a+416>>2]=+g[a+416>>2]+d;g[a+420>>2]=+g[a+420>>2]+c;return}function wm(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0;h=+g[b>>2];f=+g[b+4>>2];e=+g[b+8>>2];d=(+g[a+280>>2]*h+ +g[a+284>>2]*f+ +g[a+288>>2]*e)*+g[a+548>>2];c=(+g[a+296>>2]*h+ +g[a+300>>2]*f+ +g[a+304>>2]*e)*+g[a+552>>2];g[a+328>>2]=+g[a+328>>2]+(+g[a+264>>2]*h+ +g[a+268>>2]*f+ +g[a+272>>2]*e)*+g[a+544>>2];g[a+332>>2]=+g[a+332>>2]+d;g[a+336>>2]=+g[a+336>>2]+c;return}function xm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;ym(a,b,c);i=d;return}function ym(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;d=i;if(!(+g[a+344>>2]!=0.0)){i=d;return}Am(a,b);h=+g[b>>2]*+g[a+348>>2];k=+g[b+4>>2]*+g[a+352>>2];m=+g[b+8>>2]*+g[a+356>>2];j=+g[c+4>>2];n=+g[c+8>>2];l=+g[c>>2];f=(+g[a+280>>2]*(j*m-n*k)+ +g[a+284>>2]*(n*h-l*m)+ +g[a+288>>2]*(l*k-j*h))*+g[a+548>>2];e=(+g[a+296>>2]*(j*m-n*k)+ +g[a+300>>2]*(n*h-l*m)+ +g[a+304>>2]*(l*k-j*h))*+g[a+552>>2];g[a+328>>2]=+g[a+328>>2]+(+g[a+264>>2]*(j*m-n*k)+ +g[a+268>>2]*(n*h-l*m)+ +g[a+272>>2]*(l*k-j*h))*+g[a+544>>2];g[a+332>>2]=+g[a+332>>2]+f;g[a+336>>2]=+g[a+336>>2]+e;i=d;return}function zm(a,b){a=a|0;b=b|0;var c=0;c=i;Am(a,b);i=c;return}function Am(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0;e=+g[a+344>>2];d=+g[b+4>>2]*+g[a+352>>2]*e;c=+g[b+8>>2]*+g[a+356>>2]*e;g[a+312>>2]=+g[a+312>>2]+ +g[b>>2]*+g[a+348>>2]*e;g[a+316>>2]=+g[a+316>>2]+d;g[a+320>>2]=+g[a+320>>2]+c;return}function Bm(a){a=a|0;var b=0.0,c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;n=+g[a+4>>2];h=+g[a+396>>2];m=+g[a+8>>2];e=+g[a+400>>2];l=+g[a+12>>2];c=+g[a+404>>2];k=+g[a+20>>2];j=+g[a+24>>2];i=+g[a+28>>2];f=+g[a+36>>2];d=+g[a+40>>2];b=+g[a+44>>2];g[a+264>>2]=n*n*h+m*m*e+l*l*c;g[a+268>>2]=n*h*k+m*e*j+l*c*i;g[a+272>>2]=n*h*f+m*e*d+l*c*b;g[a+276>>2]=0.0;g[a+280>>2]=n*h*k+m*e*j+l*c*i;g[a+284>>2]=k*h*k+j*e*j+i*c*i;g[a+288>>2]=h*k*f+e*j*d+c*i*b;g[a+292>>2]=0.0;g[a+296>>2]=n*h*f+m*e*d+l*c*b;g[a+300>>2]=k*h*f+j*e*d+i*c*b;g[a+304>>2]=f*h*f+d*e*d+b*c*b;g[a+308>>2]=0.0;return}function Cm(a){a=a|0;return a+312|0}function Dm(a){a=a|0;return a+328|0}function Em(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+312>>2]=c[b+0>>2];c[a+316>>2]=c[b+4>>2];c[a+320>>2]=c[b+8>>2];c[a+324>>2]=c[b+12>>2];i=d;return}function Fm(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+328>>2]=c[b+0>>2];c[a+332>>2]=c[b+4>>2];c[a+336>>2]=c[b+8>>2];c[a+340>>2]=c[b+12>>2];i=d;return}function Gm(a){a=a|0;return c[a+480>>2]|0}function Hm(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+544>>2]=c[b+0>>2];c[a+548>>2]=c[b+4>>2];c[a+552>>2]=c[b+8>>2];c[a+556>>2]=c[b+12>>2];i=d;return}function Im(a,b){a=a|0;b=b|0;if(!(c[b+236>>2]&2))b=0;return b|0}function Jm(a){a=a|0;return c[a+192>>2]|0}function Km(a,b){a=a|0;b=+b;g[a+184>>2]=b;return}function Lm(a,b){a=a|0;b=b|0;var d=0;d=i;if(((c[a+216>>2]|0)+ -4|0)>>>0<2){i=d;return}c[a+216>>2]=b;i=d;return}function Mm(a,b){a=a|0;b=b|0;c[a+216>>2]=b;return}function Nm(a){a=a|0;var b=0;b=i;if(c[a+204>>2]&3){i=b;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=b;return}function Om(a,b){a=a|0;b=b|0;var d=0;d=i;if(!b?(c[a+204>>2]&3|0)!=0:0){i=d;return}if(((c[a+216>>2]|0)+ -4|0)>>>0>=2)c[a+216>>2]=1;g[a+220>>2]=0.0;i=d;return}function Pm(a){a=a|0;a=c[a+216>>2]|0;return((a|0)==2?0:(a|0)!=5)|0}function Qm(a){a=a|0;return(c[a+204>>2]&2|0)!=0|0}function Rm(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+228>>2]=b;return}function Sm(a,b){a=a|0;b=+b;c[a+260>>2]=(c[a+260>>2]|0)+1;g[a+224>>2]=b;return}function Tm(a){a=a|0;return a+4|0}function Um(a){a=a|0;return c[a+204>>2]|0}function Vm(a,b){a=a|0;b=b|0;c[a+204>>2]=b;return}function Wm(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2];c[a+20>>2]=c[b+16>>2];c[a+24>>2]=c[b+20>>2];c[a+28>>2]=c[b+24>>2];c[a+32>>2]=c[b+28>>2];c[a+36>>2]=c[b+32>>2];c[a+40>>2]=c[b+36>>2];c[a+44>>2]=c[b+40>>2];c[a+48>>2]=c[b+44>>2];c[a+52>>2]=c[b+48>>2];c[a+56>>2]=c[b+52>>2];c[a+60>>2]=c[b+56>>2];c[a+64>>2]=c[b+60>>2];i=d;return}function Xm(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function Ym(a,b){a=a|0;b=+b;g[a+252>>2]=b;return}function Zm(a,b){a=a|0;b=+b;g[a+248>>2]=b;return}function _m(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+8>>2]&511](a);i=b;return}function $m(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(75)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}tx(d,a);c[d>>2]=11032;c[d+52>>2]=0;i=b;return d|0}function an(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function bn(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function cn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function dn(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(75)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}tx(d,a);c[d>>2]=11136;c[d+52>>2]=2;i=b;return d|0}function en(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function fn(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function gn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function hn(){var a=0,b=0,d=0,e=0;a=i;e=fF(64)|0;a:do if(!e){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();e=fF(64)|0;if(e)break a}e=Ab(4)|0;c[e>>2]=20472;yb(e|0,20520,265)}while(0);b=e+48|0;d=e;do d=d+16|0;while((d|0)!=(b|0));i=a;return e|0}function jn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=fF(64)|0;a:do if(!e){while(1){e=c[5158]|0;c[5158]=e+0;if(!e)break;sc[e&3]();e=fF(64)|0;if(e)break a}g=Ab(4)|0;c[g>>2]=20472;yb(g|0,20520,265)}while(0);f=e+48|0;g=e;do g=g+16|0;while((g|0)!=(f|0));co(e,a);c[f+0>>2]=c[b+0>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];i=d;return e|0}function kn(a){a=a|0;var b=0;b=i;ln(a);i=b;return}function ln(a){a=a|0;var b=0;b=i;g[a>>2]=1.0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;g[a+20>>2]=1.0;c[a+24>>2]=0;c[a+28>>2]=0;c[a+32>>2]=0;c[a+36>>2]=0;g[a+40>>2]=1.0;g[a+44>>2]=0.0;c[a+48>>2]=0;c[a+52>>2]=0;c[a+56>>2]=0;c[a+60>>2]=0;i=b;return}function mn(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+48>>2]=c[b+0>>2];c[a+52>>2]=c[b+4>>2];c[a+56>>2]=c[b+8>>2];c[a+60>>2]=c[b+12>>2];i=d;return}function nn(a,b){a=a|0;b=b|0;var c=0;c=i;co(a,b);i=c;return}function on(a){a=a|0;return a+48|0}function pn(b){b=b|0;var d=0;d=i;i=i+16|0;if((a[48]|0)==0?(Ya(48)|0)!=0:0)bb(48);Hc(b,d);c[8]=c[d+0>>2];c[9]=c[d+4>>2];c[10]=c[d+8>>2];c[11]=c[d+12>>2];i=d;return 32}function qn(a){a=a|0;return a|0}function rn(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function sn(a){a=a|0;return c[a+24>>2]|0}function tn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+32>>2]&127](a,b,d,e);i=f;return}function un(a){a=a|0;var b=0;b=i;a=c[a+68>>2]|0;a=Pb[c[(c[a>>2]|0)+36>>2]&127](a)|0;i=b;return a|0}function vn(a){a=a|0;return a+28|0}function wn(a,b){a=a|0;b=b|0;var d=0;d=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,1,-1);i=d;return}function xn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,-1);i=e;return}function yn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+36>>2]&127](a,b,d,e);i=f;return}function zn(a){a=a|0;return c[a+68>>2]|0}function An(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;var g=0;g=i;Ou(a,b,c,d,e,f);i=g;return}function Bn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;Qu(a,b,c,d);i=e;return}function Cn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Dn(a){a=a|0;return+(+g[a>>2])}function En(a){a=a|0;return+(+g[a+4>>2])}function Fn(a){a=a|0;return+(+g[a+8>>2])}function Gn(a){a=a|0;return+(+g[a+12>>2])}function Hn(a,b){a=a|0;b=+b;g[a>>2]=b;return}function In(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Jn(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Kn(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Ln(a){a=a|0;var b=0;b=i;if(a)gF(a);i=b;return}function Mn(a){a=a|0;var b=0,d=0;b=i;c[5004]=(c[5004]|0)+1;d=fF(75)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}tx(d,a);i=b;return d|0}function Nn(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+24>>2]&127](a,b);i=d;return}function On(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;Ub[c[(c[a>>2]|0)+32>>2]&15](a,b,d);i=e;return}function Pn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Qn(){var a=0,b=0,d=0;a=i;b=fF(4)|0;if(b){d=b;c[d>>2]=192;i=a;return d|0}while(1){b=c[5158]|0;c[5158]=b+0;if(!b){b=4;break}sc[b&3]();d=fF(4)|0;if(d){b=5;break}}if((b|0)==4){d=Ab(4)|0;c[d>>2]=20472;yb(d|0,20520,265)}else if((b|0)==5){c[d>>2]=192;i=a;return d|0}return 0}function Rn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Sn(b,c){b=b|0;c=c|0;a[b+21>>0]=c&1;return}function Tn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}Lb[c[(c[a>>2]|0)+4>>2]&511](a);i=b;return}function Un(a){a=a|0;return}function Vn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Wn(a){a=a|0;return}function Xn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return}function Yn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;return}function Zn(a){a=a|0;return}function _n(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function $n(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;a=i;f=c[b>>2]|0;e=c[d>>2]|0;if((c[f+236>>2]|0)!=4)f=0;if((c[e+236>>2]|0)!=4)e=0;if(f)rc[c[(c[f>>2]|0)+28>>2]&127](f,d,b);if(!e){i=a;return 0}rc[c[(c[e>>2]|0)+28>>2]&127](e,b,d);i=a;return 0}function ao(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;a=i;g=c[b>>2]|0;f=c[d>>2]|0;if((c[g+236>>2]|0)!=4)g=0;if((c[f+236>>2]|0)!=4)f=0;if(g)vc[c[(c[g>>2]|0)+32>>2]&127](g,d,e,b);if(!f){i=a;return 0}vc[c[(c[f>>2]|0)+32>>2]&127](f,b,e,d);i=a;return 0}function bo(a,b,c){a=a|0;b=b|0;c=c|0;return}function co(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;f=+g[b>>2];d=+g[b+4>>2];j=+g[b+8>>2];h=+g[b+12>>2];e=f*(2.0/(f*f+d*d+j*j+h*h));c=d*(2.0/(f*f+d*d+j*j+h*h));i=j*(2.0/(f*f+d*d+j*j+h*h));g[a>>2]=1.0-(d*c+j*i);g[a+4>>2]=f*c-h*i;g[a+8>>2]=f*i+h*c;g[a+12>>2]=0.0;g[a+16>>2]=f*c+h*i;g[a+20>>2]=1.0-(f*e+j*i);g[a+24>>2]=d*i-h*e;g[a+28>>2]=0.0;g[a+32>>2]=f*i-h*c;g[a+36>>2]=d*i+h*e;g[a+40>>2]=1.0-(f*e+d*c);g[a+44>>2]=0.0;return}function eo(a){a=a|0;return}function fo(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function go(a,c){a=a|0;c=c|0;var d=0;d=i;if(!((b[c+4>>1]&b[a+14>>1])<<16>>16)){c=0;i=d;return c|0}c=(b[a+12>>1]&b[c+6>>1])<<16>>16!=0;i=d;return c|0}function ho(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0;g[a+4>>2]=+g[b+24>>2];e=c[b>>2]|0;c[a+8>>2]=e;if(d){c[a+52>>2]=c[b+8>>2];c[a+56>>2]=c[b+12>>2];c[a+60>>2]=c[b+16>>2];c[a+64>>2]=c[b+20>>2]}else{k=+g[b+8>>2];j=+g[b+12>>2];i=+g[b+16>>2];h=+g[e+20>>2]*k+ +g[e+24>>2]*j+ +g[e+28>>2]*i;f=+g[e+36>>2]*k+ +g[e+40>>2]*j+ +g[e+44>>2]*i;g[a+52>>2]=+g[e+4>>2]*k+ +g[e+8>>2]*j+ +g[e+12>>2]*i;g[a+56>>2]=h;g[a+60>>2]=f;g[a+64>>2]=0.0}k=+g[b+24>>2];g[a+68>>2]=(1.0-k)*+g[a+20>>2]+ +g[a+36>>2]*k;g[a+72>>2]=(1.0-k)*+g[a+24>>2]+k*+g[a+40>>2];g[a+76>>2]=(1.0-k)*+g[a+28>>2]+k*+g[a+44>>2];return+(+g[b+24>>2])}function io(a,b,c,d,e,f,h,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0;n=i;m=a;do m=m+16|0;while((m|0)!=(a+48|0));g[a>>2]=+g[b>>2];g[a+4>>2]=+g[c>>2];g[a+8>>2]=+g[d>>2];g[a+12>>2]=0.0;g[a+16>>2]=+g[e>>2];g[a+20>>2]=+g[f>>2];g[a+24>>2]=+g[h>>2];g[a+28>>2]=0.0;g[a+32>>2]=+g[j>>2];g[a+36>>2]=+g[k>>2];g[a+40>>2]=+g[l>>2];g[a+44>>2]=0.0;i=n;return}function jo(a){a=a|0;return}function ko(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function lo(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0;d=i;i=i+176|0;io(d+128|0,a+68|0,a+84|0,a+100|0,a+72|0,a+88|0,a+104|0,a+76|0,a+92|0,a+108|0);l=-+g[a+116>>2];k=-+g[a+120>>2];h=-+g[a+124>>2];e=+g[d+128>>2]*l+ +g[d+132>>2]*k+ +g[d+136>>2]*h;f=+g[d+144>>2]*l+ +g[d+148>>2]*k+ +g[d+152>>2]*h;h=+g[d+160>>2]*l+ +g[d+164>>2]*k+ +g[d+168>>2]*h;j=d;do j=j+16|0;while((j|0)!=(d+48|0));c[d+0>>2]=c[d+128>>2];c[d+4>>2]=c[d+132>>2];c[d+8>>2]=c[d+136>>2];c[d+12>>2]=c[d+140>>2];c[d+16>>2]=c[d+144>>2];c[d+20>>2]=c[d+148>>2];c[d+24>>2]=c[d+152>>2];c[d+28>>2]=c[d+156>>2];c[d+32>>2]=c[d+160>>2];c[d+36>>2]=c[d+164>>2];c[d+40>>2]=c[d+168>>2];c[d+44>>2]=c[d+172>>2];g[d+48>>2]=e;g[d+52>>2]=f;g[d+56>>2]=h;g[d+60>>2]=0.0;no(d+64|0,d,a+4|0);c[b+0>>2]=c[d+64>>2];c[b+4>>2]=c[d+68>>2];c[b+8>>2]=c[d+72>>2];c[b+12>>2]=c[d+76>>2];c[b+16>>2]=c[d+80>>2];c[b+20>>2]=c[d+84>>2];c[b+24>>2]=c[d+88>>2];c[b+28>>2]=c[d+92>>2];c[b+32>>2]=c[d+96>>2];c[b+36>>2]=c[d+100>>2];c[b+40>>2]=c[d+104>>2];c[b+44>>2]=c[d+108>>2];c[b+48>>2]=c[d+112>>2];c[b+52>>2]=c[d+116>>2];c[b+56>>2]=c[d+120>>2];c[b+60>>2]=c[d+124>>2];i=d;return}function mo(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+64|0;no(d,b,a+68|0);c[a+4>>2]=c[d+0>>2];c[a+8>>2]=c[d+4>>2];c[a+12>>2]=c[d+8>>2];c[a+16>>2]=c[d+12>>2];c[a+20>>2]=c[d+16>>2];c[a+24>>2]=c[d+20>>2];c[a+28>>2]=c[d+24>>2];c[a+32>>2]=c[d+28>>2];c[a+36>>2]=c[d+32>>2];c[a+40>>2]=c[d+36>>2];c[a+44>>2]=c[d+40>>2];c[a+48>>2]=c[d+44>>2];c[a+52>>2]=c[d+48>>2];c[a+56>>2]=c[d+52>>2];c[a+60>>2]=c[d+56>>2];c[a+64>>2]=c[d+60>>2];i=d;return}function no(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;e=i;i=i+96|0;s=+g[d>>2];h=+g[b>>2];r=+g[d+16>>2];j=+g[b+4>>2];q=+g[d+32>>2];l=+g[b+8>>2];g[e+80>>2]=s*h+r*j+q*l;p=+g[d+4>>2];o=+g[d+20>>2];n=+g[d+36>>2];g[e+76>>2]=p*h+o*j+n*l;m=+g[d+8>>2];f=+g[d+24>>2];k=+g[d+40>>2];g[e+72>>2]=m*h+f*j+k*l;l=+g[b+16>>2];j=+g[b+20>>2];h=+g[b+24>>2];g[e+68>>2]=s*l+r*j+q*h;g[e+64>>2]=p*l+o*j+n*h;g[e+60>>2]=m*l+f*j+k*h;h=+g[b+32>>2];j=+g[b+36>>2];l=+g[b+40>>2];g[e+56>>2]=s*h+r*j+q*l;g[e+52>>2]=p*h+o*j+n*l;g[e+48>>2]=m*h+f*j+k*l;io(e,e+80|0,e+76|0,e+72|0,e+68|0,e+64|0,e+60|0,e+56|0,e+52|0,e+48|0);l=+g[d+48>>2];k=+g[d+52>>2];j=+g[d+56>>2];f=l*+g[b>>2]+k*+g[b+4>>2]+j*+g[b+8>>2]+ +g[b+48>>2];h=l*+g[b+16>>2]+k*+g[b+20>>2]+j*+g[b+24>>2]+ +g[b+52>>2];j=l*+g[b+32>>2]+k*+g[b+36>>2]+j*+g[b+40>>2]+ +g[b+56>>2];b=a;do b=b+16|0;while((b|0)!=(a+48|0));c[a+0>>2]=c[e+0>>2];c[a+4>>2]=c[e+4>>2];c[a+8>>2]=c[e+8>>2];c[a+12>>2]=c[e+12>>2];c[a+16>>2]=c[e+16>>2];c[a+20>>2]=c[e+20>>2];c[a+24>>2]=c[e+24>>2];c[a+28>>2]=c[e+28>>2];c[a+32>>2]=c[e+32>>2];c[a+36>>2]=c[e+36>>2];c[a+40>>2]=c[e+40>>2];c[a+44>>2]=c[e+44>>2];g[a+48>>2]=f;g[a+52>>2]=h;g[a+56>>2]=j;g[a+60>>2]=0.0;i=e;return}function oo(a){a=a|0;return}function po(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function qo(a,c){a=a|0;c=c|0;var d=0;d=i;if(!((b[c+4>>1]&b[a+10>>1])<<16>>16)){c=0;i=d;return c|0}c=(b[a+8>>1]&b[c+6>>1])<<16>>16!=0;i=d;return c|0}function ro(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;e=i;g[a+4>>2]=+g[b+40>>2];f=c[b>>2]|0;c[a+76>>2]=f;if(d){c[a+44>>2]=c[b+8>>2];c[a+48>>2]=c[b+12>>2];c[a+52>>2]=c[b+16>>2];c[a+56>>2]=c[b+20>>2];d=a+60|0;a=b+24|0;c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];c[d+8>>2]=c[a+8>>2];c[d+12>>2]=c[a+12>>2];h=+g[b+40>>2];i=e;return+h}else{m=+g[b+8>>2];l=+g[b+12>>2];k=+g[b+16>>2];j=+g[f+20>>2]*m+ +g[f+24>>2]*l+ +g[f+28>>2]*k;h=+g[f+36>>2]*m+ +g[f+40>>2]*l+ +g[f+44>>2]*k;g[a+44>>2]=+g[f+4>>2]*m+ +g[f+8>>2]*l+ +g[f+12>>2]*k;g[a+48>>2]=j;g[a+52>>2]=h;g[a+56>>2]=0.0;d=a+60|0;a=b+24|0;c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];c[d+8>>2]=c[a+8>>2];c[d+12>>2]=c[a+12>>2];h=+g[b+40>>2];i=e;return+h}return 0.0}function so(a){a=a|0;return}function to(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function uo(a,c){a=a|0;c=c|0;var d=0;d=i;if(!((b[c+4>>1]&b[a+6>>1])<<16>>16)){c=0;i=d;return c|0}c=(b[a+4>>1]&b[c+6>>1])<<16>>16!=0;i=d;return c|0}function vo(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0.0,k=0;k=i;j=+Ta(960,a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0);i=k;return+j}function wo(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0,l=0;e=i;if(a[b+527>>0]|0){c[d>>2]=0;c[d+4>>2]=0;i=e;return}c[d>>2]=3;c[d+4>>2]=3;l=c[b+28>>2]|0;k=c[b+32>>2]|0;xo(b,l+4|0,k+4|0,l+264|0,k+264|0);if(((a[b+526>>0]|0)!=0?(f=c[d>>2]|0,c[d>>2]=f+1,h=c[d+4>>2]|0,c[d+4>>2]=h+ -1,j=+g[b+456>>2],+g[b+444>>2]<j):0)?+g[b+448>>2]<j:0){c[d>>2]=f+2;c[d+4>>2]=h+ -2}if(!(a[b+525>>0]|0)){i=e;return}c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1;i=e;return}function xo(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,U=0.0,W=0.0,X=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0;j=i;i=i+272|0;g[b+504>>2]=0.0;g[b+500>>2]=0.0;a[b+525>>0]=0;a[b+526>>0]=0;if((a[b+552>>0]|0)!=0?(a[b+527>>0]|0)==0:0){ia=+g[b+556>>2];ba=+g[b+560>>2];ja=+g[b+564>>2];ca=+g[b+568>>2];ea=ia*(2.0/(ia*ia+ba*ba+ja*ja+ca*ca));la=ba*(2.0/(ia*ia+ba*ba+ja*ja+ca*ca));fa=ja*(2.0/(ia*ia+ba*ba+ja*ja+ca*ca));no(j+208|0,d,b+300|0);no(j+144|0,e,b+364|0);H=+g[j+144>>2];J=+g[j+148>>2];m=+g[j+152>>2];W=(1.0-(ba*la+ja*fa))*H+(ia*la+ca*fa)*J+(ia*fa-ca*la)*m;X=(ia*la-ca*fa)*H+(1.0-(ia*ea+ja*fa))*J+(ba*fa+ca*ea)*m;Z=(ia*fa+ca*la)*H+(ba*fa-ca*ea)*J+(1.0-(ia*ea+ba*la))*m;K=+g[j+160>>2];L=+g[j+164>>2];l=+g[j+168>>2];_=(1.0-(ba*la+ja*fa))*K+(ia*la+ca*fa)*L+(ia*fa-ca*la)*l;$=(ia*la-ca*fa)*K+(1.0-(ia*ea+ja*fa))*L+(ba*fa+ca*ea)*l;aa=(ia*fa+ca*la)*K+(ba*fa-ca*ea)*L+(1.0-(ia*ea+ba*la))*l;M=+g[j+176>>2];N=+g[j+180>>2];O=+g[j+184>>2];ha=(1.0-(ba*la+ja*fa))*M+(ia*la+ca*fa)*N+(ia*fa-ca*la)*O;ja=(ia*la-ca*fa)*M+(1.0-(ia*ea+ja*fa))*N+(ba*fa+ca*ea)*O;la=(ia*fa+ca*la)*M+(ba*fa-ca*ea)*N+(1.0-(ia*ea+ba*la))*O;ba=+g[j+208>>2];ea=+g[j+224>>2];ia=+g[j+240>>2];ca=+g[j+212>>2];fa=+g[j+228>>2];ka=+g[j+244>>2];da=+g[j+216>>2];ga=+g[j+232>>2];ma=+g[j+248>>2];R=-+g[j+256>>2];U=-+g[j+260>>2];k=-+g[j+264>>2];m=H*0.0+J*0.0+m*0.0+ +g[j+192>>2]+(Z*(da*R+ga*U+ma*k)+(W*(ba*R+ea*U+ia*k)+X*(ca*R+fa*U+ka*k)));l=K*0.0+L*0.0+l*0.0+ +g[j+196>>2]+(aa*(da*R+ga*U+ma*k)+(_*(ba*R+ea*U+ia*k)+$*(ca*R+fa*U+ka*k)));k=M*0.0+N*0.0+O*0.0+ +g[j+200>>2]+(la*(da*R+ga*U+ma*k)+(ha*(ba*R+ea*U+ia*k)+ja*(ca*R+fa*U+ka*k)));g[j+80>>2]=W*ba+X*ca+Z*da;g[j+84>>2]=W*ea+X*fa+Z*ga;g[j+88>>2]=W*ia+X*ka+Z*ma;g[j+92>>2]=0.0;g[j+96>>2]=_*ba+$*ca+aa*da;g[j+100>>2]=_*ea+$*fa+aa*ga;g[j+104>>2]=_*ia+$*ka+aa*ma;g[j+108>>2]=0.0;g[j+112>>2]=ha*ba+ja*ca+la*da;g[j+116>>2]=ha*ea+ja*fa+la*ga;g[j+120>>2]=ha*ia+ja*ka+la*ma;g[j+124>>2]=0.0;g[j+128>>2]=m;g[j+132>>2]=l;g[j+136>>2]=k;g[j+140>>2]=0.0;Hc(j+80|0,j+64|0);k=+g[j+64>>2];l=+g[j+68>>2];m=+g[j+72>>2];if(+P(+(k*k+l*l+m*m))<1.1920928955078125e-7){i=j;return}g[b+472>>2]=0.0;ma=1.0/+Q(+(k*k+l*l+m*m));g[b+460>>2]=k*ma;g[b+464>>2]=l*ma;g[b+468>>2]=m*ma;ma=+g[j+76>>2];ma=ma<-1.0?-1.0:ma;ma=+V(+(ma>1.0?1.0:ma))*2.0;g[b+504>>2]=ma;if(+P(+ma)<1.1920928955078125e-7){i=j;return}a[b+526>>0]=1;i=j;return}Hc(d,j+48|0);Hc(b+300|0,j+32|0);B=+g[j+60>>2];x=+g[j+32>>2];D=+g[j+48>>2];z=+g[j+44>>2];A=+g[j+52>>2];v=+g[j+40>>2];y=+g[j+56>>2];C=+g[j+36>>2];Hc(e,j+16|0);Hc(b+364|0,j);p=+g[j+28>>2];l=+g[j>>2];r=+g[j+16>>2];n=+g[j+12>>2];o=+g[j+20>>2];s=+g[j+8>>2];m=+g[j+24>>2];q=+g[j+4>>2];k=-(p*l+r*n+o*s-m*q);w=-(l*m+(n*o+p*q)-r*s);u=-(p*s+n*m+r*q-l*o);M=(B*x+D*z+A*v-y*C)*(p*n-l*r-o*q-s*m)+(B*z-x*D-A*C-v*y)*k+(B*v+z*y+D*C-x*A)*w-(x*y+(z*A+B*C)-D*v)*u;O=(B*x+D*z+A*v-y*C)*u+((x*y+(z*A+B*C)-D*v)*(p*n-l*r-o*q-s*m)+(B*z-x*D-A*C-v*y)*w)-(B*v+z*y+D*C-x*A)*k;H=(x*y+(z*A+B*C)-D*v)*k+((B*v+z*y+D*C-x*A)*(p*n-l*r-o*q-s*m)+(B*z-x*D-A*C-v*y)*u)-(B*x+D*z+A*v-y*C)*w;R=(B*z-x*D-A*C-v*y)*(p*n-l*r-o*q-s*m)-(B*x+D*z+A*v-y*C)*k-(x*y+(z*A+B*C)-D*v)*w-(B*v+z*y+D*C-x*A)*u;E=-M-O*0.0-H*0.0;G=(H+R*0.0-M*0.0)*-H+(R*(R+O*0.0-H*0.0)+E*-M)-(R*0.0+M*0.0-O)*-O;L=(R*0.0+M*0.0-O)*-M+(R*(H+R*0.0-M*0.0)+E*-O)-(R+O*0.0-H*0.0)*-H;E=(R+O*0.0-H*0.0)*-O+(R*(R*0.0+M*0.0-O)+E*-H)-(H+R*0.0-M*0.0)*-M;K=1.0/+Q(+(E*E+(G*G+L*L)));if(K*E*0.0+(K*L*0.0+K*G)<-.9999998807907104)if(+P(0.0)>.7071067690849304){F=0.0;E=t;N=t;G=0.0}else{F=-0.0;E=1.0;N=0.0;G=0.0}else{ma=+Q(+((K*E*0.0+(K*L*0.0+K*G)+1.0)*2.0));F=(K*E*0.0-K*L*0.0)*(1.0/ma);E=(K*G*0.0-K*E)*(1.0/ma);N=(K*L-K*G*0.0)*(1.0/ma);G=ma*.5}U=1.0/+Q(+(G*G+(N*N+(E*E+F*F))));K=F*U;L=E*U;N=N*U;U=G*U;ma=1.0/+Q(+((R*U-M*-K-O*-L-H*-N)*(R*U-M*-K-O*-L-H*-N)+((O*-K+(H*U+R*-N)-M*-L)*(O*-K+(H*U+R*-N)-M*-L)+((H*-L+(M*U+R*-K)-O*-N)*(H*-L+(M*U+R*-K)-O*-N)+(M*-N+(O*U+R*-L)-H*-K)*(M*-N+(O*U+R*-L)-H*-K)))));G=ma*(H*-L+(M*U+R*-K)-O*-N);F=ma*(M*-N+(O*U+R*-L)-H*-K);E=ma*(O*-K+(H*U+R*-N)-M*-L);H=ma*(R*U-M*-K-O*-L-H*-N);M=+g[b+444>>2];O=+g[b+456>>2];if(M>=O?(J=+g[b+448>>2],J>=O):0){O=U<-1.0?-1.0:U;O=+V(+(O>1.0?1.0:O))*2.0;if(O>1.1920928955078125e-7){U=1.0/+Q(+(N*N+(K*K+L*L)));if(+P(+(L*U))>1.1920928955078125e-7){R=+Q(+((N*U*N*U/(L*U*L*U)+1.0)/(1.0/(J*J)+N*U*N*U/(L*U*L*U)/(M*M))));L=L*U;N=N*U;K=K*U}else{R=M;L=L*U;N=N*U;K=K*U}}else{R=0.0;L=0.0;N=0.0;K=0.0}W=+g[b+428>>2];U=R*W;if(O>U){a[b+526>>0]=1;if(O<R&W<.9999998807907104)R=(O-U)/(R-U);else R=1.0;g[b+528>>2]=R;g[b+504>>2]=O-U;if(+P(+L)>1.1920928955078125e-7){J=+P(+(L*-N/L*(J/M)));if(!(N<-0.0))J=-J;N=1.0/+Q(+(L*L+K*K+J*J));K=K*N;L=L*N;N=-(J*N)}la=-K;ka=-L;ja=-N;ha=(l*m+(n*o+p*q)-r*s)*ja+(p*n-l*r-o*q-s*m)*la-(p*s+n*m+r*q-l*o)*ka;ma=(p*n-l*r-o*q-s*m)*ka+(p*s+n*m+r*q-l*o)*la-(p*l+r*n+o*s-m*q)*ja;ia=(p*n-l*r-o*q-s*m)*ja+(p*l+r*n+o*s-m*q)*ka-(l*m+(n*o+p*q)-r*s)*la;ja=-((p*l+r*n+o*s-m*q)*la)-(l*m+(n*o+p*q)-r*s)*ka-(p*s+n*m+r*q-l*o)*ja;ka=ma*u+((p*n-l*r-o*q-s*m)*ha+ja*k)-ia*w;la=ia*k+((p*n-l*r-o*q-s*m)*ma+ja*w)-ha*u;ma=ha*w+((p*n-l*r-o*q-s*m)*ia+ja*u)-ma*k;g[b+460>>2]=ka;g[b+464>>2]=la;g[b+468>>2]=ma;g[b+472>>2]=0.0;c[b+536>>2]=0;c[b+540>>2]=0;c[b+544>>2]=0;c[b+548>>2]=0;g[b+492>>2]=1.0/(ka*(+g[f>>2]*ka+ +g[f+16>>2]*la+ +g[f+32>>2]*ma)+la*(ka*+g[f+4>>2]+la*+g[f+20>>2]+ma*+g[f+36>>2])+ma*(ka*+g[f+8>>2]+la*+g[f+24>>2]+ma*+g[f+40>>2])+(ka*(ka*+g[h>>2]+la*+g[h+16>>2]+ma*+g[h+32>>2])+la*(ka*+g[h+4>>2]+la*+g[h+20>>2]+ma*+g[h+36>>2])+ma*(ka*+g[h+8>>2]+la*+g[h+24>>2]+ma*+g[h+40>>2])))}}else I=23;a:do if((I|0)==23){N=+g[b+300>>2];R=+g[b+316>>2];K=+g[b+332>>2];Z=+g[d>>2];X=+g[d+4>>2];W=+g[d+8>>2];M=+g[d+16>>2];L=+g[d+20>>2];J=+g[d+24>>2];O=+g[d+32>>2];U=+g[d+36>>2];_=+g[d+40>>2];da=+g[b+304>>2];ca=+g[b+320>>2];ba=+g[b+336>>2];ga=+g[b+308>>2];fa=+g[b+324>>2];ea=+g[b+340>>2];ja=+g[b+364>>2];la=+g[b+380>>2];ha=+g[b+396>>2];$=ja*+g[e>>2]+la*+g[e+4>>2]+ha*+g[e+8>>2];aa=ja*+g[e+16>>2]+la*+g[e+20>>2]+ha*+g[e+24>>2];ha=ja*+g[e+32>>2]+la*+g[e+36>>2]+ha*+g[e+40>>2];la=(N*Z+R*X+K*W)*$+(N*M+R*L+K*J)*aa+(N*O+R*U+K*_)*ha;ja=(Z*da+X*ca+W*ba)*$+(M*da+L*ca+J*ba)*aa+(O*da+U*ca+_*ba)*ha;ia=(Z*ga+X*fa+W*ea)*$+(M*ga+L*fa+J*ea)*aa+(O*ga+U*fa+_*ea)*ha;ka=+g[b+444>>2];ma=+g[b+456>>2];do if(ka<ma){ka=+g[b+448>>2];if(ka<ma){if(+P(+ja)<1.1920928955078125e-7?+P(+ia)<1.1920928955078125e-7:0)break a;a[b+526>>0]=1;g[b+460>>2]=-((N*O+R*U+K*_)*aa-(N*M+R*L+K*J)*ha);g[b+464>>2]=-((N*Z+R*X+K*W)*ha-(N*O+R*U+K*_)*$);g[b+468>>2]=-((N*M+R*L+K*J)*$-(N*Z+R*X+K*W)*aa);g[b+472>>2]=0.0;break a}if(+P(+la)<1.1920928955078125e-7?+P(+ia)<1.1920928955078125e-7:0)break;a[b+526>>0]=1;if(ka>=ma){ja=+Y(+ia,+la);if(ja>ka){la=+S(+ka);ja=0.0;ia=+T(+ka);break}if(ja<-ka){la=+S(+ka);ja=0.0;ia=-+T(+ka)}else ja=0.0}}else{if(+P(+la)<1.1920928955078125e-7?+P(+ja)<1.1920928955078125e-7:0)break;a[b+526>>0]=1;if(ka>=ma){ia=+Y(+ja,+la);if(ia>ka){la=+S(+ka);ja=+T(+ka);ia=0.0;break}if(ia<-ka){la=+S(+ka);ja=-+T(+ka);ia=0.0}else ia=0.0}}while(0);ka=(Z*ga+X*fa+W*ea)*ia+((Z*da+X*ca+W*ba)*ja+(N*Z+R*X+K*W)*la);Z=(M*ga+L*fa+J*ea)*ia+((M*da+L*ca+J*ba)*ja+(N*M+R*L+K*J)*la);ja=(O*ga+U*fa+_*ea)*ia+((O*da+U*ca+_*ba)*ja+(N*O+R*U+K*_)*la);la=1.0/+Q(+(ja*ja+(ka*ka+Z*Z)));g[b+472>>2]=0.0;ma=+Q(+((aa*la*ja-ha*la*Z)*(aa*la*ja-ha*la*Z)+(ha*la*ka-$*la*ja)*(ha*la*ka-$*la*ja)+($*la*Z-aa*la*ka)*($*la*Z-aa*la*ka)));g[b+504>>2]=ma;g[b+460>>2]=-((aa*la*ja-ha*la*Z)*(1.0/ma));g[b+464>>2]=-((ha*la*ka-$*la*ja)*(1.0/ma));g[b+468>>2]=-(($*la*Z-aa*la*ka)*(1.0/ma))}while(0);J=+g[b+452>>2];if(!(J>=0.0)){g[b+512>>2]=0.0;i=j;return}K=H<-1.0?-1.0:H;K=+V(+(K>1.0?1.0:K))*2.0;if(K>3.1415927410125732){H=H>1.0?-1.0:-H;H=+V(+(H>1.0?1.0:H))*2.0;G=-G;F=-F;E=-E}else H=K;g[b+512>>2]=H;if(H>1.1920928955078125e-7){ma=1.0/+Q(+(E*E+(F*F+G*G)));G=G*ma;F=F*ma;E=E*ma}L=+g[b+428>>2];if(H>J*L){a[b+525>>0]=1;K=H-J*L;if(H<J&L<.9999998807907104)H=K/(J-J*L);else H=1.0;g[b+532>>2]=H;g[b+508>>2]=K;la=-G;ka=-F;ja=-E;ha=(l*m+(n*o+p*q)-r*s)*ja+(p*n-l*r-o*q-s*m)*la-(p*s+n*m+r*q-l*o)*ka;ma=(p*n-l*r-o*q-s*m)*ka+(p*s+n*m+r*q-l*o)*la-(p*l+r*n+o*s-m*q)*ja;ia=(p*n-l*r-o*q-s*m)*ja+(p*l+r*n+o*s-m*q)*ka-(l*m+(n*o+p*q)-r*s)*la;ja=-((p*l+r*n+o*s-m*q)*la)-(l*m+(n*o+p*q)-r*s)*ka-(p*s+n*m+r*q-l*o)*ja;ka=ma*u+((p*n-l*r-o*q-s*m)*ha+ja*k)-ia*w;la=ia*k+((p*n-l*r-o*q-s*m)*ma+ja*w)-ha*u;ma=ha*w+((p*n-l*r-o*q-s*m)*ia+ja*u)-ma*k;g[b+476>>2]=ka;g[b+480>>2]=la;g[b+484>>2]=ma;g[b+488>>2]=0.0;g[b+496>>2]=1.0/(ka*(+g[f>>2]*ka+ +g[f+16>>2]*la+ +g[f+32>>2]*ma)+la*(ka*+g[f+4>>2]+la*+g[f+20>>2]+ma*+g[f+36>>2])+ma*(ka*+g[f+8>>2]+la*+g[f+24>>2]+ma*+g[f+40>>2])+(ka*(ka*+g[h>>2]+la*+g[h+16>>2]+ma*+g[h+32>>2])+la*(ka*+g[h+4>>2]+la*+g[h+20>>2]+ma*+g[h+36>>2])+ma*(ka*+g[h+8>>2]+la*+g[h+24>>2]+ma*+g[h+40>>2])))}if(!(a[b+526>>0]|0)){i=j;return}ha=-G;ma=-F;ja=-E;ga=(x*y+(z*A+B*C)-D*v)*ja+(B*z-x*D-A*C-v*y)*ha-(B*v+z*y+D*C-x*A)*ma;la=(B*z-x*D-A*C-v*y)*ma+(B*v+z*y+D*C-x*A)*ha-(B*x+D*z+A*v-y*C)*ja;ia=(B*z-x*D-A*C-v*y)*ja+(B*x+D*z+A*v-y*C)*ma-(x*y+(z*A+B*C)-D*v)*ha;ja=-((B*x+D*z+A*v-y*C)*ha)-(x*y+(z*A+B*C)-D*v)*ma-(B*v+z*y+D*C-x*A)*ja;ma=-(B*x+D*z+A*v-y*C);ha=-(x*y+(z*A+B*C)-D*v);ka=-(B*v+z*y+D*C-x*A);g[b+536>>2]=la*ka+((B*z-x*D-A*C-v*y)*ga+ja*ma)-ia*ha;g[b+540>>2]=ia*ma+((B*z-x*D-A*C-v*y)*la+ja*ha)-ga*ka;g[b+544>>2]=ga*ha+((B*z-x*D-A*C-v*y)*ia+ja*ka)-la*ma;g[b+548>>2]=0.0;i=j;return}function yo(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0;e=i;i=i+64|0;k=c[b+28>>2]|0;o=c[b+32>>2]|0;xo(b,k+4|0,o+4|0,k+264|0,o+264|0);l=c[d+8>>2]|0;g[l>>2]=1.0;m=c[d+24>>2]|0;g[l+(m+1<<2)>>2]=1.0;g[l+((m<<1)+2<<2)>>2]=1.0;q=+g[b+348>>2];w=+g[b+352>>2];t=+g[b+356>>2];u=+g[k+4>>2]*q+ +g[k+8>>2]*w+ +g[k+12>>2]*t;r=q*+g[k+20>>2]+w*+g[k+24>>2]+t*+g[k+28>>2];t=q*+g[k+36>>2]+w*+g[k+40>>2]+t*+g[k+44>>2];l=c[d+12>>2]|0;g[l>>2]=0.0;g[l+4>>2]=t;g[l+8>>2]=-r;g[l+12>>2]=0.0;g[l+(m<<2)>>2]=-t;g[l+(m+1<<2)>>2]=0.0;g[l+(m+2<<2)>>2]=u;g[l+(m+3<<2)>>2]=0.0;g[l+(m<<1<<2)>>2]=r;g[l+((m<<1|1)<<2)>>2]=-u;g[l+((m<<1)+2<<2)>>2]=0.0;g[l+((m<<1)+3<<2)>>2]=0.0;l=c[d+16>>2]|0;g[l>>2]=-1.0;g[l+(m+1<<2)>>2]=-1.0;g[l+((m<<1)+2<<2)>>2]=-1.0;w=+g[b+412>>2];q=+g[b+416>>2];p=+g[b+420>>2];v=+g[o+4>>2]*w+ +g[o+8>>2]*q+ +g[o+12>>2]*p;s=w*+g[o+20>>2]+q*+g[o+24>>2]+p*+g[o+28>>2];p=w*+g[o+36>>2]+q*+g[o+40>>2]+p*+g[o+44>>2];l=c[d+20>>2]|0;g[l>>2]=0.0;g[l+4>>2]=-p;g[l+8>>2]=s;g[l+12>>2]=0.0;g[l+(m<<2)>>2]=p;g[l+(m+1<<2)>>2]=0.0;g[l+(m+2<<2)>>2]=-v;g[l+(m+3<<2)>>2]=0.0;g[l+(m<<1<<2)>>2]=-s;g[l+((m<<1|1)<<2)>>2]=v;g[l+((m<<1)+2<<2)>>2]=0.0;g[l+((m<<1)+3<<2)>>2]=0.0;m=c[b+592>>2]|0;q=+g[((m&2|0)==0?d+4|0:b+600|0)>>2]*+g[d>>2];f=c[d+24>>2]|0;n=c[d+28>>2]|0;j=c[d+36>>2]|0;h=c[d+40>>2]|0;g[n>>2]=q*(v+ +g[o+52>>2]-u- +g[k+52>>2]);g[j>>2]=-3.4028234663852886e+38;g[h>>2]=3.4028234663852886e+38;if(!(m&1)){g[n+(f<<2)>>2]=q*(s+ +g[o+56>>2]-r- +g[k+56>>2]);g[j+(f<<2)>>2]=-3.4028234663852886e+38;g[h+(f<<2)>>2]=3.4028234663852886e+38;g[n+(f<<1<<2)>>2]=q*(p+ +g[o+60>>2]-t- +g[k+60>>2]);g[j+(f<<1<<2)>>2]=-3.4028234663852886e+38;g[h+(f<<1<<2)>>2]=3.4028234663852886e+38}else{x=c[d+32>>2]|0;g[x>>2]=+g[b+596>>2];g[n+(f<<2)>>2]=q*(s+ +g[o+56>>2]-r- +g[k+56>>2]);g[j+(f<<2)>>2]=-3.4028234663852886e+38;g[h+(f<<2)>>2]=3.4028234663852886e+38;g[x+(f<<2)>>2]=+g[b+596>>2];g[n+(f<<1<<2)>>2]=q*(p+ +g[o+60>>2]-t- +g[k+60>>2]);g[j+(f<<1<<2)>>2]=-3.4028234663852886e+38;g[h+(f<<1<<2)>>2]=3.4028234663852886e+38;g[x+(f<<1<<2)>>2]=+g[b+596>>2]}do if(!(a[b+526>>0]|0))f=f*3|0;else{o=c[d+12>>2]|0;w=+g[b+456>>2];if(+g[b+444>>2]<w?+g[b+448>>2]<w:0){no(e,k+4|0,b+300|0);q=+g[e+4>>2];r=+g[e+20>>2];s=+g[e+36>>2];u=+g[e+8>>2];v=+g[e+24>>2];w=+g[e+40>>2];m=c[d+24>>2]|0;x=m+(f*3|0)|0;g[o+(f*3<<2)>>2]=q;g[o+((f*3|0)+1<<2)>>2]=r;g[o+((f*3|0)+2<<2)>>2]=s;g[o+(x<<2)>>2]=u;g[o+(x+1<<2)>>2]=v;g[o+(x+2<<2)>>2]=w;g[l+(f*3<<2)>>2]=-q;g[l+((f*3|0)+1<<2)>>2]=-r;g[l+((f*3|0)+2<<2)>>2]=-s;g[l+(x<<2)>>2]=-u;g[l+(x+1<<2)>>2]=-v;g[l+(x+2<<2)>>2]=-w;t=+g[d>>2]*+g[b+436>>2];n=c[d+28>>2]|0;g[n+(f*3<<2)>>2]=t*(q*+g[b+460>>2]+r*+g[b+464>>2]+s*+g[b+468>>2]);g[n+(x<<2)>>2]=t*(u*+g[b+460>>2]+v*+g[b+464>>2]+w*+g[b+468>>2]);j=c[d+36>>2]|0;g[j+(f*3<<2)>>2]=-3.4028234663852886e+38;h=c[d+40>>2]|0;g[h+(f*3<<2)>>2]=3.4028234663852886e+38;g[j+(x<<2)>>2]=-3.4028234663852886e+38;g[h+(x<<2)>>2]=3.4028234663852886e+38;f=m+x|0;break}w=+g[b+436>>2];u=w*+g[b+460>>2]*w;v=w*w*+g[b+464>>2];w=w*w*+g[b+468>>2];g[o+(f*3<<2)>>2]=u;g[o+((f*3|0)+1<<2)>>2]=v;g[o+((f*3|0)+2<<2)>>2]=w;g[l+(f*3<<2)>>2]=-u;g[l+((f*3|0)+1<<2)>>2]=-v;g[l+((f*3|0)+2<<2)>>2]=-w;g[n+(f*3<<2)>>2]=+g[d>>2]*+g[b+432>>2]*+g[b+504>>2];if(m&4)g[(c[d+32>>2]|0)+(f*3<<2)>>2]=+g[b+604>>2];g[j+(f*3<<2)>>2]=0.0;g[h+(f*3<<2)>>2]=3.4028234663852886e+38;f=f+(f*3|0)|0}while(0);if(!(a[b+525>>0]|0)){i=e;return}w=+g[b+436>>2];u=w*+g[b+476>>2]*w;v=w*w*+g[b+480>>2];w=w*w*+g[b+484>>2];l=c[d+12>>2]|0;o=c[d+20>>2]|0;g[l+(f<<2)>>2]=u;m=f+1|0;g[l+(m<<2)>>2]=v;x=f+2|0;g[l+(x<<2)>>2]=w;g[o+(f<<2)>>2]=-u;g[o+(m<<2)>>2]=-v;g[o+(x<<2)>>2]=-w;g[n+(f<<2)>>2]=+g[d>>2]*+g[b+432>>2]*+g[b+508>>2];if(c[b+592>>2]&4)g[(c[d+32>>2]|0)+(f<<2)>>2]=+g[b+604>>2];if(!(+g[b+452>>2]>0.0)){g[j+(f<<2)>>2]=-3.4028234663852886e+38;g[h+(f<<2)>>2]=3.4028234663852886e+38;i=e;return}d=j+(f<<2)|0;if(+g[b+508>>2]>0.0){g[d>>2]=0.0;g[h+(f<<2)>>2]=3.4028234663852886e+38;i=e;return}else{g[d>>2]=-3.4028234663852886e+38;g[h+(f<<2)>>2]=0.0;i=e;return}}function zo(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0;d=i;i=i+176|0;if(!(a[b+527>>0]|0)){i=d;return}g[b+36>>2]=0.0;g[b+520>>2]=0.0;g[b+516>>2]=0.0;c[b+576>>2]=0;c[b+580>>2]=0;c[b+584>>2]=0;c[b+588>>2]=0;a:do if(!(a[b+524>>0]|0)){L=c[b+28>>2]|0;A=+g[b+348>>2];z=+g[b+352>>2];f=+g[b+356>>2];e=A*+g[L+20>>2]+z*+g[L+24>>2]+f*+g[L+28>>2]+ +g[L+56>>2];y=c[b+32>>2]|0;j=+g[b+412>>2];k=+g[y+4>>2];l=+g[b+416>>2];m=+g[y+8>>2];n=+g[b+420>>2];x=+g[y+12>>2];q=+g[y+20>>2];r=+g[y+24>>2];s=+g[y+28>>2];u=+g[y+36>>2];v=+g[y+40>>2];w=+g[y+44>>2];p=+g[y+52>>2];t=+g[y+56>>2];o=+g[y+60>>2];B=j*q+l*r+n*s+t-e;h=A*+g[L+4>>2]+z*+g[L+8>>2]+f*+g[L+12>>2]+ +g[L+52>>2];f=A*+g[L+36>>2]+z*+g[L+40>>2]+f*+g[L+44>>2]+ +g[L+60>>2];z=j*k+l*m+n*x+p-h;A=j*u+l*v+n*w+o-f;if(z*z+B*B+A*A>1.1920928955078125e-7){K=1.0/+Q(+(z*z+B*B+A*A));g[d+128>>2]=z*K;g[d+132>>2]=B*K;g[d+136>>2]=A*K;g[d+140>>2]=0.0;A=A*K;B=B*K;z=z*K}else{g[d+128>>2]=1.0;g[d+132>>2]=0.0;g[d+136>>2]=0.0;g[d+140>>2]=0.0;A=0.0;B=0.0;z=1.0}if(+P(+A)>.7071067690849304){H=A*A+B*B;I=1.0/+Q(+H);g[d+144>>2]=0.0;K=-(I*A);g[d+148>>2]=K;J=I*B;g[d+152>>2]=J;g[d+160>>2]=H*I;g[d+164>>2]=-(z*J);g[d+168>>2]=z*K}else{J=z*z+B*B;K=1.0/+Q(+J);I=-(B*K);g[d+144>>2]=I;H=K*z;g[d+148>>2]=H;g[d+152>>2]=0.0;g[d+160>>2]=-(A*H);g[d+164>>2]=A*I;g[d+168>>2]=J*K}F=k;B=q;C=u;D=m;E=r;I=v;A=x;K=s;J=w;z=p;H=t;G=o;L=0;while(1){M=c[b+28>>2]|0;g[d+80>>2]=+g[M+4>>2];g[d+84>>2]=+g[M+20>>2];g[d+88>>2]=+g[M+36>>2];g[d+92>>2]=0.0;g[d+96>>2]=+g[M+8>>2];g[d+100>>2]=+g[M+24>>2];g[d+104>>2]=+g[M+40>>2];g[d+108>>2]=0.0;g[d+112>>2]=+g[M+12>>2];g[d+116>>2]=+g[M+28>>2];g[d+120>>2]=+g[M+44>>2];g[d+124>>2]=0.0;g[d+32>>2]=F;g[d+36>>2]=B;g[d+40>>2]=C;g[d+44>>2]=0.0;g[d+48>>2]=D;g[d+52>>2]=E;g[d+56>>2]=I;g[d+60>>2]=0.0;g[d+64>>2]=A;g[d+68>>2]=K;g[d+72>>2]=J;g[d+76>>2]=0.0;J=e- +g[M+56>>2];K=f- +g[M+60>>2];g[d+16>>2]=h- +g[M+52>>2];g[d+20>>2]=J;g[d+24>>2]=K;g[d+28>>2]=0.0;g[d>>2]=j*k+l*m+n*x+p-z;g[d+4>>2]=j*q+l*r+n*s+t-H;g[d+8>>2]=j*u+l*v+n*w+o-G;g[d+12>>2]=0.0;Mo(b+(L*84|0)+48|0,d+80|0,d+32|0,d+16|0,d,d+128+(L<<4)|0,M+396|0,+g[M+344>>2],y+396|0,+g[y+344>>2]);L=L+1|0;if((L|0)==3){y=b+32|0;break a}y=c[b+32>>2]|0;F=+g[y+4>>2];B=+g[y+20>>2];C=+g[y+36>>2];D=+g[y+8>>2];E=+g[y+24>>2];I=+g[y+40>>2];A=+g[y+12>>2];K=+g[y+28>>2];J=+g[y+44>>2];z=+g[y+52>>2];H=+g[y+56>>2];G=+g[y+60>>2]}}else y=b+32|0;while(0);L=c[b+28>>2]|0;M=c[y>>2]|0;xo(b,L+4|0,M+4|0,L+264|0,M+264|0);i=d;return}function Ao(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0,L=0,M=0,N=0,O=0,P=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0;h=i;i=i+448|0;if(!(a[b+527>>0]|0)){i=h;return}O=c[b+28>>2]|0;I=+g[b+348>>2];E=+g[b+352>>2];F=+g[b+356>>2];C=+g[O+52>>2];D=I*+g[O+4>>2]+E*+g[O+8>>2]+F*+g[O+12>>2]+C;z=+g[O+56>>2];B=I*+g[O+20>>2]+E*+g[O+24>>2]+F*+g[O+28>>2]+z;p=+g[O+60>>2];F=I*+g[O+36>>2]+E*+g[O+40>>2]+F*+g[O+44>>2]+p;O=c[b+32>>2]|0;E=+g[b+412>>2];I=+g[b+416>>2];y=+g[b+420>>2];w=+g[O+52>>2];v=E*+g[O+4>>2]+I*+g[O+8>>2]+y*+g[O+12>>2]+w;G=+g[O+56>>2];H=E*+g[O+20>>2]+I*+g[O+24>>2]+y*+g[O+28>>2]+G;u=+g[O+60>>2];y=E*+g[O+36>>2]+I*+g[O+40>>2]+y*+g[O+44>>2]+u;if(!(a[b+524>>0]|0)){s=+g[d+192>>2]+ +g[d+80>>2];t=+g[d+196>>2]+ +g[d+84>>2];r=+g[d+200>>2]+ +g[d+88>>2];I=+g[e+192>>2]+ +g[e+80>>2];E=+g[e+196>>2]+ +g[e+84>>2];A=+g[e+200>>2]+ +g[e+88>>2];x=+g[d+176>>2]+ +g[d+64>>2]+((F-p)*t-(B-z)*r)-(+g[e+176>>2]+ +g[e+64>>2]+((y-u)*E-(H-G)*A));A=+g[d+180>>2]+ +g[d+68>>2]+((D-C)*r-(F-p)*s)-(+g[e+180>>2]+ +g[e+68>>2]+((v-w)*A-(y-u)*I));E=+g[d+184>>2]+ +g[d+72>>2]+((B-z)*s-(D-C)*t)-(+g[e+184>>2]+ +g[e+72>>2]+((H-G)*I-(v-w)*E));n=c[d+240>>2]|0;j=0;do{q=1.0/+g[b+(j*84|0)+128>>2];m=b+(j*84|0)+48|0;s=+g[m>>2];k=b+(j*84|0)+52|0;r=+g[k>>2];l=b+(j*84|0)+56|0;t=+g[l>>2];t=q*(((D-v)*s+(B-H)*r+(F-y)*t)*-.30000001192092896/f)-q*(x*s+A*r+E*t);g[b+36>>2]=+g[b+36>>2]+t;r=+g[l>>2];s=+g[k>>2];q=+g[m>>2];o=c[b+28>>2]|0;I=+g[o+344>>2];if(n){S=((F-p)*q-(D-C)*r)*+g[o+300>>2]+((B-z)*r-(F-p)*s)*+g[o+296>>2]+((D-C)*s-(B-z)*q)*+g[o+304>>2];P=((F-p)*q-(D-C)*r)*+g[o+284>>2]+((B-z)*r-(F-p)*s)*+g[o+280>>2]+((D-C)*s-(B-z)*q)*+g[o+288>>2];R=((F-p)*q-(D-C)*r)*+g[o+268>>2]+((B-z)*r-(F-p)*s)*+g[o+264>>2]+((D-C)*s-(B-z)*q)*+g[o+272>>2];U=t*s*I*+g[d+116>>2];T=t*r*I*+g[d+120>>2];g[d+64>>2]=t*q*I*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=U+ +g[d+68>>2];g[d+72>>2]=T+ +g[d+72>>2];P=P*t*+g[d+100>>2];I=S*t*+g[d+104>>2];g[d+80>>2]=R*t*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=P+ +g[d+84>>2];g[d+88>>2]=I+ +g[d+88>>2]}o=c[b+32>>2]|0;I=+g[o+344>>2];if(c[e+240>>2]|0){U=((y-u)*q-(v-w)*r)*+g[o+300>>2]+((H-G)*r-(y-u)*s)*+g[o+296>>2]+((v-w)*s-(H-G)*q)*+g[o+304>>2];T=((y-u)*q-(v-w)*r)*+g[o+284>>2]+((H-G)*r-(y-u)*s)*+g[o+280>>2]+((v-w)*s-(H-G)*q)*+g[o+288>>2];S=((y-u)*q-(v-w)*r)*+g[o+268>>2]+((H-G)*r-(y-u)*s)*+g[o+264>>2]+((v-w)*s-(H-G)*q)*+g[o+272>>2];P=I*+g[k>>2]*-t*+g[e+116>>2];R=I*+g[l>>2]*-t*+g[e+120>>2];g[e+64>>2]=+g[e+112>>2]*I*+g[m>>2]*-t+ +g[e+64>>2];g[e+68>>2]=P+ +g[e+68>>2];g[e+72>>2]=R+ +g[e+72>>2];T=T*+g[e+100>>2]*-t;U=U*+g[e+104>>2]*-t;g[e+80>>2]=S*+g[e+96>>2]*-t+ +g[e+80>>2];g[e+84>>2]=T+ +g[e+84>>2];g[e+88>>2]=U+ +g[e+88>>2]}j=j+1|0}while((j|0)!=3)}do if(!(a[b+552>>0]|0)){q=+g[b+440>>2];if(!(q>1.1920928955078125e-7)){n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0;break}z=+g[e+192>>2]+ +g[e+80>>2]-(+g[d+192>>2]+ +g[d+80>>2]);B=+g[e+196>>2]+ +g[e+84>>2]-(+g[d+196>>2]+ +g[d+84>>2]);A=+g[e+200>>2]+ +g[e+88>>2]-(+g[d+200>>2]+ +g[d+88>>2]);if(z*z+B*B+A*A>1.1920928955078125e-7){U=1.0/+Q(+(z*z+B*B+A*A));j=c[b+28>>2]|0;p=+g[j+264>>2];x=+g[j+280>>2];u=+g[j+296>>2];s=+g[j+268>>2];y=+g[j+284>>2];v=+g[j+300>>2];r=+g[j+272>>2];w=+g[j+288>>2];t=+g[j+304>>2];j=c[b+32>>2]|0;U=q*(1.0/(z*U*(z*U*p+B*U*x+A*U*u)+B*U*(z*U*s+B*U*y+A*U*v)+A*U*(z*U*r+B*U*w+A*U*t)+(z*U*(z*U*+g[j+264>>2]+B*U*+g[j+280>>2]+A*U*+g[j+296>>2])+B*U*(z*U*+g[j+268>>2]+B*U*+g[j+284>>2]+A*U*+g[j+300>>2])+A*U*(z*U*+g[j+272>>2]+B*U*+g[j+288>>2]+A*U*+g[j+304>>2]))));q=+Q(+(A*U*A*U+(z*U*z*U+B*U*B*U)));z=1.0/q*z*U;B=1.0/q*B*U;A=1.0/q*A*U;if(c[d+240>>2]|0){U=q*0.0*+g[d+116>>2];T=q*0.0*+g[d+120>>2];g[d+64>>2]=q*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=U+ +g[d+68>>2];g[d+72>>2]=T+ +g[d+72>>2];T=(B*y+z*x+A*w)*q*+g[d+100>>2];U=(B*v+z*u+A*t)*q*+g[d+104>>2];g[d+80>>2]=(B*s+z*p+A*r)*q*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=T+ +g[d+84>>2];g[d+88>>2]=U+ +g[d+88>>2];j=c[b+32>>2]|0}if(c[e+240>>2]|0){U=B*+g[j+300>>2]+z*+g[j+296>>2]+A*+g[j+304>>2];T=B*+g[j+284>>2]+z*+g[j+280>>2]+A*+g[j+288>>2];S=B*+g[j+268>>2]+z*+g[j+264>>2]+A*+g[j+272>>2];P=q*-0.0*+g[e+116>>2];R=q*-0.0*+g[e+120>>2];g[e+64>>2]=q*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=P+ +g[e+68>>2];g[e+72>>2]=R+ +g[e+72>>2];T=T*+g[e+100>>2]*-q;U=U*+g[e+104>>2]*-q;g[e+80>>2]=S*+g[e+96>>2]*-q+ +g[e+80>>2];g[e+84>>2]=T+ +g[e+84>>2];g[e+88>>2]=U+ +g[e+88>>2];n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}else{n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}}else{n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}}else{N=c[b+28>>2]|0;c[h+352>>2]=c[N+4>>2];c[h+356>>2]=c[N+8>>2];c[h+360>>2]=c[N+12>>2];c[h+364>>2]=c[N+16>>2];c[h+368>>2]=c[N+20>>2];c[h+372>>2]=c[N+24>>2];c[h+376>>2]=c[N+28>>2];c[h+380>>2]=c[N+32>>2];c[h+384>>2]=c[N+36>>2];c[h+388>>2]=c[N+40>>2];c[h+392>>2]=c[N+44>>2];c[h+396>>2]=c[N+48>>2];c[h+400>>2]=c[N+52>>2];c[h+404>>2]=c[N+56>>2];c[h+408>>2]=c[N+60>>2];c[h+412>>2]=c[N+64>>2];N=c[b+32>>2]|0;c[h+288>>2]=c[N+4>>2];c[h+292>>2]=c[N+8>>2];c[h+296>>2]=c[N+12>>2];c[h+300>>2]=c[N+16>>2];c[h+304>>2]=c[N+20>>2];c[h+308>>2]=c[N+24>>2];c[h+312>>2]=c[N+28>>2];c[h+316>>2]=c[N+32>>2];c[h+320>>2]=c[N+36>>2];c[h+324>>2]=c[N+40>>2];c[h+328>>2]=c[N+44>>2];c[h+332>>2]=c[N+48>>2];c[h+336>>2]=c[N+52>>2];c[h+340>>2]=c[N+56>>2];c[h+344>>2]=c[N+60>>2];c[h+348>>2]=c[N+64>>2];S=+g[d+196>>2]+ +g[d+84>>2];C=+g[d+200>>2]+ +g[d+88>>2];g[h+272>>2]=+g[d+192>>2]+ +g[d+80>>2];g[h+276>>2]=S;g[h+280>>2]=C;g[h+284>>2]=0.0;C=+g[e+196>>2]+ +g[e+84>>2];S=+g[e+200>>2]+ +g[e+88>>2];g[h+256>>2]=+g[e+192>>2]+ +g[e+80>>2];g[h+260>>2]=C;g[h+264>>2]=S;g[h+268>>2]=0.0;g[h+192>>2]=1.0;N=h+196|0;c[N+0>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;c[N+12>>2]=0;g[h+212>>2]=1.0;O=h+216|0;c[O+0>>2]=0;c[O+4>>2]=0;c[O+8>>2]=0;c[O+12>>2]=0;g[h+232>>2]=1.0;L=h+236|0;c[L+0>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;c[L+16>>2]=0;Bo(h+352|0,0.0,0.0,0.0,h+272|0,f,h+192|0);g[h+128>>2]=1.0;L=h+132|0;c[L+0>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;g[h+148>>2]=1.0;M=h+152|0;c[M+0>>2]=0;c[M+4>>2]=0;c[M+8>>2]=0;c[M+12>>2]=0;g[h+168>>2]=1.0;K=h+172|0;c[K+0>>2]=0;c[K+4>>2]=0;c[K+8>>2]=0;c[K+12>>2]=0;c[K+16>>2]=0;Bo(h+288|0,0.0,0.0,0.0,h+256|0,f,h+128|0);S=+g[b+556>>2];C=+g[b+560>>2];T=+g[b+564>>2];D=+g[b+568>>2];G=S*(2.0/(S*S+C*C+T*T+D*D));r=C*(2.0/(S*S+C*C+T*T+D*D));H=T*(2.0/(S*S+C*C+T*T+D*D));W=+g[b+364>>2];V=+g[b+368>>2];Z=+g[b+372>>2];w=(S*H-D*r)*Z+(V*(S*r+D*H)+W*(1.0-(C*r+T*H)));x=Z*(C*H+D*G)+(W*(S*r-D*H)+V*(1.0-(S*G+T*H)));y=W*(S*H+D*r)+V*(C*H-D*G)+Z*(1.0-(S*G+C*r));v=+g[b+380>>2];F=+g[b+384>>2];p=+g[b+388>>2];z=(1.0-(C*r+T*H))*v+(S*r+D*H)*F+(S*H-D*r)*p;A=(S*r-D*H)*v+(1.0-(S*G+T*H))*F+(C*H+D*G)*p;B=(S*H+D*r)*v+(C*H-D*G)*F+(1.0-(S*G+C*r))*p;P=+g[b+396>>2];q=+g[b+400>>2];s=+g[b+404>>2];R=(1.0-(C*r+T*H))*P+(S*r+D*H)*q+(S*H-D*r)*s;T=(S*r-D*H)*P+(1.0-(S*G+T*H))*q+(C*H+D*G)*s;r=(S*H+D*r)*P+(C*H-D*G)*q+(1.0-(S*G+C*r))*s;C=+g[b+300>>2];G=+g[b+316>>2];S=+g[b+332>>2];D=+g[b+304>>2];H=+g[b+320>>2];U=+g[b+336>>2];E=+g[b+308>>2];I=+g[b+324>>2];t=+g[b+340>>2];u=-+g[b+348>>2];aa=-+g[b+352>>2];Y=-+g[b+356>>2];Z=W*0.0+V*0.0+Z*0.0+ +g[b+412>>2]+(y*(E*u+I*aa+t*Y)+(w*(C*u+G*aa+S*Y)+x*(D*u+H*aa+U*Y)));p=v*0.0+F*0.0+p*0.0+ +g[b+416>>2]+(B*(E*u+I*aa+t*Y)+(z*(C*u+G*aa+S*Y)+A*(D*u+H*aa+U*Y)));Y=P*0.0+q*0.0+s*0.0+ +g[b+420>>2]+(r*(E*u+I*aa+t*Y)+(R*(C*u+G*aa+S*Y)+T*(D*u+H*aa+U*Y)));aa=+g[h+128>>2];u=+g[L>>2];s=+g[h+136>>2];q=+g[h+144>>2];P=+g[h+148>>2];F=+g[M>>2];v=+g[h+160>>2];V=+g[h+164>>2];W=+g[h+168>>2];X=s*Y+(aa*Z+u*p)+ +g[h+176>>2];_=Y*F+(q*Z+P*p)+ +g[h+180>>2];$=Z*v+p*V+Y*W+ +g[h+184>>2];g[h+64>>2]=(w*C+x*D+y*E)*aa+(z*C+A*D+B*E)*u+(R*C+T*D+r*E)*s;g[h+68>>2]=(w*G+x*H+y*I)*aa+(z*G+A*H+B*I)*u+(R*G+T*H+r*I)*s;g[h+72>>2]=(w*S+x*U+y*t)*aa+(z*S+A*U+B*t)*u+(R*S+T*U+r*t)*s;g[h+76>>2]=0.0;g[h+80>>2]=(w*C+x*D+y*E)*q+(z*C+A*D+B*E)*P+(R*C+T*D+r*E)*F;g[h+84>>2]=(w*G+x*H+y*I)*q+(z*G+A*H+B*I)*P+(R*G+T*H+r*I)*F;g[h+88>>2]=(w*S+x*U+y*t)*q+(z*S+A*U+B*t)*P+(R*S+T*U+r*t)*F;g[h+92>>2]=0.0;g[h+96>>2]=(w*C+x*D+y*E)*v+(z*C+A*D+B*E)*V+(R*C+T*D+r*E)*W;g[h+100>>2]=(w*G+x*H+y*I)*v+(z*G+A*H+B*I)*V+(R*G+T*H+r*I)*W;g[h+104>>2]=(w*S+x*U+y*t)*v+(z*S+A*U+B*t)*V+(R*S+T*U+r*t)*W;g[h+108>>2]=0.0;g[h+112>>2]=X;g[h+116>>2]=_;g[h+120>>2]=$;g[h+124>>2]=0.0;$=(R*C+T*D+r*E)*-Y+((w*C+x*D+y*E)*-Z+(z*C+A*D+B*E)*-p);_=(R*G+T*H+r*I)*-Y+((w*G+x*H+y*I)*-Z+(z*G+A*H+B*I)*-p);p=(R*S+T*U+r*t)*-Y+((w*S+x*U+y*t)*-Z+(z*S+A*U+B*t)*-p);Z=+g[h+192>>2];Y=+g[N>>2];X=+g[h+200>>2];W=+g[h+208>>2];V=+g[h+212>>2];v=+g[O>>2];F=+g[h+224>>2];P=+g[h+228>>2];q=+g[h+232>>2];s=$*Z+_*Y+p*X+ +g[h+240>>2];u=$*W+_*V+p*v+ +g[h+244>>2];p=$*F+_*P+p*q+ +g[h+248>>2];g[h>>2]=(w*C+x*D+y*E)*Z+(w*G+x*H+y*I)*Y+(w*S+x*U+y*t)*X;g[h+4>>2]=(z*C+A*D+B*E)*Z+(z*G+A*H+B*I)*Y+(z*S+A*U+B*t)*X;g[h+8>>2]=(R*C+T*D+r*E)*Z+(R*G+T*H+r*I)*Y+(R*S+T*U+r*t)*X;g[h+12>>2]=0.0;g[h+16>>2]=(w*C+x*D+y*E)*W+(w*G+x*H+y*I)*V+(w*S+x*U+y*t)*v;g[h+20>>2]=(z*C+A*D+B*E)*W+(z*G+A*H+B*I)*V+(z*S+A*U+B*t)*v;g[h+24>>2]=(R*C+T*D+r*E)*W+(R*G+T*H+r*I)*V+(R*S+T*U+r*t)*v;g[h+28>>2]=0.0;g[h+32>>2]=(w*C+x*D+y*E)*F+(w*G+x*H+y*I)*P+(w*S+x*U+y*t)*q;g[h+36>>2]=(z*C+A*D+B*E)*F+(z*G+A*H+B*I)*P+(z*S+A*U+B*t)*q;g[h+40>>2]=(R*C+T*D+r*E)*F+(R*G+T*H+r*I)*P+(R*S+T*U+r*t)*q;g[h+44>>2]=0.0;g[h+48>>2]=s;g[h+52>>2]=u;g[h+56>>2]=p;g[h+60>>2]=0.0;Lo(h+352|0,h+64|0,h+424|0,h+416|0);p=+g[h+416>>2];u=1.0/f*+g[h+424>>2]*p;s=1.0/f*p*+g[h+428>>2];p=1.0/f*p*+g[h+432>>2];Lo(h+288|0,h,h+424|0,h+416|0);q=+g[h+416>>2];u=u- +g[h+272>>2];s=s- +g[h+276>>2];p=p- +g[h+280>>2];t=1.0/f*+g[h+424>>2]*q- +g[h+256>>2];r=1.0/f*q*+g[h+428>>2]- +g[h+260>>2];q=1.0/f*q*+g[h+432>>2]- +g[h+264>>2];if(u*u+s*s+p*p>1.1920928955078125e-7){x=1.0/+Q(+(u*u+s*s+p*p));O=c[b+28>>2]|0;A=u*x*(u*x*+g[O+264>>2]+s*x*+g[O+280>>2]+p*x*+g[O+296>>2])+s*x*(u*x*+g[O+268>>2]+s*x*+g[O+284>>2]+p*x*+g[O+300>>2])+p*x*(u*x*+g[O+272>>2]+s*x*+g[O+288>>2]+p*x*+g[O+304>>2]);v=u*x;y=s*x;x=p*x}else{A=0.0;v=0.0;y=0.0;x=0.0}if(t*t+r*r+q*q>1.1920928955078125e-7){w=1.0/+Q(+(t*t+r*r+q*q));O=c[b+32>>2]|0;z=t*w*(t*w*+g[O+264>>2]+r*w*+g[O+280>>2]+q*w*+g[O+296>>2])+r*w*(t*w*+g[O+268>>2]+r*w*+g[O+284>>2]+q*w*+g[O+300>>2])+q*w*(t*w*+g[O+272>>2]+r*w*+g[O+288>>2]+q*w*+g[O+304>>2]);C=t*w;B=r*w;w=q*w}else{z=0.0;C=0.0;B=0.0;w=0.0}v=v*A+C*z;y=y*A+B*z;x=x*A+w*z;if(x*x+(v*v+y*y)>1.1920928955078125e-7){aa=1.0/+Q(+(x*x+(v*v+y*y)));k=c[b+28>>2]|0;w=v*aa*(v*aa*+g[k+264>>2]+y*aa*+g[k+280>>2]+x*aa*+g[k+296>>2])+y*aa*(v*aa*+g[k+268>>2]+y*aa*+g[k+284>>2]+x*aa*+g[k+300>>2])+x*aa*(v*aa*+g[k+272>>2]+y*aa*+g[k+288>>2]+x*aa*+g[k+304>>2]);j=c[b+32>>2]|0;v=v*aa*(v*aa*+g[j+264>>2]+y*aa*+g[j+280>>2]+x*aa*+g[j+296>>2])+y*aa*(v*aa*+g[j+268>>2]+y*aa*+g[j+284>>2]+x*aa*+g[j+300>>2])+x*aa*(v*aa*+g[j+272>>2]+y*aa*+g[j+288>>2]+x*aa*+g[j+304>>2]);t=1.0/((w+v)*(w+v))*(u*w-t*v);r=1.0/((w+v)*(w+v))*(s*w-r*v);p=1.0/((w+v)*(w+v))*(p*w-q*v);v=+g[b+572>>2];if(v>=0.0){if(a[b+553>>0]|0)v=v/w;s=+g[b+576>>2];q=+g[b+580>>2];u=+g[b+584>>2];w=+Q(+((t+s)*(t+s)+(r+q)*(r+q)+(p+u)*(p+u)));if(w>v){t=v*(t+s)*(1.0/w)-s;r=v*(r+q)*(1.0/w)-q;p=v*(p+u)*(1.0/w)-u}g[b+576>>2]=t+s;g[b+580>>2]=r+q;g[b+584>>2]=p+u}q=+Q(+(p*p+(r*r+t*t)));s=t*(1.0/q);r=r*(1.0/q);p=p*(1.0/q);if(c[d+240>>2]|0){aa=r*+g[k+300>>2]+s*+g[k+296>>2]+p*+g[k+304>>2];$=r*+g[k+284>>2]+s*+g[k+280>>2]+p*+g[k+288>>2];_=r*+g[k+268>>2]+s*+g[k+264>>2]+p*+g[k+272>>2];Y=q*0.0*+g[d+116>>2];Z=q*0.0*+g[d+120>>2];g[d+64>>2]=q*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=Y+ +g[d+68>>2];g[d+72>>2]=Z+ +g[d+72>>2];$=$*q*+g[d+100>>2];aa=aa*q*+g[d+104>>2];g[d+80>>2]=_*q*+g[d+96>>2]+ +g[d+80>>2];g[d+84>>2]=$+ +g[d+84>>2];g[d+88>>2]=aa+ +g[d+88>>2];j=c[b+32>>2]|0}if(c[e+240>>2]|0){aa=r*+g[j+300>>2]+s*+g[j+296>>2]+p*+g[j+304>>2];$=r*+g[j+284>>2]+s*+g[j+280>>2]+p*+g[j+288>>2];_=r*+g[j+268>>2]+s*+g[j+264>>2]+p*+g[j+272>>2];Y=q*-0.0*+g[e+116>>2];Z=q*-0.0*+g[e+120>>2];g[e+64>>2]=q*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Y+ +g[e+68>>2];g[e+72>>2]=Z+ +g[e+72>>2];$=$*+g[e+100>>2]*-q;aa=aa*+g[e+104>>2]*-q;g[e+80>>2]=_*+g[e+96>>2]*-q+ +g[e+80>>2];g[e+84>>2]=$+ +g[e+84>>2];g[e+88>>2]=aa+ +g[e+88>>2];n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}else{n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}}else{n=d+80|0;N=d+196|0;m=d+84|0;M=d+200|0;o=d+88|0;L=e+192|0;k=e+80|0;K=e+196|0;l=e+84|0;J=e+200|0;j=e+88|0;O=d+192|0}}while(0);p=+g[O>>2]+ +g[n>>2];q=+g[N>>2]+ +g[m>>2];r=+g[M>>2]+ +g[o>>2];s=+g[L>>2]+ +g[k>>2];t=+g[K>>2]+ +g[l>>2];u=+g[J>>2]+ +g[j>>2];if(a[b+526>>0]|0){z=+g[b+528>>2];w=z*+g[b+504>>2]*+g[b+432>>2]/f;x=+g[b+460>>2];y=+g[b+464>>2];v=+g[b+468>>2];if((s-p)*x+(t-q)*y+(u-r)*v>0.0)w=w+z*((s-p)*x+(t-q)*y+(u-r)*v)*+g[b+436>>2];_=+g[b+516>>2];Z=_+w*+g[b+492>>2];Z=Z>0.0?Z:0.0;g[b+516>>2]=Z;X=+g[b+536>>2];Y=+g[b+540>>2];$=+g[b+544>>2];aa=X*x*(Z-_)+y*(Z-_)*Y+v*(Z-_)*$;w=+Q(+((v*(Z-_)-$*aa)*(v*(Z-_)-$*aa)+((x*(Z-_)-X*aa)*(x*(Z-_)-X*aa)+(y*(Z-_)-Y*aa)*(y*(Z-_)-Y*aa))));x=1.0/w*(x*(Z-_)-X*aa);y=1.0/w*(y*(Z-_)-Y*aa);v=1.0/w*(v*(Z-_)-$*aa);J=c[b+28>>2]|0;if(c[d+240>>2]|0){aa=y*+g[J+300>>2]+x*+g[J+296>>2]+v*+g[J+304>>2];$=y*+g[J+284>>2]+x*+g[J+280>>2]+v*+g[J+288>>2];_=y*+g[J+268>>2]+x*+g[J+264>>2]+v*+g[J+272>>2];Y=w*0.0*+g[d+116>>2];Z=w*0.0*+g[d+120>>2];g[d+64>>2]=w*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=Y+ +g[d+68>>2];g[d+72>>2]=Z+ +g[d+72>>2];$=$*w*+g[d+100>>2];aa=aa*w*+g[d+104>>2];g[n>>2]=_*w*+g[d+96>>2]+ +g[n>>2];g[m>>2]=$+ +g[m>>2];g[o>>2]=aa+ +g[o>>2]}J=c[b+32>>2]|0;if(c[e+240>>2]|0){aa=y*+g[J+300>>2]+x*+g[J+296>>2]+v*+g[J+304>>2];$=y*+g[J+284>>2]+x*+g[J+280>>2]+v*+g[J+288>>2];_=y*+g[J+268>>2]+x*+g[J+264>>2]+v*+g[J+272>>2];Y=w*-0.0*+g[e+116>>2];Z=w*-0.0*+g[e+120>>2];g[e+64>>2]=w*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Y+ +g[e+68>>2];g[e+72>>2]=Z+ +g[e+72>>2];$=$*+g[e+100>>2]*-w;aa=aa*+g[e+104>>2]*-w;g[k>>2]=_*+g[e+96>>2]*-w+ +g[k>>2];g[l>>2]=$+ +g[l>>2];g[j>>2]=aa+ +g[j>>2]}}if(!(a[b+525>>0]|0)){i=h;return}x=+g[b+532>>2];y=x*+g[b+508>>2]*+g[b+432>>2]/f;v=+g[b+476>>2];w=+g[b+480>>2];f=+g[b+484>>2];if((s-p)*v+(t-q)*w+(u-r)*f>0.0)y=y+x*((s-p)*v+(t-q)*w+(u-r)*f)*+g[b+436>>2];p=+g[b+520>>2];q=p+y*+g[b+496>>2];q=q>0.0?q:0.0;g[b+520>>2]=q;J=c[b+28>>2]|0;if(c[d+240>>2]|0){aa=w*+g[J+300>>2]+v*+g[J+296>>2]+f*+g[J+304>>2];$=w*+g[J+284>>2]+v*+g[J+280>>2]+f*+g[J+288>>2];f=w*+g[J+268>>2]+v*+g[J+264>>2]+f*+g[J+272>>2];w=(q-p)*0.0*+g[d+116>>2];v=(q-p)*0.0*+g[d+120>>2];g[d+64>>2]=(q-p)*0.0*+g[d+112>>2]+ +g[d+64>>2];g[d+68>>2]=w+ +g[d+68>>2];g[d+72>>2]=v+ +g[d+72>>2];v=$*(q-p)*+g[d+100>>2];w=aa*(q-p)*+g[d+104>>2];g[n>>2]=f*(q-p)*+g[d+96>>2]+ +g[n>>2];g[m>>2]=v+ +g[m>>2];g[o>>2]=w+ +g[o>>2];w=+g[b+480>>2];v=+g[b+476>>2];f=+g[b+484>>2]}b=c[b+32>>2]|0;if(!(c[e+240>>2]|0)){i=h;return}aa=w*+g[b+300>>2]+v*+g[b+296>>2]+f*+g[b+304>>2];$=w*+g[b+284>>2]+v*+g[b+280>>2]+f*+g[b+288>>2];_=w*+g[b+268>>2]+v*+g[b+264>>2]+f*+g[b+272>>2];Y=(q-p)*-0.0*+g[e+116>>2];Z=(q-p)*-0.0*+g[e+120>>2];g[e+64>>2]=(q-p)*-0.0*+g[e+112>>2]+ +g[e+64>>2];g[e+68>>2]=Y+ +g[e+68>>2];g[e+72>>2]=Z+ +g[e+72>>2];$=$*+g[e+100>>2]*-(q-p);aa=aa*+g[e+104>>2]*-(q-p);g[k>>2]=_*+g[e+96>>2]*-(q-p)+ +g[k>>2];g[l>>2]=$+ +g[l>>2];g[j>>2]=aa+ +g[j>>2];i=h;return}function Bo(a,b,c,d,e,f,h){a=a|0;b=+b;c=+c;d=+d;e=e|0;f=+f;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;j=i;i=i+16|0;c=c*f+ +g[a+52>>2];d=d*f+ +g[a+56>>2];g[h+48>>2]=b*f+ +g[a+48>>2];g[h+52>>2]=c;g[h+56>>2]=d;g[h+60>>2]=0.0;d=+g[e>>2];b=+g[e+4>>2];c=+g[e+8>>2];k=+Q(+(d*d+b*b+c*c));if(k*f>.7853981852531433)k=.7853981852531433/f;if(k<.0010000000474974513)l=f*.5-k*f*f*f*.02083333395421505*k;else l=+T(+(k*.5*f))/k;o=l*d;b=l*b;c=l*c;q=+S(+(k*f*.5));Hc(a,j);n=+g[j>>2];p=+g[j+12>>2];f=+g[j+8>>2];l=+g[j+4>>2];r=1.0/+Q(+((q*p-o*n-b*l-c*f)*(q*p-o*n-b*l-c*f)+((c*p+q*f+o*l-b*n)*(c*p+q*f+o*l-b*n)+((q*n+o*p+b*f-c*l)*(q*n+o*p+b*f-c*l)+(c*n+(b*p+q*l)-o*f)*(c*n+(b*p+q*l)-o*f)))));d=(q*n+o*p+b*f-c*l)*r;k=r*(c*n+(b*p+q*l)-o*f);m=r*(c*p+q*f+o*l-b*n);f=r*(q*p-o*n-b*l-c*f);c=d*(2.0/(f*f+(m*m+(d*d+k*k))));l=2.0/(f*f+(m*m+(d*d+k*k)))*k;b=2.0/(f*f+(m*m+(d*d+k*k)))*m;g[h>>2]=1.0-(m*b+k*l);g[h+4>>2]=d*l-f*b;g[h+8>>2]=d*b+f*l;g[h+12>>2]=0.0;g[h+16>>2]=f*b+d*l;g[h+20>>2]=1.0-(d*c+m*b);g[h+24>>2]=k*b-f*c;g[h+28>>2]=0.0;g[h+32>>2]=d*b-f*l;g[h+36>>2]=f*c+k*b;g[h+40>>2]=1.0-(d*c+k*l);g[h+44>>2]=0.0;i=j;return}function Co(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0;e=+S(+c);c=+T(+c);f=+g[b+444>>2];if(+P(+e)>1.1920928955078125e-7){j=+g[b+448>>2];h=c*c;i=e*e;f=+Q(+((c*c/(e*e)+1.0)/(1.0/(j*j)+c*c/(e*e)/(f*f))))}else{h=c*c;i=e*e}k=f*.5;j=+T(+k)/+Q(+(i+0.0+h));k=+S(+k);l=k*d+e*j*0.0-c*j*-0.0;i=k*0.0-c*j*d-j*0.0*0.0;f=k*0.0+j*0.0*0.0-e*j*d;h=-(j*0.0*d)-e*j*0.0-c*j*-0.0;g[a>>2]=c*j*i+(k*l+h*-(j*0.0))-f*-(e*j);g[a+4>>2]=f*-(j*0.0)+(k*i+h*-(e*j))-c*j*l;g[a+8>>2]=l*-(e*j)+(k*f+c*j*h)-i*-(j*0.0);g[a+12>>2]=0.0;return}function Do(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,u=0.0;d=i;c[a+556>>2]=c[b+0>>2];c[a+560>>2]=c[b+4>>2];c[a+564>>2]=c[b+8>>2];c[a+568>>2]=c[b+12>>2];p=+g[a+568>>2];r=+g[a+560>>2];q=+g[a+564>>2];j=+g[a+556>>2];e=-j-r*0.0-q*0.0;h=(q+p*0.0-j*0.0)*-q+(p*(p+r*0.0-q*0.0)+e*-j)-(p*0.0+j*0.0-r)*-r;k=(p*0.0+j*0.0-r)*-j+(p*(q+p*0.0-j*0.0)+e*-r)-(p+r*0.0-q*0.0)*-q;e=(p+r*0.0-q*0.0)*-r+(p*(p*0.0+j*0.0-r)+e*-q)-(q+p*0.0-j*0.0)*-j;if(e*0.0+(k*0.0+h)<-.9999998807907104)if(+P(0.0)>.7071067690849304){f=0.0;e=t;k=t;h=0.0}else{f=-0.0;e=1.0;k=0.0;h=0.0}else{s=+Q(+((e*0.0+(k*0.0+h)+1.0)*2.0));f=(e*0.0-k*0.0)*(1.0/s);e=(h*0.0-e)*(1.0/s);k=(k-h*0.0)*(1.0/s);h=s*.5}s=1.0/+Q(+(h*h+(k*k+(e*e+f*f))));l=f*s;m=e*s;o=k*s;k=h*s;s=1.0/+Q(+((k*p-j*-l-r*-m-q*-o)*(k*p-j*-l-r*-m-q*-o)+((p*-o+k*q+r*-l-j*-m)*(p*-o+k*q+r*-l-j*-m)+((k*j+p*-l+q*-m-r*-o)*(k*j+p*-l+q*-m-r*-o)+(j*-o+(p*-m+k*r)-q*-l)*(j*-o+(p*-m+k*r)-q*-l)))));h=(k*j+p*-l+q*-m-r*-o)*s;e=s*(j*-o+(p*-m+k*r)-q*-l);f=s*(p*-o+k*q+r*-l-j*-m);j=s*(k*p-j*-l-r*-m-q*-o);s=+g[a+444>>2];if(s>=.05000000074505806?(n=+g[a+448>>2],n>=.05000000074505806):0){q=k<-1.0?-1.0:k;q=+V(+(q>1.0?1.0:q))*2.0;if(q>1.1920928955078125e-7){p=1.0/+Q(+(o*o+(l*l+m*m)));if(+P(+(m*p))>1.1920928955078125e-7){s=+Q(+((o*p*o*p/(m*p*m*p)+1.0)/(1.0/(n*n)+o*p*o*p/(m*p*m*p)/(s*s))));r=l*p;n=m*p;p=o*p}else{r=l*p;n=m*p;p=o*p}}else{s=0.0;r=0.0;n=0.0;p=0.0}if(+P(+q)>1.1920928955078125e-7){if(!(q>s)){k=-s;if(q<k)q=k}else q=s;k=q*.5;o=+T(+k)/+Q(+(p*p+(n*n+r*r)));k=+S(+k);l=r*o;m=n*o;o=p*o}}p=+g[a+452>>2];if(p>=.05000000074505806){r=j<-1.0?-1.0:j;r=+V(+(r>1.0?1.0:r))*2.0;if(r>3.1415927410125732){r=j>1.0?-1.0:-j;r=+V(+(r>1.0?1.0:r))*2.0;s=-h;n=-e;q=-f}else{s=h;n=e;q=f}if(r>1.1920928955078125e-7){u=1.0/+Q(+(q*q+(n*n+s*s)));s=s*u;n=n*u;q=q*u}if(+P(+r)>1.1920928955078125e-7){if(!(r>p))if(r<-p)p=-p;else p=r;j=p*.5;e=+T(+j)/+Q(+(q*q+(n*n+s*s)));h=s*e;j=+S(+j);f=q*e;e=n*e}}g[a+556>>2]=m*f+(l*j+k*h)-o*e;g[a+560>>2]=o*h+(m*j+k*e)-l*f;g[a+564>>2]=o*j+k*f+l*e-m*h;g[a+568>>2]=k*j-l*h-m*e-o*f;i=d;return}function Eo(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;if((b|0)==4|(b|0)==3)if(e>>>0<3){g[a+596>>2]=d;c[a+592>>2]=c[a+592>>2]|1;i=f;return}else{g[a+604>>2]=d;c[a+592>>2]=c[a+592>>2]|4;i=f;return}else if((b|0)==2|(b|0)==1)if(e>>>0<3){g[a+600>>2]=d;c[a+592>>2]=c[a+592>>2]|2;i=f;return}else{g[a+432>>2]=d;i=f;return}else{i=f;return}}function Fo(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=i;do if((b|0)==2|(b|0)==1){if(c>>>0<3){e=+g[a+600>>2];break}if((c+ -3|0)>>>0<3)e=+g[a+432>>2];else e=0.0}else if((b|0)==4|(b|0)==3){if(c>>>0<3){e=+g[a+596>>2];break}if((c+ -3|0)>>>0<3)e=+g[a+604>>2];else e=0.0}else e=0.0;while(0);i=d;return+e}function Go(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[a+300>>2]=c[b+0>>2];c[a+304>>2]=c[b+4>>2];c[a+308>>2]=c[b+8>>2];c[a+312>>2]=c[b+12>>2];c[a+316>>2]=c[b+16>>2];c[a+320>>2]=c[b+20>>2];c[a+324>>2]=c[b+24>>2];c[a+328>>2]=c[b+28>>2];c[a+332>>2]=c[b+32>>2];c[a+336>>2]=c[b+36>>2];c[a+340>>2]=c[b+40>>2];c[a+344>>2]=c[b+44>>2];c[a+348>>2]=c[b+48>>2];c[a+352>>2]=c[b+52>>2];c[a+356>>2]=c[b+56>>2];c[a+360>>2]=c[b+60>>2];c[a+364>>2]=c[d+0>>2];c[a+368>>2]=c[d+4>>2];c[a+372>>2]=c[d+8>>2];c[a+376>>2]=c[d+12>>2];c[a+380>>2]=c[d+16>>2];c[a+384>>2]=c[d+20>>2];c[a+388>>2]=c[d+24>>2];c[a+392>>2]=c[d+28>>2];c[a+396>>2]=c[d+32>>2];c[a+400>>2]=c[d+36>>2];c[a+404>>2]=c[d+40>>2];c[a+408>>2]=c[d+44>>2];c[a+412>>2]=c[d+48>>2];c[a+416>>2]=c[d+52>>2];c[a+420>>2]=c[d+56>>2];c[a+424>>2]=c[d+60>>2];Lb[c[(c[a>>2]|0)+8>>2]&511](a);i=e;return}function Ho(a){a=a|0;return}function Io(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Jo(a){a=a|0;return 212}function Ko(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Zr(a,b,c)|0;g[b+52>>2]=+g[a+300>>2];g[b+56>>2]=+g[a+304>>2];g[b+60>>2]=+g[a+308>>2];g[b+64>>2]=+g[a+312>>2];g[b+68>>2]=+g[a+316>>2];g[b+72>>2]=+g[a+320>>2];g[b+76>>2]=+g[a+324>>2];g[b+80>>2]=+g[a+328>>2];g[b+84>>2]=+g[a+332>>2];g[b+88>>2]=+g[a+336>>2];g[b+92>>2]=+g[a+340>>2];g[b+96>>2]=+g[a+344>>2];g[b+100>>2]=+g[a+348>>2];g[b+104>>2]=+g[a+352>>2];g[b+108>>2]=+g[a+356>>2];g[b+112>>2]=+g[a+360>>2];g[b+116>>2]=+g[a+364>>2];g[b+120>>2]=+g[a+368>>2];g[b+124>>2]=+g[a+372>>2];g[b+128>>2]=+g[a+376>>2];g[b+132>>2]=+g[a+380>>2];g[b+136>>2]=+g[a+384>>2];g[b+140>>2]=+g[a+388>>2];g[b+144>>2]=+g[a+392>>2];g[b+148>>2]=+g[a+396>>2];g[b+152>>2]=+g[a+400>>2];g[b+156>>2]=+g[a+404>>2];g[b+160>>2]=+g[a+408>>2];g[b+164>>2]=+g[a+412>>2];g[b+168>>2]=+g[a+416>>2];g[b+172>>2]=+g[a+420>>2];g[b+176>>2]=+g[a+424>>2];g[b+180>>2]=+g[a+444>>2];g[b+184>>2]=+g[a+448>>2];g[b+188>>2]=+g[a+452>>2];g[b+192>>2]=+g[a+428>>2];g[b+196>>2]=+g[a+432>>2];g[b+200>>2]=+g[a+436>>2];g[b+204>>2]=+g[a+440>>2];i=d;return 1352}function Lo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0;e=i;i=i+64|0;f=+g[a+20>>2];t=+g[a+40>>2];o=+g[a+24>>2];r=+g[a+36>>2];s=+g[a+32>>2];h=+g[a+16>>2];l=+g[a>>2];j=+g[a+4>>2];p=+g[a+8>>2];m=1.0/((f*t-o*r)*l+j*(o*s-t*h)+(r*h-f*s)*p);z=+g[b>>2];y=+g[b+4>>2];x=+g[b+8>>2];w=+g[b+16>>2];v=+g[b+20>>2];u=+g[b+24>>2];q=+g[b+32>>2];n=+g[b+36>>2];k=+g[b+40>>2];g[e+16>>2]=(f*t-o*r)*m*z+(o*s-t*h)*m*y+(r*h-f*s)*m*x;g[e+20>>2]=z*m*(r*p-t*j)+y*m*(t*l-s*p)+m*(s*j-r*l)*x;g[e+24>>2]=z*m*(o*j-f*p)+y*m*(h*p-o*l)+m*(f*l-h*j)*x;g[e+28>>2]=0.0;g[e+32>>2]=(f*t-o*r)*m*w+(o*s-t*h)*m*v+(r*h-f*s)*m*u;g[e+36>>2]=m*(r*p-t*j)*w+m*(t*l-s*p)*v+m*(s*j-r*l)*u;g[e+40>>2]=m*(o*j-f*p)*w+m*(h*p-o*l)*v+m*(f*l-h*j)*u;g[e+44>>2]=0.0;g[e+48>>2]=(f*t-o*r)*m*q+(o*s-t*h)*m*n+(r*h-f*s)*m*k;g[e+52>>2]=m*(r*p-t*j)*q+m*(t*l-s*p)*n+m*(s*j-r*l)*k;g[e+56>>2]=m*(o*j-f*p)*q+m*(h*p-o*l)*n+m*(f*l-h*j)*k;g[e+60>>2]=0.0;Hc(e+16|0,e);k=+g[e>>2];j=+g[e+4>>2];h=+g[e+8>>2];l=+g[e+12>>2];f=1.0/+Q(+(k*k+j*j+h*h+l*l));g[e>>2]=k*f;g[e+4>>2]=j*f;g[e+8>>2]=h*f;g[e+12>>2]=l*f;l=l*f<-1.0?-1.0:l*f;g[d>>2]=+V(+(l>1.0?1.0:l))*2.0;g[c>>2]=k*f;g[c+4>>2]=j*f;g[c+8>>2]=h*f;g[c+12>>2]=0.0;if(k*f*k*f+j*f*j*f+h*f*h*f<1.4210854715202004e-14){g[c>>2]=1.0;g[c+4>>2]=0.0;g[c+8>>2]=0.0;g[c+12>>2]=0.0;i=e;return}else{z=1.0/+Q(+(k*f*k*f+j*f*j*f+h*f*h*f));g[c>>2]=k*f*z;g[c+4>>2]=z*j*f;g[c+8>>2]=z*h*f;i=e;return}}function Mo(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=+k;l=l|0;m=+m;var n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0;n=i;c[a+0>>2]=c[h+0>>2];c[a+4>>2]=c[h+4>>2];c[a+8>>2]=c[h+8>>2];c[a+12>>2]=c[h+12>>2];u=+g[e+4>>2];t=+g[a+8>>2];r=+g[e+8>>2];x=+g[a+4>>2];o=+g[a>>2];z=+g[e>>2];y=(u*t-r*x)*+g[b>>2]+ +g[b+4>>2]*(r*o-t*z)+(x*z-u*o)*+g[b+8>>2];w=(u*t-r*x)*+g[b+16>>2]+(r*o-t*z)*+g[b+20>>2]+(x*z-u*o)*+g[b+24>>2];u=(u*t-r*x)*+g[b+32>>2]+(r*o-t*z)*+g[b+36>>2]+(x*z-u*o)*+g[b+40>>2];g[a+16>>2]=y;g[a+20>>2]=w;g[a+24>>2]=u;g[a+28>>2]=0.0;z=+g[f+4>>2];r=+g[f+8>>2];v=+g[f>>2];s=+g[d>>2]*(z*-t-r*-x)+ +g[d+4>>2]*(r*-o-v*-t)+(v*-x-z*-o)*+g[d+8>>2];q=(z*-t-r*-x)*+g[d+16>>2]+(r*-o-v*-t)*+g[d+20>>2]+(v*-x-z*-o)*+g[d+24>>2];o=(z*-t-r*-x)*+g[d+32>>2]+(r*-o-v*-t)*+g[d+36>>2]+(v*-x-z*-o)*+g[d+40>>2];g[a+32>>2]=s;g[a+36>>2]=q;g[a+40>>2]=o;g[a+44>>2]=0.0;z=+g[j>>2]*y;x=+g[j+4>>2]*w;v=+g[j+8>>2]*u;g[a+48>>2]=z;g[a+52>>2]=x;g[a+56>>2]=v;g[a+60>>2]=0.0;t=+g[l>>2]*s;r=+g[l+4>>2]*q;p=+g[l+8>>2]*o;g[a+64>>2]=t;g[a+68>>2]=r;g[a+72>>2]=p;g[a+76>>2]=0.0;g[a+80>>2]=z*y+x*w+v*u+k+m+(t*s+r*q+p*o);i=n;return}function No(a){a=a|0;var b=0;b=i;Oo(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Oo(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;c[b>>2]=1392;if((a[b+272>>0]|0)!=0?(g=c[b+204>>2]|0,Lb[c[c[g>>2]>>2]&511](g),g=c[b+204>>2]|0,(g|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[g+ -4>>2]|0)}g=c[b+196>>2]|0;if((g|0)!=0?(Lb[c[c[g>>2]>>2]&511](g),f=c[b+196>>2]|0,(f|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}if((a[b+273>>0]|0)!=0?(e=c[b+200>>2]|0,Lb[c[c[e>>2]>>2]&511](e),e=c[b+200>>2]|0,(e|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+316>>2]|0;if(e){if(a[b+320>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+316>>2]=0}a[b+320>>0]=1;c[b+316>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;e=c[b+288>>2]|0;if(e){if(a[b+292>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+288>>2]=0}a[b+292>>0]=1;c[b+288>>2]=0;c[b+280>>2]=0;c[b+284>>2]=0;e=c[b+240>>2]|0;if(e){if(a[b+244>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=0;c[b+232>>2]=0;c[b+236>>2]=0;e=c[b+220>>2]|0;if(e){if(a[b+224>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+220>>2]=0}a[b+224>>0]=1;c[b+220>>2]=0;c[b+212>>2]=0;c[b+216>>2]=0;e=c[b+188>>2]|0;if(!e){a[b+192>>0]=1;c[b+188>>2]=0;c[b+180>>2]=0;g=b+184|0;c[g>>2]=0;Bu(b);i=d;return}if(a[b+192>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+188>>2]=0;a[b+192>>0]=1;c[b+188>>2]=0;c[b+180>>2]=0;g=b+184|0;c[g>>2]=0;Bu(b);i=d;return}function Po(a,b){a=a|0;b=+b;var d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0;d=i;i=i+32|0;h=c[a+8>>2]|0;if((h|0)<=0){i=d;return}e=0;do{f=c[(c[a+16>>2]|0)+(e<<2)>>2]|0;if((!((f|0)==0?1:(c[f+236>>2]&2|0)==0)?(c[f+216>>2]|0)!=2:0)?!((c[f+204>>2]&2|0)==0|b!=0.0^1):0){h=c[f+480>>2]|0;if(!h)h=f+4|0;else{Nb[c[(c[h>>2]|0)+8>>2]&127](h,f+4|0);h=f+4|0}k=(+g[f+56>>2]- +g[f+120>>2])*(1.0/b);l=1.0/b*(+g[f+60>>2]- +g[f+124>>2]);g[f+312>>2]=(+g[f+52>>2]- +g[f+116>>2])*(1.0/b);g[f+316>>2]=k;g[f+320>>2]=l;g[f+324>>2]=0.0;Lo(f+68|0,h,d+8|0,d);l=+g[d>>2];k=1.0/b*l*+g[d+12>>2];j=1.0/b*l*+g[d+16>>2];g[f+328>>2]=1.0/b*+g[d+8>>2]*l;g[f+332>>2]=k;g[f+336>>2]=j;g[f+340>>2]=0.0;c[f+132>>2]=c[f+312>>2];c[f+136>>2]=c[f+316>>2];c[f+140>>2]=c[f+320>>2];c[f+144>>2]=c[f+324>>2];c[f+148>>2]=c[f+328>>2];c[f+152>>2]=c[f+332>>2];c[f+156>>2]=c[f+336>>2];c[f+160>>2]=c[f+340>>2];c[f+68>>2]=c[h+0>>2];c[f+72>>2]=c[h+4>>2];c[f+76>>2]=c[h+8>>2];c[f+80>>2]=c[h+12>>2];c[f+84>>2]=c[f+20>>2];c[f+88>>2]=c[f+24>>2];c[f+92>>2]=c[f+28>>2];c[f+96>>2]=c[f+32>>2];c[f+100>>2]=c[f+36>>2];c[f+104>>2]=c[f+40>>2];c[f+108>>2]=c[f+44>>2];c[f+112>>2]=c[f+48>>2];c[f+116>>2]=c[f+52>>2];c[f+120>>2]=c[f+56>>2];c[f+124>>2]=c[f+60>>2];c[f+128>>2]=c[f+64>>2];h=c[a+8>>2]|0}e=e+1|0}while((e|0)<(h|0));i=d;return}function Qo(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0,C=0,D=0,E=0,F=0,G=0.0,H=0.0,I=0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,P=0.0,Q=0.0,R=0.0,U=0.0,V=0.0,W=0.0;d=i;i=i+1024|0;yE(1576);Uu(b);a:do if((Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)!=0?(I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0,((Pb[c[(c[I>>2]|0)+48>>2]&127](I)|0)&6144|0)!=0):0){e=d+988|0;o=d+896|0;n=d+832|0;q=d+912|0;p=d+848|0;s=d+928|0;r=d+864|0;u=d+720|0;t=d+656|0;w=d+736|0;v=d+672|0;y=d+752|0;x=d+688|0;f=d+336|0;h=d+352|0;j=d+368|0;k=d+112|0;l=d+128|0;m=d+144|0;B=Pb[c[(c[b>>2]|0)+104>>2]&127](b)|0;b:while(1){z=B+ -1|0;if((B|0)<=0)break a;B=gc[c[(c[b>>2]|0)+108>>2]&31](b,z)|0;I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=(Pb[c[(c[I>>2]|0)+48>>2]&127](I)|0)>>>11;C=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;C=(Pb[c[(c[C>>2]|0)+48>>2]&127](C)|0)>>>12;A=+g[B+40>>2];if(A<=0.0){B=z;continue}switch(c[B+4>>2]|0){case 3:{g[d+944>>2]=1.0;c[d+948>>2]=0;c[d+952>>2]=0;c[d+956>>2]=0;c[d+960>>2]=0;g[d+964>>2]=1.0;c[d+968>>2]=0;c[d+972>>2]=0;c[d+976>>2]=0;c[d+980>>2]=0;g[d+984>>2]=1.0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;H=+g[B+300>>2];G=+g[B+304>>2];J=+g[B+308>>2];F=c[B+28>>2]|0;K=H*+g[F+20>>2]+G*+g[F+24>>2]+J*+g[F+28>>2]+ +g[F+56>>2];L=H*+g[F+36>>2]+G*+g[F+40>>2]+J*+g[F+44>>2]+ +g[F+60>>2];g[d+992>>2]=H*+g[F+4>>2]+G*+g[F+8>>2]+J*+g[F+12>>2]+ +g[F+52>>2];g[d+996>>2]=K;g[d+1e3>>2]=L;g[d+1004>>2]=0.0;F=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[F>>2]|0)+56>>2]&7](F,d+944|0,A);L=+g[B+316>>2];K=+g[B+320>>2];J=+g[B+324>>2];F=c[B+32>>2]|0;G=L*+g[F+20>>2]+K*+g[F+24>>2]+J*+g[F+28>>2]+ +g[F+56>>2];H=L*+g[F+36>>2]+K*+g[F+40>>2]+J*+g[F+44>>2]+ +g[F+60>>2];g[d+992>>2]=L*+g[F+4>>2]+K*+g[F+8>>2]+J*+g[F+12>>2]+ +g[F+52>>2];g[d+996>>2]=G;g[d+1e3>>2]=H;g[d+1004>>2]=0.0;if(!(I&1)){B=z;continue b}B=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[B>>2]|0)+56>>2]&7](B,d+944|0,A);B=z;continue b};case 4:{no(d+880|0,(c[B+28>>2]|0)+4|0,B+552|0);if(!(I&1)){no(d+816|0,(c[B+32>>2]|0)+4|0,B+616|0);c[d+880>>2]=c[d+816>>2];c[d+884>>2]=c[d+820>>2];c[d+888>>2]=c[d+824>>2];c[d+892>>2]=c[d+828>>2];c[o+0>>2]=c[n+0>>2];c[o+4>>2]=c[n+4>>2];c[o+8>>2]=c[n+8>>2];c[o+12>>2]=c[n+12>>2];c[q+0>>2]=c[p+0>>2];c[q+4>>2]=c[p+4>>2];c[q+8>>2]=c[p+8>>2];c[q+12>>2]=c[p+12>>2];c[s+0>>2]=c[r+0>>2];c[s+4>>2]=c[r+4>>2];c[s+8>>2]=c[r+8>>2];c[s+12>>2]=c[r+12>>2]}else{I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+880|0,A);no(d+816|0,(c[B+32>>2]|0)+4|0,B+616|0);c[d+880>>2]=c[d+816>>2];c[d+884>>2]=c[d+820>>2];c[d+888>>2]=c[d+824>>2];c[d+892>>2]=c[d+828>>2];c[o+0>>2]=c[n+0>>2];c[o+4>>2]=c[n+4>>2];c[o+8>>2]=c[n+8>>2];c[o+12>>2]=c[n+12>>2];c[q+0>>2]=c[p+0>>2];c[q+4>>2]=c[p+4>>2];c[q+8>>2]=c[p+8>>2];c[q+12>>2]=c[p+12>>2];c[s+0>>2]=c[r+0>>2];c[s+4>>2]=c[r+4>>2];c[s+8>>2]=c[r+8>>2];c[s+12>>2]=c[r+12>>2];I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+880|0,A)}G=+ab(+(+g[B+688>>2]- +g[B+692>>2]),6.2831854820251465);if(!(G<-3.1415927410125732)){if(G>3.1415927410125732)G=G+-6.2831854820251465}else G=G+6.2831854820251465;H=+ab(+(+g[B+688>>2]+ +g[B+692>>2]),6.2831854820251465);if(!(H<-3.1415927410125732)){if(H>3.1415927410125732)H=H+-6.2831854820251465}else H=H+6.2831854820251465;if(G==H){B=z;continue b}B=G>H;if(!(C&1)){B=z;continue b}g[d+800>>2]=+g[d+888>>2];g[d+804>>2]=+g[d+904>>2];g[d+808>>2]=+g[d+920>>2];g[d+812>>2]=0.0;g[d+784>>2]=+g[d+880>>2];g[d+788>>2]=+g[d+896>>2];g[d+792>>2]=+g[d+912>>2];g[d+796>>2]=0.0;I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;F=c[(c[I>>2]|0)+60>>2]|0;c[d+768>>2]=0;c[d+772>>2]=0;c[d+776>>2]=0;c[d+780>>2]=0;Wb[F&0](I,s,d+800|0,d+784|0,A,A,B?0.0:G,B?6.2831854820251465:H,d+768|0,B^1,10.0);B=z;continue b};case 5:{no(d+704|0,(c[B+28>>2]|0)+4|0,B+300|0);if(!(I&1)){no(d+640|0,(c[B+32>>2]|0)+4|0,B+364|0);c[d+704>>2]=c[d+640>>2];c[d+708>>2]=c[d+644>>2];c[d+712>>2]=c[d+648>>2];c[d+716>>2]=c[d+652>>2];c[u+0>>2]=c[t+0>>2];c[u+4>>2]=c[t+4>>2];c[u+8>>2]=c[t+8>>2];c[u+12>>2]=c[t+12>>2];c[w+0>>2]=c[v+0>>2];c[w+4>>2]=c[v+4>>2];c[w+8>>2]=c[v+8>>2];c[w+12>>2]=c[v+12>>2];c[y+0>>2]=c[x+0>>2];c[y+4>>2]=c[x+4>>2];c[y+8>>2]=c[x+8>>2];c[y+12>>2]=c[x+12>>2]}else{I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+704|0,A);no(d+640|0,(c[B+32>>2]|0)+4|0,B+364|0);c[d+704>>2]=c[d+640>>2];c[d+708>>2]=c[d+644>>2];c[d+712>>2]=c[d+648>>2];c[d+716>>2]=c[d+652>>2];c[u+0>>2]=c[t+0>>2];c[u+4>>2]=c[t+4>>2];c[u+8>>2]=c[t+8>>2];c[u+12>>2]=c[t+12>>2];c[w+0>>2]=c[v+0>>2];c[w+4>>2]=c[v+4>>2];c[w+8>>2]=c[v+8>>2];c[w+12>>2]=c[v+12>>2];c[y+0>>2]=c[x+0>>2];c[y+4>>2]=c[x+4>>2];c[y+8>>2]=c[x+8>>2];c[y+12>>2]=c[x+12>>2];I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+704|0,A)}if(!(C&1)){B=z;continue b}Co(d+624|0,B,6.0868353843688965,A);G=+g[d+624>>2];H=+g[d+628>>2];J=+g[d+632>>2];K=G*+g[d+720>>2]+H*+g[d+724>>2]+J*+g[d+728>>2]+ +g[d+756>>2];L=G*+g[d+736>>2]+H*+g[d+740>>2]+J*+g[d+744>>2]+ +g[d+760>>2];g[d+624>>2]=G*+g[d+704>>2]+H*+g[d+708>>2]+J*+g[d+712>>2]+ +g[d+752>>2];g[d+628>>2]=K;g[d+632>>2]=L;g[d+636>>2]=0.0;C=0;do{Co(d+608|0,B,+(C|0)*6.283185005187988*.03125,A);G=+g[d+608>>2];H=+g[d+612>>2];J=+g[d+616>>2];K=G*+g[d+720>>2]+H*+g[d+724>>2]+J*+g[d+728>>2]+ +g[d+756>>2];L=G*+g[d+736>>2]+H*+g[d+740>>2]+J*+g[d+744>>2]+ +g[d+760>>2];g[d+608>>2]=G*+g[d+704>>2]+H*+g[d+708>>2]+J*+g[d+712>>2]+ +g[d+752>>2];g[d+612>>2]=K;g[d+616>>2]=L;g[d+620>>2]=0.0;I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;F=c[(c[I>>2]|0)+8>>2]|0;c[d+592>>2]=0;c[d+596>>2]=0;c[d+600>>2]=0;c[d+604>>2]=0;vc[F&127](I,d+624|0,d+608|0,d+592|0);if(!(C&3)){I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;F=c[(c[I>>2]|0)+8>>2]|0;c[d+576>>2]=0;c[d+580>>2]=0;c[d+584>>2]=0;c[d+588>>2]=0;vc[F&127](I,y,d+608|0,d+576|0)}c[d+624>>2]=c[d+608>>2];c[d+628>>2]=c[d+612>>2];c[d+632>>2]=c[d+616>>2];c[d+636>>2]=c[d+620>>2];C=C+1|0}while((C|0)!=32);H=+g[B+452>>2];G=+g[B+512>>2];C=c[B+32>>2]|0;if(+g[C+344>>2]>0.0){no(d+512|0,C+4|0,B+364|0);c[d+704>>2]=c[d+512>>2];c[d+708>>2]=c[d+516>>2];c[d+712>>2]=c[d+520>>2];c[d+716>>2]=c[d+524>>2];c[u+0>>2]=c[d+528>>2];c[u+4>>2]=c[d+532>>2];c[u+8>>2]=c[d+536>>2];c[u+12>>2]=c[d+540>>2];c[w+0>>2]=c[d+544>>2];c[w+4>>2]=c[d+548>>2];c[w+8>>2]=c[d+552>>2];c[w+12>>2]=c[d+556>>2];c[y+0>>2]=c[d+560>>2];c[y+4>>2]=c[d+564>>2];c[y+8>>2]=c[d+568>>2];c[y+12>>2]=c[d+572>>2]}else{no(d+448|0,(c[B+28>>2]|0)+4|0,B+300|0);c[d+704>>2]=c[d+448>>2];c[d+708>>2]=c[d+452>>2];c[d+712>>2]=c[d+456>>2];c[d+716>>2]=c[d+460>>2];c[u+0>>2]=c[d+464>>2];c[u+4>>2]=c[d+468>>2];c[u+8>>2]=c[d+472>>2];c[u+12>>2]=c[d+476>>2];c[w+0>>2]=c[d+480>>2];c[w+4>>2]=c[d+484>>2];c[w+8>>2]=c[d+488>>2];c[w+12>>2]=c[d+492>>2];c[y+0>>2]=c[d+496>>2];c[y+4>>2]=c[d+500>>2];c[y+8>>2]=c[d+504>>2];c[y+12>>2]=c[d+508>>2]}c[d+432>>2]=c[y+0>>2];c[d+436>>2]=c[y+4>>2];c[d+440>>2]=c[y+8>>2];c[d+444>>2]=c[y+12>>2];g[d+416>>2]=+g[d+704>>2];g[d+420>>2]=+g[d+720>>2];g[d+424>>2]=+g[d+736>>2];g[d+428>>2]=0.0;g[d+400>>2]=+g[d+708>>2];g[d+404>>2]=+g[d+724>>2];g[d+408>>2]=+g[d+740>>2];g[d+412>>2]=0.0;B=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=c[(c[B>>2]|0)+60>>2]|0;c[d+384>>2]=0;c[d+388>>2]=0;c[d+392>>2]=0;c[d+396>>2]=0;Wb[I&0](B,d+432|0,d+416|0,d+400|0,A,A,-G-H,H-G,d+384|0,1,10.0);B=z;continue b};case 6:case 9:{c[d+320>>2]=c[B+1064>>2];c[d+324>>2]=c[B+1068>>2];c[d+328>>2]=c[B+1072>>2];c[d+332>>2]=c[B+1076>>2];E=B+1080|0;c[f+0>>2]=c[E+0>>2];c[f+4>>2]=c[E+4>>2];c[f+8>>2]=c[E+8>>2];c[f+12>>2]=c[E+12>>2];F=B+1096|0;c[h+0>>2]=c[F+0>>2];c[h+4>>2]=c[F+4>>2];c[h+8>>2]=c[F+8>>2];c[h+12>>2]=c[F+12>>2];D=B+1112|0;c[j+0>>2]=c[D+0>>2];c[j+4>>2]=c[D+4>>2];c[j+8>>2]=c[D+8>>2];c[j+12>>2]=c[D+12>>2];if(!(I&1)){c[d+320>>2]=c[B+1128>>2];c[d+324>>2]=c[B+1132>>2];c[d+328>>2]=c[B+1136>>2];c[d+332>>2]=c[B+1140>>2];c[f+0>>2]=c[B+1144>>2];c[f+4>>2]=c[B+1148>>2];c[f+8>>2]=c[B+1152>>2];c[f+12>>2]=c[B+1156>>2];c[h+0>>2]=c[B+1160>>2];c[h+4>>2]=c[B+1164>>2];c[h+8>>2]=c[B+1168>>2];c[h+12>>2]=c[B+1172>>2];c[j+0>>2]=c[B+1176>>2];c[j+4>>2]=c[B+1180>>2];c[j+8>>2]=c[B+1184>>2];c[j+12>>2]=c[B+1188>>2]}else{I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+320|0,A);c[d+320>>2]=c[B+1128>>2];c[d+324>>2]=c[B+1132>>2];c[d+328>>2]=c[B+1136>>2];c[d+332>>2]=c[B+1140>>2];c[f+0>>2]=c[B+1144>>2];c[f+4>>2]=c[B+1148>>2];c[f+8>>2]=c[B+1152>>2];c[f+12>>2]=c[B+1156>>2];c[h+0>>2]=c[B+1160>>2];c[h+4>>2]=c[B+1164>>2];c[h+8>>2]=c[B+1168>>2];c[h+12>>2]=c[B+1172>>2];c[j+0>>2]=c[B+1176>>2];c[j+4>>2]=c[B+1180>>2];c[j+8>>2]=c[B+1184>>2];c[j+12>>2]=c[B+1188>>2];I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[I>>2]|0)+56>>2]&7](I,d+320|0,A)}if(!(C&1)){B=z;continue b}c[d+320>>2]=c[B+1064>>2];c[d+324>>2]=c[B+1068>>2];c[d+328>>2]=c[B+1072>>2];c[d+332>>2]=c[B+1076>>2];c[f+0>>2]=c[E+0>>2];c[f+4>>2]=c[E+4>>2];c[f+8>>2]=c[E+8>>2];c[f+12>>2]=c[E+12>>2];c[h+0>>2]=c[F+0>>2];c[h+4>>2]=c[F+4>>2];c[h+8>>2]=c[F+8>>2];c[h+12>>2]=c[F+12>>2];c[j+0>>2]=c[D+0>>2];c[j+4>>2]=c[D+4>>2];c[j+8>>2]=c[D+8>>2];c[j+12>>2]=c[D+12>>2];C=B+1176|0;g[d+304>>2]=+g[d+328>>2];g[d+308>>2]=+g[d+344>>2];g[d+312>>2]=+g[d+360>>2];g[d+316>>2]=0.0;g[d+288>>2]=+g[d+320>>2];g[d+292>>2]=+g[d+336>>2];g[d+296>>2]=+g[d+352>>2];g[d+300>>2]=0.0;J=+g[B+932>>2];H=+g[B+936>>2];L=+g[B+996>>2];M=+g[B+1e3>>2];I=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;O=c[(c[I>>2]|0)+64>>2]|0;c[d+272>>2]=0;c[d+276>>2]=0;c[d+280>>2]=0;c[d+284>>2]=0;mc[O&0](I,C,d+304|0,d+288|0,A*.8999999761581421,J,H,L,M,d+272|0,10.0,1);M=+g[d+324>>2];L=+g[d+340>>2];H=+g[d+356>>2];g[d+288>>2]=M;g[d+292>>2]=L;g[d+296>>2]=H;g[d+300>>2]=0.0;J=+g[B+1196>>2];K=+g[B+1200>>2];G=+S(+J);J=+T(+J);N=+S(+K);K=+T(+K);g[d+256>>2]=G*N*M+G*K*L-J*H;g[d+260>>2]=N*L-K*M;g[d+264>>2]=J*N*M+J*K*L+G*H;c[d+320>>2]=c[B+1128>>2];c[d+324>>2]=c[B+1132>>2];c[d+328>>2]=c[B+1136>>2];c[d+332>>2]=c[B+1140>>2];c[f+0>>2]=c[B+1144>>2];c[f+4>>2]=c[B+1148>>2];c[f+8>>2]=c[B+1152>>2];c[f+12>>2]=c[B+1156>>2];c[h+0>>2]=c[B+1160>>2];c[h+4>>2]=c[B+1164>>2];c[h+8>>2]=c[B+1168>>2];c[h+12>>2]=c[B+1172>>2];c[j+0>>2]=c[C+0>>2];c[j+4>>2]=c[C+4>>2];c[j+8>>2]=c[C+8>>2];c[j+12>>2]=c[C+12>>2];H=-+g[d+336>>2];G=-+g[d+352>>2];g[d+240>>2]=-+g[d+320>>2];g[d+244>>2]=H;g[d+248>>2]=G;g[d+252>>2]=0.0;G=+g[B+868>>2];H=+g[B+872>>2];if(!(G>H)){if(G<H){O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=c[(c[O>>2]|0)+60>>2]|0;c[d+208>>2]=0;c[d+212>>2]=0;c[d+216>>2]=0;c[d+220>>2]=0;Wb[I&0](O,C,d+240|0,d+256|0,A,A,G,H,d+208|0,1,10.0)}}else{O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=c[(c[O>>2]|0)+60>>2]|0;c[d+224>>2]=0;c[d+228>>2]=0;c[d+232>>2]=0;c[d+236>>2]=0;Wb[I&0](O,C,d+240|0,d+256|0,A,A,-3.1415927410125732,3.1415927410125732,d+224|0,0,10.0)}c[d+320>>2]=c[B+1064>>2];c[d+324>>2]=c[B+1068>>2];c[d+328>>2]=c[B+1072>>2];c[d+332>>2]=c[B+1076>>2];c[f+0>>2]=c[E+0>>2];c[f+4>>2]=c[E+4>>2];c[f+8>>2]=c[E+8>>2];c[f+12>>2]=c[E+12>>2];c[h+0>>2]=c[F+0>>2];c[h+4>>2]=c[F+4>>2];c[h+8>>2]=c[F+8>>2];c[h+12>>2]=c[F+12>>2];c[j+0>>2]=c[D+0>>2];c[j+4>>2]=c[D+4>>2];c[j+8>>2]=c[D+8>>2];c[j+12>>2]=c[D+12>>2];c[d+192>>2]=c[B+680>>2];c[d+196>>2]=c[B+684>>2];c[d+200>>2]=c[B+688>>2];c[d+204>>2]=c[B+692>>2];c[d+176>>2]=c[B+696>>2];c[d+180>>2]=c[B+700>>2];c[d+184>>2]=c[B+704>>2];c[d+188>>2]=c[B+708>>2];B=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;O=c[(c[B>>2]|0)+72>>2]|0;c[d+160>>2]=0;c[d+164>>2]=0;c[d+168>>2]=0;c[d+172>>2]=0;Jb[O&31](B,d+192|0,d+176|0,d+320|0,d+160|0);B=z;continue b};case 7:{c[d+96>>2]=c[B+824>>2];c[d+100>>2]=c[B+828>>2];c[d+104>>2]=c[B+832>>2];c[d+108>>2]=c[B+836>>2];c[k+0>>2]=c[B+840>>2];c[k+4>>2]=c[B+844>>2];c[k+8>>2]=c[B+848>>2];c[k+12>>2]=c[B+852>>2];c[l+0>>2]=c[B+856>>2];c[l+4>>2]=c[B+860>>2];c[l+8>>2]=c[B+864>>2];c[l+12>>2]=c[B+868>>2];c[m+0>>2]=c[B+872>>2];c[m+4>>2]=c[B+876>>2];c[m+8>>2]=c[B+880>>2];c[m+12>>2]=c[B+884>>2];if(!(I&1)){c[d+96>>2]=c[B+888>>2];c[d+100>>2]=c[B+892>>2];c[d+104>>2]=c[B+896>>2];c[d+108>>2]=c[B+900>>2];c[k+0>>2]=c[B+904>>2];c[k+4>>2]=c[B+908>>2];c[k+8>>2]=c[B+912>>2];c[k+12>>2]=c[B+916>>2];c[l+0>>2]=c[B+920>>2];c[l+4>>2]=c[B+924>>2];c[l+8>>2]=c[B+928>>2];c[l+12>>2]=c[B+932>>2];c[m+0>>2]=c[B+936>>2];c[m+4>>2]=c[B+940>>2];c[m+8>>2]=c[B+944>>2];c[m+12>>2]=c[B+948>>2]}else{O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[O>>2]|0)+56>>2]&7](O,d+96|0,A);c[d+96>>2]=c[B+888>>2];c[d+100>>2]=c[B+892>>2];c[d+104>>2]=c[B+896>>2];c[d+108>>2]=c[B+900>>2];c[k+0>>2]=c[B+904>>2];c[k+4>>2]=c[B+908>>2];c[k+8>>2]=c[B+912>>2];c[k+12>>2]=c[B+916>>2];c[l+0>>2]=c[B+920>>2];c[l+4>>2]=c[B+924>>2];c[l+8>>2]=c[B+928>>2];c[l+12>>2]=c[B+932>>2];c[m+0>>2]=c[B+936>>2];c[m+4>>2]=c[B+940>>2];c[m+8>>2]=c[B+944>>2];c[m+12>>2]=c[B+948>>2];O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;tc[c[(c[O>>2]|0)+56>>2]&7](O,d+96|0,A)}if(!(C&1)){B=z;continue b}O=(a[B+180>>0]|0)!=0?B+824|0:B+888|0;H=+g[O>>2];L=+g[O+4>>2];J=+g[O+16>>2];N=+g[O+20>>2];K=+g[O+32>>2];M=+g[O+36>>2];W=+g[O+48>>2];U=+g[O+52>>2];Q=+g[O+56>>2];G=+g[B+184>>2];V=+g[O+8>>2]*0.0;R=+g[O+24>>2]*0.0;P=+g[O+40>>2]*0.0;g[d+80>>2]=W+(V+(L*0.0+H*G));g[d+84>>2]=U+(R+(N*0.0+J*G));g[d+88>>2]=Q+(P+(M*0.0+K*G));g[d+92>>2]=0.0;G=+g[B+188>>2];g[d+64>>2]=W+(V+(L*0.0+H*G));g[d+68>>2]=U+(R+(N*0.0+J*G));g[d+72>>2]=Q+(P+(M*0.0+K*G));g[d+76>>2]=0.0;O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=c[(c[O>>2]|0)+8>>2]|0;c[d+48>>2]=0;c[d+52>>2]=0;c[d+56>>2]=0;c[d+60>>2]=0;vc[I&127](O,d+80|0,d+64|0,d+48|0);g[d+32>>2]=H;g[d+36>>2]=J;g[d+40>>2]=K;g[d+44>>2]=0.0;g[d+16>>2]=L;g[d+20>>2]=N;g[d+24>>2]=M;g[d+28>>2]=0.0;M=+g[B+192>>2];N=+g[B+196>>2];O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;I=c[(c[O>>2]|0)+60>>2]|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;Wb[I&0](O,B+936|0,d+32|0,d+16|0,A,A,M,N,d,1,10.0);B=z;continue b};default:{B=z;continue b}}}}while(0);if(((((Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)!=0?(O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0,((Pb[c[(c[O>>2]|0)+48>>2]&127](O)|0)&16387|0)!=0):0)?(Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)!=0:0)?(O=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0,(Pb[c[(c[O>>2]|0)+48>>2]&127](O)|0)!=0):0)?(c[b+280>>2]|0)>0:0){e=0;do{O=c[(c[b+288>>2]|0)+(e<<2)>>2]|0;Nb[c[(c[O>>2]|0)+12>>2]&127](O,c[b+72>>2]|0);e=e+1|0}while((e|0)<(c[b+280>>2]|0))}b=c[5022]|0;O=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=O;if(O){i=d;return}do if(c[b+4>>2]|0){Eb(d+1008|0,0)|0;O=c[5008]|0;g[b+8>>2]=+(((c[d+1012>>2]|0)-(c[O+4>>2]|0)+(((c[d+1008>>2]|0)-(c[O>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=d;return}}while(0);c[5022]=c[b+20>>2];i=d;return}function Ro(a){a=a|0;var b=0,d=0,e=0;b=i;if((c[a+232>>2]|0)<=0){i=b;return}d=0;do{e=(c[(c[a+240>>2]|0)+(d<<2)>>2]|0)+412|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;d=d+1|0}while((d|0)<(c[a+232>>2]|0));i=b;return}function So(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0.0,k=0.0;b=i;d=c[a+232>>2]|0;if((d|0)<=0){i=b;return}a=c[a+240>>2]|0;e=0;do{f=c[a+(e<<2)>>2]|0;h=c[f+216>>2]|0;if(!((h|0)==2|(h|0)==5)?(c[f+204>>2]&3|0)==0:0){k=+g[f+368>>2]*+g[f+352>>2];j=+g[f+372>>2]*+g[f+356>>2];g[f+412>>2]=+g[f+364>>2]*+g[f+348>>2]+ +g[f+412>>2];g[f+416>>2]=k+ +g[f+416>>2];g[f+420>>2]=j+ +g[f+420>>2]}e=e+1|0}while((e|0)<(d|0));i=b;return}function To(b){b=b|0;var d=0,e=0.0,f=0.0,h=0,j=0,k=0,l=0;d=i;i=i+144|0;yE(1592);if(!(a[b+274>>0]|0)){k=c[b+232>>2]|0;if((k|0)>0){h=0;do{j=c[(c[b+240>>2]|0)+(h<<2)>>2]|0;l=c[j+216>>2]|0;if((!((l|0)==2|(l|0)==5)?(c[j+480>>2]|0)!=0:0)?(c[j+204>>2]&3|0)==0:0){if((a[b+300>>0]|0)!=0?(e=+g[b+268>>2],e!=0.0):0)f=+g[b+264>>2]-e;else f=+g[b+264>>2]*+g[j+244>>2];Bo(j+68|0,+g[j+132>>2],+g[j+136>>2],+g[j+140>>2],j+148|0,f,d);k=c[j+480>>2]|0;Nb[c[(c[k>>2]|0)+12>>2]&127](k,d);k=c[b+232>>2]|0}h=h+1|0}while((h|0)<(k|0))}}else{k=c[b+8>>2]|0;if((k|0)>0){h=0;do{j=c[(c[b+16>>2]|0)+(h<<2)>>2]|0;if((!((j|0)==0?1:(c[j+236>>2]&2|0)==0)?(c[j+480>>2]|0)!=0:0)?(c[j+204>>2]&3|0)==0:0){if((a[b+300>>0]|0)!=0?(f=+g[b+268>>2],f!=0.0):0)e=+g[b+264>>2]-f;else e=+g[b+264>>2]*+g[j+244>>2];Bo(j+68|0,+g[j+132>>2],+g[j+136>>2],+g[j+140>>2],j+148|0,e,d+64|0);k=c[j+480>>2]|0;Nb[c[(c[k>>2]|0)+12>>2]&127](k,d+64|0);k=c[b+8>>2]|0}h=h+1|0}while((h|0)<(k|0))}}b=c[5022]|0;l=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=l;if(l){i=d;return}do if(c[b+4>>2]|0){Eb(d+128|0,0)|0;l=c[5008]|0;g[b+8>>2]=+(((c[d+132>>2]|0)-(c[l+4>>2]|0)+(((c[d+128>>2]|0)-(c[l>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=d;return}}while(0);c[5022]=c[b+20>>2];i=d;return}function Uo(b,d,e,f){b=b|0;d=+d;e=e|0;f=+f;var h=0,j=0,k=0.0,l=0;h=i;i=i+16|0;Eb(c[5008]|0,0)|0;xE(20040);c[5011]=(c[5011]|0)+1;l=c[5014]|0;c[5014]=l+1;if(!l){Eb(h|0,0)|0;l=c[5008]|0;c[5013]=(c[h+4>>2]|0)-(c[l+4>>2]|0)+(((c[h>>2]|0)-(c[l>>2]|0)|0)*1e6|0)}c[5024]=0;Eb(h|0,0)|0;yE(1616);if(e){g[b+268>>2]=f;k=+g[b+264>>2]+d;g[b+264>>2]=k;if(!(k>=f)){d=f;j=0}else{g[b+264>>2]=k- +(~~(k/f)|0)*f;d=f;j=~~(k/f)}}else{g[b+264>>2]=(a[b+300>>0]|0)!=0?0.0:d;g[b+268>>2]=0.0;j=!(+P(+d)<1.1920928955078125e-7)&1;e=j}if(Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0){l=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;a[3896]=(Pb[c[(c[l>>2]|0)+48>>2]&127](l)|0)>>>4&1}if(j){e=(j|0)>(e|0)?e:j;Kb[c[(c[b>>2]|0)+164>>2]&31](b,d*+(e|0));Lb[c[(c[b>>2]|0)+168>>2]&511](b);if((e|0)>0){l=0;do{Kb[c[(c[b>>2]|0)+160>>2]&31](b,d);Lb[c[(c[b>>2]|0)+80>>2]&511](b);l=l+1|0}while((l|0)<(e|0))}}else Lb[c[(c[b>>2]|0)+80>>2]&511](b);Lb[c[(c[b>>2]|0)+120>>2]&511](b);c[5024]=(c[5024]|0)+1;b=c[5022]|0;l=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=l;if(l){i=h;return j|0}do if(c[b+4>>2]|0){Eb(h|0,0)|0;l=c[5008]|0;g[b+8>>2]=+(((c[h+4>>2]|0)-(c[l+4>>2]|0)+(((c[h>>2]|0)-(c[l>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=h;return j|0}}while(0);c[5022]=c[b+20>>2];i=h;return j|0}function Vo(d,e){d=d|0;e=+e;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0;f=i;i=i+464|0;yE(1632);p=c[d+84>>2]|0;if(p)Kb[p&31](d,e);Kb[c[(c[d>>2]|0)+140>>2]&31](d,e);g[d+28>>2]=e;c[d+32>>2]=0;c[d+48>>2]=Pb[c[(c[d>>2]|0)+20>>2]&127](d)|0;yE(1768);yE(1800);q=c[d+316>>2]|0;if((c[d+308>>2]|0)>0){p=0;do{C=c[d+24>>2]|0;Nb[c[(c[C>>2]|0)+16>>2]&127](C,c[q+(p<<2)>>2]|0);p=p+1|0;q=c[d+316>>2]|0}while((p|0)<(c[d+308>>2]|0))}if(q){if(a[d+320>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[q+ -4>>2]|0)}c[d+316>>2]=0}a[d+320>>0]=1;c[d+316>>2]=0;c[d+308>>2]=0;c[d+312>>2]=0;p=c[5022]|0;C=(c[p+16>>2]|0)+ -1|0;c[p+16>>2]=C;do if(!C){if(c[p+4>>2]|0){Eb(f+280|0,0)|0;C=c[5008]|0;g[p+8>>2]=+(((c[f+284>>2]|0)-(c[C+4>>2]|0)+(((c[f+280>>2]|0)-(c[C>>2]|0)|0)*1e6|0)-(c[p+12>>2]|0)|0)>>>0)/1.0e3+ +g[p+8>>2];if(c[p+16>>2]|0)break;p=c[5022]|0}c[5022]=c[p+20>>2]}while(0);if((c[d+232>>2]|0)>0){p=f+264|0;s=f+164|0;r=f+400|0;q=0;do{t=c[(c[d+240>>2]|0)+(q<<2)>>2]|0;g[t+244>>2]=1.0;C=c[t+216>>2]|0;do if(((!((C|0)==2|(C|0)==5)?(c[t+204>>2]&3|0)==0:0)?(Bo(t+4|0,+g[t+312>>2],+g[t+316>>2],+g[t+320>>2],t+328|0,e,f+216|0),l=+g[p>>2],h=l- +g[t+52>>2],m=+g[f+268>>2],j=m- +g[t+56>>2],n=+g[f+272>>2],k=n- +g[t+60>>2],(a[d+44>>0]|0)!=0):0)?(y=+g[t+252>>2],y*y!=0.0?y*y<h*h+j*j+k*k:0):0){yE(1840);if((c[(c[t+192>>2]|0)+4>>2]|0)<20){c[440]=(c[440]|0)+1;B=c[d+68>>2]|0;B=Pb[c[(c[B>>2]|0)+36>>2]&127](B)|0;C=c[d+24>>2]|0;g[f+124>>2]=1.0;b[f+128>>1]=1;b[f+130>>1]=-1;c[f+120>>2]=688;c[f+132>>2]=c[t+52>>2];c[f+136>>2]=c[t+56>>2];c[f+140>>2]=c[t+60>>2];c[f+144>>2]=c[t+64>>2];c[f+148>>2]=c[p+0>>2];c[f+152>>2]=c[p+4>>2];c[f+156>>2]=c[p+8>>2];c[f+160>>2]=c[p+12>>2];c[f+196>>2]=0;c[f+120>>2]=2160;c[f+200>>2]=t;g[f+204>>2]=0.0;c[f+208>>2]=B;c[f+212>>2]=C;w=+g[t+248>>2];c[f+72>>2]=0;g[f+76>>2]=1.0;g[f+80>>2]=1.0;g[f+84>>2]=1.0;g[f+88>>2]=0.0;c[f+64>>2]=16680;c[f+68>>2]=8;g[f+92>>2]=w;g[f+108>>2]=w;g[f+204>>2]=+g[d+56>>2];C=c[t+188>>2]|0;b[f+128>>1]=b[C+4>>1]|0;b[f+130>>1]=b[C+6>>1]|0;c[f+48>>2]=c[p+0>>2];c[f+52>>2]=c[p+4>>2];c[f+56>>2]=c[p+8>>2];c[f+60>>2]=c[p+12>>2];c[f+0>>2]=c[t+4>>2];c[f+4>>2]=c[t+8>>2];c[f+8>>2]=c[t+12>>2];c[f+12>>2]=c[t+16>>2];c[f+16>>2]=c[t+20>>2];c[f+20>>2]=c[t+24>>2];c[f+24>>2]=c[t+28>>2];c[f+28>>2]=c[t+32>>2];c[f+32>>2]=c[t+36>>2];c[f+36>>2]=c[t+40>>2];c[f+40>>2]=c[t+44>>2];c[f+44>>2]=c[t+48>>2];Ou(d,f+64|0,t+4|0,f,f+120|0,0.0);w=+g[f+124>>2];if(w<1.0){v=w*(l- +g[t+52>>2]);u=w*(m- +g[t+56>>2]);w=w*(n- +g[t+60>>2]);y=-(u*+g[f+168>>2])-v*+g[s>>2]-w*+g[f+172>>2];x=c[d+24>>2]|0;x=Yb[c[(c[x>>2]|0)+12>>2]&31](x,t,c[f+196>>2]|0)|0;A=c[d+308>>2]|0;if((A|0)==(c[d+312>>2]|0)?(o=(A|0)==0?1:A<<1,(A|0)<(o|0)):0){if(!o)z=0;else{c[5004]=(c[5004]|0)+1;z=fF((o<<2|3)+16|0)|0;if(!z)z=0;else{c[(z+19&-16)+ -4>>2]=z;z=z+19&-16}A=c[d+308>>2]|0}if((A|0)>0){B=0;do{C=z+(B<<2)|0;if(C)c[C>>2]=c[(c[d+316>>2]|0)+(B<<2)>>2];B=B+1|0}while((B|0)!=(A|0))}B=c[d+316>>2]|0;if(B){if(a[d+320>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[B+ -4>>2]|0);A=c[d+308>>2]|0}c[d+316>>2]=0}a[d+320>>0]=1;c[d+316>>2]=z;c[d+312>>2]=o}z=(c[d+316>>2]|0)+(A<<2)|0;if(z)c[z>>2]=x;c[d+308>>2]=A+1;D=v+ +g[t+52>>2];v=u+ +g[t+56>>2];w=w+ +g[t+60>>2];C=c[f+196>>2]|0;O=+g[C+4>>2];N=+g[C+20>>2];M=+g[C+36>>2];L=+g[C+8>>2];K=+g[C+24>>2];J=+g[C+40>>2];I=+g[C+12>>2];G=+g[C+28>>2];E=+g[C+44>>2];H=-+g[C+52>>2];F=-+g[C+56>>2];u=-+g[C+60>>2];c[f+280>>2]=0;c[f+284>>2]=0;c[f+288>>2]=0;c[f+292>>2]=0;g[f+296>>2]=D*O+v*N+w*M+(O*H+N*F+M*u);g[f+300>>2]=D*L+v*K+w*J+(L*H+K*F+J*u);g[f+304>>2]=D*I+v*G+w*E+(I*H+G*F+E*u);g[f+308>>2]=0.0;c[f+344>>2]=c[s+0>>2];c[f+348>>2]=c[s+4>>2];c[f+352>>2]=c[s+8>>2];c[f+356>>2]=c[s+12>>2];g[f+360>>2]=y;g[f+364>>2]=0.0;g[f+368>>2]=0.0;g[f+372>>2]=0.0;c[f+392>>2]=0;a[f+396>>0]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;C=wA(x,f+280|0)|0;g[x+(C*184|0)+96>>2]=0.0;y=+g[t+224>>2]*+g[(c[f+196>>2]|0)+224>>2];y=y<-10.0?-10.0:y;g[x+(C*184|0)+88>>2]=y>10.0?10.0:y;c[x+(C*184|0)+52>>2]=c[t+52>>2];c[x+(C*184|0)+56>>2]=c[t+56>>2];c[x+(C*184|0)+60>>2]=c[t+60>>2];c[x+(C*184|0)+64>>2]=c[t+64>>2];g[x+(C*184|0)+36>>2]=D;g[x+(C*184|0)+40>>2]=v;g[x+(C*184|0)+44>>2]=w;g[x+(C*184|0)+48>>2]=0.0}}t=c[5022]|0;C=(c[t+16>>2]|0)+ -1|0;c[t+16>>2]=C;if(!C){if(c[t+4>>2]|0){Eb(f+280|0,0)|0;C=c[5008]|0;g[t+8>>2]=+(((c[f+284>>2]|0)-(c[C+4>>2]|0)+(((c[f+280>>2]|0)-(c[C>>2]|0)|0)*1e6|0)-(c[t+12>>2]|0)|0)>>>0)/1.0e3+ +g[t+8>>2];if(c[t+16>>2]|0)break;t=c[5022]|0}c[5022]=c[t+20>>2]}}while(0);q=q+1|0}while((q|0)<(c[d+232>>2]|0))}o=c[5022]|0;C=(c[o+16>>2]|0)+ -1|0;c[o+16>>2]=C;do if(!C){if(c[o+4>>2]|0){Eb(f+280|0,0)|0;C=c[5008]|0;g[o+8>>2]=+(((c[f+284>>2]|0)-(c[C+4>>2]|0)+(((c[f+280>>2]|0)-(c[C>>2]|0)|0)*1e6|0)-(c[o+12>>2]|0)|0)>>>0)/1.0e3+ +g[o+8>>2];if(c[o+16>>2]|0)break;o=c[5022]|0}c[5022]=c[o+20>>2]}while(0);Lb[c[(c[d>>2]|0)+44>>2]&511](d);Lb[c[(c[d>>2]|0)+148>>2]&511](d);g[d+104>>2]=e;Nb[c[(c[d>>2]|0)+152>>2]&127](d,d+92|0);Kb[c[(c[d>>2]|0)+144>>2]&31](d,e);yE(1664);if((c[d+280>>2]|0)>0){o=0;do{C=c[(c[d+288>>2]|0)+(o<<2)>>2]|0;tc[c[(c[C>>2]|0)+8>>2]&7](C,d,e);o=o+1|0}while((o|0)<(c[d+280>>2]|0))}o=c[5022]|0;C=(c[o+16>>2]|0)+ -1|0;c[o+16>>2]=C;do if(!C){if(c[o+4>>2]|0){Eb(f+280|0,0)|0;C=c[5008]|0;g[o+8>>2]=+(((c[f+284>>2]|0)-(c[C+4>>2]|0)+(((c[f+280>>2]|0)-(c[C>>2]|0)|0)*1e6|0)-(c[o+12>>2]|0)|0)>>>0)/1.0e3+ +g[o+8>>2];if(c[o+16>>2]|0)break;o=c[5022]|0}c[5022]=c[o+20>>2]}while(0);Kb[c[(c[d>>2]|0)+156>>2]&31](d,e);o=c[d+80>>2]|0;if(o)Kb[o&31](d,e);d=c[5022]|0;C=(c[d+16>>2]|0)+ -1|0;c[d+16>>2]=C;if(C){i=f;return}do if(c[d+4>>2]|0){Eb(f+280|0,0)|0;C=c[5008]|0;g[d+8>>2]=+(((c[f+284>>2]|0)-(c[C+4>>2]|0)+(((c[f+280>>2]|0)-(c[C>>2]|0)|0)*1e6|0)-(c[d+12>>2]|0)|0)>>>0)/1.0e3+ +g[d+8>>2];if(!(c[d+16>>2]|0)){d=c[5022]|0;break}else{i=f;return}}while(0);c[5022]=c[d+20>>2];i=f;return}function Wo(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0.0,k=0,l=0.0,m=0.0;d=i;c[a+248>>2]=c[b+0>>2];c[a+252>>2]=c[b+4>>2];c[a+256>>2]=c[b+8>>2];c[a+260>>2]=c[b+12>>2];h=c[a+232>>2]|0;if((h|0)<=0){i=d;return}e=0;do{f=c[(c[a+240>>2]|0)+(e<<2)>>2]|0;k=c[f+216>>2]|0;if(!((k|0)==2|(k|0)==5)?(c[f+504>>2]&1|0)==0:0){j=+g[f+344>>2];if(j!=0.0){m=1.0/j*+g[b+4>>2];l=1.0/j*+g[b+8>>2];g[f+364>>2]=1.0/j*+g[b>>2];g[f+368>>2]=m;g[f+372>>2]=l;g[f+376>>2]=0.0}c[f+380>>2]=c[b+0>>2];c[f+384>>2]=c[b+4>>2];c[f+388>>2]=c[b+8>>2];c[f+392>>2]=c[b+12>>2];h=c[a+232>>2]|0}e=e+1|0}while((e|0)<(h|0));i=d;return}function Xo(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=c[b+248>>2];c[a+4>>2]=c[b+252>>2];c[a+8>>2]=c[b+256>>2];c[a+12>>2]=c[b+260>>2];i=d;return}function Yo(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;Cu(a,b,c,d);i=e;return}function Zo(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)==0?1:(c[b+236>>2]&2|0)==0){Gu(a,b);i=d;return}else{Nb[c[(c[a>>2]|0)+92>>2]&127](a,b);i=d;return}}function _o(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;e=i;d=c[a+232>>2]|0;a:do if((d|0)>0){f=c[a+240>>2]|0;g=0;while(1){h=f+(g<<2)|0;j=g+1|0;if((c[h>>2]|0)==(b|0))break;if((j|0)<(d|0))g=j;else break a}if((g|0)<(d|0)){c[h>>2]=c[f+(d+ -1<<2)>>2];c[(c[a+240>>2]|0)+(d+ -1<<2)>>2]=b;c[a+232>>2]=d+ -1}}while(0);Gu(a,b);i=e;return}function $o(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0;e=i;h=c[d+204>>2]|0;if((h&3|0)==0?(c[d+504>>2]&1|0)==0:0){m=+g[d+344>>2];if(m!=0.0){o=1.0/m*+g[b+252>>2];n=1.0/m*+g[b+256>>2];g[d+364>>2]=1.0/m*+g[b+248>>2];g[d+368>>2]=o;g[d+372>>2]=n;g[d+376>>2]=0.0}c[d+380>>2]=c[b+248>>2];c[d+384>>2]=c[b+252>>2];c[d+388>>2]=c[b+256>>2];c[d+392>>2]=c[b+260>>2]}if(!(c[d+192>>2]|0)){i=e;return}if(h&1){if(((c[d+216>>2]|0)+ -4|0)>>>0>=2)c[d+216>>2]=2}else{j=c[b+232>>2]|0;if((j|0)==(c[b+236>>2]|0)?(f=(j|0)==0?1:j<<1,(j|0)<(f|0)):0){if(!f)h=0;else{c[5004]=(c[5004]|0)+1;h=fF((f<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+232>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<2)|0;if(l)c[l>>2]=c[(c[b+240>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[b+240>>2]|0;if(k){if(a[b+244>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0);j=c[b+232>>2]|0}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=h;c[b+236>>2]=f}f=(c[b+240>>2]|0)+(j<<2)|0;if(f)c[f>>2]=d;c[b+232>>2]=j+1;h=c[d+204>>2]|0}if(!(h&1))f=(h&2|0)==0;else f=0;vc[c[(c[b>>2]|0)+36>>2]&127](b,d,f?1:2,f?-1:-3);i=e;return}function ap(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0;h=i;k=c[d+204>>2]|0;if((k&3|0)==0?(c[d+504>>2]&1|0)==0:0){o=+g[d+344>>2];if(o!=0.0){q=1.0/o*+g[b+252>>2];p=1.0/o*+g[b+256>>2];g[d+364>>2]=1.0/o*+g[b+248>>2];g[d+368>>2]=q;g[d+372>>2]=p;g[d+376>>2]=0.0}c[d+380>>2]=c[b+248>>2];c[d+384>>2]=c[b+252>>2];c[d+388>>2]=c[b+256>>2];c[d+392>>2]=c[b+260>>2]}if(!(c[d+192>>2]|0)){i=h;return}if(k&1){if(((c[d+216>>2]|0)+ -4|0)>>>0>=2)c[d+216>>2]=2}else{l=c[b+232>>2]|0;if((l|0)==(c[b+236>>2]|0)?(j=(l|0)==0?1:l<<1,(l|0)<(j|0)):0){if(!j)k=0;else{c[5004]=(c[5004]|0)+1;k=fF((j<<2|3)+16|0)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}l=c[b+232>>2]|0}if((l|0)>0){n=0;do{m=k+(n<<2)|0;if(m)c[m>>2]=c[(c[b+240>>2]|0)+(n<<2)>>2];n=n+1|0}while((n|0)!=(l|0))}m=c[b+240>>2]|0;if(m){if(a[b+244>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0);l=c[b+232>>2]|0}c[b+240>>2]=0}a[b+244>>0]=1;c[b+240>>2]=k;c[b+236>>2]=j}j=(c[b+240>>2]|0)+(l<<2)|0;if(j)c[j>>2]=d;c[b+232>>2]=l+1}vc[c[(c[b>>2]|0)+36>>2]&127](b,d,e,f);i=h;return}function bp(b,d){b=b|0;d=+d;var e=0,f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0;e=i;i=i+16|0;yE(1680);if((c[b+232>>2]|0)>0){f=(a[3896]|0)==0;h=0;do{k=c[(c[b+240>>2]|0)+(h<<2)>>2]|0;a:do if(k){l=c[k+216>>2]|0;do if(!((l|0)==4|(l|0)==2)){p=+g[k+312>>2];o=+g[k+316>>2];n=+g[k+320>>2];m=+g[k+472>>2];if(p*p+o*o+n*n<m*m?(m=+g[k+328>>2],n=+g[k+332>>2],o=+g[k+336>>2],p=+g[k+476>>2],m*m+n*n+o*o<p*p):0){g[k+220>>2]=+g[k+220>>2]+d;j=10;break}g[k+220>>2]=0.0;if((l+ -4|0)>>>0>=2){c[k+216>>2]=0;l=0}else j=10}else j=10;while(0);if((j|0)==10){j=0;if((l|0)==4)break}do if(f){if((l+ -2|0)>>>0>=2?!(+g[k+220>>2]>2.0):0)break;if(c[k+204>>2]&3){if((l+ -4|0)>>>0<2)break a;c[k+216>>2]=2;break a}if((l|0)==1){c[k+216>>2]=3;break a}if((l|0)!=2)break a;l=(c[k+260>>2]|0)+2|0;c[k+328>>2]=0;c[k+332>>2]=0;c[k+336>>2]=0;c[k+340>>2]=0;c[k+260>>2]=l;c[k+312>>2]=0;c[k+316>>2]=0;c[k+320>>2]=0;c[k+324>>2]=0;break a}while(0);if((l+ -4|0)>>>0>=2)c[k+216>>2]=1}while(0);h=h+1|0}while((h|0)<(c[b+232>>2]|0))}b=c[5022]|0;l=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=l;if(l){i=e;return}do if(c[b+4>>2]|0){Eb(e|0,0)|0;l=c[5008]|0;g[b+8>>2]=+(((c[e+4>>2]|0)-(c[l+4>>2]|0)+(((c[e>>2]|0)-(c[l>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=e;return}}while(0);c[5022]=c[b+20>>2];i=e;return}function cp(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;j=c[b+212>>2]|0;if((j|0)==(c[b+216>>2]|0)?(g=(j|0)==0?1:j<<1,(j|0)<(g|0)):0){if(!g)h=0;else{c[5004]=(c[5004]|0)+1;h=fF((g<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+212>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<2)|0;if(l)c[l>>2]=c[(c[b+220>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}k=c[b+220>>2]|0;if(k){if(a[b+224>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0);j=c[b+212>>2]|0}c[b+220>>2]=0}a[b+224>>0]=1;c[b+220>>2]=h;c[b+216>>2]=g}g=(c[b+220>>2]|0)+(j<<2)|0;if(g)c[g>>2]=d;c[b+212>>2]=j+1;if(!e){i=f;return}pr(c[d+28>>2]|0,d);pr(c[d+32>>2]|0,d);i=f;return}function dp(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;k=c[a+212>>2]|0;a:do if((k|0)>0){f=c[a+220>>2]|0;g=0;while(1){h=f+(g<<2)|0;j=g+1|0;if((c[h>>2]|0)==(b|0))break;if((j|0)<(k|0))g=j;else break a}if((g|0)<(k|0)){c[h>>2]=c[f+(k+ -1<<2)>>2];c[(c[a+220>>2]|0)+(k+ -1<<2)>>2]=b;c[a+212>>2]=k+ -1}}while(0);a=c[b+28>>2]|0;g=c[a+488>>2]|0;b:do if((g|0)>0){f=c[a+496>>2]|0;h=0;while(1){j=f+(h<<2)|0;k=h+1|0;if((c[j>>2]|0)==(b|0))break;if((k|0)<(g|0))h=k;else break b}if((h|0)<(g|0)){c[j>>2]=c[f+(g+ -1<<2)>>2];c[(c[a+496>>2]|0)+(g+ -1<<2)>>2]=b;c[a+488>>2]=g+ -1;g=g+ -1|0}}while(0);c[a+256>>2]=(g|0)>0&1;a=c[b+32>>2]|0;f=c[a+488>>2]|0;if((f|0)<=0){j=f;j=(j|0)>0;j=j&1;k=a+256|0;c[k>>2]=j;i=d;return}h=c[a+496>>2]|0;j=0;while(1){k=h+(j<<2)|0;g=j+1|0;if((c[k>>2]|0)==(b|0))break;if((g|0)<(f|0))j=g;else{e=19;break}}if((e|0)==19){j=(f|0)>0;j=j&1;k=a+256|0;c[k>>2]=j;i=d;return}if((j|0)>=(f|0)){j=f;j=(j|0)>0;j=j&1;k=a+256|0;c[k>>2]=j;i=d;return}c[k>>2]=c[h+(f+ -1<<2)>>2];c[(c[a+496>>2]|0)+(f+ -1<<2)>>2]=b;c[a+488>>2]=f+ -1;j=f+ -1|0;j=(j|0)>0;j=j&1;k=a+256|0;c[k>>2]=j;i=d;return}function ep(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;h=c[b+280>>2]|0;if((h|0)==(c[b+284>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[b+280>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[b+288>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[b+288>>2]|0;if(j){if(a[b+292>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[b+280>>2]|0}c[b+288>>2]=0}a[b+292>>0]=1;c[b+288>>2]=g;c[b+284>>2]=f}f=(c[b+288>>2]|0)+(h<<2)|0;if(!f){k=h+1|0;c[b+280>>2]=k;i=e;return}c[f>>2]=d;k=h+1|0;c[b+280>>2]=k;i=e;return}function fp(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[a+280>>2]|0;if((f|0)<=0){i=e;return}g=c[a+288>>2]|0;h=0;while(1){j=g+(h<<2)|0;k=h+1|0;if((c[j>>2]|0)==(b|0))break;if((k|0)<(f|0))h=k;else{d=7;break}}if((d|0)==7){i=e;return}if((h|0)>=(f|0)){i=e;return}c[j>>2]=c[g+(f+ -1<<2)>>2];c[(c[a+288>>2]|0)+(f+ -1<<2)>>2]=b;c[a+280>>2]=f+ -1;i=e;return}function gp(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+64>>2]&127](a,b);i=d;return}function hp(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+68>>2]&127](a,b);i=d;return}function ip(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+64>>2]&127](a,b);i=d;return}function jp(a,b){a=a|0;b=b|0;var d=0;d=i;Nb[c[(c[a>>2]|0)+68>>2]&127](a,b);i=d;return}function kp(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+16|0;yE(1704);f=c[b+212>>2]|0;h=c[b+180>>2]|0;if((h|0)<(f|0)){if((c[b+184>>2]|0)<(f|0)){if(!f){k=0;n=h}else{c[5004]=(c[5004]|0)+1;k=fF((f<<2|3)+16|0)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}n=c[b+180>>2]|0}if((n|0)>0){l=0;do{m=k+(l<<2)|0;if(m)c[m>>2]=c[(c[b+188>>2]|0)+(l<<2)>>2];l=l+1|0}while((l|0)!=(n|0))}l=c[b+188>>2]|0;if(l){if(a[b+192>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[b+188>>2]=0}a[b+192>>0]=1;c[b+188>>2]=k;c[b+184>>2]=f;k=b+188|0}else k=b+188|0;do{l=(c[k>>2]|0)+(h<<2)|0;if(l)c[l>>2]=0;h=h+1|0}while((h|0)!=(f|0))}c[b+180>>2]=f;f=0;while(1){if((f|0)>=(Pb[c[(c[b>>2]|0)+104>>2]&127](b)|0))break;c[(c[b+188>>2]|0)+(f<<2)>>2]=c[(c[b+220>>2]|0)+(f<<2)>>2];f=f+1|0}f=c[b+180>>2]|0;if((f|0)>1)Cp(b+176|0,0,f+ -1|0);if(!(Pb[c[(c[b>>2]|0)+104>>2]&127](b)|0))h=0;else h=c[b+188>>2]|0;f=c[b+196>>2]|0;v=c[b+180>>2]|0;k=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;c[f+4>>2]=d;c[f+12>>2]=h;c[f+16>>2]=v;c[f+20>>2]=k;k=c[f+32>>2]|0;if((k|0)<0){if((c[f+36>>2]|0)<0){h=c[f+40>>2]|0;if(h){if(a[f+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[f+40>>2]=0}a[f+44>>0]=1;c[f+40>>2]=0;c[f+36>>2]=0;h=k}else h=k;do{k=(c[f+40>>2]|0)+(h<<2)|0;if(k)c[k>>2]=0;h=h+1|0}while((h|0)!=0)}c[f+32>>2]=0;h=c[f+52>>2]|0;if((h|0)<0){if((c[f+56>>2]|0)<0){k=c[f+60>>2]|0;if(k){if(a[f+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[f+60>>2]=0}a[f+64>>0]=1;c[f+60>>2]=0;c[f+56>>2]=0}do{k=(c[f+60>>2]|0)+(h<<2)|0;if(k)c[k>>2]=0;h=h+1|0}while((h|0)!=0)}c[f+52>>2]=0;k=c[f+72>>2]|0;if((k|0)<0){if((c[f+76>>2]|0)<0){h=c[f+80>>2]|0;if(h){if(a[f+84>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[f+80>>2]=0}a[f+84>>0]=1;c[f+80>>2]=0;c[f+76>>2]=0;h=k}else h=k;do{k=(c[f+80>>2]|0)+(h<<2)|0;if(k)c[k>>2]=0;h=h+1|0}while((h|0)!=0)}c[f+72>>2]=0;f=c[b+200>>2]|0;m=c[(c[f>>2]|0)+8>>2]|0;k=c[b+8>>2]|0;h=c[b+24>>2]|0;h=Pb[c[(c[h>>2]|0)+36>>2]&127](h)|0;rc[m&127](f,k,h);h=c[b+204>>2]|0;k=c[b+24>>2]|0;f=c[b+196>>2]|0;yE(16584);m=c[h+28>>2]|0;if((m|0)<0){if((c[h+32>>2]|0)<0){l=c[h+36>>2]|0;if(l){if(a[h+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[h+36>>2]=0}a[h+40>>0]=1;c[h+36>>2]=0;c[h+32>>2]=0}do{l=(c[h+36>>2]|0)+(m<<2)|0;if(l)c[l>>2]=0;m=m+1|0}while((m|0)!=0)}c[h+28>>2]=0;l=c[h+8>>2]|0;if((l|0)>0){m=c[h+16>>2]|0;n=0;do{o=m+(n<<3)|0;q=c[o>>2]|0;if((q|0)==(n|0))r=n;else{p=o;do{r=m+(q<<3)|0;c[p>>2]=c[r>>2];r=c[r>>2]|0;p=m+(r<<3)|0;q=c[p>>2]|0}while((r|0)!=(q|0))}c[o>>2]=r;n=n+1|0}while((n|0)!=(l|0));q=c[h+8>>2]|0;if((q|0)>1){tC(h+4|0,0,q+ -1|0);q=c[h+8>>2]|0}if((q|0)>0){p=c[h+16>>2]|0;r=0;while(1){o=c[p+(r<<3)>>2]|0;m=r;do{m=m+1|0;l=(m|0)<(q|0);if(!l)break}while((c[p+(m<<3)>>2]|0)==(o|0));if((r|0)<(m|0)){n=c[b+16>>2]|0;t=1;s=r;do{u=c[n+(c[p+(s<<3)+4>>2]<<2)>>2]|0;if((c[u+208>>2]|0)==(o|0)){v=c[u+216>>2]|0;t=t&(v|0)!=1&(v|0)!=4}s=s+1|0}while((s|0)!=(m|0));if(t){do{s=c[n+(c[p+(r<<3)+4>>2]<<2)>>2]|0;if((c[s+208>>2]|0)==(o|0)?((c[s+216>>2]|0)+ -4|0)>>>0>=2:0)c[s+216>>2]=2;r=r+1|0}while((r|0)<(m|0))}else do{s=c[n+(c[p+(r<<3)+4>>2]<<2)>>2]|0;if((c[s+208>>2]|0)==(o|0)?(c[s+216>>2]|0)==2:0){c[s+216>>2]=3;g[s+220>>2]=0.0}r=r+1|0}while((r|0)<(m|0))}if(l)r=m;else break}}}m=Pb[c[(c[k>>2]|0)+36>>2]&127](k)|0;if((m|0)>0){l=0;do{n=gc[c[(c[k>>2]|0)+40>>2]&31](k,l)|0;o=c[n+740>>2]|0;p=c[n+744>>2]|0;if((o|0)!=0?(c[o+216>>2]|0)!=2:0)q=101;else q=99;if(((q|0)==99?(q=0,(p|0)!=0):0)?(c[p+216>>2]|0)!=2:0)q=101;if((q|0)==101){v=c[o+204>>2]|0;if((((v&2|0)!=0?(c[o+216>>2]|0)!=2:0)?(v&4|0)==0:0)?(c[p+204>>2]&3|0)==0:0){if(((c[p+216>>2]|0)+ -4|0)>>>0>=2)c[p+216>>2]=1;g[p+220>>2]=0.0}v=c[p+204>>2]|0;if((((v&2|0)!=0?(c[p+216>>2]|0)!=2:0)?(v&4|0)==0:0)?(c[o+204>>2]&3|0)==0:0){if(((c[o+216>>2]|0)+ -4|0)>>>0>=2)c[o+216>>2]=1;g[o+220>>2]=0.0}if((a[h+64>>0]|0)!=0?Yb[c[(c[k>>2]|0)+28>>2]&31](k,o,p)|0:0){p=c[h+28>>2]|0;if((p|0)==(c[h+32>>2]|0)?(j=(p|0)==0?1:p<<1,(p|0)<(j|0)):0){if(!j)o=0;else{c[5004]=(c[5004]|0)+1;o=fF((j<<2|3)+16|0)|0;if(!o)o=0;else{c[(o+19&-16)+ -4>>2]=o;o=o+19&-16}p=c[h+28>>2]|0}if((p|0)>0){r=0;do{q=o+(r<<2)|0;if(q)c[q>>2]=c[(c[h+36>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(p|0))}q=c[h+36>>2]|0;if(q){if(a[h+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[q+ -4>>2]|0);p=c[h+28>>2]|0}c[h+36>>2]=0}a[h+40>>0]=1;c[h+36>>2]=o;c[h+32>>2]=j}o=(c[h+36>>2]|0)+(p<<2)|0;if(o)c[o>>2]=n;c[h+28>>2]=p+1}}l=l+1|0}while((l|0)<(m|0))}j=c[5022]|0;v=(c[j+16>>2]|0)+ -1|0;c[j+16>>2]=v;do if(!v){if(c[j+4>>2]|0){Eb(e|0,0)|0;v=c[5008]|0;g[j+8>>2]=+(((c[e+4>>2]|0)-(c[v+4>>2]|0)+(((c[e>>2]|0)-(c[v>>2]|0)|0)*1e6|0)-(c[j+12>>2]|0)|0)>>>0)/1.0e3+ +g[j+8>>2];if(c[j+16>>2]|0)break;j=c[5022]|0}c[5022]=c[j+20>>2]}while(0);j=c[h+8>>2]|0;yE(16616);if(a[h+64>>0]|0){k=c[h+28>>2]|0;if((k|0)>1)rB(h+24|0,0,k+ -1|0);if((j|0)>0){n=1;o=0;l=0;do{r=c[h+16>>2]|0;m=c[r+(o<<3)>>2]|0;a:do if((o|0)<(j|0)){q=m;p=1;while(1){if((q|0)!=(m|0))break a;q=c[(c[b+16>>2]|0)+(c[r+(o<<3)+4>>2]<<2)>>2]|0;t=c[h+48>>2]|0;do if((t|0)==(c[h+52>>2]|0)){r=(t|0)==0?1:t<<1;if((t|0)>=(r|0))break;if(!r)s=0;else{c[5004]=(c[5004]|0)+1;s=fF((r<<2|3)+16|0)|0;if(!s)s=0;else{c[(s+19&-16)+ -4>>2]=s;s=s+19&-16}t=c[h+48>>2]|0}if((t|0)>0){u=0;do{v=s+(u<<2)|0;if(v)c[v>>2]=c[(c[h+56>>2]|0)+(u<<2)>>2];u=u+1|0}while((u|0)!=(t|0))}u=c[h+56>>2]|0;if(u){if(a[h+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[u+ -4>>2]|0);t=c[h+48>>2]|0}c[h+56>>2]=0}a[h+60>>0]=1;c[h+56>>2]=s;c[h+52>>2]=r}while(0);r=(c[h+56>>2]|0)+(t<<2)|0;if(r)c[r>>2]=q;c[h+48>>2]=t+1;v=c[q+216>>2]|0;p=p&((v|0)==2|(v|0)==5);o=o+1|0;if((o|0)>=(j|0))break a;r=c[h+16>>2]|0;q=c[r+(o<<3)>>2]|0}}else p=1;while(0);if((l|0)<(k|0)){r=c[h+36>>2]|0;q=r+(l<<2)|0;s=c[q>>2]|0;t=c[(c[s+740>>2]|0)+208>>2]|0;if((t|0)<=-1)t=c[(c[s+744>>2]|0)+208>>2]|0;if((t|0)==(m|0)){s=l;do{s=s+1|0;if((s|0)>=(k|0))break;t=c[r+(s<<2)>>2]|0;n=c[(c[t+740>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[t+744>>2]|0)+208>>2]|0}while((m|0)==(n|0));n=s;r=s-l|0}else{r=0;q=0}}else{r=0;q=0}if(!p)Zb[c[(c[f>>2]|0)+8>>2]&7](f,c[h+56>>2]|0,c[h+48>>2]|0,q,r,m);l=(r|0)==0?l:n;p=c[h+48>>2]|0;if((p|0)<0){if((c[h+52>>2]|0)<0){m=c[h+56>>2]|0;if(m){if(a[h+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[h+56>>2]=0}a[h+60>>0]=1;c[h+56>>2]=0;c[h+52>>2]=0}do{m=(c[h+56>>2]|0)+(p<<2)|0;if(m)c[m>>2]=0;p=p+1|0}while((p|0)!=0)}c[h+48>>2]=0}while((o|0)<(j|0))}}else{u=Pb[c[(c[k>>2]|0)+44>>2]&127](k)|0;v=Pb[c[(c[k>>2]|0)+36>>2]&127](k)|0;Zb[c[(c[f>>2]|0)+8>>2]&7](f,c[b+16>>2]|0,c[b+8>>2]|0,u,v,-1)}f=c[5022]|0;v=(c[f+16>>2]|0)+ -1|0;c[f+16>>2]=v;do if(!v){if(c[f+4>>2]|0){Eb(e|0,0)|0;v=c[5008]|0;g[f+8>>2]=+(((c[e+4>>2]|0)-(c[v+4>>2]|0)+(((c[e>>2]|0)-(c[v>>2]|0)|0)*1e6|0)-(c[f+12>>2]|0)|0)>>>0)/1.0e3+ +g[f+8>>2];if(c[f+16>>2]|0)break;f=c[5022]|0}c[5022]=c[f+20>>2]}while(0);lp(c[b+196>>2]|0);v=c[b+200>>2]|0;rc[c[(c[v>>2]|0)+16>>2]&127](v,d,c[b+72>>2]|0);b=c[5022]|0;v=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=v;if(v){i=e;return}do if(c[b+4>>2]|0){Eb(e|0,0)|0;v=c[5008]|0;g[b+8>>2]=+(((c[e+4>>2]|0)-(c[v+4>>2]|0)+(((c[e>>2]|0)-(c[v>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=e;return}}while(0);c[5022]=c[b+20>>2];i=e;return}function lp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=c[b+32>>2]|0;if(!e)f=0;else f=c[b+40>>2]|0;g=c[b+52>>2]|0;if(!g)h=0;else h=c[b+60>>2]|0;j=c[b+72>>2]|0;if(!j)k=0;else k=c[b+80>>2]|0;l=c[b+8>>2]|0;+ic[c[(c[l>>2]|0)+12>>2]&3](l,f,e,h,g,k,j,c[b+4>>2]|0,c[b+20>>2]|0,c[b+24>>2]|0);e=c[b+32>>2]|0;if((e|0)<0){if((c[b+36>>2]|0)<0){f=c[b+40>>2]|0;if(f){if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+36>>2]=0}do{f=(c[b+40>>2]|0)+(e<<2)|0;if(f)c[f>>2]=0;e=e+1|0}while((e|0)!=0)}c[b+32>>2]=0;e=c[b+52>>2]|0;if((e|0)<0){if((c[b+56>>2]|0)<0){f=c[b+60>>2]|0;if(f){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+56>>2]=0}do{f=(c[b+60>>2]|0)+(e<<2)|0;if(f)c[f>>2]=0;e=e+1|0}while((e|0)!=0)}c[b+52>>2]=0;e=c[b+72>>2]|0;if((e|0)>=0){c[b+72>>2]=0;i=d;return}if((c[b+76>>2]|0)<0){f=c[b+80>>2]|0;if(f){if(a[b+84>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=0;c[b+76>>2]=0;f=e}else f=e;do{e=(c[b+80>>2]|0)+(f<<2)|0;if(e)c[e>>2]=0;f=f+1|0}while((f|0)!=0);c[b+72>>2]=0;i=d;return}function mp(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;i=i+16|0;yE(1728);p=c[b+204>>2]|0;rc[c[(c[p>>2]|0)+8>>2]&127](p,b,c[b+24>>2]|0);if((c[b+308>>2]|0)>0){h=c[b+316>>2]|0;j=0;do{k=c[h+(j<<2)>>2]|0;l=c[k+740>>2]|0;k=c[k+744>>2]|0;if(((l|0)!=0?!((k|0)==0?1:(c[l+204>>2]&3|0)!=0):0)?(c[k+204>>2]&3|0)==0:0){m=c[l+208>>2]|0;l=c[k+208>>2]|0;k=c[(c[b+204>>2]|0)+16>>2]|0;n=c[k+(m<<3)>>2]|0;if((n|0)!=(m|0)){o=k+(m<<3)|0;do{m=k+(n<<3)|0;c[o>>2]=c[m>>2];m=c[m>>2]|0;o=k+(m<<3)|0;n=c[o>>2]|0}while((m|0)!=(n|0))}n=c[k+(l<<3)>>2]|0;if((n|0)!=(l|0)){o=k+(l<<3)|0;do{l=k+(n<<3)|0;c[o>>2]=c[l>>2];l=c[l>>2]|0;o=k+(l<<3)|0;n=c[o>>2]|0}while((l|0)!=(n|0))}if((m|0)!=(l|0)){c[k+(m<<3)>>2]=l;p=k+(l<<3)+4|0;c[p>>2]=(c[p>>2]|0)+(c[k+(m<<3)+4>>2]|0)}}j=j+1|0}while((j|0)<(c[b+308>>2]|0))}h=c[b+212>>2]|0;if((h|0)>0){k=c[b+220>>2]|0;j=0;do{l=c[k+(j<<2)>>2]|0;if((((a[l+20>>0]|0)!=0?(e=c[l+28>>2]|0,f=c[l+32>>2]|0,(e|0)!=0):0)?!((f|0)==0?1:(c[e+204>>2]&3|0)!=0):0)?(c[f+204>>2]&3|0)==0:0){n=c[e+208>>2]|0;m=c[f+208>>2]|0;l=c[(c[b+204>>2]|0)+16>>2]|0;o=c[l+(n<<3)>>2]|0;if((o|0)!=(n|0)){p=l+(n<<3)|0;do{n=l+(o<<3)|0;c[p>>2]=c[n>>2];n=c[n>>2]|0;p=l+(n<<3)|0;o=c[p>>2]|0}while((n|0)!=(o|0))}o=c[l+(m<<3)>>2]|0;if((o|0)!=(m|0)){p=l+(m<<3)|0;do{m=l+(o<<3)|0;c[p>>2]=c[m>>2];m=c[m>>2]|0;p=l+(m<<3)|0;o=c[p>>2]|0}while((m|0)!=(o|0))}if((n|0)!=(m|0)){c[l+(n<<3)>>2]=m;p=l+(m<<3)+4|0;c[p>>2]=(c[p>>2]|0)+(c[l+(n<<3)+4>>2]|0)}}j=j+1|0}while((j|0)!=(h|0))}p=c[b+204>>2]|0;Nb[c[(c[p>>2]|0)+12>>2]&127](p,b);b=c[5022]|0;p=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=p;if(p){i=d;return}do if(c[b+4>>2]|0){Eb(d|0,0)|0;p=c[5008]|0;g[b+8>>2]=+(((c[d+4>>2]|0)-(c[p+4>>2]|0)+(((c[d>>2]|0)-(c[p>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=d;return}}while(0);c[5022]=c[b+20>>2];i=d;return}function np(a){a=a|0;return}function op(a){a=a|0;return}function pp(d,e){d=d|0;e=+e;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0.0,D=0.0,E=0.0;f=i;i=i+352|0;yE(1872);if((c[d+232>>2]|0)>0){q=f+232|0;n=0;do{o=c[(c[d+240>>2]|0)+(n<<2)>>2]|0;g[o+244>>2]=1.0;A=c[o+216>>2]|0;do if(!((A|0)==2|(A|0)==5)?(c[o+204>>2]&3|0)==0:0){Bo(o+4|0,+g[o+312>>2],+g[o+316>>2],+g[o+320>>2],o+328|0,e,f+184|0);D=+g[q>>2]- +g[o+52>>2];C=+g[f+236>>2]- +g[o+56>>2];B=+g[f+240>>2]- +g[o+60>>2];if((a[d+44>>0]|0)!=0?(E=+g[o+252>>2],E*E!=0.0?E*E<D*D+C*C+B*B:0):0){yE(1896);if((c[(c[o+192>>2]|0)+4>>2]|0)<20){c[440]=(c[440]|0)+1;z=c[d+68>>2]|0;z=Pb[c[(c[z>>2]|0)+36>>2]&127](z)|0;A=c[d+24>>2]|0;g[f+252>>2]=1.0;b[f+256>>1]=1;b[f+258>>1]=-1;c[f+248>>2]=688;c[f+260>>2]=c[o+52>>2];c[f+264>>2]=c[o+56>>2];c[f+268>>2]=c[o+60>>2];c[f+272>>2]=c[o+64>>2];c[f+276>>2]=c[q+0>>2];c[f+280>>2]=c[q+4>>2];c[f+284>>2]=c[q+8>>2];c[f+288>>2]=c[q+12>>2];c[f+324>>2]=0;c[f+248>>2]=2160;c[f+328>>2]=o;g[f+332>>2]=0.0;c[f+336>>2]=z;c[f+340>>2]=A;B=+g[o+248>>2];c[f+136>>2]=0;g[f+140>>2]=1.0;g[f+144>>2]=1.0;g[f+148>>2]=1.0;g[f+152>>2]=0.0;c[f+128>>2]=16680;c[f+132>>2]=8;g[f+156>>2]=B;g[f+172>>2]=B;g[f+332>>2]=+g[d+56>>2];A=c[o+188>>2]|0;b[f+256>>1]=b[A+4>>1]|0;b[f+258>>1]=b[A+6>>1]|0;c[f+112>>2]=c[q+0>>2];c[f+116>>2]=c[q+4>>2];c[f+120>>2]=c[q+8>>2];c[f+124>>2]=c[q+12>>2];c[f+64>>2]=c[o+4>>2];c[f+68>>2]=c[o+8>>2];c[f+72>>2]=c[o+12>>2];c[f+76>>2]=c[o+16>>2];c[f+80>>2]=c[o+20>>2];c[f+84>>2]=c[o+24>>2];c[f+88>>2]=c[o+28>>2];c[f+92>>2]=c[o+32>>2];c[f+96>>2]=c[o+36>>2];c[f+100>>2]=c[o+40>>2];c[f+104>>2]=c[o+44>>2];c[f+108>>2]=c[o+48>>2];Ou(d,f+128|0,o+4|0,f+64|0,f+248|0,0.0);B=+g[f+252>>2];if(B<1.0){g[o+244>>2]=B;Bo(o+4|0,+g[o+312>>2],+g[o+316>>2],+g[o+320>>2],o+328|0,B*e,f+184|0);g[o+244>>2]=0.0;nr(o,f+184|0);r=4}else r=0;if(!r)p=11}else p=11;if((p|0)==11){p=0;r=0}s=c[5022]|0;A=(c[s+16>>2]|0)+ -1|0;c[s+16>>2]=A;do if(!A){if(c[s+4>>2]|0){Eb(f+248|0,0)|0;A=c[5008]|0;g[s+8>>2]=+(((c[f+252>>2]|0)-(c[A+4>>2]|0)+(((c[f+248>>2]|0)-(c[A>>2]|0)|0)*1e6|0)-(c[s+12>>2]|0)|0)>>>0)/1.0e3+ +g[s+8>>2];if(c[s+16>>2]|0)break;s=c[5022]|0}c[5022]=c[s+20>>2]}while(0);if((r|0)==4)break}nr(o,f+184|0)}while(0);n=n+1|0}while((n|0)<(c[d+232>>2]|0))}do if(a[d+275>>0]|0){yE(1920);q=c[d+308>>2]|0;if((q|0)>0){n=0;do{o=c[(c[d+316>>2]|0)+(n<<2)>>2]|0;x=c[o+740>>2]|0;if(!(c[x+236>>2]&2))x=0;p=c[o+744>>2]|0;if(!(c[p+236>>2]&2))p=0;z=c[o+748>>2]|0;if((z|0)>0){s=x+52|0;r=x+56|0;q=x+60|0;v=p+52|0;t=p+56|0;u=p+60|0;w=(p|0)==0;if(!x){x=p+228|0;y=0;do{e=+g[57]*+g[x>>2];if((e>0.0?(h=+g[o+(y*184|0)+124>>2],h!=0.0):0)?(j=e*h*+g[o+(y*184|0)+68>>2],k=e*h*+g[o+(y*184|0)+72>>2],l=e*h*+g[o+(y*184|0)+76>>2],g[f+48>>2]=-j,g[f+52>>2]=-k,g[f+56>>2]=-l,g[f+60>>2]=0.0,E=+g[o+(y*184|0)+56>>2]- +g[r>>2],D=+g[o+(y*184|0)+60>>2]- +g[q>>2],g[f+32>>2]=+g[o+(y*184|0)+52>>2]- +g[s>>2],g[f+36>>2]=E,g[f+40>>2]=D,g[f+44>>2]=0.0,D=+g[o+(y*184|0)+40>>2]- +g[t>>2],E=+g[o+(y*184|0)+44>>2]- +g[u>>2],g[f+16>>2]=+g[o+(y*184|0)+36>>2]- +g[v>>2],g[f+20>>2]=D,g[f+24>>2]=E,g[f+28>>2]=0.0,!w):0){g[f>>2]=j;g[f+4>>2]=k;g[f+8>>2]=l;g[f+12>>2]=0.0;ym(p,f,f+16|0);z=c[o+748>>2]|0}y=y+1|0}while((y|0)<(z|0))}else{z=x+228|0;A=p+228|0;y=0;do{e=+g[z>>2]*+g[A>>2];if((e>0.0?(m=+g[o+(y*184|0)+124>>2],m!=0.0):0)?(D=-(e*m*+g[o+(y*184|0)+72>>2]),E=-(e*m*+g[o+(y*184|0)+76>>2]),g[f+48>>2]=-(e*m*+g[o+(y*184|0)+68>>2]),g[f+52>>2]=D,g[f+56>>2]=E,g[f+60>>2]=0.0,E=+g[o+(y*184|0)+56>>2]- +g[r>>2],D=+g[o+(y*184|0)+60>>2]- +g[q>>2],g[f+32>>2]=+g[o+(y*184|0)+52>>2]- +g[s>>2],g[f+36>>2]=E,g[f+40>>2]=D,g[f+44>>2]=0.0,D=+g[o+(y*184|0)+40>>2]- +g[t>>2],E=+g[o+(y*184|0)+44>>2]- +g[u>>2],g[f+16>>2]=+g[o+(y*184|0)+36>>2]- +g[v>>2],g[f+20>>2]=D,g[f+24>>2]=E,g[f+28>>2]=0.0,ym(x,f+48|0,f+32|0),!w):0){D=-+g[f+52>>2];E=-+g[f+56>>2];g[f>>2]=-+g[f+48>>2];g[f+4>>2]=D;g[f+8>>2]=E;g[f+12>>2]=0.0;ym(p,f,f+16|0)}y=y+1|0}while((y|0)<(c[o+748>>2]|0))}q=c[d+308>>2]|0}n=n+1|0}while((n|0)<(q|0))}d=c[5022]|0;A=(c[d+16>>2]|0)+ -1|0;c[d+16>>2]=A;if(!A){if(c[d+4>>2]|0){Eb(f+248|0,0)|0;A=c[5008]|0;g[d+8>>2]=+(((c[f+252>>2]|0)-(c[A+4>>2]|0)+(((c[f+248>>2]|0)-(c[A>>2]|0)|0)*1e6|0)-(c[d+12>>2]|0)|0)>>>0)/1.0e3+ +g[d+8>>2];if(c[d+16>>2]|0)break;d=c[5022]|0}c[5022]=c[d+20>>2]}}while(0);d=c[5022]|0;A=(c[d+16>>2]|0)+ -1|0;c[d+16>>2]=A;if(A){i=f;return}do if(c[d+4>>2]|0){Eb(f+248|0,0)|0;A=c[5008]|0;g[d+8>>2]=+(((c[f+252>>2]|0)-(c[A+4>>2]|0)+(((c[f+248>>2]|0)-(c[A>>2]|0)|0)*1e6|0)-(c[d+12>>2]|0)|0)>>>0)/1.0e3+ +g[d+8>>2];if(!(c[d+16>>2]|0)){d=c[5022]|0;break}else{i=f;return}}while(0);c[5022]=c[d+20>>2];i=f;return}function qp(b,d){b=b|0;d=+d;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0;e=i;i=i+16|0;yE(1960);s=c[b+232>>2]|0;if((s|0)>0){f=0;do{h=c[(c[b+240>>2]|0)+(f<<2)>>2]|0;if(!(c[h+204>>2]&3)){k=+g[h+444>>2];n=+R(+(1.0-k),+d);p=n*+g[h+312>>2];g[h+312>>2]=p;m=n*+g[h+316>>2];g[h+316>>2]=m;n=n*+g[h+320>>2];g[h+320>>2]=n;j=+g[h+448>>2];q=+R(+(1.0-j),+d);l=q*+g[h+328>>2];g[h+328>>2]=l;o=q*+g[h+332>>2];g[h+332>>2]=o;q=q*+g[h+336>>2];g[h+336>>2]=q;do if(a[h+452>>0]|0){if(q*q+(l*l+o*o)<+g[h+464>>2]?p*p+m*m+n*n<+g[h+460>>2]:0){r=+g[h+456>>2];g[h+328>>2]=l*r;g[h+332>>2]=r*o;g[h+336>>2]=r*q;g[h+312>>2]=r*p;g[h+316>>2]=r*m;g[h+320>>2]=r*n;p=r*p;m=r*m;n=r*n;l=l*r;o=r*o;q=r*q}r=+Q(+(p*p+m*m+n*n));do if(r<k)if(r>.004999999888241291){p=p-p*(1.0/r)*.004999999888241291;g[h+312>>2]=p;m=m-m*(1.0/r)*.004999999888241291;g[h+316>>2]=m;n=n-n*(1.0/r)*.004999999888241291;g[h+320>>2]=n;break}else{c[h+312>>2]=0;c[h+316>>2]=0;c[h+320>>2]=0;c[h+324>>2]=0;p=0.0;m=0.0;n=0.0;break}while(0);k=+Q(+(l*l+o*o+q*q));if(k<j)if(k>.004999999888241291){g[h+328>>2]=l-l*(1.0/k)*.004999999888241291;g[h+332>>2]=o-o*(1.0/k)*.004999999888241291;g[h+336>>2]=q-q*(1.0/k)*.004999999888241291;break}else{c[h+328>>2]=0;c[h+332>>2]=0;c[h+336>>2]=0;c[h+340>>2]=0;break}}while(0);Bo(h+4|0,p,m,n,h+328|0,d,h+68|0);s=c[b+232>>2]|0}f=f+1|0}while((f|0)<(s|0))}b=c[5022]|0;s=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=s;if(s){i=e;return}do if(c[b+4>>2]|0){Eb(e|0,0)|0;s=c[5008]|0;g[b+8>>2]=+(((c[e+4>>2]|0)-(c[s+4>>2]|0)+(((c[e>>2]|0)-(c[s>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=e;return}}while(0);c[5022]=c[b+20>>2];i=e;return}function rp(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;if((a[b+273>>0]|0)!=0?(f=c[b+200>>2]|0,(f|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}a[b+273>>0]=0;c[b+200>>2]=d;c[(c[b+196>>2]|0)+8>>2]=d;i=e;return}function sp(a){a=a|0;return c[a+200>>2]|0}function tp(a){a=a|0;return c[a+212>>2]|0}function up(a,b){a=a|0;b=b|0;return c[(c[a+220>>2]|0)+(b<<2)>>2]|0}function vp(a,b){a=a|0;b=b|0;return c[(c[a+220>>2]|0)+(b<<2)>>2]|0}function wp(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0;d=i;Lb[c[(c[b>>2]|0)+32>>2]&511](b);e=Yb[c[(c[b>>2]|0)+16>>2]&31](b,104,1)|0;f=c[e+8>>2]|0;h=f+0|0;j=h+104|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));g[f+88>>2]=+g[a+248>>2];g[f+92>>2]=+g[a+252>>2];g[f+96>>2]=+g[a+256>>2];g[f+100>>2]=+g[a+260>>2];g[f>>2]=+g[a+92>>2];g[f+4>>2]=+g[a+96>>2];g[f+8>>2]=+g[a+100>>2];g[f+12>>2]=+g[a+104>>2];g[f+16>>2]=+g[a+108>>2];g[f+20>>2]=+g[a+116>>2];g[f+24>>2]=+g[a+120>>2];g[f+28>>2]=+g[a+124>>2];g[f+32>>2]=+g[a+128>>2];g[f+36>>2]=+g[a+132>>2];g[f+40>>2]=+g[a+140>>2];g[f+44>>2]=+g[a+144>>2];g[f+48>>2]=+g[a+148>>2];g[f+52>>2]=+g[a+152>>2];g[f+56>>2]=+g[a+168>>2];g[f+60>>2]=+g[a+172>>2];c[f+64>>2]=c[a+112>>2];c[f+68>>2]=c[a+156>>2];c[f+72>>2]=c[a+160>>2];c[f+76>>2]=c[a+164>>2];c[f+80>>2]=c[a+136>>2];Jb[c[(c[b>>2]|0)+20>>2]&31](b,e,1992,1145853764,f);f=c[a+8>>2]|0;if((f|0)>0){e=0;do{h=c[(c[a+16>>2]|0)+(e<<2)>>2]|0;if(c[h+236>>2]&2){j=Pb[c[(c[h>>2]|0)+16>>2]&127](h)|0;j=Yb[c[(c[b>>2]|0)+16>>2]&31](b,j,1)|0;f=Yb[c[(c[h>>2]|0)+20>>2]&31](h,c[j+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,j,f,1497645650,h);f=c[a+8>>2]|0}e=e+1|0}while((e|0)<(f|0))}if((c[a+212>>2]|0)<=0){Vu(a,b);j=c[b>>2]|0;j=j+36|0;j=c[j>>2]|0;Lb[j&511](b);i=d;return}e=0;do{j=c[(c[a+220>>2]|0)+(e<<2)>>2]|0;f=Pb[c[(c[j>>2]|0)+36>>2]&127](j)|0;f=Yb[c[(c[b>>2]|0)+16>>2]&31](b,f,1)|0;h=Yb[c[(c[j>>2]|0)+40>>2]&31](j,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,h,1397641027,j);e=e+1|0}while((e|0)<(c[a+212>>2]|0));Vu(a,b);j=c[b>>2]|0;j=j+36|0;j=c[j>>2]|0;Lb[j&511](b);i=d;return}function xp(a,b){a=a|0;b=b|0;c[a+72>>2]=b;return}function yp(a){a=a|0;return c[a+72>>2]|0}function zp(a){a=a|0;return 2}function Ap(a,b){a=a|0;b=b|0;return}function Bp(a,b){a=a|0;b=+b;var d=0,e=0,f=0;d=i;i=i+16|0;yE(1664);if((c[a+280>>2]|0)>0){e=0;do{f=c[(c[a+288>>2]|0)+(e<<2)>>2]|0;tc[c[(c[f>>2]|0)+8>>2]&7](f,a,b);e=e+1|0}while((e|0)<(c[a+280>>2]|0))}a=c[5022]|0;f=(c[a+16>>2]|0)+ -1|0;c[a+16>>2]=f;if(f){i=d;return}do if(c[a+4>>2]|0){Eb(d|0,0)|0;f=c[5008]|0;g[a+8>>2]=+(((c[d+4>>2]|0)-(c[f+4>>2]|0)+(((c[d>>2]|0)-(c[f>>2]|0)|0)*1e6|0)-(c[a+12>>2]|0)|0)>>>0)/1.0e3+ +g[a+8>>2];if(!(c[a+16>>2]|0)){a=c[5022]|0;break}else{i=d;return}}while(0);c[5022]=c[a+20>>2];i=d;return}function Cp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;while(1){f=c[a+12>>2]|0;g=c[f+(((b+d|0)/2|0)<<2)>>2]|0;l=b;k=d;while(1){h=c[(c[g+28>>2]|0)+208>>2]|0;if((h|0)>-1)while(1){j=c[f+(l<<2)>>2]|0;m=c[(c[j+28>>2]|0)+208>>2]|0;if((m|0)<=-1)m=c[(c[j+32>>2]|0)+208>>2]|0;if((m|0)<(h|0))l=l+1|0;else break}else{m=c[(c[g+32>>2]|0)+208>>2]|0;while(1){j=c[f+(l<<2)>>2]|0;n=c[(c[j+28>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[j+32>>2]|0)+208>>2]|0;if((n|0)<(m|0))l=l+1|0;else break}}if((h|0)>-1)while(1){m=c[f+(k<<2)>>2]|0;n=c[(c[m+28>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[m+32>>2]|0)+208>>2]|0;if((h|0)<(n|0))k=k+ -1|0;else break}else{h=c[(c[g+32>>2]|0)+208>>2]|0;while(1){m=c[f+(k<<2)>>2]|0;n=c[(c[m+28>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[m+32>>2]|0)+208>>2]|0;if((h|0)<(n|0))k=k+ -1|0;else break}}if((l|0)<=(k|0)){c[f+(l<<2)>>2]=m;c[(c[a+12>>2]|0)+(k<<2)>>2]=j;l=l+1|0;k=k+ -1|0}if((l|0)>(k|0))break;f=c[a+12>>2]|0}if((k|0)>(b|0))Cp(a,b,k);if((l|0)<(d|0))b=l;else break}i=e;return}function Dp(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Ep(a){a=a|0;return a+12|0}function Fp(a){a=a|0;return 2144}function Gp(a,b){a=a|0;b=b|0;g[a>>2]=1.0;g[a+4>>2]=1.0;g[a+8>>2]=1.0;g[a+12>>2]=0.0;return}function Hp(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Ip(a){a=a|0;return+(+g[a+28>>2]*+g[a+12>>2])}function Jp(a){a=a|0;return 52}function Kp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=h;if(h)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+28>>2]=+g[a+28>>2];g[b+32>>2]=+g[a+32>>2];g[b+36>>2]=+g[a+36>>2];g[b+40>>2]=+g[a+40>>2];g[b+12>>2]=+g[a+12>>2];g[b+16>>2]=+g[a+16>>2];g[b+20>>2]=+g[a+20>>2];g[b+24>>2]=+g[a+24>>2];g[b+44>>2]=+g[a+44>>2];i=e;return 2112}function Lp(a){a=a|0;return 0}function Mp(a,b,c){a=a|0;b=b|0;c=c|0;return}function Np(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Op(a,d){a=a|0;d=d|0;var e=0,f=0,g=0;e=i;g=c[d>>2]|0;f=c[a+80>>2]|0;if((g|0)==(f|0)){d=0;i=e;return d|0}if(!((b[a+10>>1]&b[d+4>>1])<<16>>16)){d=0;i=e;return d|0}if(!((b[d+6>>1]&b[a+8>>1])<<16>>16)){d=0;i=e;return d|0}d=c[a+92>>2]|0;d=Yb[c[(c[d>>2]|0)+28>>2]&31](d,f,g)|0;i=e;return d|0}function Pp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;e=i;f=c[b>>2]|0;if((f|0)==(c[a+80>>2]|0)){h=1.0;i=e;return+h}if(c[f+204>>2]&4){h=1.0;i=e;return+h}if((+g[a+28>>2]- +g[a+12>>2])*+g[b+8>>2]+(+g[a+32>>2]- +g[a+16>>2])*+g[b+12>>2]+(+g[a+36>>2]- +g[a+20>>2])*+g[b+16>>2]>=-+g[a+84>>2]){h=1.0;i=e;return+h}g[a+4>>2]=+g[b+40>>2];c[a+76>>2]=f;if(d){c[a+44>>2]=c[b+8>>2];c[a+48>>2]=c[b+12>>2];c[a+52>>2]=c[b+16>>2];c[a+56>>2]=c[b+20>>2]}else{m=+g[b+8>>2];l=+g[b+12>>2];k=+g[b+16>>2];j=m*+g[f+20>>2]+l*+g[f+24>>2]+k*+g[f+28>>2];h=m*+g[f+36>>2]+l*+g[f+40>>2]+k*+g[f+44>>2];g[a+44>>2]=+g[f+4>>2]*m+ +g[f+8>>2]*l+ +g[f+12>>2]*k;g[a+48>>2]=j;g[a+52>>2]=h;g[a+56>>2]=0.0}c[a+60>>2]=c[b+24>>2];c[a+64>>2]=c[b+28>>2];c[a+68>>2]=c[b+32>>2];c[a+72>>2]=c[b+36>>2];m=+g[b+40>>2];i=e;return+m}function Qp(a){a=a|0;var b=0;b=i;Tp(a);i=b;return}function Rp(a){a=a|0;var b=0;b=i;Tp(a);gF(a);i=b;return}function Sp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;j=i;if((h|0)<0){r=c[b+8>>2]|0;+ic[c[(c[r>>2]|0)+12>>2]&3](r,d,e,f,g,c[b+12>>2]|0,c[b+16>>2]|0,c[b+4>>2]|0,c[b+20>>2]|0,c[b+24>>2]|0);i=j;return}m=c[b+16>>2]|0;a:do if((m|0)>0){l=c[b+12>>2]|0;o=0;while(1){k=l+(o<<2)|0;p=c[k>>2]|0;n=c[(c[p+28>>2]|0)+208>>2]|0;if((n|0)>-1)p=n;else p=c[(c[p+32>>2]|0)+208>>2]|0;n=o+1|0;if((p|0)==(h|0))break a;if((n|0)<(m|0))o=n;else{o=n;k=0;break}}}else{o=0;k=0}while(0);if((o|0)<(m|0)){n=c[b+12>>2]|0;l=0;do{q=c[n+(o<<2)>>2]|0;p=c[(c[q+28>>2]|0)+208>>2]|0;if((p|0)<=-1)p=c[(c[q+32>>2]|0)+208>>2]|0;l=((p|0)==(h|0)&1)+l|0;o=o+1|0}while((o|0)<(m|0))}else l=0;h=c[b+4>>2]|0;if((c[h+72>>2]|0)<2){r=c[b+8>>2]|0;+ic[c[(c[r>>2]|0)+12>>2]&3](r,d,e,f,g,k,l,h,c[b+20>>2]|0,c[b+24>>2]|0);i=j;return}if((e|0)>0){o=c[b+32>>2]|0;p=c[b+36>>2]|0;h=0;while(1){m=d+(h<<2)|0;if((o|0)==(p|0)){n=(p|0)==0?1:p<<1;if((p|0)<(n|0)){if(!n)o=0;else{c[5004]=(c[5004]|0)+1;o=fF((n<<2|3)+16|0)|0;if(!o)o=0;else{c[(o+19&-16)+ -4>>2]=o;o=o+19&-16}p=c[b+32>>2]|0}if((p|0)>0){r=0;do{q=o+(r<<2)|0;if(q)c[q>>2]=c[(c[b+40>>2]|0)+(r<<2)>>2];r=r+1|0}while((r|0)!=(p|0))}q=c[b+40>>2]|0;if(q){if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[q+ -4>>2]|0);p=c[b+32>>2]|0}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=o;c[b+36>>2]=n;o=p}else{o=p;n=p}}else n=p;p=(c[b+40>>2]|0)+(o<<2)|0;if(p)c[p>>2]=c[m>>2];o=o+1|0;c[b+32>>2]=o;h=h+1|0;if((h|0)==(e|0))break;else p=n}}if((g|0)>0){m=c[b+52>>2]|0;n=c[b+56>>2]|0;d=0;while(1){e=f+(d<<2)|0;if((m|0)==(n|0)){h=(n|0)==0?1:n<<1;if((n|0)<(h|0)){if(!h)m=0;else{c[5004]=(c[5004]|0)+1;m=fF((h<<2|3)+16|0)|0;if(!m)m=0;else{c[(m+19&-16)+ -4>>2]=m;m=m+19&-16}n=c[b+52>>2]|0}if((n|0)>0){p=0;do{o=m+(p<<2)|0;if(o)c[o>>2]=c[(c[b+60>>2]|0)+(p<<2)>>2];p=p+1|0}while((p|0)!=(n|0))}o=c[b+60>>2]|0;if(o){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[o+ -4>>2]|0);n=c[b+52>>2]|0}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=m;c[b+56>>2]=h;m=n}else{m=n;h=n}}else h=n;n=(c[b+60>>2]|0)+(m<<2)|0;if(n)c[n>>2]=c[e>>2];m=m+1|0;c[b+52>>2]=m;d=d+1|0;if((d|0)==(g|0))break;else n=h}}if((l|0)>0){e=c[b+72>>2]|0;h=c[b+76>>2]|0;f=0;while(1){g=k+(f<<2)|0;if((e|0)==(h|0)){d=(h|0)==0?1:h<<1;if((h|0)<(d|0)){if(!d)e=0;else{c[5004]=(c[5004]|0)+1;e=fF((d<<2|3)+16|0)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}h=c[b+72>>2]|0}if((h|0)>0){m=0;do{n=e+(m<<2)|0;if(n)c[n>>2]=c[(c[b+80>>2]|0)+(m<<2)>>2];m=m+1|0}while((m|0)!=(h|0))}m=c[b+80>>2]|0;if(m){if(a[b+84>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0);h=c[b+72>>2]|0}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=e;c[b+76>>2]=d;e=h}else{e=h;d=h}}else d=h;h=(c[b+80>>2]|0)+(e<<2)|0;if(h)c[h>>2]=c[g>>2];e=e+1|0;c[b+72>>2]=e;f=f+1|0;if((f|0)==(l|0))break;else h=d}}else e=c[b+72>>2]|0;if(((c[b+52>>2]|0)+e|0)<=(c[(c[b+4>>2]|0)+72>>2]|0)){i=j;return}lp(b);i=j;return}function Tp(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=2240;e=c[b+80>>2]|0;if(e){if(a[b+84>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+80>>2]=0}a[b+84>>0]=1;c[b+80>>2]=0;c[b+72>>2]=0;c[b+76>>2]=0;e=c[b+60>>2]|0;if(e){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;e=c[b+40>>2]|0;if(!e){a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;e=b+36|0;c[e>>2]=0;i=d;return}if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+40>>2]=0;a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;e=b+36|0;c[e>>2]=0;i=d;return}function Up(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0;f=i;i=i+128|0;no(f+64|0,d,b+48|0);c[b+1064>>2]=c[f+64>>2];c[b+1068>>2]=c[f+68>>2];c[b+1072>>2]=c[f+72>>2];c[b+1076>>2]=c[f+76>>2];c[b+1080>>2]=c[f+80>>2];c[b+1084>>2]=c[f+84>>2];c[b+1088>>2]=c[f+88>>2];c[b+1092>>2]=c[f+92>>2];c[b+1096>>2]=c[f+96>>2];c[b+1100>>2]=c[f+100>>2];c[b+1104>>2]=c[f+104>>2];c[b+1108>>2]=c[f+108>>2];c[b+1112>>2]=c[f+112>>2];c[b+1116>>2]=c[f+116>>2];c[b+1120>>2]=c[f+120>>2];c[b+1124>>2]=c[f+124>>2];no(f,e,b+112|0);c[b+1128>>2]=c[f+0>>2];c[b+1132>>2]=c[f+4>>2];c[b+1136>>2]=c[f+8>>2];c[b+1140>>2]=c[f+12>>2];c[b+1144>>2]=c[f+16>>2];c[b+1148>>2]=c[f+20>>2];c[b+1152>>2]=c[f+24>>2];c[b+1156>>2]=c[f+28>>2];c[b+1160>>2]=c[f+32>>2];c[b+1164>>2]=c[f+36>>2];c[b+1168>>2]=c[f+40>>2];c[b+1172>>2]=c[f+44>>2];c[b+1176>>2]=c[f+48>>2];c[b+1180>>2]=c[f+52>>2];c[b+1184>>2]=c[f+56>>2];c[b+1188>>2]=c[f+60>>2];w=+g[b+1176>>2]- +g[b+1112>>2];x=+g[b+1180>>2]- +g[b+1116>>2];t=+g[b+1184>>2]- +g[b+1120>>2];r=+g[b+1084>>2];q=+g[b+1104>>2];m=+g[b+1088>>2];h=+g[b+1100>>2];s=+g[b+1096>>2];n=+g[b+1080>>2];o=+g[b+1064>>2];l=+g[b+1068>>2];k=+g[b+1072>>2];j=1.0/((r*q-m*h)*o+l*(m*s-q*n)+(h*n-r*s)*k);p=(h*n-r*s)*j;v=(r*q-m*h)*j*w+j*(h*k-q*l)*x+j*(m*l-r*k)*t;u=w*(m*s-q*n)*j+x*j*(q*o-s*k)+j*(n*k-m*o)*t;t=w*p+j*(s*l-h*o)*x+j*(r*o-n*l)*t;g[b+1256>>2]=v;g[b+1260>>2]=u;g[b+1264>>2]=t;g[b+1268>>2]=0.0;g[b+840>>2]=v;x=+g[b+680>>2];w=+g[b+696>>2];do if(!(x>w)){if(x>v){c[b+856>>2]=2;g[b+824>>2]=v-x;break}if(w<v){c[b+856>>2]=1;g[b+824>>2]=v-w;break}else{c[b+856>>2]=0;g[b+824>>2]=0.0;break}}else{c[b+856>>2]=0;g[b+824>>2]=0.0}while(0);g[b+844>>2]=u;w=+g[b+684>>2];v=+g[b+700>>2];do if(!(w>v)){if(w>u){c[b+860>>2]=2;g[b+828>>2]=u-w;break}if(v<u){c[b+860>>2]=1;g[b+828>>2]=u-v;break}else{c[b+860>>2]=0;g[b+828>>2]=0.0;break}}else{c[b+860>>2]=0;g[b+828>>2]=0.0}while(0);g[b+848>>2]=t;v=+g[b+688>>2];u=+g[b+704>>2];do if(!(v>u)){if(v>t){c[b+864>>2]=2;g[b+832>>2]=t-v;break}if(u<t){c[b+864>>2]=1;g[b+832>>2]=t-u;break}else{c[b+864>>2]=0;g[b+832>>2]=0.0;break}}else{c[b+864>>2]=0;g[b+832>>2]=0.0}while(0);B=+g[b+1128>>2];A=+g[b+1144>>2];w=+g[b+1160>>2];u=+g[b+1132>>2];v=+g[b+1148>>2];x=+g[b+1164>>2];C=(r*q-m*h)*j*u+j*(h*k-q*l)*v+j*(m*l-r*k)*x;t=(m*s-q*n)*j*u+j*(q*o-s*k)*v+j*(n*k-m*o)*x;z=B*p+j*(s*l-h*o)*A+j*(r*o-n*l)*w;y=p*+g[b+1136>>2]+j*(s*l-h*o)*+g[b+1152>>2]+j*(r*o-n*l)*+g[b+1168>>2];do if(z<1.0)if(z>-1.0){g[b+1192>>2]=+Y(+-(p*u+j*(s*l-h*o)*v+j*(r*o-n*l)*x),+y);C=z<-1.0?-1.0:z;g[b+1196>>2]=+W(+(C>1.0?1.0:C));g[b+1200>>2]=+Y(+-(B*(m*s-q*n)*j+A*j*(q*o-s*k)+j*(n*k-m*o)*w),+(B*(r*q-m*h)*j+A*j*(h*k-q*l)+j*(m*l-r*k)*w));break}else{g[b+1192>>2]=-+Y(+C,+t);g[b+1196>>2]=-1.5707963705062866;g[b+1200>>2]=0.0;break}else{g[b+1192>>2]=+Y(+C,+t);g[b+1196>>2]=1.5707963705062866;g[b+1200>>2]=0.0}while(0);g[b+1236>>2]=0.0;t=q*(B*q-w*k)-m*(A*k-B*m);u=k*(A*k-B*m)-q*(w*m-A*q);v=m*(w*m-A*q)-k*(B*q-w*k);g[b+1220>>2]=0.0;x=A*(A*k-B*m)-w*(B*q-w*k);y=w*(w*m-A*q)-B*(A*k-B*m);z=B*(B*q-w*k)-A*(w*m-A*q);g[b+1252>>2]=0.0;C=1.0/+Q(+(t*t+u*u+v*v));g[b+1208>>2]=t*C;g[b+1212>>2]=u*C;g[b+1216>>2]=v*C;C=1.0/+Q(+((w*m-A*q)*(w*m-A*q)+(B*q-w*k)*(B*q-w*k)+(A*k-B*m)*(A*k-B*m)));g[b+1224>>2]=(w*m-A*q)*C;g[b+1228>>2]=(B*q-w*k)*C;g[b+1232>>2]=(A*k-B*m)*C;C=1.0/+Q(+(x*x+y*y+z*z));g[b+1240>>2]=x*C;g[b+1244>>2]=y*C;g[b+1248>>2]=z*C;if(!(a[b+1301>>0]|0)){i=f;return}j=+g[(c[b+28>>2]|0)+344>>2];h=+g[(c[b+32>>2]|0)+344>>2];if(j<1.1920928955078125e-7)d=1;else d=h<1.1920928955078125e-7&1;a[b+1280>>0]=d;if(j+h>0.0){g[b+1272>>2]=h/(j+h);h=h/(j+h)}else{g[b+1272>>2]=.5;h=.5}g[b+1276>>2]=1.0-h;i=f;return}function Vp(a,b,d,e,f,h,j,k,l){a=a|0;b=b|0;d=d|0;e=+e;f=+f;h=+h;j=+j;k=+k;l=+l;var m=0,n=0;m=i;i=i+128|0;if(!b){i=m;return}n=c[a+28>>2]|0;g[m+80>>2]=+g[n+4>>2];g[m+84>>2]=+g[n+20>>2];g[m+88>>2]=+g[n+36>>2];g[m+92>>2]=0.0;g[m+96>>2]=+g[n+8>>2];g[m+100>>2]=+g[n+24>>2];g[m+104>>2]=+g[n+40>>2];g[m+108>>2]=0.0;g[m+112>>2]=+g[n+12>>2];g[m+116>>2]=+g[n+28>>2];g[m+120>>2]=+g[n+44>>2];g[m+124>>2]=0.0;a=c[a+32>>2]|0;g[m+32>>2]=+g[a+4>>2];g[m+36>>2]=+g[a+20>>2];g[m+40>>2]=+g[a+36>>2];g[m+44>>2]=0.0;g[m+48>>2]=+g[a+8>>2];g[m+52>>2]=+g[a+24>>2];g[m+56>>2]=+g[a+40>>2];g[m+60>>2]=0.0;g[m+64>>2]=+g[a+12>>2];g[m+68>>2]=+g[a+28>>2];g[m+72>>2]=+g[a+44>>2];g[m+76>>2]=0.0;f=f- +g[n+56>>2];h=h- +g[n+60>>2];g[m+16>>2]=e- +g[n+52>>2];g[m+20>>2]=f;g[m+24>>2]=h;g[m+28>>2]=0.0;k=k- +g[a+56>>2];l=l- +g[a+60>>2];g[m>>2]=j- +g[a+52>>2];g[m+4>>2]=k;g[m+8>>2]=l;g[m+12>>2]=0.0;Mo(b,m+80|0,m+32|0,m+16|0,m,d,n+396|0,+g[n+344>>2],a+396|0,+g[a+344>>2]);i=m;return}function Wp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0;e=i;if(!b){i=e;return}L=c[a+28>>2]|0;u=+g[L+4>>2];t=+g[L+20>>2];s=+g[L+36>>2];q=+g[L+8>>2];p=+g[L+24>>2];o=+g[L+40>>2];m=+g[L+12>>2];k=+g[L+28>>2];h=+g[L+44>>2];a=c[a+32>>2]|0;K=+g[a+4>>2];J=+g[a+20>>2];I=+g[a+36>>2];G=+g[a+8>>2];F=+g[a+24>>2];E=+g[a+40>>2];C=+g[a+12>>2];A=+g[a+28>>2];y=+g[a+44>>2];c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;l=+g[d>>2];j=+g[d+4>>2];f=+g[d+8>>2];g[b+16>>2]=u*l+t*j+s*f;g[b+20>>2]=q*l+p*j+o*f;g[b+24>>2]=m*l+k*j+h*f;g[b+28>>2]=0.0;B=-+g[d>>2];z=-+g[d+4>>2];x=-+g[d+8>>2];g[b+32>>2]=K*B+J*z+I*x;g[b+36>>2]=G*B+F*z+E*x;g[b+40>>2]=C*B+A*z+y*x;g[b+44>>2]=0.0;v=(u*l+t*j+s*f)*+g[L+396>>2];r=(q*l+p*j+o*f)*+g[L+400>>2];n=(m*l+k*j+h*f)*+g[L+404>>2];g[b+48>>2]=v;g[b+52>>2]=r;g[b+56>>2]=n;g[b+60>>2]=0.0;H=(K*B+J*z+I*x)*+g[a+396>>2];D=(G*B+F*z+E*x)*+g[a+400>>2];w=(C*B+A*z+y*x)*+g[a+404>>2];g[b+64>>2]=H;g[b+68>>2]=D;g[b+72>>2]=w;g[b+76>>2]=0.0;g[b+80>>2]=(K*B+J*z+I*x)*H+(G*B+F*z+E*x)*D+(C*B+A*z+y*x)*w+(v*(u*l+t*j+s*f)+r*(q*l+p*j+o*f)+n*(m*l+k*j+h*f));i=e;return}function Xp(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0;f=i;h=+Yp(+g[b+(d<<2)+1192>>2],+g[b+(d<<6)+868>>2],+g[b+(d<<6)+872>>2]);g[b+(d<<6)+920>>2]=h;j=+g[b+(d<<6)+868>>2];k=+g[b+(d<<6)+872>>2];do if(!(j>k)){if(j>h){c[b+(d<<6)+924>>2]=1;g[b+(d<<6)+916>>2]=h-j;if(h-j>3.1415927410125732){g[b+(d<<6)+916>>2]=h-j+-6.2831854820251465;break}if(!(h-j<-3.1415927410125732))break;g[b+(d<<6)+916>>2]=h-j+6.2831854820251465;break}if(!(k<h)){c[b+(d<<6)+924>>2]=0;e=14;break}c[b+(d<<6)+924>>2]=2;g[b+(d<<6)+916>>2]=h-k;if(h-k>3.1415927410125732){g[b+(d<<6)+916>>2]=h-k+-6.2831854820251465;break}if(h-k<-3.1415927410125732)g[b+(d<<6)+916>>2]=h-k+6.2831854820251465}else{c[b+(d<<6)+924>>2]=0;e=14}while(0);if((e|0)==14?(a[b+(d<<6)+912>>0]|0)==0:0){d=0;i=f;return d|0}d=1;i=f;return d|0}function Yp(a,b,c){a=+a;b=+b;c=+c;var d=0;d=i;if(b>=c){b=a;i=d;return+b}if(a<b){b=+ab(+(b-a),6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;b=+P(+b);c=+ab(+(c-a),6.2831854820251465);if(!(c<-3.1415927410125732)){if(c>3.1415927410125732)c=c+-6.2831854820251465}else c=c+6.2831854820251465;if(b<+P(+c)){b=a;i=d;return+b}b=a+6.2831854820251465;i=d;return+b}if(!(a>c)){b=a;i=d;return+b}c=+ab(+(a-c),6.2831854820251465);if(!(c<-3.1415927410125732)){if(c>3.1415927410125732)c=c+-6.2831854820251465}else c=c+6.2831854820251465;c=+P(+c);b=+ab(+(a-b),6.2831854820251465);if(!(b<-3.1415927410125732)){if(b>3.1415927410125732)b=b+-6.2831854820251465}else b=b+6.2831854820251465;if(!(+P(+b)<c)){b=a;i=d;return+b}b=a+-6.2831854820251465;i=d;return+b}function Zp(b){b=b|0;var d=0.0,e=0.0,f=0.0,h=0,j=0,k=0,l=0,m=0.0,n=0.0;h=i;i=i+16|0;if(!(a[b+1308>>0]|0)){i=h;return}g[b+928>>2]=0.0;g[b+992>>2]=0.0;g[b+1056>>2]=0.0;c[b+712>>2]=0;c[b+716>>2]=0;c[b+720>>2]=0;c[b+724>>2]=0;Up(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);Lb[c[(c[b>>2]|0)+44>>2]&511](b);d=+g[b+1284>>2];e=+g[b+1288>>2];f=+g[b+1292>>2];if(+g[b+696>>2]>=+g[b+680>>2]){if(!(a[b+1300>>0]|0)){l=b+1160|0;k=b+1144|0;j=b+1128|0}else{l=b+1096|0;k=b+1080|0;j=b+1064|0}m=+g[l>>2];n=+g[k>>2];g[h>>2]=+g[j>>2];g[h+4>>2]=n;g[h+8>>2]=m;g[h+12>>2]=0.0;Vp(b,b+176|0,h,d,e,f,d,e,f)}if(+g[b+700>>2]>=+g[b+684>>2]){if(!(a[b+1300>>0]|0)){l=b+1164|0;k=b+1148|0;j=b+1132|0}else{l=b+1100|0;k=b+1084|0;j=b+1068|0}n=+g[l>>2];m=+g[k>>2];g[h>>2]=+g[j>>2];g[h+4>>2]=m;g[h+8>>2]=n;g[h+12>>2]=0.0;Vp(b,b+260|0,h,d,e,f,d,e,f)}if(+g[b+704>>2]>=+g[b+688>>2]){if(!(a[b+1300>>0]|0)){j=b+1168|0;l=b+1152|0;k=b+1136|0}else{j=b+1104|0;l=b+1088|0;k=b+1072|0}n=+g[j>>2];m=+g[l>>2];g[h>>2]=+g[k>>2];g[h+4>>2]=m;g[h+8>>2]=n;g[h+12>>2]=0.0;Vp(b,b+344|0,h,d,e,f,d,e,f)}if(Xp(b,0)|0){c[h+0>>2]=c[b+1208>>2];c[h+4>>2]=c[b+1212>>2];c[h+8>>2]=c[b+1216>>2];c[h+12>>2]=c[b+1220>>2];Wp(b,b+428|0,h)}if(Xp(b,1)|0){c[h+0>>2]=c[b+1224>>2];c[h+4>>2]=c[b+1228>>2];c[h+8>>2]=c[b+1232>>2];c[h+12>>2]=c[b+1236>>2];Wp(b,b+512|0,h)}if(!(Xp(b,2)|0)){i=h;return}c[h+0>>2]=c[b+1240>>2];c[h+4>>2]=c[b+1244>>2];c[h+8>>2]=c[b+1248>>2];c[h+12>>2]=c[b+1252>>2];Wp(b,b+596|0,h);i=h;return}function _p(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;if(a[b+1308>>0]|0){c[d>>2]=0;c[d+4>>2]=0;i=e;return}Up(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);c[d>>2]=0;c[d+4>>2]=6;if((c[b+856>>2]|0)==0?(a[b+788>>0]|0)==0:0){g=0;f=6}else{c[d>>2]=1;c[d+4>>2]=5;g=1;f=5}if(!((c[b+860>>2]|0)==0?(a[b+789>>0]|0)==0:0)){g=g+1|0;c[d>>2]=g;f=f+ -1|0;c[d+4>>2]=f}if(!((c[b+864>>2]|0)==0?(a[b+790>>0]|0)==0:0)){c[d>>2]=g+1;c[d+4>>2]=f+ -1}if(Xp(b,0)|0){c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1}if(Xp(b,1)|0){c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1}if(!(Xp(b,2)|0)){i=e;return}c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1;i=e;return}function $p(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;g=c[b+28>>2]|0;f=c[b+32>>2]|0;if(!(a[b+1301>>0]|0)){aq(b,d,bq(b,d,0,g+4|0,f+4|0,g+312|0,f+312|0,g+328|0,f+328|0)|0,g+4|0,f+4|0,g+312|0,f+312|0,g+328|0,f+328|0)|0;i=e;return}else{bq(b,d,aq(b,d,0,g+4|0,f+4|0,g+312|0,f+312|0,g+328|0,f+328|0)|0,g+4|0,f+4|0,g+312|0,f+312|0,g+328|0,f+328|0)|0;i=e;return}}function aq(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0;o=i;i=i+16|0;n=0;do{p=b+(n<<6)+868|0;if(!((c[b+(n<<6)+924>>2]|0)==0?(a[b+(n<<6)+912>>0]|0)==0:0)){q=b+(n<<4)+1208|0;c[o+0>>2]=c[q+0>>2];c[o+4>>2]=c[q+4>>2];c[o+8>>2]=c[q+8>>2];c[o+12>>2]=c[q+12>>2];q=c[b+1304>>2]>>(n*3|0)+9;if(!(q&1))g[b+(n<<6)+896>>2]=+g[c[d+32>>2]>>2];if(!(q&2))g[b+(n<<6)+904>>2]=+g[c[d+32>>2]>>2];if(!(q&4))g[b+(n<<6)+900>>2]=+g[d+4>>2];e=(cq(b,p,f,h,j,k,l,m,d,e,o,1,0)|0)+e|0}n=n+1|0}while((n|0)!=3);i=o;return e|0}function bq(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0;n=i;i=i+80|0;g[n+76>>2]=0.0;g[n+24>>2]=0.0;g[n+28>>2]=.10000000149011612;g[n+32>>2]=300.0;g[n+16>>2]=1.0;g[n+20>>2]=-1.0;g[n+44>>2]=0.0;g[n+48>>2]=.20000000298023224;g[n+52>>2]=0.0;g[n+56>>2]=0.0;g[n+36>>2]=1.0;g[n+40>>2]=.5;c[n+72>>2]=0;g[n+64>>2]=0.0;a[n+60>>0]=0;o=0;do{q=c[b+(o<<2)+856>>2]|0;p=a[b+o+788>>0]|0;do if(!((q|0)==0&p<<24>>24==0)){g[n+56>>2]=0.0;c[n+72>>2]=q;g[n+68>>2]=+g[b+(o<<2)+840>>2];g[n+64>>2]=+g[b+(o<<2)+824>>2];g[n+36>>2]=+g[b+732>>2];a[n+60>>0]=p;g[n+20>>2]=+g[b+(o<<2)+696>>2];g[n+40>>2]=+g[b+728>>2];g[n+16>>2]=+g[b+(o<<2)+680>>2];g[n+32>>2]=0.0;g[n+28>>2]=+g[b+(o<<2)+808>>2];g[n+24>>2]=+g[b+(o<<2)+792>>2];g[n>>2]=+g[b+(o<<2)+1064>>2];g[n+4>>2]=+g[b+(o<<2)+1080>>2];g[n+8>>2]=+g[b+(o<<2)+1096>>2];g[n+12>>2]=0.0;p=c[b+1304>>2]>>o*3;if(!(p&1))q=c[d+32>>2]|0;else q=b+(o<<2)+740|0;g[n+44>>2]=+g[q>>2];if(!(p&2))q=c[d+32>>2]|0;else q=b+(o<<2)+772|0;g[n+52>>2]=+g[q>>2];if(!(p&4))p=d+4|0;else p=b+(o<<2)+756|0;g[n+48>>2]=+g[p>>2];if(!(a[b+1301>>0]|0)){e=(cq(b,n+16|0,f,h,j,k,l,m,d,e,n,0,0)|0)+e|0;break}q=o+1|0;if(!(c[b+(((q|0)==3?0:q)<<6)+924>>2]|0))p=1;else p=(c[b+(((o+2|0)%3|0)<<6)+924>>2]|0)==0&1;e=(cq(b,n+16|0,f,h,j,k,l,m,d,e,n,0,p)|0)+e|0}while(0);o=o+1|0}while((o|0)!=3);i=n;return e|0}function cq(b,d,e,f,h,j,k,l,m,n,o,p,q){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;var r=0,s=0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0;r=i;s=aa(c[m+24>>2]|0,n)|0;u=(a[d+44>>0]|0)==0;n=c[d+56>>2]|0;if(u&(n|0)==0){f=0;i=r;return f|0}E=c[((p|0)!=0?m+12|0:m+8|0)>>2]|0;D=c[((p|0)!=0?m+20|0:m+16|0)>>2]|0;g[E+(s<<2)>>2]=+g[o>>2];g[E+(s+1<<2)>>2]=+g[o+4>>2];g[E+(s+2<<2)>>2]=+g[o+8>>2];g[D+(s<<2)>>2]=-+g[o>>2];g[D+(s+1<<2)>>2]=-+g[o+4>>2];g[D+(s+2<<2)>>2]=-+g[o+8>>2];do if(!p){v=+g[b+1176>>2];if(!(a[b+1301>>0]|0)){y=v- +g[e+48>>2];B=+g[b+1180>>2]- +g[e+52>>2];C=+g[b+1184>>2]- +g[e+56>>2];A=+g[o+8>>2];x=+g[o+4>>2];z=+g[o>>2];E=c[m+12>>2]|0;g[E+(s<<2)>>2]=B*A-C*x;g[E+(s+1<<2)>>2]=C*z-y*A;g[E+(s+2<<2)>>2]=y*x-B*z;z=+g[b+1176>>2]- +g[f+48>>2];B=+g[b+1180>>2]- +g[f+52>>2];x=+g[b+1184>>2]- +g[f+56>>2];y=+g[o+8>>2];A=+g[o+4>>2];C=+g[o>>2];E=c[m+20>>2]|0;g[E+(s<<2)>>2]=-(B*y-x*A);g[E+(s+1<<2)>>2]=-(x*C-z*y);g[E+(s+2<<2)>>2]=-(z*A-B*C);break}K=v- +g[f+48>>2];I=+g[b+1180>>2]- +g[f+52>>2];G=+g[b+1184>>2]- +g[f+56>>2];J=+g[o>>2];H=+g[o+4>>2];F=+g[o+8>>2];M=+g[b+1112>>2]- +g[e+48>>2];z=+g[b+1116>>2]- +g[e+52>>2];v=+g[b+1120>>2]- +g[e+56>>2];A=+g[d+52>>2]- +g[d+48>>2];L=J*(J*M+H*z+F*v)+J*A-J*(K*J+I*H+G*F);B=H*(J*M+H*z+F*v)+H*A-H*(K*J+I*H+G*F);A=F*(J*M+H*z+F*v)+F*A-F*(K*J+I*H+G*F);w=+g[b+1272>>2];C=+g[b+1276>>2];y=F*(z-H*(J*M+H*z+F*v)+w*B)-H*(v-F*(J*M+H*z+F*v)+w*A);x=J*(v-F*(J*M+H*z+F*v)+w*A)-F*(M-J*(J*M+H*z+F*v)+w*L);v=H*(M-J*(J*M+H*z+F*v)+w*L)-J*(z-H*(J*M+H*z+F*v)+w*B);z=F*(I-H*(K*J+I*H+G*F)-C*B)-H*(G-F*(K*J+I*H+G*F)-C*A);A=J*(G-F*(K*J+I*H+G*F)-C*A)-F*(K-J*(K*J+I*H+G*F)-C*L);B=H*(K-J*(K*J+I*H+G*F)-C*L)-J*(I-H*(K*J+I*H+G*F)-C*B);if((a[b+1280>>0]|0)!=0&(q|0)==0){z=C*z;A=C*A;B=C*B;y=w*y;x=w*x;v=w*v}E=c[m+12>>2]|0;g[E+(s<<2)>>2]=y;g[E+(s+1<<2)>>2]=x;g[E+(s+2<<2)>>2]=v;E=c[m+20>>2]|0;g[E+(s<<2)>>2]=-z;g[E+(s+1<<2)>>2]=-A;g[E+(s+2<<2)>>2]=-B}while(0);if((n|0)!=0?+g[d>>2]==+g[d+4>>2]:0){u=c[m+28>>2]|0;g[u+(s<<2)>>2]=0.0}else t=11;do if((t|0)==11){t=c[m+28>>2]|0;g[t+(s<<2)>>2]=0.0;if(!u){g[(c[m+32>>2]|0)+(s<<2)>>2]=+g[d+28>>2];if(n){u=t;break}v=+g[d+8>>2];if(p)z=v;else z=-v;x=+g[d+52>>2];y=+g[d>>2];w=+g[d+4>>2];A=+g[m>>2]*+g[d+32>>2];do if(!(y>w))if(!(y==w)){z=z/A;if(z<0.0){if(x>=y?y-z>x:0){w=(y-x)/z;break}w=x<y?0.0:1.0;break}if(z>0.0){if(x<=w?w-z<x:0){w=(w-x)/z;break}w=x>w?0.0:1.0}else w=0.0}else w=0.0;else w=1.0;while(0);g[t+(s<<2)>>2]=w*v+ +g[t+(s<<2)>>2];g[(c[m+36>>2]|0)+(s<<2)>>2]=-+g[d+12>>2];g[(c[m+40>>2]|0)+(s<<2)>>2]=+g[d+12>>2]}if(n)u=t;else{E=1;i=r;return E|0}}while(0);v=+g[m>>2]*+g[d+32>>2]*+g[d+48>>2];t=u+(s<<2)|0;w=+g[t>>2];if(p)v=w-v;else v=v+w;g[t>>2]=v;g[(c[m+32>>2]|0)+(s<<2)>>2]=+g[d+36>>2];if(+g[d>>2]==+g[d+4>>2]){g[(c[m+36>>2]|0)+(s<<2)>>2]=-3.4028234663852886e+38;g[(c[m+40>>2]|0)+(s<<2)>>2]=3.4028234663852886e+38;E=1;i=r;return E|0}u=(c[m+36>>2]|0)+(s<<2)|0;if((n|0)==1){g[u>>2]=0.0;g[(c[m+40>>2]|0)+(s<<2)>>2]=3.4028234663852886e+38}else{g[u>>2]=-3.4028234663852886e+38;g[(c[m+40>>2]|0)+(s<<2)>>2]=0.0}v=+g[d+40>>2];if(!(v>0.0)){E=1;i=r;return E|0}if(p){L=+g[o>>2];M=+g[o+4>>2];w=+g[o+8>>2];w=+g[k>>2]*L+ +g[k+4>>2]*M+ +g[k+8>>2]*w-(L*+g[l>>2]+M*+g[l+4>>2]+w*+g[l+8>>2])}else{L=+g[o>>2];M=+g[o+4>>2];w=+g[o+8>>2];w=+g[h>>2]*L+ +g[h+4>>2]*M+ +g[h+8>>2]*w-(L*+g[j>>2]+M*+g[j+4>>2]+w*+g[j+8>>2])}if((n|0)==1){if(!(w<0.0)){E=1;i=r;return E|0}v=-(w*v);if(!(+g[t>>2]<v)){E=1;i=r;return E|0}g[t>>2]=v;E=1;i=r;return E|0}else{if(!(w>0.0)){E=1;i=r;return E|0}v=-(w*v);if(!(+g[t>>2]>v)){E=1;i=r;return E|0}g[t>>2]=v;E=1;i=r;return E|0}return 0}function dq(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0;d=+g[(c[a+28>>2]|0)+344>>2];b=+g[(c[a+32>>2]|0)+344>>2];if(b==0.0)b=1.0;else b=d/(d+b);f=1.0-b;e=b*+g[a+1116>>2]+f*+g[a+1180>>2];d=b*+g[a+1120>>2]+f*+g[a+1184>>2];g[a+1284>>2]=b*+g[a+1112>>2]+f*+g[a+1176>>2];g[a+1288>>2]=e;g[a+1292>>2]=d;g[a+1296>>2]=0.0;return}function eq(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;if(e>>>0<3)if((b|0)==4){g[a+(e<<2)+772>>2]=d;c[a+1304>>2]=c[a+1304>>2]|2<<e*3;i=f;return}else if((b|0)==2){g[a+(e<<2)+756>>2]=d;c[a+1304>>2]=c[a+1304>>2]|4<<e*3;i=f;return}else if((b|0)==3){g[a+(e<<2)+740>>2]=d;c[a+1304>>2]=c[a+1304>>2]|1<<e*3;i=f;return}else{i=f;return}if((e+ -3|0)>>>0>=3){i=f;return}if((b|0)==4){g[a+(e+ -3<<6)+904>>2]=d;c[a+1304>>2]=c[a+1304>>2]|2<<e*3;i=f;return}else if((b|0)==2){g[a+(e+ -3<<6)+900>>2]=d;c[a+1304>>2]=c[a+1304>>2]|4<<e*3;i=f;return}else if((b|0)==3){g[a+(e+ -3<<6)+896>>2]=d;c[a+1304>>2]=c[a+1304>>2]|1<<e*3;i=f;return}else{i=f;return}}function fq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=i;do if(c>>>0<3)if((b|0)==4){e=+g[a+(c<<2)+772>>2];break}else if((b|0)==2){e=+g[a+(c<<2)+756>>2];break}else if((b|0)==3){e=+g[a+(c<<2)+740>>2];break}else{e=0.0;break}else if((c+ -3|0)>>>0<3)if((b|0)==4){e=+g[a+(c+ -3<<6)+904>>2];break}else if((b|0)==2){e=+g[a+(c+ -3<<6)+900>>2];break}else if((b|0)==3){e=+g[a+(c+ -3<<6)+896>>2];break}else{e=0.0;break}else e=0.0;while(0);i=d;return+e}function gq(a){a=a|0;return}function hq(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function iq(a){a=a|0;return 252}function jq(a,b,e){a=a|0;b=b|0;e=e|0;var f=0;f=i;Zr(a,b,e)|0;g[b+52>>2]=+g[a+48>>2];g[b+56>>2]=+g[a+52>>2];g[b+60>>2]=+g[a+56>>2];g[b+64>>2]=+g[a+60>>2];g[b+68>>2]=+g[a+64>>2];g[b+72>>2]=+g[a+68>>2];g[b+76>>2]=+g[a+72>>2];g[b+80>>2]=+g[a+76>>2];g[b+84>>2]=+g[a+80>>2];g[b+88>>2]=+g[a+84>>2];g[b+92>>2]=+g[a+88>>2];g[b+96>>2]=+g[a+92>>2];g[b+100>>2]=+g[a+96>>2];g[b+104>>2]=+g[a+100>>2];g[b+108>>2]=+g[a+104>>2];g[b+112>>2]=+g[a+108>>2];g[b+116>>2]=+g[a+112>>2];g[b+120>>2]=+g[a+116>>2];g[b+124>>2]=+g[a+120>>2];g[b+128>>2]=+g[a+124>>2];g[b+132>>2]=+g[a+128>>2];g[b+136>>2]=+g[a+132>>2];g[b+140>>2]=+g[a+136>>2];g[b+144>>2]=+g[a+140>>2];g[b+148>>2]=+g[a+144>>2];g[b+152>>2]=+g[a+148>>2];g[b+156>>2]=+g[a+152>>2];g[b+160>>2]=+g[a+156>>2];g[b+164>>2]=+g[a+160>>2];g[b+168>>2]=+g[a+164>>2];g[b+172>>2]=+g[a+168>>2];g[b+176>>2]=+g[a+172>>2];g[b+228>>2]=+g[a+868>>2];g[b+212>>2]=+g[a+872>>2];g[b+196>>2]=+g[a+680>>2];g[b+180>>2]=+g[a+696>>2];g[b+232>>2]=+g[a+932>>2];g[b+216>>2]=+g[a+936>>2];g[b+200>>2]=+g[a+684>>2];g[b+184>>2]=+g[a+700>>2];g[b+236>>2]=+g[a+996>>2];g[b+220>>2]=+g[a+1e3>>2];g[b+204>>2]=+g[a+688>>2];g[b+188>>2]=+g[a+704>>2];c[b+244>>2]=d[a+1300>>0];c[b+248>>2]=d[a+1301>>0];i=f;return 2464}function kq(b,d,e,f,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;m=i;c[b+4>>2]=4;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=3.4028234663852886e+38;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=d;c[b+32>>2]=e;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;c[b>>2]=2504;g[b+688>>2]=0.0;g[b+692>>2]=-1.0;g[b+696>>2]=.8999999761581421;g[b+700>>2]=.30000001192092896;g[b+704>>2]=1.0;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;a[b+736>>0]=0;a[b+737>>0]=0;a[b+738>>0]=0;a[b+739>>0]=1;a[b+740>>0]=l&1;c[b+748>>2]=0;c[b+600>>2]=c[f+0>>2];c[b+604>>2]=c[f+4>>2];c[b+608>>2]=c[f+8>>2];c[b+612>>2]=c[f+12>>2];u=+g[d+4>>2];w=+g[d+20>>2];t=+g[d+36>>2];p=+g[j>>2];x=+g[j+4>>2];v=+g[j+8>>2];do if(!(u*p+w*x+t*v>=.9999998807907104))if(!(u*p+w*x+t*v<=-.9999998807907104)){s=u*v-t*p;o=x*(t*x-w*v)-p*(u*v-t*p);r=w*p-u*x;n=v*(u*v-t*p)-x*(w*p-u*x);q=t*x-w*v;p=p*(w*p-u*x)-v*(t*x-w*v);break}else{s=+g[d+24>>2];o=+g[d+44>>2];r=+g[d+40>>2];n=+g[d+12>>2];q=+g[d+8>>2];p=+g[d+28>>2];break}else{s=+g[d+24>>2];o=-+g[d+44>>2];r=+g[d+40>>2];n=-+g[d+12>>2];q=+g[d+8>>2];p=-+g[d+28>>2]}while(0);g[b+552>>2]=n;g[b+556>>2]=q;g[b+560>>2]=+g[j>>2];g[b+564>>2]=0.0;g[b+568>>2]=p;g[b+572>>2]=s;g[b+576>>2]=+g[j+4>>2];g[b+580>>2]=0.0;g[b+584>>2]=o;g[b+588>>2]=r;g[b+592>>2]=+g[j+8>>2];g[b+596>>2]=0.0;t=+g[j+4>>2];s=+g[k+8>>2];u=+g[j+8>>2];q=+g[k+4>>2];r=+g[k>>2];x=+g[j>>2];do if(s*u+(t*q+r*x)<-.9999998807907104)if(+P(+u)>.7071067690849304){x=1.0/+Q(+(t*t+u*u));w=0.0;v=-(u*x);x=t*x;t=0.0;break}else{u=1.0/+Q(+(t*t+x*x));w=0.0;v=x*u;x=0.0;t=-(t*u);break}else{y=+Q(+((s*u+(t*q+r*x)+1.0)*2.0));w=y*.5;v=(u*r-s*x)*(1.0/y);x=(q*x-t*r)*(1.0/y);t=(t*s-u*q)*(1.0/y)}while(0);B=n*w+o*v-p*x;z=p*w+n*x-o*t;A=o*w+p*t-n*v;p=-(n*t)-p*v-o*x;u=-t;t=-v;v=-x;y=z*v+(w*B+p*u)-A*t;x=A*u+(w*z+p*t)-B*v;w=B*t+(w*A+p*v)-z*u;c[b+664>>2]=c[h+0>>2];c[b+668>>2]=c[h+4>>2];c[b+672>>2]=c[h+8>>2];c[b+676>>2]=c[h+12>>2];g[b+616>>2]=y;g[b+620>>2]=q*w-s*x;g[b+624>>2]=+g[k>>2];g[b+628>>2]=0.0;g[b+632>>2]=x;g[b+636>>2]=s*y-r*w;g[b+640>>2]=+g[k+4>>2];g[b+644>>2]=0.0;g[b+648>>2]=w;g[b+652>>2]=r*x-q*y;g[b+656>>2]=+g[k+8>>2];g[b+660>>2]=0.0;g[b+732>>2]=l?-1.0:1.0;i=m;return}function lq(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h=i;Yr(b,4,d);c[b>>2]=2504;c[b+552>>2]=c[e+0>>2];c[b+556>>2]=c[e+4>>2];c[b+560>>2]=c[e+8>>2];c[b+564>>2]=c[e+12>>2];c[b+568>>2]=c[e+16>>2];c[b+572>>2]=c[e+20>>2];c[b+576>>2]=c[e+24>>2];c[b+580>>2]=c[e+28>>2];c[b+584>>2]=c[e+32>>2];c[b+588>>2]=c[e+36>>2];c[b+592>>2]=c[e+40>>2];c[b+596>>2]=c[e+44>>2];c[b+600>>2]=c[e+48>>2];c[b+604>>2]=c[e+52>>2];c[b+608>>2]=c[e+56>>2];c[b+612>>2]=c[e+60>>2];c[b+616>>2]=c[e+0>>2];c[b+620>>2]=c[e+4>>2];c[b+624>>2]=c[e+8>>2];c[b+628>>2]=c[e+12>>2];c[b+632>>2]=c[e+16>>2];c[b+636>>2]=c[e+20>>2];c[b+640>>2]=c[e+24>>2];c[b+644>>2]=c[e+28>>2];c[b+648>>2]=c[e+32>>2];c[b+652>>2]=c[e+36>>2];c[b+656>>2]=c[e+40>>2];c[b+660>>2]=c[e+44>>2];c[b+664>>2]=c[e+48>>2];c[b+668>>2]=c[e+52>>2];c[b+672>>2]=c[e+56>>2];c[b+676>>2]=c[e+60>>2];g[b+688>>2]=0.0;g[b+692>>2]=-1.0;g[b+696>>2]=.8999999761581421;g[b+700>>2]=.30000001192092896;g[b+704>>2]=1.0;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;a[b+736>>0]=0;a[b+737>>0]=0;a[b+738>>0]=0;a[b+739>>0]=1;a[b+740>>0]=f&1;c[b+748>>2]=0;d=c[b+28>>2]|0;n=+g[b+600>>2];m=+g[b+604>>2];l=+g[b+608>>2];k=n*+g[d+20>>2]+m*+g[d+24>>2]+l*+g[d+28>>2]+ +g[d+56>>2];j=n*+g[d+36>>2]+m*+g[d+40>>2]+l*+g[d+44>>2]+ +g[d+60>>2];g[b+664>>2]=n*+g[d+4>>2]+m*+g[d+8>>2]+l*+g[d+12>>2]+ +g[d+52>>2];g[b+668>>2]=k;g[b+672>>2]=j;g[b+676>>2]=0.0;g[b+732>>2]=f?-1.0:1.0;i=h;return}function mq(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0.0,O=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0;d=i;i=i+176|0;if(!(a[b+738>>0]|0)){i=d;return}g[b+36>>2]=0.0;g[b+744>>2]=0.0;a:do if(!(a[b+736>>0]|0)){L=c[b+28>>2]|0;A=+g[b+600>>2];z=+g[b+604>>2];j=+g[b+608>>2];h=A*+g[L+20>>2]+z*+g[L+24>>2]+j*+g[L+28>>2]+ +g[L+56>>2];y=c[b+32>>2]|0;l=+g[b+664>>2];m=+g[y+4>>2];n=+g[b+668>>2];o=+g[y+8>>2];p=+g[b+672>>2];q=+g[y+12>>2];s=+g[y+20>>2];t=+g[y+24>>2];u=+g[y+28>>2];e=+g[y+36>>2];x=+g[y+40>>2];w=+g[y+44>>2];r=+g[y+52>>2];v=+g[y+56>>2];f=+g[y+60>>2];B=l*s+n*t+p*u+v-h;k=A*+g[L+4>>2]+z*+g[L+8>>2]+j*+g[L+12>>2]+ +g[L+52>>2];j=A*+g[L+36>>2]+z*+g[L+40>>2]+j*+g[L+44>>2]+ +g[L+60>>2];z=l*m+n*o+p*q+r-k;A=l*e+n*x+p*w+f-j;if(z*z+B*B+A*A>1.1920928955078125e-7){K=1.0/+Q(+(z*z+B*B+A*A));g[d+128>>2]=z*K;g[d+132>>2]=B*K;g[d+136>>2]=A*K;g[d+140>>2]=0.0;A=A*K;B=B*K;z=z*K}else{g[d+128>>2]=1.0;g[d+132>>2]=0.0;g[d+136>>2]=0.0;g[d+140>>2]=0.0;A=0.0;B=0.0;z=1.0}if(+P(+A)>.7071067690849304){H=A*A+B*B;I=1.0/+Q(+H);g[d+144>>2]=0.0;K=-(I*A);g[d+148>>2]=K;J=I*B;g[d+152>>2]=J;g[d+160>>2]=H*I;g[d+164>>2]=-(z*J);g[d+168>>2]=z*K}else{J=z*z+B*B;K=1.0/+Q(+J);I=-(B*K);g[d+144>>2]=I;H=K*z;g[d+148>>2]=H;g[d+152>>2]=0.0;g[d+160>>2]=-(A*H);g[d+164>>2]=A*I;g[d+168>>2]=J*K}C=m;z=s;A=e;B=o;D=t;E=x;F=q;K=u;G=w;J=r;I=v;H=f;L=0;while(1){M=c[b+28>>2]|0;g[d+80>>2]=+g[M+4>>2];g[d+84>>2]=+g[M+20>>2];g[d+88>>2]=+g[M+36>>2];g[d+92>>2]=0.0;g[d+96>>2]=+g[M+8>>2];g[d+100>>2]=+g[M+24>>2];g[d+104>>2]=+g[M+40>>2];g[d+108>>2]=0.0;g[d+112>>2]=+g[M+12>>2];g[d+116>>2]=+g[M+28>>2];g[d+120>>2]=+g[M+44>>2];g[d+124>>2]=0.0;g[d+32>>2]=C;g[d+36>>2]=z;g[d+40>>2]=A;g[d+44>>2]=0.0;g[d+48>>2]=B;g[d+52>>2]=D;g[d+56>>2]=E;g[d+60>>2]=0.0;g[d+64>>2]=F;g[d+68>>2]=K;g[d+72>>2]=G;g[d+76>>2]=0.0;G=h- +g[M+56>>2];K=j- +g[M+60>>2];g[d+16>>2]=k- +g[M+52>>2];g[d+20>>2]=G;g[d+24>>2]=K;g[d+28>>2]=0.0;g[d>>2]=l*m+n*o+p*q+r-J;g[d+4>>2]=l*s+n*t+p*u+v-I;g[d+8>>2]=l*e+n*x+p*w+f-H;g[d+12>>2]=0.0;Mo(b+(L*84|0)+48|0,d+80|0,d+32|0,d+16|0,d,d+128+(L<<4)|0,M+396|0,+g[M+344>>2],y+396|0,+g[y+344>>2]);L=L+1|0;if((L|0)==3)break a;y=c[b+32>>2]|0;C=+g[y+4>>2];z=+g[y+20>>2];A=+g[y+36>>2];B=+g[y+8>>2];D=+g[y+24>>2];E=+g[y+40>>2];F=+g[y+12>>2];K=+g[y+28>>2];G=+g[y+44>>2];J=+g[y+52>>2];I=+g[y+56>>2];H=+g[y+60>>2]}}while(0);h=+g[b+560>>2];f=+g[b+576>>2];e=+g[b+592>>2];if(+P(+e)>.7071067690849304){j=1.0/+Q(+(f*f+e*e));o=0.0;n=-(e*j);m=f*j;l=(f*f+e*e)*j;k=-(h*f*j);j=h*-(e*j)}else{j=1.0/+Q(+(h*h+f*f));o=-(f*j);n=h*j;m=0.0;l=-(e*h*j);k=e*-(f*j);j=(h*h+f*f)*j}L=c[b+28>>2]|0;p=+g[L+4>>2];F=+g[L+8>>2];A=+g[L+12>>2];s=o*p+n*F+m*A;x=+g[L+20>>2];t=+g[L+24>>2];C=+g[L+28>>2];u=o*x+n*t+m*C;I=+g[L+36>>2];G=+g[L+40>>2];E=+g[L+44>>2];v=o*I+n*G+m*E;J=l*p+k*F+j*A;m=l*x+k*t+j*C;k=l*I+k*G+j*E;M=c[b+32>>2]|0;B=+g[M+4>>2];D=+g[M+20>>2];N=+g[M+36>>2];S=+g[M+8>>2];T=+g[M+24>>2];V=+g[M+40>>2];X=+g[M+12>>2];j=+g[M+28>>2];H=+g[M+44>>2];c[b+300>>2]=0;c[b+304>>2]=0;c[b+308>>2]=0;c[b+312>>2]=0;g[b+316>>2]=p*s+x*u+I*v;g[b+320>>2]=F*s+t*u+G*v;g[b+324>>2]=A*s+C*u+E*v;g[b+328>>2]=0.0;g[b+332>>2]=B*-s+D*-u+N*-v;g[b+336>>2]=S*-s+T*-u+V*-v;g[b+340>>2]=X*-s+j*-u+H*-v;g[b+344>>2]=0.0;o=(p*s+x*u+I*v)*+g[L+396>>2];K=(F*s+t*u+G*v)*+g[L+400>>2];q=(A*s+C*u+E*v)*+g[L+404>>2];g[b+348>>2]=o;g[b+352>>2]=K;g[b+356>>2]=q;g[b+360>>2]=0.0;R=(B*-s+D*-u+N*-v)*+g[M+396>>2];W=(S*-s+T*-u+V*-v)*+g[M+400>>2];l=(X*-s+j*-u+H*-v)*+g[M+404>>2];g[b+364>>2]=R;g[b+368>>2]=W;g[b+372>>2]=l;g[b+376>>2]=0.0;g[b+380>>2]=(B*-s+D*-u+N*-v)*R+(S*-s+T*-u+V*-v)*W+(X*-s+j*-u+H*-v)*l+(o*(p*s+x*u+I*v)+K*(F*s+t*u+G*v)+q*(A*s+C*u+E*v));M=c[b+28>>2]|0;v=+g[M+4>>2];u=+g[M+20>>2];s=+g[M+36>>2];q=+g[M+8>>2];K=+g[M+24>>2];o=+g[M+40>>2];l=+g[M+12>>2];H=+g[M+28>>2];j=+g[M+44>>2];L=c[b+32>>2]|0;X=+g[L+4>>2];W=+g[L+20>>2];V=+g[L+36>>2];T=+g[L+8>>2];S=+g[L+24>>2];R=+g[L+40>>2];N=+g[L+12>>2];D=+g[L+28>>2];B=+g[L+44>>2];c[b+384>>2]=0;c[b+388>>2]=0;c[b+392>>2]=0;c[b+396>>2]=0;g[b+400>>2]=J*v+m*u+k*s;g[b+404>>2]=J*q+m*K+k*o;g[b+408>>2]=J*l+m*H+k*j;g[b+412>>2]=0.0;g[b+416>>2]=X*-J+W*-m+V*-k;g[b+420>>2]=T*-J+S*-m+R*-k;g[b+424>>2]=N*-J+D*-m+B*-k;g[b+428>>2]=0.0;w=(J*v+m*u+k*s)*+g[M+396>>2];r=(J*q+m*K+k*o)*+g[M+400>>2];n=(J*l+m*H+k*j)*+g[M+404>>2];g[b+432>>2]=w;g[b+436>>2]=r;g[b+440>>2]=n;g[b+444>>2]=0.0;U=(X*-J+W*-m+V*-k)*+g[L+396>>2];O=(T*-J+S*-m+R*-k)*+g[L+400>>2];z=(N*-J+D*-m+B*-k)*+g[L+404>>2];g[b+448>>2]=U;g[b+452>>2]=O;g[b+456>>2]=z;g[b+460>>2]=0.0;g[b+464>>2]=(X*-J+W*-m+V*-k)*U+(T*-J+S*-m+R*-k)*O+(N*-J+D*-m+B*-k)*z+(w*(J*v+m*u+k*s)+r*(J*q+m*K+k*o)+n*(J*l+m*H+k*j));L=c[b+28>>2]|0;j=+g[L+4>>2];k=+g[L+20>>2];H=+g[L+36>>2];l=+g[L+8>>2];m=+g[L+24>>2];J=+g[L+40>>2];n=+g[L+12>>2];o=+g[L+28>>2];K=+g[L+44>>2];M=c[b+32>>2]|0;q=+g[M+4>>2];r=+g[M+20>>2];s=+g[M+36>>2];u=+g[M+8>>2];v=+g[M+24>>2];w=+g[M+40>>2];z=+g[M+12>>2];B=+g[M+28>>2];D=+g[M+44>>2];c[b+468>>2]=0;c[b+472>>2]=0;c[b+476>>2]=0;c[b+480>>2]=0;H=(p*h+F*f+A*e)*j+(x*h+t*f+C*e)*k+(I*h+G*f+E*e)*H;J=(p*h+F*f+A*e)*l+(x*h+t*f+C*e)*m+(I*h+G*f+E*e)*J;K=(p*h+F*f+A*e)*n+(x*h+t*f+C*e)*o+(I*h+G*f+E*e)*K;g[b+484>>2]=H;g[b+488>>2]=J;g[b+492>>2]=K;g[b+496>>2]=0.0;A=-(p*h+F*f+A*e);C=-(x*h+t*f+C*e);E=-(I*h+G*f+E*e);g[b+500>>2]=q*A+r*C+s*E;g[b+504>>2]=u*A+v*C+w*E;g[b+508>>2]=z*A+B*C+D*E;g[b+512>>2]=0.0;G=H*+g[L+396>>2];I=J*+g[L+400>>2];e=K*+g[L+404>>2];g[b+516>>2]=G;g[b+520>>2]=I;g[b+524>>2]=e;g[b+528>>2]=0.0;t=(q*A+r*C+s*E)*+g[M+396>>2];x=(u*A+v*C+w*E)*+g[M+400>>2];F=(z*A+B*C+D*E)*+g[M+404>>2];g[b+532>>2]=t;g[b+536>>2]=x;g[b+540>>2]=F;g[b+544>>2]=0.0;g[b+548>>2]=(q*A+r*C+s*E)*t+(u*A+v*C+w*E)*x+(z*A+B*C+D*E)*F+(G*H+I*J+e*K);g[b+724>>2]=0.0;e=+pq(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);g[b+728>>2]=e;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;do if(+g[b+692>>2]>=0.0){e=+ab(+(e- +g[b+688>>2]),6.2831854820251465);if(!(e<-3.1415927410125732)){if(e>3.1415927410125732)e=e+-6.2831854820251465}else e=e+6.2831854820251465;f=+g[b+692>>2];if(e<-f){a[b+716>>0]=1;g[b+708>>2]=-(e+f);g[b+712>>2]=1.0;break}if(e>f){a[b+716>>0]=1;g[b+708>>2]=f-e;g[b+712>>2]=-1.0}}while(0);L=c[b+28>>2]|0;T=+g[b+560>>2];U=+g[b+576>>2];X=+g[b+592>>2];V=T*+g[L+4>>2]+U*+g[L+8>>2]+X*+g[L+12>>2];W=T*+g[L+20>>2]+U*+g[L+24>>2]+X*+g[L+28>>2];X=T*+g[L+36>>2]+U*+g[L+40>>2]+X*+g[L+44>>2];M=c[b+32>>2]|0;g[b+720>>2]=1.0/(V*(V*+g[L+264>>2]+W*+g[L+280>>2]+X*+g[L+296>>2])+W*(V*+g[L+268>>2]+W*+g[L+284>>2]+X*+g[L+300>>2])+X*(V*+g[L+272>>2]+W*+g[L+288>>2]+X*+g[L+304>>2])+(V*(V*+g[M+264>>2]+W*+g[M+280>>2]+X*+g[M+296>>2])+W*(V*+g[M+268>>2]+W*+g[M+284>>2]+X*+g[M+300>>2])+X*(V*+g[M+272>>2]+W*+g[M+288>>2]+X*+g[M+304>>2])));i=d;return}function nq(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0;e=i;if(a[b+738>>0]|0){c[d>>2]=0;c[d+4>>2]=0;i=e;return}c[d>>2]=5;c[d+4>>2]=1;h=+pq(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);g[b+728>>2]=h;g[b+708>>2]=0.0;g[b+712>>2]=0.0;a[b+716>>0]=0;do if(+g[b+692>>2]>=0.0){h=+ab(+(h- +g[b+688>>2]),6.2831854820251465);if(!(h<-3.1415927410125732)){if(h>3.1415927410125732)h=h+-6.2831854820251465}else h=h+6.2831854820251465;j=+g[b+692>>2];if(h<-j){a[b+716>>0]=1;g[b+708>>2]=-(h+j);g[b+712>>2]=1.0;break}if(!(h>j))if(!(a[b+716>>0]|0)){f=13;break}else break;else{a[b+716>>0]=1;g[b+708>>2]=j-h;g[b+712>>2]=-1.0;break}}else f=13;while(0);if((f|0)==13?(a[b+737>>0]|0)==0:0){i=e;return}c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1;i=e;return}function oq(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0,O=0.0,P=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0;e=i;i=i+256|0;f=c[b+28>>2]|0;h=c[b+32>>2]|0;n=c[d+24>>2]|0;if(!(a[b+739>>0]|0)){no(e+192|0,f+4|0,b+552|0);no(e+128|0,h+4|0,b+616|0);q=+g[e+240>>2];o=+g[e+244>>2];j=+g[e+248>>2];k=+g[e+176>>2];p=+g[e+180>>2];l=+g[e+184>>2];Y=(a[b+736>>0]|0)==0;if(Y){N=c[d+8>>2]|0;g[N>>2]=1.0;g[N+(n+1<<2)>>2]=1.0;g[N+((n<<1)+2<<2)>>2]=1.0;N=c[d+16>>2]|0;g[N>>2]=-1.0;g[N+(n+1<<2)>>2]=-1.0;g[N+((n<<1)+2<<2)>>2]=-1.0;N=n<<1;_=n+1|0;Z=(n<<1)+2|0}else{N=n<<1;_=n+1|0;Z=(n<<1)+2|0}m=q- +g[f+52>>2];V=o- +g[f+56>>2];U=j- +g[f+60>>2];X=c[d+12>>2]|0;g[X>>2]=0.0;g[X+4>>2]=U;g[X+8>>2]=-V;g[X+12>>2]=0.0;g[X+(n<<2)>>2]=-U;g[X+(_<<2)>>2]=0.0;g[X+(n+2<<2)>>2]=m;g[X+(n+3<<2)>>2]=0.0;g[X+(N<<2)>>2]=V;aa=N|1;g[X+(aa<<2)>>2]=-m;g[X+(Z<<2)>>2]=0.0;$=N+3|0;g[X+($<<2)>>2]=0.0;m=k- +g[h+52>>2];V=p- +g[h+56>>2];U=l- +g[h+60>>2];W=c[d+20>>2]|0;g[W>>2]=0.0;g[W+4>>2]=-U;g[W+8>>2]=V;g[W+12>>2]=0.0;g[W+(n<<2)>>2]=U;g[W+(_<<2)>>2]=0.0;g[W+(n+2<<2)>>2]=-m;g[W+(n+3<<2)>>2]=0.0;g[W+(N<<2)>>2]=-V;g[W+(aa<<2)>>2]=m;g[W+(Z<<2)>>2]=0.0;g[W+($<<2)>>2]=0.0;m=+g[d>>2]*+g[d+4>>2];N=c[d+28>>2]|0;if(Y){g[N>>2]=m*(k-q);g[N+(n<<2)>>2]=m*(p-o);g[N+(n<<1<<2)>>2]=m*(l-j)}l=+g[e+200>>2];k=+g[e+216>>2];j=+g[e+232>>2];M=+g[e+192>>2];O=+g[e+208>>2];L=+g[e+224>>2];R=+g[e+196>>2];T=+g[e+212>>2];P=+g[e+228>>2];n=c[d+24>>2]|0;g[X+(n*3<<2)>>2]=M;g[X+((n*3|0)+1<<2)>>2]=O;g[X+((n*3|0)+2<<2)>>2]=L;g[X+(n<<2<<2)>>2]=R;g[X+((n<<2|1)<<2)>>2]=T;g[X+((n<<2|2)<<2)>>2]=P;g[W+(n*3<<2)>>2]=-M;g[W+((n*3|0)+1<<2)>>2]=-O;g[W+((n*3|0)+2<<2)>>2]=-L;g[W+(n<<2<<2)>>2]=-R;g[W+((n<<2|1)<<2)>>2]=-T;g[W+((n<<2|2)<<2)>>2]=-P;U=+g[e+136>>2];S=+g[e+152>>2];V=+g[e+168>>2];g[N+(n*3<<2)>>2]=m*(L*(l*S-k*U)+(M*(k*V-j*S)+O*(j*U-l*V)));g[N+(n<<2<<2)>>2]=m*(P*(l*S-k*U)+(R*(k*V-j*S)+T*(j*U-l*V)));if(!(a[b+716>>0]|0))if(!(a[b+737>>0]|0)){i=e;return}else{Y=0;_=0;N=0;m=0.0}else{m=+g[b+708>>2]*+g[b+732>>2];Y=1;_=(a[b+737>>0]|0)==0;N=m>0.0?1:2}g[X+(n*5<<2)>>2]=l;g[X+((n*5|0)+1<<2)>>2]=k;g[X+((n*5|0)+2<<2)>>2]=j;g[W+(n*5<<2)>>2]=-l;g[W+((n*5|0)+1<<2)>>2]=-k;g[W+((n*5|0)+2<<2)>>2]=-j;p=+ab(+(+g[b+688>>2]- +g[b+692>>2]),6.2831854820251465);if(!(p<-3.1415927410125732)){if(p>3.1415927410125732)p=p+-6.2831854820251465}else p=p+6.2831854820251465;r=+ab(+(+g[b+688>>2]+ +g[b+692>>2]),6.2831854820251465);if(!(r<-3.1415927410125732)){if(r>3.1415927410125732)r=r+-6.2831854820251465}else r=r+6.2831854820251465;X=p==r;W=(c[d+28>>2]|0)+(n*5<<2)|0;g[W>>2]=0.0;Z=c[b+748>>2]|0;o=+g[((Z&2|0)==0?d+4|0:b+760|0)>>2];if(!(Y&X|_)){if(Z&4)g[(c[d+32>>2]|0)+(n*5<<2)>>2]=+g[b+752>>2];s=+g[b+728>>2];q=+g[b+680>>2];_=p>r;do if(!(_|X)){t=q/(o*+g[d>>2]);if(t<0.0){if(s>=p?p-t>s:0){p=(p-s)/t;break}p=s<p?0.0:1.0;break}if(t>0.0){if(s<=r?r-t<s:0){p=(r-s)/t;break}p=s>r?0.0:1.0}else p=0.0}else p=_?1.0:0.0;while(0);g[W>>2]=p*q*+g[b+732>>2]+ +g[W>>2];g[(c[d+36>>2]|0)+(n*5<<2)>>2]=-+g[b+684>>2];g[(c[d+40>>2]|0)+(n*5<<2)>>2]=+g[b+684>>2]}if(!Y){i=e;return}g[W>>2]=+g[W>>2]+m*o*+g[d>>2];if(Z&1)g[(c[d+32>>2]|0)+(n*5<<2)>>2]=+g[b+756>>2];do if(!X){X=(c[d+36>>2]|0)+(n*5<<2)|0;if((N|0)==1){g[X>>2]=0.0;g[(c[d+40>>2]|0)+(n*5<<2)>>2]=3.4028234663852886e+38;break}else{g[X>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(n*5<<2)>>2]=0.0;break}}else{g[(c[d+36>>2]|0)+(n*5<<2)>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(n*5<<2)>>2]=3.4028234663852886e+38}while(0);m=+g[b+704>>2];do if(m>0.0){j=l*+g[f+328>>2]+k*+g[f+332>>2]+j*+g[f+336>>2]-(l*+g[h+328>>2]+k*+g[h+332>>2]+j*+g[h+336>>2]);if((N|0)==1){if(!(j<0.0))break;if(!(+g[W>>2]<-(m*j)))break;g[W>>2]=-(m*j);break}else{if(!(j>0.0))break;if(!(+g[W>>2]>-(m*j)))break;g[W>>2]=-(m*j);break}}while(0);g[W>>2]=+g[b+700>>2]*+g[W>>2];i=e;return}no(e+64|0,f+4|0,b+552|0);no(e,h+4|0,b+616|0);D=+g[e+48>>2];B=+g[e+112>>2];E=+g[e+52>>2];C=+g[e+116>>2];F=+g[e+56>>2];A=+g[e+120>>2];k=+g[(c[b+28>>2]|0)+344>>2];j=+g[(c[b+32>>2]|0)+344>>2];if(k<1.1920928955078125e-7)N=1;else N=j<1.1920928955078125e-7;if(k+j>0.0)I=j/(k+j);else I=.5;L=1.0-I;q=+g[e+72>>2];p=+g[e+88>>2];t=+g[e+104>>2];r=+g[e+8>>2];s=+g[e+24>>2];o=+g[e+40>>2];m=I*q+L*r;k=I*p+L*s;j=I*t+L*o;l=1.0/+Q(+(m*m+k*k+j*j));x=D- +g[h+52>>2];P=E- +g[h+56>>2];T=F- +g[h+60>>2];y=m*l*(x*m*l+P*k*l+T*j*l);R=k*l*(x*m*l+P*k*l+T*j*l);U=j*l*(x*m*l+P*k*l+T*j*l);z=B- +g[f+52>>2];S=C- +g[f+56>>2];V=A- +g[f+60>>2];u=m*l*(m*l*z+k*l*S+j*l*V);v=k*l*(m*l*z+k*l*S+j*l*V);w=j*l*(m*l*z+k*l*S+j*l*V);H=z-u+I*(u-y);G=S-v+I*(v-R);J=V-w+I*(w-U);M=x-y-L*(u-y);K=P-R-L*(v-R);O=T-U-L*(w-U);u=I*(x-y)+L*(z-u);v=I*(P-R)+L*(S-v);w=I*(T-U)+L*(V-w);if(u*u+v*v+w*w>1.1920928955078125e-7){z=1.0/+Q(+(u*u+v*v+w*w));u=u*z;v=z*v;z=z*w}else{u=+g[e+68>>2];v=+g[e+84>>2];z=+g[e+100>>2]}y=k*l*z-j*l*v;x=j*l*u-z*m*l;w=v*m*l-k*l*u;aa=c[d+12>>2]|0;g[aa>>2]=G*z-J*v;g[aa+4>>2]=J*u-H*z;g[aa+8>>2]=H*v-G*u;aa=c[d+20>>2]|0;g[aa>>2]=-(K*z-O*v);g[aa+4>>2]=-(O*u-M*z);g[aa+8>>2]=-(M*v-K*u);if(N?(a[b+716>>0]|0)!=0:0){S=L*(K*w-O*x);R=L*(O*y-M*w);P=L*(M*x-K*y);T=I*(G*w-J*x);U=I*(J*y-H*w);V=I*(H*x-G*y)}else{S=K*w-O*x;R=O*y-M*w;P=M*x-K*y;T=G*w-J*x;U=J*y-H*w;V=H*x-G*y}aa=c[d+12>>2]|0;g[aa+(n<<2)>>2]=T;g[aa+(n+1<<2)>>2]=U;g[aa+(n+2<<2)>>2]=V;aa=c[d+20>>2]|0;g[aa+(n<<2)>>2]=-S;g[aa+(n+1<<2)>>2]=-R;g[aa+(n+2<<2)>>2]=-P;if(N){P=L*(K*j*l-O*k*l);O=L*(O*m*l-M*j*l);K=L*(M*k*l-K*m*l);L=I*(G*j*l-J*k*l);J=I*(J*m*l-H*j*l);G=I*(H*k*l-G*m*l)}else{P=K*j*l-O*k*l;O=O*m*l-M*j*l;K=M*k*l-K*m*l;L=G*j*l-J*k*l;J=J*m*l-H*j*l;G=H*k*l-G*m*l}N=c[d+12>>2]|0;g[N+(n<<1<<2)>>2]=L;g[N+((n<<1|1)<<2)>>2]=J;g[N+((n<<1)+2<<2)>>2]=G;N=c[d+20>>2]|0;g[N+(n<<1<<2)>>2]=-P;g[N+((n<<1|1)<<2)>>2]=-O;g[N+((n<<1)+2<<2)>>2]=-K;G=+g[d>>2]*+g[d+4>>2];if(!(a[b+736>>0]|0)){X=c[d+8>>2]|0;g[X>>2]=u;g[X+4>>2]=v;g[X+8>>2]=z;X=c[d+8>>2]|0;g[X+(n<<2)>>2]=y;g[X+(n+1<<2)>>2]=x;g[X+(n+2<<2)>>2]=w;X=c[d+8>>2]|0;g[X+(n<<1<<2)>>2]=m*l;g[X+((n<<1|1)<<2)>>2]=k*l;g[X+((n<<1)+2<<2)>>2]=j*l;X=c[d+16>>2]|0;V=-u;g[X>>2]=V;T=-v;g[X+4>>2]=T;U=-z;g[X+8>>2]=U;g[X+(n<<2)>>2]=-y;g[X+(n+1<<2)>>2]=-x;g[X+(n+2<<2)>>2]=-w;g[X+(n<<1<<2)>>2]=-(m*l);g[X+((n<<1|1)<<2)>>2]=-(k*l);g[X+((n<<1)+2<<2)>>2]=-(j*l);X=c[d+28>>2]|0;g[X>>2]=G*((D-B)*u+(E-C)*v+(F-A)*z);g[X+(n<<2)>>2]=G*((D-B)*y+(E-C)*x+(F-A)*w);g[X+(n<<1<<2)>>2]=G*((D-B)*m*l+(E-C)*k*l+(F-A)*j*l);B=-y;C=-x;D=-w;F=T;A=U;E=V;N=c[d+20>>2]|0}else{B=-y;C=-x;D=-w;F=-v;A=-z;E=-u;X=c[d+28>>2]|0}W=c[d+12>>2]|0;g[W+(n*3<<2)>>2]=u;g[W+((n*3|0)+1<<2)>>2]=v;g[W+((n*3|0)+2<<2)>>2]=z;g[W+(n<<2<<2)>>2]=y;g[W+((n<<2|1)<<2)>>2]=x;g[W+((n<<2|2)<<2)>>2]=w;g[N+(n*3<<2)>>2]=E;g[N+((n*3|0)+1<<2)>>2]=F;g[N+((n*3|0)+2<<2)>>2]=A;g[N+(n<<2<<2)>>2]=B;g[N+((n<<2|1)<<2)>>2]=C;g[N+((n<<2|2)<<2)>>2]=D;V=+g[d>>2]*+g[d+4>>2];g[X+(n*3<<2)>>2]=V*((p*o-t*s)*u+(t*r-q*o)*v+(q*s-p*r)*z);g[X+(n<<2<<2)>>2]=V*((p*o-t*s)*y+(t*r-q*o)*x+(q*s-p*r)*w);if(!(a[b+716>>0]|0))if(!(a[b+737>>0]|0)){i=e;return}else{Y=0;_=0;n=0;o=0.0}else{o=+g[b+708>>2]*+g[b+732>>2];Y=1;_=(a[b+737>>0]|0)==0;n=o>0.0?1:2}X=(c[d+24>>2]|0)*5|0;g[W+(X<<2)>>2]=m*l;g[W+(X+1<<2)>>2]=k*l;g[W+(X+2<<2)>>2]=j*l;g[N+(X<<2)>>2]=-(m*l);g[N+(X+1<<2)>>2]=-(k*l);g[N+(X+2<<2)>>2]=-(j*l);p=+ab(+(+g[b+688>>2]- +g[b+692>>2]),6.2831854820251465);if(!(p<-3.1415927410125732)){if(p>3.1415927410125732)p=p+-6.2831854820251465}else p=p+6.2831854820251465;r=+ab(+(+g[b+688>>2]+ +g[b+692>>2]),6.2831854820251465);if(!(r<-3.1415927410125732)){if(r>3.1415927410125732)r=r+-6.2831854820251465}else r=r+6.2831854820251465;W=p==r;N=(c[d+28>>2]|0)+(X<<2)|0;g[N>>2]=0.0;Z=c[b+748>>2]|0;q=+g[((Z&2|0)==0?d+4|0:b+760|0)>>2];if(!(Y&W|_)){if(Z&4)g[(c[d+32>>2]|0)+(X<<2)>>2]=+g[b+752>>2];t=+g[b+728>>2];s=+g[b+680>>2];_=p>r;do if(!(_|W)){u=s/(q*+g[d>>2]);if(u<0.0){if(t>=p?p-u>t:0){p=(p-t)/u;break}p=t<p?0.0:1.0;break}if(u>0.0){if(t<=r?r-u<t:0){p=(r-t)/u;break}p=t>r?0.0:1.0}else p=0.0}else p=_?1.0:0.0;while(0);g[N>>2]=p*s*+g[b+732>>2]+ +g[N>>2];g[(c[d+36>>2]|0)+(X<<2)>>2]=-+g[b+684>>2];g[(c[d+40>>2]|0)+(X<<2)>>2]=+g[b+684>>2]}if(!Y){i=e;return}g[N>>2]=+g[N>>2]+o*q*+g[d>>2];if(Z&1)g[(c[d+32>>2]|0)+(X<<2)>>2]=+g[b+756>>2];do if(!W){W=(c[d+36>>2]|0)+(X<<2)|0;if((n|0)==1){g[W>>2]=0.0;g[(c[d+40>>2]|0)+(X<<2)>>2]=3.4028234663852886e+38;break}else{g[W>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(X<<2)>>2]=0.0;break}}else{g[(c[d+36>>2]|0)+(X<<2)>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(X<<2)>>2]=3.4028234663852886e+38}while(0);o=+g[b+704>>2];do if(o>0.0){j=+g[f+328>>2]*m*l+ +g[f+332>>2]*k*l+ +g[f+336>>2]*j*l-(m*l*+g[h+328>>2]+k*l*+g[h+332>>2]+j*l*+g[h+336>>2]);if((n|0)==1){if(!(j<0.0))break;if(!(+g[N>>2]<-(o*j)))break;g[N>>2]=-(o*j);break}else{if(!(j>0.0))break;if(!(+g[N>>2]>-(o*j)))break;g[N>>2]=-(o*j);break}}while(0);g[N>>2]=+g[b+700>>2]*+g[N>>2];i=e;return}function pq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;v=+g[a+552>>2];u=+g[a+568>>2];t=+g[a+584>>2];s=+g[b>>2];r=+g[b+4>>2];q=+g[b+8>>2];o=+g[b+16>>2];n=+g[b+20>>2];m=+g[b+24>>2];k=+g[b+32>>2];i=+g[b+36>>2];f=+g[b+40>>2];j=+g[a+556>>2];h=+g[a+572>>2];e=+g[a+588>>2];x=+g[a+620>>2];w=+g[a+636>>2];d=+g[a+652>>2];p=x*+g[c>>2]+w*+g[c+4>>2]+d*+g[c+8>>2];l=x*+g[c+16>>2]+w*+g[c+20>>2]+d*+g[c+24>>2];d=x*+g[c+32>>2]+w*+g[c+36>>2]+d*+g[c+40>>2];d=+Y(+((v*s+u*r+t*q)*p+(v*o+u*n+t*m)*l+(v*k+u*i+t*f)*d),+((s*j+r*h+q*e)*p+(o*j+n*h+m*e)*l+(k*j+i*h+f*e)*d));return+(d*+g[a+732>>2])}function qq(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;do if((e|0)==5|(e|0)==-1)if((b|0)==2){g[a+760>>2]=d;c[a+748>>2]=c[a+748>>2]|2;break}else if((b|0)==3){g[a+752>>2]=d;c[a+748>>2]=c[a+748>>2]|4;break}else if((b|0)==4){g[a+756>>2]=d;c[a+748>>2]=c[a+748>>2]|1;break}else break;while(0);i=f;return}function rq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=i;do if((c|0)==5|(c|0)==-1)if((b|0)==2){e=+g[a+760>>2];break}else if((b|0)==4){e=+g[a+756>>2];break}else if((b|0)==3){e=+g[a+752>>2];break}else{e=0.0;break}else e=0.0;while(0);i=d;return+e}function sq(a){a=a|0;return}function tq(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function uq(a){a=a|0;return 220}function vq(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,h=0.0;f=i;Zr(a,b,e)|0;g[b+52>>2]=+g[a+552>>2];g[b+56>>2]=+g[a+556>>2];g[b+60>>2]=+g[a+560>>2];g[b+64>>2]=+g[a+564>>2];g[b+68>>2]=+g[a+568>>2];g[b+72>>2]=+g[a+572>>2];g[b+76>>2]=+g[a+576>>2];g[b+80>>2]=+g[a+580>>2];g[b+84>>2]=+g[a+584>>2];g[b+88>>2]=+g[a+588>>2];g[b+92>>2]=+g[a+592>>2];g[b+96>>2]=+g[a+596>>2];g[b+100>>2]=+g[a+600>>2];g[b+104>>2]=+g[a+604>>2];g[b+108>>2]=+g[a+608>>2];g[b+112>>2]=+g[a+612>>2];g[b+116>>2]=+g[a+616>>2];g[b+120>>2]=+g[a+620>>2];g[b+124>>2]=+g[a+624>>2];g[b+128>>2]=+g[a+628>>2];g[b+132>>2]=+g[a+632>>2];g[b+136>>2]=+g[a+636>>2];g[b+140>>2]=+g[a+640>>2];g[b+144>>2]=+g[a+644>>2];g[b+148>>2]=+g[a+648>>2];g[b+152>>2]=+g[a+652>>2];g[b+156>>2]=+g[a+656>>2];g[b+160>>2]=+g[a+660>>2];g[b+164>>2]=+g[a+664>>2];g[b+168>>2]=+g[a+668>>2];g[b+172>>2]=+g[a+672>>2];g[b+176>>2]=+g[a+676>>2];c[b+184>>2]=d[a+736>>0];c[b+188>>2]=d[a+737>>0];g[b+196>>2]=+g[a+684>>2];g[b+192>>2]=+g[a+680>>2];c[b+180>>2]=d[a+740>>0];h=+ab(+(+g[a+688>>2]- +g[a+692>>2]),6.2831854820251465);if(!(h<-3.1415927410125732)){if(h>3.1415927410125732)h=h+-6.2831854820251465}else h=h+6.2831854820251465;g[b+200>>2]=h;h=+ab(+(+g[a+688>>2]+ +g[a+692>>2]),6.2831854820251465);if(h<-3.1415927410125732){h=h+6.2831854820251465;e=b+204|0;g[e>>2]=h;e=a+696|0;h=+g[e>>2];e=b+208|0;g[e>>2]=h;e=a+700|0;h=+g[e>>2];e=b+212|0;g[e>>2]=h;e=a+704|0;h=+g[e>>2];e=b+216|0;g[e>>2]=h;i=f;return 2592}if(!(h>3.1415927410125732)){e=b+204|0;g[e>>2]=h;e=a+696|0;h=+g[e>>2];e=b+208|0;g[e>>2]=h;e=a+700|0;h=+g[e>>2];e=b+212|0;g[e>>2]=h;e=a+704|0;h=+g[e>>2];e=b+216|0;g[e>>2]=h;i=f;return 2592}h=h+-6.2831854820251465;e=b+204|0;g[e>>2]=h;e=a+696|0;h=+g[e>>2];e=b+208|0;g[e>>2]=h;e=a+700|0;h=+g[e>>2];e=b+212|0;g[e>>2]=h;e=a+704|0;h=+g[e>>2];e=b+216|0;g[e>>2]=h;i=f;return 2592}function wq(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=2632;e=c[b+140>>2]|0;if(e){if(a[b+144>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}a[b+144>>0]=1;c[b+140>>2]=0;c[b+132>>2]=0;c[b+136>>2]=0;if(!b){i=d;return}}else{a[b+144>>0]=1;c[b+140>>2]=0;c[b+132>>2]=0;c[b+136>>2]=0}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function xq(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=2632;e=c[b+140>>2]|0;if(e){if(a[b+144>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+140>>2]=0}a[b+144>>0]=1;c[b+140>>2]=0;c[b+132>>2]=0;c[b+136>>2]=0;i=d;return}function yq(a){a=a|0;return}function zq(d,e,f,h,j){d=d|0;e=e|0;f=+f;h=+h;j=+j;var k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0;k=i;i=i+240|0;p=+g[d+96>>2]+h;q=+g[d+100>>2]+j;g[d+112>>2]=+g[d+92>>2]+f;g[d+116>>2]=p;g[d+120>>2]=q;g[d+124>>2]=0.0;g[k+168>>2]=1.0;c[k+172>>2]=0;c[k+176>>2]=0;c[k+180>>2]=0;c[k+184>>2]=0;g[k+188>>2]=1.0;c[k+192>>2]=0;c[k+196>>2]=0;c[k+200>>2]=0;c[k+204>>2]=0;g[k+208>>2]=1.0;l=k+212|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;g[k+104>>2]=1.0;c[k+108>>2]=0;c[k+112>>2]=0;c[k+116>>2]=0;c[k+120>>2]=0;g[k+124>>2]=1.0;c[k+128>>2]=0;c[k+132>>2]=0;c[k+136>>2]=0;c[k+140>>2]=0;g[k+144>>2]=1.0;l=k+148|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;f=1.0;l=10;while(1){r=l;l=l+ -1|0;if((r|0)<=0){d=12;break}c[k+216>>2]=c[d+92>>2];c[k+220>>2]=c[d+96>>2];c[k+224>>2]=c[d+100>>2];c[k+228>>2]=c[d+104>>2];c[k+152>>2]=c[d+112>>2];c[k+156>>2]=c[d+116>>2];c[k+160>>2]=c[d+120>>2];c[k+164>>2]=c[d+124>>2];p=+g[d+92>>2]- +g[d+112>>2];q=+g[d+96>>2]- +g[d+116>>2];j=+g[d+100>>2]- +g[d+120>>2];r=c[d+8>>2]|0;g[k+4>>2]=1.0;b[k+8>>1]=1;b[k+10>>1]=-1;c[k+76>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;c[k+32>>2]=0;c[k+36>>2]=0;c[k+40>>2]=0;c[k>>2]=2896;c[k+80>>2]=r;g[k+84>>2]=p;g[k+88>>2]=q;g[k+92>>2]=j;g[k+96>>2]=0.0;g[k+100>>2]=0.0;r=c[r+188>>2]|0;b[k+8>>1]=b[r+4>>1]|0;b[k+10>>1]=b[r+6>>1]|0;r=c[d+12>>2]|0;j=+$b[c[(c[r>>2]|0)+48>>2]&15](r);r=c[d+12>>2]|0;Kb[c[(c[r>>2]|0)+44>>2]&31](r,j+ +g[d+56>>2]);if(!(a[d+170>>0]|0))Ou(e,c[d+12>>2]|0,k+168|0,k+104|0,k,+g[e+56>>2]);else vz(c[d+8>>2]|0,c[d+12>>2]|0,k+168|0,k+104|0,k,+g[e+56>>2]);r=c[d+12>>2]|0;Kb[c[(c[r>>2]|0)+44>>2]&31](r,j);q=+g[k+4>>2];f=f-q;if(!(q<1.0)){c[d+92>>2]=c[d+112>>2];c[d+96>>2]=c[d+116>>2];c[d+100>>2]=c[d+120>>2];c[d+104>>2]=c[d+124>>2];if(f>.009999999776482582)continue;else{d=12;break}}p=+g[d+112>>2];m=+g[d+92>>2];o=+g[d+116>>2];h=+g[d+96>>2];n=+g[d+120>>2];j=+g[d+100>>2];q=+Q(+((p-m)*(p-m)+(o-h)*(o-h)+(n-j)*(n-j)));if(q>1.1920928955078125e-7){v=+g[k+44>>2];t=+g[k+48>>2];x=+g[k+52>>2];w=((p-m)*(1.0/q)*v+(o-h)*(1.0/q)*t+(n-j)*(1.0/q)*x)*2.0;u=(p-m)*(1.0/q)-v*w;s=(o-h)*(1.0/q)-t*w;w=(n-j)*(1.0/q)-x*w;n=1.0/+Q(+(w*w+(u*u+s*s)));c[d+112>>2]=c[d+92>>2];c[d+116>>2]=c[d+96>>2];c[d+120>>2]=c[d+100>>2];c[d+124>>2]=c[d+104>>2];p=q*(n*u-v*(x*n*w+(v*n*u+t*n*s)))+ +g[d+112>>2];g[d+112>>2]=p;o=q*(n*s-t*(x*n*w+(v*n*u+t*n*s)))+ +g[d+116>>2];g[d+116>>2]=o;n=q*(n*w-x*(x*n*w+(v*n*u+t*n*s)))+ +g[d+120>>2];g[d+120>>2]=n}m=p-m;h=o-h;j=n-j;if(!(m*m+h*h+j*j>1.1920928955078125e-7)){d=12;break}x=1.0/+Q(+(m*m+h*h+j*j));if(!(f>.009999999776482582?!(m*x*+g[d+76>>2]+h*x*+g[d+80>>2]+j*x*+g[d+84>>2]<=0.0):0)){d=12;break}}if((d|0)==12){i=k;return}}function Aq(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0;e=i;a[b+171>>0]=1;c[b+60>>2]=c[d+0>>2];c[b+64>>2]=c[d+4>>2];c[b+68>>2]=c[d+8>>2];c[b+72>>2]=c[d+12>>2];f=+g[b+60>>2];k=+g[b+64>>2];h=+g[b+68>>2];j=1.0/+Q(+(f*f+k*k+h*h));if(+Q(+(h*j*h*j+(f*j*f*j+k*j*k*j)))<1.1920928955078125e-7){f=0.0;k=0.0;j=0.0;h=0.0}else{f=f*j;k=k*j;j=h*j;h=+g[b+72>>2]}g[b+76>>2]=f;g[b+80>>2]=k;g[b+84>>2]=j;g[b+88>>2]=h;i=e;return}function Bq(b,d,e){b=b|0;d=d|0;e=+e;var f=0,h=0.0,j=0.0,k=0.0,l=0.0;f=i;a[b+171>>0]=0;c[b+60>>2]=c[d+0>>2];c[b+64>>2]=c[d+4>>2];c[b+68>>2]=c[d+8>>2];c[b+72>>2]=c[d+12>>2];h=+g[b+60>>2];l=+g[b+64>>2];j=+g[b+68>>2];k=1.0/+Q(+(h*h+l*l+j*j));if(+Q(+(j*k*j*k+(h*k*h*k+l*k*l*k)))<1.1920928955078125e-7){h=0.0;l=0.0;k=0.0;j=0.0}else{h=h*k;l=l*k;k=j*k;j=+g[b+72>>2]}g[b+76>>2]=h;g[b+80>>2]=l;g[b+84>>2]=k;g[b+88>>2]=j;g[b+172>>2]=+g[b+172>>2]+e;i=f;return}function Cq(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;g[b+16>>2]=0.0;g[b+20>>2]=0.0;a[b+168>>0]=0;a[b+169>>0]=0;g[b+172>>2]=0.0;c[b+60>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;b=c[(c[b+8>>2]|0)+284>>2]|0;if((c[(Pb[c[(c[b>>2]|0)+28>>2]&127](b)|0)+4>>2]|0)<=0){i=e;return}do{h=c[b>>2]|0;j=c[h+12>>2]|0;h=c[c[(Pb[c[h+28>>2]&127](b)|0)+12>>2]>>2]|0;f=c[(c[(Pb[c[(c[b>>2]|0)+28>>2]&127](b)|0)+12>>2]|0)+4>>2]|0;Tb[j&31](b,h,f,c[d+24>>2]|0)|0}while((c[(Pb[c[(c[b>>2]|0)+28>>2]&127](b)|0)+4>>2]|0)>0);i=e;return}function Dq(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+32|0;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;c[d+0>>2]=c[b+0>>2];c[d+4>>2]=c[b+4>>2];c[d+8>>2]=c[b+8>>2];c[d+12>>2]=c[b+12>>2];b=c[a+8>>2]|0;c[b+260>>2]=(c[b+260>>2]|0)+1;g[b+4>>2]=1.0;c[b+8>>2]=c[d+16>>2];c[b+12>>2]=c[d+20>>2];c[b+16>>2]=c[d+24>>2];c[b+20>>2]=0;g[b+24>>2]=1.0;c[b+28>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;c[b+40>>2]=0;g[b+44>>2]=1.0;g[b+48>>2]=0.0;c[b+52>>2]=c[d+0>>2];c[b+56>>2]=c[d+4>>2];c[b+60>>2]=c[d+8>>2];c[b+64>>2]=c[d+12>>2];i=d;return}function Eq(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0.0,s=0,t=0.0,u=0,v=0,w=0,x=0.0,y=0.0;h=i;i=i+96|0;a[b+148>>0]=0;e=0;while(1){w=c[b+12>>2]|0;vc[c[(c[w>>2]|0)+8>>2]&127](w,(c[b+8>>2]|0)+4|0,h+80|0,h+64|0);w=c[d+68>>2]|0;Jb[c[(c[w>>2]|0)+16>>2]&31](w,c[(c[b+8>>2]|0)+188>>2]|0,h+80|0,h+64|0,c[d+24>>2]|0);w=c[d+24>>2]|0;vc[c[(c[w>>2]|0)+32>>2]&127](w,c[(c[b+8>>2]|0)+284>>2]|0,d+28|0,w);w=c[b+8>>2]|0;c[b+92>>2]=c[w+52>>2];c[b+96>>2]=c[w+56>>2];c[b+100>>2]=c[w+60>>2];c[b+104>>2]=c[w+64>>2];w=c[w+284>>2]|0;if((Pb[c[(c[w>>2]|0)+36>>2]&127](w)|0)>0){j=0;r=0.0;o=0;do{l=c[b+132>>2]|0;if((l|0)<0){if((c[b+136>>2]|0)<0){k=c[b+140>>2]|0;if(k){if(a[b+144>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[b+140>>2]=0}a[b+144>>0]=1;c[b+140>>2]=0;c[b+136>>2]=0}do{k=(c[b+140>>2]|0)+(l<<2)|0;if(k)c[k>>2]=0;l=l+1|0}while((l|0)!=0)}c[b+132>>2]=0;l=c[(c[b+8>>2]|0)+284>>2]|0;l=c[(Pb[c[(c[l>>2]|0)+28>>2]&127](l)|0)+12>>2]|0;w=c[c[l+(j<<4)>>2]>>2]|0;k=c[c[l+(j<<4)+4>>2]>>2]|0;if(!((w|0)!=0?(c[w+204>>2]&4|0)!=0:0))f=15;do if((f|0)==15){f=0;if((k|0)!=0?(c[k+204>>2]&4|0)!=0:0)break;k=c[l+(j<<4)+8>>2]|0;if(k)Nb[c[(c[k>>2]|0)+16>>2]&127](k,b+128|0);n=c[b+132>>2]|0;if((n|0)>0){m=c[b+140>>2]|0;l=c[b+8>>2]|0;k=0;u=o;while(1){o=c[m+(k<<2)>>2]|0;p=(c[o+740>>2]|0)==(l|0)?-1.0:1.0;s=c[o+748>>2]|0;if((s|0)>0){q=0;do{t=+g[o+(q*184|0)+84>>2];if(t<0.0){v=o+(q*184|0)+68|0;if(t<r){w=o+(q*184|0)+72|0;x=p*+g[w>>2];u=o+(q*184|0)+76|0;r=p*+g[u>>2];g[b+152>>2]=p*+g[v>>2];g[b+156>>2]=x;g[b+160>>2]=r;g[b+164>>2]=0.0;s=c[o+748>>2]|0;r=t}else{w=o+(q*184|0)+72|0;u=o+(q*184|0)+76|0}y=t*p*+g[w>>2]*.20000000298023224;x=t*p*+g[u>>2]*.20000000298023224;g[b+92>>2]=t*p*+g[v>>2]*.20000000298023224+ +g[b+92>>2];g[b+96>>2]=y+ +g[b+96>>2];g[b+100>>2]=x+ +g[b+100>>2];u=1}q=q+1|0}while((q|0)<(s|0));o=u}else o=u;k=k+1|0;if((k|0)>=(n|0))break;else u=o}}}while(0);j=j+1|0;w=c[(c[b+8>>2]|0)+284>>2]|0}while((j|0)<(Pb[c[(c[w>>2]|0)+36>>2]&127](w)|0))}else o=0;w=c[b+8>>2]|0;c[h+0>>2]=c[w+4>>2];c[h+4>>2]=c[w+8>>2];c[h+8>>2]=c[w+12>>2];c[h+12>>2]=c[w+16>>2];c[h+16>>2]=c[w+20>>2];c[h+20>>2]=c[w+24>>2];c[h+24>>2]=c[w+28>>2];c[h+28>>2]=c[w+32>>2];c[h+32>>2]=c[w+36>>2];c[h+36>>2]=c[w+40>>2];c[h+40>>2]=c[w+44>>2];c[h+44>>2]=c[w+48>>2];c[h+48>>2]=c[b+92>>2];c[h+52>>2]=c[b+96>>2];c[h+56>>2]=c[b+100>>2];c[h+60>>2]=c[b+104>>2];c[w+260>>2]=(c[w+260>>2]|0)+1;c[w+4>>2]=c[h+0>>2];c[w+8>>2]=c[h+4>>2];c[w+12>>2]=c[h+8>>2];c[w+16>>2]=c[h+12>>2];c[w+20>>2]=c[h+16>>2];c[w+24>>2]=c[h+20>>2];c[w+28>>2]=c[h+24>>2];c[w+32>>2]=c[h+28>>2];c[w+36>>2]=c[h+32>>2];c[w+40>>2]=c[h+36>>2];c[w+44>>2]=c[h+40>>2];c[w+48>>2]=c[h+44>>2];c[w+52>>2]=c[h+48>>2];c[w+56>>2]=c[h+52>>2];c[w+60>>2]=c[h+56>>2];c[w+64>>2]=c[h+60>>2];if(!o){f=32;break}a[b+148>>0]=1;if((e|0)>3){f=32;break}else e=e+1|0}if((f|0)==32){w=(c[b+8>>2]|0)+52|0;c[b+92>>2]=c[w+0>>2];c[b+96>>2]=c[w+4>>2];c[b+100>>2]=c[w+8>>2];c[b+104>>2]=c[w+12>>2];nF(b+112|0,w|0,16)|0;i=h;return}}function Fq(d,e,f){d=d|0;e=e|0;f=+f;var h=0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0,p=0.0,q=0.0,r=0,s=0.0;h=i;i=i+528|0;if((a[d+171>>0]|0)==0?+g[d+172>>2]<=0.0:0){i=h;return}a[d+168>>0]=(Pb[c[(c[d>>2]|0)+48>>2]&127](d)|0)&1;p=+g[d+16>>2]- +g[d+44>>2]*f;g[d+16>>2]=p;if(p>0.0?(l=+g[d+28>>2],p>l):0)g[d+16>>2]=l;else l=p;if(l<0.0?(s=+P(+l),k=+P(+(+g[d+24>>2])),s>k):0){g[d+16>>2]=-k;l=-k}g[d+20>>2]=l*f;m=c[d+8>>2]|0;c[h+0>>2]=c[m+4>>2];c[h+4>>2]=c[m+8>>2];c[h+8>>2]=c[m+12>>2];c[h+12>>2]=c[m+16>>2];c[h+16>>2]=c[m+20>>2];c[h+20>>2]=c[m+24>>2];c[h+24>>2]=c[m+28>>2];c[h+28>>2]=c[m+32>>2];c[h+32>>2]=c[m+36>>2];c[h+36>>2]=c[m+40>>2];c[h+40>>2]=c[m+44>>2];c[h+44>>2]=c[m+48>>2];c[h+48>>2]=c[m+52>>2];c[h+52>>2]=c[m+56>>2];c[h+56>>2]=c[m+60>>2];c[h+60>>2]=c[m+64>>2];m=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}p=+g[d+20>>2];p=+g[d+52>>2]+(p>0.0?p:0.0);q=+g[2692+(m<<4)>>2]*p+ +g[d+96>>2];s=p*+g[2696+(m<<4)>>2]+ +g[d+100>>2];g[d+112>>2]=+g[d+92>>2]+ +g[2688+(m<<4)>>2]*p;g[d+116>>2]=q;g[d+120>>2]=s;g[d+124>>2]=0.0;g[h+456>>2]=1.0;c[h+460>>2]=0;c[h+464>>2]=0;c[h+468>>2]=0;c[h+472>>2]=0;g[h+476>>2]=1.0;c[h+480>>2]=0;c[h+484>>2]=0;c[h+488>>2]=0;c[h+492>>2]=0;g[h+496>>2]=1.0;m=h+500|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;g[h+392>>2]=1.0;c[h+396>>2]=0;c[h+400>>2]=0;c[h+404>>2]=0;c[h+408>>2]=0;g[h+412>>2]=1.0;c[h+416>>2]=0;c[h+420>>2]=0;c[h+424>>2]=0;c[h+428>>2]=0;g[h+432>>2]=1.0;m=h+436|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;m=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}n=c[d+12>>2]|0;p=+$b[c[(c[n>>2]|0)+48>>2]&15](n);p=p+ +g[d+56>>2];q=p*+g[2692+(m<<4)>>2]+ +g[d+96>>2];s=p*+g[2696+(m<<4)>>2]+ +g[d+100>>2];g[h+504>>2]=+g[2688+(m<<4)>>2]*p+ +g[d+92>>2];g[h+508>>2]=q;g[h+512>>2]=s;g[h+516>>2]=0.0;c[h+440>>2]=c[d+112>>2];c[h+444>>2]=c[d+116>>2];c[h+448>>2]=c[d+120>>2];c[h+452>>2]=c[d+124>>2];m=c[d+8>>2]|0;n=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}p=-+g[2688+(n<<4)>>2];q=-+g[2692+(n<<4)>>2];s=-+g[2696+(n<<4)>>2];g[h+292>>2]=1.0;b[h+296>>1]=1;b[h+298>>1]=-1;r=h+300|0;c[h+364>>2]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[h+288>>2]=2896;c[h+368>>2]=m;g[h+372>>2]=p;g[h+376>>2]=q;g[h+380>>2]=s;g[h+384>>2]=0.0;g[h+388>>2]=.707099974155426;m=c[d+8>>2]|0;r=c[m+188>>2]|0;b[h+296>>1]=b[r+4>>1]|0;b[h+298>>1]=b[r+6>>1]|0;if(!(a[d+170>>0]|0))Ou(e,c[d+12>>2]|0,h+456|0,h+392|0,h+288|0,0.0);else vz(m,c[d+12>>2]|0,h+456|0,h+392|0,h+288|0,+g[e+56>>2]);if(+g[h+292>>2]<1.0){m=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}do if(+g[h+332>>2]*+g[2688+(m<<4)>>2]+ +g[h+336>>2]*+g[2692+(m<<4)>>2]+ +g[h+340>>2]*+g[2696+(m<<4)>>2]>0.0){k=+g[h+292>>2];g[d+108>>2]=+g[d+52>>2]*k;if(!(a[d+180>>0]|0)){c[d+92>>2]=c[d+112>>2];c[d+96>>2]=c[d+116>>2];c[d+100>>2]=c[d+120>>2];c[d+104>>2]=c[d+124>>2];break}else{g[d+92>>2]=(1.0-k)*+g[d+92>>2]+k*+g[d+112>>2];g[d+96>>2]=(1.0-k)*+g[d+96>>2]+k*+g[d+116>>2];g[d+100>>2]=(1.0-k)*+g[d+100>>2]+k*+g[d+120>>2];break}}while(0);g[d+16>>2]=0.0;g[d+20>>2]=0.0}else{g[d+108>>2]=+g[d+52>>2];c[d+92>>2]=c[d+112>>2];c[d+96>>2]=c[d+116>>2];c[d+100>>2]=c[d+120>>2];c[d+104>>2]=c[d+124>>2]}if(!(a[d+171>>0]|0)){q=+g[d+172>>2];s=q>f?f:q;g[d+172>>2]=q-f;zq(d,e,+g[d+60>>2]*s,s*+g[d+64>>2],s*+g[d+68>>2])}else zq(d,e,+g[d+60>>2],+g[d+64>>2],+g[d+68>>2]);c[h+272>>2]=c[d+112>>2];c[h+276>>2]=c[d+116>>2];c[h+280>>2]=c[d+120>>2];c[h+284>>2]=c[d+124>>2];k=+g[d+16>>2];if(k<0.0)k=-k;else k=0.0;k=k*f;do if(k>0.0?(j=+g[d+24>>2],k>j):0){if((a[d+168>>0]|0)==0?(a[d+169>>0]|0)!=0:0){j=k;break}}else j=k;while(0);m=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}l=j+ +g[d+108>>2];k=+g[2688+(m<<4)>>2]*l;j=l*+g[2692+(m<<4)>>2];l=l*+g[2696+(m<<4)>>2];g[d+112>>2]=+g[d+112>>2]-k;g[d+116>>2]=+g[d+116>>2]-j;g[d+120>>2]=+g[d+120>>2]-l;n=c[d+8>>2]|0;o=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}s=+g[d+40>>2];m=h+172|0;g[m>>2]=1.0;b[h+176>>1]=1;b[h+178>>1]=-1;r=h+180|0;c[h+244>>2]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[h+168>>2]=2896;c[h+248>>2]=n;c[h+252>>2]=c[2688+(o<<4)>>2];c[h+256>>2]=c[2692+(o<<4)>>2];c[h+260>>2]=c[2696+(o<<4)>>2];c[h+264>>2]=c[2700+(o<<4)>>2];g[h+268>>2]=s;o=c[d+8>>2]|0;n=c[o+188>>2]|0;b[h+176>>1]=b[n+4>>1]|0;b[h+178>>1]=b[n+6>>1]|0;n=c[d+176>>2]|0;if((a[2736]|0)==0?(Ya(2736)|0)!=0:0){g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}s=+g[d+40>>2];g[h+68>>2]=1.0;b[h+72>>1]=1;b[h+74>>1]=-1;r=h+76|0;c[h+140>>2]=0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[h+64>>2]=2896;c[h+144>>2]=o;c[h+148>>2]=c[2688+(n<<4)>>2];c[h+152>>2]=c[2692+(n<<4)>>2];c[h+156>>2]=c[2696+(n<<4)>>2];c[h+160>>2]=c[2700+(n<<4)>>2];g[h+164>>2]=s;n=c[(c[d+8>>2]|0)+188>>2]|0;b[h+72>>1]=b[n+4>>1]|0;b[h+74>>1]=b[n+6>>1]|0;s=+g[d+112>>2];q=+g[d+116>>2];p=+g[d+120>>2];n=0;while(1){g[h+456>>2]=1.0;c[h+460>>2]=0;c[h+464>>2]=0;c[h+468>>2]=0;c[h+472>>2]=0;g[h+476>>2]=1.0;c[h+480>>2]=0;c[h+484>>2]=0;c[h+488>>2]=0;c[h+492>>2]=0;g[h+496>>2]=1.0;c[h+500>>2]=0;g[h+392>>2]=1.0;c[h+396>>2]=0;c[h+400>>2]=0;c[h+404>>2]=0;c[h+408>>2]=0;g[h+412>>2]=1.0;c[h+416>>2]=0;c[h+420>>2]=0;c[h+424>>2]=0;c[h+428>>2]=0;g[h+432>>2]=1.0;c[h+436>>2]=0;g[h+288>>2]=1.0;c[h+292>>2]=0;c[h+296>>2]=0;c[h+300>>2]=0;c[h+304>>2]=0;g[h+308>>2]=1.0;c[h+312>>2]=0;c[h+316>>2]=0;c[h+320>>2]=0;c[h+324>>2]=0;g[h+328>>2]=1.0;c[h+332>>2]=0;c[h+336>>2]=0;c[h+340>>2]=0;c[h+504>>2]=c[d+92>>2];c[h+508>>2]=c[d+96>>2];c[h+512>>2]=c[d+100>>2];c[h+516>>2]=c[d+104>>2];c[h+440>>2]=c[d+112>>2];c[h+444>>2]=c[d+116>>2];c[h+448>>2]=c[d+120>>2];c[h+452>>2]=c[d+124>>2];g[h+336>>2]=s-k;g[h+340>>2]=q-j;g[h+344>>2]=p-l;g[h+348>>2]=0.0;if(!(a[d+170>>0]|0)){Ou(e,c[d+12>>2]|0,h+456|0,h+392|0,h+168|0,+g[e+56>>2]);if(!(+g[m>>2]<1.0))Ou(e,c[d+12>>2]|0,h+456|0,h+288|0,h+64|0,+g[e+56>>2])}else{vz(c[d+8>>2]|0,c[d+12>>2]|0,h+456|0,h+392|0,h+168|0,+g[e+56>>2]);if(!(+g[m>>2]<1.0))vz(c[d+8>>2]|0,c[d+12>>2]|0,h+456|0,h+288|0,h+64|0,+g[e+56>>2])}p=+g[d+16>>2];if(p<0.0)q=-p;else q=0.0;s=q*f;o=(a[d+182>>0]|0)==0;if(!o?+g[m>>2]<1.0:0)r=1;else r=+g[h+68>>2]<1.0;if(!(s>0.0))break;q=+g[d+52>>2];if(!(s<q)|r^1|n)break;if((a[d+168>>0]|0)==0?(a[d+169>>0]|0)!=0:0){n=0;break}c[d+112>>2]=c[h+272>>2];c[d+116>>2]=c[h+276>>2];c[d+120>>2]=c[h+280>>2];c[d+124>>2]=c[h+284>>2];n=c[d+176>>2]|0;do if(!(a[2736]|0)){if(!(Ya(2736)|0))break;g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}while(0);s=q+ +g[d+108>>2];q=s*+g[2692+(n<<4)>>2];p=s*+g[2696+(n<<4)>>2];s=+g[d+112>>2]- +g[2688+(n<<4)>>2]*s;g[d+112>>2]=s;q=+g[d+116>>2]-q;g[d+116>>2]=q;p=+g[d+120>>2]-p;g[d+120>>2]=p;n=1}q=+g[m>>2];if(q<1.0|n){j=+g[d+96>>2];f=(j- +g[h+232>>2])*.5;do if(!o)if(!(a[d+181>>0]|0)){g[d+92>>2]=(1.0-f)*+g[d+92>>2]+f*+g[d+112>>2];g[d+96>>2]=(1.0-f)*j+f*+g[d+116>>2];g[d+100>>2]=(1.0-f)*+g[d+100>>2]+f*+g[d+120>>2];e=d+181|0;break}else{g[d+92>>2]=(1.0-q)*+g[d+92>>2]+q*+g[d+112>>2];g[d+96>>2]=(1.0-q)*j+q*+g[d+116>>2];g[d+100>>2]=(1.0-q)*+g[d+100>>2]+q*+g[d+120>>2];e=d+181|0;break}else{g[d+92>>2]=(1.0-q)*+g[d+92>>2]+q*+g[d+112>>2];g[d+96>>2]=(1.0-q)*j+q*+g[d+116>>2];g[d+100>>2]=(1.0-q)*+g[d+100>>2]+q*+g[d+120>>2];e=d+181|0}while(0);a[e>>0]=0;g[d+16>>2]=0.0;g[d+20>>2]=0.0;a[d+169>>0]=0}else{a[d+181>>0]=1;do if(!o){if(p<0.0)q=-p;else q=0.0;p=+g[d+24>>2];if(q*f>p){if((a[d+168>>0]|0)==0?(a[d+169>>0]|0)!=0:0)break;g[d+112>>2]=k+ +g[d+112>>2];g[d+116>>2]=j+ +g[d+116>>2];g[d+120>>2]=l+ +g[d+120>>2];e=c[d+176>>2]|0;do if(!(a[2736]|0)){if(!(Ya(2736)|0))break;g[672]=1.0;c[673]=0;c[674]=0;c[675]=0;c[676]=0;g[677]=1.0;c[678]=0;c[679]=0;c[680]=0;c[681]=0;g[682]=1.0;g[683]=0.0;bb(2736)}while(0);p=p+ +g[d+108>>2];q=p*+g[2692+(e<<4)>>2];s=p*+g[2696+(e<<4)>>2];g[d+112>>2]=+g[d+112>>2]- +g[2688+(e<<4)>>2]*p;g[d+116>>2]=+g[d+116>>2]-q;g[d+120>>2]=+g[d+120>>2]-s}}while(0);c[d+92>>2]=c[d+112>>2];c[d+96>>2]=c[d+116>>2];c[d+100>>2]=c[d+120>>2];c[d+104>>2]=c[d+124>>2]}c[h+48>>2]=c[d+92>>2];c[h+52>>2]=c[d+96>>2];c[h+56>>2]=c[d+100>>2];c[h+60>>2]=c[d+104>>2];r=c[d+8>>2]|0;c[r+260>>2]=(c[r+260>>2]|0)+1;c[r+4>>2]=c[h+0>>2];c[r+8>>2]=c[h+4>>2];c[r+12>>2]=c[h+8>>2];c[r+16>>2]=c[h+12>>2];c[r+20>>2]=c[h+16>>2];c[r+24>>2]=c[h+20>>2];c[r+28>>2]=c[h+24>>2];c[r+32>>2]=c[h+28>>2];c[r+36>>2]=c[h+32>>2];c[r+40>>2]=c[h+36>>2];c[r+44>>2]=c[h+40>>2];c[r+48>>2]=c[h+44>>2];c[r+52>>2]=c[h+48>>2];c[r+56>>2]=c[h+52>>2];c[r+60>>2]=c[h+56>>2];c[r+64>>2]=c[h+60>>2];i=h;return}function Gq(a){a=a|0;var b=0;b=i;a=Pb[c[(c[a>>2]|0)+48>>2]&127](a)|0;i=b;return a|0}function Hq(b){b=b|0;var d=0;d=i;if(!(Pb[c[(c[b>>2]|0)+40>>2]&127](b)|0)){i=d;return}g[b+16>>2]=+g[b+28>>2];a[b+169>>0]=1;i=d;return}function Iq(a){a=a|0;var b=0;b=i;if(!(+g[a+16>>2]==0.0)){a=0;i=b;return a|0}a=+g[a+20>>2]==0.0;i=b;return a|0}function Jq(a,b){a=a|0;b=b|0;return}function Kq(b,c){b=b|0;c=c|0;a[b+180>>0]=c&1;return}function Lq(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;Nb[c[(c[a>>2]|0)+32>>2]&127](a,b);tc[c[(c[a>>2]|0)+36>>2]&7](a,b,d);i=e;return}function Mq(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Nq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;e=i;f=c[b>>2]|0;if((f|0)==(c[a+80>>2]|0)){k=1.0;i=e;return+k}if(c[f+204>>2]&4){k=1.0;i=e;return+k}if(d){k=+g[b+8>>2];j=+g[b+12>>2];h=+g[b+16>>2]}else{m=+g[b+8>>2];l=+g[b+12>>2];h=+g[b+16>>2];k=+g[f+4>>2]*m+ +g[f+8>>2]*l+ +g[f+12>>2]*h;j=m*+g[f+20>>2]+l*+g[f+24>>2]+h*+g[f+28>>2];h=m*+g[f+36>>2]+l*+g[f+40>>2]+h*+g[f+44>>2]}if(k*+g[a+84>>2]+j*+g[a+88>>2]+h*+g[a+92>>2]<+g[a+100>>2]){m=1.0;i=e;return+m}g[a+4>>2]=+g[b+40>>2];c[a+76>>2]=f;if(d){c[a+44>>2]=c[b+8>>2];c[a+48>>2]=c[b+12>>2];c[a+52>>2]=c[b+16>>2];c[a+56>>2]=c[b+20>>2]}else{h=+g[b+8>>2];j=+g[b+12>>2];k=+g[b+16>>2];l=h*+g[f+20>>2]+j*+g[f+24>>2]+k*+g[f+28>>2];m=h*+g[f+36>>2]+j*+g[f+40>>2]+k*+g[f+44>>2];g[a+44>>2]=+g[f+4>>2]*h+ +g[f+8>>2]*j+ +g[f+12>>2]*k;g[a+48>>2]=l;g[a+52>>2]=m;g[a+56>>2]=0.0}c[a+60>>2]=c[b+24>>2];c[a+64>>2]=c[b+28>>2];c[a+68>>2]=c[b+32>>2];c[a+72>>2]=c[b+36>>2];m=+g[b+40>>2];i=e;return+m}function Oq(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0;b=i;i=i+144|0;g[a+36>>2]=0.0;c[b+128>>2]=0;c[b+132>>2]=0;c[b+136>>2]=0;c[b+140>>2]=0;d=0;do{e=b+128+(d<<2)|0;g[e>>2]=1.0;h=c[a+28>>2]|0;G=+g[h+4>>2];g[b+80>>2]=G;C=+g[h+20>>2];g[b+84>>2]=C;j=+g[h+36>>2];g[b+88>>2]=j;g[b+92>>2]=0.0;F=+g[h+8>>2];g[b+96>>2]=F;B=+g[h+24>>2];g[b+100>>2]=B;u=+g[h+40>>2];g[b+104>>2]=u;g[b+108>>2]=0.0;E=+g[h+12>>2];g[b+112>>2]=E;A=+g[h+28>>2];g[b+116>>2]=A;n=+g[h+44>>2];g[b+120>>2]=n;g[b+124>>2]=0.0;f=c[a+32>>2]|0;x=+g[f+4>>2];g[b+32>>2]=x;t=+g[f+20>>2];g[b+36>>2]=t;o=+g[f+36>>2];g[b+40>>2]=o;g[b+44>>2]=0.0;w=+g[f+8>>2];g[b+48>>2]=w;s=+g[f+24>>2];g[b+52>>2]=s;m=+g[f+40>>2];g[b+56>>2]=m;g[b+60>>2]=0.0;v=+g[f+12>>2];g[b+64>>2]=v;r=+g[f+28>>2];g[b+68>>2]=r;k=+g[f+44>>2];g[b+72>>2]=k;g[b+76>>2]=0.0;y=+g[a+300>>2];q=+g[a+304>>2];l=+g[a+308>>2];D=+g[h+52>>2];z=+g[h+56>>2];p=+g[h+60>>2];g[b+16>>2]=y*G+q*F+l*E+D-D;g[b+20>>2]=y*C+q*B+l*A+z-z;g[b+24>>2]=y*j+q*u+l*n+p-p;g[b+28>>2]=0.0;p=+g[a+316>>2];n=+g[a+320>>2];l=+g[a+324>>2];u=+g[f+52>>2];q=+g[f+56>>2];j=+g[f+60>>2];g[b>>2]=p*x+n*w+l*v+u-u;g[b+4>>2]=p*t+n*s+l*r+q-q;g[b+8>>2]=p*o+n*m+l*k+j-j;g[b+12>>2]=0.0;h=c[a+28>>2]|0;Mo(a+(d*84|0)+48|0,b+80|0,b+32|0,b+16|0,b,b+128|0,h+396|0,+g[h+344>>2],f+396|0,+g[f+344>>2]);g[e>>2]=0.0;d=d+1|0}while((d|0)!=3);i=b;return}function Pq(b,d){b=b|0;d=d|0;var e=0;e=i;if(!(a[b+344>>0]|0)){c[d>>2]=3;c[d+4>>2]=3;i=e;return}else{c[d>>2]=0;c[d+4>>2]=0;i=e;return}}function Qq(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;d=i;l=c[a+28>>2]|0;m=c[a+32>>2]|0;e=c[b+8>>2]|0;g[e>>2]=1.0;j=c[b+24>>2]|0;g[e+(j+1<<2)>>2]=1.0;g[e+((j<<1)+2<<2)>>2]=1.0;n=+g[a+300>>2];s=+g[a+304>>2];h=+g[a+308>>2];q=+g[l+4>>2]*n+ +g[l+8>>2]*s+ +g[l+12>>2]*h;o=n*+g[l+20>>2]+s*+g[l+24>>2]+h*+g[l+28>>2];h=n*+g[l+36>>2]+s*+g[l+40>>2]+h*+g[l+44>>2];e=c[b+12>>2]|0;g[e>>2]=0.0;g[e+4>>2]=h;g[e+8>>2]=-o;g[e+12>>2]=0.0;g[e+(j<<2)>>2]=-h;g[e+(j+1<<2)>>2]=0.0;g[e+(j+2<<2)>>2]=q;g[e+(j+3<<2)>>2]=0.0;g[e+(j<<1<<2)>>2]=o;g[e+((j<<1|1)<<2)>>2]=-q;g[e+((j<<1)+2<<2)>>2]=0.0;g[e+((j<<1)+3<<2)>>2]=0.0;e=c[b+16>>2]|0;g[e>>2]=-1.0;g[e+(j+1<<2)>>2]=-1.0;g[e+((j<<1)+2<<2)>>2]=-1.0;s=+g[a+316>>2];n=+g[a+320>>2];f=+g[a+324>>2];r=+g[m+4>>2]*s+ +g[m+8>>2]*n+ +g[m+12>>2]*f;p=s*+g[m+20>>2]+n*+g[m+24>>2]+f*+g[m+28>>2];f=s*+g[m+36>>2]+n*+g[m+40>>2]+f*+g[m+44>>2];e=c[b+20>>2]|0;g[e>>2]=0.0;g[e+4>>2]=-f;g[e+8>>2]=p;g[e+12>>2]=0.0;g[e+(j<<2)>>2]=f;g[e+(j+1<<2)>>2]=0.0;g[e+(j+2<<2)>>2]=-r;g[e+(j+3<<2)>>2]=0.0;g[e+(j<<1<<2)>>2]=-p;g[e+((j<<1|1)<<2)>>2]=r;g[e+((j<<1)+2<<2)>>2]=0.0;g[e+((j<<1)+3<<2)>>2]=0.0;j=c[a+332>>2]|0;n=+g[((j&1|0)==0?b+4|0:a+336|0)>>2]*+g[b>>2];e=c[b+24>>2]|0;k=c[b+28>>2]|0;g[k>>2]=n*(r+ +g[m+52>>2]-q- +g[l+52>>2]);g[k+(e<<2)>>2]=n*(p+ +g[m+56>>2]-o- +g[l+56>>2]);g[k+(e<<1<<2)>>2]=n*(f+ +g[m+60>>2]-h- +g[l+60>>2]);if(j&2){m=c[b+32>>2]|0;g[m>>2]=+g[a+340>>2];g[m+(e<<2)>>2]=+g[a+340>>2];g[m+(e<<1<<2)>>2]=+g[a+340>>2]}f=+g[a+356>>2];if(f>0.0){g[c[b+36>>2]>>2]=-f;g[c[b+40>>2]>>2]=f;h=+g[a+356>>2]}else h=f;if(h>0.0){g[(c[b+36>>2]|0)+(e<<2)>>2]=-f;g[(c[b+40>>2]|0)+(e<<2)>>2]=f;h=+g[a+356>>2]}if(!(h>0.0)){m=a+352|0;s=+g[m>>2];m=b+52|0;g[m>>2]=s;i=d;return}g[(c[b+36>>2]|0)+(e<<1<<2)>>2]=-f;g[(c[b+40>>2]|0)+(e<<1<<2)>>2]=f;m=a+352|0;s=+g[m>>2];m=b+52|0;g[m>>2]=s;i=d;return}function Rq(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;do if((e|0)==-1)if((b|0)==4|(b|0)==3){g[a+340>>2]=d;c[a+332>>2]=c[a+332>>2]|2;break}else if((b|0)==2|(b|0)==1){g[a+336>>2]=d;c[a+332>>2]=c[a+332>>2]|1;break}else break;while(0);i=f;return}function Sq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=i;do if((c|0)==-1)if((b|0)==4|(b|0)==3){e=+g[a+340>>2];break}else if((b|0)==2|(b|0)==1){e=+g[a+336>>2];break}else{e=3.4028234663852886e+38;break}else e=3.4028234663852886e+38;while(0);i=d;return+e}function Tq(a){a=a|0;return}function Uq(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Vq(a){a=a|0;return 84}function Wq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Zr(a,b,c)|0;g[b+52>>2]=+g[a+300>>2];g[b+56>>2]=+g[a+304>>2];g[b+60>>2]=+g[a+308>>2];g[b+64>>2]=+g[a+312>>2];g[b+68>>2]=+g[a+316>>2];g[b+72>>2]=+g[a+320>>2];g[b+76>>2]=+g[a+324>>2];g[b+80>>2]=+g[a+328>>2];i=d;return 3080}function Xq(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=3912;e=c[b+496>>2]|0;if(e){if(a[b+500>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+496>>2]=0}a[b+500>>0]=1;c[b+496>>2]=0;c[b+488>>2]=0;c[b+492>>2]=0;i=d;return}function Yq(a){a=a|0;var b=0;b=i;Zq(a);gF(a);i=b;return}function Zq(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=3752;e=c[b+144>>2]|0;if(e){if(a[b+148>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+144>>2]=0}a[b+148>>0]=1;c[b+144>>2]=0;c[b+136>>2]=0;c[b+140>>2]=0;e=c[b+76>>2]|0;if(e){if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;e=c[b+56>>2]|0;if(e){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;e=c[b+36>>2]|0;if(e){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;e=c[b+16>>2]|0;if(!e){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}function _q(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;f=i;i=i+64|0;a[d+84>>0]=0;c[f+0>>2]=c[b+4>>2];c[f+4>>2]=c[b+8>>2];c[f+8>>2]=c[b+12>>2];c[f+12>>2]=c[b+16>>2];c[f+16>>2]=c[b+20>>2];c[f+20>>2]=c[b+24>>2];c[f+24>>2]=c[b+28>>2];c[f+28>>2]=c[b+32>>2];c[f+32>>2]=c[b+36>>2];c[f+36>>2]=c[b+40>>2];c[f+40>>2]=c[b+44>>2];c[f+44>>2]=c[b+48>>2];c[f+48>>2]=c[b+52>>2];c[f+52>>2]=c[b+56>>2];c[f+56>>2]=c[b+60>>2];c[f+60>>2]=c[b+64>>2];if(e?(h=c[b+480>>2]|0,(h|0)!=0):0)Nb[c[(c[h>>2]|0)+8>>2]&127](h,f);w=+g[d+156>>2];u=+g[f>>2];v=+g[d+160>>2];t=+g[f+4>>2];o=+g[d+164>>2];s=+g[f+8>>2];r=+g[f+16>>2];q=+g[f+20>>2];p=+g[f+24>>2];n=+g[f+32>>2];l=+g[f+36>>2];j=+g[f+40>>2];m=w*r+v*q+o*p+ +g[f+52>>2];k=w*n+v*l+o*j+ +g[f+56>>2];g[d+36>>2]=w*u+v*t+o*s+ +g[f+48>>2];g[d+40>>2]=m;g[d+44>>2]=k;g[d+48>>2]=0.0;k=+g[d+172>>2];m=+g[d+176>>2];o=+g[d+180>>2];g[d+52>>2]=u*k+t*m+s*o;g[d+56>>2]=k*r+m*q+o*p;g[d+60>>2]=k*n+m*l+o*j;g[d+64>>2]=0.0;o=+g[d+188>>2];m=+g[d+192>>2];k=+g[d+196>>2];g[d+68>>2]=u*o+t*m+s*k;g[d+72>>2]=o*r+m*q+k*p;g[d+76>>2]=o*n+m*l+k*j;g[d+80>>2]=0.0;i=f;return}function $q(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0;e=i;_q(a,b+(c*284|0)|0,d);o=+g[b+(c*284|0)+52>>2];j=+g[b+(c*284|0)+56>>2];s=+g[b+(c*284|0)+60>>2];I=+g[b+(c*284|0)+76>>2];B=+g[b+(c*284|0)+72>>2];A=+g[b+(c*284|0)+68>>2];y=1.0/+Q(+((B*-o-A*-j)*(B*-o-A*-j)+((I*-j-B*-s)*(I*-j-B*-s)+(A*-s-I*-o)*(A*-s-I*-o))));x=(I*-j-B*-s)*y;w=y*(A*-s-I*-o);y=y*(B*-o-A*-j);f=+g[b+(c*284|0)+232>>2]*.5;m=+T(+f)/+Q(+(o*o+j*j+s*s));f=+S(+f);n=2.0/(f*f+(m*-s*m*-s+(m*-o*m*-o+m*-j*m*-j)));G=1.0-(m*-j*m*-j*n+m*-s*m*-s*n);F=m*-o*m*-j*n-f*m*-s*n;H=m*-o*m*-s*n+f*m*-j*n;D=m*-o*m*-j*n+f*m*-s*n;C=1.0-(m*-o*m*-o*n+m*-s*m*-s*n);E=m*-j*m*-s*n-f*m*-o*n;l=m*-o*m*-s*n-f*m*-j*n;f=m*-j*m*-s*n+f*m*-o*n;n=1.0-(m*-o*m*-o*n+m*-j*m*-j*n);m=+g[b+(c*284|0)+236>>2]*-.5;z=+T(+m)/+Q(+(I*I+(B*B+A*A)));m=+S(+m);t=2.0/(m*m+(I*z*I*z+(A*z*A*z+B*z*B*z)));p=1.0-(B*z*B*z*t+I*z*I*z*t);k=A*z*B*z*t-m*I*z*t;v=A*z*I*z*t+m*B*z*t;q=A*z*B*z*t+m*I*z*t;h=1.0-(A*z*A*z*t+I*z*I*z*t);u=B*z*I*z*t-m*A*z*t;r=A*z*I*z*t-m*B*z*t;m=B*z*I*z*t+m*A*z*t;t=1.0-(A*z*A*z*t+B*z*B*z*t);z=+g[b+(c*284|0)+72>>2];B=+g[b+(c*284|0)+76>>2];g[b+(c*284|0)+92>>2]=B*(G*v+F*u+H*t)+(A*(H*r+(F*q+G*p))+z*(H*m+(G*k+F*h)));g[b+(c*284|0)+96>>2]=y*(G*v+F*u+H*t)+(x*(H*r+(F*q+G*p))+w*(H*m+(G*k+F*h)));g[b+(c*284|0)+100>>2]=(G*v+F*u+H*t)*-s+((H*r+(F*q+G*p))*-o+(H*m+(G*k+F*h))*-j);g[b+(c*284|0)+104>>2]=0.0;g[b+(c*284|0)+108>>2]=B*(D*v+C*u+E*t)+(A*(E*r+(C*q+D*p))+z*(E*m+(D*k+C*h)));g[b+(c*284|0)+112>>2]=y*(D*v+C*u+E*t)+(x*(E*r+(C*q+D*p))+w*(E*m+(D*k+C*h)));g[b+(c*284|0)+116>>2]=(D*v+C*u+E*t)*-s+((E*r+(C*q+D*p))*-o+(E*m+(D*k+C*h))*-j);g[b+(c*284|0)+120>>2]=0.0;g[b+(c*284|0)+124>>2]=B*(l*v+f*u+n*t)+(A*(n*r+(f*q+l*p))+z*(n*m+(l*k+f*h)));g[b+(c*284|0)+128>>2]=y*(l*v+f*u+n*t)+(x*(n*r+(f*q+l*p))+w*(n*m+(l*k+f*h)));g[b+(c*284|0)+132>>2]=(l*v+f*u+n*t)*-s+((n*r+(f*q+l*p))*-o+(n*m+(l*k+f*h))*-j);g[b+(c*284|0)+136>>2]=0.0;j=+g[b+(c*284|0)+32>>2];h=j*+g[b+(c*284|0)+56>>2]+ +g[b+(c*284|0)+40>>2];f=j*+g[b+(c*284|0)+60>>2]+ +g[b+(c*284|0)+44>>2];g[b+(c*284|0)+140>>2]=+g[b+(c*284|0)+52>>2]*j+ +g[b+(c*284|0)+36>>2];g[b+(c*284|0)+144>>2]=h;g[b+(c*284|0)+148>>2]=f;g[b+(c*284|0)+152>>2]=0.0;i=e;return}function ar(b,d){b=b|0;d=+d;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0.0,G=0.0;e=i;i=i+112|0;h=c[b+136>>2]|0;if((h|0)>0){f=0;do{$q(c[b+116>>2]|0,c[b+144>>2]|0,f,0);f=f+1|0;h=c[b+136>>2]|0}while((f|0)<(h|0));f=b+116|0}else f=b+116|0;k=c[f>>2]|0;C=+g[k+312>>2];D=+g[k+316>>2];r=+g[k+320>>2];r=+Q(+(C*C+D*D+r*r))*3.5999999046325684;g[b+112>>2]=r;y=c[b+128>>2]|0;if(+g[k+(y<<2)+4>>2]*+g[k+312>>2]+ +g[k+(y<<2)+20>>2]*+g[k+316>>2]+ +g[k+(y<<2)+36>>2]*+g[k+320>>2]<0.0)g[b+112>>2]=r*-1.0;a:do if((h|0)>0){h=0;do{j=c[b+144>>2]|0;q=j+(h*284|0)|0;_q(k,q,0);u=j+(h*284|0)+204|0;y=j+(h*284|0)+212|0;r=+g[u>>2]+ +g[y>>2];n=j+(h*284|0)+52|0;o=j+(h*284|0)+56|0;p=j+(h*284|0)+60|0;E=j+(h*284|0)+36|0;m=j+(h*284|0)+16|0;C=r*+g[o>>2]+ +g[j+(h*284|0)+40>>2];D=r*+g[p>>2]+ +g[j+(h*284|0)+44>>2];g[j+(h*284|0)+16>>2]=+g[n>>2]*r+ +g[E>>2];l=j+(h*284|0)+20|0;g[l>>2]=C;k=j+(h*284|0)+24|0;g[k>>2]=D;g[j+(h*284|0)+28>>2]=0.0;g[e+64>>2]=-1.0;x=c[b+100>>2]|0;E=Tb[c[(c[x>>2]|0)+8>>2]&31](x,E,m,e+32|0)|0;x=j+(h*284|0)+88|0;c[x>>2]=0;do if(E){r=r*+g[e+64>>2];c[q+0>>2]=c[e+48>>2];c[q+4>>2]=c[e+52>>2];c[q+8>>2]=c[e+56>>2];c[q+12>>2]=c[e+60>>2];a[j+(h*284|0)+84>>0]=1;if((a[3736]|0)==0?(Ya(3736)|0)!=0:0){c[e+88>>2]=0;c[e+92>>2]=0;c[e+96>>2]=0;c[e+100>>2]=0;lr(3120,0.0,0,0,e+88|0);bb(3736)}c[e+72>>2]=0;c[e+76>>2]=0;c[e+80>>2]=0;c[e+84>>2]=0;mr(3120,0.0,e+72|0);c[x>>2]=3120;t=r- +g[y>>2];x=j+(h*284|0)+32|0;g[x>>2]=t;r=+g[u>>2];s=+g[j+(h*284|0)+208>>2]*.009999999776482582;if(t<r-s){g[x>>2]=r-s;t=r-s}if(t>r+s)g[x>>2]=r+s;c[m+0>>2]=c[e+32>>2];c[m+4>>2]=c[e+36>>2];c[m+8>>2]=c[e+40>>2];c[m+12>>2]=c[e+44>>2];s=+g[q>>2];r=+g[j+(h*284|0)+4>>2];t=+g[j+(h*284|0)+8>>2];v=s*+g[n>>2]+r*+g[o>>2]+t*+g[p>>2];n=c[f>>2]|0;w=+g[m>>2]- +g[n+52>>2];z=+g[l>>2]- +g[n+56>>2];C=+g[k>>2]- +g[n+60>>2];D=+g[n+332>>2];A=+g[n+336>>2];B=+g[n+328>>2];if(!(v>=-.10000000149011612)){g[j+(h*284|0)+272>>2]=-1.0/v*(r*(w*A-C*B+ +g[n+316>>2])+s*(D*C-z*A+ +g[n+312>>2])+t*(z*B-w*D+ +g[n+320>>2]));g[j+(h*284|0)+268>>2]=-1.0/v;break}else{g[j+(h*284|0)+272>>2]=0.0;g[j+(h*284|0)+268>>2]=10.0;break}}else{g[j+(h*284|0)+32>>2]=+g[u>>2];g[j+(h*284|0)+272>>2]=0.0;C=-+g[o>>2];D=-+g[p>>2];g[q>>2]=-+g[n>>2];g[j+(h*284|0)+4>>2]=C;g[j+(h*284|0)+8>>2]=D;g[j+(h*284|0)+12>>2]=0.0;g[j+(h*284|0)+268>>2]=1.0}while(0);h=h+1|0;j=c[b+136>>2]|0;k=c[f>>2]|0}while((h|0)<(j|0));r=1.0/+g[k+344>>2];if((j|0)>0){m=c[b+144>>2]|0;l=0;do{if(a[m+(l*284|0)+84>>0]|0){D=+g[m+(l*284|0)+272>>2];D=r*(+g[m+(l*284|0)+216>>2]*(+g[m+(l*284|0)+204>>2]- +g[m+(l*284|0)+32>>2])*+g[m+(l*284|0)+268>>2]-D*+g[(D<0.0?m+(l*284|0)+220|0:m+(l*284|0)+224|0)>>2]);h=m+(l*284|0)+276|0;g[h>>2]=D;if(D<0.0)g[h>>2]=0.0}else g[m+(l*284|0)+276>>2]=0.0;l=l+1|0}while((l|0)<(j|0));h=0;while(1){B=+g[m+(h*284|0)+276>>2];D=+g[m+(h*284|0)+248>>2];B=B>D?D:B;D=B*+g[m+(h*284|0)+4>>2]*d;C=B*+g[m+(h*284|0)+8>>2]*d;g[e+16>>2]=+g[m+(h*284|0)>>2]*B*d;g[e+20>>2]=D;g[e+24>>2]=C;g[e+28>>2]=0.0;C=+g[m+(h*284|0)+20>>2]- +g[k+56>>2];D=+g[m+(h*284|0)+24>>2]- +g[k+60>>2];g[e>>2]=+g[m+(h*284|0)+16>>2]- +g[k+52>>2];g[e+4>>2]=C;g[e+8>>2]=D;g[e+12>>2]=0.0;ym(k,e+16|0,e);h=h+1|0;if((h|0)>=(c[b+136>>2]|0))break a;m=c[b+144>>2]|0;k=c[f>>2]|0}}}while(0);Kb[c[(c[b>>2]|0)+20>>2]&31](b,d);h=c[b+136>>2]|0;if((h|0)<=0){i=e;return}j=c[b+144>>2]|0;f=c[f>>2]|0;k=0;do{t=+g[j+(k*284|0)+36>>2]- +g[f+52>>2];s=+g[j+(k*284|0)+40>>2]- +g[f+56>>2];w=+g[j+(k*284|0)+44>>2]- +g[f+60>>2];r=+g[f+332>>2];v=+g[f+336>>2];z=+g[f+328>>2];if(!(a[j+(k*284|0)+84>>0]|0)){r=+g[j+(k*284|0)+240>>2];E=j+(k*284|0)+236|0;g[E>>2]=r+ +g[E>>2]}else{E=c[b+128>>2]|0;G=+g[f+(E<<2)+4>>2];A=+g[f+(E<<2)+20>>2];C=+g[f+(E<<2)+36>>2];F=+g[j+(k*284|0)>>2];B=+g[j+(k*284|0)+4>>2];D=+g[j+(k*284|0)+8>>2];r=((s*z-t*r+ +g[f+320>>2])*(C-D*(G*F+A*B+C*D))+((r*w-s*v+ +g[f+312>>2])*(G-F*(G*F+A*B+C*D))+(t*v-w*z+ +g[f+316>>2])*(A-B*(G*F+A*B+C*D))))*d/+g[j+(k*284|0)+212>>2];g[j+(k*284|0)+240>>2]=r;E=j+(k*284|0)+236|0;g[E>>2]=r+ +g[E>>2]}g[j+(k*284|0)+240>>2]=r*.9900000095367432;k=k+1|0}while((k|0)<(h|0));i=e;return}function br(b,d){b=b|0;d=+d;var e=0,f=0,h=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,R=0.0;e=i;i=i+384|0;j=c[b+136>>2]|0;if(!j){i=e;return}k=c[b+8>>2]|0;if((k|0)<(j|0)){if((c[b+12>>2]|0)<(j|0)){c[5004]=(c[5004]|0)+1;l=fF((j<<4|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}m=c[b+8>>2]|0;if((m|0)>0){n=0;do{s=l+(n<<4)|0;q=(c[b+16>>2]|0)+(n<<4)|0;c[s+0>>2]=c[q+0>>2];c[s+4>>2]=c[q+4>>2];c[s+8>>2]=c[q+8>>2];c[s+12>>2]=c[q+12>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[b+16>>2]|0;if(m){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=l;c[b+12>>2]=j;l=b+16|0}else l=b+16|0;do{s=(c[l>>2]|0)+(k<<4)|0;c[s+0>>2]=c[e+144>>2];c[s+4>>2]=c[e+148>>2];c[s+8>>2]=c[e+152>>2];c[s+12>>2]=c[e+156>>2];k=k+1|0}while((k|0)!=(j|0))}c[b+8>>2]=j;k=c[b+28>>2]|0;if((k|0)<(j|0)){if((c[b+32>>2]|0)<(j|0)){c[5004]=(c[5004]|0)+1;l=fF((j<<4|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}n=c[b+28>>2]|0;if((n|0)>0){m=0;do{s=l+(m<<4)|0;q=(c[b+36>>2]|0)+(m<<4)|0;c[s+0>>2]=c[q+0>>2];c[s+4>>2]=c[q+4>>2];c[s+8>>2]=c[q+8>>2];c[s+12>>2]=c[q+12>>2];m=m+1|0}while((m|0)!=(n|0))}m=c[b+36>>2]|0;if(m){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=l;c[b+32>>2]=j;l=b+36|0}else l=b+36|0;do{s=(c[l>>2]|0)+(k<<4)|0;c[s+0>>2]=c[e+128>>2];c[s+4>>2]=c[e+132>>2];c[s+8>>2]=c[e+136>>2];c[s+12>>2]=c[e+140>>2];k=k+1|0}while((k|0)!=(j|0))}c[b+28>>2]=j;k=c[b+48>>2]|0;if((k|0)<(j|0)){if((c[b+52>>2]|0)<(j|0)){c[5004]=(c[5004]|0)+1;l=fF((j<<2|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}m=c[b+48>>2]|0;if((m|0)>0){n=0;do{o=l+(n<<2)|0;if(o)g[o>>2]=+g[(c[b+56>>2]|0)+(n<<2)>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[b+56>>2]|0;if(m){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=l;c[b+52>>2]=j}else l=c[b+56>>2]|0;do{m=l+(k<<2)|0;if(m)g[m>>2]=0.0;k=k+1|0}while((k|0)!=(j|0))}c[b+48>>2]=j;k=c[b+68>>2]|0;if((k|0)<(j|0)){if((c[b+72>>2]|0)<(j|0)){c[5004]=(c[5004]|0)+1;l=fF((j<<2|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}n=c[b+68>>2]|0;if((n|0)>0){m=0;do{o=l+(m<<2)|0;if(o)g[o>>2]=+g[(c[b+76>>2]|0)+(m<<2)>>2];m=m+1|0}while((m|0)!=(n|0))}m=c[b+76>>2]|0;if(m){if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=l;c[b+72>>2]=j}else l=c[b+76>>2]|0;do{m=l+(k<<2)|0;if(m)g[m>>2]=0.0;k=k+1|0}while((k|0)!=(j|0))}c[b+68>>2]=j;m=c[b+136>>2]|0;if((m|0)<=0){i=e;return}k=c[b+76>>2]|0;l=c[b+56>>2]|0;j=0;do{g[k+(j<<2)>>2]=0.0;g[l+(j<<2)>>2]=0.0;j=j+1|0}while((j|0)<(m|0));j=0;do{k=c[b+144>>2]|0;l=c[k+(j*284|0)+88>>2]|0;if(l){m=k+(j*284|0)+92|0;c[e+80>>2]=c[m+0>>2];c[e+84>>2]=c[m+4>>2];c[e+88>>2]=c[m+8>>2];c[e+92>>2]=c[m+12>>2];m=k+(j*284|0)+108|0;c[e+96>>2]=c[m+0>>2];c[e+100>>2]=c[m+4>>2];c[e+104>>2]=c[m+8>>2];c[e+108>>2]=c[m+12>>2];m=k+(j*284|0)+124|0;c[e+112>>2]=c[m+0>>2];c[e+116>>2]=c[m+4>>2];c[e+120>>2]=c[m+8>>2];c[e+124>>2]=c[m+12>>2];m=c[b+36>>2]|0;y=c[b+120>>2]|0;p=+g[e+80+(y<<2)+16>>2];z=+g[e+80+(y<<2)+32>>2];g[m+(j<<4)>>2]=+g[e+80+(y<<2)>>2];g[m+(j<<4)+4>>2]=p;g[m+(j<<4)+8>>2]=z;g[m+(j<<4)+12>>2]=0.0;m=c[b+36>>2]|0;y=m+(j<<4)|0;z=+g[y>>2];n=k+(j*284|0)|0;p=+g[n>>2];o=m+(j<<4)+4|0;x=+g[o>>2];s=k+(j*284|0)+4|0;r=+g[s>>2];m=m+(j<<4)+8|0;u=+g[m>>2];q=k+(j*284|0)+8|0;w=+g[q>>2];t=z-p*(z*p+x*r+u*w);v=x-r*(z*p+x*r+u*w);w=u-w*(z*p+x*r+u*w);u=1.0/+Q(+(t*t+v*v+w*w));g[y>>2]=t*u;g[o>>2]=v*u;g[m>>2]=w*u;m=c[b+16>>2]|0;r=+g[s>>2];x=+g[q>>2];p=+g[n>>2];g[m+(j<<4)>>2]=r*w*u-x*v*u;g[m+(j<<4)+4>>2]=x*t*u-w*u*p;g[m+(j<<4)+8>>2]=v*u*p-r*t*u;g[m+(j<<4)+12>>2]=0.0;m=c[b+16>>2]|0;n=m+(j<<4)|0;u=+g[n>>2];q=m+(j<<4)+4|0;t=+g[q>>2];m=m+(j<<4)+8|0;r=+g[m>>2];p=1.0/+Q(+(u*u+t*t+r*r));g[n>>2]=u*p;g[q>>2]=t*p;g[m>>2]=r*p;m=c[b+116>>2]|0;q=c[b+36>>2]|0;n=q+(j<<4)|0;s=(c[b+76>>2]|0)+(j<<2)|0;p=+g[n>>2];o=q+(j<<4)+4|0;r=+g[o>>2];q=q+(j<<4)+8|0;t=+g[q>>2];if(p*p+r*r+t*t>1.100000023841858)g[s>>2]=0.0;else{z=+g[k+(j*284|0)+16>>2];r=z- +g[m+52>>2];t=+g[k+(j*284|0)+20>>2];B=t- +g[m+56>>2];x=+g[k+(j*284|0)+24>>2];D=x- +g[m+60>>2];g[e+360>>2]=r;g[e+364>>2]=B;g[e+368>>2]=D;g[e+372>>2]=0.0;z=z- +g[l+52>>2];t=t- +g[l+56>>2];x=x- +g[l+60>>2];g[e+344>>2]=z;g[e+348>>2]=t;g[e+352>>2]=x;g[e+356>>2]=0.0;p=+g[m+332>>2];E=+g[m+336>>2];A=+g[m+328>>2];v=+g[l+332>>2];C=+g[l+336>>2];u=+g[l+328>>2];w=p*D-E*B+ +g[m+312>>2]-(v*x-C*t+ +g[l+312>>2]);x=+g[m+316>>2]+(E*r-D*A)-(+g[l+316>>2]+(C*z-x*u));z=B*A-p*r+ +g[m+320>>2]-(t*u-v*z+ +g[l+320>>2]);g[e+208>>2]=+g[m+4>>2];g[e+212>>2]=+g[m+20>>2];g[e+216>>2]=+g[m+36>>2];g[e+220>>2]=0.0;g[e+224>>2]=+g[m+8>>2];g[e+228>>2]=+g[m+24>>2];g[e+232>>2]=+g[m+40>>2];g[e+236>>2]=0.0;g[e+240>>2]=+g[m+12>>2];g[e+244>>2]=+g[m+28>>2];g[e+248>>2]=+g[m+44>>2];g[e+252>>2]=0.0;g[e+160>>2]=+g[l+4>>2];g[e+164>>2]=+g[l+20>>2];g[e+168>>2]=+g[l+36>>2];g[e+172>>2]=0.0;g[e+176>>2]=+g[l+8>>2];g[e+180>>2]=+g[l+24>>2];g[e+184>>2]=+g[l+40>>2];g[e+188>>2]=0.0;g[e+192>>2]=+g[l+12>>2];g[e+196>>2]=+g[l+28>>2];g[e+200>>2]=+g[l+44>>2];g[e+204>>2]=0.0;Mo(e+256|0,e+208|0,e+160|0,e+360|0,e+344|0,n,m+396|0,+g[m+344>>2],l+396|0,+g[l+344>>2]);g[s>>2]=1.0/+g[e+336>>2]*(w*+g[n>>2]+x*+g[o>>2]+z*+g[q>>2])*-.20000000298023224}m=c[b+136>>2]|0}j=j+1|0}while((j|0)<(m|0));if((m|0)<=0){i=e;return}o=c[b+144>>2]|0;k=0;j=0;while(1){l=c[o+(j*284|0)+88>>2]|0;if(l){p=+g[o+(j*284|0)+252>>2];if(p!=0.0){l=c[b+56>>2]|0;q=l+(j<<2)|0;g[q>>2]=0.0;n=o+(j*284|0)+280|0;g[n>>2]=1.0;m=o;r=p*d}else{E=+g[o+(j*284|0)+256>>2];E=E!=0.0?E:0.0;m=c[b+116>>2]|0;q=c[b+16>>2]|0;x=+g[o+(j*284|0)+16>>2];v=+g[o+(j*284|0)+20>>2];F=+g[o+(j*284|0)+24>>2];H=+g[q+(j<<4)>>2];u=+g[q+(j<<4)+4>>2];r=+g[q+(j<<4)+8>>2];O=x- +g[m+52>>2];P=v- +g[m+56>>2];M=F- +g[m+60>>2];L=+g[m+264>>2]*(P*r-M*u)+ +g[m+280>>2]*(M*H-O*r)+(O*u-P*H)*+g[m+296>>2];R=(P*r-M*u)*+g[m+268>>2]+(M*H-O*r)*+g[m+284>>2]+(O*u-P*H)*+g[m+300>>2];N=(P*r-M*u)*+g[m+272>>2]+(M*H-O*r)*+g[m+288>>2]+(O*u-P*H)*+g[m+304>>2];C=x- +g[l+52>>2];A=v- +g[l+56>>2];t=F- +g[l+60>>2];I=(u*C-H*A)*+g[l+296>>2]+(+g[l+264>>2]*(r*A-u*t)+ +g[l+280>>2]*(H*t-r*C));K=(r*A-u*t)*+g[l+268>>2]+(H*t-r*C)*+g[l+284>>2]+(u*C-H*A)*+g[l+300>>2];J=(r*A-u*t)*+g[l+272>>2]+(H*t-r*C)*+g[l+288>>2]+(u*C-H*A)*+g[l+304>>2];x=x- +g[m+52>>2];v=v- +g[m+56>>2];F=F- +g[m+60>>2];z=+g[m+332>>2];G=+g[m+336>>2];w=+g[m+328>>2];D=+g[l+332>>2];p=+g[l+336>>2];B=+g[l+328>>2];r=-(1.0/(+g[m+344>>2]+(r*(P*L-O*R)+(H*(M*R-P*N)+u*(O*N-M*L)))+(+g[l+344>>2]+(r*(A*I-C*K)+(H*(t*K-A*J)+u*(C*J-t*I)))))*((F*z-v*G+ +g[m+312>>2]-(t*D-A*p+ +g[l+312>>2]))*H+(+g[m+316>>2]+(x*G-F*w)-(+g[l+316>>2]+(C*p-t*B)))*u+(v*w-x*z+ +g[m+320>>2]-(A*B-C*D+ +g[l+320>>2]))*r));r=E<r?E:r;m=c[b+144>>2]|0;l=c[b+56>>2]|0;q=l+(j<<2)|0;g[q>>2]=0.0;n=m+(j*284|0)+280|0;g[n>>2]=1.0;r=r<-E?-E:r}g[n>>2]=1.0;p=+g[o+(j*284|0)+276>>2]*d*+g[o+(j*284|0)+228>>2];g[q>>2]=r;r=r*.5;t=+g[(c[b+76>>2]|0)+(j<<2)>>2];if(r*r+t*t>p*p){R=p/+Q(+(r*r+t*t));g[n>>2]=R*+g[n>>2];k=1}}else{l=c[b+56>>2]|0;g[l+(j<<2)>>2]=0.0;g[o+(j*284|0)+280>>2]=1.0;m=o}j=j+1|0;n=c[b+136>>2]|0;if((j|0)>=(n|0))break;else o=m}if(k){if((n|0)<=0){i=e;return}j=c[b+76>>2]|0;k=0;do{o=j+(k<<2)|0;if(+g[o>>2]!=0.0?(f=m+(k*284|0)+280|0,h=+g[f>>2],h<1.0):0){y=l+(k<<2)|0;g[y>>2]=h*+g[y>>2];g[o>>2]=+g[f>>2]*+g[o>>2]}k=k+1|0}while((k|0)<(n|0))}if((n|0)<=0){i=e;return}n=0;while(1){o=c[b+116>>2]|0;k=m+(n*284|0)+16|0;f=m+(n*284|0)+20|0;R=+g[f>>2]- +g[o+56>>2];j=m+(n*284|0)+24|0;h=+g[j>>2]- +g[o+60>>2];g[e+64>>2]=+g[k>>2]- +g[o+52>>2];g[e+68>>2]=R;g[e+72>>2]=h;g[e+76>>2]=0.0;h=+g[l+(n<<2)>>2];if(h!=0.0){y=c[b+16>>2]|0;P=h*+g[y+(n<<4)+4>>2];R=h*+g[y+(n<<4)+8>>2];g[e+48>>2]=h*+g[y+(n<<4)>>2];g[e+52>>2]=P;g[e+56>>2]=R;g[e+60>>2]=0.0;ym(o,e+48|0,e+64|0)}h=+g[(c[b+76>>2]|0)+(n<<2)>>2];if(h!=0.0){y=c[(c[b+144>>2]|0)+(n*284|0)+88>>2]|0;L=+g[f>>2]- +g[y+56>>2];N=+g[j>>2]- +g[y+60>>2];g[e+32>>2]=+g[k>>2]- +g[y+52>>2];g[e+36>>2]=L;g[e+40>>2]=N;g[e+44>>2]=0.0;s=c[b+36>>2]|0;N=h*+g[s+(n<<4)+4>>2];L=h*+g[s+(n<<4)+8>>2];g[e+16>>2]=+g[s+(n<<4)>>2]*h;g[e+20>>2]=N;g[e+24>>2]=L;g[e+28>>2]=0.0;s=c[b+116>>2]|0;q=c[b+124>>2]|0;L=+g[s+(q<<2)+4>>2];N=+g[s+(q<<2)+20>>2];R=+g[s+(q<<2)+36>>2];K=+g[e+64>>2];M=+g[e+68>>2];O=+g[e+72>>2];P=(L*K+N*M+R*O)*(1.0- +g[m+(n*284|0)+244>>2]);g[e+64>>2]=K-L*P;g[e+68>>2]=M-N*P;g[e+72>>2]=O-R*P;ym(s,e+16|0,e+64|0);P=-+g[e+20>>2];R=-+g[e+24>>2];g[e>>2]=-+g[e+16>>2];g[e+4>>2]=P;g[e+8>>2]=R;g[e+12>>2]=0.0;ym(y,e,e+32|0)}n=n+1|0;if((n|0)>=(c[b+136>>2]|0))break;m=c[b+144>>2]|0;l=c[b+56>>2]|0}i=e;return}function cr(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0,m=0;e=i;i=i+48|0;if((c[b+136>>2]|0)<=0){i=e;return}f=0;do{m=c[b+144>>2]|0;g[e+32>>2]=(a[m+(f*284|0)+84>>0]|0)==0?1.0:0.0;g[e+36>>2]=0.0;g[e+40>>2]=1.0;g[e+44>>2]=0.0;l=m+(f*284|0)+140|0;c[e+16>>2]=c[l+0>>2];c[e+20>>2]=c[l+4>>2];c[e+24>>2]=c[l+8>>2];c[e+28>>2]=c[l+12>>2];l=c[b+120>>2]|0;h=c[(c[d>>2]|0)+8>>2]|0;k=+g[m+(f*284|0)+(l<<2)+108>>2]+ +g[e+20>>2];j=+g[m+(f*284|0)+(l<<2)+124>>2]+ +g[e+24>>2];g[e>>2]=+g[m+(f*284|0)+(l<<2)+92>>2]+ +g[e+16>>2];g[e+4>>2]=k;g[e+8>>2]=j;g[e+12>>2]=0.0;vc[h&127](d,e+16|0,e,e+32|0);vc[c[(c[d>>2]|0)+8>>2]&127](d,e+16|0,(c[b+144>>2]|0)+(f*284|0)+16|0,e+32|0);f=f+1|0}while((f|0)<(c[b+136>>2]|0));i=e;return}function dr(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0;h=i;i=i+96|0;g[h+4>>2]=1.0;c[h+8>>2]=0;b[h+12>>1]=1;b[h+14>>1]=-1;c[h+16>>2]=0;c[h>>2]=336;c[h+20>>2]=c[d+0>>2];c[h+24>>2]=c[d+4>>2];c[h+28>>2]=c[d+8>>2];c[h+32>>2]=c[d+12>>2];c[h+36>>2]=c[e+0>>2];c[h+40>>2]=c[e+4>>2];c[h+44>>2]=c[e+8>>2];c[h+48>>2]=c[e+12>>2];a=c[a+4>>2]|0;vc[c[(c[a>>2]|0)+32>>2]&127](a,d,e,h);e=c[h+8>>2]|0;if(!e){a=0;i=h;return a|0}if(!(c[e+236>>2]&2)){a=0;i=h;return a|0}if(c[e+204>>2]&4){a=0;i=h;return a|0}c[f+0>>2]=c[h+68>>2];c[f+4>>2]=c[h+72>>2];c[f+8>>2]=c[h+76>>2];c[f+12>>2]=c[h+80>>2];c[f+16>>2]=c[h+52>>2];c[f+20>>2]=c[h+56>>2];c[f+24>>2]=c[h+60>>2];c[f+28>>2]=c[h+64>>2];m=+g[f+16>>2];l=+g[f+20>>2];k=+g[f+24>>2];j=1.0/+Q(+(m*m+l*l+k*k));g[f+16>>2]=m*j;g[f+20>>2]=l*j;g[f+24>>2]=k*j;g[f+32>>2]=+g[h+4>>2];a=e;i=h;return a|0}function er(a,b,d){a=a|0;b=b|0;d=+d;b=i;Kb[c[(c[a>>2]|0)+16>>2]&31](a,d);i=b;return}function fr(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[a+120>>2]=b;c[a+124>>2]=d;c[a+128>>2]=e;return}function gr(a){a=a|0;return}function hr(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ir(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=3912;e=c[b+496>>2]|0;if(!e){a[b+500>>0]=1;c[b+496>>2]=0;c[b+488>>2]=0;c[b+492>>2]=0}else{if(a[b+500>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}a[b+500>>0]=1;c[b+496>>2]=0;c[b+488>>2]=0;c[b+492>>2]=0}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function jr(a,b){a=a|0;b=b|0;c[a+260>>2]=(c[a+260>>2]|0)+1;c[a+192>>2]=b;c[a+200>>2]=b;return}function kr(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0;e=i;c[b+236>>2]=2;c[b+312>>2]=0;c[b+316>>2]=0;c[b+320>>2]=0;c[b+324>>2]=0;c[b+328>>2]=0;c[b+332>>2]=0;c[b+336>>2]=0;c[b+340>>2]=0;g[b+544>>2]=1.0;g[b+548>>2]=1.0;g[b+552>>2]=1.0;g[b+556>>2]=0.0;g[b+348>>2]=1.0;g[b+352>>2]=1.0;g[b+356>>2]=1.0;l=b+360|0;k=l+36|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(k|0));c[b+412>>2]=0;c[b+416>>2]=0;c[b+420>>2]=0;c[b+424>>2]=0;c[b+428>>2]=0;c[b+432>>2]=0;c[b+436>>2]=0;c[b+440>>2]=0;h=+g[d+92>>2];f=+g[d+96>>2];if(h<0.0)h=0.0;else h=h>1.0?1.0:h;g[b+444>>2]=h;if(f<0.0)f=0.0;else f=f>1.0?1.0:f;g[b+448>>2]=f;g[b+472>>2]=+g[d+112>>2];g[b+476>>2]=+g[d+116>>2];k=c[d+4>>2]|0;c[b+480>>2]=k;c[b+608>>2]=0;c[b+612>>2]=0;a[b+452>>0]=a[d+120>>0]|0;g[b+456>>2]=+g[d+124>>2];g[b+460>>2]=+g[d+128>>2];g[b+464>>2]=+g[d+132>>2];g[b+468>>2]=+g[d+136>>2];if(!k){c[b+4>>2]=c[d+8>>2];c[b+8>>2]=c[d+12>>2];c[b+12>>2]=c[d+16>>2];c[b+16>>2]=c[d+20>>2];c[b+20>>2]=c[d+24>>2];c[b+24>>2]=c[d+28>>2];c[b+28>>2]=c[d+32>>2];c[b+32>>2]=c[d+36>>2];c[b+36>>2]=c[d+40>>2];c[b+40>>2]=c[d+44>>2];c[b+44>>2]=c[d+48>>2];c[b+48>>2]=c[d+52>>2];c[b+52>>2]=c[d+56>>2];c[b+56>>2]=c[d+60>>2];c[b+60>>2]=c[d+64>>2];c[b+64>>2]=c[d+68>>2];n=b+52|0;m=b+20|0;k=b+36|0;l=b+4|0}else{Nb[c[(c[k>>2]|0)+8>>2]&127](k,b+4|0);n=b+52|0;m=b+20|0;k=b+36|0;l=b+4|0}c[b+68>>2]=c[l+0>>2];c[b+72>>2]=c[l+4>>2];c[b+76>>2]=c[l+8>>2];c[b+80>>2]=c[l+12>>2];c[b+84>>2]=c[m+0>>2];c[b+88>>2]=c[m+4>>2];c[b+92>>2]=c[m+8>>2];c[b+96>>2]=c[m+12>>2];c[b+100>>2]=c[k+0>>2];c[b+104>>2]=c[k+4>>2];c[b+108>>2]=c[k+8>>2];c[b+112>>2]=c[k+12>>2];c[b+116>>2]=c[n+0>>2];c[b+120>>2]=c[n+4>>2];c[b+124>>2]=c[n+8>>2];c[b+128>>2]=c[n+12>>2];c[b+132>>2]=0;c[b+136>>2]=0;c[b+140>>2]=0;c[b+144>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;c[b+156>>2]=0;c[b+160>>2]=0;g[b+224>>2]=+g[d+100>>2];g[b+232>>2]=+g[d+104>>2];g[b+228>>2]=+g[d+108>>2];Nb[c[(c[b>>2]|0)+12>>2]&127](b,c[d+72>>2]|0);k=c[986]|0;c[986]=k+1;c[b+508>>2]=k;h=+g[d>>2];k=c[b+204>>2]|0;if(h==0.0){c[b+204>>2]=k|1;g[b+344>>2]=0.0;f=0.0}else{c[b+204>>2]=k&-2;g[b+344>>2]=1.0/h;f=1.0/h}j=h*+g[b+384>>2];o=h*+g[b+388>>2];g[b+364>>2]=h*+g[b+380>>2];g[b+368>>2]=j;g[b+372>>2]=o;g[b+376>>2]=0.0;h=+g[d+76>>2];if(h!=0.0)h=1.0/h;else h=0.0;j=+g[d+80>>2];if(j!=0.0)j=1.0/j;else j=0.0;o=+g[d+84>>2];if(o!=0.0)o=1.0/o;else o=0.0;g[b+396>>2]=h;g[b+400>>2]=j;g[b+404>>2]=o;g[b+408>>2]=0.0;D=f*+g[b+352>>2];x=f*+g[b+356>>2];g[b+560>>2]=f*+g[b+348>>2];g[b+564>>2]=D;g[b+568>>2]=x;g[b+572>>2]=0.0;x=+g[b+4>>2];D=x*h;w=+g[b+8>>2];C=w*j;v=+g[b+12>>2];B=v*o;u=+g[b+20>>2];A=h*u;t=+g[b+24>>2];z=j*t;s=+g[b+28>>2];y=o*s;r=+g[b+36>>2];q=h*r;p=+g[b+40>>2];f=j*p;j=+g[b+44>>2];h=o*j;g[b+264>>2]=x*D+w*C+v*B;g[b+268>>2]=D*u+C*t+B*s;g[b+272>>2]=D*r+C*p+B*j;g[b+276>>2]=0.0;g[b+280>>2]=x*A+w*z+v*y;g[b+284>>2]=u*A+t*z+s*y;g[b+288>>2]=A*r+z*p+y*j;g[b+292>>2]=0.0;g[b+296>>2]=x*q+w*f+v*h;g[b+300>>2]=u*q+t*f+s*h;g[b+304>>2]=r*q+p*f+j*h;g[b+308>>2]=0.0;c[b+504>>2]=0;c[b+512>>2]=0;c[b+516>>2]=0;c[b+520>>2]=0;c[b+524>>2]=0;c[b+528>>2]=0;c[b+532>>2]=0;c[b+536>>2]=0;c[b+540>>2]=0;h=+g[b+344>>2];j=h*+g[b+352>>2];o=h*+g[b+356>>2];g[b+560>>2]=+g[b+348>>2]*h;g[b+564>>2]=j;g[b+568>>2]=o;l=b+572|0;k=l+36|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(k|0));i=e;return}function lr(b,d,e,f,h){b=b|0;d=+d;e=e|0;f=f|0;h=h|0;var j=0;j=i;i=i+144|0;g[b+164>>2]=1.0;g[b+168>>2]=1.0;g[b+172>>2]=1.0;g[b+176>>2]=0.0;c[b+180>>2]=0;g[b+184>>2]=999999984306749400.0;c[b+188>>2]=0;c[b+192>>2]=0;c[b+196>>2]=0;c[b+200>>2]=0;c[b+204>>2]=1;c[b+208>>2]=-1;c[b+212>>2]=-1;c[b+216>>2]=1;g[b+220>>2]=0.0;g[b+224>>2]=.5;g[b+228>>2]=0.0;g[b+232>>2]=0.0;c[b+236>>2]=1;c[b+240>>2]=0;g[b+244>>2]=1.0;c[b+248>>2]=0;c[b+252>>2]=0;c[b+256>>2]=0;c[b+260>>2]=0;g[b+4>>2]=1.0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;g[b+24>>2]=1.0;c[b+28>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;c[b+40>>2]=0;g[b+44>>2]=1.0;c[b+48>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;c[b+60>>2]=0;c[b+64>>2]=0;c[b>>2]=3912;a[b+500>>0]=1;c[b+496>>2]=0;c[b+488>>2]=0;c[b+492>>2]=0;g[j>>2]=d;c[j+4>>2]=e;c[j+72>>2]=f;c[j+76>>2]=c[h+0>>2];c[j+80>>2]=c[h+4>>2];c[j+84>>2]=c[h+8>>2];c[j+88>>2]=c[h+12>>2];g[j+92>>2]=0.0;g[j+96>>2]=0.0;g[j+100>>2]=.5;g[j+104>>2]=0.0;g[j+108>>2]=0.0;g[j+112>>2]=.800000011920929;g[j+116>>2]=1.0;a[j+120>>0]=0;g[j+124>>2]=.004999999888241291;g[j+128>>2]=.009999999776482582;g[j+132>>2]=.009999999776482582;g[j+136>>2]=.009999999776482582;g[j+8>>2]=1.0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;g[j+28>>2]=1.0;c[j+32>>2]=0;c[j+36>>2]=0;c[j+40>>2]=0;c[j+44>>2]=0;g[j+48>>2]=1.0;c[j+52>>2]=0;c[j+56>>2]=0;c[j+60>>2]=0;c[j+64>>2]=0;c[j+68>>2]=0;kr(b,j);i=j;return}function mr(a,b,d){a=a|0;b=+b;d=d|0;var e=0.0,f=0.0,h=0.0,i=0;i=c[a+204>>2]|0;if(b==0.0){c[a+204>>2]=i|1;g[a+344>>2]=0.0;e=0.0}else{c[a+204>>2]=i&-2;g[a+344>>2]=1.0/b;e=1.0/b}f=+g[a+384>>2]*b;h=+g[a+388>>2]*b;g[a+364>>2]=+g[a+380>>2]*b;g[a+368>>2]=f;g[a+372>>2]=h;g[a+376>>2]=0.0;b=+g[d>>2];if(b!=0.0)b=1.0/b;else b=0.0;f=+g[d+4>>2];if(f!=0.0)f=1.0/f;else f=0.0;h=+g[d+8>>2];if(h!=0.0)h=1.0/h;else h=0.0;g[a+396>>2]=b;g[a+400>>2]=f;g[a+404>>2]=h;g[a+408>>2]=0.0;f=e*+g[a+352>>2];h=e*+g[a+356>>2];g[a+560>>2]=+g[a+348>>2]*e;g[a+564>>2]=f;g[a+568>>2]=h;g[a+572>>2]=0.0;return}function nr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0;j=i;if(!(c[a+204>>2]&2)){c[a+68>>2]=c[b+0>>2];c[a+72>>2]=c[b+4>>2];c[a+76>>2]=c[b+8>>2];c[a+80>>2]=c[b+12>>2];c[a+84>>2]=c[b+16>>2];c[a+88>>2]=c[b+20>>2];c[a+92>>2]=c[b+24>>2];c[a+96>>2]=c[b+28>>2];c[a+100>>2]=c[b+32>>2];c[a+104>>2]=c[b+36>>2];c[a+108>>2]=c[b+40>>2];c[a+112>>2]=c[b+44>>2];c[a+116>>2]=c[b+48>>2];c[a+120>>2]=c[b+52>>2];c[a+124>>2]=c[b+56>>2];c[a+128>>2]=c[b+60>>2];l=a+20|0;m=b+16|0;d=a+36|0;k=b+32|0;f=a+52|0;h=b+48|0;e=a+4|0}else{c[a+68>>2]=c[a+4>>2];c[a+72>>2]=c[a+8>>2];c[a+76>>2]=c[a+12>>2];c[a+80>>2]=c[a+16>>2];c[a+84>>2]=c[a+20>>2];c[a+88>>2]=c[a+24>>2];c[a+92>>2]=c[a+28>>2];c[a+96>>2]=c[a+32>>2];c[a+100>>2]=c[a+36>>2];c[a+104>>2]=c[a+40>>2];c[a+108>>2]=c[a+44>>2];c[a+112>>2]=c[a+48>>2];c[a+116>>2]=c[a+52>>2];c[a+120>>2]=c[a+56>>2];c[a+124>>2]=c[a+60>>2];c[a+128>>2]=c[a+64>>2];l=a+20|0;m=b+16|0;d=a+36|0;k=b+32|0;f=a+52|0;h=b+48|0;e=a+4|0}c[a+132>>2]=c[a+312>>2];c[a+136>>2]=c[a+316>>2];c[a+140>>2]=c[a+320>>2];c[a+144>>2]=c[a+324>>2];c[a+148>>2]=c[a+328>>2];c[a+152>>2]=c[a+332>>2];c[a+156>>2]=c[a+336>>2];c[a+160>>2]=c[a+340>>2];c[e+0>>2]=c[b+0>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[l+12>>2]=c[m+12>>2];c[d+0>>2]=c[k+0>>2];c[d+4>>2]=c[k+4>>2];c[d+8>>2]=c[k+8>>2];c[d+12>>2]=c[k+12>>2];c[f+0>>2]=c[h+0>>2];c[f+4>>2]=c[h+4>>2];c[f+8>>2]=c[h+8>>2];c[f+12>>2]=c[h+12>>2];y=+g[a+4>>2];s=+g[a+396>>2];x=+g[a+8>>2];q=+g[a+400>>2];w=+g[a+12>>2];o=+g[a+404>>2];v=+g[a+20>>2];u=+g[a+24>>2];t=+g[a+28>>2];r=+g[a+36>>2];p=+g[a+40>>2];n=+g[a+44>>2];g[a+264>>2]=y*y*s+x*x*q+w*w*o;g[a+268>>2]=y*s*v+x*q*u+w*o*t;g[a+272>>2]=y*s*r+x*q*p+w*o*n;g[a+276>>2]=0.0;g[a+280>>2]=y*s*v+x*q*u+w*o*t;g[a+284>>2]=v*s*v+u*q*u+t*o*t;g[a+288>>2]=s*v*r+q*u*p+o*t*n;g[a+292>>2]=0.0;g[a+296>>2]=y*s*r+x*q*p+w*o*n;g[a+300>>2]=v*s*r+u*q*p+t*o*n;g[a+304>>2]=r*s*r+p*q*p+n*o*n;g[a+308>>2]=0.0;i=j;return}function or(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;a:do if((c[d+236>>2]&2|0)!=0?(f=c[b+488>>2]|0,(f|0)>0):0){b=c[b+496>>2]|0;g=0;while(1){h=c[b+(g<<2)>>2]|0;if(a[h+20>>0]|0){if((c[h+28>>2]|0)==(d|0)){d=0;break a}if((c[h+32>>2]|0)==(d|0)){d=0;break a}}g=g+1|0;if((g|0)>=(f|0)){d=1;break}}}else d=1;while(0);i=e;return d|0}function pr(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;h=c[b+488>>2]|0;a:do if((h|0)>0){j=c[b+496>>2]|0;g=0;while(1){k=g+1|0;if((c[j+(g<<2)>>2]|0)==(d|0))break;if((k|0)<(h|0))g=k;else break a}if((g|0)!=(h|0)){k=b+256|0;c[k>>2]=1;i=e;return}}while(0);if((h|0)==(c[b+492>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[b+488>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[b+496>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[b+496>>2]|0;if(j){if(a[b+500>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[b+488>>2]|0}c[b+496>>2]=0}a[b+500>>0]=1;c[b+496>>2]=g;c[b+492>>2]=f}f=(c[b+496>>2]|0)+(h<<2)|0;if(f)c[f>>2]=d;c[b+488>>2]=h+1;k=b+256|0;c[k>>2]=1;i=e;return}function qr(a){a=a|0;return 488}function rr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0;f=i;pu(a,b,e)|0;g[b+256>>2]=+g[a+264>>2];g[b+260>>2]=+g[a+268>>2];g[b+264>>2]=+g[a+272>>2];g[b+268>>2]=+g[a+276>>2];g[b+272>>2]=+g[a+280>>2];g[b+276>>2]=+g[a+284>>2];g[b+280>>2]=+g[a+288>>2];g[b+284>>2]=+g[a+292>>2];g[b+288>>2]=+g[a+296>>2];g[b+292>>2]=+g[a+300>>2];g[b+296>>2]=+g[a+304>>2];g[b+300>>2]=+g[a+308>>2];g[b+304>>2]=+g[a+312>>2];g[b+308>>2]=+g[a+316>>2];g[b+312>>2]=+g[a+320>>2];g[b+316>>2]=+g[a+324>>2];g[b+320>>2]=+g[a+328>>2];g[b+324>>2]=+g[a+332>>2];g[b+328>>2]=+g[a+336>>2];g[b+332>>2]=+g[a+340>>2];g[b+448>>2]=+g[a+344>>2];g[b+336>>2]=+g[a+544>>2];g[b+340>>2]=+g[a+548>>2];g[b+344>>2]=+g[a+552>>2];g[b+348>>2]=+g[a+556>>2];g[b+352>>2]=+g[a+348>>2];g[b+356>>2]=+g[a+352>>2];g[b+360>>2]=+g[a+356>>2];g[b+364>>2]=+g[a+360>>2];g[b+368>>2]=+g[a+364>>2];g[b+372>>2]=+g[a+368>>2];g[b+376>>2]=+g[a+372>>2];g[b+380>>2]=+g[a+376>>2];g[b+384>>2]=+g[a+380>>2];g[b+388>>2]=+g[a+384>>2];g[b+392>>2]=+g[a+388>>2];g[b+396>>2]=+g[a+392>>2];g[b+400>>2]=+g[a+396>>2];g[b+404>>2]=+g[a+400>>2];g[b+408>>2]=+g[a+404>>2];g[b+412>>2]=+g[a+408>>2];g[b+416>>2]=+g[a+412>>2];g[b+420>>2]=+g[a+416>>2];g[b+424>>2]=+g[a+420>>2];g[b+428>>2]=+g[a+424>>2];g[b+432>>2]=+g[a+428>>2];g[b+436>>2]=+g[a+432>>2];g[b+440>>2]=+g[a+436>>2];g[b+444>>2]=+g[a+440>>2];g[b+452>>2]=+g[a+444>>2];g[b+456>>2]=+g[a+448>>2];c[b+484>>2]=d[a+452>>0];g[b+460>>2]=+g[a+456>>2];g[b+464>>2]=+g[a+460>>2];g[b+468>>2]=+g[a+464>>2];g[b+472>>2]=+g[a+468>>2];g[b+476>>2]=+g[a+472>>2];g[b+480>>2]=+g[a+476>>2];i=f;return 3952}function sr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[(c[b>>2]|0)+16>>2]|0;f=Pb[c[(c[a>>2]|0)+16>>2]&127](a)|0;f=Yb[e&31](b,f,1)|0;e=Yb[c[(c[a>>2]|0)+20>>2]&31](a,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,e,1497645650,a);i=d;return}function tr(a){a=a|0;var b=0;b=i;ur(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function ur(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=4024;e=c[b+176>>2]|0;if(e){if(a[b+180>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+176>>2]=0}a[b+180>>0]=1;c[b+176>>2]=0;c[b+168>>2]=0;c[b+172>>2]=0;e=c[b+156>>2]|0;if(e){if(a[b+160>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;e=c[b+136>>2]|0;if(e){if(a[b+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;e=c[b+116>>2]|0;if(e){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;e=c[b+96>>2]|0;if(e){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;e=c[b+76>>2]|0;if(e){if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;c[b+72>>2]=0;e=c[b+56>>2]|0;if(e){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;e=c[b+36>>2]|0;if(e){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;e=c[b+16>>2]|0;if(!e){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}function vr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0,m=0.0;j=i;k=+g[d+100>>2];h=+g[d+16>>2];e=+g[d+20>>2];f=+g[d+24>>2];l=+g[d+108>>2];l=+g[d+112>>2]-k*+g[d+116>>2]-(h*+g[a+64>>2]+e*+g[a+68>>2]+f*+g[a+72>>2]+(+g[d>>2]*+g[a+80>>2]+ +g[d+4>>2]*+g[a+84>>2]+ +g[d+8>>2]*+g[a+88>>2]))*l-l*(+g[d+48>>2]*+g[b+64>>2]+ +g[d+52>>2]*+g[b+68>>2]+ +g[d+56>>2]*+g[b+72>>2]+(+g[d+32>>2]*+g[b+80>>2]+ +g[d+36>>2]*+g[b+84>>2]+ +g[d+40>>2]*+g[b+88>>2]));m=+g[d+120>>2];do if(!(k+l<m)){m=+g[d+124>>2];if(k+l>m){g[d+100>>2]=m;l=m-k;break}else{g[d+100>>2]=k+l;break}}else{g[d+100>>2]=m;l=m-k}while(0);if(c[a+240>>2]|0){m=l*+g[a+132>>2]*e*+g[a+116>>2];k=l*+g[a+136>>2]*f*+g[a+120>>2];g[a+64>>2]=+g[a+112>>2]*l*+g[a+128>>2]*h+ +g[a+64>>2];g[a+68>>2]=m+ +g[a+68>>2];g[a+72>>2]=k+ +g[a+72>>2];k=l*+g[a+100>>2]*+g[d+68>>2];m=l*+g[a+104>>2]*+g[d+72>>2];g[a+80>>2]=l*+g[a+96>>2]*+g[d+64>>2]+ +g[a+80>>2];g[a+84>>2]=k+ +g[a+84>>2];g[a+88>>2]=m+ +g[a+88>>2]}if(!(c[b+240>>2]|0)){i=j;return}m=l*+g[b+132>>2]*+g[d+52>>2]*+g[b+116>>2];k=l*+g[b+136>>2]*+g[d+56>>2]*+g[b+120>>2];g[b+64>>2]=+g[b+112>>2]*l*+g[b+128>>2]*+g[d+48>>2]+ +g[b+64>>2];g[b+68>>2]=m+ +g[b+68>>2];g[b+72>>2]=k+ +g[b+72>>2];k=l*+g[b+100>>2]*+g[d+84>>2];m=l*+g[b+104>>2]*+g[d+88>>2];g[b+80>>2]=l*+g[b+96>>2]*+g[d+80>>2]+ +g[b+80>>2];g[b+84>>2]=k+ +g[b+84>>2];g[b+88>>2]=m+ +g[b+88>>2];i=j;return}function wr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0,m=0.0,n=0.0;j=i;m=+g[d+100>>2];h=+g[d+16>>2];e=+g[d+20>>2];f=+g[d+24>>2];n=+g[d+108>>2];n=+g[d+112>>2]-m*+g[d+116>>2]-(h*+g[a+64>>2]+e*+g[a+68>>2]+f*+g[a+72>>2]+(+g[d>>2]*+g[a+80>>2]+ +g[d+4>>2]*+g[a+84>>2]+ +g[d+8>>2]*+g[a+88>>2]))*n-n*(+g[d+48>>2]*+g[b+64>>2]+ +g[d+52>>2]*+g[b+68>>2]+ +g[d+56>>2]*+g[b+72>>2]+(+g[d+32>>2]*+g[b+80>>2]+ +g[d+36>>2]*+g[b+84>>2]+ +g[d+40>>2]*+g[b+88>>2]));l=+g[d+120>>2];if(m+n<l)k=l-m;else{k=n;l=m+n}g[d+100>>2]=l;if(c[a+240>>2]|0){n=k*+g[a+132>>2]*e*+g[a+116>>2];m=k*+g[a+136>>2]*f*+g[a+120>>2];g[a+64>>2]=+g[a+112>>2]*k*+g[a+128>>2]*h+ +g[a+64>>2];g[a+68>>2]=n+ +g[a+68>>2];g[a+72>>2]=m+ +g[a+72>>2];m=k*+g[a+100>>2]*+g[d+68>>2];n=k*+g[a+104>>2]*+g[d+72>>2];g[a+80>>2]=k*+g[a+96>>2]*+g[d+64>>2]+ +g[a+80>>2];g[a+84>>2]=m+ +g[a+84>>2];g[a+88>>2]=n+ +g[a+88>>2]}if(!(c[b+240>>2]|0)){i=j;return}n=k*+g[b+132>>2]*+g[d+52>>2]*+g[b+116>>2];m=k*+g[b+136>>2]*+g[d+56>>2]*+g[b+120>>2];g[b+64>>2]=+g[b+112>>2]*k*+g[b+128>>2]*+g[d+48>>2]+ +g[b+64>>2];g[b+68>>2]=n+ +g[b+68>>2];g[b+72>>2]=m+ +g[b+72>>2];m=k*+g[b+100>>2]*+g[d+84>>2];n=k*+g[b+104>>2]*+g[d+88>>2];g[b+80>>2]=k*+g[b+96>>2]*+g[d+80>>2]+ +g[b+80>>2];g[b+84>>2]=m+ +g[b+84>>2];g[b+88>>2]=n+ +g[b+88>>2];i=j;return}function xr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0,m=0.0,n=0.0;j=i;l=+g[d+128>>2];if(!(l!=0.0)){i=j;return}c[1002]=(c[1002]|0)+1;k=+g[d+96>>2];f=+g[d+16>>2];h=+g[d+20>>2];e=+g[d+24>>2];n=+g[d+108>>2];n=l-k*+g[d+116>>2]-(f*+g[a+144>>2]+h*+g[a+148>>2]+e*+g[a+152>>2]+(+g[d>>2]*+g[a+160>>2]+ +g[d+4>>2]*+g[a+164>>2]+ +g[d+8>>2]*+g[a+168>>2]))*n-n*(+g[d+48>>2]*+g[b+144>>2]+ +g[d+52>>2]*+g[b+148>>2]+ +g[d+56>>2]*+g[b+152>>2]+(+g[d+32>>2]*+g[b+160>>2]+ +g[d+36>>2]*+g[b+164>>2]+ +g[d+40>>2]*+g[b+168>>2]));m=+g[d+120>>2];if(k+n<m)l=m-k;else{l=n;m=k+n}g[d+96>>2]=m;if(c[a+240>>2]|0){n=l*+g[a+132>>2]*h*+g[a+116>>2];m=l*+g[a+136>>2]*e*+g[a+120>>2];g[a+144>>2]=+g[a+112>>2]*l*+g[a+128>>2]*f+ +g[a+144>>2];g[a+148>>2]=n+ +g[a+148>>2];g[a+152>>2]=m+ +g[a+152>>2];m=l*+g[a+100>>2]*+g[d+68>>2];n=l*+g[a+104>>2]*+g[d+72>>2];g[a+160>>2]=l*+g[a+96>>2]*+g[d+64>>2]+ +g[a+160>>2];g[a+164>>2]=m+ +g[a+164>>2];g[a+168>>2]=n+ +g[a+168>>2]}if(!(c[b+240>>2]|0)){i=j;return}n=l*+g[b+132>>2]*+g[d+52>>2]*+g[b+116>>2];m=l*+g[b+136>>2]*+g[d+56>>2]*+g[b+120>>2];g[b+144>>2]=+g[b+112>>2]*l*+g[b+128>>2]*+g[d+48>>2]+ +g[b+144>>2];g[b+148>>2]=n+ +g[b+148>>2];g[b+152>>2]=m+ +g[b+152>>2];m=l*+g[b+100>>2]*+g[d+84>>2];n=l*+g[b+104>>2]*+g[d+88>>2];g[b+160>>2]=l*+g[b+96>>2]*+g[d+80>>2]+ +g[b+160>>2];g[b+164>>2]=m+ +g[b+164>>2];g[b+168>>2]=n+ +g[b+168>>2];i=j;return}function yr(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;e=i;if(!((b|0)!=0?(c[b+236>>2]&2|0)!=0:0))b=0;f=(b|0)==0;c[a+64>>2]=0;c[a+68>>2]=0;c[a+72>>2]=0;c[a+76>>2]=0;c[a+80>>2]=0;c[a+84>>2]=0;c[a+88>>2]=0;c[a+92>>2]=0;c[a+144>>2]=0;c[a+148>>2]=0;c[a+152>>2]=0;c[a+156>>2]=0;c[a+160>>2]=0;c[a+164>>2]=0;c[a+168>>2]=0;c[a+172>>2]=0;if(f){g[a>>2]=1.0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;g[a+20>>2]=1.0;c[a+24>>2]=0;c[a+28>>2]=0;c[a+32>>2]=0;c[a+36>>2]=0;g[a+40>>2]=1.0;c[a+44>>2]=0;c[a+48>>2]=0;c[a+52>>2]=0;c[a+56>>2]=0;c[a+60>>2]=0;c[a+240>>2]=0;c[a+128>>2]=0;c[a+132>>2]=0;c[a+136>>2]=0;c[a+140>>2]=0;g[a+96>>2]=1.0;g[a+100>>2]=1.0;g[a+104>>2]=1.0;g[a+108>>2]=0.0;g[a+112>>2]=1.0;g[a+116>>2]=1.0;g[a+120>>2]=1.0;g[a+124>>2]=0.0;b=a+176|0;a=b+64|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(a|0));i=e;return}else{f=b+4|0;c[a+0>>2]=c[f+0>>2];c[a+4>>2]=c[f+4>>2];c[a+8>>2]=c[f+8>>2];c[a+12>>2]=c[f+12>>2];f=b+20|0;c[a+16>>2]=c[f+0>>2];c[a+20>>2]=c[f+4>>2];c[a+24>>2]=c[f+8>>2];c[a+28>>2]=c[f+12>>2];f=b+36|0;c[a+32>>2]=c[f+0>>2];c[a+36>>2]=c[f+4>>2];c[a+40>>2]=c[f+8>>2];c[a+44>>2]=c[f+12>>2];f=b+52|0;c[a+48>>2]=c[f+0>>2];c[a+52>>2]=c[f+4>>2];c[a+56>>2]=c[f+8>>2];c[a+60>>2]=c[f+12>>2];f=b+344|0;m=+g[f>>2];n=b+348|0;l=m*+g[b+352>>2];k=m*+g[b+356>>2];g[a+128>>2]=m*+g[n>>2];g[a+132>>2]=l;g[a+136>>2]=k;g[a+140>>2]=0.0;c[a+240>>2]=b;o=b+544|0;c[a+96>>2]=c[o+0>>2];c[a+100>>2]=c[o+4>>2];c[a+104>>2]=c[o+8>>2];c[a+108>>2]=c[o+12>>2];c[a+112>>2]=c[n+0>>2];c[a+116>>2]=c[n+4>>2];c[a+120>>2]=c[n+8>>2];c[a+124>>2]=c[n+12>>2];n=b+312|0;c[a+176>>2]=c[n+0>>2];c[a+180>>2]=c[n+4>>2];c[a+184>>2]=c[n+8>>2];c[a+188>>2]=c[n+12>>2];n=b+328|0;c[a+192>>2]=c[n+0>>2];c[a+196>>2]=c[n+4>>2];c[a+200>>2]=c[n+8>>2];c[a+204>>2]=c[n+12>>2];k=+g[f>>2];l=k*+g[b+416>>2]*d;m=k*+g[b+420>>2]*d;g[a+208>>2]=k*+g[b+412>>2]*d;g[a+212>>2]=l;g[a+216>>2]=m;g[a+220>>2]=0.0;m=+g[b+428>>2];l=+g[b+432>>2];k=+g[b+436>>2];j=(m*+g[b+268>>2]+l*+g[b+284>>2]+k*+g[b+300>>2])*d;h=(m*+g[b+272>>2]+l*+g[b+288>>2]+k*+g[b+304>>2])*d;g[a+224>>2]=(+g[b+264>>2]*m+ +g[b+280>>2]*l+ +g[b+296>>2]*k)*d;g[a+228>>2]=j;g[a+232>>2]=h;g[a+236>>2]=0.0;i=e;return}}function zr(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;d=i;if(!a){i=d;return}if(!(c[a+180>>2]&1)){i=d;return}r=+g[a+4>>2];t=+g[b>>2];o=+g[a+20>>2];s=+g[b+4>>2];l=+g[a+36>>2];e=+g[b+8>>2];q=+g[a+8>>2];n=+g[a+24>>2];j=+g[a+40>>2];p=+g[a+12>>2];m=+g[a+28>>2];f=+g[a+44>>2];k=(r*t+o*s+l*e)*+g[a+164>>2];h=(t*q+s*n+e*j)*+g[a+168>>2];e=(t*p+s*m+e*f)*+g[a+172>>2];g[b>>2]=r*k+q*h+p*e;g[b+4>>2]=o*k+n*h+m*e;g[b+8>>2]=l*k+j*h+f*e;g[b+12>>2]=0.0;i=d;return}function Ar(b,d,e,f,h,j,k,l,m,n,o){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=+m;n=+n;o=+o;var p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0.0,I=0.0;q=i;p=c[b+68>>2]|0;if((p|0)==(c[b+72>>2]|0)?(r=(p|0)==0?1:p<<1,(p|0)<(r|0)):0){if(!r){x=0;F=p}else{c[5004]=(c[5004]|0)+1;x=fF((r*152|3)+16|0)|0;if(!x)x=0;else{c[(x+19&-16)+ -4>>2]=x;x=x+19&-16}F=c[b+68>>2]|0}if((F|0)>0){E=0;do{mF(x+(E*152|0)|0,(c[b+76>>2]|0)+(E*152|0)|0,152)|0;E=E+1|0}while((E|0)!=(F|0))}E=c[b+76>>2]|0;if(E){if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[E+ -4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=x;c[b+72>>2]=r;r=c[b+68>>2]|0}else r=p;c[b+68>>2]=r+1;r=c[b+76>>2]|0;c[r+(p*152|0)+140>>2]=h;h=c[b+16>>2]|0;x=c[h+(e*244|0)+240>>2]|0;b=c[h+(f*244|0)+240>>2]|0;c[r+(p*152|0)+144>>2]=e;c[r+(p*152|0)+148>>2]=f;v=+g[j+84>>2];g[r+(p*152|0)+104>>2]=v;c[r+(p*152|0)+132>>2]=0;g[r+(p*152|0)+100>>2]=0.0;g[r+(p*152|0)+96>>2]=0.0;if(x){c[r+(p*152|0)+16>>2]=c[d+0>>2];c[r+(p*152|0)+20>>2]=c[d+4>>2];c[r+(p*152|0)+24>>2]=c[d+8>>2];c[r+(p*152|0)+28>>2]=c[d+12>>2];B=+g[k+4>>2];C=+g[r+(p*152|0)+24>>2];D=+g[k+8>>2];w=+g[r+(p*152|0)+20>>2];y=+g[r+(p*152|0)+16>>2];u=+g[k>>2];g[r+(p*152|0)>>2]=B*C-D*w;g[r+(p*152|0)+4>>2]=D*y-C*u;g[r+(p*152|0)+8>>2]=w*u-B*y;g[r+(p*152|0)+12>>2]=0.0;z=((B*C-D*w)*+g[x+280>>2]+(D*y-C*u)*+g[x+284>>2]+(w*u-B*y)*+g[x+288>>2])*+g[x+548>>2];A=((B*C-D*w)*+g[x+296>>2]+(D*y-C*u)*+g[x+300>>2]+(w*u-B*y)*+g[x+304>>2])*+g[x+552>>2];g[r+(p*152|0)+64>>2]=((B*C-D*w)*+g[x+264>>2]+ +g[x+268>>2]*(D*y-C*u)+(w*u-B*y)*+g[x+272>>2])*+g[x+544>>2];g[r+(p*152|0)+68>>2]=z;g[r+(p*152|0)+72>>2]=A;g[r+(p*152|0)+76>>2]=0.0;w=B*C-D*w}else{c[r+(p*152|0)+64>>2]=0;c[r+(p*152|0)+68>>2]=0;c[r+(p*152|0)+72>>2]=0;c[r+(p*152|0)+76>>2]=0;c[r+(p*152|0)+0>>2]=0;c[r+(p*152|0)+4>>2]=0;c[r+(p*152|0)+8>>2]=0;c[r+(p*152|0)+12>>2]=0;c[r+(p*152|0)+16>>2]=0;c[r+(p*152|0)+20>>2]=0;c[r+(p*152|0)+24>>2]=0;c[r+(p*152|0)+28>>2]=0;w=0.0}if(b){u=-+g[d>>2];C=-+g[d+4>>2];s=-+g[d+8>>2];g[r+(p*152|0)+48>>2]=u;g[r+(p*152|0)+52>>2]=C;g[r+(p*152|0)+56>>2]=s;g[r+(p*152|0)+60>>2]=0.0;D=+g[l+4>>2];G=+g[l+8>>2];A=+g[l>>2];g[r+(p*152|0)+32>>2]=D*s-G*C;g[r+(p*152|0)+36>>2]=G*u-A*s;g[r+(p*152|0)+40>>2]=A*C-D*u;g[r+(p*152|0)+44>>2]=0.0;B=((D*s-G*C)*+g[b+264>>2]+ +g[b+268>>2]*(G*u-A*s)+(A*C-D*u)*+g[b+272>>2])*+g[b+544>>2];z=((D*s-G*C)*+g[b+280>>2]+(G*u-A*s)*+g[b+284>>2]+(A*C-D*u)*+g[b+288>>2])*+g[b+548>>2];y=((D*s-G*C)*+g[b+296>>2]+(G*u-A*s)*+g[b+300>>2]+(A*C-D*u)*+g[b+304>>2])*+g[b+552>>2];g[r+(p*152|0)+80>>2]=B;g[r+(p*152|0)+84>>2]=z;g[r+(p*152|0)+88>>2]=y;g[r+(p*152|0)+92>>2]=0.0;t=D*s-G*C;s=G*u-A*s;u=A*C-D*u}else{c[r+(p*152|0)+80>>2]=0;c[r+(p*152|0)+84>>2]=0;c[r+(p*152|0)+88>>2]=0;c[r+(p*152|0)+92>>2]=0;c[r+(p*152|0)+32>>2]=0;c[r+(p*152|0)+36>>2]=0;c[r+(p*152|0)+40>>2]=0;c[r+(p*152|0)+44>>2]=0;c[r+(p*152|0)+48>>2]=0;c[r+(p*152|0)+52>>2]=0;c[r+(p*152|0)+56>>2]=0;c[r+(p*152|0)+60>>2]=0;B=0.0;z=0.0;y=0.0;t=0.0;s=0.0;u=0.0}if(x){G=+g[r+(p*152|0)+68>>2];H=+g[k+8>>2];I=+g[r+(p*152|0)+72>>2];C=+g[k+4>>2];A=+g[k>>2];D=+g[r+(p*152|0)+64>>2];A=+g[x+344>>2]+((G*H-I*C)*+g[d>>2]+(I*A-H*D)*+g[d+4>>2]+(C*D-G*A)*+g[d+8>>2])}else A=0.0;if(b){H=-B;I=-z;C=-y;D=+g[l+8>>2];G=+g[l+4>>2];y=+g[l>>2];y=+g[b+344>>2]+((D*I-G*C)*+g[d>>2]+(y*C-D*H)*+g[d+4>>2]+(G*H-y*I)*+g[d+8>>2])}else y=0.0;m=m/(A+y);g[r+(p*152|0)+108>>2]=m;if(x){z=+g[h+(e*244|0)+176>>2]+ +g[h+(e*244|0)+208>>2];y=+g[h+(e*244|0)+180>>2]+ +g[h+(e*244|0)+212>>2];A=+g[h+(e*244|0)+184>>2]+ +g[h+(e*244|0)+216>>2]}else{z=0.0;y=0.0;A=0.0}if(x){B=+g[h+(e*244|0)+192>>2];C=+g[h+(e*244|0)+196>>2];D=+g[h+(e*244|0)+200>>2]}else{B=0.0;C=0.0;D=0.0}w=z*+g[r+(p*152|0)+16>>2]+y*+g[r+(p*152|0)+20>>2]+A*+g[r+(p*152|0)+24>>2]+(B*w+C*+g[r+(p*152|0)+4>>2]+D*+g[r+(p*152|0)+8>>2]);if(b){y=+g[h+(f*244|0)+176>>2]+ +g[h+(f*244|0)+208>>2];A=+g[h+(f*244|0)+180>>2]+ +g[h+(f*244|0)+212>>2];z=+g[h+(f*244|0)+184>>2]+ +g[h+(f*244|0)+216>>2]}else{y=0.0;A=0.0;z=0.0}y=y*+g[r+(p*152|0)+48>>2]+A*+g[r+(p*152|0)+52>>2]+z*+g[r+(p*152|0)+56>>2];if(!b){G=0.0;H=0.0;I=0.0;G=G*t;H=H*s;H=G+H;I=I*u;I=H+I;I=y+I;I=w+I;I=n-I;I=m*I;F=r+(p*152|0)+112|0;g[F>>2]=I;F=r+(p*152|0)+116|0;g[F>>2]=o;I=-v;F=r+(p*152|0)+120|0;g[F>>2]=I;F=r+(p*152|0)+124|0;g[F>>2]=v;i=q;return}G=+g[h+(f*244|0)+192>>2];H=+g[h+(f*244|0)+196>>2];I=+g[h+(f*244|0)+200>>2];G=G*t;H=H*s;H=G+H;I=I*u;I=H+I;I=y+I;I=w+I;I=n-I;I=m*I;F=r+(p*152|0)+112|0;g[F>>2]=I;F=r+(p*152|0)+116|0;g[F>>2]=o;I=-v;F=r+(p*152|0)+120|0;g[F>>2]=I;F=r+(p*152|0)+124|0;g[F>>2]=v;i=q;return}function Br(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0;l=i;k=c[b+88>>2]|0;if((k|0)==(c[b+92>>2]|0)?(m=(k|0)==0?1:k<<1,(k|0)<(m|0)):0){if(!m){u=0;B=k}else{c[5004]=(c[5004]|0)+1;u=fF((m*152|3)+16|0)|0;if(!u)u=0;else{c[(u+19&-16)+ -4>>2]=u;u=u+19&-16}B=c[b+88>>2]|0}if((B|0)>0){C=0;do{mF(u+(C*152|0)|0,(c[b+96>>2]|0)+(C*152|0)|0,152)|0;C=C+1|0}while((C|0)!=(B|0))}B=c[b+96>>2]|0;if(B){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[B+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=u;c[b+92>>2]=m;m=c[b+88>>2]|0}else m=k;c[b+88>>2]=m+1;m=c[b+96>>2]|0;c[m+(k*152|0)+140>>2]=h;c[m+(k*152|0)+16>>2]=0;c[m+(k*152|0)+20>>2]=0;c[m+(k*152|0)+24>>2]=0;c[m+(k*152|0)+28>>2]=0;g[m+(k*152|0)+48>>2]=-0.0;g[m+(k*152|0)+52>>2]=-0.0;g[m+(k*152|0)+56>>2]=-0.0;g[m+(k*152|0)+60>>2]=0.0;b=c[b+16>>2]|0;u=c[b+(e*244|0)+240>>2]|0;h=c[b+(f*244|0)+240>>2]|0;c[m+(k*152|0)+144>>2]=e;c[m+(k*152|0)+148>>2]=f;n=+g[j+88>>2];g[m+(k*152|0)+104>>2]=n;c[m+(k*152|0)+132>>2]=0;g[m+(k*152|0)+100>>2]=0.0;g[m+(k*152|0)+96>>2]=0.0;o=-+g[d>>2];p=-+g[d+4>>2];q=-+g[d+8>>2];g[m+(k*152|0)>>2]=o;g[m+(k*152|0)+4>>2]=p;g[m+(k*152|0)+8>>2]=q;g[m+(k*152|0)+12>>2]=0.0;if(u){s=(+g[u+264>>2]*o+ +g[u+268>>2]*p+ +g[u+272>>2]*q)*+g[u+544>>2];r=(+g[u+280>>2]*o+ +g[u+284>>2]*p+ +g[u+288>>2]*q)*+g[u+548>>2];t=(+g[u+296>>2]*o+ +g[u+300>>2]*p+ +g[u+304>>2]*q)*+g[u+552>>2]}else{s=0.0;r=0.0;t=0.0}g[m+(k*152|0)+64>>2]=s;g[m+(k*152|0)+68>>2]=r;g[m+(k*152|0)+72>>2]=t;g[m+(k*152|0)+76>>2]=0.0;t=+g[d>>2];s=+g[d+4>>2];r=+g[d+8>>2];A=+g[d+12>>2];g[m+(k*152|0)+32>>2]=t;g[m+(k*152|0)+36>>2]=s;g[m+(k*152|0)+40>>2]=r;g[m+(k*152|0)+44>>2]=A;if(h){w=(t*+g[h+264>>2]+s*+g[h+268>>2]+r*+g[h+272>>2])*+g[h+544>>2];v=(t*+g[h+280>>2]+s*+g[h+284>>2]+r*+g[h+288>>2])*+g[h+548>>2];x=(t*+g[h+296>>2]+s*+g[h+300>>2]+r*+g[h+304>>2])*+g[h+552>>2]}else{w=0.0;v=0.0;x=0.0}g[m+(k*152|0)+80>>2]=w;g[m+(k*152|0)+84>>2]=v;g[m+(k*152|0)+88>>2]=x;g[m+(k*152|0)+92>>2]=0.0;if(u){A=+g[u+264>>2]*o+ +g[u+268>>2]*p+ +g[u+272>>2]*q;z=+g[u+280>>2]*o+ +g[u+284>>2]*p+ +g[u+288>>2]*q;w=+g[u+296>>2]*o+ +g[u+300>>2]*p+ +g[u+304>>2]*q}else{A=0.0;z=0.0;w=0.0}if(h){v=+g[h+264>>2]*t+ +g[h+268>>2]*s+ +g[h+272>>2]*r;y=t*+g[h+280>>2]+s*+g[h+284>>2]+r*+g[h+288>>2];x=t*+g[h+296>>2]+s*+g[h+300>>2]+r*+g[h+304>>2]}else{v=0.0;y=0.0;x=0.0}v=1.0/(A*o+z*p+w*q+0.0+(v*t+y*s+x*r));g[m+(k*152|0)+108>>2]=v;if(u){y=+g[b+(e*244|0)+192>>2];x=+g[b+(e*244|0)+196>>2];w=+g[b+(e*244|0)+200>>2];z=(+g[b+(e*244|0)+176>>2]+ +g[b+(e*244|0)+208>>2])*0.0+(+g[b+(e*244|0)+180>>2]+ +g[b+(e*244|0)+212>>2])*0.0+(+g[b+(e*244|0)+184>>2]+ +g[b+(e*244|0)+216>>2])*0.0}else{y=0.0;x=0.0;w=0.0;z=0.0}o=z+(y*o+x*p+w*q);if(!h){x=0.0;y=0.0;A=0.0;z=-0.0;x=x*t;y=y*s;y=x+y;A=A*r;A=y+A;A=z+A;A=o+A;A=0.0-A;A=v*A;C=m+(k*152|0)+112|0;g[C>>2]=A;C=m+(k*152|0)+116|0;g[C>>2]=0.0;A=-n;C=m+(k*152|0)+120|0;g[C>>2]=A;C=m+(k*152|0)+124|0;g[C>>2]=n;i=l;return}x=+g[b+(f*244|0)+192>>2];y=+g[b+(f*244|0)+196>>2];A=+g[b+(f*244|0)+200>>2];z=(+g[b+(f*244|0)+176>>2]+ +g[b+(f*244|0)+208>>2])*-0.0+(+g[b+(f*244|0)+180>>2]+ +g[b+(f*244|0)+212>>2])*-0.0+(+g[b+(f*244|0)+184>>2]+ +g[b+(f*244|0)+216>>2])*-0.0;x=x*t;y=y*s;y=x+y;A=A*r;A=y+A;A=z+A;A=o+A;A=0.0-A;A=v*A;C=m+(k*152|0)+112|0;g[C>>2]=A;C=m+(k*152|0)+116|0;g[C>>2]=0.0;A=-n;C=m+(k*152|0)+120|0;g[C>>2]=A;C=m+(k*152|0)+124|0;g[C>>2]=n;i=l;return}function Cr(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0;e=i;i=i+496|0;f=c[b+212>>2]|0;if((f|0)>-1){b=f;i=e;return b|0}do if(c[b+236>>2]&2){if(!(+g[b+344>>2]!=0.0)?(c[b+204>>2]&2|0)==0:0)break;f=c[a+8>>2]|0;jF(e+244|0,0,244)|0;yr(Dr(a+4|0,e+244|0)|0,b,d);c[b+212>>2]=f;b=f;i=e;return b|0}while(0);f=c[a+188>>2]|0;if((f|0)>=0){b=f;i=e;return b|0}c[a+188>>2]=c[a+8>>2];jF(e|0,0,244)|0;yr(Dr(a+4|0,e)|0,0,d);b=c[a+188>>2]|0;i=e;return b|0}function Dr(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;f=c[b+4>>2]|0;if((f|0)==(c[b+8>>2]|0)?(g=(f|0)==0?1:f<<1,(f|0)<(g|0)):0){if(!g){h=0;j=f}else{c[5004]=(c[5004]|0)+1;h=fF((g*244|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+4>>2]|0}if((j|0)>0){k=0;do{m=h+(k*244|0)|0;l=c[b+12>>2]|0;n=l+(k*244|0)|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=h+(k*244|0)+16|0;n=l+(k*244|0)+16|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=h+(k*244|0)+32|0;n=l+(k*244|0)+32|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=h+(k*244|0)+48|0;n=l+(k*244|0)+48|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];mF(h+(k*244|0)+64|0,l+(k*244|0)+64|0,180)|0;k=k+1|0}while((k|0)!=(j|0))}j=c[b+12>>2]|0;if(j){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=g;g=c[b+4>>2]|0}else g=f;c[b+4>>2]=g+1;n=c[b+12>>2]|0;c[n+(f*244|0)+0>>2]=c[d+0>>2];c[n+(f*244|0)+4>>2]=c[d+4>>2];c[n+(f*244|0)+8>>2]=c[d+8>>2];c[n+(f*244|0)+12>>2]=c[d+12>>2];c[n+(f*244|0)+16>>2]=c[d+16>>2];c[n+(f*244|0)+20>>2]=c[d+20>>2];c[n+(f*244|0)+24>>2]=c[d+24>>2];c[n+(f*244|0)+28>>2]=c[d+28>>2];c[n+(f*244|0)+32>>2]=c[d+32>>2];c[n+(f*244|0)+36>>2]=c[d+36>>2];c[n+(f*244|0)+40>>2]=c[d+40>>2];c[n+(f*244|0)+44>>2]=c[d+44>>2];c[n+(f*244|0)+48>>2]=c[d+48>>2];c[n+(f*244|0)+52>>2]=c[d+52>>2];c[n+(f*244|0)+56>>2]=c[d+56>>2];c[n+(f*244|0)+60>>2]=c[d+60>>2];mF(n+(f*244|0)+64|0,d+64|0,180)|0;i=e;return(c[b+12>>2]|0)+(f*244|0)|0}function Er(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0,J=0.0,K=0,L=0.0,M=0.0,N=0.0,O=0,R=0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0;r=i;i=i+80|0;if((e|0)<=0){i=r;return}k=0;do{l=c[d+(k<<2)>>2]|0;h=c[l+740>>2]|0;q=c[l+744>>2]|0;m=Cr(b,h,+g[f+12>>2])|0;n=Cr(b,q,+g[f+12>>2])|0;o=c[b+16>>2]|0;do if(o+(m*244|0)|0){if((+g[o+(m*244|0)+128>>2]==0.0?+g[o+(m*244|0)+132>>2]==0.0:0)?+g[o+(m*244|0)+136>>2]==0.0:0){if(!(o+(n*244|0)|0))break;if((+g[o+(n*244|0)+128>>2]==0.0?+g[o+(n*244|0)+132>>2]==0.0:0)?+g[o+(n*244|0)+136>>2]==0.0:0)break}t=c[l+748>>2]|0;if((t|0)>0){s=0;F=1;do{u=l+(s*184|0)+4|0;K=l+(s*184|0)+84|0;if(+g[K>>2]<=+g[l+756>>2]){t=c[b+28>>2]|0;if((t|0)==(c[b+32>>2]|0)?(p=(t|0)==0?1:t<<1,(t|0)<(p|0)):0){if(!p){v=0;y=t}else{c[5004]=(c[5004]|0)+1;v=fF((p*152|3)+16|0)|0;if(!v)v=0;else{c[(v+19&-16)+ -4>>2]=v;v=v+19&-16}y=c[b+28>>2]|0}if((y|0)>0){x=0;do{mF(v+(x*152|0)|0,(c[b+36>>2]|0)+(x*152|0)|0,152)|0;x=x+1|0}while((x|0)!=(y|0))}x=c[b+36>>2]|0;if(x){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=v;c[b+32>>2]=p;v=c[b+28>>2]|0}else v=t;c[b+28>>2]=v+1;v=c[b+36>>2]|0;H=(c[h+236>>2]&2|0)==0?0:h;G=(c[q+236>>2]&2|0)==0?0:q;c[v+(t*152|0)+144>>2]=m;c[v+(t*152|0)+148>>2]=n;c[v+(t*152|0)+132>>2]=u;S=+g[l+(s*184|0)+52>>2]- +g[h+52>>2];T=+g[l+(s*184|0)+56>>2]- +g[h+56>>2];U=+g[l+(s*184|0)+60>>2]- +g[h+60>>2];g[r+64>>2]=S;g[r+68>>2]=T;g[r+72>>2]=U;g[r+76>>2]=0.0;L=+g[l+(s*184|0)+36>>2]- +g[q+52>>2];M=+g[l+(s*184|0)+40>>2]- +g[q+56>>2];N=+g[l+(s*184|0)+44>>2]- +g[q+60>>2];g[r+48>>2]=L;g[r+52>>2]=M;g[r+56>>2]=N;g[r+60>>2]=0.0;if(!(c[o+(m*244|0)+240>>2]|0)){w=0.0;D=0.0;C=0.0}else{aa=+g[o+(m*244|0)+192>>2]+ +g[o+(m*244|0)+224>>2];C=+g[o+(m*244|0)+196>>2]+ +g[o+(m*244|0)+228>>2];D=+g[o+(m*244|0)+200>>2]+ +g[o+(m*244|0)+232>>2];w=+g[o+(m*244|0)+176>>2]+ +g[o+(m*244|0)+208>>2]+(C*U-D*T);D=+g[o+(m*244|0)+180>>2]+ +g[o+(m*244|0)+212>>2]+(D*S-aa*U);C=+g[o+(m*244|0)+184>>2]+ +g[o+(m*244|0)+216>>2]+(aa*T-C*S)}if(!(c[o+(n*244|0)+240>>2]|0)){E=0.0;A=0.0;B=0.0}else{aa=+g[o+(n*244|0)+192>>2]+ +g[o+(n*244|0)+224>>2];B=+g[o+(n*244|0)+196>>2]+ +g[o+(n*244|0)+228>>2];A=+g[o+(n*244|0)+200>>2]+ +g[o+(n*244|0)+232>>2];E=+g[o+(n*244|0)+176>>2]+ +g[o+(n*244|0)+208>>2]+(B*N-A*M);A=+g[o+(n*244|0)+180>>2]+ +g[o+(n*244|0)+212>>2]+(A*L-aa*N);B=+g[o+(n*244|0)+184>>2]+ +g[o+(n*244|0)+216>>2]+(aa*M-B*L)}w=w-E;A=D-A;D=C-B;y=l+(s*184|0)+68|0;C=+g[y>>2];z=l+(s*184|0)+72|0;B=+g[z>>2];x=l+(s*184|0)+76|0;E=+g[x>>2];I=c[b+16>>2]|0;R=c[I+(m*244|0)+240>>2]|0;O=c[I+(n*244|0)+240>>2]|0;if(R){_=((T*E-U*B)*+g[R+264>>2]+(U*C-E*S)*+g[R+268>>2]+(B*S-T*C)*+g[R+272>>2])*+g[R+544>>2];aa=((T*E-U*B)*+g[R+280>>2]+(U*C-E*S)*+g[R+284>>2]+(B*S-T*C)*+g[R+288>>2])*+g[R+548>>2];$=((T*E-U*B)*+g[R+296>>2]+(U*C-E*S)*+g[R+300>>2]+(B*S-T*C)*+g[R+304>>2])*+g[R+552>>2]}else{_=0.0;aa=0.0;$=0.0}g[v+(t*152|0)+64>>2]=_;g[v+(t*152|0)+68>>2]=aa;g[v+(t*152|0)+72>>2]=$;g[v+(t*152|0)+76>>2]=0.0;W=+g[x>>2];V=+g[z>>2];J=+g[y>>2];if(O){X=(+g[O+264>>2]*-(M*W-N*V)+ +g[O+268>>2]*-(N*J-W*L)+ +g[O+272>>2]*-(V*L-M*J))*+g[O+544>>2];Y=(+g[O+280>>2]*-(M*W-N*V)+ +g[O+284>>2]*-(N*J-W*L)+ +g[O+288>>2]*-(V*L-M*J))*+g[O+548>>2];Z=(+g[O+296>>2]*-(M*W-N*V)+ +g[O+300>>2]*-(N*J-W*L)+ +g[O+304>>2]*-(V*L-M*J))*+g[O+552>>2]}else{X=0.0;Y=0.0;Z=0.0}g[v+(t*152|0)+80>>2]=X;g[v+(t*152|0)+84>>2]=Y;g[v+(t*152|0)+88>>2]=Z;g[v+(t*152|0)+92>>2]=0.0;if(R)_=+g[R+344>>2]+((aa*U-$*T)*+g[y>>2]+($*S-U*_)*+g[z>>2]+(T*_-aa*S)*+g[x>>2]);else _=0.0;if(O){aa=-X;X=-Y;$=-Z;X=+g[O+344>>2]+((N*X-M*$)*+g[y>>2]+(L*$-N*aa)*+g[z>>2]+(M*aa-L*X)*+g[x>>2])}else X=0.0;g[v+(t*152|0)+108>>2]=1.0/(_+X);if(R){c[v+(t*152|0)+16>>2]=c[y+0>>2];c[v+(t*152|0)+20>>2]=c[y+4>>2];c[v+(t*152|0)+24>>2]=c[y+8>>2];c[v+(t*152|0)+28>>2]=c[y+12>>2];g[v+(t*152|0)>>2]=T*E-U*B;g[v+(t*152|0)+4>>2]=U*C-E*S;g[v+(t*152|0)+8>>2]=B*S-T*C;g[v+(t*152|0)+12>>2]=0.0}else{c[v+(t*152|0)+0>>2]=0;c[v+(t*152|0)+4>>2]=0;c[v+(t*152|0)+8>>2]=0;c[v+(t*152|0)+12>>2]=0;c[v+(t*152|0)+16>>2]=0;c[v+(t*152|0)+20>>2]=0;c[v+(t*152|0)+24>>2]=0;c[v+(t*152|0)+28>>2]=0}if(O){$=-+g[z>>2];aa=-+g[x>>2];g[v+(t*152|0)+48>>2]=-+g[y>>2];g[v+(t*152|0)+52>>2]=$;g[v+(t*152|0)+56>>2]=aa;g[v+(t*152|0)+60>>2]=0.0;g[v+(t*152|0)+32>>2]=-(M*W-N*V);g[v+(t*152|0)+36>>2]=-(N*J-W*L);g[v+(t*152|0)+40>>2]=-(V*L-M*J);g[v+(t*152|0)+44>>2]=0.0}else{c[v+(t*152|0)+32>>2]=0;c[v+(t*152|0)+36>>2]=0;c[v+(t*152|0)+40>>2]=0;c[v+(t*152|0)+44>>2]=0;c[v+(t*152|0)+48>>2]=0;c[v+(t*152|0)+52>>2]=0;c[v+(t*152|0)+56>>2]=0;c[v+(t*152|0)+60>>2]=0}J=+g[K>>2]+ +g[f+56>>2];if(R){aa=+g[R+332>>2];_=+g[R+336>>2];$=+g[R+328>>2];V=aa*U-_*T+ +g[R+312>>2];U=+g[R+316>>2]+(_*S-U*$);T=T*$-aa*S+ +g[R+320>>2]}else{V=0.0;U=0.0;T=0.0}if(O){aa=+g[O+332>>2];_=+g[O+336>>2];$=+g[O+328>>2];S=aa*N-_*M+ +g[O+312>>2];N=+g[O+316>>2]+(_*L-N*$);L=M*$-aa*L+ +g[O+320>>2]}else{S=0.0;N=0.0;L=0.0}L=+g[y>>2]*(V-S)+(U-N)*+g[z>>2]+(T-L)*+g[x>>2];g[v+(t*152|0)+104>>2]=+g[l+(s*184|0)+88>>2];L=L*+g[l+(s*184|0)+96>>2];L=!(L>=-0.0)?-L:0.0;do if(!(c[f+64>>2]&4))g[v+(t*152|0)+100>>2]=0.0;else{M=+g[l+(s*184|0)+124>>2]*+g[f+60>>2];g[v+(t*152|0)+100>>2]=M;do if(R){if(!(c[I+(m*244|0)+240>>2]|0))break;aa=M*+g[I+(m*244|0)+132>>2]*+g[v+(t*152|0)+20>>2]*+g[R+352>>2]*+g[I+(m*244|0)+116>>2];$=M*+g[I+(m*244|0)+136>>2]*+g[v+(t*152|0)+24>>2]*+g[R+356>>2]*+g[I+(m*244|0)+120>>2];g[I+(m*244|0)+64>>2]=+g[I+(m*244|0)+112>>2]*M*+g[I+(m*244|0)+128>>2]*+g[v+(t*152|0)+16>>2]*+g[R+348>>2]+ +g[I+(m*244|0)+64>>2];g[I+(m*244|0)+68>>2]=aa+ +g[I+(m*244|0)+68>>2];g[I+(m*244|0)+72>>2]=$+ +g[I+(m*244|0)+72>>2];$=M*+g[I+(m*244|0)+100>>2]*+g[v+(t*152|0)+68>>2];aa=M*+g[I+(m*244|0)+104>>2]*+g[v+(t*152|0)+72>>2];g[I+(m*244|0)+80>>2]=M*+g[I+(m*244|0)+96>>2]*+g[v+(t*152|0)+64>>2]+ +g[I+(m*244|0)+80>>2];g[I+(m*244|0)+84>>2]=$+ +g[I+(m*244|0)+84>>2];g[I+(m*244|0)+88>>2]=aa+ +g[I+(m*244|0)+88>>2]}while(0);if(!O)break;M=+g[v+(t*152|0)+100>>2];if(!(c[I+(n*244|0)+240>>2]|0))break;aa=+g[v+(t*152|0)+88>>2];$=+g[v+(t*152|0)+84>>2];_=+g[v+(t*152|0)+80>>2];Y=M*+g[I+(n*244|0)+132>>2]*+g[v+(t*152|0)+52>>2]*+g[O+352>>2]*+g[I+(n*244|0)+116>>2];Z=M*+g[I+(n*244|0)+136>>2]*+g[v+(t*152|0)+56>>2]*+g[O+356>>2]*+g[I+(n*244|0)+120>>2];g[I+(n*244|0)+64>>2]=+g[I+(n*244|0)+112>>2]*M*+g[I+(n*244|0)+128>>2]*+g[v+(t*152|0)+48>>2]*+g[O+348>>2]+ +g[I+(n*244|0)+64>>2];g[I+(n*244|0)+68>>2]=Y+ +g[I+(n*244|0)+68>>2];g[I+(n*244|0)+72>>2]=Z+ +g[I+(n*244|0)+72>>2];$=$*+g[I+(n*244|0)+100>>2]*-M;aa=aa*+g[I+(n*244|0)+104>>2]*-M;g[I+(n*244|0)+80>>2]=+g[I+(n*244|0)+80>>2]-_*+g[I+(n*244|0)+96>>2]*-M;g[I+(n*244|0)+84>>2]=+g[I+(n*244|0)+84>>2]-$;g[I+(n*244|0)+88>>2]=+g[I+(n*244|0)+88>>2]-aa}while(0);g[v+(t*152|0)+96>>2]=0.0;if(!(c[I+(m*244|0)+240>>2]|0)){$=0.0;_=0.0;Z=0.0;M=0.0;X=0.0;W=0.0}else{$=+g[I+(m*244|0)+208>>2];_=+g[I+(m*244|0)+212>>2];Z=+g[I+(m*244|0)+216>>2];M=+g[I+(m*244|0)+224>>2];X=+g[I+(m*244|0)+228>>2];W=+g[I+(m*244|0)+232>>2]}if(!(c[I+(n*244|0)+240>>2]|0)){S=0.0;Y=0.0;N=0.0;T=0.0;U=0.0;V=0.0}else{S=+g[I+(n*244|0)+208>>2];Y=+g[I+(n*244|0)+212>>2];N=+g[I+(n*244|0)+216>>2];T=+g[I+(n*244|0)+224>>2];U=+g[I+(n*244|0)+228>>2];V=+g[I+(n*244|0)+232>>2]}L=L-(($+ +g[I+(m*244|0)+176>>2])*+g[v+(t*152|0)+16>>2]+(_+ +g[I+(m*244|0)+180>>2])*+g[v+(t*152|0)+20>>2]+(Z+ +g[I+(m*244|0)+184>>2])*+g[v+(t*152|0)+24>>2]+((M+ +g[I+(m*244|0)+192>>2])*+g[v+(t*152|0)>>2]+(X+ +g[I+(m*244|0)+196>>2])*+g[v+(t*152|0)+4>>2]+(W+ +g[I+(m*244|0)+200>>2])*+g[v+(t*152|0)+8>>2])+((S+ +g[I+(n*244|0)+176>>2])*+g[v+(t*152|0)+48>>2]+(Y+ +g[I+(n*244|0)+180>>2])*+g[v+(t*152|0)+52>>2]+(N+ +g[I+(n*244|0)+184>>2])*+g[v+(t*152|0)+56>>2]+((T+ +g[I+(n*244|0)+192>>2])*+g[v+(t*152|0)+32>>2]+(U+ +g[I+(n*244|0)+196>>2])*+g[v+(t*152|0)+36>>2]+(V+ +g[I+(n*244|0)+200>>2])*+g[v+(t*152|0)+40>>2])));I=(c[f+44>>2]|0)==0;if(!I?!(J>+g[f+48>>2]):0)K=f+36|0;else K=f+32|0;if(J>0.0){M=0.0;L=L-J/+g[f+12>>2]}else M=-(J*+g[K>>2])/+g[f+12>>2];aa=+g[v+(t*152|0)+108>>2];M=M*aa;L=L*aa;do if(I)j=69;else{if(J>+g[f+48>>2]){j=69;break}g[v+(t*152|0)+112>>2]=L;g[v+(t*152|0)+128>>2]=M}while(0);if((j|0)==69){j=0;g[v+(t*152|0)+112>>2]=M+L;g[v+(t*152|0)+128>>2]=0.0}g[v+(t*152|0)+116>>2]=0.0;g[v+(t*152|0)+120>>2]=0.0;g[v+(t*152|0)+124>>2]=1.0e10;c[v+(t*152|0)+140>>2]=c[b+68>>2];if(!H){J=0.0;M=0.0;L=0.0}else{J=+g[H+328>>2];M=+g[H+332>>2];L=+g[H+336>>2]}if(!G){T=0.0;S=0.0;N=0.0}else{T=+g[G+328>>2];S=+g[G+332>>2];N=+g[G+336>>2]}J=T-J;M=S-M;L=N-L;g[r+32>>2]=J;g[r+36>>2]=M;g[r+40>>2]=L;g[r+44>>2]=0.0;do if((F|0)>0?+g[l+(s*184|0)+92>>2]>0.0:0){F=F+ -1|0;S=+Q(+(J*J+M*M+L*L));if(S>+g[f+80>>2]){N=J*(1.0/S);g[r+32>>2]=N;J=M*(1.0/S);g[r+36>>2]=J;L=L*(1.0/S);g[r+40>>2]=L;do if(h){if(!(c[h+180>>2]&2))break;S=+g[h+4>>2];V=+g[h+20>>2];Y=+g[h+36>>2];T=+g[h+8>>2];W=+g[h+24>>2];_=+g[h+40>>2];U=+g[h+12>>2];X=+g[h+28>>2];aa=+g[h+44>>2];Z=(S*N+V*J+L*Y)*+g[h+164>>2];$=(N*T+J*W+L*_)*+g[h+168>>2];L=(N*U+J*X+L*aa)*+g[h+172>>2];g[r+32>>2]=S*Z+T*$+U*L;g[r+36>>2]=V*Z+W*$+X*L;g[r+40>>2]=Y*Z+_*$+aa*L;g[r+44>>2]=0.0;N=S*Z+T*$+U*L;J=V*Z+W*$+X*L;L=Y*Z+_*$+aa*L}while(0);do if(q){if(!(c[q+180>>2]&2))break;S=+g[q+4>>2];V=+g[q+20>>2];Y=+g[q+36>>2];T=+g[q+8>>2];W=+g[q+24>>2];_=+g[q+40>>2];U=+g[q+12>>2];X=+g[q+28>>2];aa=+g[q+44>>2];Z=(S*N+V*J+Y*L)*+g[q+164>>2];$=(N*T+J*W+L*_)*+g[q+168>>2];L=(N*U+J*X+L*aa)*+g[q+172>>2];g[r+32>>2]=S*Z+T*$+U*L;g[r+36>>2]=V*Z+W*$+X*L;g[r+40>>2]=Y*Z+_*$+aa*L;g[r+44>>2]=0.0;N=S*Z+T*$+U*L;J=V*Z+W*$+X*L;L=Y*Z+_*$+aa*L}while(0);if(!(+Q(+(N*N+J*J+L*L))>.001))break;Br(b,r+32|0,m,n,t,u);break}Br(b,y,m,n,t,u);L=+g[x>>2];if(+P(+L)>.7071067690849304){M=+g[z>>2];aa=1.0/+Q(+(L*L+M*M));g[r+16>>2]=0.0;g[r+20>>2]=-(aa*L);g[r+24>>2]=aa*M;g[r>>2]=(L*L+M*M)*aa;$=+g[y>>2];g[r+4>>2]=-($*aa*M);J=0.0;S=-(aa*L);T=aa*M;N=(L*L+M*M)*aa;M=-($*aa*M);L=$*-(aa*L)}else{_=+g[y>>2];$=+g[z>>2];aa=1.0/+Q(+(_*_+$*$));g[r+16>>2]=-($*aa);g[r+20>>2]=aa*_;g[r+24>>2]=0.0;g[r>>2]=-(L*aa*_);g[r+4>>2]=L*-($*aa);J=-($*aa);S=aa*_;T=0.0;N=-(L*aa*_);M=L*-($*aa);L=(_*_+$*$)*aa}g[r+8>>2]=L;do if(h){if(!(c[h+180>>2]&2))break;ca=+g[h+4>>2];V=+g[h+20>>2];Y=+g[h+36>>2];ba=+g[h+8>>2];W=+g[h+24>>2];_=+g[h+40>>2];U=+g[h+12>>2];X=+g[h+28>>2];aa=+g[h+44>>2];Z=(ca*J+V*S+Y*T)*+g[h+164>>2];$=(J*ba+S*W+T*_)*+g[h+168>>2];T=(J*U+S*X+T*aa)*+g[h+172>>2];g[r+16>>2]=ca*Z+ba*$+U*T;g[r+20>>2]=V*Z+W*$+X*T;g[r+24>>2]=Y*Z+_*$+aa*T;g[r+28>>2]=0.0;J=ca*Z+ba*$+U*T;S=V*Z+W*$+X*T;T=Y*Z+_*$+aa*T}while(0);do if(q){if(!(c[q+180>>2]&2))break;U=+g[q+4>>2];X=+g[q+20>>2];_=+g[q+36>>2];V=+g[q+8>>2];Y=+g[q+24>>2];aa=+g[q+40>>2];W=+g[q+12>>2];Z=+g[q+28>>2];ca=+g[q+44>>2];$=(U*J+X*S+_*T)*+g[q+164>>2];ba=(J*V+S*Y+T*aa)*+g[q+168>>2];T=(J*W+S*Z+T*ca)*+g[q+172>>2];g[r+16>>2]=U*$+V*ba+W*T;g[r+20>>2]=X*$+Y*ba+Z*T;g[r+24>>2]=_*$+aa*ba+ca*T;g[r+28>>2]=0.0;J=U*$+V*ba+W*T;S=X*$+Y*ba+Z*T;T=_*$+aa*ba+ca*T}while(0);do if(h){if(!(c[h+180>>2]&2))break;U=+g[h+4>>2];X=+g[h+20>>2];_=+g[h+36>>2];V=+g[h+8>>2];Y=+g[h+24>>2];aa=+g[h+40>>2];W=+g[h+12>>2];Z=+g[h+28>>2];ca=+g[h+44>>2];$=(U*N+X*M+_*L)*+g[h+164>>2];ba=(N*V+M*Y+L*aa)*+g[h+168>>2];L=(N*W+M*Z+L*ca)*+g[h+172>>2];g[r>>2]=U*$+V*ba+W*L;g[r+4>>2]=X*$+Y*ba+Z*L;g[r+8>>2]=_*$+aa*ba+ca*L;g[r+12>>2]=0.0;N=U*$+V*ba+W*L;M=X*$+Y*ba+Z*L;L=_*$+aa*ba+ca*L}while(0);do if(q){if(!(c[q+180>>2]&2))break;U=+g[q+4>>2];X=+g[q+20>>2];_=+g[q+36>>2];V=+g[q+8>>2];Y=+g[q+24>>2];aa=+g[q+40>>2];W=+g[q+12>>2];Z=+g[q+28>>2];ca=+g[q+44>>2];$=(U*N+X*M+_*L)*+g[q+164>>2];ba=(N*V+M*Y+L*aa)*+g[q+168>>2];L=(N*W+M*Z+L*ca)*+g[q+172>>2];g[r>>2]=U*$+V*ba+W*L;g[r+4>>2]=X*$+Y*ba+Z*L;g[r+8>>2]=_*$+aa*ba+ca*L;g[r+12>>2]=0.0;N=U*$+V*ba+W*L;M=X*$+Y*ba+Z*L;L=_*$+aa*ba+ca*L}while(0);if(+Q(+(J*J+S*S+T*T))>.001)Br(b,r+16|0,m,n,t,u);if(!(+Q(+(N*N+M*M+L*L))>.001))break;Br(b,r,m,n,t,u)}while(0);do if(!(c[f+64>>2]&32))j=106;else{if(!(a[l+(s*184|0)+120>>0]|0)){j=106;break}Ar(b,l+(s*184|0)+156|0,m,n,t,u,r+64|0,r+48|0,1.0,+g[l+(s*184|0)+136>>2],+g[l+(s*184|0)+144>>2]);if(!(c[f+64>>2]&16))break;Ar(b,l+(s*184|0)+172|0,m,n,t,u,r+64|0,r+48|0,1.0,+g[l+(s*184|0)+140>>2],+g[l+(s*184|0)+148>>2])}while(0);do if((j|0)==106){j=0;G=l+(s*184|0)+156|0;J=+g[y>>2];L=+g[z>>2];M=+g[x>>2];S=w-(C*w+A*B+D*E)*J;N=A-(C*w+A*B+D*E)*L;w=D-(C*w+A*B+D*E)*M;g[l+(s*184|0)+156>>2]=S;I=l+(s*184|0)+160|0;g[I>>2]=N;H=l+(s*184|0)+164|0;g[H>>2]=w;g[l+(s*184|0)+168>>2]=0.0;if((c[f+64>>2]&64|0)==0?S*S+N*N+w*w>1.1920928955078125e-7:0){ca=1.0/+Q(+(S*S+N*N+w*w));g[G>>2]=S*ca;g[I>>2]=ca*N;g[H>>2]=ca*w;zr(h,G);zr(q,G);Ar(b,G,m,n,t,u,r+64|0,r+48|0,1.0,0.0,0.0);if(!(c[f+64>>2]&16))break;R=l+(s*184|0)+172|0;aa=+g[I>>2];Z=+g[x>>2];Y=+g[H>>2];_=+g[z>>2];ba=+g[y>>2];$=+g[G>>2];g[l+(s*184|0)+172>>2]=aa*Z-Y*_;g[l+(s*184|0)+184>>2]=0.0;ca=1.0/+Q(+((aa*Z-Y*_)*(aa*Z-Y*_)+(Y*ba-Z*$)*(Y*ba-Z*$)+(_*$-aa*ba)*(_*$-aa*ba)));g[R>>2]=(aa*Z-Y*_)*ca;g[l+(s*184|0)+176>>2]=(Y*ba-Z*$)*ca;g[l+(s*184|0)+180>>2]=(_*$-aa*ba)*ca;zr(h,R);zr(q,R);Ar(b,R,m,n,t,u,r+64|0,r+48|0,1.0,0.0,0.0);break}x=l+(s*184|0)+172|0;if(+P(+M)>.7071067690849304){ca=1.0/+Q(+(M*M+L*L));g[G>>2]=0.0;g[I>>2]=-(ca*M);g[H>>2]=ca*L;g[x>>2]=(M*M+L*L)*ca;g[l+(s*184|0)+176>>2]=-(J*ca*L);g[l+(s*184|0)+180>>2]=J*-(ca*M)}else{ca=1.0/+Q(+(J*J+L*L));g[G>>2]=-(L*ca);g[I>>2]=ca*J;g[H>>2]=0.0;g[x>>2]=-(M*ca*J);g[l+(s*184|0)+176>>2]=M*-(L*ca);g[l+(s*184|0)+180>>2]=(J*J+L*L)*ca}zr(h,G);zr(q,G);Ar(b,G,m,n,t,u,r+64|0,r+48|0,1.0,0.0,0.0);y=c[f+64>>2]|0;if(y&16){zr(h,x);zr(q,x);Ar(b,x,m,n,t,u,r+64|0,r+48|0,1.0,0.0,0.0);y=c[f+64>>2]|0}if((y&80|0)!=80)break;a[l+(s*184|0)+120>>0]=1}while(0);u=c[b+16>>2]|0;y=c[u+(m*244|0)+240>>2]|0;x=c[u+(n*244|0)+240>>2]|0;v=c[v+(t*152|0)+140>>2]|0;t=c[b+76>>2]|0;z=c[f+64>>2]|0;do if(!(z&4))g[t+(v*152|0)+100>>2]=0.0;else{w=+g[l+(s*184|0)+128>>2]*+g[f+60>>2];g[t+(v*152|0)+100>>2]=w;if(y){aa=+g[y+344>>2];ca=w*aa*+g[t+(v*152|0)+20>>2]*+g[y+352>>2]*+g[u+(m*244|0)+116>>2];ba=w*aa*+g[t+(v*152|0)+24>>2]*+g[y+356>>2]*+g[u+(m*244|0)+120>>2];g[u+(m*244|0)+64>>2]=+g[u+(m*244|0)+112>>2]*w*aa*+g[t+(v*152|0)+16>>2]*+g[y+348>>2]+ +g[u+(m*244|0)+64>>2];g[u+(m*244|0)+68>>2]=ca+ +g[u+(m*244|0)+68>>2];g[u+(m*244|0)+72>>2]=ba+ +g[u+(m*244|0)+72>>2];ba=w*+g[u+(m*244|0)+100>>2]*+g[t+(v*152|0)+68>>2];ca=w*+g[u+(m*244|0)+104>>2]*+g[t+(v*152|0)+72>>2];g[u+(m*244|0)+80>>2]=w*+g[u+(m*244|0)+96>>2]*+g[t+(v*152|0)+64>>2]+ +g[u+(m*244|0)+80>>2];g[u+(m*244|0)+84>>2]=ba+ +g[u+(m*244|0)+84>>2];g[u+(m*244|0)+88>>2]=ca+ +g[u+(m*244|0)+88>>2]}if(!x)break;A=+g[x+344>>2];w=+g[t+(v*152|0)+100>>2];if(!(c[u+(n*244|0)+240>>2]|0))break;ca=+g[t+(v*152|0)+88>>2];ba=+g[t+(v*152|0)+84>>2];aa=+g[t+(v*152|0)+80>>2];_=w*A*+g[t+(v*152|0)+52>>2]*+g[x+352>>2]*+g[u+(n*244|0)+116>>2];$=w*A*+g[t+(v*152|0)+56>>2]*+g[x+356>>2]*+g[u+(n*244|0)+120>>2];g[u+(n*244|0)+64>>2]=+g[u+(n*244|0)+112>>2]*w*A*+g[t+(v*152|0)+48>>2]*+g[x+348>>2]+ +g[u+(n*244|0)+64>>2];g[u+(n*244|0)+68>>2]=_+ +g[u+(n*244|0)+68>>2];g[u+(n*244|0)+72>>2]=$+ +g[u+(n*244|0)+72>>2];ba=ba*+g[u+(n*244|0)+100>>2]*-w;ca=ca*+g[u+(n*244|0)+104>>2]*-w;g[u+(n*244|0)+80>>2]=+g[u+(n*244|0)+80>>2]-aa*+g[u+(n*244|0)+96>>2]*-w;g[u+(n*244|0)+84>>2]=+g[u+(n*244|0)+84>>2]-ba;g[u+(n*244|0)+88>>2]=+g[u+(n*244|0)+88>>2]-ca}while(0);do if(z&16){if(!(z&4)){g[t+((v+1|0)*152|0)+100>>2]=0.0;break}w=+g[l+(s*184|0)+132>>2]*+g[f+60>>2];g[t+((v+1|0)*152|0)+100>>2]=w;do if(y){A=+g[y+344>>2];if(!(c[u+(m*244|0)+240>>2]|0))break;ca=w*A*+g[t+((v+1|0)*152|0)+20>>2]*+g[u+(m*244|0)+116>>2];ba=w*A*+g[t+((v+1|0)*152|0)+24>>2]*+g[u+(m*244|0)+120>>2];g[u+(m*244|0)+64>>2]=+g[u+(m*244|0)+112>>2]*w*A*+g[t+((v+1|0)*152|0)+16>>2]+ +g[u+(m*244|0)+64>>2];g[u+(m*244|0)+68>>2]=ca+ +g[u+(m*244|0)+68>>2];g[u+(m*244|0)+72>>2]=ba+ +g[u+(m*244|0)+72>>2];ba=w*+g[u+(m*244|0)+100>>2]*+g[t+((v+1|0)*152|0)+68>>2];ca=w*+g[u+(m*244|0)+104>>2]*+g[t+((v+1|0)*152|0)+72>>2];g[u+(m*244|0)+80>>2]=w*+g[u+(m*244|0)+96>>2]*+g[t+((v+1|0)*152|0)+64>>2]+ +g[u+(m*244|0)+80>>2];g[u+(m*244|0)+84>>2]=ba+ +g[u+(m*244|0)+84>>2];g[u+(m*244|0)+88>>2]=ca+ +g[u+(m*244|0)+88>>2]}while(0);if(!x)break;A=+g[x+344>>2];w=+g[t+((v+1|0)*152|0)+100>>2];if(!(c[u+(n*244|0)+240>>2]|0))break;ca=+g[t+((v+1|0)*152|0)+88>>2];ba=+g[t+((v+1|0)*152|0)+84>>2];aa=+g[t+((v+1|0)*152|0)+80>>2];_=w*A*+g[t+((v+1|0)*152|0)+52>>2]*+g[u+(n*244|0)+116>>2];$=w*A*+g[t+((v+1|0)*152|0)+56>>2]*+g[u+(n*244|0)+120>>2];g[u+(n*244|0)+64>>2]=+g[u+(n*244|0)+112>>2]*w*A*+g[t+((v+1|0)*152|0)+48>>2]+ +g[u+(n*244|0)+64>>2];g[u+(n*244|0)+68>>2]=_+ +g[u+(n*244|0)+68>>2];g[u+(n*244|0)+72>>2]=$+ +g[u+(n*244|0)+72>>2];ba=ba*+g[u+(n*244|0)+100>>2]*-w;ca=ca*+g[u+(n*244|0)+104>>2]*-w;g[u+(n*244|0)+80>>2]=+g[u+(n*244|0)+80>>2]-aa*+g[u+(n*244|0)+96>>2]*-w;g[u+(n*244|0)+84>>2]=+g[u+(n*244|0)+84>>2]-ba;g[u+(n*244|0)+88>>2]=+g[u+(n*244|0)+88>>2]-ca}while(0);t=c[l+748>>2]|0}s=s+1|0}while((s|0)<(t|0))}}while(0);k=k+1|0}while((k|0)!=(e|0));i=r;return}
  
  
  
  function Fr(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0;m=i;i=i+320|0;c[b+188>>2]=-1;yE(4080);c[b+184>>2]=0;if((e|0)>0){p=0;do{c[(c[d+(p<<2)>>2]|0)+212>>2]=-1;p=p+1|0}while((p|0)!=(e|0))}p=c[b+12>>2]|0;if((p|0)<(e+1|0)){if((e+1|0)!=0?(c[5004]=(c[5004]|0)+1,o=fF(((e+1|0)*244|3)+16|0)|0,(o|0)!=0):0){c[(o+19&-16)+ -4>>2]=o;o=o+19&-16}else o=0;p=c[b+8>>2]|0;if((p|0)>0){q=0;do{x=o+(q*244|0)|0;Y=c[b+16>>2]|0;w=Y+(q*244|0)|0;c[x+0>>2]=c[w+0>>2];c[x+4>>2]=c[w+4>>2];c[x+8>>2]=c[w+8>>2];c[x+12>>2]=c[w+12>>2];x=o+(q*244|0)+16|0;w=Y+(q*244|0)+16|0;c[x+0>>2]=c[w+0>>2];c[x+4>>2]=c[w+4>>2];c[x+8>>2]=c[w+8>>2];c[x+12>>2]=c[w+12>>2];x=o+(q*244|0)+32|0;w=Y+(q*244|0)+32|0;c[x+0>>2]=c[w+0>>2];c[x+4>>2]=c[w+4>>2];c[x+8>>2]=c[w+8>>2];c[x+12>>2]=c[w+12>>2];x=o+(q*244|0)+48|0;w=Y+(q*244|0)+48|0;c[x+0>>2]=c[w+0>>2];c[x+4>>2]=c[w+4>>2];c[x+8>>2]=c[w+8>>2];c[x+12>>2]=c[w+12>>2];mF(o+(q*244|0)+64|0,Y+(q*244|0)+64|0,180)|0;q=q+1|0}while((q|0)!=(p|0))}p=c[b+16>>2]|0;if(p){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[p+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=o;c[b+12>>2]=e+1;o=b+8|0;q=e+1|0}else{o=b+8|0;q=p}jF(m+56|0,0,244)|0;p=c[o>>2]|0;if((p|0)<0){if((q|0)<0){q=c[b+16>>2]|0;if(q){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[q+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+12>>2]=0}do{Y=c[b+16>>2]|0;x=Y+(p*244|0)|0;c[x+0>>2]=c[m+56>>2];c[x+4>>2]=c[m+60>>2];c[x+8>>2]=c[m+64>>2];c[x+12>>2]=c[m+68>>2];x=Y+(p*244|0)+16|0;c[x+0>>2]=c[m+72>>2];c[x+4>>2]=c[m+76>>2];c[x+8>>2]=c[m+80>>2];c[x+12>>2]=c[m+84>>2];x=Y+(p*244|0)+32|0;c[x+0>>2]=c[m+88>>2];c[x+4>>2]=c[m+92>>2];c[x+8>>2]=c[m+96>>2];c[x+12>>2]=c[m+100>>2];x=Y+(p*244|0)+48|0;c[x+0>>2]=c[m+104>>2];c[x+4>>2]=c[m+108>>2];c[x+8>>2]=c[m+112>>2];c[x+12>>2]=c[m+116>>2];mF(Y+(p*244|0)+64|0,m+120|0,180)|0;p=p+1|0}while((p|0)!=0)}c[o>>2]=0;if((e|0)>0){o=0;do{p=d+(o<<2)|0;q=Cr(b,c[p>>2]|0,+g[l+12>>2])|0;p=c[p>>2]|0;if((!((p|0)==0?1:(c[p+236>>2]&2|0)==0)?+g[p+344>>2]!=0.0:0)?(n=c[b+16>>2]|0,(c[p+504>>2]&2|0)!=0):0){E=+g[l+76>>2];S=1.0/+g[p+396>>2];V=1.0/+g[p+400>>2];F=1.0/+g[p+404>>2];M=+g[p+4>>2];N=+g[p+8>>2];O=+g[p+12>>2];R=+g[p+20>>2];U=+g[p+24>>2];X=+g[p+28>>2];T=+g[p+36>>2];W=+g[p+40>>2];C=+g[p+44>>2];B=+g[p+328>>2];z=+g[p+332>>2];D=+g[p+336>>2];y=(M*S*M+N*V*N+O*F*O)*B+(S*M*R+V*N*U+F*O*X)*z+(S*M*T+V*N*W+F*O*C)*D;A=(M*S*R+N*V*U+O*F*X)*B+(R*S*R+U*V*U+X*F*X)*z+(S*R*T+V*U*W+F*X*C)*D;C=D*(T*S*T+W*V*W+C*F*C)+(B*(M*S*T+N*V*W+O*F*C)+z*(R*S*T+U*V*W+X*F*C));F=(z*C-D*A)*(z*C-D*A)+(D*y-B*C)*(D*y-B*C)+(B*A-z*y)*(B*A-z*y);if(F>E*E){X=1.0/+Q(+F)*E;E=(z*C-D*A)*X;C=X*(D*y-B*C);y=X*(B*A-z*y)}else{E=z*C-D*A;C=D*y-B*C;y=B*A-z*y}V=+g[l+12>>2];W=(E*+g[p+268>>2]+C*+g[p+284>>2]+y*+g[p+300>>2])*V;X=V*(E*+g[p+272>>2]+C*+g[p+288>>2]+y*+g[p+304>>2]);g[n+(q*244|0)+224>>2]=+g[n+(q*244|0)+224>>2]-(E*+g[p+264>>2]+C*+g[p+280>>2]+y*+g[p+296>>2])*V;g[n+(q*244|0)+228>>2]=+g[n+(q*244|0)+228>>2]-W;g[n+(q*244|0)+232>>2]=+g[n+(q*244|0)+232>>2]-X}o=o+1|0}while((o|0)<(e|0))}if((k|0)>0){e=0;do{Y=c[j+(e<<2)>>2]|0;Lb[c[(c[Y>>2]|0)+8>>2]&511](Y);g[Y+36>>2]=0.0;e=e+1|0}while((e|0)<(k|0))}o=c[b+168>>2]|0;if((o|0)<(k|0)?(c[b+172>>2]|0)<(k|0):0){if(!k)e=0;else{c[5004]=(c[5004]|0)+1;e=fF((k<<3|3)+16|0)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}o=c[b+168>>2]|0}if((o|0)>0){n=0;do{d=e+(n<<3)|0;if(d){x=(c[b+176>>2]|0)+(n<<3)|0;Y=c[x+4>>2]|0;c[d>>2]=c[x>>2];c[d+4>>2]=Y}n=n+1|0}while((n|0)!=(o|0))}n=c[b+176>>2]|0;if(n){if(a[b+180>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[n+ -4>>2]|0)}c[b+176>>2]=0}a[b+180>>0]=1;c[b+176>>2]=e;c[b+172>>2]=k}c[b+168>>2]=k;if((k|0)>0){e=0;n=0;do{d=c[b+176>>2]|0;o=d+(e<<3)|0;p=j+(e<<2)|0;q=c[p>>2]|0;r=c[q+44>>2]|0;if(r){q=r+0|0;r=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));q=c[p>>2]|0}if(!(a[q+20>>0]|0)){c[o>>2]=0;c[d+(e<<3)+4>>2]=0;d=0}else{Nb[c[(c[q>>2]|0)+16>>2]&127](q,o);d=c[o>>2]|0}n=d+n|0;e=e+1|0}while((e|0)<(k|0))}else n=0;o=c[b+48>>2]|0;if((o|0)<(n|0)?(c[b+52>>2]|0)<(n|0):0){if(!n)e=0;else{c[5004]=(c[5004]|0)+1;e=fF((n*152|3)+16|0)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}o=c[b+48>>2]|0}if((o|0)>0){d=0;do{mF(e+(d*152|0)|0,(c[b+56>>2]|0)+(d*152|0)|0,152)|0;d=d+1|0}while((d|0)!=(o|0))}d=c[b+56>>2]|0;if(d){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=e;c[b+52>>2]=n}c[b+48>>2]=n;if((k|0)>0){o=c[b+176>>2]|0;e=0;n=0;while(1){d=o+(n<<3)|0;if(!(c[d>>2]|0))d=0;else{v=c[b+56>>2]|0;u=j+(n<<2)|0;t=c[u>>2]|0;o=c[t+28>>2]|0;p=c[t+32>>2]|0;s=Cr(b,o,+g[l+12>>2])|0;r=Cr(b,p,+g[l+12>>2])|0;q=c[b+16>>2]|0;x=c[t+24>>2]|0;if((x|0)<=0)x=c[l+20>>2]|0;if((x|0)>(c[b+184>>2]|0))c[b+184>>2]=x;if((c[d>>2]|0)>0){w=0;do{Y=w+e|0;jF(v+(Y*152|0)|0,0,152)|0;g[v+(Y*152|0)+120>>2]=-3.4028234663852886e+38;g[v+(Y*152|0)+124>>2]=3.4028234663852886e+38;g[v+(Y*152|0)+100>>2]=0.0;g[v+(Y*152|0)+96>>2]=0.0;c[v+(Y*152|0)+144>>2]=s;c[v+(Y*152|0)+148>>2]=r;c[v+(Y*152|0)+136>>2]=x;w=w+1|0}while((w|0)<(c[d>>2]|0))}c[q+(s*244|0)+64>>2]=0;c[q+(s*244|0)+68>>2]=0;c[q+(s*244|0)+72>>2]=0;c[q+(s*244|0)+76>>2]=0;c[q+(s*244|0)+80>>2]=0;c[q+(s*244|0)+84>>2]=0;c[q+(s*244|0)+88>>2]=0;c[q+(s*244|0)+92>>2]=0;c[q+(s*244|0)+144>>2]=0;c[q+(s*244|0)+148>>2]=0;c[q+(s*244|0)+152>>2]=0;c[q+(s*244|0)+156>>2]=0;c[q+(s*244|0)+160>>2]=0;c[q+(s*244|0)+164>>2]=0;c[q+(s*244|0)+168>>2]=0;c[q+(s*244|0)+172>>2]=0;c[q+(r*244|0)+64>>2]=0;c[q+(r*244|0)+68>>2]=0;c[q+(r*244|0)+72>>2]=0;c[q+(r*244|0)+76>>2]=0;c[q+(r*244|0)+80>>2]=0;c[q+(r*244|0)+84>>2]=0;c[q+(r*244|0)+88>>2]=0;c[q+(r*244|0)+92>>2]=0;c[q+(r*244|0)+144>>2]=0;c[q+(r*244|0)+148>>2]=0;c[q+(r*244|0)+152>>2]=0;c[q+(r*244|0)+156>>2]=0;c[q+(r*244|0)+160>>2]=0;c[q+(r*244|0)+164>>2]=0;c[q+(r*244|0)+168>>2]=0;c[q+(r*244|0)+172>>2]=0;g[m>>2]=1.0/+g[l+12>>2];g[m+4>>2]=+g[l+32>>2];c[m+8>>2]=v+(e*152|0)+16;c[m+12>>2]=v+(e*152|0);c[m+16>>2]=v+(e*152|0)+48;c[m+20>>2]=v+(e*152|0)+32;c[m+24>>2]=38;c[m+28>>2]=v+(e*152|0)+112;Y=v+(e*152|0)+116|0;g[Y>>2]=+g[l+40>>2];g[m+52>>2]=+g[l+4>>2];c[m+32>>2]=Y;c[m+36>>2]=v+(e*152|0)+120;c[m+40>>2]=v+(e*152|0)+124;c[m+48>>2]=c[l+20>>2];Y=c[u>>2]|0;Nb[c[(c[Y>>2]|0)+20>>2]&127](Y,m);if((c[d>>2]|0)>0){w=0;do{x=w+e|0;Y=(c[u>>2]|0)+16|0;y=+g[Y>>2];if(+g[v+(x*152|0)+124>>2]>=y){g[v+(x*152|0)+124>>2]=y;y=+g[Y>>2]}y=-y;if(+g[v+(x*152|0)+120>>2]<=y)g[v+(x*152|0)+120>>2]=y;c[v+(x*152|0)+132>>2]=t;Y=c[t+28>>2]|0;W=+g[v+(x*152|0)>>2];I=+g[v+(x*152|0)+4>>2];J=+g[v+(x*152|0)+8>>2];y=(W*+g[Y+280>>2]+I*+g[Y+284>>2]+J*+g[Y+288>>2])*+g[Y+548>>2];H=(W*+g[Y+296>>2]+I*+g[Y+300>>2]+J*+g[Y+304>>2])*+g[Y+552>>2];g[v+(x*152|0)+64>>2]=(+g[Y+264>>2]*W+ +g[Y+268>>2]*I+ +g[Y+272>>2]*J)*+g[Y+544>>2];g[v+(x*152|0)+68>>2]=y;g[v+(x*152|0)+72>>2]=H;g[v+(x*152|0)+76>>2]=0.0;Y=c[t+32>>2]|0;H=+g[v+(x*152|0)+32>>2];y=+g[v+(x*152|0)+36>>2];J=+g[v+(x*152|0)+40>>2];I=(H*+g[Y+280>>2]+y*+g[Y+284>>2]+J*+g[Y+288>>2])*+g[Y+548>>2];W=(H*+g[Y+296>>2]+y*+g[Y+300>>2]+J*+g[Y+304>>2])*+g[Y+552>>2];g[v+(x*152|0)+80>>2]=(+g[Y+264>>2]*H+ +g[Y+268>>2]*y+ +g[Y+272>>2]*J)*+g[Y+544>>2];g[v+(x*152|0)+84>>2]=I;g[v+(x*152|0)+88>>2]=W;g[v+(x*152|0)+92>>2]=0.0;W=+g[o+344>>2];I=+g[v+(x*152|0)+16>>2];H=+g[v+(x*152|0)+20>>2];G=+g[v+(x*152|0)+24>>2];F=+g[v+(x*152|0)>>2];E=+g[v+(x*152|0)+4>>2];D=+g[v+(x*152|0)+8>>2];X=+g[p+344>>2];C=+g[v+(x*152|0)+48>>2];B=+g[v+(x*152|0)+52>>2];A=+g[v+(x*152|0)+56>>2];z=+g[v+(x*152|0)+32>>2];J=I*W*I+H*W*H+G*W*G+(F*(+g[o+264>>2]*F+ +g[o+268>>2]*E+ +g[o+272>>2]*D)+E*(F*+g[o+280>>2]+E*+g[o+284>>2]+D*+g[o+288>>2])+D*(F*+g[o+296>>2]+E*+g[o+300>>2]+D*+g[o+304>>2]))+(C*X*C+B*X*B+A*X*A)+(z*(+g[p+264>>2]*z+ +g[p+268>>2]*y+ +g[p+272>>2]*J)+y*(z*+g[p+280>>2]+y*+g[p+284>>2]+J*+g[p+288>>2])+J*(z*+g[p+296>>2]+y*+g[p+300>>2]+J*+g[p+304>>2]));if(+P(+J)>1.1920928955078125e-7)T=1.0/J;else T=0.0;g[v+(x*152|0)+108>>2]=T;if(!(c[q+(s*244|0)+240>>2]|0)){X=0.0;K=0.0;L=0.0;M=0.0;N=0.0;O=0.0}else{X=+g[q+(s*244|0)+208>>2];K=+g[q+(s*244|0)+212>>2];L=+g[q+(s*244|0)+216>>2];M=+g[q+(s*244|0)+224>>2];N=+g[q+(s*244|0)+228>>2];O=+g[q+(s*244|0)+232>>2]}if(!(c[q+(r*244|0)+240>>2]|0)){W=0.0;V=0.0;U=0.0;J=0.0;S=0.0;R=0.0}else{W=+g[q+(r*244|0)+208>>2];V=+g[q+(r*244|0)+212>>2];U=+g[q+(r*244|0)+216>>2];J=+g[q+(r*244|0)+224>>2];S=+g[q+(r*244|0)+228>>2];R=+g[q+(r*244|0)+232>>2]}g[v+(x*152|0)+112>>2]=+g[v+(x*152|0)+112>>2]*T+T*(0.0- +g[m+52>>2]*((X+ +g[o+312>>2])*I+(K+ +g[o+316>>2])*H+(L+ +g[o+320>>2])*G+((M+ +g[o+328>>2])*F+(N+ +g[o+332>>2])*E+(O+ +g[o+336>>2])*D)+((W+ +g[p+312>>2])*C+(V+ +g[p+316>>2])*B+(U+ +g[p+320>>2])*A+((J+ +g[p+328>>2])*z+(S+ +g[p+332>>2])*y+(R+ +g[p+336>>2])*+g[v+(x*152|0)+40>>2]))));g[v+(x*152|0)+100>>2]=0.0;w=w+1|0}while((w|0)<(c[d>>2]|0))}d=c[b+176>>2]|0;o=d;d=c[d+(n<<3)>>2]|0}n=n+1|0;if((n|0)>=(k|0))break;else e=d+e|0}}vc[c[(c[b>>2]|0)+28>>2]&127](b,f,h,l);f=c[b+48>>2]|0;j=c[b+28>>2]|0;k=c[b+68>>2]|0;e=c[b+128>>2]|0;if((e|0)<(f|0)?(c[b+132>>2]|0)<(f|0):0){if(!f)h=0;else{c[5004]=(c[5004]|0)+1;h=fF((f<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}e=c[b+128>>2]|0}if((e|0)>0){n=0;do{d=h+(n<<2)|0;if(d)c[d>>2]=c[(c[b+136>>2]|0)+(n<<2)>>2];n=n+1|0}while((n|0)!=(e|0))}e=c[b+136>>2]|0;if(e){if(a[b+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=h;c[b+132>>2]=f}c[b+128>>2]=f;if(!(c[l+64>>2]&16)){h=c[b+108>>2]|0;if((h|0)<(j|0)?(c[b+112>>2]|0)<(j|0):0){if(!j)l=0;else{c[5004]=(c[5004]|0)+1;l=fF((j<<2|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}h=c[b+108>>2]|0}if((h|0)>0){e=0;do{n=l+(e<<2)|0;if(n)c[n>>2]=c[(c[b+116>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(h|0))}h=c[b+116>>2]|0;if(h){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=l;c[b+112>>2]=j}c[b+108>>2]=j}else{n=c[b+108>>2]|0;if((n|0)<(j<<1|0)?(c[b+112>>2]|0)<(j<<1|0):0){if(!j)l=0;else{c[5004]=(c[5004]|0)+1;l=fF((j<<3|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}n=c[b+108>>2]|0}if((n|0)>0){e=0;do{h=l+(e<<2)|0;if(h)c[h>>2]=c[(c[b+116>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(n|0))}h=c[b+116>>2]|0;if(h){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=l;c[b+112>>2]=j<<1}c[b+108>>2]=j<<1}e=c[b+148>>2]|0;if((e|0)<(k|0)?(c[b+152>>2]|0)<(k|0):0){if(!k)l=0;else{c[5004]=(c[5004]|0)+1;l=fF((k<<2|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}e=c[b+148>>2]|0}if((e|0)>0){h=0;do{n=l+(h<<2)|0;if(n)c[n>>2]=c[(c[b+156>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(e|0))}h=c[b+156>>2]|0;if(h){if(a[b+160>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=l;c[b+152>>2]=k}c[b+148>>2]=k;if((f|0)>0){h=c[b+136>>2]|0;l=0;do{c[h+(l<<2)>>2]=l;l=l+1|0}while((l|0)!=(f|0))}if((j|0)>0){l=c[b+116>>2]|0;f=0;do{c[l+(f<<2)>>2]=f;f=f+1|0}while((f|0)!=(j|0))}if((k|0)>0){b=c[b+156>>2]|0;l=0;do{c[b+(l<<2)>>2]=l;l=l+1|0}while((l|0)!=(k|0))}b=c[5022]|0;Y=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=Y;if(Y){i=m;return 0.0}do if(c[b+4>>2]|0){Eb(m+304|0,0)|0;Y=c[5008]|0;g[b+8>>2]=+(((c[m+308>>2]|0)-(c[Y+4>>2]|0)+(((c[m+304>>2]|0)-(c[Y>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=m;return 0.0}}while(0);c[5022]=c[b+20>>2];i=m;return 0.0}function Gr(b,d,e,f,h,j,k,l,m,n){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0.0;j=i;n=c[b+48>>2]|0;e=c[b+28>>2]|0;h=c[b+68>>2]|0;if(c[m+64>>2]&1){if((n|0)>0){f=c[b+136>>2]|0;q=c[b+192>>2]|0;r=0;do{s=f+(r<<2)|0;t=c[s>>2]|0;r=r+1|0;q=(aa(q,1664525)|0)+1013904223|0;if(r>>>0<65537){u=q>>>16^q;if(r>>>0<257)if(r>>>0<17){u=(u>>>8^u)>>>4^(u>>>8^u);if(r>>>0<5)if(r>>>0<3)u=(u>>>2^u)>>>1^(u>>>2^u);else u=u>>>2^u}else u=u>>>8^u}else u=q;u=f+(((u>>>0)%(r>>>0)|0)<<2)|0;c[s>>2]=c[u>>2];c[u>>2]=t}while((r|0)!=(n|0));c[b+192>>2]=q}if((c[m+20>>2]|0)>(d|0)){if((e|0)>0){s=c[b+116>>2]|0;r=c[b+192>>2]|0;q=0;do{f=s+(q<<2)|0;n=c[f>>2]|0;q=q+1|0;r=(aa(r,1664525)|0)+1013904223|0;if(q>>>0<65537){t=r>>>16^r;if(q>>>0<257)if(q>>>0<17){t=(t>>>8^t)>>>4^(t>>>8^t);if(q>>>0<5)if(q>>>0<3)t=(t>>>2^t)>>>1^(t>>>2^t);else t=t>>>2^t}else t=t>>>8^t}else t=r;u=s+(((t>>>0)%(q>>>0)|0)<<2)|0;c[f>>2]=c[u>>2];c[u>>2]=n}while((q|0)!=(e|0));c[b+192>>2]=r}if((h|0)>0){r=c[b+156>>2]|0;q=c[b+192>>2]|0;f=0;do{n=r+(f<<2)|0;e=c[n>>2]|0;f=f+1|0;q=(aa(q,1664525)|0)+1013904223|0;if(f>>>0<65537){s=q>>>16^q;if(f>>>0<257)if(f>>>0<17){s=(s>>>8^s)>>>4^(s>>>8^s);if(f>>>0<5)if(f>>>0<3)s=(s>>>2^s)>>>1^(s>>>2^s);else s=s>>>2^s}else s=s>>>8^s}else s=q;u=r+(((s>>>0)%(f>>>0)|0)<<2)|0;c[n>>2]=c[u>>2];c[u>>2]=e}while((f|0)!=(h|0));c[b+192>>2]=q}}}f=c[b+48>>2]|0;if(!(c[m+64>>2]&256)){if((f|0)>0){o=0;do{h=c[(c[b+136>>2]|0)+(o<<2)>>2]|0;p=c[b+56>>2]|0;if((c[p+(h*152|0)+136>>2]|0)>(d|0)){f=c[b+16>>2]|0;vr(f+((c[p+(h*152|0)+144>>2]|0)*244|0)|0,f+((c[p+(h*152|0)+148>>2]|0)*244|0)|0,p+(h*152|0)|0);f=c[b+48>>2]|0}o=o+1|0}while((o|0)<(f|0))}if((c[m+20>>2]|0)<=(d|0)){i=j;return 0.0}if((l|0)>0){p=0;do{o=k+(p<<2)|0;d=c[o>>2]|0;if(a[d+20>>0]|0){s=Cr(b,c[d+28>>2]|0,+g[m+12>>2])|0;u=Cr(b,c[(c[o>>2]|0)+32>>2]|0,+g[m+12>>2])|0;t=c[b+16>>2]|0;r=c[o>>2]|0;qc[c[(c[r>>2]|0)+24>>2]&15](r,t+(s*244|0)|0,t+(u*244|0)|0,+g[m+12>>2])}p=p+1|0}while((p|0)!=(l|0))}m=c[b+28>>2]|0;if((m|0)>0){l=0;do{u=c[(c[b+116>>2]|0)+(l<<2)>>2]|0;t=c[b+36>>2]|0;s=c[b+16>>2]|0;wr(s+((c[t+(u*152|0)+144>>2]|0)*244|0)|0,s+((c[t+(u*152|0)+148>>2]|0)*244|0)|0,t+(u*152|0)|0);l=l+1|0}while((l|0)!=(m|0))}m=c[b+68>>2]|0;if((m|0)>0){l=0;do{k=c[(c[b+156>>2]|0)+(l<<2)>>2]|0;o=c[b+76>>2]|0;v=+g[(c[b+36>>2]|0)+((c[o+(k*152|0)+140>>2]|0)*152|0)+100>>2];if(v>0.0){v=v*+g[o+(k*152|0)+104>>2];g[o+(k*152|0)+120>>2]=-v;g[o+(k*152|0)+124>>2]=v;u=c[b+16>>2]|0;vr(u+((c[o+(k*152|0)+144>>2]|0)*244|0)|0,u+((c[o+(k*152|0)+148>>2]|0)*244|0)|0,o+(k*152|0)|0)}l=l+1|0}while((l|0)!=(m|0))}m=c[b+88>>2]|0;if((m|0)<=0){i=j;return 0.0}l=0;do{k=c[b+96>>2]|0;v=+g[(c[b+36>>2]|0)+((c[k+(l*152|0)+140>>2]|0)*152|0)+100>>2];if(v>0.0){w=+g[k+(l*152|0)+104>>2];v=v*w>w?w:v*w;g[k+(l*152|0)+120>>2]=-v;g[k+(l*152|0)+124>>2]=v;u=c[b+16>>2]|0;vr(u+((c[k+(l*152|0)+144>>2]|0)*244|0)|0,u+((c[k+(l*152|0)+148>>2]|0)*244|0)|0,k+(l*152|0)|0)}l=l+1|0}while((l|0)!=(m|0));i=j;return 0.0}if((f|0)>0){h=0;do{n=c[(c[b+136>>2]|0)+(h<<2)>>2]|0;e=c[b+56>>2]|0;if((c[e+(n*152|0)+136>>2]|0)>(d|0)){f=c[b+16>>2]|0;vr(f+((c[e+(n*152|0)+144>>2]|0)*244|0)|0,f+((c[e+(n*152|0)+148>>2]|0)*244|0)|0,e+(n*152|0)|0);f=c[b+48>>2]|0}h=h+1|0}while((h|0)<(f|0))}if((c[m+20>>2]|0)<=(d|0)){i=j;return 0.0}if((l|0)>0){d=0;do{e=k+(d<<2)|0;h=c[e>>2]|0;if(a[h+20>>0]|0){s=Cr(b,c[h+28>>2]|0,+g[m+12>>2])|0;u=Cr(b,c[(c[e>>2]|0)+32>>2]|0,+g[m+12>>2])|0;t=c[b+16>>2]|0;r=c[e>>2]|0;qc[c[(c[r>>2]|0)+24>>2]&15](r,t+(s*244|0)|0,t+(u*244|0)|0,+g[m+12>>2])}d=d+1|0}while((d|0)!=(l|0))}n=c[m+64>>2]|0;l=c[b+28>>2]|0;if(n&512){if((l|0)<=0){i=j;return 0.0}e=0;do{h=c[(c[b+116>>2]|0)+(e<<2)>>2]|0;d=c[b+36>>2]|0;k=c[b+16>>2]|0;wr(k+((c[d+(h*152|0)+144>>2]|0)*244|0)|0,k+((c[d+(h*152|0)+148>>2]|0)*244|0)|0,d+(h*152|0)|0);v=+g[d+(h*152|0)+100>>2];h=aa(e,(n>>>4&1)+1|0)|0;d=c[(c[b+156>>2]|0)+(h<<2)>>2]|0;k=c[b+76>>2]|0;if(v>0.0){w=v*+g[k+(d*152|0)+104>>2];g[k+(d*152|0)+120>>2]=-w;g[k+(d*152|0)+124>>2]=w;u=c[b+16>>2]|0;vr(u+((c[k+(d*152|0)+144>>2]|0)*244|0)|0,u+((c[k+(d*152|0)+148>>2]|0)*244|0)|0,k+(d*152|0)|0)}if((c[m+64>>2]&16|0)!=0?(o=c[(c[b+156>>2]|0)+(h+1<<2)>>2]|0,p=c[b+76>>2]|0,v>0.0):0){w=v*+g[p+(o*152|0)+104>>2];g[p+(o*152|0)+120>>2]=-w;g[p+(o*152|0)+124>>2]=w;u=c[b+16>>2]|0;vr(u+((c[p+(o*152|0)+144>>2]|0)*244|0)|0,u+((c[p+(o*152|0)+148>>2]|0)*244|0)|0,p+(o*152|0)|0)}e=e+1|0}while((e|0)!=(l|0));i=j;return 0.0}if((l|0)>0){m=0;do{u=c[(c[b+116>>2]|0)+(m<<2)>>2]|0;t=c[b+36>>2]|0;s=c[b+16>>2]|0;wr(s+((c[t+(u*152|0)+144>>2]|0)*244|0)|0,s+((c[t+(u*152|0)+148>>2]|0)*244|0)|0,t+(u*152|0)|0);m=m+1|0}while((m|0)!=(l|0))}m=c[b+68>>2]|0;if((m|0)>0){l=0;do{k=c[(c[b+156>>2]|0)+(l<<2)>>2]|0;o=c[b+76>>2]|0;v=+g[(c[b+36>>2]|0)+((c[o+(k*152|0)+140>>2]|0)*152|0)+100>>2];if(v>0.0){w=v*+g[o+(k*152|0)+104>>2];g[o+(k*152|0)+120>>2]=-w;g[o+(k*152|0)+124>>2]=w;u=c[b+16>>2]|0;vr(u+((c[o+(k*152|0)+144>>2]|0)*244|0)|0,u+((c[o+(k*152|0)+148>>2]|0)*244|0)|0,o+(k*152|0)|0)}l=l+1|0}while((l|0)!=(m|0))}k=c[b+88>>2]|0;if((k|0)<=0){i=j;return 0.0}l=0;do{m=c[b+96>>2]|0;v=+g[(c[b+36>>2]|0)+((c[m+(l*152|0)+140>>2]|0)*152|0)+100>>2];if(v>0.0){w=+g[m+(l*152|0)+104>>2];w=v*w>w?w:v*w;g[m+(l*152|0)+120>>2]=-w;g[m+(l*152|0)+124>>2]=w;u=c[b+16>>2]|0;vr(u+((c[m+(l*152|0)+144>>2]|0)*244|0)|0,u+((c[m+(l*152|0)+148>>2]|0)*244|0)|0,m+(l*152|0)|0)}l=l+1|0}while((l|0)!=(k|0));i=j;return 0.0}function Hr(a,b,d,e,f,g,h,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;d=i;if(!(c[j+44>>2]|0)){i=d;return}h=c[j+20>>2]|0;if(!(c[j+64>>2]&256)){if((h|0)<=0){i=d;return}f=1;while(1){g=c[a+28>>2]|0;if((g|0)>0){h=0;do{e=c[(c[a+116>>2]|0)+(h<<2)>>2]|0;b=c[a+36>>2]|0;k=c[a+16>>2]|0;xr(k+((c[b+(e*152|0)+144>>2]|0)*244|0)|0,k+((c[b+(e*152|0)+148>>2]|0)*244|0)|0,b+(e*152|0)|0);h=h+1|0}while((h|0)!=(g|0));h=c[j+20>>2]|0}if((f|0)>=(h|0))break;f=f+1|0}i=d;return}else{if((h|0)<=0){i=d;return}f=1;while(1){g=c[a+28>>2]|0;if((g|0)>0){h=0;do{e=c[(c[a+116>>2]|0)+(h<<2)>>2]|0;b=c[a+36>>2]|0;k=c[a+16>>2]|0;xr(k+((c[b+(e*152|0)+144>>2]|0)*244|0)|0,k+((c[b+(e*152|0)+148>>2]|0)*244|0)|0,b+(e*152|0)|0);h=h+1|0}while((h|0)!=(g|0));h=c[j+20>>2]|0}if((f|0)>=(h|0))break;f=f+1|0}i=d;return}}function Ir(a,b,d,e,f,h,j,k,l){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0;m=i;i=i+16|0;yE(4112);ec[c[(c[a>>2]|0)+32>>2]&1](a,b,d,e,f,h,j,k,l);o=c[a+184>>2]|0;n=c[k+20>>2]|0;n=(o|0)>(n|0)?o:n;if((n|0)>0){o=0;do{+ic[c[(c[a>>2]|0)+40>>2]&3](a,o,b,d,e,f,h,j,k,l);o=o+1|0}while((o|0)<(n|0))}h=c[5022]|0;o=(c[h+16>>2]|0)+ -1|0;c[h+16>>2]=o;if(o){i=m;return 0.0}do if(c[h+4>>2]|0){Eb(m|0,0)|0;o=c[5008]|0;g[h+8>>2]=+(((c[m+4>>2]|0)-(c[o+4>>2]|0)+(((c[m>>2]|0)-(c[o>>2]|0)|0)*1e6|0)-(c[h+12>>2]|0)|0)>>>0)/1.0e3+ +g[h+8>>2];if(!(c[h+16>>2]|0)){h=c[5022]|0;break}else{i=m;return 0.0}}while(0);c[5022]=c[h+20>>2];i=m;return 0.0}function Jr(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0;d=i;i=i+80|0;j=c[b+28>>2]|0;l=c[f+64>>2]|0;if((l&4|0)!=0&(j|0)>0){e=c[b+36>>2]|0;k=c[b+76>>2]|0;if(!(l&16)){l=0;do{q=c[e+(l*152|0)+132>>2]|0;g[q+120>>2]=+g[e+(l*152|0)+100>>2];g[q+124>>2]=+g[k+((c[e+(l*152|0)+140>>2]|0)*152|0)+100>>2];l=l+1|0}while((l|0)!=(j|0))}else{l=0;do{q=c[e+(l*152|0)+132>>2]|0;g[q+120>>2]=+g[e+(l*152|0)+100>>2];p=c[e+(l*152|0)+140>>2]|0;g[q+124>>2]=+g[k+(p*152|0)+100>>2];g[q+128>>2]=+g[k+((p+1|0)*152|0)+100>>2];l=l+1|0}while((l|0)!=(j|0))}}j=c[b+48>>2]|0;if((j|0)>0){k=0;do{e=c[b+56>>2]|0;l=c[e+(k*152|0)+132>>2]|0;q=c[l+44>>2]|0;p=e+(k*152|0)+100|0;if(q){o=+g[p>>2];s=c[l+28>>2]|0;n=1.0/+g[f+12>>2];m=o*+g[e+(k*152|0)+20>>2]*+g[s+352>>2]*n;r=o*+g[e+(k*152|0)+24>>2]*+g[s+356>>2]*n;g[q>>2]=+g[e+(k*152|0)+16>>2]*o*+g[s+348>>2]*n+ +g[q>>2];g[q+4>>2]=m+ +g[q+4>>2];g[q+8>>2]=r+ +g[q+8>>2];r=+g[p>>2];s=c[l+32>>2]|0;m=1.0/+g[f+12>>2];n=r*+g[e+(k*152|0)+52>>2]*+g[s+352>>2]*m;o=r*+g[e+(k*152|0)+56>>2]*+g[s+356>>2]*m;g[q+32>>2]=+g[e+(k*152|0)+48>>2]*r*+g[s+348>>2]*m+ +g[q+32>>2];g[q+36>>2]=n+ +g[q+36>>2];g[q+40>>2]=o+ +g[q+40>>2];s=c[l+28>>2]|0;o=+g[p>>2];n=1.0/+g[f+12>>2];m=+g[e+(k*152|0)+4>>2]*+g[s+548>>2]*o*n;r=o*+g[e+(k*152|0)+8>>2]*+g[s+552>>2]*n;g[q+16>>2]=+g[e+(k*152|0)>>2]*+g[s+544>>2]*o*n+ +g[q+16>>2];g[q+20>>2]=m+ +g[q+20>>2];g[q+24>>2]=r+ +g[q+24>>2];s=c[l+32>>2]|0;r=+g[p>>2];m=1.0/+g[f+12>>2];n=+g[e+(k*152|0)+36>>2]*+g[s+548>>2]*r*m;o=r*+g[e+(k*152|0)+40>>2]*+g[s+552>>2]*m;g[q+48>>2]=+g[e+(k*152|0)+32>>2]*+g[s+544>>2]*r*m+ +g[q+48>>2];g[q+52>>2]=n+ +g[q+52>>2];g[q+56>>2]=o+ +g[q+56>>2]}g[l+36>>2]=+g[p>>2];r=+P(+(+g[p>>2]));if(r>=+g[l+16>>2])a[l+20>>0]=0;k=k+1|0}while((k|0)!=(j|0))}p=c[b+8>>2]|0;if((p|0)>0){j=c[b+16>>2]|0;e=0;do{k=j+(e*244|0)|0;l=c[j+(e*244|0)+240>>2]|0;if(l){if(!(c[f+44>>2]|0)){s=j+(e*244|0)+176|0;o=+g[j+(e*244|0)+64>>2]+ +g[s>>2];g[s>>2]=o;s=j+(e*244|0)+180|0;n=+g[j+(e*244|0)+68>>2]+ +g[s>>2];g[s>>2]=n;s=j+(e*244|0)+184|0;m=+g[j+(e*244|0)+72>>2]+ +g[s>>2];g[s>>2]=m;s=j+(e*244|0)+192|0;g[s>>2]=+g[j+(e*244|0)+80>>2]+ +g[s>>2];s=j+(e*244|0)+196|0;g[s>>2]=+g[j+(e*244|0)+84>>2]+ +g[s>>2];s=j+(e*244|0)+200|0;g[s>>2]=+g[j+(e*244|0)+88>>2]+ +g[s>>2]}else{n=+g[f+12>>2];m=+g[f+52>>2];l=j+(e*244|0)+176|0;g[l>>2]=+g[j+(e*244|0)+64>>2]+ +g[l>>2];l=j+(e*244|0)+180|0;g[l>>2]=+g[j+(e*244|0)+68>>2]+ +g[l>>2];l=j+(e*244|0)+184|0;g[l>>2]=+g[j+(e*244|0)+72>>2]+ +g[l>>2];l=j+(e*244|0)+192|0;g[l>>2]=+g[j+(e*244|0)+80>>2]+ +g[l>>2];l=j+(e*244|0)+196|0;g[l>>2]=+g[j+(e*244|0)+84>>2]+ +g[l>>2];l=j+(e*244|0)+200|0;g[l>>2]=+g[j+(e*244|0)+88>>2]+ +g[l>>2];l=j+(e*244|0)+144|0;p=j+(e*244|0)+148|0;if(((((!(+g[l>>2]!=0.0)?!(+g[p>>2]!=0.0):0)?!(+g[j+(e*244|0)+152>>2]!=0.0):0)?!(+g[j+(e*244|0)+160>>2]!=0.0):0)?!(+g[j+(e*244|0)+164>>2]!=0.0):0)?!(+g[j+(e*244|0)+168>>2]!=0.0):0)k=j;else h=22;if((h|0)==22){h=0;o=+g[j+(e*244|0)+164>>2]*m;r=+g[j+(e*244|0)+168>>2]*m;g[d>>2]=+g[j+(e*244|0)+160>>2]*m;g[d+4>>2]=o;g[d+8>>2]=r;g[d+12>>2]=0.0;Bo(k,+g[l>>2],+g[p>>2],+g[j+(e*244|0)+152>>2],d,n,d+16|0);c[k+0>>2]=c[d+16>>2];c[k+4>>2]=c[d+20>>2];c[k+8>>2]=c[d+24>>2];c[k+12>>2]=c[d+28>>2];k=j+(e*244|0)+16|0;c[k+0>>2]=c[d+32>>2];c[k+4>>2]=c[d+36>>2];c[k+8>>2]=c[d+40>>2];c[k+12>>2]=c[d+44>>2];k=j+(e*244|0)+32|0;c[k+0>>2]=c[d+48>>2];c[k+4>>2]=c[d+52>>2];c[k+8>>2]=c[d+56>>2];c[k+12>>2]=c[d+60>>2];k=j+(e*244|0)+48|0;c[k+0>>2]=c[d+64>>2];c[k+4>>2]=c[d+68>>2];c[k+8>>2]=c[d+72>>2];c[k+12>>2]=c[d+76>>2];k=c[b+16>>2]|0}j=k;o=+g[k+(e*244|0)+176>>2];n=+g[k+(e*244|0)+180>>2];m=+g[k+(e*244|0)+184>>2];l=c[k+(e*244|0)+240>>2]|0}r=o+ +g[j+(e*244|0)+208>>2];o=n+ +g[j+(e*244|0)+212>>2];n=m+ +g[j+(e*244|0)+216>>2];q=l+260|0;c[q>>2]=(c[q>>2]|0)+1;g[l+312>>2]=r;g[l+316>>2]=o;g[l+320>>2]=n;g[l+324>>2]=0.0;q=c[b+16>>2]|0;s=c[q+(e*244|0)+240>>2]|0;n=+g[q+(e*244|0)+192>>2]+ +g[q+(e*244|0)+224>>2];o=+g[q+(e*244|0)+196>>2]+ +g[q+(e*244|0)+228>>2];r=+g[q+(e*244|0)+200>>2]+ +g[q+(e*244|0)+232>>2];c[s+260>>2]=(c[s+260>>2]|0)+1;g[s+328>>2]=n;g[s+332>>2]=o;g[s+336>>2]=r;g[s+340>>2]=0.0;if(c[f+44>>2]|0){q=c[b+16>>2]|0;s=c[q+(e*244|0)+240>>2]|0;p=q+(e*244|0)|0;c[s+260>>2]=(c[s+260>>2]|0)+1;c[s+4>>2]=c[p+0>>2];c[s+8>>2]=c[p+4>>2];c[s+12>>2]=c[p+8>>2];c[s+16>>2]=c[p+12>>2];p=q+(e*244|0)+16|0;c[s+20>>2]=c[p+0>>2];c[s+24>>2]=c[p+4>>2];c[s+28>>2]=c[p+8>>2];c[s+32>>2]=c[p+12>>2];p=q+(e*244|0)+32|0;c[s+36>>2]=c[p+0>>2];c[s+40>>2]=c[p+4>>2];c[s+44>>2]=c[p+8>>2];c[s+48>>2]=c[p+12>>2];q=q+(e*244|0)+48|0;c[s+52>>2]=c[q+0>>2];c[s+56>>2]=c[q+4>>2];c[s+60>>2]=c[q+8>>2];c[s+64>>2]=c[q+12>>2]}j=c[b+16>>2]|0;c[(c[j+(e*244|0)+240>>2]|0)+212>>2]=-1;p=c[b+8>>2]|0}e=e+1|0}while((e|0)<(p|0))}if((c[b+28>>2]|0)<0?(c[b+32>>2]|0)<0:0){f=c[b+36>>2]|0;if(f){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+32>>2]=0}c[b+28>>2]=0;if((c[b+48>>2]|0)<0?(c[b+52>>2]|0)<0:0){f=c[b+56>>2]|0;if(f){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+52>>2]=0}c[b+48>>2]=0;if((c[b+68>>2]|0)<0?(c[b+72>>2]|0)<0:0){f=c[b+76>>2]|0;if(f){if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+76>>2]=0}a[b+80>>0]=1;c[b+76>>2]=0;c[b+72>>2]=0}c[b+68>>2]=0;if((c[b+88>>2]|0)<0?(c[b+92>>2]|0)<0:0){f=c[b+96>>2]|0;if(f){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+92>>2]=0}c[b+88>>2]=0;if((c[b+8>>2]|0)>=0){c[b+8>>2]=0;i=d;return 0.0}if((c[b+12>>2]|0)>=0){c[b+8>>2]=0;i=d;return 0.0}f=c[b+16>>2]|0;if(f){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+12>>2]=0;c[b+8>>2]=0;i=d;return 0.0}function Kr(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;m=i;i=i+16|0;yE(4152);+kc[c[(c[a>>2]|0)+44>>2]&3](a,b,d,e,f,h,j,k,l);+kc[c[(c[a>>2]|0)+48>>2]&3](a,b,d,e,f,h,j,k,l);+oc[c[(c[a>>2]|0)+36>>2]&1](a,b,d,k);j=c[5022]|0;e=(c[j+16>>2]|0)+ -1|0;c[j+16>>2]=e;if(e){i=m;return 0.0}do if(c[j+4>>2]|0){Eb(m|0,0)|0;e=c[5008]|0;g[j+8>>2]=+(((c[m+4>>2]|0)-(c[e+4>>2]|0)+(((c[m>>2]|0)-(c[e>>2]|0)|0)*1e6|0)-(c[j+12>>2]|0)|0)>>>0)/1.0e3+ +g[j+8>>2];if(!(c[j+16>>2]|0)){j=c[5022]|0;break}else{i=m;return 0.0}}while(0);c[5022]=c[j+20>>2];i=m;return 0.0}function Lr(a){a=a|0;c[a+192>>2]=0;return}function Mr(a,b,c){a=a|0;b=b|0;c=c|0;return}function Nr(a,b,c){a=a|0;b=b|0;c=c|0;return}function Or(a){a=a|0;return 1}function Pr(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0;f=i;i=i+256|0;if((a[b+180>>0]|0)==0?(a[b+48>>0]|0)!=0:0){no(f+64|0,e,b+116|0);c[b+824>>2]=c[f+64>>2];c[b+828>>2]=c[f+68>>2];c[b+832>>2]=c[f+72>>2];c[b+836>>2]=c[f+76>>2];c[b+840>>2]=c[f+80>>2];c[b+844>>2]=c[f+84>>2];c[b+848>>2]=c[f+88>>2];c[b+852>>2]=c[f+92>>2];c[b+856>>2]=c[f+96>>2];c[b+860>>2]=c[f+100>>2];c[b+864>>2]=c[f+104>>2];c[b+868>>2]=c[f+108>>2];c[b+872>>2]=c[f+112>>2];c[b+876>>2]=c[f+116>>2];c[b+880>>2]=c[f+120>>2];c[b+884>>2]=c[f+124>>2];no(f,d,b+52|0);c[b+888>>2]=c[f+0>>2];c[b+892>>2]=c[f+4>>2];c[b+896>>2]=c[f+8>>2];c[b+900>>2]=c[f+12>>2];c[b+904>>2]=c[f+16>>2];c[b+908>>2]=c[f+20>>2];c[b+912>>2]=c[f+24>>2];c[b+916>>2]=c[f+28>>2];c[b+920>>2]=c[f+32>>2];c[b+924>>2]=c[f+36>>2];c[b+928>>2]=c[f+40>>2];c[b+932>>2]=c[f+44>>2];c[b+936>>2]=c[f+48>>2];c[b+940>>2]=c[f+52>>2];c[b+944>>2]=c[f+56>>2];c[b+948>>2]=c[f+60>>2]}else{no(f+192|0,d,b+52|0);c[b+824>>2]=c[f+192>>2];c[b+828>>2]=c[f+196>>2];c[b+832>>2]=c[f+200>>2];c[b+836>>2]=c[f+204>>2];c[b+840>>2]=c[f+208>>2];c[b+844>>2]=c[f+212>>2];c[b+848>>2]=c[f+216>>2];c[b+852>>2]=c[f+220>>2];c[b+856>>2]=c[f+224>>2];c[b+860>>2]=c[f+228>>2];c[b+864>>2]=c[f+232>>2];c[b+868>>2]=c[f+236>>2];c[b+872>>2]=c[f+240>>2];c[b+876>>2]=c[f+244>>2];c[b+880>>2]=c[f+248>>2];c[b+884>>2]=c[f+252>>2];no(f+128|0,e,b+116|0);c[b+888>>2]=c[f+128>>2];c[b+892>>2]=c[f+132>>2];c[b+896>>2]=c[f+136>>2];c[b+900>>2]=c[f+140>>2];c[b+904>>2]=c[f+144>>2];c[b+908>>2]=c[f+148>>2];c[b+912>>2]=c[f+152>>2];c[b+916>>2]=c[f+156>>2];c[b+920>>2]=c[f+160>>2];c[b+924>>2]=c[f+164>>2];c[b+928>>2]=c[f+168>>2];c[b+932>>2]=c[f+172>>2];c[b+936>>2]=c[f+176>>2];c[b+940>>2]=c[f+180>>2];c[b+944>>2]=c[f+184>>2];c[b+948>>2]=c[f+188>>2]}c[b+968>>2]=c[b+872>>2];c[b+972>>2]=c[b+876>>2];c[b+976>>2]=c[b+880>>2];c[b+980>>2]=c[b+884>>2];c[b+984>>2]=c[b+936>>2];c[b+988>>2]=c[b+940>>2];c[b+992>>2]=c[b+944>>2];c[b+996>>2]=c[b+948>>2];k=+g[b+824>>2];j=+g[b+840>>2];h=+g[b+856>>2];g[b+952>>2]=k;g[b+956>>2]=j;g[b+960>>2]=h;g[b+964>>2]=0.0;if((a[b+180>>0]|0)==0?(a[b+48>>0]|0)==0:0){t=+g[b+968>>2];n=t- +g[b+984>>2];r=+g[b+972>>2];m=r- +g[b+988>>2];q=+g[b+976>>2];l=q- +g[b+992>>2];g[b+1016>>2]=n;g[b+1020>>2]=m;g[b+1024>>2]=l;g[b+1028>>2]=0.0;p=k*n;s=j*m;s=p+s;p=h*l;p=s+p;s=k*p;j=j*p;k=h*p;h=t+s;j=r+j;k=q+k;d=b+1e3|0;g[d>>2]=h;d=b+1004|0;g[d>>2]=j;d=b+1008|0;g[d>>2]=k;d=b+1012|0;g[d>>2]=0.0;d=b+1032|0;g[d>>2]=p;d=b+828|0;e=b+844|0;o=b+860|0;k=+g[d>>2];j=+g[e>>2];h=+g[o>>2];k=k*n;j=j*m;j=k+j;h=h*l;h=j+h;o=b+1036|0;g[o>>2]=h;o=b+832|0;e=b+848|0;d=b+864|0;h=+g[o>>2];j=+g[e>>2];k=+g[d>>2];h=h*n;j=j*m;j=h+j;k=k*l;k=j+k;d=b+1040|0;g[d>>2]=k;i=f;return}v=+g[b+968>>2];q=+g[b+984>>2]-v;u=+g[b+972>>2];s=+g[b+988>>2]-u;l=+g[b+976>>2];t=+g[b+992>>2]-l;g[b+1016>>2]=q;g[b+1020>>2]=s;g[b+1024>>2]=t;g[b+1028>>2]=0.0;r=k*q;m=j*s;m=r+m;r=h*t;r=m+r;m=k*r;n=j*r;p=h*r;m=v+m;n=u+n;p=l+p;o=b+1e3|0;g[o>>2]=m;o=b+1004|0;g[o>>2]=n;o=b+1008|0;g[o>>2]=p;o=b+1012|0;g[o>>2]=0.0;o=b+1032|0;g[o>>2]=r;o=b+828|0;d=b+844|0;e=b+860|0;r=+g[o>>2];p=+g[d>>2];n=+g[e>>2];r=r*q;p=p*s;p=r+p;n=n*t;n=p+n;e=b+1036|0;g[e>>2]=n;e=b+832|0;d=b+848|0;o=b+864|0;n=+g[e>>2];p=+g[d>>2];r=+g[o>>2];q=n*q;s=p*s;s=q+s;t=r*t;t=s+t;o=b+1040|0;g[o>>2]=t;i=f;return}function Qr(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0;e=i;if(a[b+48>>0]|0){c[d>>2]=0;c[d+4>>2]=0;i=e;return}c[d>>2]=4;c[d+4>>2]=2;Pr(b,(c[b+28>>2]|0)+4|0,(c[b+32>>2]|0)+4|0);g[b+1088>>2]=0.0;a[b+297>>0]=0;f=+g[b+192>>2];h=+g[b+196>>2];do if(f<=h){m=+g[b+892>>2];l=+g[b+908>>2];j=+g[b+924>>2];f=+Yp(+Y(+(+g[b+832>>2]*m+ +g[b+848>>2]*l+ +g[b+864>>2]*j),+(+g[b+828>>2]*m+ +g[b+844>>2]*l+ +g[b+860>>2]*j)),f,h);g[b+1084>>2]=f;h=+g[b+192>>2];if(f<h){g[b+1088>>2]=f-h;a[b+297>>0]=1;break}h=+g[b+196>>2];if(f>h){g[b+1088>>2]=f-h;a[b+297>>0]=1}}while(0);a[b+296>>0]=0;h=+g[b+1032>>2];g[b+1080>>2]=h;f=+g[b+184>>2];j=+g[b+188>>2];do if(f<=j){if(h>j){g[b+1032>>2]=h-j;a[b+296>>0]=1;k=14;break}if(h<f){g[b+1032>>2]=h-f;a[b+296>>0]=1;k=14}else k=13}else k=13;while(0);if((k|0)==13?(g[b+1032>>2]=0.0,(a[b+1096>>0]|0)!=0):0)k=14;if((k|0)==14){c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1}if((a[b+297>>0]|0)==0?(a[b+1112>>0]|0)==0:0){i=e;return}c[d>>2]=(c[d>>2]|0)+1;c[d+4>>2]=(c[d+4>>2]|0)+ -1;i=e;return}function Rr(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0;e=i;l=c[b+28>>2]|0;m=c[b+32>>2]|0;f=+g[l+344>>2];h=+g[m+344>>2];u=c[d+24>>2]|0;k=(a[b+180>>0]|0)!=0?1.0:-1.0;r=+g[b+936>>2]- +g[b+872>>2];s=+g[b+940>>2]- +g[b+876>>2];t=+g[b+944>>2]- +g[b+880>>2];if(f<1.1920928955078125e-7)o=1;else o=h<1.1920928955078125e-7;if(f+h>0.0)q=h/(f+h);else q=.5;p=1.0-q;I=+g[b+824>>2];D=+g[b+840>>2];z=+g[b+856>>2];M=+g[b+888>>2];O=+g[b+904>>2];B=+g[b+920>>2];G=(a[b+49>>0]|0)==0;do if(!G){C=q*I+p*M;L=q*D+p*O;J=q*z+p*B;E=1.0/+Q(+(C*C+L*L+J*J));if(+P(+(J*E))>.7071067690849304){T=1.0/+Q(+(J*E*J*E+L*E*L*E));f=C*E;h=L*E;j=J*E;y=0.0;A=-(J*E*T);F=L*E*T;K=(J*E*J*E+L*E*L*E)*T;S=-(C*E*L*E*T);T=C*E*-(J*E*T);break}else{T=1.0/+Q(+(C*E*C*E+L*E*L*E));f=C*E;h=L*E;j=J*E;y=-(L*E*T);A=C*E*T;F=0.0;K=-(J*E*C*E*T);S=J*E*-(L*E*T);T=(C*E*C*E+L*E*L*E)*T;break}}else{f=I;h=D;j=z;y=+g[b+828>>2];A=+g[b+844>>2];F=+g[b+860>>2];K=+g[b+832>>2];S=+g[b+848>>2];T=+g[b+864>>2]}while(0);w=c[d+12>>2]|0;g[w>>2]=y;g[w+4>>2]=A;g[w+8>>2]=F;g[w+(u<<2)>>2]=K;g[w+(u+1<<2)>>2]=S;g[w+(u+2<<2)>>2]=T;E=-y;x=c[d+20>>2]|0;g[x>>2]=E;L=-A;g[x+4>>2]=L;N=-F;g[x+8>>2]=N;C=-K;g[x+(u<<2)>>2]=C;R=-S;g[x+(u+1<<2)>>2]=R;J=-T;g[x+(u+2<<2)>>2]=J;v=c[b+300>>2]|0;U=+g[b+280>>2];if(!(v&128))U=U*+g[d+4>>2];_=U*+g[d>>2];$=c[d+28>>2]|0;g[$>>2]=_*((D*B-z*O)*y+(z*M-I*B)*A+(I*O-D*M)*F);g[$+(u<<2)>>2]=_*((D*B-z*O)*K+(z*M-I*B)*S+(I*O-D*M)*T);if(v&64){$=c[d+32>>2]|0;g[$>>2]=+g[b+292>>2];g[$+(u<<2)>>2]=+g[b+292>>2]}I=+g[l+52>>2];O=+g[l+56>>2];M=+g[l+60>>2];z=+g[m+52>>2];D=+g[m+56>>2];B=+g[m+60>>2];if(G){_=(D-O)*F-(B-M)*A;Z=(B-M)*y-(z-I)*F;Y=(z-I)*A-(D-O)*y;g[w+(u<<1<<2)>>2]=q*_;g[w+((u<<1|1)<<2)>>2]=q*Z;g[w+((u<<1)+2<<2)>>2]=q*Y;g[x+(u<<1<<2)>>2]=p*_;g[x+((u<<1|1)<<2)>>2]=p*Z;g[x+((u<<1)+2<<2)>>2]=p*Y;Y=(D-O)*T-(B-M)*S;Z=(B-M)*K-(z-I)*T;_=(z-I)*S-(D-O)*K;g[w+(u*3<<2)>>2]=q*Y;g[w+((u*3|0)+1<<2)>>2]=q*Z;g[w+((u*3|0)+2<<2)>>2]=q*_;g[x+(u*3<<2)>>2]=p*Y;g[x+((u*3|0)+1<<2)>>2]=p*Z;g[x+((u*3|0)+2<<2)>>2]=p*_;H=c[d+8>>2]|0;g[H+(u<<1<<2)>>2]=y;g[H+((u<<1|1)<<2)>>2]=A;g[H+((u<<1)+2<<2)>>2]=F;g[H+(u*3<<2)>>2]=K;g[H+((u*3|0)+1<<2)>>2]=S;g[H+((u*3|0)+2<<2)>>2]=T;G=c[d+16>>2]|0;g[G+(u<<1<<2)>>2]=E;g[G+((u<<1|1)<<2)>>2]=L;g[G+((u<<1)+2<<2)>>2]=N;g[G+(u*3<<2)>>2]=C;g[G+((u*3|0)+1<<2)>>2]=R;g[G+((u*3|0)+2<<2)>>2]=J;L=0.0;N=0.0;R=0.0;C=0.0;E=0.0;J=0.0;D=D-O;B=B-M;z=z-I}else{z=+g[b+936>>2]-z;C=+g[b+940>>2]-D;D=+g[b+944>>2]-B;E=f*z+h*C+j*D;B=f*E;J=h*E;E=j*E;Y=+g[b+872>>2]-I;Z=+g[b+876>>2]-O;_=+g[b+880>>2]-M;F=f*Y+h*Z+j*_;y=f*F;A=h*F;F=j*F;M=+g[b+1080>>2]- +g[b+1032>>2];I=y+f*M-B;O=A+h*M-J;M=F+j*M-E;R=Y-y+q*I;L=Z-A+q*O;N=_-F+q*M;y=q*(z-B)+p*(Y-y);A=q*(C-J)+p*(Z-A);F=q*(D-E)+p*(_-F);if(y*y+A*A+F*F>1.1920928955078125e-7){_=1.0/+Q(+(y*y+A*A+F*F));y=y*_;A=_*A;F=_*F}else{y=+g[b+828>>2];A=+g[b+844>>2];F=+g[b+860>>2]}K=h*F-j*A;S=j*y-f*F;T=f*A-h*y;g[w+(u<<1<<2)>>2]=L*F-N*A;g[w+((u<<1|1)<<2)>>2]=N*y-R*F;g[w+((u<<1)+2<<2)>>2]=R*A-L*y;$=c[d+20>>2]|0;g[$+(u<<1<<2)>>2]=-((C-J-p*O)*F-(D-E-p*M)*A);g[$+((u<<1|1)<<2)>>2]=-((D-E-p*M)*y-(z-B-p*I)*F);g[$+((u<<1)+2<<2)>>2]=-((z-B-p*I)*A-(C-J-p*O)*y);U=(C-J-p*O)*T-(D-E-p*M)*S;W=(D-E-p*M)*K-(z-B-p*I)*T;_=(z-B-p*I)*S-(C-J-p*O)*K;if(o?(a[b+297>>0]|0)!=0:0){U=p*U;W=p*W;_=p*_;Z=q*(L*T-N*S);X=q*(N*K-R*T);Y=q*(R*S-L*K)}else{Z=L*T-N*S;X=N*K-R*T;Y=R*S-L*K}x=c[d+12>>2]|0;g[x+(u*3<<2)>>2]=Z;g[x+((u*3|0)+1<<2)>>2]=X;g[x+((u*3|0)+2<<2)>>2]=Y;x=c[d+20>>2]|0;g[x+(u*3<<2)>>2]=-U;g[x+((u*3|0)+1<<2)>>2]=-W;g[x+((u*3|0)+2<<2)>>2]=-_;H=c[d+8>>2]|0;g[H+(u<<1<<2)>>2]=y;g[H+((u<<1|1)<<2)>>2]=A;g[H+((u<<1)+2<<2)>>2]=F;g[H+(u*3<<2)>>2]=K;g[H+((u*3|0)+1<<2)>>2]=S;g[H+((u*3|0)+2<<2)>>2]=T;G=c[d+16>>2]|0;g[G+(u<<1<<2)>>2]=-y;g[G+((u<<1|1)<<2)>>2]=-A;g[G+((u<<1)+2<<2)>>2]=-F;g[G+(u*3<<2)>>2]=-K;g[G+((u*3|0)+1<<2)>>2]=-S;g[G+((u*3|0)+2<<2)>>2]=-T;v=c[b+300>>2]|0;C=C-J-p*O;E=D-E-p*M;J=z-B-p*I;D=0.0;B=0.0;z=0.0}I=+g[b+264>>2];if(!(v&32))I=I*+g[d+4>>2];_=I*+g[d>>2];w=c[d+28>>2]|0;g[w+(u<<1<<2)>>2]=_*(r*y+s*A+t*F);g[w+(u*3<<2)>>2]=_*(r*K+s*S+t*T);if(v&16){$=c[d+32>>2]|0;g[$+(u<<1<<2)>>2]=+g[b+276>>2];g[$+(u*3<<2)>>2]=+g[b+276>>2]}if(!(a[b+296>>0]|0))if(!(a[b+1096>>0]|0))m=4;else{V=0;$=0;u=0;r=0.0;n=30}else{r=k*+g[b+1032>>2];V=1;$=(a[b+1096>>0]|0)==0;u=r>0.0?2:1;n=30}if((n|0)==30){n=c[d+24>>2]<<2;g[H+(n<<2)>>2]=f;g[H+((n|1)<<2)>>2]=h;g[H+((n|2)<<2)>>2]=j;g[G+(n<<2)>>2]=-f;g[G+((n|1)<<2)>>2]=-h;g[G+((n|2)<<2)>>2]=-j;if(a[b+49>>0]|0){if(!o){H=c[d+12>>2]|0;g[H+(n<<2)>>2]=j*L-h*N;g[H+((n|1)<<2)>>2]=f*N-j*R;g[H+((n|2)<<2)>>2]=h*R-f*L;g[x+(n<<2)>>2]=-(j*C-h*E);g[x+((n|1)<<2)>>2]=-(f*E-j*J);g[x+((n|2)<<2)>>2]=-(h*J-f*C)}}else{Y=j*D-h*B;Z=f*B-j*z;_=h*z-f*D;H=c[d+12>>2]|0;g[H+(n<<2)>>2]=q*Y;g[H+((n|1)<<2)>>2]=q*Z;g[H+((n|2)<<2)>>2]=q*_;g[x+(n<<2)>>2]=p*Y;g[x+((n|1)<<2)>>2]=p*Z;g[x+((n|2)<<2)>>2]=p*_}G=+g[b+184>>2]==+g[b+188>>2];g[w+(n<<2)>>2]=0.0;o=(c[d+36>>2]|0)+(n<<2)|0;g[o>>2]=0.0;H=(c[d+40>>2]|0)+(n<<2)|0;g[H>>2]=0.0;p=+g[((v&512|0)==0?d+4|0:b+232|0)>>2];if(!(V&G|$)){if(v&1)g[(c[d+32>>2]|0)+(n<<2)>>2]=+g[b+212>>2];q=+g[b+1100>>2];y=+g[b+1080>>2];z=+g[b+184>>2];t=+g[b+188>>2];s=p*+g[d>>2];a:do if(!(z>t))if(!(z==t)){if(q/s<0.0){do if(y>=z){if(!(z-q/s>y))break;s=(z-y)/(q/s);break a}while(0);s=y<z?0.0:1.0;break}if(q/s>0.0){do if(y<=t){if(!(t-q/s<y))break;s=(t-y)/(q/s);break a}while(0);s=y>t?0.0:1.0}else s=0.0}else s=0.0;else s=1.0;while(0);g[w+(n<<2)>>2]=+g[w+(n<<2)>>2]-k*s*q;g[o>>2]=+g[o>>2]- +g[b+1104>>2]*+g[d>>2];g[H>>2]=+g[b+1104>>2]*+g[d>>2]+ +g[H>>2]}if(V){g[w+(n<<2)>>2]=+g[w+(n<<2)>>2]+r*p*+g[d>>2];if(v&256)g[(c[d+32>>2]|0)+(n<<2)>>2]=+g[b+244>>2];do if(!G)if((u|0)==1){g[o>>2]=-3.4028234663852886e+38;g[H>>2]=0.0;break}else{g[o>>2]=0.0;g[H>>2]=3.4028234663852886e+38;break}else{g[o>>2]=-3.4028234663852886e+38;g[H>>2]=3.4028234663852886e+38}while(0);_=1.0- +g[b+240>>2];p=+P(+_);do if(!(_!=_|0.0!=0.0|_==0.0)){k=k*(f*+g[l+312>>2]+h*+g[l+316>>2]+j*+g[l+320>>2]-(f*+g[m+312>>2]+h*+g[m+316>>2]+j*+g[m+320>>2]));if((u|0)==1){if(!(k<0.0))break;if(!(+g[w+(n<<2)>>2]<-(p*k)))break;g[w+(n<<2)>>2]=-(p*k);break}else{if(!(k>0.0))break;if(!(+g[w+(n<<2)>>2]>-(p*k)))break;g[w+(n<<2)>>2]=-(p*k);break}}while(0);g[w+(n<<2)>>2]=+g[b+232>>2]*+g[w+(n<<2)>>2];m=5}else m=5}if(!(a[b+297>>0]|0))if(!(a[b+1112>>0]|0)){i=e;return}else{n=0;o=0;l=0;k=0.0}else{k=+g[b+1088>>2];n=1;o=(a[b+1112>>0]|0)==0;l=k>0.0?1:2}m=aa(c[d+24>>2]|0,m)|0;$=c[d+12>>2]|0;g[$+(m<<2)>>2]=f;g[$+(m+1<<2)>>2]=h;g[$+(m+2<<2)>>2]=j;g[x+(m<<2)>>2]=-f;g[x+(m+1<<2)>>2]=-h;g[x+(m+2<<2)>>2]=-j;p=+g[b+192>>2];q=+g[b+196>>2];r=+g[((v&2048|0)==0?d+4|0:b+248|0)>>2];if(!(n&p==q|o)){if(!(v&4)){y=q;A=p}else{g[(c[d+32>>2]|0)+(m<<2)>>2]=+g[b+228>>2];y=+g[b+196>>2];A=+g[b+192>>2]}z=+g[b+1084>>2];s=+g[b+1116>>2];t=r*+g[d>>2];b:do if(!(A>y))if(!(A==y)){if(s/t<0.0){do if(z>=A){if(!(A-s/t>z))break;t=(A-z)/(s/t);break b}while(0);t=z<A?0.0:1.0;break}if(s/t>0.0){do if(z<=y){if(!(y-s/t<z))break;t=(y-z)/(s/t);break b}while(0);t=z>y?0.0:1.0}else t=0.0}else t=0.0;else t=1.0;while(0);g[w+(m<<2)>>2]=t*s;g[(c[d+36>>2]|0)+(m<<2)>>2]=-(+g[b+1120>>2]*+g[d>>2]);g[(c[d+40>>2]|0)+(m<<2)>>2]=+g[b+1120>>2]*+g[d>>2]}if(!n){i=e;return}g[w+(m<<2)>>2]=+g[w+(m<<2)>>2]+k*r*+g[d>>2];if(v&1024)g[(c[d+32>>2]|0)+(m<<2)>>2]=+g[b+260>>2];do if(!(p==q)){n=(c[d+36>>2]|0)+(m<<2)|0;if((l|0)==1){g[n>>2]=0.0;g[(c[d+40>>2]|0)+(m<<2)>>2]=3.4028234663852886e+38;break}else{g[n>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(m<<2)>>2]=0.0;break}}else{g[(c[d+36>>2]|0)+(m<<2)>>2]=-3.4028234663852886e+38;g[(c[d+40>>2]|0)+(m<<2)>>2]=3.4028234663852886e+38}while(0);_=1.0- +g[b+256>>2];k=+P(+_);do if(!(_!=_|0.0!=0.0|_==0.0)){V=c[b+28>>2]|0;$=c[b+32>>2]|0;f=f*+g[V+328>>2]+h*+g[V+332>>2]+j*+g[V+336>>2]-(f*+g[$+328>>2]+h*+g[$+332>>2]+j*+g[$+336>>2]);if((l|0)==1){if(!(f<0.0))break;if(!(+g[w+(m<<2)>>2]<-(k*f)))break;g[w+(m<<2)>>2]=-(k*f);break}else{if(!(f>0.0))break;if(!(+g[w+(m<<2)>>2]>-(k*f)))break;g[w+(m<<2)>>2]=-(k*f);break}}while(0);g[w+(m<<2)>>2]=+g[b+248>>2]*+g[w+(m<<2)>>2];i=e;return}function Sr(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;if((b|0)==3){if((e|0)<1){g[a+212>>2]=d;c[a+300>>2]=c[a+300>>2]|1;i=f;return}if((e|0)!=3){i=f;return}g[a+228>>2]=d;c[a+300>>2]=c[a+300>>2]|4;i=f;return}else if((b|0)==4){if((e|0)<1){g[a+244>>2]=d;c[a+300>>2]=c[a+300>>2]|256;i=f;return}if((e|0)<3){g[a+276>>2]=d;c[a+300>>2]=c[a+300>>2]|16;i=f;return}if((e|0)==3){g[a+260>>2]=d;c[a+300>>2]=c[a+300>>2]|1024;i=f;return}if((e|0)>=6){i=f;return}g[a+292>>2]=d;c[a+300>>2]=c[a+300>>2]|64;i=f;return}else if((b|0)==2){if((e|0)<1){g[a+232>>2]=d;c[a+300>>2]=c[a+300>>2]|512;i=f;return}if((e|0)<3){g[a+264>>2]=d;c[a+300>>2]=c[a+300>>2]|32;i=f;return}if((e|0)==3){g[a+248>>2]=d;c[a+300>>2]=c[a+300>>2]|2048;i=f;return}if((e|0)>=6){i=f;return}g[a+280>>2]=d;c[a+300>>2]=c[a+300>>2]|128;i=f;return}else{i=f;return}}function Tr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0;d=i;do if((b|0)==4){if((c|0)<1){e=+g[a+244>>2];break}if((c|0)<3){e=+g[a+276>>2];break}if((c|0)==3){e=+g[a+260>>2];break}if((c|0)<6)e=+g[a+292>>2];else e=3.4028234663852886e+38}else if((b|0)==3){if((c|0)<1){e=+g[a+212>>2];break}if((c|0)==3)e=+g[a+228>>2];else e=3.4028234663852886e+38}else if((b|0)==2){if((c|0)<1){e=+g[a+232>>2];break}if((c|0)<3){e=+g[a+264>>2];break}if((c|0)==3){e=+g[a+248>>2];break}if((c|0)<6)e=+g[a+280>>2];else e=3.4028234663852886e+38}else e=3.4028234663852886e+38;while(0);i=d;return+e}function Ur(a){a=a|0;return}function Vr(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Wr(a){a=a|0;return 204}function Xr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0;f=i;Zr(a,b,e)|0;g[b+52>>2]=+g[a+52>>2];g[b+56>>2]=+g[a+56>>2];g[b+60>>2]=+g[a+60>>2];g[b+64>>2]=+g[a+64>>2];g[b+68>>2]=+g[a+68>>2];g[b+72>>2]=+g[a+72>>2];g[b+76>>2]=+g[a+76>>2];g[b+80>>2]=+g[a+80>>2];g[b+84>>2]=+g[a+84>>2];g[b+88>>2]=+g[a+88>>2];g[b+92>>2]=+g[a+92>>2];g[b+96>>2]=+g[a+96>>2];g[b+100>>2]=+g[a+100>>2];g[b+104>>2]=+g[a+104>>2];g[b+108>>2]=+g[a+108>>2];g[b+112>>2]=+g[a+112>>2];g[b+116>>2]=+g[a+116>>2];g[b+120>>2]=+g[a+120>>2];g[b+124>>2]=+g[a+124>>2];g[b+128>>2]=+g[a+128>>2];g[b+132>>2]=+g[a+132>>2];g[b+136>>2]=+g[a+136>>2];g[b+140>>2]=+g[a+140>>2];g[b+144>>2]=+g[a+144>>2];g[b+148>>2]=+g[a+148>>2];g[b+152>>2]=+g[a+152>>2];g[b+156>>2]=+g[a+156>>2];g[b+160>>2]=+g[a+160>>2];g[b+164>>2]=+g[a+164>>2];g[b+168>>2]=+g[a+168>>2];g[b+172>>2]=+g[a+172>>2];g[b+176>>2]=+g[a+176>>2];g[b+180>>2]=+g[a+188>>2];g[b+184>>2]=+g[a+184>>2];g[b+188>>2]=+g[a+196>>2];g[b+192>>2]=+g[a+192>>2];c[b+196>>2]=d[a+180>>0];c[b+200>>2]=d[a+49>>0];i=f;return 4352}function Yr(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+32|0;c[b+4>>2]=d;c[b>>2]=64;c[b+8>>2]=-1;c[b+12>>2]=-1;g[b+16>>2]=3.4028234663852886e+38;a[b+20>>0]=1;a[b+21>>0]=0;c[b+24>>2]=-1;c[b+28>>2]=e;if((a[5024]|0)==0?(Ya(5024)|0)!=0:0){c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;lr(4408,0.0,0,0,f+16|0);bb(5024)}c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;mr(4408,0.0,f);c[b+32>>2]=4408;g[b+36>>2]=0.0;g[b+40>>2]=.30000001192092896;c[b+44>>2]=0;i=f;return}function Zr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,h=0,j=0;f=i;c[b>>2]=gc[c[(c[e>>2]|0)+28>>2]&31](e,c[a+28>>2]|0)|0;c[b+4>>2]=gc[c[(c[e>>2]|0)+28>>2]&31](e,c[a+32>>2]|0)|0;h=gc[c[(c[e>>2]|0)+40>>2]&31](e,a)|0;j=gc[c[(c[e>>2]|0)+28>>2]&31](e,h)|0;c[b+8>>2]=j;if(j)Nb[c[(c[e>>2]|0)+48>>2]&127](e,h);c[b+12>>2]=c[a+4>>2];c[b+24>>2]=d[a+21>>0];c[b+40>>2]=c[a+24>>2];g[b+44>>2]=+g[a+16>>2];c[b+48>>2]=d[a+20>>0];c[b+20>>2]=c[a+12>>2];c[b+16>>2]=c[a+8>>2];g[b+28>>2]=+g[a+36>>2];g[b+32>>2]=+g[a+40>>2];c[b+36>>2]=0;h=c[a+28>>2]|0;if((c[h+488>>2]|0)>0){e=0;do{if((c[(c[h+496>>2]|0)+(e<<2)>>2]|0)==(a|0)){c[b+36>>2]=1;h=c[a+28>>2]|0}e=e+1|0}while((e|0)<(c[h+488>>2]|0))}h=c[a+32>>2]|0;if((c[h+488>>2]|0)>0)e=0;else{i=f;return 4376}do{if((c[(c[h+496>>2]|0)+(e<<2)>>2]|0)==(a|0)){c[b+36>>2]=1;h=c[a+32>>2]|0}e=e+1|0}while((e|0)<(c[h+488>>2]|0));i=f;return 4376}function _r(d,f,h,j,k,l){d=d|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0.0,p=0.0,q=0.0;m=i;c[d>>2]=5216;b[d+4>>1]=-2;b[d+6>>1]=-1;c[d+92>>2]=k;c[d+96>>2]=0;a[d+100>>0]=0;c[d+104>>2]=0;c[d+108>>2]=0;if(!k){c[5004]=(c[5004]|0)+1;k=fF(95)|0;if((k|0)!=0?(c[(k+19&-16)+ -4>>2]=k,(k+19&-16|0)!=0):0){Yz(k+19&-16);k=k+19&-16}else k=0;c[d+92>>2]=k;a[d+100>>0]=1}if(!l){c[5004]=(c[5004]|0)+1;l=fF(43)|0;if((l|0)!=0?(n=l+19&-16,c[n+ -4>>2]=l,(l+19&-16|0)!=0):0){c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[(l+19&-16)>>2]=5280;a[n+20>>0]=1;c[n+16>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;n=l+19&-16}else n=0;c[d+112>>2]=n;c[5004]=(c[5004]|0)+1;n=fF(215)|0;if((n|0)!=0?(c[(n+19&-16)+ -4>>2]=n,(n+19&-16|0)!=0):0){Zx(n+19&-16,c[d+112>>2]|0);n=n+19&-16}else n=0;c[d+108>>2]=n;a[n+193>>0]=1}c[d+8>>2]=c[f+0>>2];c[d+12>>2]=c[f+4>>2];c[d+16>>2]=c[f+8>>2];c[d+20>>2]=c[f+12>>2];c[d+24>>2]=c[h+0>>2];c[d+28>>2]=c[h+4>>2];c[d+32>>2]=c[h+8>>2];c[d+36>>2]=c[h+12>>2];q=+(e[d+6>>1]|0);p=q/(+g[d+28>>2]- +g[d+12>>2]);o=q/(+g[d+32>>2]- +g[d+16>>2]);g[d+40>>2]=q/(+g[d+24>>2]- +g[d+8>>2]);g[d+44>>2]=p;g[d+48>>2]=o;g[d+52>>2]=0.0;f=(j&65535)+1&65535;c[5004]=(c[5004]|0)+1;h=fF(f<<6|19)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}if(f){n=h+(f<<6)|0;l=h;do{c[l>>2]=0;c[l+8>>2]=0;l=l+64|0}while((l|0)!=(n|0))}c[d+60>>2]=h;b[d+58>>1]=(j&65535)+1;b[d+56>>1]=0;b[d+64>>1]=1;if(f>>>0>1){j=1;n=1;do{b[h+(j<<6)+48>>1]=j+1;n=n+1<<16>>16;j=n&65535}while(j>>>0<f>>>0)}b[h+(f+ -1<<6)+48>>1]=0;c[5004]=(c[5004]|0)+1;j=fF((f<<3|3)+16|0)|0;if(j){c[(j+19&-16)+ -4>>2]=j;c[d+80>>2]=j+19&-16;if(!(j+19&-16))j=0;else j=j+19&-16}else{c[d+80>>2]=0;j=0}c[d+68>>2]=j;c[5004]=(c[5004]|0)+1;j=fF((f<<3|3)+16|0)|0;if(j){c[(j+19&-16)+ -4>>2]=j;c[d+84>>2]=j+19&-16;if(!(j+19&-16))j=0;else j=j+19&-16}else{c[d+84>>2]=0;j=0}c[d+72>>2]=j;c[5004]=(c[5004]|0)+1;j=fF((f<<3|3)+16|0)|0;if(j){c[(j+19&-16)+ -4>>2]=j;c[d+88>>2]=j+19&-16;if(!(j+19&-16))j=0;else j=j+19&-16}else{c[d+88>>2]=0;j=0}c[d+76>>2]=j;c[c[d+60>>2]>>2]=0;k=c[d+60>>2]|0;b[k+48>>1]=0;b[k+54>>1]=1;l=c[d+68>>2]|0;b[l>>1]=0;b[l+2>>1]=0;b[l+4>>1]=b[d+6>>1]|0;b[l+6>>1]=0;b[k+50>>1]=0;b[k+56>>1]=1;l=c[d+72>>2]|0;b[l>>1]=0;b[l+2>>1]=0;b[l+4>>1]=b[d+6>>1]|0;b[l+6>>1]=0;b[k+52>>1]=0;b[k+58>>1]=1;k=c[d+76>>2]|0;b[k>>1]=0;b[k+2>>1]=0;b[k+4>>1]=b[d+6>>1]|0;b[k+6>>1]=0;c[d>>2]=5040;i=m;return}function $r(a){a=a|0;var b=0;b=i;ss(a);i=b;return}function as(a){a=a|0;var b=0;b=i;ss(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function bs(a,d,f,h,j,k,l,m,n){a=a|0;d=d|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;o=i;i=i+16|0;ps(a,o+6|0,+g[d>>2],+g[d+4>>2],+g[d+8>>2],0);ps(a,o,+g[f>>2],+g[f+4>>2],+g[f+8>>2],1);p=b[a+64>>1]|0;q=c[a+60>>2]|0;b[a+64>>1]=b[q+((p&65535)<<6)+48>>1]|0;b[a+56>>1]=(b[a+56>>1]|0)+1<<16>>16;c[q+((p&65535)<<6)+12>>2]=p&65535;c[q+((p&65535)<<6)>>2]=j;b[q+((p&65535)<<6)+4>>1]=k;b[q+((p&65535)<<6)+6>>1]=l;c[q+((p&65535)<<6)+8>>2]=n;u=(e[a+56>>1]|0)<<1;v=(u&65534)+ -1|0;s=(c[a+60>>2]|0)+54|0;b[s>>1]=(e[s>>1]|0)+2;s=c[a+68>>2]|0;r=e[s+(v<<2)>>1]|e[s+(v<<2)+2>>1]<<16;b[s+((u&65534|1)<<2)>>1]=r;b[s+((u&65534|1)<<2)+2>>1]=r>>>16;s=c[a+68>>2]|0;b[s+(v<<2)>>1]=b[o+6>>1]|0;b[s+(v<<2)+2>>1]=p;b[s+((u&65534)<<2)>>1]=b[o>>1]|0;b[s+((u&65534)<<2)+2>>1]=p;b[q+((p&65535)<<6)+48>>1]=v;b[q+((p&65535)<<6)+54>>1]=u;s=(c[a+60>>2]|0)+56|0;b[s>>1]=(e[s>>1]|0)+2;s=c[a+72>>2]|0;r=e[s+(v<<2)>>1]|e[s+(v<<2)+2>>1]<<16;b[s+((u&65534|1)<<2)>>1]=r;b[s+((u&65534|1)<<2)+2>>1]=r>>>16;s=c[a+72>>2]|0;b[s+(v<<2)>>1]=b[o+8>>1]|0;b[s+(v<<2)+2>>1]=p;b[s+((u&65534)<<2)>>1]=b[o+2>>1]|0;b[s+((u&65534)<<2)+2>>1]=p;b[q+((p&65535)<<6)+50>>1]=v;b[q+((p&65535)<<6)+56>>1]=u;s=(c[a+60>>2]|0)+58|0;b[s>>1]=(e[s>>1]|0)+2;s=c[a+76>>2]|0;r=e[s+(v<<2)>>1]|e[s+(v<<2)+2>>1]<<16;b[s+((u&65534|1)<<2)>>1]=r;b[s+((u&65534|1)<<2)+2>>1]=r>>>16;s=c[a+76>>2]|0;b[s+(v<<2)>>1]=b[o+10>>1]|0;b[s+(v<<2)+2>>1]=p;b[s+((u&65534)<<2)>>1]=b[o+4>>1]|0;b[s+((u&65534)<<2)+2>>1]=p;b[q+((p&65535)<<6)+52>>1]=v;b[q+((p&65535)<<6)+58>>1]=u;u=c[a+68>>2]|0;v=e[q+((p&65535)<<6)+48>>1]|0;s=c[a+60>>2]|0;r=b[u+(v+ -1<<2)>>1]|0;if((e[u+(v<<2)>>1]|0)<(r&65535)){n=s+((e[u+(v<<2)+2>>1]|0)<<6)+48|0;t=u+(v<<2)|0;u=u+(v+ -1<<2)|0;while(1){v=e[u+2>>1]|0;if(!(r&1)){v=s+(v<<6)+48|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}else{v=s+(v<<6)+54|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}b[n>>1]=(b[n>>1]|0)+ -1<<16>>16;r=e[t>>1]|e[t+2>>1]<<16;v=e[u>>1]|e[u+2>>1]<<16;b[t>>1]=v;b[t+2>>1]=v>>>16;b[u>>1]=r;b[u+2>>1]=r>>>16;t=t+ -4|0;u=u+ -4|0;r=b[u>>1]|0;if((e[t>>1]|0)>=(r&65535))break;s=c[a+60>>2]|0}n=c[a+68>>2]|0}else n=u;r=e[q+((p&65535)<<6)+54>>1]|0;u=n+(r<<2)|0;t=n+(r+ -1<<2)|0;s=b[t>>1]|0;a:do if((e[u>>1]|0)<(s&65535)){v=c[a+60>>2]|0;n=v+((e[n+(r<<2)+2>>1]|0)<<6)+54|0;r=v;while(1){v=e[t+2>>1]|0;if(!(s&1)){v=r+(v<<6)+48|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}else{v=r+(v<<6)+54|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}b[n>>1]=(b[n>>1]|0)+ -1<<16>>16;s=e[u>>1]|e[u+2>>1]<<16;v=e[t>>1]|e[t+2>>1]<<16;b[u>>1]=v;b[u+2>>1]=v>>>16;b[t>>1]=s;b[t+2>>1]=s>>>16;u=u+ -4|0;t=t+ -4|0;s=b[t>>1]|0;if((e[u>>1]|0)>=(s&65535))break a;r=c[a+60>>2]|0}}while(0);v=c[a+72>>2]|0;u=e[q+((p&65535)<<6)+50>>1]|0;s=c[a+60>>2]|0;r=b[v+(u+ -1<<2)>>1]|0;if((e[v+(u<<2)>>1]|0)<(r&65535)){n=s+((e[v+(u<<2)+2>>1]|0)<<6)+50|0;t=v+(u<<2)|0;u=v+(u+ -1<<2)|0;while(1){v=e[u+2>>1]|0;if(!(r&1)){v=s+(v<<6)+50|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}else{v=s+(v<<6)+56|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}b[n>>1]=(b[n>>1]|0)+ -1<<16>>16;r=e[t>>1]|e[t+2>>1]<<16;v=e[u>>1]|e[u+2>>1]<<16;b[t>>1]=v;b[t+2>>1]=v>>>16;b[u>>1]=r;b[u+2>>1]=r>>>16;t=t+ -4|0;u=u+ -4|0;r=b[u>>1]|0;if((e[t>>1]|0)>=(r&65535))break;s=c[a+60>>2]|0}v=c[a+72>>2]|0}n=e[q+((p&65535)<<6)+56>>1]|0;u=v+(n<<2)|0;t=v+(n+ -1<<2)|0;r=b[t>>1]|0;b:do if((e[u>>1]|0)<(r&65535)){s=c[a+60>>2]|0;n=s+((e[v+(n<<2)+2>>1]|0)<<6)+56|0;while(1){v=e[t+2>>1]|0;if(!(r&1)){v=s+(v<<6)+50|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}else{v=s+(v<<6)+56|0;b[v>>1]=(b[v>>1]|0)+1<<16>>16}b[n>>1]=(b[n>>1]|0)+ -1<<16>>16;r=e[u>>1]|e[u+2>>1]<<16;v=e[t>>1]|e[t+2>>1]<<16;b[u>>1]=v;b[u+2>>1]=v>>>16;b[t>>1]=r;b[t+2>>1]=r>>>16;u=u+ -4|0;t=t+ -4|0;r=b[t>>1]|0;if((e[u>>1]|0)>=(r&65535))break b;s=c[a+60>>2]|0}}while(0);qs(a,2,b[q+((p&65535)<<6)+52>>1]|0);rs(a,2,b[q+((p&65535)<<6)+58>>1]|0,m);q=c[a+60>>2]|0;a=c[a+108>>2]|0;if(!a){v=q+((p&65535)<<6)|0;i=o;return v|0}c[q+((p&65535)<<6)+60>>2]=pc[c[(c[a>>2]|0)+8>>2]&3](a,d,f,h,j,k,l,m,0)|0;v=q+((p&65535)<<6)|0;i=o;return v|0}function cs(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=i;h=c[a+108>>2]|0;if(h)rc[c[(c[h>>2]|0)+12>>2]&127](h,c[d+60>>2]|0,f);h=c[d+12>>2]|0;d=c[a+60>>2]|0;r=c[a+92>>2]|0;if(!(Pb[c[(c[r>>2]|0)+56>>2]&127](r)|0)){r=c[a+92>>2]|0;rc[c[(c[r>>2]|0)+16>>2]&127](r,d+((h&65535)<<6)|0,f)}f=e[a+56>>1]|0;j=c[a+60>>2]|0;b[j+54>>1]=(e[j+54>>1]|0)+65534;b[j+56>>1]=(e[j+56>>1]|0)+65534;b[j+58>>1]=(e[j+58>>1]|0)+65534;j=0;do{l=a+(j<<2)+68|0;k=c[l>>2]|0;o=e[d+((h&65535)<<6)+(j<<1)+54>>1]|0;b[k+(o<<2)>>1]=b[a+6>>1]|0;p=b[k+(o+1<<2)+2>>1]|0;if(!(p<<16>>16))o=k;else{m=(c[a+60>>2]|0)+((e[k+(o<<2)+2>>1]|0)<<6)+(j<<1)+54|0;n=k+(o<<2)|0;o=k+(o+1<<2)|0;while(1){r=b[o>>1]|0;if((e[n>>1]|0)<(r&65535))break;q=c[a+60>>2]|0;p=p&65535;if(!(r&1)){r=q+(p<<6)+(j<<1)+48|0;b[r>>1]=(b[r>>1]|0)+ -1<<16>>16}else{r=q+(p<<6)+(j<<1)+54|0;b[r>>1]=(b[r>>1]|0)+ -1<<16>>16}b[m>>1]=(b[m>>1]|0)+1<<16>>16;p=e[n>>1]|e[n+2>>1]<<16;r=e[o>>1]|e[o+2>>1]<<16;b[n>>1]=r;b[n+2>>1]=r>>>16;b[o>>1]=p;b[o+2>>1]=p>>>16;p=b[o+6>>1]|0;if(!(p<<16>>16))break;else{n=n+4|0;o=o+4|0}}o=c[l>>2]|0}p=e[d+((h&65535)<<6)+(j<<1)+48>>1]|0;b[k+(p<<2)>>1]=b[a+6>>1]|0;n=b[o+(p+1<<2)+2>>1]|0;a:do if(n<<16>>16){l=(c[a+60>>2]|0)+((e[o+(p<<2)+2>>1]|0)<<6)+(j<<1)+48|0;m=o+(p<<2)|0;o=o+(p+1<<2)|0;while(1){p=b[o>>1]|0;if((e[m>>1]|0)<(p&65535))break a;q=c[a+60>>2]|0;n=n&65535;if(!(p&1)){r=q+(n<<6)+(j<<1)+48|0;b[r>>1]=(b[r>>1]|0)+ -1<<16>>16}else{r=q+(n<<6)+(j<<1)+54|0;b[r>>1]=(b[r>>1]|0)+ -1<<16>>16}b[l>>1]=(b[l>>1]|0)+1<<16>>16;n=e[m>>1]|e[m+2>>1]<<16;r=e[o>>1]|e[o+2>>1]<<16;b[m>>1]=r;b[m+2>>1]=r>>>16;b[o>>1]=n;b[o+2>>1]=n>>>16;n=b[o+6>>1]|0;if(!(n<<16>>16))break;else{m=m+4|0;o=o+4|0}}}while(0);b[k+((f<<1)+ -1<<2)+2>>1]=0;b[k+((f<<1)+ -1<<2)>>1]=b[a+6>>1]|0;j=j+1|0}while((j|0)!=3);b[(c[a+60>>2]|0)+((h&65535)<<6)+48>>1]=b[a+64>>1]|0;b[a+64>>1]=h;b[a+56>>1]=(b[a+56>>1]|0)+ -1<<16>>16;i=g;return}function ds(a,d,f,h,j){a=a|0;d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;k=i;i=i+16|0;c[d+16>>2]=c[f+0>>2];c[d+20>>2]=c[f+4>>2];c[d+24>>2]=c[f+8>>2];c[d+28>>2]=c[f+12>>2];c[d+32>>2]=c[h+0>>2];c[d+36>>2]=c[h+4>>2];c[d+40>>2]=c[h+8>>2];c[d+44>>2]=c[h+12>>2];q=c[a+60>>2]|0;r=c[d+12>>2]&65535;ps(a,k+6|0,+g[f>>2],+g[f+4>>2],+g[f+8>>2],0);ps(a,k,+g[h>>2],+g[h+4>>2],+g[h+8>>2],1);y=0;do{z=b[q+(r<<6)+(y<<1)+48>>1]|0;w=b[q+(r<<6)+(y<<1)+54>>1]|0;F=b[k+6+(y<<1)>>1]|0;A=a+(y<<2)+68|0;I=c[A>>2]|0;H=(F&65535)-(e[I+((z&65535)<<2)>>1]|0)|0;G=b[k+(y<<1)>>1]|0;x=(G&65535)-(e[I+((w&65535)<<2)>>1]|0)|0;b[I+((z&65535)<<2)>>1]=F;b[I+((w&65535)<<2)>>1]=G;if((H|0)<0)qs(a,y,z);a:do if((x|0)>0?(v=c[A>>2]|0,s=c[a+60>>2]|0,t=e[v+((w&65535)<<2)+2>>1]|0,u=b[v+((w&65535)+1<<2)+2>>1]|0,u<<16>>16!=0):0){B=1<<y&3;C=s+(t<<6)+(y<<1)+54|0;I=u;D=v+((w&65535)<<2)|0;E=v+((w&65535)+1<<2)|0;while(1){F=b[E>>1]|0;if((e[D>>1]|0)<(F&65535))break a;G=c[a+60>>2]|0;I=I&65535;if(!(F&1)){if(((((e[s+(t<<6)+(B<<1)+54>>1]|0)>=(e[G+(I<<6)+(B<<1)+48>>1]|0)?(e[G+(I<<6)+(B<<1)+54>>1]|0)>=(e[s+(t<<6)+(B<<1)+48>>1]|0):0)?(e[s+(t<<6)+((1<<B&3)<<1)+54>>1]|0)>=(e[G+(I<<6)+((1<<B&3)<<1)+48>>1]|0):0)?(e[G+(I<<6)+((1<<B&3)<<1)+54>>1]|0)>=(e[s+(t<<6)+((1<<B&3)<<1)+48>>1]|0):0)?(m=c[a+92>>2]|0,n=G+((e[D+2>>1]|0)<<6)|0,Yb[c[(c[m>>2]|0)+8>>2]&31](m,n,G+(I<<6)|0)|0,m=c[a+96>>2]|0,(m|0)!=0):0)Yb[c[(c[m>>2]|0)+8>>2]&31](m,n,G+(I<<6)|0)|0;I=G+(I<<6)+(y<<1)+48|0;b[I>>1]=(b[I>>1]|0)+ -1<<16>>16}else{I=G+(I<<6)+(y<<1)+54|0;b[I>>1]=(b[I>>1]|0)+ -1<<16>>16}b[C>>1]=(b[C>>1]|0)+1<<16>>16;I=e[D>>1]|e[D+2>>1]<<16;G=e[E>>1]|e[E+2>>1]<<16;b[D>>1]=G;b[D+2>>1]=G>>>16;b[E>>1]=I;b[E+2>>1]=I>>>16;I=b[E+6>>1]|0;if(!(I<<16>>16))break;else{D=D+4|0;E=E+4|0}}}while(0);b:do if((H|0)>0?(o=c[A>>2]|0,p=b[o+((z&65535)+1<<2)+2>>1]|0,p<<16>>16!=0):0){B=(c[a+60>>2]|0)+((e[o+((z&65535)<<2)+2>>1]|0)<<6)+(y<<1)+48|0;C=1<<y&3;E=p;A=o+((z&65535)<<2)|0;z=o+((z&65535)+1<<2)|0;while(1){F=b[z>>1]|0;if((e[A>>1]|0)<(F&65535))break b;D=c[a+60>>2]|0;E=E&65535;if(!(F&1)){I=D+(E<<6)+(y<<1)+48|0;b[I>>1]=(b[I>>1]|0)+ -1<<16>>16}else{F=e[A+2>>1]|0;if(((((e[D+(F<<6)+(C<<1)+54>>1]|0)>=(e[D+(E<<6)+(C<<1)+48>>1]|0)?(e[D+(E<<6)+(C<<1)+54>>1]|0)>=(e[D+(F<<6)+(C<<1)+48>>1]|0):0)?(e[D+(F<<6)+((1<<C&3)<<1)+54>>1]|0)>=(e[D+(E<<6)+((1<<C&3)<<1)+48>>1]|0):0)?(e[D+(E<<6)+((1<<C&3)<<1)+54>>1]|0)>=(e[D+(F<<6)+((1<<C&3)<<1)+48>>1]|0):0)?(l=c[a+92>>2]|0,Tb[c[(c[l>>2]|0)+12>>2]&31](l,D+(F<<6)|0,D+(E<<6)|0,j)|0,l=c[a+96>>2]|0,(l|0)!=0):0)Tb[c[(c[l>>2]|0)+12>>2]&31](l,D+(F<<6)|0,D+(E<<6)|0,j)|0;I=D+(E<<6)+(y<<1)+54|0;b[I>>1]=(b[I>>1]|0)+ -1<<16>>16}b[B>>1]=(b[B>>1]|0)+1<<16>>16;E=e[A>>1]|e[A+2>>1]<<16;I=e[z>>1]|e[z+2>>1]<<16;b[A>>1]=I;b[A+2>>1]=I>>>16;b[z>>1]=E;b[z+2>>1]=E>>>16;E=b[z+6>>1]|0;if(!(E<<16>>16))break;else{A=A+4|0;z=z+4|0}}}while(0);if((x|0)<0)rs(a,y,w,j);y=y+1|0}while((y|0)!=3);l=c[a+108>>2]|0;if(!l){i=k;return}Jb[c[(c[l>>2]|0)+16>>2]&31](l,c[d+60>>2]|0,f,h,j);i=k;return}function es(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=i;c[d+0>>2]=c[b+16>>2];c[d+4>>2]=c[b+20>>2];c[d+8>>2]=c[b+24>>2];c[d+12>>2]=c[b+28>>2];c[e+0>>2]=c[b+32>>2];c[e+4>>2]=c[b+36>>2];c[e+8>>2]=c[b+40>>2];c[e+12>>2]=c[b+44>>2];i=a;return}function fs(a,d,f,g,h,j){a=a|0;d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;k=i;l=c[a+108>>2]|0;if(l){Zb[c[(c[l>>2]|0)+24>>2]&7](l,d,f,g,h,j);i=k;return}l=b[a+56>>1]|0;if((l&65535)<<1>>>0<=1){i=k;return}h=1;j=2;while(1){f=c[a+68>>2]|0;if(b[f+(h<<2)>>1]&1){gc[c[(c[g>>2]|0)+8>>2]&31](g,(c[a+60>>2]|0)+((e[f+(h<<2)+2>>1]|0)<<6)|0)|0;l=b[a+56>>1]|0}h=j&65535;if(h>>>0>=((l&65535)<<1|1)>>>0)break;j=j+1<<16>>16}i=k;return}function gs(a,d,f,h){a=a|0;d=d|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;j=i;k=c[a+108>>2]|0;if(k){vc[c[(c[k>>2]|0)+28>>2]&127](k,d,f,h);i=j;return}m=b[a+56>>1]|0;if((m&65535)<<1>>>0<=1){i=j;return}n=1;k=2;while(1){o=c[a+68>>2]|0;if(b[o+(n<<2)>>1]&1){l=c[a+60>>2]|0;n=e[o+(n<<2)+2>>1]|0;if(!(+g[d>>2]>+g[l+(n<<6)+32>>2])?!(+g[f>>2]<+g[l+(n<<6)+16>>2]):0)o=1;else o=0;if(!(!(+g[d+8>>2]>+g[l+(n<<6)+40>>2])?!(+g[f+8>>2]<+g[l+(n<<6)+24>>2]):0))o=0;if(!(+g[d+4>>2]>+g[l+(n<<6)+36>>2])?!(+g[f+4>>2]<+g[l+(n<<6)+20>>2]|o^1):0){gc[c[(c[h>>2]|0)+8>>2]&31](h,l+(n<<6)|0)|0;m=b[a+56>>1]|0}}n=k&65535;if(n>>>0>=((m&65535)<<1|1)>>>0)break;k=k+1<<16>>16}i=j;return}function hs(a,b){a=a|0;b=b|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+32|0;r=c[a+92>>2]|0;if(!(Pb[c[(c[r>>2]|0)+56>>2]&127](r)|0)){i=f;return}d=c[a+92>>2]|0;d=Pb[c[(c[d>>2]|0)+28>>2]&127](d)|0;g=c[d+4>>2]|0;if((g|0)>1){os(d,0,g+ -1|0);g=c[d+4>>2]|0}o=g-(c[a+104>>2]|0)|0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;ns(d,o,f+16|0);c[a+104>>2]=0;o=c[d+4>>2]|0;if((o|0)>0){h=0;p=0;m=0;g=0;while(1){j=c[d+12>>2]|0;k=j+(g<<4)|0;n=c[k>>2]|0;j=j+(g<<4)+4|0;l=c[j>>2]|0;if((n|0)==(h|0))if((l|0)==(p|0)){l=p;n=h;h=12}else{n=h;h=8}else h=8;a:do if((h|0)==8){h=0;q=n+54|0;r=n+48|0;p=0;do{if((e[q+(p<<1)>>1]|0)<(e[l+48+(p<<1)>>1]|0)){h=12;break a}if((e[l+54+(p<<1)>>1]|0)<(e[r+(p<<1)>>1]|0)){h=12;break a}p=p+1|0}while((p|0)<3)}while(0);if((h|0)==12){m=c[a+92>>2]|0;rc[c[(c[m>>2]|0)+32>>2]&127](m,k,b);c[k>>2]=0;c[j>>2]=0;m=(c[a+104>>2]|0)+1|0;c[a+104>>2]=m;c[3808]=(c[3808]|0)+ -1;o=c[d+4>>2]|0}g=g+1|0;if((g|0)>=(o|0))break;else{h=n;p=l}}if((o|0)>1){os(d,0,o+ -1|0);m=c[a+104>>2]|0;o=c[d+4>>2]|0}}else m=0;r=o-m|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;ns(d,r,f);c[a+104>>2]=0;i=f;return}function is(a){a=a|0;return c[a+92>>2]|0}function js(a){a=a|0;return c[a+92>>2]|0}function ks(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[b+0>>2]=c[a+8>>2];c[b+4>>2]=c[a+12>>2];c[b+8>>2]=c[a+16>>2];c[b+12>>2]=c[a+20>>2];c[d+0>>2]=c[a+24>>2];c[d+4>>2]=c[a+28>>2];c[d+8>>2]=c[a+32>>2];c[d+12>>2]=c[a+36>>2];i=e;return}function ls(a,d){a=a|0;d=d|0;var e=0,f=0,g=0;d=i;if(b[a+56>>1]|0){i=d;return}b[a+64>>1]=1;f=b[a+58>>1]|0;e=c[a+60>>2]|0;if((f&65535)>1){f=1;g=1;while(1){b[e+(f<<6)+48>>1]=f+1;g=g+1<<16>>16;f=b[a+58>>1]|0;if((g&65535)<(f&65535))f=g&65535;else break}}b[e+((f&65535)+ -1<<6)+48>>1]=0;i=d;return}function ms(a){a=a|0;return}function ns(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[b+4>>2]|0;if(!((g|0)<=(d|0)&(g|0)<(d|0))){c[b+4>>2]=d;i=f;return}if((c[b+8>>2]|0)<(d|0)){if(!d){h=0;j=g}else{c[5004]=(c[5004]|0)+1;h=fF((d<<4|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+4>>2]|0}if((j|0)>0){k=0;do{l=c[b+12>>2]|0;c[h+(k<<4)>>2]=c[l+(k<<4)>>2];c[h+(k<<4)+4>>2]=c[l+(k<<4)+4>>2];c[h+(k<<4)+8>>2]=c[l+(k<<4)+8>>2];c[h+(k<<4)+12>>2]=c[l+(k<<4)+12>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[b+12>>2]|0;if(j){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=h;c[b+8>>2]=d;h=b+12|0}else h=b+12|0;do{l=c[h>>2]|0;c[l+(g<<4)>>2]=c[e>>2];c[l+(g<<4)+4>>2]=c[e+4>>2];c[l+(g<<4)+8>>2]=c[e+8>>2];c[l+(g<<4)+12>>2]=c[e+12>>2];g=g+1|0}while((g|0)!=(d|0));c[b+4>>2]=d;i=f;return}function os(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;e=i;while(1){j=(b+d|0)/2|0;g=c[a+12>>2]|0;h=c[g+(j<<4)>>2]|0;f=c[g+(j<<4)+4>>2]|0;j=c[g+(j<<4)+8>>2]|0;k=b;o=d;while(1){a:while(1){m=c[g+(k<<4)>>2]|0;if(!m)q=-1;else q=c[m+12>>2]|0;if(!h)n=-1;else n=c[h+12>>2]|0;l=c[g+(k<<4)+4>>2]|0;if(!l)r=-1;else r=c[l+12>>2]|0;if(!f)p=-1;else p=c[f+12>>2]|0;do if((q|0)<=(n|0)){n=(m|0)==(h|0)&(r|0)>(p|0);if(n|(m|0)==(h|0)^1)if(n)break;else break a;if((l|0)!=(f|0))break a;if((c[g+(k<<4)+8>>2]|0)>>>0<=j>>>0)break a}while(0);k=k+1|0}b:do if(!h)while(1){p=c[g+(o<<4)>>2]|0;if(!p)r=-1;else r=c[p+12>>2]|0;if(!f)s=-1;else s=c[f+12>>2]|0;n=c[g+(o<<4)+4>>2]|0;if(!n)q=-1;else q=c[n+12>>2]|0;do if((r|0)>=-1){q=(p|0)==0&(s|0)>(q|0);if(q|(p|0)==0^1)if(q)break;else break b;if((f|0)!=(n|0))break b;if(j>>>0<=(c[g+(o<<4)+8>>2]|0)>>>0)break b}while(0);o=o+ -1|0}else{n=c[h+12>>2]|0;q=o;while(1){p=c[g+(q<<4)>>2]|0;if(!p)t=-1;else t=c[p+12>>2]|0;if(!f)r=-1;else r=c[f+12>>2]|0;o=c[g+(q<<4)+4>>2]|0;if(!o)s=-1;else s=c[o+12>>2]|0;do if((n|0)<=(t|0)){r=(h|0)==(p|0)&(r|0)>(s|0);if(r|(h|0)==(p|0)^1)if(r)break;else{o=q;break b}if((f|0)!=(o|0)){o=q;break b}if(j>>>0<=(c[g+(q<<4)+8>>2]|0)>>>0){o=q;break b}}while(0);q=q+ -1|0}}while(0);if((k|0)<=(o|0)){t=g+(k<<4)|0;r=c[g+(k<<4)+8>>2]|0;s=c[g+(k<<4)+12>>2]|0;q=g+(o<<4)|0;c[t+0>>2]=c[q+0>>2];c[t+4>>2]=c[q+4>>2];c[t+8>>2]=c[q+8>>2];c[t+12>>2]=c[q+12>>2];t=c[a+12>>2]|0;c[t+(o<<4)>>2]=m;c[t+(o<<4)+4>>2]=l;c[t+(o<<4)+8>>2]=r;c[t+(o<<4)+12>>2]=s;k=k+1|0;o=o+ -1|0}if((k|0)>(o|0))break;g=c[a+12>>2]|0}if((o|0)>(b|0))os(a,b,o);if((k|0)<(d|0))b=k;else break}i=e;return}function ps(a,c,d,e,f,h){a=a|0;c=c|0;d=+d;e=+e;f=+f;h=h|0;var j=0,k=0;j=i;d=(d- +g[a+8>>2])*+g[a+40>>2];e=(e- +g[a+12>>2])*+g[a+44>>2];f=(f- +g[a+16>>2])*+g[a+48>>2];do if(!(d<=0.0)){k=b[a+6>>1]|0;if(!(d>=+(k&65535|0))){k=b[a+4>>1]&(~~d&65535)&65535|h;break}else{k=b[a+4>>1]&k&65535|h;break}}else k=h;while(0);b[c>>1]=k;do if(!(e<=0.0)){k=b[a+6>>1]|0;if(!(e>=+(k&65535|0))){k=b[a+4>>1]&(~~e&65535)&65535|h;break}else{k=b[a+4>>1]&k&65535|h;break}}else k=h;while(0);b[c+2>>1]=k;if(f<=0.0){h=h&65535;k=c+4|0;b[k>>1]=h;i=j;return}k=b[a+6>>1]|0;if(!(f>=+(k&65535|0))){h=b[a+4>>1]&(~~f&65535)&65535|h;h=h&65535;k=c+4|0;b[k>>1]=h;i=j;return}else{h=b[a+4>>1]&k&65535|h;h=h&65535;k=c+4|0;b[k>>1]=h;i=j;return}}function qs(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=i;p=c[a+(d<<2)+68>>2]|0;g=c[a+60>>2]|0;h=e[p+((f&65535)<<2)+2>>1]|0;n=b[p+((f&65535)+ -1<<2)>>1]|0;if((e[p+((f&65535)<<2)>>1]|0)>=(n&65535)){i=l;return}m=g;o=p+((f&65535)<<2)|0;p=p+((f&65535)+ -1<<2)|0;while(1){f=e[p+2>>1]|0;if(!(n&1)){f=m+(f<<6)+(d<<1)+48|0;b[f>>1]=(b[f>>1]|0)+1<<16>>16}else{if(((((e[g+(h<<6)+((1<<d&3)<<1)+54>>1]|0)>=(e[m+(f<<6)+((1<<d&3)<<1)+48>>1]|0)?(e[m+(f<<6)+((1<<d&3)<<1)+54>>1]|0)>=(e[g+(h<<6)+((1<<d&3)<<1)+48>>1]|0):0)?(e[g+(h<<6)+((1<<(1<<d&3)&3)<<1)+54>>1]|0)>=(e[m+(f<<6)+((1<<(1<<d&3)&3)<<1)+48>>1]|0):0)?(e[m+(f<<6)+((1<<(1<<d&3)&3)<<1)+54>>1]|0)>=(e[g+(h<<6)+((1<<(1<<d&3)&3)<<1)+48>>1]|0):0)?(j=c[a+92>>2]|0,k=m+(f<<6)|0,Yb[c[(c[j>>2]|0)+8>>2]&31](j,g+(h<<6)|0,k)|0,j=c[a+96>>2]|0,(j|0)!=0):0)Yb[c[(c[j>>2]|0)+8>>2]&31](j,g+(h<<6)|0,k)|0;f=m+(f<<6)+(d<<1)+54|0;b[f>>1]=(b[f>>1]|0)+1<<16>>16}b[g+(h<<6)+(d<<1)+48>>1]=(b[g+(h<<6)+(d<<1)+48>>1]|0)+ -1<<16>>16;n=e[o>>1]|e[o+2>>1]<<16;f=e[p>>1]|e[p+2>>1]<<16;b[o>>1]=f;b[o+2>>1]=f>>>16;b[p>>1]=n;b[p+2>>1]=n>>>16;o=o+ -4|0;p=p+ -4|0;n=b[p>>1]|0;if((e[o>>1]|0)>=(n&65535))break;m=c[a+60>>2]|0}i=l;return}function rs(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;q=c[a+(d<<2)+68>>2]|0;o=b[q+((f&65535)+ -1<<2)>>1]|0;if((e[q+((f&65535)<<2)>>1]|0)>=(o&65535)){i=j;return}n=c[a+60>>2]|0;h=n+((e[q+((f&65535)<<2)+2>>1]|0)<<6)+(d<<1)+54|0;p=q+((f&65535)<<2)|0;q=q+((f&65535)+ -1<<2)|0;while(1){f=e[q+2>>1]|0;if(!(o&1)){o=e[p+2>>1]|0;if(((((e[n+(o<<6)+((1<<d&3)<<1)+54>>1]|0)>=(e[n+(f<<6)+((1<<d&3)<<1)+48>>1]|0)?(e[n+(f<<6)+((1<<d&3)<<1)+54>>1]|0)>=(e[n+(o<<6)+((1<<d&3)<<1)+48>>1]|0):0)?(e[n+(o<<6)+((1<<(1<<d&3)&3)<<1)+54>>1]|0)>=(e[n+(f<<6)+((1<<(1<<d&3)&3)<<1)+48>>1]|0):0)?(e[n+(f<<6)+((1<<(1<<d&3)&3)<<1)+54>>1]|0)>=(e[n+(o<<6)+((1<<(1<<d&3)&3)<<1)+48>>1]|0):0)?(l=c[a+92>>2]|0,m=n+(o<<6)|0,k=n+(f<<6)|0,Tb[c[(c[l>>2]|0)+12>>2]&31](l,m,k,g)|0,l=c[a+96>>2]|0,(l|0)!=0):0)Tb[c[(c[l>>2]|0)+12>>2]&31](l,m,k,g)|0;f=n+(f<<6)+(d<<1)+48|0;b[f>>1]=(b[f>>1]|0)+1<<16>>16}else{f=n+(f<<6)+(d<<1)+54|0;b[f>>1]=(b[f>>1]|0)+1<<16>>16}b[h>>1]=(b[h>>1]|0)+ -1<<16>>16;o=e[p>>1]|e[p+2>>1]<<16;f=e[q>>1]|e[q+2>>1]<<16;b[p>>1]=f;b[p+2>>1]=f>>>16;b[q>>1]=o;b[q+2>>1]=o>>>16;p=p+ -4|0;q=q+ -4|0;o=b[q>>1]|0;if((e[p>>1]|0)>=(o&65535))break;n=c[a+60>>2]|0}i=j;return}function ss(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=5216;if(c[b+108>>2]|0){e=c[b+112>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+112>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+108>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+108>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}}e=c[b+88>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+84>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+80>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+60>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}if(!(a[b+100>>0]|0)){i=d;return}e=c[b+92>>2]|0;Lb[c[c[e>>2]>>2]&511](e);b=c[b+92>>2]|0;if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function ts(a){a=a|0;var b=0;b=i;ss(a);i=b;return}function us(a){a=a|0;var b=0;b=i;ss(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function vs(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=5280;e=c[b+16>>2]|0;if(e){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=d;return}function ws(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=5280;e=c[b+16>>2]|0;if((e|0)!=0?(a[b+20>>0]|0)!=0:0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}gF(b);i=d;return}function xs(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function ys(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return 0}function zs(a,b,c){a=a|0;b=b|0;c=c|0;return}function As(a){a=a|0;return c[a+16>>2]|0}function Bs(a){a=a|0;return c[a+16>>2]|0}function Cs(a){a=a|0;return a+4|0}function Ds(a,b,c){a=a|0;b=b|0;c=c|0;return}function Es(a){a=a|0;return 0}function Fs(a,b,c){a=a|0;b=b|0;c=c|0;return}function Gs(a,b){a=a|0;b=b|0;return}function Hs(a,b,c){a=a|0;b=b|0;c=c|0;return}function Is(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Js(a){a=a|0;return 1}function Ks(a,b){a=a|0;b=b|0;return}function Ls(a,b){a=a|0;b=b|0;return}function Ms(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;f=i;k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=k+ +g[a+28>>2];m=k+ +g[a+32>>2];k=k+ +g[a+36>>2];w=+P(+(+g[b>>2]));v=+P(+(+g[b+4>>2]));u=+P(+(+g[b+8>>2]));s=+P(+(+g[b+16>>2]));r=+P(+(+g[b+20>>2]));q=+P(+(+g[b+24>>2]));n=+P(+(+g[b+32>>2]));l=+P(+(+g[b+36>>2]));j=+P(+(+g[b+40>>2]));t=+g[b+48>>2];p=+g[b+52>>2];h=+g[b+56>>2];g[d>>2]=t-(o*w+m*v+k*u);g[d+4>>2]=p-(o*s+m*r+k*q);g[d+8>>2]=h-(o*n+m*l+k*j);g[d+12>>2]=0.0;g[e>>2]=o*w+m*v+k*u+t;g[e+4>>2]=o*s+m*r+k*q+p;g[e+8>>2]=o*n+m*l+k*j+h;g[e+12>>2]=0.0;i=f;return}function Ns(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;k=+g[a+28>>2];h=+g[a+32>>2];l=+g[a+36>>2];j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);l=(l+ +$b[c[(c[a>>2]|0)+48>>2]&15](a))*2.0;g[d>>2]=b/12.0*((h+f)*2.0*(h+f)*2.0+l*l);g[d+4>>2]=b/12.0*((k+j)*2.0*(k+j)*2.0+l*l);g[d+8>>2]=b/12.0*((k+j)*2.0*(k+j)*2.0+(h+f)*2.0*(h+f)*2.0);g[d+12>>2]=0.0;i=e;return}function Os(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(!d){i=b;return}Lb[c[c[d>>2]>>2]&511](d);a=c[a+52>>2]|0;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Ps(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(d){Lb[c[c[d>>2]>>2]&511](d);d=c[a+52>>2]|0;if(d){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}if(!a){i=b;return}}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Qs(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0;d=i;m=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=(m+ +g[a+28>>2])/+g[a+12>>2];l=(j+ +g[a+32>>2])/+g[a+16>>2];h=(e+ +g[a+36>>2])/+g[a+20>>2];n=+P(+(+g[b>>2]));k=+P(+(+g[b+4>>2]));f=+P(+(+g[b+8>>2]));g[a+12>>2]=n;g[a+16>>2]=k;g[a+20>>2]=f;g[a+24>>2]=0.0;g[a+28>>2]=o*n-m;g[a+32>>2]=l*k-j;g[a+36>>2]=h*f-e;g[a+40>>2]=0.0;i=d;return}function Rs(a){a=a|0;return 5608}function Ss(a,b){a=a|0;b=+b;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=j+ +g[a+28>>2];f=f+ +g[a+32>>2];k=k+ +g[a+36>>2];g[a+44>>2]=b;h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);b=k- +$b[c[(c[a>>2]|0)+48>>2]&15](a);g[a+28>>2]=j-h;g[a+32>>2]=f-e;g[a+36>>2]=b;g[a+40>>2]=0.0;i=d;return}function Ts(a){a=a|0;return+(+g[a+44>>2])}function Us(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;k=+g[b+28>>2];l=+g[b+32>>2];f=+g[b+36>>2];j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);h=+$b[c[(c[b>>2]|0)+48>>2]&15](b);f=f+ +$b[c[(c[b>>2]|0)+48>>2]&15](b);h=+g[d+4>>2]>=0.0?l+h:-(l+h);f=+g[d+8>>2]>=0.0?f:-f;g[a>>2]=+g[d>>2]>=0.0?k+j:-(k+j);g[a+4>>2]=h;g[a+8>>2]=f;g[a+12>>2]=0.0;i=e;return}function Vs(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0;f=+g[b+28>>2];e=+g[b+32>>2];e=+g[c+4>>2]>=0.0?e:-e;d=+g[b+36>>2];d=+g[c+8>>2]>=0.0?d:-d;g[a>>2]=+g[c>>2]>=0.0?f:-f;g[a+4>>2]=e;g[a+8>>2]=d;g[a+12>>2]=0.0;return}function Ws(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0;e=i;if((d|0)<=0){i=e;return}f=0;do{k=+g[a+28>>2];j=+g[a+32>>2];j=+g[b+(f<<4)+4>>2]>=0.0?j:-j;h=+g[a+36>>2];h=+g[b+(f<<4)+8>>2]>=0.0?h:-h;g[c+(f<<4)>>2]=+g[b+(f<<4)>>2]>=0.0?k:-k;g[c+(f<<4)+4>>2]=j;g[c+(f<<4)+8>>2]=h;g[c+(f<<4)+12>>2]=0.0;f=f+1|0}while((f|0)!=(d|0));i=e;return}function Xs(a){a=a|0;return 6}function Ys(a,b,c){a=a|0;b=b|0;c=c|0;a=i;switch(b|0){case 5:{g[c>>2]=0.0;g[c+4>>2]=0.0;g[c+8>>2]=-1.0;g[c+12>>2]=0.0;i=a;return};case 3:{g[c>>2]=0.0;g[c+4>>2]=-1.0;g[c+8>>2]=0.0;g[c+12>>2]=0.0;i=a;return};case 2:{g[c>>2]=0.0;g[c+4>>2]=1.0;g[c+8>>2]=0.0;g[c+12>>2]=0.0;i=a;return};case 4:{g[c>>2]=0.0;g[c+4>>2]=0.0;g[c+8>>2]=1.0;g[c+12>>2]=0.0;i=a;return};case 0:{g[c>>2]=1.0;g[c+4>>2]=0.0;g[c+8>>2]=0.0;g[c+12>>2]=0.0;i=a;return};case 1:{g[c>>2]=-1.0;g[c+4>>2]=0.0;g[c+8>>2]=0.0;g[c+12>>2]=0.0;i=a;return};default:{i=a;return}}}function Zs(a){a=a|0;return 8}function _s(a){a=a|0;return 12}function $s(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;do switch(b|0){case 9:{g=4;b=6;break};case 3:{g=2;break};case 8:{g=4;b=5;break};case 1:{g=0;b=2;break};case 0:{g=0;b=1;break};case 11:{g=6;b=7;break};case 2:{g=1;b=3;break};case 7:{g=3;break};case 10:{g=5;b=7;break};case 6:{g=2;break};case 5:{g=1;break};case 4:{g=0;break};default:{g=0;b=0}}while(0);rc[c[(c[a>>2]|0)+108>>2]&127](a,g,d);rc[c[(c[a>>2]|0)+108>>2]&127](a,b,e);i=f;return}function at(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;l=+g[a+28>>2];j=+g[a+32>>2];f=+g[a+36>>2];k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=f+ +$b[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=+(b&1^1|0)*(l+k)- +(b&1|0)*(l+k);g[d+4>>2]=+(b>>>1&1^1|0)*(j+h)- +(b>>>1&1|0)*(j+h);g[d+8>>2]=+(b>>>2&1^1|0)*f- +(b>>>2&1|0)*f;g[d+12>>2]=0.0;i=e;return}function bt(a){a=a|0;return 6}function ct(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0;f=i;i=i+48|0;rc[c[(c[a>>2]|0)+124>>2]&127](a,f+32|0,e);k=+g[f+32>>2];j=+g[f+36>>2];h=+g[f+40>>2];g[b>>2]=k;g[b+4>>2]=j;g[b+8>>2]=h;g[b+12>>2]=0.0;e=c[(c[a>>2]|0)+64>>2]|0;g[f>>2]=-k;g[f+4>>2]=-j;g[f+8>>2]=-h;g[f+12>>2]=0.0;rc[e&127](f+16|0,a,f);c[d+0>>2]=c[f+16>>2];c[d+4>>2]=c[f+20>>2];c[d+8>>2]=c[f+24>>2];c[d+12>>2]=c[f+28>>2];i=f;return}function dt(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;d=i;k=+g[a+28>>2];e=+g[a+32>>2];j=+g[a+36>>2];l=+g[b>>2];if((((l<=k+c?l>=-k-c:0)?(h=+g[b+4>>2],h<=e+c):0)?h>=-e-c:0)?(f=+g[b+8>>2],f<=j+c):0)b=f>=-j-c;else b=0;i=d;return b|0}function et(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0;d=i;e=+g[a+28>>2];f=+g[a+32>>2];h=+g[a+36>>2];switch(c|0){case 1:{g[b>>2]=-1.0;g[b+4>>2]=0.0;g[b+8>>2]=0.0;g[b+12>>2]=-e;i=d;return};case 0:{g[b>>2]=1.0;g[b+4>>2]=0.0;g[b+8>>2]=0.0;g[b+12>>2]=-e;i=d;return};case 4:{g[b>>2]=0.0;g[b+4>>2]=0.0;g[b+8>>2]=1.0;g[b+12>>2]=-h;i=d;return};case 3:{g[b>>2]=0.0;g[b+4>>2]=-1.0;g[b+8>>2]=0.0;g[b+12>>2]=-f;i=d;return};case 2:{g[b>>2]=0.0;g[b+4>>2]=1.0;g[b+8>>2]=0.0;g[b+12>>2]=-f;i=d;return};case 5:{g[b>>2]=0.0;g[b+4>>2]=0.0;g[b+8>>2]=-1.0;g[b+12>>2]=-h;i=d;return};default:{i=d;return}}}function ft(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0;h=i;i=i+48|0;c[b+8>>2]=0;g[b+12>>2]=0.0;c[b>>2]=17416;c[b+48>>2]=d;c[b+4>>2]=21;if(Pb[c[(c[d>>2]|0)+40>>2]&127](d)|0)rc[c[(c[d>>2]|0)+48>>2]&127](d,b+16|0,b+32|0);else{c[h+32>>2]=0;c[h+36>>2]=0;c[h+40>>2]=0;c[h+44>>2]=0;g[h+32>>2]=1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+32>>2]=+g[h+16>>2]+ +g[b+12>>2];g[h+32>>2]=-1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h+0>>2];c[h+20>>2]=c[h+4>>2];c[h+24>>2]=c[h+8>>2];c[h+28>>2]=c[h+12>>2];g[b+16>>2]=+g[h+16>>2]- +g[b+12>>2];c[h+32>>2]=0;c[h+36>>2]=0;c[h+40>>2]=0;c[h+44>>2]=0;g[h+36>>2]=1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+36>>2]=+g[h+20>>2]+ +g[b+12>>2];g[h+36>>2]=-1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h+0>>2];c[h+20>>2]=c[h+4>>2];c[h+24>>2]=c[h+8>>2];c[h+28>>2]=c[h+12>>2];g[b+20>>2]=+g[h+20>>2]- +g[b+12>>2];c[h+32>>2]=0;c[h+36>>2]=0;c[h+40>>2]=0;c[h+44>>2]=0;g[h+40>>2]=1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h+16|0,b,h+32|0);g[b+40>>2]=+g[h+24>>2]+ +g[b+12>>2];g[h+40>>2]=-1.0;rc[c[(c[b>>2]|0)+68>>2]&127](h,b,h+32|0);c[h+16>>2]=c[h+0>>2];c[h+20>>2]=c[h+4>>2];c[h+24>>2]=c[h+8>>2];c[h+28>>2]=c[h+12>>2];g[b+24>>2]=+g[h+24>>2]- +g[b+12>>2]}c[b>>2]=5624;c[b+52>>2]=0;c[b+56>>2]=0;a[b+60>>0]=e&1;a[b+61>>0]=0;c[b+4>>2]=21;if(!f){i=h;return}c[5004]=(c[5004]|0)+1;e=fF(191)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}c[e+52>>2]=282;a[e+60>>0]=0;a[e+80>>0]=1;c[e+76>>2]=0;c[e+68>>2]=0;c[e+72>>2]=0;a[e+100>>0]=1;c[e+96>>2]=0;c[e+88>>2]=0;c[e+92>>2]=0;a[e+120>>0]=1;c[e+116>>2]=0;c[e+108>>2]=0;c[e+112>>2]=0;a[e+140>>0]=1;c[e+136>>2]=0;c[e+128>>2]=0;c[e+132>>2]=0;c[e+144>>2]=0;a[e+164>>0]=1;c[e+160>>2]=0;c[e+152>>2]=0;c[e+156>>2]=0;c[e+168>>2]=0;g[e+4>>2]=-3.4028234663852886e+38;g[e+8>>2]=-3.4028234663852886e+38;g[e+12>>2]=-3.4028234663852886e+38;g[e+16>>2]=0.0;g[e+20>>2]=3.4028234663852886e+38;g[e+24>>2]=3.4028234663852886e+38;g[e+28>>2]=3.4028234663852886e+38;g[e+32>>2]=0.0;c[e>>2]=14880;c[b+52>>2]=e;Pz(e,c[b+48>>2]|0,(a[b+60>>0]|0)!=0,b+16|0,b+32|0);a[b+61>>0]=1;i=h;return}function gt(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=5624;if(a[b+61>>0]|0){e=c[b+52>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+52>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}if(!b){i=d;return}}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function ht(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=5624;if(!(a[b+61>>0]|0)){i=d;return}e=c[b+52>>2]|0;Lb[c[c[e>>2]>>2]&511](e);b=c[b+52>>2]|0;if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function it(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0;k=i;i=i+80|0;w=c[d+48>>2]|0;c[k>>2]=5808;c[k+4>>2]=w;c[k+8>>2]=f;f=c[d+52>>2]|0;if(!(a[f+60>>0]|0)){n=c[f+56>>2]|0;a:do if((n|0)>0){m=0;l=c[f+96>>2]|0;d=1;while(1){if(!(+g[h>>2]>+g[l+16>>2])?!(+g[j>>2]<+g[l>>2]):0)r=1;else r=0;if(!(!(+g[h+8>>2]>+g[l+24>>2])?!(+g[j+8>>2]<+g[l+8>>2]):0))r=0;if(!(+g[h+4>>2]>+g[l+20>>2])?!(+g[j+4>>2]<+g[l+4>>2]):0){q=c[l+32>>2]|0;if((q|0)==-1&r){rc[c[(c[k>>2]|0)+8>>2]&127](k,c[l+36>>2]|0,c[l+40>>2]|0);n=c[f+56>>2]|0;o=44}else{p=(q|0)==-1;o=43}}else{q=c[l+32>>2]|0;p=(q|0)==-1;r=0;o=43}if((o|0)==43){o=0;if(r|p)o=44;else{m=q+m|0;l=l+(q<<6)|0}}if((o|0)==44){m=m+1|0;l=l+64|0}if((m|0)>=(n|0))break a;d=d+1|0}}else d=0;while(0);if((c[4028]|0)>=(d|0)){i=k;return}c[4028]=d;i=k;return}z=+g[h>>2];D=+g[h+4>>2];H=+g[h+8>>2];G=+g[f+4>>2];z=z<G?G:z;C=+g[f+8>>2];D=D<C?C:D;y=+g[f+12>>2];H=H<y?y:H;I=+g[f+20>>2];E=+g[f+24>>2];A=+g[f+28>>2];F=+g[f+36>>2];B=+g[f+40>>2];x=+g[f+44>>2];h=~~(((I<z?I:z)-G)*F)&65534;b[k+66>>1]=h;l=~~(((E<D?E:D)-C)*B)&65534;b[k+68>>1]=l;d=~~(((A<H?A:H)-y)*x)&65534;b[k+70>>1]=d;H=+g[j>>2];D=+g[j+4>>2];z=+g[j+8>>2];H=H<G?G:H;D=D<C?C:D;z=z<y?y:z;m=(~~(((I<H?I:H)-G)*F+1.0)&65535|1)&65535;b[k+60>>1]=m;n=(~~(((E<D?E:D)-C)*B+1.0)&65535|1)&65535;b[k+62>>1]=n;j=(~~(((A<z?A:z)-y)*x+1.0)&65535|1)&65535;b[k+64>>1]=j;o=c[f+144>>2]|0;if(!o){o=c[f+56>>2]|0;b:do if((o|0)>0){p=0;q=c[f+136>>2]|0;f=1;while(1){t=((m&65535)>=(e[q>>1]|0)?(h&65535)<=(e[q+6>>1]|0):0)&(d&65535)<=(e[q+10>>1]|0)&(j&65535)>=(e[q+4>>1]|0)&(l&65535)<=(e[q+8>>1]|0)&(n&65535)>=(e[q+2>>1]|0);s=q+12|0;r=c[s>>2]|0;if((r|0)>-1&t)rc[c[(c[k>>2]|0)+8>>2]&127](k,r>>21,r&2097151);if(t|(r|0)>-1){p=p+1|0;q=q+16|0}else{w=c[s>>2]|0;p=p-w|0;q=q+(0-w<<4)|0}if((p|0)>=(o|0))break b;f=f+1|0}}else f=0;while(0);if((c[4028]|0)>=(f|0)){i=k;return}c[4028]=f;i=k;return}else if((o|0)==1){if((c[f+152>>2]|0)<=0){i=k;return}o=0;do{q=c[f+160>>2]|0;if(((m&65535)>=(e[q+(o<<5)>>1]|0)?(h&65535)<=(e[q+(o<<5)+6>>1]|0):0)&(d&65535)<=(e[q+(o<<5)+10>>1]|0)&(j&65535)>=(e[q+(o<<5)+4>>1]|0)&(l&65535)<=(e[q+(o<<5)+8>>1]|0)&(n&65535)>=(e[q+(o<<5)+2>>1]|0)){p=c[q+(o<<5)+12>>2]|0;q=c[q+(o<<5)+16>>2]|0;c:do if((q|0)>0){s=p;t=(c[f+136>>2]|0)+(p<<4)|0;r=1;while(1){v=((m&65535)>=(e[t>>1]|0)?(h&65535)<=(e[t+6>>1]|0):0)&(d&65535)<=(e[t+10>>1]|0)&(j&65535)>=(e[t+4>>1]|0)&(l&65535)<=(e[t+8>>1]|0)&(n&65535)>=(e[t+2>>1]|0);u=t+12|0;w=c[u>>2]|0;if((w|0)>-1&v)rc[c[(c[k>>2]|0)+8>>2]&127](k,w>>21,w&2097151);if(v|(w|0)>-1){s=s+1|0;t=t+16|0}else{w=c[u>>2]|0;s=s-w|0;t=t+(0-w<<4)|0}if((s|0)>=(q+p|0))break c;r=r+1|0}}else r=0;while(0);if((c[4028]|0)<(r|0))c[4028]=r}o=o+1|0}while((o|0)<(c[f+152>>2]|0));i=k;return}else if((o|0)==2){NA(c[f+136>>2]|0,k,k+66|0,k+60|0);i=k;return}else{i=k;return}}function jt(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0;e=i;l=Pb[c[(c[b>>2]|0)+28>>2]&127](b)|0;k=+g[l>>2]- +g[d>>2];j=+g[l+4>>2]- +g[d+4>>2];h=+g[l+8>>2]- +g[d+8>>2];if(!(k*k+j*j+h*h>1.1920928955078125e-7)){i=e;return}hC(b,d);if((a[b+61>>0]|0)!=0?(f=c[b+52>>2]|0,Lb[c[c[f>>2]>>2]&511](f),f=c[b+52>>2]|0,(f|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[5004]=(c[5004]|0)+1;f=fF(191)|0;if(!f)f=0;else{c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}c[f+52>>2]=282;a[f+60>>0]=0;a[f+80>>0]=1;c[f+76>>2]=0;c[f+68>>2]=0;c[f+72>>2]=0;a[f+100>>0]=1;c[f+96>>2]=0;c[f+88>>2]=0;c[f+92>>2]=0;a[f+120>>0]=1;c[f+116>>2]=0;c[f+108>>2]=0;c[f+112>>2]=0;a[f+140>>0]=1;c[f+136>>2]=0;c[f+128>>2]=0;c[f+132>>2]=0;c[f+144>>2]=0;a[f+164>>0]=1;c[f+160>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+168>>2]=0;g[f+4>>2]=-3.4028234663852886e+38;g[f+8>>2]=-3.4028234663852886e+38;g[f+12>>2]=-3.4028234663852886e+38;g[f+16>>2]=0.0;g[f+20>>2]=3.4028234663852886e+38;g[f+24>>2]=3.4028234663852886e+38;g[f+28>>2]=3.4028234663852886e+38;g[f+32>>2]=0.0;c[f>>2]=14880;c[b+52>>2]=f;Pz(f,c[b+48>>2]|0,(a[b+60>>0]|0)!=0,b+16|0,b+32|0);a[b+61>>0]=1;i=e;return}function kt(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;h=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;j=gc[c[(c[d>>2]|0)+28>>2]&31](d,h)|0;c[b>>2]=j;if(j)Nb[c[(c[d>>2]|0)+48>>2]&127](d,h);c[b+4>>2]=c[a+4>>2];j=c[a+48>>2]|0;Yb[c[(c[j>>2]|0)+56>>2]&31](j,b+12|0,d)|0;g[b+52>>2]=+g[a+12>>2];do if((c[a+52>>2]|0)!=0?((Pb[c[(c[d>>2]|0)+52>>2]&127](d)|0)&1|0)==0:0){h=gc[c[(c[d>>2]|0)+24>>2]&31](d,c[a+52>>2]|0)|0;if(!h){c[b+40>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,c[a+52>>2]|0)|0;c[b+44>>2]=0;h=c[a+52>>2]|0;h=Pb[c[(c[h>>2]|0)+12>>2]&127](h)|0;h=Yb[c[(c[d>>2]|0)+16>>2]&31](d,h,1)|0;j=c[a+52>>2]|0;j=Yb[c[(c[j>>2]|0)+16>>2]&31](j,c[h+8>>2]|0,d)|0;Jb[c[(c[d>>2]|0)+20>>2]&31](d,h,j,1213612625,c[a+52>>2]|0);break}else{c[b+40>>2]=h;c[b+44>>2]=0;break}}else f=8;while(0);if((f|0)==8){c[b+40>>2]=0;c[b+44>>2]=0}if((c[a+56>>2]|0)!=0?((Pb[c[(c[d>>2]|0)+52>>2]&127](d)|0)&2|0)==0:0){f=gc[c[(c[d>>2]|0)+24>>2]&31](d,c[a+56>>2]|0)|0;if(!f){c[b+48>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,c[a+56>>2]|0)|0;h=c[a+56>>2]|0;h=Pb[c[(c[h>>2]|0)+8>>2]&127](h)|0;h=Yb[c[(c[d>>2]|0)+16>>2]&31](d,h,1)|0;j=c[a+56>>2]|0;j=Yb[c[(c[j>>2]|0)+12>>2]&31](j,c[h+8>>2]|0,d)|0;Jb[c[(c[d>>2]|0)+20>>2]&31](d,h,j,1346456916,c[a+56>>2]|0);i=e;return 5712}else{c[b+48>>2]=f;i=e;return 5712}}c[b+48>>2]=0;i=e;return 5712}function lt(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[a+52>>2]|0;if(!e){i=d;return}f=Pb[c[(c[e>>2]|0)+12>>2]&127](e)|0;f=Yb[c[(c[b>>2]|0)+16>>2]&31](b,f,1)|0;e=c[a+52>>2]|0;e=Yb[c[(c[e>>2]|0)+16>>2]&31](e,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,e,1213612625,c[a+52>>2]|0);i=d;return}function mt(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[a+56>>2]|0;if(!e){i=d;return}f=Pb[c[(c[e>>2]|0)+8>>2]&127](e)|0;f=Yb[c[(c[b>>2]|0)+16>>2]&31](b,f,1)|0;e=c[a+56>>2]|0;e=Yb[c[(c[e>>2]|0)+12>>2]&31](e,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,e,1346456916,c[a+56>>2]|0);i=d;return}function nt(a){a=a|0;return 5784}function ot(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function pt(a){a=a|0;return+(+g[a+12>>2])}function qt(a){a=a|0;return 60}function rt(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);i=e;return}function st(a){a=a|0;return}function tt(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ut(a,b,f){a=a|0;b=b|0;f=f|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0;o=i;i=i+32|0;l=c[a+4>>2]|0;fc[c[(c[l>>2]|0)+16>>2]&3](l,o+28|0,o+24|0,o+20|0,o+16|0,o+12|0,o+8|0,o+4|0,o,b);l=c[o+12>>2]|0;m=aa(c[o+8>>2]|0,f)|0;k=c[a+4>>2]|0;n=c[o>>2]|0;j=2;while(1){if((n|0)==2)q=c[l+m+(j<<2)>>2]|0;else if((n|0)==3)q=e[l+m+(j<<1)>>1]|0;else q=d[l+(j+m)>>0]|0;p=c[o+28>>2]|0;q=aa(c[o+16>>2]|0,q)|0;if(!(c[o+20>>2]|0)){s=+g[p+(q+4)>>2]*+g[k+8>>2];r=+g[p+(q+8)>>2]*+g[k+12>>2];g[a+(j<<4)+12>>2]=+g[p+q>>2]*+g[k+4>>2];g[a+(j<<4)+16>>2]=s;g[a+(j<<4)+20>>2]=r;g[a+(j<<4)+24>>2]=0.0}else{r=+h[p+(q+8)>>3]*+g[k+8>>2];s=+h[p+(q+16)>>3]*+g[k+12>>2];g[a+(j<<4)+12>>2]=+h[p+q>>3]*+g[k+4>>2];g[a+(j<<4)+16>>2]=r;g[a+(j<<4)+20>>2]=s;g[a+(j<<4)+24>>2]=0.0}if((j|0)>0)j=j+ -1|0;else break}q=c[a+8>>2]|0;vc[c[(c[q>>2]|0)+8>>2]&127](q,a+12|0,b,f);q=c[a+4>>2]|0;Nb[c[(c[q>>2]|0)+24>>2]&127](q,b);i=o;return}function vt(a){a=a|0;return}function wt(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function xt(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0;n=i;i=i+80|0;l=c[a+4>>2]|0;fc[c[(c[l>>2]|0)+16>>2]&3](l,n+28|0,n+24|0,n+20|0,n+16|0,n+12|0,n+8|0,n+4|0,n,b);l=c[n+12>>2]|0;k=aa(c[n+8>>2]|0,d)|0;f=c[a+4>>2]|0;m=(c[n+20>>2]|0)==0;j=c[n+28>>2]|0;if((c[n>>2]|0)!=3){o=c[n+16>>2]|0;p=aa(o,c[l+(k+8)>>2]|0)|0;if(m){s=+g[j+(p+4)>>2]*+g[f+8>>2];r=+g[j+(p+8)>>2]*+g[f+12>>2];g[n+64>>2]=+g[j+p>>2]*+g[f+4>>2];g[n+68>>2]=s;g[n+72>>2]=r;g[n+76>>2]=0.0;q=aa(o,c[l+(k+4)>>2]|0)|0;r=+g[j+(q+4)>>2]*+g[f+8>>2];s=+g[j+(q+8)>>2]*+g[f+12>>2];g[n+48>>2]=+g[j+q>>2]*+g[f+4>>2];g[n+52>>2]=r;g[n+56>>2]=s;g[n+60>>2]=0.0;q=aa(o,c[l+k>>2]|0)|0;s=+g[j+(q+4)>>2]*+g[f+8>>2];r=+g[j+(q+8)>>2]*+g[f+12>>2];g[n+32>>2]=+g[j+q>>2]*+g[f+4>>2];g[n+36>>2]=s;g[n+40>>2]=r;g[n+44>>2]=0.0;q=a+8|0;q=c[q>>2]|0;p=c[q>>2]|0;p=p+8|0;p=c[p>>2]|0;vc[p&127](q,n+32|0,b,d);q=c[a+4>>2]|0;p=c[q>>2]|0;p=p+24|0;p=c[p>>2]|0;Nb[p&127](q,b);i=n;return}else{r=+h[j+(p+8)>>3]*+g[f+8>>2];s=+h[j+(p+16)>>3]*+g[f+12>>2];g[n+64>>2]=+h[j+p>>3]*+g[f+4>>2];g[n+68>>2]=r;g[n+72>>2]=s;g[n+76>>2]=0.0;q=aa(o,c[l+(k+4)>>2]|0)|0;s=+h[j+(q+8)>>3]*+g[f+8>>2];r=+h[j+(q+16)>>3]*+g[f+12>>2];g[n+48>>2]=+h[j+q>>3]*+g[f+4>>2];g[n+52>>2]=s;g[n+56>>2]=r;g[n+60>>2]=0.0;q=aa(o,c[l+k>>2]|0)|0;r=+h[j+(q+8)>>3]*+g[f+8>>2];s=+h[j+(q+16)>>3]*+g[f+12>>2];g[n+32>>2]=+h[j+q>>3]*+g[f+4>>2];g[n+36>>2]=r;g[n+40>>2]=s;g[n+44>>2]=0.0;q=a+8|0;q=c[q>>2]|0;p=c[q>>2]|0;p=p+8|0;p=c[p>>2]|0;vc[p&127](q,n+32|0,b,d);q=c[a+4>>2]|0;p=c[q>>2]|0;p=p+24|0;p=c[p>>2]|0;Nb[p&127](q,b);i=n;return}}o=c[n+16>>2]|0;p=2;while(1){q=aa(o,e[l+k+(p<<1)>>1]|0)|0;if(m){r=+g[j+(q+4)>>2]*+g[f+8>>2];s=+g[j+(q+8)>>2]*+g[f+12>>2];g[n+32+(p<<4)>>2]=+g[j+q>>2]*+g[f+4>>2];g[n+32+(p<<4)+4>>2]=r;g[n+32+(p<<4)+8>>2]=s;g[n+32+(p<<4)+12>>2]=0.0}else{r=+h[j+(q+8)>>3]*+g[f+8>>2];s=+h[j+(q+16)>>3]*+g[f+12>>2];g[n+32+(p<<4)>>2]=+h[j+q>>3]*+g[f+4>>2];g[n+32+(p<<4)+4>>2]=r;g[n+32+(p<<4)+8>>2]=s;g[n+32+(p<<4)+12>>2]=0.0}if((p|0)>0)p=p+ -1|0;else break}q=a+8|0;q=c[q>>2]|0;p=c[q>>2]|0;p=p+8|0;p=c[p>>2]|0;vc[p&127](q,n+32|0,b,d);q=c[a+4>>2]|0;p=c[q>>2]|0;p=p+24|0;p=c[p>>2]|0;Nb[p&127](q,b);i=n;return}function yt(a){a=a|0;return}function zt(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function At(a,b,d){a=a|0;b=b|0;d=d|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0;n=i;i=i+80|0;m=c[a+4>>2]|0;fc[c[(c[m>>2]|0)+16>>2]&3](m,n+28|0,n+24|0,n+20|0,n+16|0,n+12|0,n+8|0,n+4|0,n,b);m=(c[n+12>>2]|0)+(aa(c[n+8>>2]|0,d)|0)|0;k=c[a+4>>2]|0;f=(c[n>>2]|0)==3;l=(c[n+20>>2]|0)==0;j=c[n+28>>2]|0;o=2;while(1){if(f)p=e[m+(o<<1)>>1]|0;else p=c[m+(o<<2)>>2]|0;p=aa(c[n+16>>2]|0,p)|0;if(l){r=+g[j+(p+4)>>2]*+g[k+8>>2];q=+g[j+(p+8)>>2]*+g[k+12>>2];g[n+32+(o<<4)>>2]=+g[j+p>>2]*+g[k+4>>2];g[n+32+(o<<4)+4>>2]=r;g[n+32+(o<<4)+8>>2]=q;g[n+32+(o<<4)+12>>2]=0.0}else{q=+h[j+(p+8)>>3]*+g[k+8>>2];r=+h[j+(p+16)>>3]*+g[k+12>>2];g[n+32+(o<<4)>>2]=+h[j+p>>3]*+g[k+4>>2];g[n+32+(o<<4)+4>>2]=q;g[n+32+(o<<4)+8>>2]=r;g[n+32+(o<<4)+12>>2]=0.0}if((o|0)>0)o=o+ -1|0;else break}p=c[a+8>>2]|0;vc[c[(c[p>>2]|0)+8>>2]&127](p,n+32|0,b,d);p=c[a+4>>2]|0;Nb[c[(c[p>>2]|0)+24>>2]&127](p,b);i=n;return}function Bt(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;e=i;i=i+32|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;f=+g[d>>2];h=+g[d+4>>2];j=+g[d+8>>2];if(f*f+h*h+j*j<9999999747378752.0e-20){f=1.0;h=0.0;j=0.0}else{q=1.0/+Q(+(f*f+h*h+j*j));f=f*q;h=h*q;j=j*q}d=c[b+52>>2]|0;m=+g[b+(((d+2|0)%3|0)<<2)+28>>2];c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;g[e+16+(d<<2)>>2]=+g[b+(d<<2)+28>>2];l=f*m;k=h*m;m=j*m;q=l+ +g[e+16>>2];n=k+ +g[e+20>>2];o=m+ +g[e+24>>2];p=+$b[c[(c[b>>2]|0)+48>>2]&15](b);q=q-f*p;n=n-h*p;p=o-j*p;o=j*p+(f*q+h*n);if(o>-999999984306749400.0){g[a>>2]=q;g[a+4>>2]=n;g[a+8>>2]=p;g[a+12>>2]=0.0}else o=-999999984306749400.0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;d=c[b+52>>2]|0;g[e+(d<<2)>>2]=-+g[b+(d<<2)+28>>2];l=l+ +g[e>>2];k=k+ +g[e+4>>2];q=m+ +g[e+8>>2];m=+$b[c[(c[b>>2]|0)+48>>2]&15](b);l=l-f*m;k=k-h*m;m=q-j*m;if(!(j*m+(f*l+h*k)>o)){i=e;return}g[a>>2]=l;g[a+4>>2]=k;g[a+8>>2]=m;g[a+12>>2]=0.0;i=e;return}function Ct(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0;f=i;i=i+32|0;k=c[a+52>>2]|0;h=+g[a+(((k+2|0)%3|0)<<2)+28>>2];if((e|0)<=0){i=f;return}j=0;while(1){m=a+(k<<2)+28|0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;g[f+16+(k<<2)>>2]=+g[m>>2];m=b+(j<<4)|0;l=b+(j<<4)+4|0;k=b+(j<<4)+8|0;u=h*+g[m>>2]+ +g[f+16>>2];s=h*+g[l>>2]+ +g[f+20>>2];q=h*+g[k>>2]+ +g[f+24>>2];w=+$b[c[(c[a>>2]|0)+48>>2]&15](a);t=+g[m>>2];r=+g[l>>2];v=+g[k>>2];if(t*(u-w*t)+r*(s-w*r)+v*(q-w*v)>-999999984306749400.0){g[d+(j<<4)>>2]=u-w*t;g[d+(j<<4)+4>>2]=s-w*r;g[d+(j<<4)+8>>2]=q-w*v;g[d+(j<<4)+12>>2]=0.0;p=+g[m>>2];o=+g[l>>2];n=+g[k>>2];q=t*(u-w*t)+r*(s-w*r)+v*(q-w*v)}else{p=t;o=r;n=v;q=-999999984306749400.0}c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;x=c[a+52>>2]|0;g[f+(x<<2)>>2]=-+g[a+(x<<2)+28>>2];p=h*p+ +g[f>>2];o=h*o+ +g[f+4>>2];r=h*n+ +g[f+8>>2];n=+$b[c[(c[a>>2]|0)+48>>2]&15](a);s=+g[m>>2];t=+g[l>>2];u=+g[k>>2];if(s*(p-n*s)+t*(o-n*t)+u*(r-n*u)>q){g[d+(j<<4)>>2]=p-n*s;g[d+(j<<4)+4>>2]=o-n*t;g[d+(j<<4)+8>>2]=r-n*u;g[d+(j<<4)+12>>2]=0.0}j=j+1|0;if((j|0)==(e|0))break;k=c[a+52>>2]|0}i=f;return}function Dt(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0;e=i;i=i+16|0;k=c[a+52>>2]|0;h=+g[a+(((k+2|0)%3|0)<<2)+28>>2];g[e>>2]=h;g[e+4>>2]=h;g[e+8>>2]=h;g[e+12>>2]=0.0;g[e+(k<<2)>>2]=+g[a+(k<<2)+28>>2]+ +g[e+(k<<2)>>2];h=(+g[e>>2]+.03999999910593033)*2.0;f=(+g[e+4>>2]+.03999999910593033)*2.0;j=(+g[e+8>>2]+.03999999910593033)*2.0;g[d>>2]=b*.0833333283662796*(f*f+j*j);g[d+4>>2]=b*.0833333283662796*(h*h+j*j);g[d+8>>2]=b*.0833333283662796*(h*h+f*f);i=e;return}function Et(a){a=a|0;return}function Ft(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Gt(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0;f=i;i=i+16|0;x=c[a+52>>2]|0;k=+g[a+(((x+2|0)%3|0)<<2)+28>>2];g[f>>2]=k;g[f+4>>2]=k;g[f+8>>2]=k;g[f+12>>2]=0.0;g[f+(x<<2)>>2]=k+ +g[a+(x<<2)+28>>2];k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);n=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=k+ +g[f>>2];g[f>>2]=k;h=h+ +g[f+4>>2];g[f+4>>2]=h;n=n+ +g[f+8>>2];u=+P(+(+g[b>>2]));t=+P(+(+g[b+4>>2]));v=+P(+(+g[b+8>>2]));q=+P(+(+g[b+16>>2]));p=+P(+(+g[b+20>>2]));r=+P(+(+g[b+24>>2]));l=+P(+(+g[b+32>>2]));j=+P(+(+g[b+36>>2]));m=+P(+(+g[b+40>>2]));w=+g[b+48>>2];s=+g[b+52>>2];o=+g[b+56>>2];g[d>>2]=w-(n*v+(u*k+t*h));g[d+4>>2]=s-(n*r+(q*k+p*h));g[d+8>>2]=o-(n*m+(l*k+j*h));g[d+12>>2]=0.0;g[e>>2]=w+(n*v+(u*k+t*h));g[e+4>>2]=s+(n*r+(q*k+p*h));g[e+8>>2]=o+(n*m+(l*k+j*h));g[e+12>>2]=0.0;i=f;return}function Ht(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0;d=i;m=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=(m+ +g[a+28>>2])/+g[a+12>>2];l=(j+ +g[a+32>>2])/+g[a+16>>2];h=(e+ +g[a+36>>2])/+g[a+20>>2];n=+P(+(+g[b>>2]));k=+P(+(+g[b+4>>2]));f=+P(+(+g[b+8>>2]));g[a+12>>2]=n;g[a+16>>2]=k;g[a+20>>2]=f;g[a+24>>2]=0.0;g[a+28>>2]=o*n-m;g[a+32>>2]=l*k-j;g[a+36>>2]=h*f-e;g[a+40>>2]=0.0;i=d;return}function It(a){a=a|0;return 6776}function Jt(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;g[a+(c[b+52>>2]<<2)>>2]=1.0;i=d;return}function Kt(a,b){a=a|0;b=+b;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=j+ +g[a+28>>2];f=f+ +g[a+32>>2];k=k+ +g[a+36>>2];g[a+44>>2]=b;h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);b=k- +$b[c[(c[a>>2]|0)+48>>2]&15](a);g[a+28>>2]=j-h;g[a+32>>2]=f-e;g[a+36>>2]=b;g[a+40>>2]=0.0;i=d;return}function Lt(a){a=a|0;return 60}function Mt(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=h;if(h)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+28>>2]=+g[a+28>>2];g[b+32>>2]=+g[a+32>>2];g[b+36>>2]=+g[a+36>>2];g[b+40>>2]=+g[a+40>>2];g[b+12>>2]=+g[a+12>>2];g[b+16>>2]=+g[a+16>>2];g[b+20>>2]=+g[a+20>>2];g[b+24>>2]=+g[a+24>>2];g[b+44>>2]=+g[a+44>>2];c[b+52>>2]=c[a+52>>2];i=e;return 6752}function Nt(a){a=a|0;return}function Ot(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Pt(a){a=a|0;return 6736}function Qt(a){a=a|0;return}function Rt(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function St(a){a=a|0;return 6720}function Tt(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0.0;e=i;i=i+80|0;f=c[c[a>>2]>>2]|0;h=c[c[a+4>>2]>>2]|0;if(!(Yb[c[(c[b>>2]|0)+24>>2]&31](b,f,h)|0)){i=e;return}j=c[f+192>>2]|0;c[e+56>>2]=0;c[e+60>>2]=j;c[e+64>>2]=f;c[e+68>>2]=f+4;c[e+72>>2]=-1;c[e+76>>2]=-1;j=c[h+192>>2]|0;c[e+32>>2]=0;c[e+36>>2]=j;c[e+40>>2]=h;c[e+44>>2]=h+4;c[e+48>>2]=-1;c[e+52>>2]=-1;j=c[a+8>>2]|0;if(!j){j=Tb[c[(c[b>>2]|0)+8>>2]&31](b,e+56|0,e+32|0,0)|0;c[a+8>>2]=j;if(!j){i=e;return}}c[e>>2]=13504;c[e+4>>2]=0;c[e+8>>2]=e+56;c[e+12>>2]=e+32;if((c[d+8>>2]|0)==1){Jb[c[(c[j>>2]|0)+8>>2]&31](j,e+56|0,e+32|0,d,e);i=e;return}k=+Xb[c[(c[j>>2]|0)+12>>2]&15](j,f,h,d,e);if(!(+g[d+12>>2]>k)){i=e;return}g[d+12>>2]=k;i=e;return}function Ut(a){a=a|0;return}function Vt(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=6808;e=c[b+20>>2]|0;if(e){if(a[b+24>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;gF(b);i=d;return}function Wt(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=6808;e=c[b+20>>2]|0;if(e){if(a[b+24>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;i=d;return}function Xt(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0,n=0,o=0.0;f=i;i=i+16|0;c[1698]=(c[1698]|0)+1;if(!(c[b+4>>2]&2))j=15720;else{j=c[d+192>>2]|0;k=+lc[c[(c[j>>2]|0)+20>>2]&1](j,.019999999552965164);g[f+4>>2]=k;j=c[e+192>>2]|0;l=+lc[c[(c[j>>2]|0)+20>>2]&1](j,.019999999552965164);g[f>>2]=l;j=k<l?f+4|0:f}l=+g[j>>2];o=+g[d+184>>2];k=+g[e+184>>2];k=o<k?o:k;m=c[b+68>>2]|0;j=c[m+8>>2]|0;if(!j){if(c[b+4>>2]&4){n=0;i=f;return n|0}c[5004]=(c[5004]|0)+1;j=fF(791)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}}else{n=c[m+12>>2]|0;c[m+12>>2]=c[n>>2];c[m+8>>2]=j+ -1;j=n}c[j>>2]=1025;c[j+116>>2]=0;a[j+120>>0]=0;n=j+124|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[n+28>>2]=0;c[j+300>>2]=0;a[j+304>>0]=0;n=j+308|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[n+28>>2]=0;c[j+484>>2]=0;a[j+488>>0]=0;n=j+492|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[n+28>>2]=0;c[j+668>>2]=0;a[j+672>>0]=0;n=j+676|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;c[n+20>>2]=0;c[n+24>>2]=0;c[n+28>>2]=0;c[j+740>>2]=d;c[j+744>>2]=e;c[j+748>>2]=0;g[j+752>>2]=l;g[j+756>>2]=k;c[j+768>>2]=c[b+12>>2];e=c[b+12>>2]|0;if((e|0)==(c[b+16>>2]|0)?(h=(e|0)==0?1:e<<1,(e|0)<(h|0)):0){if(!h)d=0;else{c[5004]=(c[5004]|0)+1;d=fF((h<<2|3)+16|0)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}e=c[b+12>>2]|0}if((e|0)>0){n=0;do{m=d+(n<<2)|0;if(m)c[m>>2]=c[(c[b+20>>2]|0)+(n<<2)>>2];n=n+1|0}while((n|0)!=(e|0))}m=c[b+20>>2]|0;if(m){if(a[b+24>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0);e=c[b+12>>2]|0}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=d;c[b+16>>2]=h}h=(c[b+20>>2]|0)+(e<<2)|0;if(h)c[h>>2]=j;c[b+12>>2]=e+1;n=j;i=f;return n|0}function Yt(a,b){a=a|0;b=b|0;var d=0,e=0;a=i;d=c[b+748>>2]|0;if((d|0)>0){e=0;do e=e+1|0;while((e|0)<(d|0))}c[b+748>>2]=0;i=a;return}function Zt(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;c[1698]=(c[1698]|0)+ -1;Nb[c[(c[a>>2]|0)+20>>2]&127](a,b);e=c[b+768>>2]|0;f=(c[a+12>>2]|0)+ -1|0;h=c[a+20>>2]|0;g=c[h+(e<<2)>>2]|0;c[h+(e<<2)>>2]=c[h+(f<<2)>>2];c[(c[a+20>>2]|0)+(f<<2)>>2]=g;c[(c[(c[a+20>>2]|0)+(e<<2)>>2]|0)+768>>2]=e;c[a+12>>2]=(c[a+12>>2]|0)+ -1;a=c[a+68>>2]|0;if(!b){i=d;return}h=c[a+16>>2]|0;if(h>>>0<=b>>>0?(h+(aa(c[a>>2]|0,c[a+4>>2]|0)|0)|0)>>>0>b>>>0:0){c[b>>2]=c[a+12>>2];c[a+12>>2]=b;c[a+8>>2]=(c[a+8>>2]|0)+1;i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function _t(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+16|0;c[f>>2]=a;c[f+4>>2]=e;e=c[a+((c[(c[b+4>>2]|0)+4>>2]|0)*144|0)+(c[(c[d+4>>2]|0)+4>>2]<<2)+72>>2]|0;e=Tb[c[(c[e>>2]|0)+8>>2]&31](e,f,b,d)|0;i=f;return e|0}function $t(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;a=i;b=c[b+204>>2]|0;if((b&4|0)==0?(e=c[d+204>>2]|0,(e&4|0)==0):0)if(!(b&3))d=1;else d=(e&3|0)==0;else d=0;i=a;return d|0}function au(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;a=i;e=c[b+216>>2]|0;if((e|0)==2|(e|0)==5?(e=c[d+216>>2]|0,(e|0)==2|(e|0)==5):0)b=0;else if(!(c[b+256>>2]|0))b=1;else b=gc[c[c[b>>2]>>2]&31](b,d)|0;i=a;return b|0}function bu(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+16|0;c[f>>2]=6920;c[f+4>>2]=d;c[f+8>>2]=a;rc[c[(c[b>>2]|0)+48>>2]&127](b,f,e);i=f;return}function cu(a){a=a|0;return}function du(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;a=c[a+64>>2]|0;e=c[a+8>>2]|0;if(e){b=c[a+12>>2]|0;c[a+12>>2]=c[b>>2];c[a+8>>2]=e+ -1;e=b;i=d;return e|0}c[5004]=(c[5004]|0)+1;b=fF(b+19|0)|0;if(!b){e=0;i=d;return e|0}c[(b+19&-16)+ -4>>2]=b;e=b+19&-16;i=d;return e|0}function eu(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;a=c[a+64>>2]|0;if(!b){i=d;return}e=c[a+16>>2]|0;if(e>>>0<=b>>>0?(e+(aa(c[a>>2]|0,c[a+4>>2]|0)|0)|0)>>>0>b>>>0:0){c[b>>2]=c[a+12>>2];c[a+12>>2]=b;c[a+8>>2]=(c[a+8>>2]|0)+1;i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function fu(a){a=a|0;return c[a+12>>2]|0}function gu(a,b){a=a|0;b=b|0;return c[(c[a+20>>2]|0)+(b<<2)>>2]|0}function hu(a){a=a|0;if(!(c[a+12>>2]|0))a=0;else a=c[a+20>>2]|0;return a|0}function iu(a){a=a|0;return c[a+68>>2]|0}function ju(a){a=a|0;return c[a+68>>2]|0}function ku(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function lu(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+8>>2]|0;rc[c[e+60>>2]&127](b,e,c[a+4>>2]|0);i=d;return 0}function mu(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function nu(a,b,d){a=a|0;b=b|0;d=d|0;c[a+16>>2]=b;c[a+24>>2]=d;return}function ou(a,b,d){a=a|0;b=b|0;d=d|0;c[a+20>>2]=b;c[a+28>>2]=d;return}function pu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0;e=i;g[b+16>>2]=+g[a+4>>2];g[b+20>>2]=+g[a+8>>2];g[b+24>>2]=+g[a+12>>2];g[b+28>>2]=+g[a+16>>2];g[b+32>>2]=+g[a+20>>2];g[b+36>>2]=+g[a+24>>2];g[b+40>>2]=+g[a+28>>2];g[b+44>>2]=+g[a+32>>2];g[b+48>>2]=+g[a+36>>2];g[b+52>>2]=+g[a+40>>2];g[b+56>>2]=+g[a+44>>2];g[b+60>>2]=+g[a+48>>2];g[b+64>>2]=+g[a+52>>2];g[b+68>>2]=+g[a+56>>2];g[b+72>>2]=+g[a+60>>2];g[b+76>>2]=+g[a+64>>2];g[b+80>>2]=+g[a+68>>2];g[b+84>>2]=+g[a+72>>2];g[b+88>>2]=+g[a+76>>2];g[b+92>>2]=+g[a+80>>2];g[b+96>>2]=+g[a+84>>2];g[b+100>>2]=+g[a+88>>2];g[b+104>>2]=+g[a+92>>2];g[b+108>>2]=+g[a+96>>2];g[b+112>>2]=+g[a+100>>2];g[b+116>>2]=+g[a+104>>2];g[b+120>>2]=+g[a+108>>2];g[b+124>>2]=+g[a+112>>2];g[b+128>>2]=+g[a+116>>2];g[b+132>>2]=+g[a+120>>2];g[b+136>>2]=+g[a+124>>2];g[b+140>>2]=+g[a+128>>2];g[b+144>>2]=+g[a+132>>2];g[b+148>>2]=+g[a+136>>2];g[b+152>>2]=+g[a+140>>2];g[b+156>>2]=+g[a+144>>2];g[b+160>>2]=+g[a+148>>2];g[b+164>>2]=+g[a+152>>2];g[b+168>>2]=+g[a+156>>2];g[b+172>>2]=+g[a+160>>2];g[b+176>>2]=+g[a+164>>2];g[b+180>>2]=+g[a+168>>2];g[b+184>>2]=+g[a+172>>2];g[b+188>>2]=+g[a+176>>2];c[b+224>>2]=c[a+180>>2];g[b+192>>2]=+g[a+184>>2];c[b>>2]=0;c[b+4>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,c[a+192>>2]|0)|0;c[b+8>>2]=0;c[b+228>>2]=c[a+204>>2];c[b+232>>2]=c[a+208>>2];c[b+236>>2]=c[a+212>>2];c[b+240>>2]=c[a+216>>2];g[b+196>>2]=+g[a+220>>2];g[b+200>>2]=+g[a+224>>2];g[b+204>>2]=+g[a+232>>2];g[b+208>>2]=+g[a+228>>2];c[b+244>>2]=c[a+236>>2];f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b+12>>2]=h;if(!h){d=a+244|0;j=+g[d>>2];d=b+212|0;g[d>>2]=j;d=a+248|0;j=+g[d>>2];d=b+216|0;g[d>>2]=j;d=a+252|0;j=+g[d>>2];d=b+220|0;g[d>>2]=j;d=a+256|0;d=c[d>>2]|0;h=b+248|0;c[h>>2]=d;i=e;return 7016}Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);d=a+244|0;j=+g[d>>2];d=b+212|0;g[d>>2]=j;d=a+248|0;j=+g[d>>2];d=b+216|0;g[d>>2]=j;d=a+252|0;j=+g[d>>2];d=b+220|0;g[d>>2]=j;d=a+256|0;d=c[d>>2]|0;h=b+248|0;c[h>>2]=d;i=e;return 7016}function qu(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;f=Pb[c[(c[a>>2]|0)+16>>2]&127](a)|0;f=Yb[c[(c[b>>2]|0)+16>>2]&31](b,f,1)|0;e=Yb[c[(c[a>>2]|0)+20>>2]&31](a,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,e,1245859651,a);i=d;return}function ru(a,b){a=a|0;b=b|0;return 1}function su(a){a=a|0;return 256}function tu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;e=i;i=i+96|0;g[e+32>>2]=1.0;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=1.0;c[e+56>>2]=0;c[e+60>>2]=0;c[e+64>>2]=0;c[e+68>>2]=0;g[e+72>>2]=1.0;n=e+76|0;c[n+0>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;c[n+12>>2]=0;c[n+16>>2]=0;vc[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);l=+g[e>>2];m=+g[e+16>>2];j=+g[e+4>>2];k=+g[e+20>>2];f=+g[e+8>>2];h=+g[e+24>>2];g[d>>2]=+Q(+((l-m)*(l-m)+(j-k)*(j-k)+(f-h)*(f-h)))*.5;g[b>>2]=(m+l)*.5;g[b+4>>2]=(k+j)*.5;g[b+8>>2]=(h+f)*.5;g[b+12>>2]=0.0;i=e;return}function uu(a,b){a=a|0;b=+b;var d=0;d=i;b=+$b[c[(c[a>>2]|0)+16>>2]&15](a)*b;i=d;return+b}function vu(a){a=a|0;var b=0,d=0.0,e=0.0,f=0.0;b=i;i=i+32|0;rc[c[(c[a>>2]|0)+12>>2]&127](a,b+8|0,b);f=+g[b+8>>2];e=+g[b+12>>2];d=+g[b+16>>2];d=+Q(+(f*f+e*e+d*d));i=b;return+(d+ +g[b>>2])}function wu(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;j=i;vc[c[(c[a>>2]|0)+8>>2]&127](a,b,f,h);r=+g[h>>2];p=+g[h+4>>2];k=+g[h+8>>2];m=+g[f>>2];q=+g[f+4>>2];l=+g[f+8>>2];s=+g[d>>2];o=+g[d+4>>2];n=+g[d+8>>2];if(s>0.0)r=r+s;else m=m+s;if(o>0.0)p=p+o;else q=q+o;if(n>0.0)k=k+n;else l=l+n;n=+g[e>>2];o=+g[e+4>>2];s=+g[e+8>>2];s=+Q(+(n*n+o*o+s*s));s=s*+$b[c[(c[a>>2]|0)+16>>2]&15](a);g[f>>2]=m;g[f+4>>2]=q;g[f+8>>2]=l;g[f+12>>2]=0.0;g[h>>2]=r;g[h+4>>2]=p;g[h+8>>2]=k;g[h+12>>2]=0.0;g[f>>2]=+g[f>>2]-s;g[f+4>>2]=+g[f+4>>2]-s;g[f+8>>2]=+g[f+8>>2]-s;g[h>>2]=s+ +g[h>>2];g[h+4>>2]=s+ +g[h+4>>2];g[h+8>>2]=s+ +g[h+8>>2];i=j;return}function xu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;g=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=g;if(g)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];i=e;return 7080}function yu(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;f=Pb[c[(c[a>>2]|0)+52>>2]&127](a)|0;f=Yb[c[(c[b>>2]|0)+16>>2]&31](b,f,1)|0;e=Yb[c[(c[a>>2]|0)+56>>2]&31](a,c[f+8>>2]|0,b)|0;Jb[c[(c[b>>2]|0)+20>>2]&31](b,f,e,1346455635,a);i=d;return}function zu(a){a=a|0;return 12}function Au(a){a=a|0;var b=0;b=i;Bu(a);gF(a);i=b;return}function Bu(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;c[b>>2]=7144;e=c[b+8>>2]|0;g=c[b+16>>2]|0;if((e|0)>0){f=0;do{h=(c[g+(f<<2)>>2]|0)+188|0;j=c[h>>2]|0;if(j){e=c[b+68>>2]|0;e=Pb[c[(c[e>>2]|0)+36>>2]&127](e)|0;rc[c[(c[e>>2]|0)+40>>2]&127](e,j,c[b+24>>2]|0);e=c[b+68>>2]|0;rc[c[(c[e>>2]|0)+12>>2]&127](e,j,c[b+24>>2]|0);c[h>>2]=0;e=c[b+8>>2]|0;g=c[b+16>>2]|0}f=f+1|0}while((f|0)<(e|0))}if(!g){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;j=b+12|0;c[j>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[g+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;j=b+12|0;c[j>>2]=0;i=d;return}function Cu(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;i=i+96|0;k=c[b+8>>2]|0;if((k|0)==(c[b+12>>2]|0)?(h=(k|0)==0?1:k<<1,(k|0)<(h|0)):0){if(!h)j=0;else{c[5004]=(c[5004]|0)+1;j=fF((h<<2|3)+16|0)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}k=c[b+8>>2]|0}if((k|0)>0){l=0;do{m=j+(l<<2)|0;if(m)c[m>>2]=c[(c[b+16>>2]|0)+(l<<2)>>2];l=l+1|0}while((l|0)!=(k|0))}l=c[b+16>>2]|0;if(l){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0);k=c[b+8>>2]|0}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=j;c[b+12>>2]=h}h=(c[b+16>>2]|0)+(k<<2)|0;if(h)c[h>>2]=d;c[b+8>>2]=k+1;c[g+32>>2]=c[d+4>>2];c[g+36>>2]=c[d+8>>2];c[g+40>>2]=c[d+12>>2];c[g+44>>2]=c[d+16>>2];c[g+48>>2]=c[d+20>>2];c[g+52>>2]=c[d+24>>2];c[g+56>>2]=c[d+28>>2];c[g+60>>2]=c[d+32>>2];c[g+64>>2]=c[d+36>>2];c[g+68>>2]=c[d+40>>2];c[g+72>>2]=c[d+44>>2];c[g+76>>2]=c[d+48>>2];c[g+80>>2]=c[d+52>>2];c[g+84>>2]=c[d+56>>2];c[g+88>>2]=c[d+60>>2];c[g+92>>2]=c[d+64>>2];m=c[d+192>>2]|0;vc[c[(c[m>>2]|0)+8>>2]&127](m,g+32|0,g+16|0,g);m=c[b+68>>2]|0;c[d+188>>2]=pc[c[(c[m>>2]|0)+8>>2]&3](m,g+16|0,g,c[(c[d+192>>2]|0)+4>>2]|0,d,e,f,c[b+24>>2]|0,0)|0;i=g;return}function Du(b){b=b|0;var d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;d=i;i=i+64|0;yE(7424);q=c[b+8>>2]|0;if((q|0)>0){f=0;do{h=c[(c[b+16>>2]|0)+(f<<2)>>2]|0;if(!((a[b+76>>0]|0)==0?(r=c[h+216>>2]|0,(r|0)==2|(r|0)==5):0)){r=c[h+192>>2]|0;vc[c[(c[r>>2]|0)+8>>2]&127](r,h+4|0,d+48|0,d+32|0);k=+g[d+48>>2]+-.019999999552965164;g[d+48>>2]=k;j=+g[d+52>>2]+-.019999999552965164;g[d+52>>2]=j;n=+g[d+56>>2]+-.019999999552965164;g[d+56>>2]=n;o=+g[d+32>>2]+.019999999552965164;g[d+32>>2]=o;m=+g[d+36>>2]+.019999999552965164;g[d+36>>2]=m;l=+g[d+40>>2]+.019999999552965164;g[d+40>>2]=l;if(((a[b+44>>0]|0)!=0?(c[h+236>>2]|0)==2:0)?(c[h+204>>2]&3|0)==0:0){r=c[h+192>>2]|0;vc[c[(c[r>>2]|0)+8>>2]&127](r,h+68|0,d+16|0,d);k=+g[d+16>>2]+-.019999999552965164;g[d+16>>2]=k;j=+g[d+20>>2]+-.019999999552965164;g[d+20>>2]=j;n=+g[d+24>>2]+-.019999999552965164;g[d+24>>2]=n;o=+g[d>>2]+.019999999552965164;g[d>>2]=o;m=+g[d+4>>2]+.019999999552965164;g[d+4>>2]=m;l=+g[d+8>>2]+.019999999552965164;g[d+8>>2]=l;p=+g[d+48>>2];if(k<p)g[d+48>>2]=k;else k=p;p=+g[d+52>>2];if(j<p)g[d+52>>2]=j;else j=p;p=+g[d+56>>2];if(n<p)g[d+56>>2]=n;else n=p;p=+g[d+28>>2];if(p<+g[d+60>>2])g[d+60>>2]=p;p=+g[d+32>>2];if(p<o)g[d+32>>2]=o;else o=p;p=+g[d+36>>2];if(p<m)g[d+36>>2]=m;else m=p;p=+g[d+40>>2];if(p<l)g[d+40>>2]=l;else l=p;p=+g[d+12>>2];if(+g[d+44>>2]<p)g[d+44>>2]=p}q=c[b+68>>2]|0;if((c[h+204>>2]&1|0)==0?(k=o-k,o=m-j,p=l-n,!(k*k+o*o+p*p<999999995904.0)):0){if(((c[h+216>>2]|0)+ -4|0)>>>0>=2)c[h+216>>2]=5;if((a[7200]|0)!=0?(e=c[b+72>>2]|0,(e|0)!=0):0){a[7200]=0;Nb[c[(c[e>>2]|0)+36>>2]&127](e,7208);r=c[b+72>>2]|0;Nb[c[(c[r>>2]|0)+36>>2]&127](r,7264);r=c[b+72>>2]|0;Nb[c[(c[r>>2]|0)+36>>2]&127](r,7336);r=c[b+72>>2]|0;Nb[c[(c[r>>2]|0)+36>>2]&127](r,7408)}}else Jb[c[(c[q>>2]|0)+16>>2]&31](q,c[h+188>>2]|0,d+48|0,d+32|0,c[b+24>>2]|0);q=c[b+8>>2]|0}f=f+1|0}while((f|0)<(q|0))}b=c[5022]|0;r=(c[b+16>>2]|0)+ -1|0;c[b+16>>2]=r;if(r){i=d;return}do if(c[b+4>>2]|0){Eb(d+48|0,0)|0;r=c[5008]|0;g[b+8>>2]=+(((c[d+52>>2]|0)-(c[r+4>>2]|0)+(((c[d+48>>2]|0)-(c[r>>2]|0)|0)*1e6|0)-(c[b+12>>2]|0)|0)>>>0)/1.0e3+ +g[b+8>>2];if(!(c[b+16>>2]|0)){b=c[5022]|0;break}else{i=d;return}}while(0);c[5022]=c[b+20>>2];i=d;return}function Eu(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;yE(7440);d=c[a+68>>2]|0;Nb[c[(c[d>>2]|0)+32>>2]&127](d,c[a+24>>2]|0);a=c[5022]|0;d=(c[a+16>>2]|0)+ -1|0;c[a+16>>2]=d;if(d){i=b;return}do if(c[a+4>>2]|0){Eb(b|0,0)|0;d=c[5008]|0;g[a+8>>2]=+(((c[b+4>>2]|0)-(c[d+4>>2]|0)+(((c[b>>2]|0)-(c[d>>2]|0)|0)*1e6|0)-(c[a+12>>2]|0)|0)>>>0)/1.0e3+ +g[a+8>>2];if(!(c[a+16>>2]|0)){a=c[5022]|0;break}else{i=b;return}}while(0);c[5022]=c[a+20>>2];i=b;return}function Fu(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;yE(7472);Lb[c[(c[a>>2]|0)+8>>2]&511](a);Lb[c[(c[a>>2]|0)+12>>2]&511](a);d=c[a+24>>2]|0;yE(7512);if(d){f=c[(c[d>>2]|0)+32>>2]|0;e=c[a+68>>2]|0;e=Pb[c[(c[e>>2]|0)+36>>2]&127](e)|0;vc[f&127](d,e,a+28|0,c[a+24>>2]|0)}a=c[5022]|0;f=(c[a+16>>2]|0)+ -1|0;c[a+16>>2]=f;do if(!f){if(c[a+4>>2]|0){Eb(b|0,0)|0;d=c[5008]|0;g[a+8>>2]=+(((c[b+4>>2]|0)-(c[d+4>>2]|0)+(((c[b>>2]|0)-(c[d>>2]|0)|0)*1e6|0)-(c[a+12>>2]|0)|0)>>>0)/1.0e3+ +g[a+8>>2];d=c[5022]|0;if(!(c[a+16>>2]|0))a=d;else{a=d;break}}a=c[a+20>>2]|0;c[5022]=a}while(0);d=a+16|0;f=(c[d>>2]|0)+ -1|0;c[d>>2]=f;if(f){i=b;return}do if(c[a+4>>2]|0){Eb(b|0,0)|0;e=c[5008]|0;f=a+8|0;g[f>>2]=+(((c[b+4>>2]|0)-(c[e+4>>2]|0)+(((c[b>>2]|0)-(c[e>>2]|0)|0)*1e6|0)-(c[a+12>>2]|0)|0)>>>0)/1.0e3+ +g[f>>2];if(!(c[d>>2]|0)){a=c[5022]|0;break}else{i=b;return}}while(0);c[5022]=c[a+20>>2];i=b;return}function Gu(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[b+188>>2]|0;if(f){k=c[a+68>>2]|0;k=Pb[c[(c[k>>2]|0)+36>>2]&127](k)|0;rc[c[(c[k>>2]|0)+40>>2]&127](k,f,c[a+24>>2]|0);k=c[a+68>>2]|0;rc[c[(c[k>>2]|0)+12>>2]&127](k,f,c[a+24>>2]|0);c[b+188>>2]=0}f=c[a+8>>2]|0;if((f|0)<=0){i=e;return}g=c[a+16>>2]|0;h=0;while(1){j=g+(h<<2)|0;k=h+1|0;if((c[j>>2]|0)==(b|0))break;if((k|0)<(f|0))h=k;else{d=9;break}}if((d|0)==9){i=e;return}if((h|0)>=(f|0)){i=e;return}c[j>>2]=c[g+(f+ -1<<2)>>2];c[(c[a+16>>2]|0)+(f+ -1<<2)>>2]=b;c[a+8>>2]=f+ -1;i=e;return}function Hu(d,e,f,h){d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0,K=0.0,L=0.0;j=i;i=i+1392|0;c[j+1192>>2]=0;g[j+1196>>2]=1.0;g[j+1200>>2]=1.0;g[j+1204>>2]=1.0;g[j+1208>>2]=0.0;c[j+1184>>2]=16680;c[j+1188>>2]=8;g[j+1212>>2]=0.0;g[j+1228>>2]=0.0;z=c[f+4>>2]|0;y=c[f+12>>2]|0;A=c[z+4>>2]|0;if((A|0)<20){c[j+1008>>2]=9440;c[j+1176>>2]=0;g[j+1180>>2]=0.0;g[j+1172>>2]=+g[h+4>>2];g[j+956>>2]=9999999747378752.0e-20;a[j+980>>0]=0;c[j+632>>2]=17152;c[j+636>>2]=j+648;c[j+640>>2]=j+1184;c[j+644>>2]=z;c[j+616>>2]=13184;c[j+620>>2]=j+648;c[j+624>>2]=j+1184;c[j+628>>2]=z;J=(c[h+16>>2]&8|0)==0?j+632|0:j+616|0;if(!(ac[c[(c[J>>2]|0)+8>>2]&3](J,d,e,y,y,j+1008|0)|0)){i=j;return}y=j+1140|0;m=+g[y>>2];k=+g[j+1144>>2];n=+g[j+1148>>2];if(!(m*m+k*k+n*n>9999999747378752.0e-20)){i=j;return}l=+g[j+1172>>2];if(!(l<+g[h+4>>2])){i=j;return}H=1.0/+Q(+(m*m+k*k+n*n));g[y>>2]=m*H;g[j+1144>>2]=k*H;g[j+1148>>2]=n*H;c[j+584>>2]=c[f+8>>2];c[j+588>>2]=0;c[j+592>>2]=c[y+0>>2];c[j+596>>2]=c[y+4>>2];c[j+600>>2]=c[y+8>>2];c[j+604>>2]=c[y+12>>2];g[j+608>>2]=l;+hc[c[(c[h>>2]|0)+12>>2]&15](h,j+584|0,1);i=j;return}if((A+ -21|0)>>>0<9){t=+g[y>>2];u=+g[y+16>>2];s=+g[y+32>>2];v=+g[y+4>>2];w=+g[y+20>>2];r=+g[y+36>>2];G=+g[y+8>>2];H=+g[y+24>>2];q=+g[y+40>>2];x=-+g[y+48>>2];E=-+g[y+52>>2];F=-+g[y+56>>2];n=+g[d+48>>2];o=+g[d+52>>2];p=+g[d+56>>2];g[j+568>>2]=t*x+u*E+s*F+(t*n+u*o+s*p);g[j+572>>2]=v*x+w*E+r*F+(v*n+w*o+r*p);g[j+576>>2]=G*x+H*E+q*F+(G*n+H*o+q*p);g[j+580>>2]=0.0;l=+g[e+48>>2];k=+g[e+52>>2];m=+g[e+56>>2];s=t*x+u*E+s*F+(t*l+u*k+s*m);r=v*x+w*E+r*F+(v*l+w*k+r*m);q=G*x+H*E+q*F+(G*l+H*k+q*m);g[j+552>>2]=s;g[j+556>>2]=r;g[j+560>>2]=q;g[j+564>>2]=0.0;e=c[z+4>>2]|0;if((e|0)==25){J=c[f+8>>2]|0;I=c[h+16>>2]|0;c[j+316>>2]=c[j+568>>2];c[j+320>>2]=c[j+572>>2];c[j+324>>2]=c[j+576>>2];c[j+328>>2]=c[j+580>>2];c[j+332>>2]=c[j+552>>2];c[j+336>>2]=c[j+556>>2];c[j+340>>2]=c[j+560>>2];c[j+344>>2]=c[j+564>>2];c[j+348>>2]=I;g[j+352>>2]=1.0;c[j+312>>2]=9248;c[j+356>>2]=h;c[j+360>>2]=J;c[j+364>>2]=z;c[j+368>>2]=c[y+0>>2];c[j+372>>2]=c[y+4>>2];c[j+376>>2]=c[y+8>>2];c[j+380>>2]=c[y+12>>2];c[j+384>>2]=c[y+16>>2];c[j+388>>2]=c[y+20>>2];c[j+392>>2]=c[y+24>>2];c[j+396>>2]=c[y+28>>2];c[j+400>>2]=c[y+32>>2];c[j+404>>2]=c[y+36>>2];c[j+408>>2]=c[y+40>>2];c[j+412>>2]=c[y+44>>2];c[j+416>>2]=c[y+48>>2];c[j+420>>2]=c[y+52>>2];c[j+424>>2]=c[y+56>>2];c[j+428>>2]=c[y+60>>2];g[j+352>>2]=+g[h+4>>2];vc[c[(c[z>>2]|0)+144>>2]&127](z,j+312|0,j+568|0,j+552|0);i=j;return}else if((e|0)==21){J=c[f+8>>2]|0;I=c[h+16>>2]|0;c[j+436>>2]=c[j+568>>2];c[j+440>>2]=c[j+572>>2];c[j+444>>2]=c[j+576>>2];c[j+448>>2]=c[j+580>>2];c[j+452>>2]=c[j+552>>2];c[j+456>>2]=c[j+556>>2];c[j+460>>2]=c[j+560>>2];c[j+464>>2]=c[j+564>>2];c[j+468>>2]=I;g[j+472>>2]=1.0;c[j+432>>2]=9248;c[j+476>>2]=h;c[j+480>>2]=J;c[j+484>>2]=z;c[j+488>>2]=c[y+0>>2];c[j+492>>2]=c[y+4>>2];c[j+496>>2]=c[y+8>>2];c[j+500>>2]=c[y+12>>2];c[j+504>>2]=c[y+16>>2];c[j+508>>2]=c[y+20>>2];c[j+512>>2]=c[y+24>>2];c[j+516>>2]=c[y+28>>2];c[j+520>>2]=c[y+32>>2];c[j+524>>2]=c[y+36>>2];c[j+528>>2]=c[y+40>>2];c[j+532>>2]=c[y+44>>2];c[j+536>>2]=c[y+48>>2];c[j+540>>2]=c[y+52>>2];c[j+544>>2]=c[y+56>>2];c[j+548>>2]=c[y+60>>2];g[j+472>>2]=+g[h+4>>2];h=c[z+48>>2]|0;c[j+1272>>2]=6152;c[j+1276>>2]=h;c[j+1280>>2]=j+432;h=c[z+52>>2]|0;c[j+1328>>2]=0;c[j+1332>>2]=0;c[j+1336>>2]=0;c[j+1340>>2]=0;c[j+1304>>2]=0;c[j+1308>>2]=0;c[j+1312>>2]=0;c[j+1316>>2]=0;if(!(a[h+60>>0]|0)){OA(h,j+1272|0,j+568|0,s,r,q,j+1328|0,j+1304|0);i=j;return}else{PA(h,j+1272|0,j+568|0,s,r,q,j+1328|0,j+1304|0,c[h+56>>2]|0);i=j;return}}else{L=+g[y>>2];K=+g[y+16>>2];s=+g[y+32>>2];t=+g[y+4>>2];u=+g[y+20>>2];v=+g[y+36>>2];F=+g[y+8>>2];G=+g[y+24>>2];H=+g[y+40>>2];w=-+g[y+48>>2];x=-+g[y+52>>2];E=-+g[y+56>>2];r=L*w+K*x+s*E+(L*n+K*o+s*p);q=t*w+u*x+v*E+(t*n+u*o+v*p);o=F*w+G*x+H*E+(F*n+G*o+H*p);p=L*w+K*x+s*E+(L*l+K*k+s*m);n=t*w+u*x+v*E+(t*l+u*k+v*m);k=F*w+G*x+H*E+(F*l+G*k+H*m);J=c[f+8>>2]|0;I=c[h+16>>2]|0;g[j+196>>2]=r;g[j+200>>2]=q;g[j+204>>2]=o;g[j+208>>2]=0.0;g[j+212>>2]=p;g[j+216>>2]=n;g[j+220>>2]=k;g[j+224>>2]=0.0;c[j+228>>2]=I;g[j+232>>2]=1.0;c[j+192>>2]=9056;c[j+236>>2]=h;c[j+240>>2]=J;c[j+244>>2]=z;c[j+248>>2]=c[y+0>>2];c[j+252>>2]=c[y+4>>2];c[j+256>>2]=c[y+8>>2];c[j+260>>2]=c[y+12>>2];c[j+264>>2]=c[y+16>>2];c[j+268>>2]=c[y+20>>2];c[j+272>>2]=c[y+24>>2];c[j+276>>2]=c[y+28>>2];c[j+280>>2]=c[y+32>>2];c[j+284>>2]=c[y+36>>2];c[j+288>>2]=c[y+40>>2];c[j+292>>2]=c[y+44>>2];c[j+296>>2]=c[y+48>>2];c[j+300>>2]=c[y+52>>2];c[j+304>>2]=c[y+56>>2];c[j+308>>2]=c[y+60>>2];g[j+232>>2]=+g[h+4>>2];g[j+176>>2]=r;g[j+180>>2]=q;g[j+184>>2]=o;g[j+188>>2]=0.0;if(p<r)g[j+176>>2]=p;if(n<q)g[j+180>>2]=n;if(k<o)g[j+184>>2]=k;g[j+160>>2]=r;g[j+164>>2]=q;g[j+168>>2]=o;g[j+172>>2]=0.0;if(r<p)g[j+160>>2]=p;if(q<n)g[j+164>>2]=n;if(o<k)g[j+168>>2]=k;vc[c[(c[z>>2]|0)+64>>2]&127](z,j+192|0,j+176|0,j+160|0);i=j;return}}if((A|0)!=31){i=j;return}A=c[z+64>>2]|0;J=c[f+8>>2]|0;c[j+128>>2]=8840;c[j+132>>2]=J;c[j+136>>2]=z;c[j+140>>2]=y;c[j+144>>2]=d;c[j+148>>2]=e;c[j+152>>2]=h;if(!A){h=c[z+16>>2]|0;if((h|0)<=0){i=j;return}f=0;while(1){J=c[z+24>>2]|0;I=c[J+(f*80|0)+64>>2]|0;no(j+1328|0,y,J+(f*80|0)|0);J=c[j+132>>2]|0;c[j+1304>>2]=0;c[j+1308>>2]=I;c[j+1312>>2]=J;c[j+1316>>2]=j+1328;c[j+1320>>2]=-1;c[j+1324>>2]=f;J=c[j+152>>2]|0;g[j+1276>>2]=1.0;c[j+1280>>2]=0;b[j+1284>>1]=1;b[j+1286>>1]=-1;c[j+1288>>2]=0;c[j+1272>>2]=8664;c[j+1292>>2]=J;c[j+1296>>2]=f;g[j+1276>>2]=+g[J+4>>2];c[j+1288>>2]=c[J+16>>2];Hu(c[j+144>>2]|0,c[j+148>>2]|0,j+1304|0,j+1272|0);f=f+1|0;if((f|0)>=(h|0))break;z=c[j+136>>2]|0;y=c[j+140>>2]|0}i=j;return}Ju(j+64|0,y,d);p=+g[j+112>>2];q=+g[j+116>>2];o=+g[j+120>>2];Ju(j,y,e);z=c[A>>2]|0;if(!z){i=j;return}r=+g[j+48>>2]-p;t=+g[j+52>>2]-q;u=+g[j+56>>2]-o;s=1.0/+Q(+(r*r+t*t+u*u));if(r*s==0.0)v=999999984306749400.0;else v=1.0/(r*s);if(t*s==0.0)w=999999984306749400.0;else w=1.0/(t*s);if(u*s==0.0)x=999999984306749400.0;else x=1.0/(u*s);h=v<0.0&1;y=w<0.0&1;f=x<0.0&1;c[5004]=(c[5004]|0)+1;e=fF(531)|0;if(!e)C=0;else{c[(e+19&-16)+ -4>>2]=e;C=e+19&-16}d=0;do{e=C+(d<<2)|0;if(e)c[e>>2]=0;d=d+1|0}while((d|0)!=128);c[C>>2]=z;A=128;D=128;z=1;B=126;do{e=z+ -1|0;d=c[C+(e<<2)>>2]|0;c[j+1240>>2]=c[d+0>>2];c[j+1244>>2]=c[d+4>>2];c[j+1248>>2]=c[d+8>>2];c[j+1252>>2]=c[d+12>>2];c[j+1256>>2]=c[d+16>>2];c[j+1260>>2]=c[d+20>>2];c[j+1264>>2]=c[d+24>>2];c[j+1268>>2]=c[d+28>>2];G=v*(+g[j+1240+(h<<4)>>2]-p);E=v*(+g[j+1240+((h^1)<<4)>>2]-p);H=w*(+g[j+1240+(y<<4)+4>>2]-q);F=w*(+g[j+1240+((y^1)<<4)+4>>2]-q);do if(((!(G>F|H>E)?(n=H>G?H:G,l=F<E?F:E,m=x*(+g[j+1240+(f<<4)+8>>2]-o),k=x*(+g[j+1240+((f^1)<<4)+8>>2]-o),!(n>k|m>l)):0)?(m>n?m:n)<r*s*r+t*s*t+u*s*u:0)?(k<l?k:l)>0.0:0){if(!(c[d+40>>2]|0)){Nb[c[(c[j+128>>2]|0)+12>>2]&127](j+128|0,d);z=e;break}if((e|0)>(B|0)){B=A<<1;if((A|0)<(B|0)){do if((D|0)<(B|0)){do if(!A)D=0;else{c[5004]=(c[5004]|0)+1;D=fF((A<<3|3)+16|0)|0;if(!D)D=0;else{c[(D+19&-16)+ -4>>2]=D;D=D+19&-16}if((A|0)>0)I=0;else break;do{J=D+(I<<2)|0;if(J)c[J>>2]=c[C+(I<<2)>>2];I=I+1|0}while((I|0)!=(A|0))}while(0);if(!C){C=D;D=B;break}c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0);C=D;D=B}while(0);do{I=C+(A<<2)|0;if(I)c[I>>2]=0;A=A+1|0}while((A|0)!=(B|0))}A=B;B=B+ -2|0}c[C+(e<<2)>>2]=c[d+36>>2];c[C+(z<<2)>>2]=c[d+40>>2];z=z+1|0}else z=e;while(0)}while((z|0)!=0);if(!C){i=j;return}c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0);i=j;return}function Iu(a){a=a|0;return}function Ju(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0;j=+g[c+48>>2]- +g[b+48>>2];h=+g[c+52>>2]- +g[b+52>>2];e=+g[c+56>>2]- +g[b+56>>2];p=+g[b>>2];y=+g[c>>2];o=+g[b+16>>2];x=+g[c+16>>2];n=+g[b+32>>2];w=+g[c+32>>2];v=+g[c+4>>2];u=+g[c+20>>2];t=+g[c+36>>2];s=+g[c+8>>2];r=+g[c+24>>2];q=+g[c+40>>2];m=+g[b+4>>2];l=+g[b+20>>2];k=+g[b+36>>2];i=+g[b+8>>2];f=+g[b+24>>2];d=+g[b+40>>2];g[a>>2]=p*y+o*x+n*w;g[a+4>>2]=p*v+o*u+n*t;g[a+8>>2]=p*s+o*r+n*q;g[a+12>>2]=0.0;g[a+16>>2]=y*m+x*l+w*k;g[a+20>>2]=v*m+u*l+t*k;g[a+24>>2]=s*m+r*l+q*k;g[a+28>>2]=0.0;g[a+32>>2]=y*i+x*f+w*d;g[a+36>>2]=v*i+u*f+t*d;g[a+40>>2]=s*i+r*f+q*d;g[a+44>>2]=0.0;g[a+48>>2]=j*p+h*o+e*n;g[a+52>>2]=j*m+h*l+e*k;g[a+56>>2]=j*i+h*f+e*d;g[a+60>>2]=0.0;return}function Ku(d,e,f,h,j,k){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=+k;var l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0;l=i;i=i+1664|0;m=c[h+4>>2]|0;n=c[h+12>>2]|0;D=c[m+4>>2]|0;if((D|0)<20){c[l+1424>>2]=9440;c[l+1592>>2]=0;g[l+1596>>2]=k;g[l+1588>>2]=+g[j+4>>2];g[l+1372>>2]=9999999747378752.0e-20;a[l+1396>>0]=0;c[l+1056>>2]=13248;c[l+1032>>2]=10152;c[l+1036>>2]=l+1064;c[l+1040>>2]=l+1056;c[l+1044>>2]=d;c[l+1048>>2]=m;c[l+1052>>2]=0;if(!(xw(l+1032|0,e,f,n,n,l+1424|0)|0)){i=l;return}m=l+1556|0;q=+g[m>>2];p=+g[l+1560>>2];o=+g[l+1564>>2];if(!(q*q+p*p+o*o>9999999747378752.0e-20)){i=l;return}k=+g[l+1588>>2];if(!(k<+g[j+4>>2])){i=l;return}C=1.0/+Q(+(q*q+p*p+o*o));g[m>>2]=q*C;g[l+1560>>2]=p*C;g[l+1564>>2]=o*C;c[l+984>>2]=c[h+8>>2];c[l+988>>2]=0;c[l+992>>2]=c[m+0>>2];c[l+996>>2]=c[m+4>>2];c[l+1e3>>2]=c[m+8>>2];c[l+1004>>2]=c[m+12>>2];c[l+1008>>2]=c[l+1572>>2];c[l+1012>>2]=c[l+1576>>2];c[l+1016>>2]=c[l+1580>>2];c[l+1020>>2]=c[l+1584>>2];g[l+1024>>2]=k;+hc[c[(c[j>>2]|0)+12>>2]&15](j,l+984|0,1);i=l;return}if((D+ -21|0)>>>0>=9){if((D|0)!=31){i=l;return}yE(7544);if((c[m+16>>2]|0)>0){D=0;do{F=c[m+24>>2]|0;o=+g[F+(D*80|0)>>2];r=+g[F+(D*80|0)+4>>2];u=+g[F+(D*80|0)+8>>2];p=+g[F+(D*80|0)+16>>2];s=+g[F+(D*80|0)+20>>2];w=+g[F+(D*80|0)+24>>2];q=+g[F+(D*80|0)+32>>2];t=+g[F+(D*80|0)+36>>2];y=+g[F+(D*80|0)+40>>2];N=+g[F+(D*80|0)+48>>2];M=+g[F+(D*80|0)+52>>2];C=+g[F+(D*80|0)+56>>2];F=c[F+(D*80|0)+64>>2]|0;L=+g[n>>2];K=+g[n+4>>2];J=+g[n+8>>2];I=+g[n+16>>2];H=+g[n+20>>2];G=+g[n+24>>2];v=+g[n+32>>2];x=+g[n+36>>2];z=+g[n+40>>2];A=N*L+M*K+C*J+ +g[n+48>>2];B=N*I+M*H+C*G+ +g[n+52>>2];C=N*v+M*x+C*z+ +g[n+56>>2];g[l+1600>>2]=o*L+p*K+q*J;g[l+1604>>2]=r*L+s*K+t*J;g[l+1608>>2]=u*L+w*K+y*J;g[l+1612>>2]=0.0;g[l+1616>>2]=o*I+p*H+q*G;g[l+1620>>2]=r*I+s*H+t*G;g[l+1624>>2]=u*I+w*H+y*G;g[l+1628>>2]=0.0;g[l+1632>>2]=o*v+p*x+q*z;g[l+1636>>2]=r*v+s*x+t*z;g[l+1640>>2]=u*v+w*x+y*z;g[l+1644>>2]=0.0;g[l+1648>>2]=A;g[l+1652>>2]=B;g[l+1656>>2]=C;g[l+1660>>2]=0.0;b[l+32>>1]=1;b[l+34>>1]=-1;c[l+24>>2]=8024;c[l+36>>2]=j;c[l+40>>2]=D;g[l+28>>2]=+g[j+4>>2];E=c[h+8>>2]|0;c[l>>2]=h;c[l+4>>2]=F;c[l+8>>2]=E;c[l+12>>2]=l+1600;c[l+16>>2]=-1;c[l+20>>2]=D;Ku(d,e,f,l,l+24|0,k);D=D+1|0}while((D|0)<(c[m+16>>2]|0))}h=c[5022]|0;F=(c[h+16>>2]|0)+ -1|0;c[h+16>>2]=F;if(F){i=l;return}do if(c[h+4>>2]|0){Eb(l+1600|0,0)|0;F=c[5008]|0;g[h+8>>2]=+(((c[l+1604>>2]|0)-(c[F+4>>2]|0)+(((c[l+1600>>2]|0)-(c[F>>2]|0)|0)*1e6|0)-(c[h+12>>2]|0)|0)>>>0)/1.0e3+ +g[h+8>>2];if(!(c[h+16>>2]|0)){h=c[5022]|0;break}else{i=l;return}}while(0);c[5022]=c[h+20>>2];i=l;return}if((D|0)==21){v=+g[n>>2];p=+g[n+16>>2];q=+g[n+32>>2];r=+g[n+4>>2];s=+g[n+20>>2];t=+g[n+36>>2];C=+g[n+8>>2];A=+g[n+24>>2];y=+g[n+40>>2];u=-+g[n+48>>2];o=-+g[n+52>>2];w=-+g[n+56>>2];x=+g[e+48>>2];z=+g[e+52>>2];B=+g[e+56>>2];g[l+968>>2]=v*u+p*o+q*w+(v*x+p*z+q*B);g[l+972>>2]=r*u+s*o+t*w+(r*x+s*z+t*B);g[l+976>>2]=C*u+A*o+y*w+(C*x+A*z+y*B);g[l+980>>2]=0.0;B=+g[f+48>>2];z=+g[f+52>>2];x=+g[f+56>>2];O=+g[f>>2];G=+g[f+16>>2];H=+g[f+32>>2];I=+g[f+4>>2];J=+g[f+20>>2];K=+g[f+36>>2];L=+g[f+8>>2];M=+g[f+24>>2];N=+g[f+40>>2];g[l+904>>2]=v*O+p*G+q*H;g[l+908>>2]=v*I+p*J+q*K;g[l+912>>2]=v*L+p*M+q*N;g[l+916>>2]=0.0;g[l+920>>2]=r*O+s*G+t*H;g[l+924>>2]=r*I+s*J+t*K;g[l+928>>2]=r*L+s*M+t*N;g[l+932>>2]=0.0;g[l+936>>2]=C*O+A*G+y*H;g[l+940>>2]=C*I+A*J+y*K;g[l+944>>2]=C*L+A*M+y*N;F=l+948|0;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0;h=c[h+8>>2]|0;N=+$b[c[(c[m>>2]|0)+48>>2]&15](m);c[l+680>>2]=16256;c[l+684>>2]=d;c[l+688>>2]=c[e+0>>2];c[l+692>>2]=c[e+4>>2];c[l+696>>2]=c[e+8>>2];c[l+700>>2]=c[e+12>>2];c[l+704>>2]=c[e+16>>2];c[l+708>>2]=c[e+20>>2];c[l+712>>2]=c[e+24>>2];c[l+716>>2]=c[e+28>>2];c[l+720>>2]=c[e+32>>2];c[l+724>>2]=c[e+36>>2];c[l+728>>2]=c[e+40>>2];c[l+732>>2]=c[e+44>>2];c[l+736>>2]=c[e+48>>2];c[l+740>>2]=c[e+52>>2];c[l+744>>2]=c[e+56>>2];c[l+748>>2]=c[e+60>>2];c[l+752>>2]=c[f+0>>2];c[l+756>>2]=c[f+4>>2];c[l+760>>2]=c[f+8>>2];c[l+764>>2]=c[f+12>>2];c[l+768>>2]=c[f+16>>2];c[l+772>>2]=c[f+20>>2];c[l+776>>2]=c[f+24>>2];c[l+780>>2]=c[f+28>>2];c[l+784>>2]=c[f+32>>2];c[l+788>>2]=c[f+36>>2];c[l+792>>2]=c[f+40>>2];c[l+796>>2]=c[f+44>>2];c[l+800>>2]=c[f+48>>2];c[l+804>>2]=c[f+52>>2];c[l+808>>2]=c[f+56>>2];c[l+812>>2]=c[f+60>>2];c[l+816>>2]=c[n+0>>2];c[l+820>>2]=c[n+4>>2];c[l+824>>2]=c[n+8>>2];c[l+828>>2]=c[n+12>>2];c[l+832>>2]=c[n+16>>2];c[l+836>>2]=c[n+20>>2];c[l+840>>2]=c[n+24>>2];c[l+844>>2]=c[n+28>>2];c[l+848>>2]=c[n+32>>2];c[l+852>>2]=c[n+36>>2];c[l+856>>2]=c[n+40>>2];c[l+860>>2]=c[n+44>>2];c[l+864>>2]=c[n+48>>2];c[l+868>>2]=c[n+52>>2];c[l+872>>2]=c[n+56>>2];c[l+876>>2]=c[n+60>>2];g[l+884>>2]=N;c[l+680>>2]=8448;c[l+892>>2]=j;c[l+896>>2]=h;c[l+900>>2]=m;g[l+880>>2]=+g[j+4>>2];g[l+888>>2]=k;vc[c[(c[d>>2]|0)+8>>2]&127](d,l+904|0,l+664|0,l+648|0);h=c[m+48>>2]|0;c[l+1600>>2]=5992;c[l+1604>>2]=h;c[l+1608>>2]=l+680;h=c[m+52>>2]|0;if(!(a[h+60>>0]|0)){OA(h,l+1600|0,l+968|0,v*u+p*o+q*w+(v*B+p*z+q*x),r*u+s*o+t*w+(r*B+s*z+t*x),C*u+A*o+y*w+(C*B+A*z+y*x),l+664|0,l+648|0);i=l;return}else{PA(h,l+1600|0,l+968|0,v*u+p*o+q*w+(v*B+p*z+q*x),r*u+s*o+t*w+(r*B+s*z+t*x),C*u+A*o+y*w+(C*B+A*z+y*x),l+664|0,l+648|0,c[h+56>>2]|0);i=l;return}}else if((D|0)==28){c[l+472>>2]=9440;c[l+640>>2]=0;g[l+644>>2]=k;g[l+636>>2]=+g[j+4>>2];c[l+448>>2]=10152;c[l+452>>2]=0;c[l+456>>2]=0;c[l+460>>2]=d;c[l+464>>2]=0;c[l+468>>2]=m;if(!(xw(l+448|0,e,f,n,n,l+472|0)|0)){i=l;return}m=l+604|0;k=+g[m>>2];o=+g[l+608>>2];p=+g[l+612>>2];if(!(k*k+o*o+p*p>9999999747378752.0e-20)){i=l;return}q=+g[l+636>>2];if(!(q<+g[j+4>>2])){i=l;return}O=1.0/+Q(+(k*k+o*o+p*p));g[m>>2]=k*O;g[l+608>>2]=o*O;g[l+612>>2]=p*O;c[l+400>>2]=c[h+8>>2];c[l+404>>2]=0;c[l+408>>2]=c[m+0>>2];c[l+412>>2]=c[m+4>>2];c[l+416>>2]=c[m+8>>2];c[l+420>>2]=c[m+12>>2];c[l+424>>2]=c[l+620>>2];c[l+428>>2]=c[l+624>>2];c[l+432>>2]=c[l+628>>2];c[l+436>>2]=c[l+632>>2];g[l+440>>2]=q;+hc[c[(c[j>>2]|0)+12>>2]&15](j,l+400|0,1);i=l;return}else{u=+g[n>>2];v=+g[n+16>>2];w=+g[n+32>>2];x=+g[n+4>>2];y=+g[n+20>>2];z=+g[n+36>>2];J=+g[n+8>>2];L=+g[n+24>>2];N=+g[n+40>>2];H=-+g[n+48>>2];G=-+g[n+52>>2];C=-+g[n+56>>2];A=+g[e+48>>2];B=+g[e+52>>2];p=+g[e+56>>2];t=u*H+v*G+w*C+(u*A+v*B+w*p);q=x*H+y*G+z*C+(x*A+y*B+z*p);p=J*H+L*G+N*C+(J*A+L*B+N*p);B=+g[f+48>>2];A=+g[f+52>>2];o=+g[f+56>>2];s=u*H+v*G+w*C+(u*B+v*A+w*o);r=x*H+y*G+z*C+(x*B+y*A+z*o);o=J*H+L*G+N*C+(J*B+L*A+N*o);A=+g[f>>2];B=+g[f+16>>2];C=+g[f+32>>2];G=+g[f+4>>2];H=+g[f+20>>2];I=+g[f+36>>2];K=+g[f+8>>2];M=+g[f+24>>2];O=+g[f+40>>2];g[l+336>>2]=u*A+v*B+w*C;g[l+340>>2]=u*G+v*H+w*I;g[l+344>>2]=u*K+v*M+w*O;g[l+348>>2]=0.0;g[l+352>>2]=x*A+y*B+z*C;g[l+356>>2]=x*G+y*H+z*I;g[l+360>>2]=x*K+y*M+z*O;g[l+364>>2]=0.0;g[l+368>>2]=J*A+L*B+N*C;g[l+372>>2]=J*G+L*H+N*I;g[l+376>>2]=J*K+L*M+N*O;F=l+380|0;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0;F=c[h+8>>2]|0;O=+$b[c[(c[m>>2]|0)+48>>2]&15](m);c[l+112>>2]=16256;c[l+116>>2]=d;c[l+120>>2]=c[e+0>>2];c[l+124>>2]=c[e+4>>2];c[l+128>>2]=c[e+8>>2];c[l+132>>2]=c[e+12>>2];c[l+136>>2]=c[e+16>>2];c[l+140>>2]=c[e+20>>2];c[l+144>>2]=c[e+24>>2];c[l+148>>2]=c[e+28>>2];c[l+152>>2]=c[e+32>>2];c[l+156>>2]=c[e+36>>2];c[l+160>>2]=c[e+40>>2];c[l+164>>2]=c[e+44>>2];c[l+168>>2]=c[e+48>>2];c[l+172>>2]=c[e+52>>2];c[l+176>>2]=c[e+56>>2];c[l+180>>2]=c[e+60>>2];c[l+184>>2]=c[f+0>>2];c[l+188>>2]=c[f+4>>2];c[l+192>>2]=c[f+8>>2];c[l+196>>2]=c[f+12>>2];c[l+200>>2]=c[f+16>>2];c[l+204>>2]=c[f+20>>2];c[l+208>>2]=c[f+24>>2];c[l+212>>2]=c[f+28>>2];c[l+216>>2]=c[f+32>>2];c[l+220>>2]=c[f+36>>2];c[l+224>>2]=c[f+40>>2];c[l+228>>2]=c[f+44>>2];c[l+232>>2]=c[f+48>>2];c[l+236>>2]=c[f+52>>2];c[l+240>>2]=c[f+56>>2];c[l+244>>2]=c[f+60>>2];c[l+248>>2]=c[n+0>>2];c[l+252>>2]=c[n+4>>2];c[l+256>>2]=c[n+8>>2];c[l+260>>2]=c[n+12>>2];c[l+264>>2]=c[n+16>>2];c[l+268>>2]=c[n+20>>2];c[l+272>>2]=c[n+24>>2];c[l+276>>2]=c[n+28>>2];c[l+280>>2]=c[n+32>>2];c[l+284>>2]=c[n+36>>2];c[l+288>>2]=c[n+40>>2];c[l+292>>2]=c[n+44>>2];c[l+296>>2]=c[n+48>>2];c[l+300>>2]=c[n+52>>2];c[l+304>>2]=c[n+56>>2];c[l+308>>2]=c[n+60>>2];g[l+316>>2]=O;c[l+112>>2]=8224;c[l+324>>2]=j;c[l+328>>2]=F;c[l+332>>2]=m;g[l+312>>2]=+g[j+4>>2];g[l+320>>2]=k;vc[c[(c[d>>2]|0)+8>>2]&127](d,l+336|0,l+96|0,l+80|0);g[l+64>>2]=t;g[l+68>>2]=q;g[l+72>>2]=p;g[l+76>>2]=0.0;if(s<t){g[l+64>>2]=s;v=s}else v=t;if(r<q){g[l+68>>2]=r;u=r}else u=q;if(o<p){g[l+72>>2]=o;k=o}else k=p;g[l+48>>2]=t;g[l+52>>2]=q;g[l+56>>2]=p;g[l+60>>2]=0.0;if(t<s)g[l+48>>2]=s;else s=t;if(q<r){g[l+52>>2]=r;q=r}if(p<o)g[l+56>>2]=o;else o=p;g[l+64>>2]=+g[l+96>>2]+v;g[l+68>>2]=+g[l+100>>2]+u;g[l+72>>2]=+g[l+104>>2]+k;g[l+48>>2]=+g[l+80>>2]+s;g[l+52>>2]=+g[l+84>>2]+q;g[l+56>>2]=+g[l+88>>2]+o;vc[c[(c[m>>2]|0)+64>>2]&127](m,l+112|0,l+64|0,l+48|0);i=l;return}}function Lu(a){a=a|0;return}function Mu(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0;j=i;i=i+256|0;c[j+32>>2]=7960;h=j+68|0;c[h+0>>2]=c[b+0>>2];c[h+4>>2]=c[b+4>>2];c[h+8>>2]=c[b+8>>2];c[h+12>>2]=c[b+12>>2];f=j+84|0;c[f+0>>2]=c[d+0>>2];c[f+4>>2]=c[d+4>>2];c[f+8>>2]=c[d+8>>2];c[f+12>>2]=c[d+12>>2];c[j+244>>2]=a;c[j+248>>2]=e;g[j+100>>2]=1.0;c[j+104>>2]=0;c[j+108>>2]=0;c[j+112>>2]=0;c[j+116>>2]=0;g[j+120>>2]=1.0;c[j+124>>2]=0;c[j+128>>2]=0;c[j+132>>2]=0;c[j+136>>2]=0;g[j+140>>2]=1.0;c[j+144>>2]=0;c[j+148>>2]=c[h+0>>2];c[j+152>>2]=c[h+4>>2];c[j+156>>2]=c[h+8>>2];c[j+160>>2]=c[h+12>>2];g[j+164>>2]=1.0;c[j+168>>2]=0;c[j+172>>2]=0;c[j+176>>2]=0;c[j+180>>2]=0;g[j+184>>2]=1.0;c[j+188>>2]=0;c[j+192>>2]=0;c[j+196>>2]=0;c[j+200>>2]=0;g[j+204>>2]=1.0;c[j+208>>2]=0;c[j+212>>2]=c[d+0>>2];c[j+216>>2]=c[d+4>>2];c[j+220>>2]=c[d+8>>2];c[j+224>>2]=c[d+12>>2];n=+g[d>>2]- +g[b>>2];k=+g[d+4>>2]- +g[b+4>>2];q=+g[d+8>>2]- +g[b+8>>2];l=1.0/+Q(+(n*n+k*k+q*q));if(n*l==0.0)p=999999984306749400.0;else p=1.0/(n*l);g[j+36>>2]=p;if(k*l==0.0)o=999999984306749400.0;else o=1.0/(k*l);g[j+40>>2]=o;if(q*l==0.0)m=999999984306749400.0;else m=1.0/(q*l);g[j+44>>2]=m;c[j+52>>2]=p<0.0&1;c[j+56>>2]=o<0.0&1;c[j+60>>2]=m<0.0&1;g[j+64>>2]=n*l*(+g[f>>2]- +g[h>>2])+k*l*(+g[j+88>>2]- +g[j+72>>2])+q*l*(+g[j+92>>2]- +g[j+76>>2]);e=c[a+68>>2]|0;h=c[(c[e>>2]|0)+24>>2]|0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;Zb[h&7](e,b,d,j+32|0,j+16|0,j);i=j;return}function Nu(a){a=a|0;return}function Ou(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=+h;var j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0.0,v=0;j=i;i=i+416|0;yE(7568);c[j+144>>2]=c[d+0>>2];c[j+148>>2]=c[d+4>>2];c[j+152>>2]=c[d+8>>2];c[j+156>>2]=c[d+12>>2];c[j+160>>2]=c[d+16>>2];c[j+164>>2]=c[d+20>>2];c[j+168>>2]=c[d+24>>2];c[j+172>>2]=c[d+28>>2];c[j+176>>2]=c[d+32>>2];c[j+180>>2]=c[d+36>>2];c[j+184>>2]=c[d+40>>2];c[j+188>>2]=c[d+44>>2];k=j+192|0;c[k+0>>2]=c[d+48>>2];c[k+4>>2]=c[d+52>>2];c[k+8>>2]=c[d+56>>2];c[k+12>>2]=c[d+60>>2];c[j+80>>2]=c[e+0>>2];c[j+84>>2]=c[e+4>>2];c[j+88>>2]=c[e+8>>2];c[j+92>>2]=c[e+12>>2];c[j+96>>2]=c[e+16>>2];c[j+100>>2]=c[e+20>>2];c[j+104>>2]=c[e+24>>2];c[j+108>>2]=c[e+28>>2];c[j+112>>2]=c[e+32>>2];c[j+116>>2]=c[e+36>>2];c[j+120>>2]=c[e+40>>2];c[j+124>>2]=c[e+44>>2];l=j+128|0;c[l+0>>2]=c[e+48>>2];c[l+4>>2]=c[e+52>>2];c[l+8>>2]=c[e+56>>2];c[l+12>>2]=c[e+60>>2];Lo(j+144|0,j+80|0,j+212|0,j+208|0);u=+g[j+208>>2];m=u*+g[j+216>>2];r=u*+g[j+220>>2];g[j+32>>2]=+g[j+212>>2]*u;g[j+36>>2]=m;g[j+40>>2]=r;g[j+44>>2]=0.0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;g[j+212>>2]=1.0;v=j+216|0;c[v+0>>2]=0;c[v+4>>2]=0;c[v+8>>2]=0;c[v+12>>2]=0;g[j+232>>2]=1.0;t=j+236|0;c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;g[j+252>>2]=1.0;s=j+256|0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;c[s+16>>2]=0;Hc(j+144|0,j);r=+g[j>>2];m=+g[j+4>>2];u=+g[j+8>>2];q=+g[j+12>>2];o=r*(2.0/(r*r+m*m+u*u+q*q));n=m*(2.0/(r*r+m*m+u*u+q*q));p=u*(2.0/(r*r+m*m+u*u+q*q));g[j+212>>2]=1.0-(m*n+u*p);g[v>>2]=r*n-q*p;g[j+220>>2]=r*p+q*n;g[j+224>>2]=0.0;g[j+228>>2]=r*n+q*p;g[j+232>>2]=1.0-(r*o+u*p);g[t>>2]=m*p-q*o;g[j+240>>2]=0.0;g[j+244>>2]=r*p-q*n;g[j+248>>2]=m*p+q*o;g[j+252>>2]=1.0-(r*o+m*n);g[s>>2]=0.0;wu(b,j+212|0,j+16|0,j+32|0,j+64|0,j+48|0);c[j+212>>2]=7848;c[j+248>>2]=c[d+0>>2];c[j+252>>2]=c[d+4>>2];c[j+256>>2]=c[d+8>>2];c[j+260>>2]=c[d+12>>2];c[j+264>>2]=c[d+16>>2];c[j+268>>2]=c[d+20>>2];c[j+272>>2]=c[d+24>>2];c[j+276>>2]=c[d+28>>2];c[j+280>>2]=c[d+32>>2];c[j+284>>2]=c[d+36>>2];c[j+288>>2]=c[d+40>>2];c[j+292>>2]=c[d+44>>2];s=j+296|0;c[s+0>>2]=c[d+48>>2];c[s+4>>2]=c[d+52>>2];c[s+8>>2]=c[d+56>>2];c[s+12>>2]=c[d+60>>2];c[j+312>>2]=c[e+0>>2];c[j+316>>2]=c[e+4>>2];c[j+320>>2]=c[e+8>>2];c[j+324>>2]=c[e+12>>2];c[j+328>>2]=c[e+16>>2];c[j+332>>2]=c[e+20>>2];c[j+336>>2]=c[e+24>>2];c[j+340>>2]=c[e+28>>2];c[j+344>>2]=c[e+32>>2];c[j+348>>2]=c[e+36>>2];c[j+352>>2]=c[e+40>>2];c[j+356>>2]=c[e+44>>2];d=j+360|0;c[d+0>>2]=c[e+48>>2];c[d+4>>2]=c[e+52>>2];c[d+8>>2]=c[e+56>>2];c[d+12>>2]=c[e+60>>2];c[j+392>>2]=a;c[j+396>>2]=f;g[j+400>>2]=h;c[j+404>>2]=b;n=+g[d>>2]- +g[s>>2];h=+g[j+364>>2]- +g[j+300>>2];m=+g[j+368>>2]- +g[j+304>>2];o=1.0/+Q(+(n*n+h*h+m*m));if(n*o==0.0)p=999999984306749400.0;else p=1.0/(n*o);g[j+216>>2]=p;if(h*o==0.0)q=999999984306749400.0;else q=1.0/(h*o);g[j+220>>2]=q;if(m*o==0.0)r=999999984306749400.0;else r=1.0/(m*o);g[j+224>>2]=r;c[j+232>>2]=p<0.0&1;c[j+236>>2]=q<0.0&1;c[j+240>>2]=r<0.0&1;g[j+244>>2]=m*m*o+(n*n*o+h*h*o);v=c[a+68>>2]|0;Zb[c[(c[v>>2]|0)+24>>2]&7](v,k,l,j+212|0,j+64|0,j+48|0);k=c[5022]|0;v=(c[k+16>>2]|0)+ -1|0;c[k+16>>2]=v;if(v){i=j;return}do if(c[k+4>>2]|0){Eb(j+212|0,0)|0;v=c[5008]|0;g[k+8>>2]=+(((c[j+216>>2]|0)-(c[v+4>>2]|0)+(((c[j+212>>2]|0)-(c[v>>2]|0)|0)*1e6|0)-(c[k+12>>2]|0)|0)>>>0)/1.0e3+ +g[k+8>>2];if(!(c[k+16>>2]|0)){k=c[5022]|0;break}else{i=j;return}}while(0);c[5022]=c[k+20>>2];i=j;return}function Pu(a){a=a|0;return}function Qu(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+96|0;g=c[b+192>>2]|0;c[f+64>>2]=0;c[f+68>>2]=g;c[f+72>>2]=b;c[f+76>>2]=b+4;c[f+80>>2]=-1;c[f+84>>2]=-1;b=c[d+192>>2]|0;c[f+40>>2]=0;c[f+44>>2]=b;c[f+48>>2]=d;c[f+52>>2]=d+4;c[f+56>>2]=-1;c[f+60>>2]=-1;d=c[a+24>>2]|0;d=Tb[c[(c[d>>2]|0)+8>>2]&31](d,f+64|0,f+40|0,0)|0;if(!d){i=f;return}c[f+4>>2]=0;c[f+8>>2]=f+64;c[f+12>>2]=f+40;c[f>>2]=7728;c[f+32>>2]=e;Jb[c[(c[d>>2]|0)+8>>2]&31](d,f+64|0,f+40|0,a+28|0,f);Lb[c[c[d>>2]>>2]&511](d);g=c[a+24>>2]|0;Nb[c[(c[g>>2]|0)+60>>2]&127](g,d);i=f;return}function Ru(a){a=a|0;return}function Su(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0,o=0.0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0;f=i;i=i+480|0;h=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;tc[c[(c[h>>2]|0)+56>>2]&7](h,b,1.0);h=c[d+4>>2]|0;switch(h|0){case 0:{c[f+400>>2]=c[d+28>>2];c[f+404>>2]=c[d+32>>2];c[f+408>>2]=c[d+36>>2];c[f+412>>2]=c[d+40>>2];l=+$b[c[(c[d>>2]|0)+48>>2]&15](d);m=+$b[c[(c[d>>2]|0)+48>>2]&15](d);o=+$b[c[(c[d>>2]|0)+48>>2]&15](d);l=l+ +g[f+400>>2];g[f+400>>2]=l;m=m+ +g[f+404>>2];g[f+404>>2]=m;o=o+ +g[f+408>>2];g[f+408>>2]=o;r=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;q=c[(c[r>>2]|0)+72>>2]|0;g[f+384>>2]=-l;g[f+388>>2]=-m;g[f+392>>2]=-o;g[f+396>>2]=0.0;Jb[q&31](r,f+384|0,f+400|0,b,e);i=f;return};case 9:{h=c[d+92>>2]|0;if((h|0)<=0){i=f;return}do{h=h+ -1|0;r=c[d+100>>2]|0;D=+g[r+(h<<4)>>2];C=+g[r+(h<<4)+4>>2];m=+g[r+(h<<4)+8>>2];r=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;q=c[(c[r>>2]|0)+16>>2]|0;o=+g[(c[d+120>>2]|0)+(h<<2)>>2];A=+g[b>>2];z=+g[b+4>>2];B=+g[b+8>>2];x=+g[b+16>>2];w=+g[b+20>>2];y=+g[b+24>>2];u=+g[b+32>>2];t=+g[b+36>>2];v=+g[b+40>>2];s=D*A+C*z+m*B+ +g[b+48>>2];l=D*x+C*w+m*y+ +g[b+52>>2];m=D*u+C*t+m*v+ +g[b+56>>2];g[f+320>>2]=A+z*0.0+B*0.0;g[f+324>>2]=A*0.0+z+B*0.0;g[f+328>>2]=B+(A*0.0+z*0.0);g[f+332>>2]=0.0;g[f+336>>2]=x+w*0.0+y*0.0;g[f+340>>2]=x*0.0+w+y*0.0;g[f+344>>2]=y+(x*0.0+w*0.0);g[f+348>>2]=0.0;g[f+352>>2]=u+t*0.0+v*0.0;g[f+356>>2]=u*0.0+t+v*0.0;g[f+360>>2]=v+(u*0.0+t*0.0);g[f+364>>2]=0.0;g[f+368>>2]=s;g[f+372>>2]=l;g[f+376>>2]=m;g[f+380>>2]=0.0;Sb[q&0](r,o,f+320|0,e)}while((h|0)>0);i=f;return};case 11:{C=+g[d+56>>2];D=+g[d+60>>2];r=c[d+68>>2]|0;q=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;Rb[c[(c[q>>2]|0)+84>>2]&0](q,C,D,r,b,e);i=f;return};case 13:{r=c[d+52>>2]|0;C=+$b[c[(c[d>>2]|0)+92>>2]&15](d);c[f+304>>2]=c[d+28>>2];c[f+308>>2]=c[d+32>>2];c[f+312>>2]=c[d+36>>2];c[f+316>>2]=c[d+40>>2];A=+$b[c[(c[d>>2]|0)+48>>2]&15](d);B=+$b[c[(c[d>>2]|0)+48>>2]&15](d);D=+$b[c[(c[d>>2]|0)+48>>2]&15](d);g[f+304>>2]=A+ +g[f+304>>2];g[f+308>>2]=B+ +g[f+308>>2];g[f+312>>2]=D+ +g[f+312>>2];D=+g[f+304+(r<<2)>>2];q=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;Rb[c[(c[q>>2]|0)+80>>2]&0](q,C,D,r,b,e);i=f;return};case 31:{h=c[d+16>>2]|0;if((h|0)<=0){i=f;return}do{h=h+ -1|0;r=c[d+24>>2]|0;l=+g[r+(h*80|0)>>2];s=+g[r+(h*80|0)+4>>2];v=+g[r+(h*80|0)+8>>2];m=+g[r+(h*80|0)+16>>2];t=+g[r+(h*80|0)+20>>2];x=+g[r+(h*80|0)+24>>2];o=+g[r+(h*80|0)+32>>2];u=+g[r+(h*80|0)+36>>2];z=+g[r+(h*80|0)+40>>2];L=+g[r+(h*80|0)+48>>2];K=+g[r+(h*80|0)+52>>2];D=+g[r+(h*80|0)+56>>2];r=c[r+(h*80|0)+64>>2]|0;q=c[(c[a>>2]|0)+28>>2]|0;J=+g[b>>2];I=+g[b+4>>2];H=+g[b+8>>2];G=+g[b+16>>2];F=+g[b+20>>2];E=+g[b+24>>2];w=+g[b+32>>2];y=+g[b+36>>2];A=+g[b+40>>2];B=L*J+K*I+D*H+ +g[b+48>>2];C=L*G+K*F+D*E+ +g[b+52>>2];D=L*w+K*y+D*A+ +g[b+56>>2];g[f+416>>2]=l*J+m*I+o*H;g[f+420>>2]=s*J+t*I+u*H;g[f+424>>2]=v*J+x*I+z*H;g[f+428>>2]=0.0;g[f+432>>2]=l*G+m*F+o*E;g[f+436>>2]=s*G+t*F+u*E;g[f+440>>2]=v*G+x*F+z*E;g[f+444>>2]=0.0;g[f+448>>2]=l*w+m*y+o*A;g[f+452>>2]=s*w+t*y+u*A;g[f+456>>2]=v*w+x*y+z*A;g[f+460>>2]=0.0;g[f+464>>2]=B;g[f+468>>2]=C;g[f+472>>2]=D;g[f+476>>2]=0.0;vc[q&127](a,f+416|0,r,e)}while((h|0)>0);i=f;return};case 28:{L=+g[d+64>>2];r=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;cc[c[(c[r>>2]|0)+88>>2]&0](r,d+48|0,L,b,e);i=f;return};case 8:{L=+$b[c[(c[d>>2]|0)+48>>2]&15](d);r=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;Sb[c[(c[r>>2]|0)+16>>2]&0](r,L,b,e);i=f;return};case 10:{r=c[d+52>>2]|0;K=+g[d+(((r+2|0)%3|0)<<2)+28>>2];L=+g[d+(r<<2)+28>>2];q=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;Rb[c[(c[q>>2]|0)+76>>2]&0](q,K,L,r,b,e);i=f;return};default:{a:do if((h|0)<7){j=c[d+52>>2]|0;if(!j){if((Pb[c[(c[d>>2]|0)+100>>2]&127](d)|0)<=0)break;h=0;while(1){vc[c[(c[d>>2]|0)+104>>2]&127](d,h,f+208|0,f+192|0);J=+g[f+208>>2];x=+g[b>>2];H=+g[f+212>>2];y=+g[b+4>>2];F=+g[f+216>>2];z=+g[b+8>>2];B=+g[b+16>>2];C=+g[b+20>>2];D=+g[b+24>>2];G=+g[b+32>>2];I=+g[b+36>>2];K=+g[b+40>>2];A=+g[b+48>>2];E=+g[b+52>>2];L=+g[b+56>>2];g[f+176>>2]=J*x+H*y+F*z+A;g[f+180>>2]=J*B+H*C+F*D+E;g[f+184>>2]=J*G+H*I+F*K+L;g[f+188>>2]=0.0;F=+g[f+192>>2];H=+g[f+196>>2];J=+g[f+200>>2];g[f+160>>2]=F*x+H*y+J*z+A;g[f+164>>2]=F*B+H*C+J*D+E;g[f+168>>2]=F*G+H*I+J*K+L;g[f+172>>2]=0.0;r=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;vc[c[(c[r>>2]|0)+8>>2]&127](r,f+176|0,f+160|0,e);h=h+1|0;if((h|0)>=(Pb[c[(c[d>>2]|0)+100>>2]&127](d)|0))break a}}if((c[j+28>>2]|0)>0){h=0;do{n=c[j+36>>2]|0;k=c[n+(h*36|0)+4>>2]|0;b:do if((k|0)>0){p=c[n+(h*36|0)+12>>2]|0;q=p;o=0.0;m=0.0;l=0.0;p=c[p+(k+ -1<<2)>>2]|0;r=0;while(1){n=c[q+(r<<2)>>2]|0;q=c[j+16>>2]|0;o=o+ +g[q+(n<<4)>>2];m=m+ +g[q+(n<<4)+4>>2];l=l+ +g[q+(n<<4)+8>>2];q=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;M=c[(c[q>>2]|0)+8>>2]|0;N=c[j+16>>2]|0;J=+g[N+(p<<4)>>2];x=+g[b>>2];H=+g[N+(p<<4)+4>>2];y=+g[b+4>>2];F=+g[N+(p<<4)+8>>2];z=+g[b+8>>2];B=+g[b+16>>2];C=+g[b+20>>2];D=+g[b+24>>2];G=+g[b+32>>2];I=+g[b+36>>2];K=+g[b+40>>2];A=+g[b+48>>2];E=+g[b+52>>2];L=+g[b+56>>2];g[f+288>>2]=J*x+H*y+F*z+A;g[f+292>>2]=J*B+H*C+F*D+E;g[f+296>>2]=J*G+H*I+F*K+L;g[f+300>>2]=0.0;F=+g[N+(n<<4)>>2];H=+g[N+(n<<4)+4>>2];J=+g[N+(n<<4)+8>>2];g[f+272>>2]=F*x+H*y+J*z+A;g[f+276>>2]=F*B+H*C+J*D+E;g[f+280>>2]=F*G+H*I+J*K+L;g[f+284>>2]=0.0;vc[M&127](q,f+288|0,f+272|0,e);r=r+1|0;p=c[j+36>>2]|0;if((r|0)>=(c[p+(h*36|0)+4>>2]|0))break b;q=c[p+(h*36|0)+12>>2]|0;p=n}}else{o=0.0;m=0.0;l=0.0}while(0);o=o*(1.0/+(k|0));m=m*(1.0/+(k|0));l=l*(1.0/+(k|0));N=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;if((Pb[c[(c[N>>2]|0)+48>>2]&127](N)|0)&16384){g[f+256>>2]=1.0;g[f+260>>2]=1.0;g[f+264>>2]=0.0;g[f+268>>2]=0.0;N=c[j+36>>2]|0;F=+g[N+(h*36|0)+20>>2];H=+g[N+(h*36|0)+24>>2];J=+g[N+(h*36|0)+28>>2];N=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;M=c[(c[N>>2]|0)+8>>2]|0;x=+g[b>>2];y=+g[b+4>>2];z=+g[b+8>>2];B=+g[b+16>>2];C=+g[b+20>>2];D=+g[b+24>>2];G=+g[b+32>>2];I=+g[b+36>>2];K=+g[b+40>>2];A=+g[b+48>>2];E=+g[b+52>>2];L=+g[b+56>>2];g[f+240>>2]=o*x+m*y+l*z+A;g[f+244>>2]=o*B+m*C+l*D+E;g[f+248>>2]=o*G+m*I+l*K+L;g[f+252>>2]=0.0;g[f+224>>2]=(o+F)*x+(m+H)*y+(l+J)*z+A;g[f+228>>2]=(o+F)*B+(m+H)*C+(l+J)*D+E;g[f+232>>2]=(o+F)*G+(m+H)*I+(l+J)*K+L;g[f+236>>2]=0.0;vc[M&127](N,f+240|0,f+224|0,f+256|0)}h=h+1|0}while((h|0)<(c[j+28>>2]|0))}}while(0);h=c[d+4>>2]|0;if((h+ -21|0)>>>0<9){g[f+144>>2]=999999984306749400.0;g[f+148>>2]=999999984306749400.0;g[f+152>>2]=999999984306749400.0;g[f+156>>2]=0.0;g[f+128>>2]=-999999984306749400.0;g[f+132>>2]=-999999984306749400.0;g[f+136>>2]=-999999984306749400.0;g[f+140>>2]=0.0;h=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;c[f+32>>2]=7624;c[f+36>>2]=7648;c[f+40>>2]=h;c[f+44>>2]=c[e+0>>2];c[f+48>>2]=c[e+4>>2];c[f+52>>2]=c[e+8>>2];c[f+56>>2]=c[e+12>>2];c[f+60>>2]=c[b+0>>2];c[f+64>>2]=c[b+4>>2];c[f+68>>2]=c[b+8>>2];c[f+72>>2]=c[b+12>>2];c[f+76>>2]=c[b+16>>2];c[f+80>>2]=c[b+20>>2];c[f+84>>2]=c[b+24>>2];c[f+88>>2]=c[b+28>>2];c[f+92>>2]=c[b+32>>2];c[f+96>>2]=c[b+36>>2];c[f+100>>2]=c[b+40>>2];c[f+104>>2]=c[b+44>>2];c[f+108>>2]=c[b+48>>2];c[f+112>>2]=c[b+52>>2];c[f+116>>2]=c[b+56>>2];c[f+120>>2]=c[b+60>>2];vc[c[(c[d>>2]|0)+64>>2]&127](d,f+32|0,f+128|0,f+144|0);h=c[d+4>>2]|0}if((h|0)!=3){i=f;return}g[f+16>>2]=999999984306749400.0;g[f+20>>2]=999999984306749400.0;g[f+24>>2]=999999984306749400.0;g[f+28>>2]=0.0;g[f>>2]=-999999984306749400.0;g[f+4>>2]=-999999984306749400.0;g[f+8>>2]=-999999984306749400.0;g[f+12>>2]=0.0;N=Pb[c[(c[a>>2]|0)+20>>2]&127](a)|0;c[f+32>>2]=7624;c[f+36>>2]=7648;c[f+40>>2]=N;c[f+44>>2]=c[e+0>>2];c[f+48>>2]=c[e+4>>2];c[f+52>>2]=c[e+8>>2];c[f+56>>2]=c[e+12>>2];c[f+60>>2]=c[b+0>>2];c[f+64>>2]=c[b+4>>2];c[f+68>>2]=c[b+8>>2];c[f+72>>2]=c[b+12>>2];c[f+76>>2]=c[b+16>>2];c[f+80>>2]=c[b+20>>2];c[f+84>>2]=c[b+24>>2];c[f+88>>2]=c[b+28>>2];c[f+92>>2]=c[b+32>>2];c[f+96>>2]=c[b+36>>2];c[f+100>>2]=c[b+40>>2];c[f+104>>2]=c[b+44>>2];c[f+108>>2]=c[b+48>>2];c[f+112>>2]=c[b+52>>2];c[f+116>>2]=c[b+56>>2];c[f+120>>2]=c[b+60>>2];N=c[d+92>>2]|0;vc[c[(c[N>>2]|0)+8>>2]&127](N,f+36|0,f,f+16|0);i=f;return}}}function Tu(a){a=a|0;return}function Uu(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;d=i;i=i+112|0;if(((Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)!=0?(r=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0,((Pb[c[(c[r>>2]|0)+48>>2]&127](r)|0)&8|0)!=0):0)?(e=c[b+24>>2]|0,e=Pb[c[(c[e>>2]|0)+36>>2]&127](e)|0,g[d+96>>2]=1.0,g[d+100>>2]=1.0,g[d+104>>2]=0.0,g[d+108>>2]=0.0,(e|0)>0):0){q=0;do{h=c[b+24>>2]|0;h=gc[c[(c[h>>2]|0)+40>>2]&31](h,q)|0;j=c[h+748>>2]|0;if((j|0)>0){f=0;do{r=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;Mb[c[(c[r>>2]|0)+32>>2]&0](r,h+(f*184|0)+36|0,h+(f*184|0)+68|0,+g[h+(f*184|0)+84>>2],c[h+(f*184|0)+152>>2]|0,d+96|0);f=f+1|0}while((f|0)!=(j|0))}q=q+1|0}while((q|0)!=(e|0))}if(!(Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)){i=d;return}r=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0;if(!((Pb[c[(c[r>>2]|0)+48>>2]&127](r)|0)&3)){i=d;return}if((c[b+8>>2]|0)<=0){i=d;return}j=d+84|0;h=d+88|0;f=d+92|0;e=0;do{q=c[(c[b+16>>2]|0)+(e<<2)>>2]|0;if(!(c[q+204>>2]&32)){if((Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0)!=0?(r=Pb[c[(c[b>>2]|0)+20>>2]&127](b)|0,((Pb[c[(c[r>>2]|0)+48>>2]&127](r)|0)&1|0)!=0):0){g[d+80>>2]=1.0;g[j>>2]=1.0;g[h>>2]=1.0;g[f>>2]=0.0;switch(c[q+216>>2]|0){case 3:{g[d+80>>2]=0.0;g[j>>2]=1.0;g[h>>2]=1.0;g[f>>2]=0.0;break};case 5:{g[d+80>>2]=1.0;g[j>>2]=1.0;g[h>>2]=0.0;g[f>>2]=0.0;break};case 1:{g[d+80>>2]=1.0;g[j>>2]=1.0;g[h>>2]=1.0;g[f>>2]=0.0;break};case 2:{g[d+80>>2]=0.0;g[j>>2]=1.0;g[h>>2]=0.0;g[f>>2]=0.0;break};case 4:{g[d+80>>2]=1.0;g[j>>2]=0.0;g[h>>2]=0.0;g[f>>2]=0.0;break};default:{g[d+80>>2]=1.0;g[j>>2]=0.0;g[h>>2]=0.0;g[f>>2]=0.0}}vc[c[(c[b>>2]|0)+28>>2]&127](b,q+4|0,c[q+192>>2]|0,d+80|0)}r=c[b+72>>2]|0;if((r|0)!=0?((Pb[c[(c[r>>2]|0)+48>>2]&127](r)|0)&2|0)!=0:0){g[d+32>>2]=1.0;g[d+36>>2]=0.0;g[d+40>>2]=0.0;g[d+44>>2]=0.0;r=c[q+192>>2]|0;vc[c[(c[r>>2]|0)+8>>2]&127](r,q+4|0,d+64|0,d+48|0);g[d+64>>2]=+g[d+64>>2]+-.019999999552965164;g[d+68>>2]=+g[d+68>>2]+-.019999999552965164;g[d+72>>2]=+g[d+72>>2]+-.019999999552965164;g[d+48>>2]=+g[d+48>>2]+.019999999552965164;g[d+52>>2]=+g[d+52>>2]+.019999999552965164;g[d+56>>2]=+g[d+56>>2]+.019999999552965164;do if(((a[b+44>>0]|0)!=0?(c[q+236>>2]|0)==2:0)?(c[q+204>>2]&3|0)==0:0){r=c[q+192>>2]|0;vc[c[(c[r>>2]|0)+8>>2]&127](r,q+68|0,d+16|0,d);p=+g[d+16>>2]+-.019999999552965164;g[d+16>>2]=p;o=+g[d+20>>2]+-.019999999552965164;g[d+20>>2]=o;n=+g[d+24>>2]+-.019999999552965164;g[d+24>>2]=n;m=+g[d>>2]+.019999999552965164;g[d>>2]=m;l=+g[d+4>>2]+.019999999552965164;g[d+4>>2]=l;k=+g[d+8>>2]+.019999999552965164;g[d+8>>2]=k;if(p<+g[d+64>>2])g[d+64>>2]=p;if(o<+g[d+68>>2])g[d+68>>2]=o;if(n<+g[d+72>>2])g[d+72>>2]=n;n=+g[d+28>>2];if(n<+g[d+76>>2])g[d+76>>2]=n;if(+g[d+48>>2]<m)g[d+48>>2]=m;if(+g[d+52>>2]<l)g[d+52>>2]=l;if(+g[d+56>>2]<k)g[d+56>>2]=k;k=+g[d+12>>2];if(!(+g[d+60>>2]<k))break;g[d+60>>2]=k}while(0);r=c[b+72>>2]|0;vc[c[(c[r>>2]|0)+52>>2]&127](r,d+64|0,d+48|0,d+32|0)}}e=e+1|0}while((e|0)<(c[b+8>>2]|0));i=d;return}function Vu(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;i=i+80|0;r=c[b+8>>2]|0;if((r|0)>0){m=0;do{n=c[(c[b+16>>2]|0)+(m<<2)>>2]|0;if((c[n+236>>2]|0)==1){Nb[c[(c[n>>2]|0)+24>>2]&127](n,d);r=c[b+8>>2]|0}m=m+1|0}while((m|0)<(r|0))}a[j+16>>0]=1;c[j+12>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;a[j+36>>0]=1;c[j+32>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;a[j+56>>0]=1;c[j+52>>2]=0;c[j+44>>2]=0;c[j+48>>2]=0;a[j+76>>0]=1;c[j+72>>2]=0;c[j+64>>2]=0;c[j+68>>2]=0;if((r|0)<=0){Xu(j);i=j;return}u=-1;t=0;p=0;s=0;q=0;m=0;while(1){n=c[(c[(c[b+16>>2]|0)+(m<<2)>>2]|0)+192>>2]|0;o=(n+~(n<<15)>>10^n+~(n<<15))*9|0;o=(o>>6^o)+~((o>>6^o)<<11)>>16^(o>>6^o)+~((o>>6^o)<<11);u=o&u;a:do if(u>>>0<t>>>0?(h=c[p+(u<<2)>>2]|0,(h|0)!=-1):0){u=c[j+72>>2]|0;v=h;while(1){if((n|0)==(c[u+(v<<3)>>2]|0))break;v=c[s+(v<<2)>>2]|0;if((v|0)==-1){f=15;break a}}if(!((v|0)!=-1?((c[j+52>>2]|0)+(v<<2)|0)!=0:0))f=15}else f=15;while(0);if((f|0)==15){f=0;r=o&q+ -1;b:do if(r>>>0<t>>>0?(g=c[p+(r<<2)>>2]|0,(g|0)!=-1):0){t=c[j+72>>2]|0;u=g;while(1){if((n|0)==(c[t+(u<<3)>>2]|0))break;u=c[s+(u<<2)>>2]|0;if((u|0)==-1){f=22;break b}}if((u|0)!=-1)c[(c[j+52>>2]|0)+(u<<2)>>2]=n;else f=22}else f=22;while(0);if((f|0)==22){f=0;p=c[j+44>>2]|0;if((p|0)==(q|0)){s=(q|0)==0?1:q<<1;if((q|0)<(s|0)){if((s|0)!=0?(c[5004]=(c[5004]|0)+1,l=fF((s<<2|3)+16|0)|0,(l|0)!=0):0){c[(l+19&-16)+ -4>>2]=l;t=l+19&-16}else t=0;if((q|0)>0){u=0;do{v=t+(u<<2)|0;if(v)c[v>>2]=c[(c[j+52>>2]|0)+(u<<2)>>2];u=u+1|0}while((u|0)!=(q|0))}u=c[j+52>>2]|0;if(u){if(a[j+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[u+ -4>>2]|0)}c[j+52>>2]=0}a[j+56>>0]=1;c[j+52>>2]=t;c[j+48>>2]=s;s=q}else s=q}else s=p;t=(c[j+52>>2]|0)+(s<<2)|0;if(t)c[t>>2]=n;c[j+44>>2]=s+1;t=c[j+64>>2]|0;if((t|0)==(c[j+68>>2]|0)?(k=(t|0)==0?1:t<<1,(t|0)<(k|0)):0){if((k|0)!=0?(c[5004]=(c[5004]|0)+1,e=fF((k<<3|3)+16|0)|0,(e|0)!=0):0){c[(e+19&-16)+ -4>>2]=e;s=e+19&-16}else s=0;if((t|0)>0){v=0;do{u=s+(v<<3)|0;if(u){x=(c[j+72>>2]|0)+(v<<3)|0;w=c[x+4>>2]|0;c[u>>2]=c[x>>2];c[u+4>>2]=w}v=v+1|0}while((v|0)!=(t|0))}t=c[j+72>>2]|0;if(t){if(a[j+76>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[t+ -4>>2]|0)}c[j+72>>2]=0}a[j+76>>0]=1;c[j+72>>2]=s;c[j+68>>2]=k;t=c[j+64>>2]|0}s=(c[j+72>>2]|0)+(t<<3)|0;if(s){c[s>>2]=n;c[s+4>>2]=0}c[j+64>>2]=t+1;s=c[j+48>>2]|0;if((q|0)<(s|0)){q=c[j+4>>2]|0;do if((q|0)<(s|0)){if((q|0)<=(s|0)){if((c[j+8>>2]|0)<(s|0)){do if(!s)r=0;else{c[5004]=(c[5004]|0)+1;r=fF((s<<2|3)+16|0)|0;if(!r){r=0;break}c[(r+19&-16)+ -4>>2]=r;r=r+19&-16}while(0);v=c[j+12>>2]|0;if((q|0)>0){u=0;do{t=r+(u<<2)|0;if(t)c[t>>2]=c[v+(u<<2)>>2];u=u+1|0}while((u|0)!=(q|0))}if(v){if(a[j+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[v+ -4>>2]|0)}c[j+12>>2]=0}a[j+16>>0]=1;c[j+12>>2]=r;c[j+8>>2]=s}else r=c[j+12>>2]|0;t=q;do{u=r+(t<<2)|0;if(u)c[u>>2]=0;t=t+1|0}while((t|0)!=(s|0))}c[j+4>>2]=s;r=c[j+24>>2]|0;if((r|0)<(s|0)){if((c[j+28>>2]|0)<(s|0)){do if(!s)t=0;else{c[5004]=(c[5004]|0)+1;t=fF((s<<2|3)+16|0)|0;if(!t){t=0;break}c[(t+19&-16)+ -4>>2]=t;t=t+19&-16}while(0);v=c[j+32>>2]|0;if((r|0)>0){w=0;do{u=t+(w<<2)|0;if(u)c[u>>2]=c[v+(w<<2)>>2];w=w+1|0}while((w|0)!=(r|0))}if(v){if(a[j+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[v+ -4>>2]|0)}c[j+32>>2]=0}a[j+36>>0]=1;c[j+32>>2]=t;c[j+28>>2]=s}else t=c[j+32>>2]|0;do{u=t+(r<<2)|0;if(u)c[u>>2]=0;r=r+1|0}while((r|0)!=(s|0))}c[j+24>>2]=s;if((s|0)>0){jF(c[j+12>>2]|0,-1,s<<2|0)|0;jF(c[j+32>>2]|0,-1,s<<2|0)|0}if((q|0)<=0){s=c[j+48>>2]|0;break}t=c[j+72>>2]|0;r=c[j+12>>2]|0;v=c[j+32>>2]|0;s=c[j+48>>2]|0;u=0;do{x=c[t+(u<<3)>>2]|0;x=(x+~(x<<15)>>10^x+~(x<<15))*9|0;x=r+((((x>>6^x)+~((x>>6^x)<<11)>>16^(x>>6^x)+~((x>>6^x)<<11))&s+ -1)<<2)|0;c[v+(u<<2)>>2]=c[x>>2];c[x>>2]=u;u=u+1|0}while((u|0)!=(q|0))}while(0);q=s;r=o&s+ -1}else q=s;x=c[j+12>>2]|0;w=x+(r<<2)|0;s=c[j+32>>2]|0;c[s+(p<<2)>>2]=c[w>>2];c[w>>2]=p;p=x}Nb[c[(c[n>>2]|0)+60>>2]&127](n,d);r=c[b+8>>2]|0}m=m+1|0;if((m|0)>=(r|0))break;u=q+ -1|0;t=c[j+4>>2]|0}Xu(j);i=j;return}function Wu(a,b){a=a|0;b=b|0;var d=0;d=i;Lb[c[(c[b>>2]|0)+32>>2]&511](b);Vu(a,b);Lb[c[(c[b>>2]|0)+36>>2]&511](b);i=d;return}function Xu(b){b=b|0;var d=0,e=0;d=i;e=c[b+72>>2]|0;if(e){if(a[b+76>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+72>>2]=0}a[b+76>>0]=1;c[b+72>>2]=0;c[b+64>>2]=0;c[b+68>>2]=0;e=c[b+52>>2]|0;if(e){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;e=c[b+12>>2]|0;if(!e){a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;e=b+8|0;c[e>>2]=0;i=d;return}if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+12>>2]=0;a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;e=b+8|0;c[e>>2]=0;i=d;return}function Yu(a){a=a|0;return}function Zu(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function _u(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0.0,H=0.0;d=i;i=i+96|0;p=+g[b>>2];j=+g[a+28>>2];q=+g[b+4>>2];l=+g[a+32>>2];r=+g[b+8>>2];n=+g[a+36>>2];s=+g[a+44>>2];t=+g[a+48>>2];f=+g[a+52>>2];v=+g[a+60>>2];w=+g[a+64>>2];x=+g[a+68>>2];o=+g[a+76>>2];u=+g[a+80>>2];y=+g[a+84>>2];g[d+80>>2]=p*j+q*l+r*n+o;g[d+84>>2]=p*s+q*t+r*f+u;g[d+88>>2]=p*v+q*w+r*x+y;g[d+92>>2]=0.0;h=+g[b+16>>2];k=+g[b+20>>2];m=+g[b+24>>2];g[d+64>>2]=h*j+k*l+m*n+o;g[d+68>>2]=h*s+k*t+m*f+u;g[d+72>>2]=h*v+k*w+m*x+y;g[d+76>>2]=0.0;z=+g[b+32>>2];A=+g[b+36>>2];B=+g[b+40>>2];g[d+48>>2]=z*j+A*l+B*n+o;g[d+52>>2]=z*s+A*t+B*f+u;g[d+56>>2]=z*v+A*w+B*x+y;g[d+60>>2]=0.0;C=(p*j+q*l+r*n+o+(h*j+k*l+m*n+o)+(z*j+A*l+B*n+o))*.3333333432674408;D=(p*s+q*t+r*f+u+(h*s+k*t+m*f+u)+(z*s+A*t+B*f+u))*.3333333432674408;E=(p*v+q*w+r*x+y+(h*v+k*w+m*x+y)+(z*v+A*w+B*x+y))*.3333333432674408;g[d+32>>2]=C;g[d+36>>2]=D;g[d+40>>2]=E;g[d+44>>2]=0.0;e=c[a+8>>2]|0;if(!((Pb[c[(c[e>>2]|0)+48>>2]&127](e)|0)&16384)){b=c[a+8>>2]|0;F=c[b>>2]|0;F=F+8|0;F=c[F>>2]|0;e=a+12|0;vc[F&127](b,d+80|0,d+64|0,e);b=c[a+8>>2]|0;F=c[b>>2]|0;F=F+8|0;F=c[F>>2]|0;vc[F&127](b,d+64|0,d+48|0,e);b=c[a+8>>2]|0;a=c[b>>2]|0;a=a+8|0;a=c[a>>2]|0;vc[a&127](b,d+48|0,d+80|0,e);i=d;return}H=h*j+k*l+m*n+o-(p*j+q*l+r*n+o);G=h*s+k*t+m*f+u-(p*s+q*t+r*f+u);m=h*v+k*w+m*x+y-(p*v+q*w+r*x+y);o=z*j+A*l+B*n+o-(p*j+q*l+r*n+o);u=z*s+A*t+B*f+u-(p*s+q*t+r*f+u);A=z*v+A*w+B*x+y-(p*v+q*w+r*x+y);B=1.0/+Q(+((H*u-G*o)*(H*u-G*o)+((G*A-m*u)*(G*A-m*u)+(m*o-H*A)*(m*o-H*A))));g[d+16>>2]=1.0;g[d+20>>2]=1.0;g[d+24>>2]=0.0;g[d+28>>2]=0.0;e=c[a+8>>2]|0;b=c[(c[e>>2]|0)+8>>2]|0;g[d>>2]=B*(G*A-m*u)+C;g[d+4>>2]=B*(m*o-H*A)+D;g[d+8>>2]=B*(H*u-G*o)+E;g[d+12>>2]=0.0;vc[b&127](e,d+32|0,d,d+16|0);e=c[a+8>>2]|0;b=c[e>>2]|0;b=b+8|0;b=c[b>>2]|0;F=a+12|0;vc[b&127](e,d+80|0,d+64|0,F);e=c[a+8>>2]|0;b=c[e>>2]|0;b=b+8|0;b=c[b>>2]|0;vc[b&127](e,d+64|0,d+48|0,F);e=c[a+8>>2]|0;b=c[e>>2]|0;b=b+8|0;b=c[b>>2]|0;vc[b&127](e,d+48|0,d+80|0,F);i=d;return}function $u(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+8>>2]&127](a,b,d,e);i=f;return}function av(a){a=a|0;var b=0;b=i;gF(a+ -4|0);i=b;return}function bv(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a+ -4>>2]|0)+8>>2]&127](a+ -4|0,b,d,e);i=f;return}function cv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function dv(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0,A=0;n=i;i=i+192|0;h=c[(c[b+4>>2]|0)+740>>2]|0;j=c[(c[b+8>>2]|0)+8>>2]|0;q=+g[e>>2];k=+g[d>>2]*f+q;o=+g[e+4>>2];l=+g[d+4>>2]*f+o;p=+g[e+8>>2];m=+g[d+8>>2]*f+p;if((h|0)!=(j|0)){w=c[(c[b+12>>2]|0)+8>>2]|0;x=k- +g[w+52>>2];s=l- +g[w+56>>2];t=m- +g[w+60>>2];v=q- +g[j+52>>2];u=o- +g[j+56>>2];r=p- +g[j+60>>2];q=x*+g[w+4>>2]+s*+g[w+20>>2]+t*+g[w+36>>2];o=x*+g[w+8>>2]+s*+g[w+24>>2]+t*+g[w+40>>2];p=x*+g[w+12>>2]+s*+g[w+28>>2]+t*+g[w+44>>2];t=v*+g[j+4>>2]+u*+g[j+20>>2]+r*+g[j+36>>2];s=v*+g[j+8>>2]+u*+g[j+24>>2]+r*+g[j+40>>2];r=v*+g[j+12>>2]+u*+g[j+28>>2]+r*+g[j+44>>2]}else{u=k- +g[h+52>>2];s=l- +g[h+56>>2];t=m- +g[h+60>>2];w=c[(c[b+12>>2]|0)+8>>2]|0;v=q- +g[w+52>>2];x=o- +g[w+56>>2];r=p- +g[w+60>>2];q=u*+g[h+4>>2]+s*+g[h+20>>2]+t*+g[h+36>>2];o=u*+g[h+8>>2]+s*+g[h+24>>2]+t*+g[h+40>>2];p=u*+g[h+12>>2]+s*+g[h+28>>2]+t*+g[h+44>>2];t=v*+g[w+4>>2]+x*+g[w+20>>2]+r*+g[w+36>>2];s=v*+g[w+8>>2]+x*+g[w+24>>2]+r*+g[w+40>>2];r=v*+g[w+12>>2]+x*+g[w+28>>2]+r*+g[w+44>>2]}g[n>>2]=q;g[n+4>>2]=o;g[n+8>>2]=p;g[n+12>>2]=0.0;g[n+16>>2]=t;g[n+20>>2]=s;g[n+24>>2]=r;g[n+28>>2]=0.0;c[n+64>>2]=c[d+0>>2];c[n+68>>2]=c[d+4>>2];c[n+72>>2]=c[d+8>>2];c[n+76>>2]=c[d+12>>2];g[n+80>>2]=f;g[n+84>>2]=0.0;g[n+88>>2]=0.0;g[n+92>>2]=0.0;c[n+112>>2]=0;a[n+116>>0]=0;c[n+120>>2]=0;c[n+124>>2]=0;c[n+128>>2]=0;c[n+132>>2]=0;c[n+136>>2]=0;c[n+140>>2]=0;c[n+144>>2]=0;c[n+148>>2]=0;g[n+48>>2]=k;g[n+52>>2]=l;g[n+56>>2]=m;g[n+60>>2]=0.0;c[n+32>>2]=c[e+0>>2];c[n+36>>2]=c[e+4>>2];c[n+40>>2]=c[e+8>>2];c[n+44>>2]=c[e+12>>2];if((h|0)!=(j|0)){z=c[b+20>>2]|0;c[n+96>>2]=z;e=c[b+16>>2]|0;c[n+100>>2]=e;y=c[b+28>>2]|0;c[n+104>>2]=y;w=c[b+24>>2]|0;c[n+108>>2]=w;d=b+12|0;A=(h|0)!=(j|0)?d:b+8|0;A=c[A>>2]|0;d=(h|0)!=(j|0)?b+8|0:d;d=c[d>>2]|0;j=b+32|0;j=c[j>>2]|0;h=c[j>>2]|0;h=h+12|0;h=c[h>>2]|0;+Vb[h&1](j,n,A,z,y,d,e,w);i=n;return}else{e=c[b+16>>2]|0;c[n+96>>2]=e;z=c[b+20>>2]|0;c[n+100>>2]=z;w=c[b+24>>2]|0;c[n+104>>2]=w;A=c[b+28>>2]|0;c[n+108>>2]=A;y=b+12|0;d=(h|0)!=(j|0)?y:b+8|0;d=c[d>>2]|0;y=(h|0)!=(j|0)?b+8|0:y;y=c[y>>2]|0;j=b+32|0;j=c[j>>2]|0;h=c[j>>2]|0;h=h+12|0;h=c[h>>2]|0;+Vb[h&1](j,n,d,e,w,y,z,A);i=n;return}}function ev(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function fv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0,j=0;d=i;i=i+32|0;e=c[a+184>>2]|0;if(+g[e+4>>2]==0.0){b=0;i=d;return b|0}b=c[b>>2]|0;if(!(gc[c[(c[e>>2]|0)+8>>2]&31](e,c[b+188>>2]|0)|0)){b=1;i=d;return b|0}h=c[a+192>>2]|0;j=c[b+192>>2]|0;e=c[a+184>>2]|0;f=+g[a+188>>2];c[d>>2]=0;c[d+4>>2]=j;c[d+8>>2]=b;c[d+12>>2]=b+4;c[d+16>>2]=-1;c[d+20>>2]=-1;Ku(h,a+36|0,a+100|0,d,e,f);b=1;i=d;return b|0}function gv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function hv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;i=i+32|0;e=c[a+216>>2]|0;if(+g[e+4>>2]==0.0){b=0;i=d;return b|0}b=c[b>>2]|0;if(!(gc[c[(c[e>>2]|0)+8>>2]&31](e,c[b+188>>2]|0)|0)){b=1;i=d;return b|0}f=c[b+192>>2]|0;e=c[a+216>>2]|0;c[d>>2]=0;c[d+4>>2]=f;c[d+8>>2]=b;c[d+12>>2]=b+4;c[d+16>>2]=-1;c[d+20>>2]=-1;Hu(a+68|0,a+132|0,d,e);b=1;i=d;return b|0}function iv(a){a=a|0;return}function jv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function kv(a,b){a=a|0;b=b|0;var d=0;d=i;a=c[a+12>>2]|0;a=gc[c[(c[a>>2]|0)+8>>2]&31](a,b)|0;i=d;return a|0}function lv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0;e=i;i=i+16|0;c[e>>2]=-1;c[e+4>>2]=c[a+16>>2];if(!(c[b+4>>2]|0))c[b+4>>2]=e;h=c[a+12>>2]|0;f=+hc[c[(c[h>>2]|0)+12>>2]&15](h,b,d);g[a+4>>2]=+g[(c[a+12>>2]|0)+4>>2];i=e;return+f}function mv(a){a=a|0;return}function nv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ov(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=+e;f=f|0;h=h|0;var j=0;j=i;i=i+64|0;c[j+48>>2]=f;c[j+52>>2]=h;h=c[a+212>>2]|0;if(!(+g[h+4>>2]>=e)){i=j;return+e}c[j>>2]=c[a+216>>2];c[j+4>>2]=j+48;c[j+8>>2]=c[b+0>>2];c[j+12>>2]=c[b+4>>2];c[j+16>>2]=c[b+8>>2];c[j+20>>2]=c[b+12>>2];c[j+24>>2]=c[d+0>>2];c[j+28>>2]=c[d+4>>2];c[j+32>>2]=c[d+8>>2];c[j+36>>2]=c[d+12>>2];g[j+40>>2]=e;e=+hc[c[(c[h>>2]|0)+12>>2]&15](h,j,0);i=j;return+e}function pv(a){a=a|0;return}function qv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function rv(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=+e;f=f|0;h=h|0;var j=0;j=i;i=i+64|0;c[j+48>>2]=f;c[j+52>>2]=h;h=c[a+212>>2]|0;if(!(+g[h+4>>2]>=e)){i=j;return+e}c[j>>2]=c[a+216>>2];c[j+4>>2]=j+48;c[j+8>>2]=c[b+0>>2];c[j+12>>2]=c[b+4>>2];c[j+16>>2]=c[b+8>>2];c[j+20>>2]=c[b+12>>2];c[j+24>>2]=c[d+0>>2];c[j+28>>2]=c[d+4>>2];c[j+32>>2]=c[d+8>>2];c[j+36>>2]=c[d+12>>2];g[j+40>>2]=e;e=+hc[c[(c[h>>2]|0)+12>>2]&15](h,j,1);i=j;return+e}function sv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function tv(a){a=a|0;return}function uv(a){a=a|0;return}function vv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function wv(a,b){a=a|0;b=b|0;var d=0;d=i;a=c[a+20>>2]|0;a=gc[c[(c[a>>2]|0)+8>>2]&31](a,b)|0;i=d;return a|0}function xv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0;e=i;i=i+16|0;c[e>>2]=-1;c[e+4>>2]=c[a+24>>2];if(!(c[b+4>>2]|0))c[b+4>>2]=e;h=c[a+20>>2]|0;f=+hc[c[(c[h>>2]|0)+12>>2]&15](h,b,d);g[a+4>>2]=+g[(c[a+20>>2]|0)+4>>2];i=e;return+f}function yv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function zv(a,b,c){a=a|0;b=b|0;c=c|0;return}function Av(a,d){a=a|0;d=d|0;var e=0,f=0,h=0;e=i;i=i+128|0;f=c[d+36>>2]|0;d=c[(c[a+8>>2]|0)+24>>2]|0;h=c[d+(f*80|0)+64>>2]|0;no(e+56|0,c[a+12>>2]|0,d+(f*80|0)|0);d=c[a+4>>2]|0;c[e+32>>2]=0;c[e+36>>2]=h;c[e+40>>2]=d;c[e+44>>2]=e+56;c[e+48>>2]=-1;c[e+52>>2]=f;d=c[a+24>>2]|0;g[e+4>>2]=1.0;c[e+8>>2]=0;b[e+12>>1]=1;b[e+14>>1]=-1;c[e+16>>2]=0;c[e>>2]=8664;c[e+20>>2]=d;c[e+24>>2]=f;g[e+4>>2]=+g[d+4>>2];c[e+16>>2]=c[d+16>>2];Hu(c[a+16>>2]|0,c[a+20>>2]|0,e+32|0,e);i=e;return}function Bv(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;Nb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=e;return}function Cv(a,b){a=a|0;b=b|0;return 1}function Dv(a,b){a=a|0;b=b|0;return 1}function Ev(a){a=a|0;return}function Fv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Gv(a,b,d,e,f){a=a|0;b=b|0;d=+d;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h=i;i=i+48|0;c[h+32>>2]=e;c[h+36>>2]=f;n=+g[b>>2];m=+g[b+4>>2];j=+g[b+8>>2];l=+g[a+56>>2]*n+ +g[a+60>>2]*m+ +g[a+64>>2]*j;k=n*+g[a+72>>2]+m*+g[a+76>>2]+j*+g[a+80>>2];j=n*+g[a+88>>2]+m*+g[a+92>>2]+j*+g[a+96>>2];c[h>>2]=c[a+48>>2];c[h+4>>2]=h+32;g[h+8>>2]=l;g[h+12>>2]=k;g[h+16>>2]=j;g[h+20>>2]=0.0;g[h+24>>2]=d;e=c[a+44>>2]|0;d=+hc[c[(c[e>>2]|0)+12>>2]&15](e,h,1);i=h;return+d}function Hv(a){a=a|0;return}function Iv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Jv(a,b,d,e,f){a=a|0;b=b|0;d=+d;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h=i;i=i+48|0;c[h+32>>2]=e;c[h+36>>2]=f;n=+g[b>>2];m=+g[b+4>>2];j=+g[b+8>>2];l=+g[a+56>>2]*n+ +g[a+60>>2]*m+ +g[a+64>>2]*j;k=n*+g[a+72>>2]+m*+g[a+76>>2]+j*+g[a+80>>2];j=n*+g[a+88>>2]+m*+g[a+92>>2]+j*+g[a+96>>2];c[h>>2]=c[a+48>>2];c[h+4>>2]=h+32;g[h+8>>2]=l;g[h+12>>2]=k;g[h+16>>2]=j;g[h+20>>2]=0.0;g[h+24>>2]=d;e=c[a+44>>2]|0;d=+hc[c[(c[e>>2]|0)+12>>2]&15](e,h,1);i=h;return+d}function Kv(a,b){a=a|0;b=+b;return}function Lv(a,b){a=a|0;b=b|0;return}function Mv(a,b,c){a=a|0;b=b|0;c=c|0;return}function Nv(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Ov(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;c[b+8>>2]=0;c[b>>2]=9512;a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;g[b+32>>2]=999999984306749400.0;g[b+36>>2]=999999984306749400.0;g[b+40>>2]=999999984306749400.0;g[b+44>>2]=0.0;g[b+48>>2]=-999999984306749400.0;g[b+52>>2]=-999999984306749400.0;g[b+56>>2]=-999999984306749400.0;g[b+60>>2]=0.0;c[b+64>>2]=0;c[b+68>>2]=1;g[b+72>>2]=0.0;g[b+76>>2]=1.0;g[b+80>>2]=1.0;g[b+84>>2]=1.0;g[b+88>>2]=0.0;c[b+4>>2]=31;if(!d){i=e;return}c[5004]=(c[5004]|0)+1;d=fF(79)|0;if((d|0)!=0?(f=d+19&-16,c[f+ -4>>2]=d,(d+19&-16|0)!=0):0){a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;c[(d+19&-16)>>2]=0;c[f+4>>2]=0;c[f+8>>2]=-1;c[f+12>>2]=0;c[f+16>>2]=0;f=d+19&-16}else f=0;c[b+64>>2]=f;i=e;return}function Pv(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=9512;e=c[b+64>>2]|0;if((e|0)!=0?(Ux(e),f=c[b+64>>2]|0,(f|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}e=c[b+24>>2]|0;if(e){if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+24>>2]=0}a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function Qv(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=9512;e=c[b+64>>2]|0;if((e|0)!=0?(Ux(e),f=c[b+64>>2]|0,(f|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}e=c[b+24>>2]|0;if(!e){a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;f=b+20|0;c[f>>2]=0;i=d;return}if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+24>>2]=0;a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;f=b+20|0;c[f>>2]=0;i=d;return}function Rv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+80|0;c[a+68>>2]=(c[a+68>>2]|0)+1;e=c[a+16>>2]|0;if((e|0)<=0){h=c[a>>2]|0;h=h+68|0;h=c[h>>2]|0;Lb[h&511](a);i=d;return}h=e;do{e=e+ -1|0;g=c[a+24>>2]|0;if((c[g+(e*80|0)+64>>2]|0)==(b|0)){c[a+68>>2]=(c[a+68>>2]|0)+1;f=c[a+64>>2]|0;if(f){g=c[g+(e*80|0)+76>>2]|0;Yx(f,g)|0;h=c[f+4>>2]|0;if(h){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[f+4>>2]=g;c[f+12>>2]=(c[f+12>>2]|0)+ -1;h=c[a+16>>2]|0;g=c[a+24>>2]|0}h=h+ -1|0;m=g+(e*80|0)|0;c[d+0>>2]=c[m+0>>2];c[d+4>>2]=c[m+4>>2];c[d+8>>2]=c[m+8>>2];c[d+12>>2]=c[m+12>>2];l=g+(e*80|0)+16|0;c[d+16>>2]=c[l+0>>2];c[d+20>>2]=c[l+4>>2];c[d+24>>2]=c[l+8>>2];c[d+28>>2]=c[l+12>>2];k=g+(e*80|0)+32|0;c[d+32>>2]=c[k+0>>2];c[d+36>>2]=c[k+4>>2];c[d+40>>2]=c[k+8>>2];c[d+44>>2]=c[k+12>>2];j=g+(e*80|0)+48|0;c[d+48>>2]=c[j+0>>2];c[d+52>>2]=c[j+4>>2];c[d+56>>2]=c[j+8>>2];c[d+60>>2]=c[j+12>>2];f=g+(e*80|0)+64|0;c[d+64>>2]=c[f+0>>2];c[d+68>>2]=c[f+4>>2];c[d+72>>2]=c[f+8>>2];c[d+76>>2]=c[f+12>>2];n=g+(h*80|0)|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2];c[m+12>>2]=c[n+12>>2];m=g+(h*80|0)+16|0;c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[l+12>>2]=c[m+12>>2];l=g+(h*80|0)+32|0;c[k+0>>2]=c[l+0>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];k=g+(h*80|0)+48|0;c[j+0>>2]=c[k+0>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];g=g+(h*80|0)+64|0;c[f+0>>2]=c[g+0>>2];c[f+4>>2]=c[g+4>>2];c[f+8>>2]=c[g+8>>2];c[f+12>>2]=c[g+12>>2];g=c[a+24>>2]|0;c[g+(h*80|0)+0>>2]=c[d+0>>2];c[g+(h*80|0)+4>>2]=c[d+4>>2];c[g+(h*80|0)+8>>2]=c[d+8>>2];c[g+(h*80|0)+12>>2]=c[d+12>>2];c[g+(h*80|0)+16>>2]=c[d+16>>2];c[g+(h*80|0)+20>>2]=c[d+20>>2];c[g+(h*80|0)+24>>2]=c[d+24>>2];c[g+(h*80|0)+28>>2]=c[d+28>>2];c[g+(h*80|0)+32>>2]=c[d+32>>2];c[g+(h*80|0)+36>>2]=c[d+36>>2];c[g+(h*80|0)+40>>2]=c[d+40>>2];c[g+(h*80|0)+44>>2]=c[d+44>>2];c[g+(h*80|0)+48>>2]=c[d+48>>2];c[g+(h*80|0)+52>>2]=c[d+52>>2];c[g+(h*80|0)+56>>2]=c[d+56>>2];c[g+(h*80|0)+60>>2]=c[d+60>>2];c[g+(h*80|0)+64>>2]=c[d+64>>2];c[g+(h*80|0)+68>>2]=c[d+68>>2];c[g+(h*80|0)+72>>2]=c[d+72>>2];c[g+(h*80|0)+76>>2]=c[d+76>>2];if(c[a+64>>2]|0)c[(c[(c[a+24>>2]|0)+(e*80|0)+76>>2]|0)+36>>2]=e;h=(c[a+16>>2]|0)+ -1|0;c[a+16>>2]=h}}while((e|0)>0);n=c[a>>2]|0;n=n+68|0;n=c[n>>2]|0;Lb[n&511](a);i=d;return}function Sv(a){a=a|0;var b=0,d=0,e=0.0,f=0,h=0;b=i;i=i+32|0;g[a+32>>2]=999999984306749400.0;g[a+36>>2]=999999984306749400.0;g[a+40>>2]=999999984306749400.0;g[a+44>>2]=0.0;g[a+48>>2]=-999999984306749400.0;g[a+52>>2]=-999999984306749400.0;g[a+56>>2]=-999999984306749400.0;g[a+60>>2]=0.0;if((c[a+16>>2]|0)<=0){i=b;return}d=0;do{f=c[a+24>>2]|0;h=c[f+(d*80|0)+64>>2]|0;vc[c[(c[h>>2]|0)+8>>2]&127](h,f+(d*80|0)|0,b+16|0,b);e=+g[b+16>>2];if(+g[a+32>>2]>e)g[a+32>>2]=e;e=+g[b>>2];if(+g[a+48>>2]<e)g[a+48>>2]=e;e=+g[b+20>>2];if(+g[a+36>>2]>e)g[a+36>>2]=e;e=+g[b+4>>2];if(+g[a+52>>2]<e)g[a+52>>2]=e;e=+g[b+24>>2];if(+g[a+40>>2]>e)g[a+40>>2]=e;e=+g[b+8>>2];if(+g[a+56>>2]<e)g[a+56>>2]=e;d=d+1|0}while((d|0)<(c[a+16>>2]|0));i=b;return}function Tv(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0;f=i;t=+g[a+48>>2];v=+g[a+32>>2];E=+g[a+52>>2];w=+g[a+36>>2];F=+g[a+56>>2];k=+g[a+40>>2];G=(c[a+16>>2]|0)==0;x=G?0.0:(F+k)*.5;z=G?0.0:(E+w)*.5;B=G?0.0:(t+v)*.5;o=+$b[c[(c[a>>2]|0)+48>>2]&15](a);m=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=(G?0.0:(t-v)*.5)+o;m=(G?0.0:(E-w)*.5)+m;k=(G?0.0:(F-k)*.5)+ +$b[c[(c[a>>2]|0)+48>>2]&15](a);F=+g[b>>2];w=+P(+F);E=+g[b+4>>2];v=+P(+E);t=+g[b+8>>2];u=+P(+t);D=+g[b+16>>2];s=+P(+D);C=+g[b+20>>2];r=+P(+C);p=+g[b+24>>2];q=+P(+p);A=+g[b+32>>2];n=+P(+A);y=+g[b+36>>2];l=+P(+y);h=+g[b+40>>2];j=+P(+h);t=B*F+z*E+x*t+ +g[b+48>>2];p=B*D+z*C+x*p+ +g[b+52>>2];h=B*A+z*y+x*h+ +g[b+56>>2];g[d>>2]=t-(o*w+m*v+k*u);g[d+4>>2]=p-(o*s+m*r+k*q);g[d+8>>2]=h-(o*n+m*l+k*j);g[d+12>>2]=0.0;g[e>>2]=o*w+m*v+k*u+t;g[e+4>>2]=o*s+m*r+k*q+p;g[e+8>>2]=o*n+m*l+k*j+h;g[e+12>>2]=0.0;i=f;return}function Uv(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0;e=i;i=i+96|0;g[e+32>>2]=1.0;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=1.0;c[e+56>>2]=0;c[e+60>>2]=0;c[e+64>>2]=0;c[e+68>>2]=0;g[e+72>>2]=1.0;k=e+76|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;vc[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);h=(+g[e>>2]- +g[e+16>>2])*.5*2.0;f=(+g[e+4>>2]- +g[e+20>>2])*.5*2.0;j=(+g[e+8>>2]- +g[e+24>>2])*.5*2.0;g[d>>2]=b/12.0*(f*f+j*j);g[d+4>>2]=b/12.0*(h*h+j*j);g[d+8>>2]=b/12.0*(h*h+f*f);i=e;return}function Vv(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0;k=i;i=i+144|0;if((c[a+16>>2]|0)<=0){p=a+76|0;c[p+0>>2]=c[b+0>>2];c[p+4>>2]=c[b+4>>2];c[p+8>>2]=c[b+8>>2];c[p+12>>2]=c[b+12>>2];p=c[a>>2]|0;p=p+68|0;p=c[p>>2]|0;Lb[p&511](a);i=k;return}f=k+32|0;h=k+48|0;j=k+64|0;e=0;do{p=c[a+24>>2]|0;o=p+(e*80|0)|0;c[k+16>>2]=c[o+0>>2];c[k+20>>2]=c[o+4>>2];c[k+24>>2]=c[o+8>>2];c[k+28>>2]=c[o+12>>2];o=p+(e*80|0)+16|0;c[f+0>>2]=c[o+0>>2];c[f+4>>2]=c[o+4>>2];c[f+8>>2]=c[o+8>>2];c[f+12>>2]=c[o+12>>2];o=p+(e*80|0)+32|0;c[h+0>>2]=c[o+0>>2];c[h+4>>2]=c[o+4>>2];c[h+8>>2]=c[o+8>>2];c[h+12>>2]=c[o+12>>2];o=p+(e*80|0)+48|0;c[j+0>>2]=c[o+0>>2];c[j+4>>2]=c[o+4>>2];c[j+8>>2]=c[o+8>>2];c[j+12>>2]=c[o+12>>2];p=c[p+(e*80|0)+64>>2]|0;p=Pb[c[(c[p>>2]|0)+28>>2]&127](p)|0;c[k+0>>2]=c[p+0>>2];c[k+4>>2]=c[p+4>>2];c[k+8>>2]=c[p+8>>2];q=+g[k+4>>2]*+g[b+4>>2]/+g[a+80>>2];r=+g[k+8>>2]*+g[b+8>>2]/+g[a+84>>2];g[k>>2]=+g[k>>2]*+g[b>>2]/+g[a+76>>2];g[k+4>>2]=q;g[k+8>>2]=r;g[k+12>>2]=0.0;p=c[(c[a+24>>2]|0)+(e*80|0)+64>>2]|0;Nb[c[(c[p>>2]|0)+24>>2]&127](p,k);r=+g[k+68>>2]*+g[b+4>>2]/+g[a+80>>2];q=+g[k+72>>2]*+g[b+8>>2]/+g[a+84>>2];g[k+64>>2]=+g[j>>2]*+g[b>>2]/+g[a+76>>2];g[k+68>>2]=r;g[k+72>>2]=q;g[k+76>>2]=0.0;p=c[a+24>>2]|0;o=p+(e*80|0)|0;c[o+0>>2]=c[k+16>>2];c[o+4>>2]=c[k+20>>2];c[o+8>>2]=c[k+24>>2];c[o+12>>2]=c[k+28>>2];o=p+(e*80|0)+16|0;c[o+0>>2]=c[f+0>>2];c[o+4>>2]=c[f+4>>2];c[o+8>>2]=c[f+8>>2];c[o+12>>2]=c[f+12>>2];o=p+(e*80|0)+32|0;c[o+0>>2]=c[h+0>>2];c[o+4>>2]=c[h+4>>2];c[o+8>>2]=c[h+8>>2];c[o+12>>2]=c[h+12>>2];p=p+(e*80|0)+48|0;c[p+0>>2]=c[j+0>>2];c[p+4>>2]=c[j+4>>2];c[p+8>>2]=c[j+8>>2];c[p+12>>2]=c[j+12>>2];if(c[a+64>>2]|0){l=c[(c[a+24>>2]|0)+(e*80|0)+64>>2]|0;vc[c[(c[l>>2]|0)+8>>2]&127](l,k+16|0,k+128|0,k+112|0);c[k+80>>2]=c[k+128>>2];c[k+84>>2]=c[k+132>>2];c[k+88>>2]=c[k+136>>2];c[k+92>>2]=c[k+140>>2];c[k+96>>2]=c[k+112>>2];c[k+100>>2]=c[k+116>>2];c[k+104>>2]=c[k+120>>2];c[k+108>>2]=c[k+124>>2];l=c[a+64>>2]|0;d=c[(c[a+24>>2]|0)+(e*80|0)+76>>2]|0;o=Yx(l,d)|0;a:do if(o){m=c[l+8>>2]|0;if((m|0)<=-1){o=c[l>>2]|0;break}if((m|0)>0){n=0;while(1){p=c[o+32>>2]|0;n=n+1|0;if(!p)break a;if((n|0)>=(m|0)){o=p;break}else o=p}}}else o=0;while(0);c[d+0>>2]=c[k+80>>2];c[d+4>>2]=c[k+84>>2];c[d+8>>2]=c[k+88>>2];c[d+12>>2]=c[k+92>>2];c[d+16>>2]=c[k+96>>2];c[d+20>>2]=c[k+100>>2];c[d+24>>2]=c[k+104>>2];c[d+28>>2]=c[k+108>>2];Xx(l,o,d)}e=e+1|0}while((e|0)<(c[a+16>>2]|0));p=a+76|0;c[p+0>>2]=c[b+0>>2];c[p+4>>2]=c[b+4>>2];c[p+8>>2]=c[b+8>>2];c[p+12>>2]=c[b+12>>2];p=c[a>>2]|0;p=p+68|0;p=c[p>>2]|0;Lb[p&511](a);i=k;return}function Wv(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;k=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=k;if(k)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+20>>2]=+g[a+72>>2];f=c[a+16>>2]|0;c[b+16>>2]=f;c[b+12>>2]=0;if(!f){i=e;return 9616}f=Yb[c[(c[d>>2]|0)+16>>2]&31](d,76,f)|0;k=c[f+8>>2]|0;c[b+12>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,k)|0;if((c[b+16>>2]|0)>0){j=c[a+24>>2]|0;h=0;while(1){g[k+72>>2]=+g[j+(h*80|0)+72>>2];c[k+64>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,c[j+(h*80|0)+64>>2]|0)|0;if(!(gc[c[(c[d>>2]|0)+24>>2]&31](d,c[(c[a+24>>2]|0)+(h*80|0)+64>>2]|0)|0)){j=c[(c[d>>2]|0)+16>>2]|0;l=c[(c[a+24>>2]|0)+(h*80|0)+64>>2]|0;l=Pb[c[(c[l>>2]|0)+52>>2]&127](l)|0;l=Yb[j&31](d,l,1)|0;j=c[(c[a+24>>2]|0)+(h*80|0)+64>>2]|0;j=Yb[c[(c[j>>2]|0)+56>>2]&31](j,c[l+8>>2]|0,d)|0;Jb[c[(c[d>>2]|0)+20>>2]&31](d,l,j,1346455635,c[(c[a+24>>2]|0)+(h*80|0)+64>>2]|0)}j=c[a+24>>2]|0;c[k+68>>2]=c[j+(h*80|0)+68>>2];g[k>>2]=+g[j+(h*80|0)>>2];g[k+4>>2]=+g[j+(h*80|0)+4>>2];g[k+8>>2]=+g[j+(h*80|0)+8>>2];g[k+12>>2]=+g[j+(h*80|0)+12>>2];g[k+16>>2]=+g[j+(h*80|0)+16>>2];g[k+20>>2]=+g[j+(h*80|0)+20>>2];g[k+24>>2]=+g[j+(h*80|0)+24>>2];g[k+28>>2]=+g[j+(h*80|0)+28>>2];g[k+32>>2]=+g[j+(h*80|0)+32>>2];g[k+36>>2]=+g[j+(h*80|0)+36>>2];g[k+40>>2]=+g[j+(h*80|0)+40>>2];g[k+44>>2]=+g[j+(h*80|0)+44>>2];g[k+48>>2]=+g[j+(h*80|0)+48>>2];g[k+52>>2]=+g[j+(h*80|0)+52>>2];g[k+56>>2]=+g[j+(h*80|0)+56>>2];g[k+60>>2]=+g[j+(h*80|0)+60>>2];h=h+1|0;if((h|0)>=(c[b+16>>2]|0)){b=d;break}else k=k+76|0}}else b=d;Jb[c[(c[b>>2]|0)+20>>2]&31](d,f,9584,1497453121,c[f+8>>2]|0);i=e;return 9616}function Xv(a){a=a|0;return a+76|0}function Yv(a){a=a|0;return 9680}function Zv(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function _v(a){a=a|0;return+(+g[a+72>>2])}function $v(a){a=a|0;return 24}function aw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0,j=0,k=0.0,l=0,m=0.0,n=0.0;j=i;i=i+48|0;f=+g[b+60>>2]*.5;e=c[b+68>>2]|0;k=+g[d>>2];m=+g[d+4>>2];n=+g[d+8>>2];n=+Q(+(k*k+m*m+n*n));h=c[b+64>>2]|0;if(+g[d+(e<<2)>>2]>n*+g[b+52>>2]){g[j+32+(h<<2)>>2]=0.0;g[j+32+(e<<2)>>2]=f;g[j+32+(c[b+72>>2]<<2)>>2]=0.0;c[a+0>>2]=c[j+32>>2];c[a+4>>2]=c[j+36>>2];c[a+8>>2]=c[j+40>>2];c[a+12>>2]=c[j+44>>2];i=j;return}k=+g[d+(h<<2)>>2];l=c[b+72>>2]|0;m=+g[d+(l<<2)>>2];n=+Q(+(k*k+m*m));if(n>1.1920928955078125e-7){n=+g[b+56>>2]/n;g[j+16+(h<<2)>>2]=k*n;g[j+16+(e<<2)>>2]=-f;g[j+16+(l<<2)>>2]=n*m;c[a+0>>2]=c[j+16>>2];c[a+4>>2]=c[j+20>>2];c[a+8>>2]=c[j+24>>2];c[a+12>>2]=c[j+28>>2];i=j;return}else{g[j+(h<<2)>>2]=0.0;g[j+(e<<2)>>2]=-f;g[j+(l<<2)>>2]=0.0;c[a+0>>2]=c[j+0>>2];c[a+4>>2]=c[j+4>>2];c[a+8>>2]=c[j+8>>2];c[a+12>>2]=c[j+12>>2];i=j;return}}function bw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;aw(a,b,c);i=d;return}function cw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;if((e|0)<=0){i=f;return}g=0;do{h=d+(g<<4)|0;aw(f,a,b+(g<<4)|0);c[h+0>>2]=c[f+0>>2];c[h+4>>2]=c[f+4>>2];c[h+8>>2]=c[f+8>>2];c[h+12>>2]=c[f+12>>2];g=g+1|0}while((g|0)!=(e|0));i=f;return}function dw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;aw(a,b,d);if(!(+$b[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function ew(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0,i=0,j=0;j=c[a+68>>2]|0;i=c[a+64>>2]|0;h=c[a+72>>2]|0;e=+g[b+(j<<2)>>2]/+g[a+(j<<2)+12>>2]*+g[a+60>>2];g[a+60>>2]=e;f=+g[a+56>>2]*(+g[b+(i<<2)>>2]/+g[a+(i<<2)+12>>2]+ +g[b+(h<<2)>>2]/+g[a+(h<<2)+12>>2])*.5;g[a+56>>2]=f;g[a+52>>2]=f/+Q(+(e*e+f*f));f=+P(+(+g[b>>2]));e=+P(+(+g[b+4>>2]));d=+P(+(+g[b+8>>2]));g[a+12>>2]=f;g[a+16>>2]=e;g[a+20>>2]=d;g[a+24>>2]=0.0;return}function fw(a){a=a|0;return}function gw(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function hw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+80>>2]&127](a,b,d,e);i=f;return}function iw(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0;e=i;i=i+96|0;g[e+32>>2]=1.0;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=1.0;c[e+56>>2]=0;c[e+60>>2]=0;c[e+64>>2]=0;c[e+68>>2]=0;g[e+72>>2]=1.0;l=e+76|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;vc[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);j=(+g[e>>2]- +g[e+16>>2])*.5;h=(+g[e+4>>2]- +g[e+20>>2])*.5;k=(+g[e+8>>2]- +g[e+24>>2])*.5;f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=b*.0833333283662796*((h+f)*2.0*(h+f)*2.0+(k+f)*2.0*(k+f)*2.0);g[d+4>>2]=b*.0833333283662796*((j+f)*2.0*(j+f)*2.0+(k+f)*2.0*(k+f)*2.0);g[d+8>>2]=b*.0833333283662796*((j+f)*2.0*(j+f)*2.0+(h+f)*2.0*(h+f)*2.0);g[d+12>>2]=0.0;i=e;return}function jw(a){a=a|0;return 10136}function kw(a,b){a=a|0;b=b|0;g[a>>2]=0.0;g[a+4>>2]=1.0;g[a+8>>2]=0.0;g[a+12>>2]=0.0;return}function lw(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function mw(a){a=a|0;return 60}function nw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=h;if(h)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+28>>2]=+g[a+28>>2];g[b+32>>2]=+g[a+32>>2];g[b+36>>2]=+g[a+36>>2];g[b+40>>2]=+g[a+40>>2];g[b+12>>2]=+g[a+12>>2];g[b+16>>2]=+g[a+16>>2];g[b+20>>2]=+g[a+20>>2];g[b+24>>2]=+g[a+24>>2];g[b+44>>2]=+g[a+44>>2];c[b+52>>2]=c[a+68>>2];i=e;return 10120}function ow(a){a=a|0;return}function pw(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function qw(a){a=a|0;return 10112}function rw(a,b){a=a|0;b=b|0;g[a>>2]=0.0;g[a+4>>2]=0.0;g[a+8>>2]=1.0;g[a+12>>2]=0.0;return}function sw(a){a=a|0;return}function tw(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function uw(a){a=a|0;return 10104}function vw(a,b){a=a|0;b=b|0;g[a>>2]=1.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;g[a+12>>2]=0.0;return}function ww(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,O=0;h=i;i=i+288|0;if(!(c[b+16>>2]|0)){K=c[b+12>>2]|0;b=c[b+20>>2]|0;n=+g[d>>2];q=+g[d+4>>2];u=+g[d+8>>2];k=+g[d+16>>2];r=+g[d+20>>2];j=+g[d+24>>2];m=+g[d+32>>2];s=+g[d+36>>2];l=+g[d+40>>2];F=+g[d+48>>2];E=+g[d+52>>2];D=+g[d+56>>2];J=+g[e>>2];I=+g[e+16>>2];y=+g[e+32>>2];H=+g[e+4>>2];G=+g[e+20>>2];w=+g[e+36>>2];v=+g[e+8>>2];z=+g[e+24>>2];x=+g[e+40>>2];C=-+g[e+48>>2];B=-+g[e+52>>2];p=-+g[e+56>>2];d=c[(c[K>>2]|0)+64>>2]|0;A=-+g[b+48>>2];t=-+g[b+52>>2];o=-+g[b+56>>2];g[h+32>>2]=(n*J+k*I+m*y)*A+(n*H+k*G+m*w)*t+(n*v+k*z+m*x)*o;g[h+36>>2]=(q*J+r*I+s*y)*A+(q*H+r*G+s*w)*t+(q*v+r*z+s*x)*o;g[h+40>>2]=(u*J+j*I+l*y)*A+(u*H+j*G+l*w)*t+(u*v+j*z+l*x)*o;g[h+44>>2]=0.0;rc[d&127](h+48|0,K,h+32|0);o=+g[h+48>>2];t=+g[h+52>>2];A=+g[h+56>>2];y=F*J+E*I+D*y+(J*C+I*B+y*p)+((n*J+k*I+m*y)*o+(q*J+r*I+s*y)*t+(u*J+j*I+l*y)*A);w=F*H+E*G+D*w+(H*C+G*B+w*p)+((n*H+k*G+m*w)*o+(q*H+r*G+s*w)*t+(u*H+j*G+l*w)*A);A=F*v+E*z+D*x+(v*C+z*B+x*p)+((n*v+k*z+m*x)*o+(q*v+r*z+s*x)*t+(u*v+j*z+l*x)*A);x=+g[b+48>>2];l=+g[b+52>>2];z=+g[b+56>>2];j=z*A+(x*y+l*w)- +g[b+64>>2];v=+g[e>>2];u=+g[e+4>>2];t=+g[e+8>>2];s=+g[e+16>>2];r=+g[e+20>>2];q=+g[e+24>>2];o=+g[e+32>>2];m=+g[e+36>>2];k=+g[e+40>>2];n=s*(y-x*j)+(w-l*j)*r+(A-z*j)*q+ +g[e+52>>2];p=(y-x*j)*o+(w-l*j)*m+(A-z*j)*k+ +g[e+56>>2];g[h+16>>2]=t*(A-z*j)+(v*(y-x*j)+u*(w-l*j))+ +g[e+48>>2];g[h+20>>2]=n;g[h+24>>2]=p;g[h+28>>2]=0.0;p=+g[b+48>>2];n=+g[b+52>>2];l=+g[b+56>>2];g[h>>2]=v*p+u*n+t*l;g[h+4>>2]=p*s+n*r+l*q;g[h+8>>2]=p*o+n*m+l*k;g[h+12>>2]=0.0;qc[c[(c[f>>2]|0)+16>>2]&15](f,h,h+16|0,j);i=h;return}else{N=c[b+4>>2]|0;a[N+312>>0]=0;c[N>>2]=0;a[N+356>>0]=1;g[N+292>>2]=999999984306749400.0;g[N+296>>2]=999999984306749400.0;g[N+300>>2]=999999984306749400.0;g[N+304>>2]=0.0;c[N+336>>2]=0;c[N+340>>2]=0;c[N+344>>2]=0;c[N+348>>2]=0;a[N+352>>0]=0;a[N+332>>0]=a[N+332>>0]&-16;N=c[b+12>>2]|0;M=c[b+16>>2]|0;L=c[N+4>>2]|0;K=c[M+4>>2]|0;I=+$b[c[(c[N>>2]|0)+48>>2]&15](N);O=c[b+16>>2]|0;J=+$b[c[(c[O>>2]|0)+48>>2]&15](O);O=c[b+4>>2]|0;b=c[b+8>>2]|0;c[h+200>>2]=13392;g[h+204>>2]=0.0;g[h+208>>2]=1.0;g[h+212>>2]=0.0;g[h+216>>2]=0.0;c[h+220>>2]=b;c[h+224>>2]=O;c[h+228>>2]=N;c[h+232>>2]=M;c[h+236>>2]=L;c[h+240>>2]=K;g[h+244>>2]=I;g[h+248>>2]=J;a[h+252>>0]=0;c[h+260>>2]=-1;c[h+272>>2]=1;c[h+276>>2]=1;g[h+192>>2]=999999984306749400.0;c[h+64>>2]=c[d+0>>2];c[h+68>>2]=c[d+4>>2];c[h+72>>2]=c[d+8>>2];c[h+76>>2]=c[d+12>>2];c[h+80>>2]=c[d+16>>2];c[h+84>>2]=c[d+20>>2];c[h+88>>2]=c[d+24>>2];c[h+92>>2]=c[d+28>>2];c[h+96>>2]=c[d+32>>2];c[h+100>>2]=c[d+36>>2];c[h+104>>2]=c[d+40>>2];c[h+108>>2]=c[d+44>>2];c[h+112>>2]=c[d+48>>2];c[h+116>>2]=c[d+52>>2];c[h+120>>2]=c[d+56>>2];c[h+124>>2]=c[d+60>>2];c[h+128>>2]=c[e+0>>2];c[h+132>>2]=c[e+4>>2];c[h+136>>2]=c[e+8>>2];c[h+140>>2]=c[e+12>>2];c[h+144>>2]=c[e+16>>2];c[h+148>>2]=c[e+20>>2];c[h+152>>2]=c[e+24>>2];c[h+156>>2]=c[e+28>>2];c[h+160>>2]=c[e+32>>2];c[h+164>>2]=c[e+36>>2];c[h+168>>2]=c[e+40>>2];c[h+172>>2]=c[e+44>>2];c[h+176>>2]=c[e+48>>2];c[h+180>>2]=c[e+52>>2];c[h+184>>2]=c[e+56>>2];c[h+188>>2]=c[e+60>>2];Az(h+200|0,h+64|0,f,0,0);i=h;return}}function xw(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0;k=i;i=i+304|0;l=+g[e+48>>2]- +g[d+48>>2];n=+g[e+52>>2]- +g[d+52>>2];m=+g[e+56>>2]- +g[d+56>>2];Lo(d,e,k+256|0,k+192|0);r=+g[k+192>>2];s=+g[k+256>>2]*r;t=r*+g[k+260>>2];r=r*+g[k+264>>2];g[k+176>>2]=s;g[k+180>>2]=t;g[k+184>>2]=r;g[k+188>>2]=0.0;q=+g[h+48>>2]- +g[f+48>>2];o=+g[h+52>>2]- +g[f+52>>2];p=+g[h+56>>2]- +g[f+56>>2];Lo(f,h,k+256|0,k+192|0);v=+g[k+192>>2];x=+g[k+256>>2]*v;w=v*+g[k+260>>2];v=v*+g[k+264>>2];g[k+160>>2]=x;g[k+164>>2]=w;g[k+168>>2]=v;g[k+172>>2]=0.0;h=c[b+12>>2]|0;u=+$b[c[(c[h>>2]|0)+16>>2]&15](h);h=c[b+16>>2]|0;if(!h)y=0.0;else y=+$b[c[(c[h>>2]|0)+16>>2]&15](h);r=u*+Q(+(s*s+t*t+r*r))+y*+Q(+(x*x+w*w+v*v));if(r+ +Q(+((q-l)*(q-l)+(o-n)*(o-n)+(p-m)*(p-m)))==0.0){e=0;i=k;return e|0}c[k+256>>2]=10224;g[k+292>>2]=999999984306749400.0;a[k+296>>0]=0;ww(b,d,f,k+256|0);e=(a[k+296>>0]|0)==0;c[k+144>>2]=c[k+276>>2];c[k+148>>2]=c[k+280>>2];c[k+152>>2]=c[k+284>>2];c[k+156>>2]=c[k+288>>2];if(e){e=0;i=k;return e|0}s=+g[k+260>>2];u=+g[k+264>>2];w=+g[k+268>>2];if(r+((q-l)*s+(o-n)*u+(p-m)*w)<=1.1920928955078125e-7){e=0;i=k;return e|0}y=+g[k+272>>2];v=+g[k+292>>2]+ +g[j+172>>2];t=0.0;h=0;while(1){if(!(v>.0010000000474974513)){f=18;break}e=c[j+168>>2]|0;if(e){z=c[(c[e>>2]|0)+20>>2]|0;g[k+128>>2]=1.0;g[k+132>>2]=1.0;g[k+136>>2]=1.0;g[k+140>>2]=0.0;Qb[z&7](e,k+144|0,.20000000298023224,k+128|0)}s=r+((p-m)*w+((o-n)*u+(q-l)*s));if(s<=1.1920928955078125e-7){j=0;f=19;break}x=t+v/s;if(!(!(x<0.0)&!(x>1.0)&!(x<=t))){j=0;f=19;break}Bo(d,l,n,m,k+176|0,x,k+192|0);Bo(f,q,o,p,k+160|0,x,k+64|0);e=c[j+168>>2]|0;if(e){z=c[(c[e>>2]|0)+20>>2]|0;g[k+48>>2]=1.0;g[k+52>>2]=0.0;g[k+56>>2]=0.0;g[k+60>>2]=0.0;Qb[z&7](e,k+240|0,.20000000298023224,k+48|0)}Kb[c[c[j>>2]>>2]&31](j,x);c[k>>2]=10224;g[k+36>>2]=999999984306749400.0;a[k+40>>0]=0;ww(b,k+192|0,k+64|0,k);if(!(a[k+40>>0]|0)){f=16;break}v=+g[k+36>>2]+ +g[j+172>>2];c[k+144>>2]=c[k+20>>2];c[k+148>>2]=c[k+24>>2];c[k+152>>2]=c[k+28>>2];c[k+156>>2]=c[k+32>>2];e=h+1|0;if((h|0)>63){f=17;break}else{s=+g[k+4>>2];u=+g[k+8>>2];w=+g[k+12>>2];y=+g[k+16>>2];t=x;h=e}}if((f|0)==16){rc[c[(c[j>>2]|0)+8>>2]&127](j,-1,h);z=0;i=k;return z|0}else if((f|0)==17){rc[c[(c[j>>2]|0)+8>>2]&127](j,-2,e);z=0;i=k;return z|0}else if((f|0)==18){g[j+164>>2]=t;g[j+132>>2]=s;g[j+136>>2]=u;g[j+140>>2]=w;g[j+144>>2]=y;c[j+148>>2]=c[k+144>>2];c[j+152>>2]=c[k+148>>2];c[j+156>>2]=c[k+152>>2];c[j+160>>2]=c[k+156>>2];z=1;i=k;return z|0}else if((f|0)==19){i=k;return j|0}return 0}function yw(a){a=a|0;return}function zw(a){a=a|0;return}function Aw(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Bw(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Cw(a,b,c){a=a|0;b=b|0;c=c|0;return}function Dw(a,b,c){a=a|0;b=b|0;c=c|0;return}function Ew(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0;h=i;if(!(+g[b+36>>2]>f)){i=h;return}a[b+40>>0]=1;c[b+4>>2]=c[d+0>>2];c[b+8>>2]=c[d+4>>2];c[b+12>>2]=c[d+8>>2];c[b+16>>2]=c[d+12>>2];c[b+20>>2]=c[e+0>>2];c[b+24>>2]=c[e+4>>2];c[b+28>>2]=c[e+8>>2];c[b+32>>2]=c[e+12>>2];g[b+36>>2]=f;i=h;return}function Fw(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+12>>2]=c[b+0>>2];c[a+16>>2]=c[b+4>>2];c[a+20>>2]=c[b+8>>2];c[a+24>>2]=c[b+12>>2];EA(a);i=d;return}function Gw(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;j=c[b+96>>2]|0;if((j|0)==(c[b+100>>2]|0)?(g=(j|0)==0?1:j<<1,(j|0)<(g|0)):0){if(!g)h=0;else{c[5004]=(c[5004]|0)+1;h=fF((g<<4|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+96>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<4)|0;m=(c[b+104>>2]|0)+(k<<4)|0;c[l+0>>2]=c[m+0>>2];c[l+4>>2]=c[m+4>>2];c[l+8>>2]=c[m+8>>2];c[l+12>>2]=c[m+12>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[b+104>>2]|0;if(j){if(a[b+108>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[b+104>>2]=0}a[b+108>>0]=1;c[b+104>>2]=h;c[b+100>>2]=g;j=c[b+96>>2]|0}m=(c[b+104>>2]|0)+(j<<4)|0;c[m+0>>2]=c[d+0>>2];c[m+4>>2]=c[d+4>>2];c[m+8>>2]=c[d+8>>2];c[m+12>>2]=c[d+12>>2];c[b+96>>2]=(c[b+96>>2]|0)+1;if(!e){i=f;return}EA(b);i=f;return}function Hw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0;k=i;f=c[b+96>>2]|0;if((f|0)<=0){c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=k;return}e=+g[b+12>>2];j=+g[d>>2]*e;l=+g[b+16>>2];h=+g[d+4>>2]*l;m=+g[b+20>>2];n=+g[d+8>>2]*m;b=c[b+104>>2]|0;d=0;o=-3.4028234663852886e+38;p=-1;while(1){q=j*+g[b+(d<<4)>>2]+h*+g[b+(d<<4)+4>>2]+n*+g[b+(d<<4)+8>>2];r=q>o;p=r?d:p;d=d+1|0;if((d|0)==(f|0))break;else o=r?q:o}o=+g[b+(p<<4)+4>>2]*l;q=+g[b+(p<<4)+8>>2]*m;g[a>>2]=+g[b+(p<<4)>>2]*e;g[a+4>>2]=o;g[a+8>>2]=q;g[a+12>>2]=0.0;i=k;return}function Iw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0,k=0.0,l=0.0,m=0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0,t=0.0,u=0.0,v=0;f=i;if((e|0)>0)j=0;else{i=f;return}do{g[d+(j<<4)+12>>2]=-999999984306749400.0;j=j+1|0}while((j|0)!=(e|0));j=0;do{t=+g[a+12>>2];n=+g[b+(j<<4)>>2]*t;k=+g[a+16>>2];o=+g[b+(j<<4)+4>>2]*k;l=+g[a+20>>2];p=+g[b+(j<<4)+8>>2]*l;q=c[a+96>>2]|0;if((q|0)>0){r=c[a+104>>2]|0;s=0;h=-3.4028234663852886e+38;m=-1;do{u=n*+g[r+(s<<4)>>2]+o*+g[r+(s<<4)+4>>2]+p*+g[r+(s<<4)+8>>2];v=u>h;m=v?s:m;h=v?u:h;s=s+1|0}while((s|0)!=(q|0));p=+g[r+(m<<4)+4>>2]*k;u=+g[r+(m<<4)+8>>2]*l;g[d+(j<<4)>>2]=+g[r+(m<<4)>>2]*t;g[d+(j<<4)+4>>2]=p;g[d+(j<<4)+8>>2]=u;g[d+(j<<4)+12>>2]=h}else g[d+(j<<4)+12>>2]=-999999984306749400.0;j=j+1|0}while((j|0)!=(e|0));i=f;return}function Jw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);if(!(+$b[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function Kw(a){a=a|0;return c[a+96>>2]|0}function Lw(a){a=a|0;return c[a+96>>2]|0}function Mw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,i=0,j=0;i=c[a+96>>2]|0;j=c[a+104>>2]|0;f=+g[j+(((b|0)%(i|0)|0)<<4)+4>>2]*+g[a+16>>2];h=+g[j+(((b|0)%(i|0)|0)<<4)+8>>2]*+g[a+20>>2];g[d>>2]=+g[j+(((b|0)%(i|0)|0)<<4)>>2]*+g[a+12>>2];g[d+4>>2]=f;g[d+8>>2]=h;g[d+12>>2]=0.0;d=c[a+104>>2]|0;h=+g[d+(((b+1|0)%(i|0)|0)<<4)+4>>2]*+g[a+16>>2];f=+g[d+(((b+1|0)%(i|0)|0)<<4)+8>>2]*+g[a+20>>2];g[e>>2]=+g[d+(((b+1|0)%(i|0)|0)<<4)>>2]*+g[a+12>>2];g[e+4>>2]=h;g[e+8>>2]=f;g[e+12>>2]=0.0;return}function Nw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,h=0;h=c[a+104>>2]|0;f=+g[h+(b<<4)+4>>2]*+g[a+16>>2];e=+g[h+(b<<4)+8>>2]*+g[a+20>>2];g[d>>2]=+g[h+(b<<4)>>2]*+g[a+12>>2];g[d+4>>2]=f;g[d+8>>2]=e;g[d+12>>2]=0.0;return}function Ow(a){a=a|0;return 0}function Pw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function Qw(a,b,c){a=a|0;b=b|0;c=+c;return 0}function Rw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;j=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=j;if(j)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+28>>2]=+g[a+28>>2];g[b+32>>2]=+g[a+32>>2];g[b+36>>2]=+g[a+36>>2];g[b+40>>2]=+g[a+40>>2];g[b+12>>2]=+g[a+12>>2];g[b+16>>2]=+g[a+16>>2];g[b+20>>2]=+g[a+20>>2];g[b+24>>2]=+g[a+24>>2];g[b+44>>2]=+g[a+44>>2];f=c[a+96>>2]|0;c[b+60>>2]=f;if(!f){c[b+52>>2]=0;c[b+56>>2]=0;i=e;return 10504}c[b+52>>2]=gc[c[(c[d>>2]|0)+28>>2]&31](d,c[a+104>>2]|0)|0;c[b+56>>2]=0;b=Yb[c[(c[d>>2]|0)+16>>2]&31](d,16,f)|0;if((f|0)>0){h=c[a+104>>2]|0;a=0;j=c[b+8>>2]|0;while(1){g[j>>2]=+g[h+(a<<4)>>2];g[j+4>>2]=+g[h+(a<<4)+4>>2];g[j+8>>2]=+g[h+(a<<4)+8>>2];g[j+12>>2]=+g[h+(a<<4)+12>>2];a=a+1|0;if((a|0)==(f|0))break;else j=j+16|0}}else h=c[a+104>>2]|0;Jb[c[(c[d>>2]|0)+20>>2]&31](d,b,19760,1497453121,h);i=e;return 10504}function Sw(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0;k=i;i=i+16|0;g[e>>2]=3.4028234663852886e+38;g[f>>2]=-3.4028234663852886e+38;m=c[a+96>>2]|0;if((m|0)>0){n=0;do{s=c[a+104>>2]|0;r=+g[s+(n<<4)>>2]*+g[a+12>>2];q=+g[s+(n<<4)+4>>2]*+g[a+16>>2];l=+g[s+(n<<4)+8>>2]*+g[a+20>>2];p=r*+g[b>>2]+q*+g[b+4>>2]+l*+g[b+8>>2]+ +g[b+48>>2];o=r*+g[b+16>>2]+q*+g[b+20>>2]+l*+g[b+24>>2]+ +g[b+52>>2];l=r*+g[b+32>>2]+q*+g[b+36>>2]+l*+g[b+40>>2]+ +g[b+56>>2];q=p*+g[d>>2]+o*+g[d+4>>2]+l*+g[d+8>>2];if(q<+g[e>>2]){g[e>>2]=q;g[h>>2]=p;g[h+4>>2]=o;g[h+8>>2]=l;g[h+12>>2]=0.0}if(q>+g[f>>2]){g[f>>2]=q;g[j>>2]=p;g[j+4>>2]=o;g[j+8>>2]=l;g[j+12>>2]=0.0}n=n+1|0}while((n|0)!=(m|0));o=+g[f>>2]}else o=-3.4028234663852886e+38;l=+g[e>>2];if(!(l>o)){i=k;return}g[e>>2]=o;g[f>>2]=l;c[k+0>>2]=c[h+0>>2];c[k+4>>2]=c[h+4>>2];c[k+8>>2]=c[h+8>>2];c[k+12>>2]=c[h+12>>2];c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];c[j+0>>2]=c[k+0>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];i=k;return}function Tw(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=10376;e=c[b+104>>2]|0;if(e){if(a[b+108>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+104>>2]=0}a[b+108>>0]=1;c[b+104>>2]=0;c[b+96>>2]=0;c[b+100>>2]=0;c[b>>2]=15736;e=c[b+52>>2]|0;if(!e){i=d;return}Lb[c[c[e>>2]>>2]&511](e);b=c[b+52>>2]|0;if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function Uw(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=10376;f=c[b+104>>2]|0;if(f){if(a[b+108>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+104>>2]=0}a[b+108>>0]=1;c[b+104>>2]=0;c[b+96>>2]=0;c[b+100>>2]=0;c[b>>2]=15736;f=c[b+52>>2]|0;if((f|0)!=0?(Lb[c[c[f>>2]>>2]&511](f),e=c[b+52>>2]|0,(e|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function Vw(a){a=a|0;return 10568}function Ww(a){a=a|0;return 68}function Xw(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0;e=+P(+(+g[b>>2]));d=+P(+(+g[b+4>>2]));c=+P(+(+g[b+8>>2]));g[a+12>>2]=e;g[a+16>>2]=d;g[a+20>>2]=c;g[a+24>>2]=0.0;return}function Yw(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0;f=i;i=i+96|0;h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=0;do{q=f+80+(j<<2)|0;c[f+80>>2]=0;c[f+84>>2]=0;c[f+88>>2]=0;c[f+92>>2]=0;g[q>>2]=1.0;k=c[(c[a>>2]|0)+64>>2]|0;l=+g[f+80>>2];m=+g[f+84>>2];n=+g[f+88>>2];o=l*+g[b+4>>2]+m*+g[b+20>>2]+n*+g[b+36>>2];p=l*+g[b+8>>2]+m*+g[b+24>>2]+n*+g[b+40>>2];g[f+48>>2]=+g[b>>2]*l+ +g[b+16>>2]*m+ +g[b+32>>2]*n;g[f+52>>2]=o;g[f+56>>2]=p;g[f+60>>2]=0.0;rc[k&127](f+64|0,a,f+48|0);p=+g[f+64>>2];o=+g[f+68>>2];n=+g[f+72>>2];m=p*+g[b+16>>2]+o*+g[b+20>>2]+n*+g[b+24>>2]+ +g[b+52>>2];l=p*+g[b+32>>2]+o*+g[b+36>>2]+n*+g[b+40>>2]+ +g[b+56>>2];g[f+32>>2]=p*+g[b>>2]+o*+g[b+4>>2]+n*+g[b+8>>2]+ +g[b+48>>2];g[f+36>>2]=m;g[f+40>>2]=l;g[f+44>>2]=0.0;k=f+32+(j<<2)|0;g[e+(j<<2)>>2]=h+ +g[k>>2];g[q>>2]=-1.0;q=c[(c[a>>2]|0)+64>>2]|0;l=+g[f+80>>2];m=+g[f+84>>2];n=+g[f+88>>2];o=l*+g[b+4>>2]+m*+g[b+20>>2]+n*+g[b+36>>2];p=l*+g[b+8>>2]+m*+g[b+24>>2]+n*+g[b+40>>2];g[f>>2]=+g[b>>2]*l+ +g[b+16>>2]*m+ +g[b+32>>2]*n;g[f+4>>2]=o;g[f+8>>2]=p;g[f+12>>2]=0.0;rc[q&127](f+16|0,a,f);p=+g[f+16>>2];o=+g[f+20>>2];n=+g[f+24>>2];m=p*+g[b+16>>2]+o*+g[b+20>>2]+n*+g[b+24>>2]+ +g[b+52>>2];l=p*+g[b+32>>2]+o*+g[b+36>>2]+n*+g[b+40>>2]+ +g[b+56>>2];g[f+32>>2]=p*+g[b>>2]+o*+g[b+4>>2]+n*+g[b+8>>2]+ +g[b+48>>2];g[f+36>>2]=m;g[f+40>>2]=l;g[f+44>>2]=0.0;g[d+(j<<2)>>2]=+g[k>>2]-h;j=j+1|0}while((j|0)!=3);i=f;return}function Zw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);if(!(+$b[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function _w(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0;h=i;i=i+64|0;n=+g[d>>2];o=+g[d+4>>2];m=+g[d+8>>2];p=n*+g[b+4>>2]+o*+g[b+20>>2]+m*+g[b+36>>2];q=n*+g[b+8>>2]+o*+g[b+24>>2]+m*+g[b+40>>2];g[h+48>>2]=+g[b>>2]*n+ +g[b+16>>2]*o+ +g[b+32>>2]*m;g[h+52>>2]=p;g[h+56>>2]=q;g[h+60>>2]=0.0;rc[c[(c[a>>2]|0)+64>>2]&127](h+32|0,a,h+48|0);q=+g[h+32>>2];p=+g[h+36>>2];m=+g[h+40>>2];o=q*+g[b>>2]+p*+g[b+4>>2]+m*+g[b+8>>2]+ +g[b+48>>2];n=q*+g[b+16>>2]+p*+g[b+20>>2]+m*+g[b+24>>2]+ +g[b+52>>2];m=q*+g[b+32>>2]+p*+g[b+36>>2]+m*+g[b+40>>2]+ +g[b+56>>2];r=c[(c[a>>2]|0)+64>>2]|0;p=-+g[h+52>>2];q=-+g[h+56>>2];g[h>>2]=-+g[h+48>>2];g[h+4>>2]=p;g[h+8>>2]=q;g[h+12>>2]=0.0;rc[r&127](h+16|0,a,h);q=+g[h+16>>2];p=+g[h+20>>2];j=+g[h+24>>2];l=q*+g[b>>2]+p*+g[b+4>>2]+j*+g[b+8>>2]+ +g[b+48>>2];k=q*+g[b+16>>2]+p*+g[b+20>>2]+j*+g[b+24>>2]+ +g[b+52>>2];j=q*+g[b+32>>2]+p*+g[b+36>>2]+j*+g[b+40>>2]+ +g[b+56>>2];g[e>>2]=o*+g[d>>2]+n*+g[d+4>>2]+m*+g[d+8>>2];j=l*+g[d>>2]+k*+g[d+4>>2]+j*+g[d+8>>2];g[f>>2]=j;k=+g[e>>2];if(!(k>j)){i=h;return}g[e>>2]=j;g[f>>2]=k;i=h;return}function $w(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0,x=0;e=i;i=i+80|0;switch(c[b+4>>2]|0){case 8:{c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=e;return};case 1:{t=+g[d>>2];v=+g[d+4>>2];j=+g[d+8>>2];h=t*+g[b+56>>2]+v*+g[b+60>>2]+j*+g[b+64>>2];f=t*+g[b+72>>2]+v*+g[b+76>>2]+j*+g[b+80>>2];j=t*+g[b+88>>2]+v*+g[b+92>>2]+j*+g[b+96>>2];if(h<f)d=f<j?2:1;else d=h<j?2:0;t=+g[b+56+(d<<4)+4>>2];v=+g[b+56+(d<<4)+8>>2];g[a>>2]=+g[b+56+(d<<4)>>2];g[a+4>>2]=t;g[a+8>>2]=v;g[a+12>>2]=0.0;i=e;return};case 13:{c[e+64>>2]=c[b+28>>2];c[e+68>>2]=c[b+32>>2];c[e+72>>2]=c[b+36>>2];c[e+76>>2]=c[b+40>>2];g[e+48>>2]=+g[d>>2];f=+g[d+4>>2];g[e+52>>2]=f;h=+g[d+8>>2];g[e+56>>2]=h;g[e+60>>2]=0.0;w=c[b+52>>2]|0;if((w|0)==1){u=0;d=w;b=2}else if((w|0)==2){h=f;u=0;d=w;b=1}else{u=1;d=0;b=2}f=+g[e+64+(u<<2)>>2];k=+g[e+64+(w<<2)>>2];l=+g[e+48+(u<<2)>>2];j=+Q(+(l*l+h*h));if(j!=0.0){g[e+32+(u<<2)>>2]=l*(f/j);if(+g[e+48+(d<<2)>>2]<0.0)k=-k;g[e+32+(d<<2)>>2]=k;g[e+32+(b<<2)>>2]=f/j*h;g[a>>2]=+g[e+32>>2];g[a+4>>2]=+g[e+36>>2];g[a+8>>2]=+g[e+40>>2];g[a+12>>2]=0.0;i=e;return}else{g[e+32+(u<<2)>>2]=f;if(+g[e+48+(d<<2)>>2]<0.0)k=-k;g[e+32+(d<<2)>>2]=k;g[e+32+(b<<2)>>2]=0.0;g[a>>2]=+g[e+32>>2];g[a+4>>2]=+g[e+36>>2];g[a+8>>2]=+g[e+40>>2];g[a+12>>2]=0.0;i=e;return}};case 10:{h=+g[d>>2];j=+g[d+4>>2];k=+g[d+8>>2];d=c[b+52>>2]|0;f=+g[b+(d<<2)+28>>2];n=+g[b+(((d+2|0)%3|0)<<2)+28>>2];if(h*h+j*j+k*k<9999999747378752.0e-20){h=1.0;j=0.0;k=0.0}else{v=1.0/+Q(+(h*h+j*j+k*k));h=h*v;j=j*v;k=k*v}c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;g[e+16+(d<<2)>>2]=f;m=n*h;l=n*j;n=n*k;q=+g[b+44>>2];o=h*q;p=j*q;q=k*q;v=+g[e+16>>2]+m-o;t=l+ +g[e+20>>2]-p;s=n+ +g[e+24>>2]-q;r=k*s+(h*v+j*t);if(!(r>-999999984306749400.0)){s=0.0;t=0.0;v=0.0;r=-999999984306749400.0}c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;g[e+(d<<2)>>2]=-f;o=m+ +g[e>>2]-o;p=l+ +g[e+4>>2]-p;q=n+ +g[e+8>>2]-q;x=k*q+(h*o+j*p)>r;g[a>>2]=x?o:v;g[a+4>>2]=x?p:t;g[a+8>>2]=x?q:s;g[a+12>>2]=0.0;i=e;return};case 4:{u=c[b+104>>2]|0;w=c[b+96>>2]|0;h=+g[b+12>>2];f=+g[b+16>>2];j=+g[b+20>>2];k=+g[d>>2]*h;l=+g[d+4>>2]*f;n=+g[d+8>>2]*j;if((w|0)>0){d=0;m=-3.4028234663852886e+38;x=-1;while(1){o=k*+g[u+(d<<4)>>2]+l*+g[u+(d<<4)+4>>2]+n*+g[u+(d<<4)+8>>2];b=o>m;x=b?d:x;d=d+1|0;if((d|0)==(w|0))break;else m=b?o:m}}else x=-1;t=f*+g[u+(x<<4)+4>>2];v=j*+g[u+(x<<4)+8>>2];g[a>>2]=h*+g[u+(x<<4)>>2];g[a+4>>2]=t;g[a+8>>2]=v;g[a+12>>2]=0.0;i=e;return};case 5:{u=c[b+92>>2]|0;w=c[b+96>>2]|0;h=+g[b+12>>2];f=+g[b+16>>2];j=+g[b+20>>2];k=+g[d>>2]*h;l=+g[d+4>>2]*f;n=+g[d+8>>2]*j;if((w|0)>0){d=0;o=-3.4028234663852886e+38;x=-1;while(1){m=k*+g[u+(d<<4)>>2]+l*+g[u+(d<<4)+4>>2]+n*+g[u+(d<<4)+8>>2];b=m>o;x=b?d:x;d=d+1|0;if((d|0)==(w|0))break;else o=b?m:o}}else x=-1;t=f*+g[u+(x<<4)+4>>2];v=j*+g[u+(x<<4)+8>>2];g[a>>2]=h*+g[u+(x<<4)>>2];g[a+4>>2]=t;g[a+8>>2]=v;g[a+12>>2]=0.0;i=e;return};case 0:{s=+g[b+28>>2];t=+g[b+32>>2];t=+g[d+4>>2]>=0.0?t:-t;v=+g[b+36>>2];v=+g[d+8>>2]>=0.0?v:-v;g[a>>2]=+g[d>>2]>=0.0?s:-s;g[a+4>>2]=t;g[a+8>>2]=v;g[a+12>>2]=0.0;i=e;return};default:{rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);i=e;return}}}function ax(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0;e=i;i=i+32|0;c[e+16>>2]=c[d+0>>2];c[e+20>>2]=c[d+4>>2];c[e+24>>2]=c[d+8>>2];c[e+28>>2]=c[d+12>>2];h=+g[e+16>>2];j=+g[e+20>>2];f=+g[e+24>>2];if(h*h+j*j+f*f<1.4210854715202004e-14){g[e+16>>2]=-1.0;g[e+20>>2]=-1.0;g[e+24>>2]=-1.0;g[e+28>>2]=0.0;h=-1.0;j=-1.0;f=-1.0}k=1.0/+Q(+(h*h+j*j+f*f));g[e+16>>2]=h*k;g[e+20>>2]=j*k;g[e+24>>2]=f*k;$w(e,b,e+16|0);switch(c[b+4>>2]|0){case 0:{f=+g[b+44>>2];break};case 11:{f=+g[b+44>>2];break};case 10:{f=+g[b+44>>2];break};case 8:{f=+g[b+28>>2]*+g[b+12>>2];break};case 13:{f=+g[b+44>>2];break};case 4:case 5:{f=+g[b+44>>2];break};case 1:{f=+g[b+44>>2];break};default:f=+$b[c[(c[b>>2]|0)+48>>2]&15](b)}j=f*+g[e+20>>2]+ +g[e+4>>2];k=f*+g[e+24>>2]+ +g[e+8>>2];g[a>>2]=f*+g[e+16>>2]+ +g[e>>2];g[a+4>>2]=j;g[a+8>>2]=k;g[a+12>>2]=0.0;i=e;return}function bx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0;e=i;i=i+80|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;f=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];if(f*f+j*j+h*h<9999999747378752.0e-20){f=1.0;j=0.0;h=0.0;k=0.0}else{k=1.0/+Q(+(f*f+j*j+h*h));f=f*k;j=j*k;h=h*k;k=+g[d+12>>2]}c[e+32>>2]=10856;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=-999999984306749400.0;g[e+56>>2]=f;g[e+60>>2]=j;g[e+64>>2]=h;g[e+68>>2]=k;g[e+16>>2]=999999984306749400.0;g[e+20>>2]=999999984306749400.0;g[e+24>>2]=999999984306749400.0;g[e+28>>2]=0.0;d=c[b+92>>2]|0;b=c[(c[d>>2]|0)+8>>2]|0;g[e>>2]=-999999984306749400.0;g[e+4>>2]=-999999984306749400.0;g[e+8>>2]=-999999984306749400.0;g[e+12>>2]=0.0;vc[b&127](d,e+32|0,e,e+16|0);c[a+0>>2]=c[e+36>>2];c[a+4>>2]=c[e+40>>2];c[a+8>>2]=c[e+44>>2];c[a+12>>2]=c[e+48>>2];i=e;return}function cx(a){a=a|0;return}function dx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;f=i;i=i+80|0;if((e|0)>0)h=0;else{i=f;return}do{g[d+(h<<4)+12>>2]=-999999984306749400.0;h=h+1|0}while((h|0)!=(e|0));h=0;do{j=b+(h<<4)|0;c[f+32>>2]=10856;c[f+36>>2]=0;c[f+40>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;g[f+52>>2]=-999999984306749400.0;c[f+56>>2]=c[j+0>>2];c[f+60>>2]=c[j+4>>2];c[f+64>>2]=c[j+8>>2];c[f+68>>2]=c[j+12>>2];g[f+16>>2]=999999984306749400.0;g[f+20>>2]=999999984306749400.0;g[f+24>>2]=999999984306749400.0;g[f+28>>2]=0.0;j=c[a+92>>2]|0;k=c[(c[j>>2]|0)+8>>2]|0;g[f>>2]=-999999984306749400.0;g[f+4>>2]=-999999984306749400.0;g[f+8>>2]=-999999984306749400.0;g[f+12>>2]=0.0;vc[k&127](j,f+32|0,f,f+16|0);j=d+(h<<4)|0;c[j+0>>2]=c[f+36>>2];c[j+4>>2]=c[f+40>>2];c[j+8>>2]=c[f+44>>2];c[j+12>>2]=c[f+48>>2];h=h+1|0}while((h|0)<(e|0));i=f;return}function ex(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);if(!(+$b[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function fx(a){a=a|0;return 0}function gx(a){a=a|0;return 0}function hx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function ix(a,b,c){a=a|0;b=b|0;c=c|0;return}function jx(a){a=a|0;return 0}function kx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return}function lx(a,b,c){a=a|0;b=b|0;c=+c;return 0}function mx(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=(c[a+92>>2]|0)+4|0;c[e+0>>2]=c[b+0>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];EA(a);i=d;return}function nx(a){a=a|0;return(c[a+92>>2]|0)+4|0}function ox(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(!d){i=b;return}Lb[c[c[d>>2]>>2]&511](d);a=c[a+52>>2]|0;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function px(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(d){Lb[c[c[d>>2]>>2]&511](d);d=c[a+52>>2]|0;if(d){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}if(!a){i=b;return}}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function qx(a){a=a|0;return 10832}function rx(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function sx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;f=+g[a+24>>2];j=+g[a+28>>2];h=+g[a+32>>2];k=f*+g[b>>2]+j*+g[b+4>>2]+h*+g[b+8>>2];l=+g[a+20>>2];if(k>l){g[a+20>>2]=k;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2]}else k=l;l=f*+g[b+16>>2]+j*+g[b+20>>2]+h*+g[b+24>>2];if(l>k){g[a+20>>2]=l;c[a+4>>2]=c[b+16>>2];c[a+8>>2]=c[b+20>>2];c[a+12>>2]=c[b+24>>2];c[a+16>>2]=c[b+28>>2];k=l}f=f*+g[b+32>>2]+j*+g[b+36>>2]+h*+g[b+40>>2];if(!(f>k)){i=e;return}g[a+20>>2]=f;c[a+4>>2]=c[b+32>>2];c[a+8>>2]=c[b+36>>2];c[a+12>>2]=c[b+40>>2];c[a+16>>2]=c[b+44>>2];i=e;return}function tx(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0;d=i;c[a+4>>2]=35;c[a+8>>2]=0;g[a+12>>2]=1.0;g[a+16>>2]=1.0;g[a+20>>2]=1.0;g[a+24>>2]=0.0;g[a+44>>2]=.03999999910593033;c[a>>2]=10928;c[a+52>>2]=1;f=+g[b>>2];h=+g[b+4>>2];e=+g[b+8>>2];if(f<h)j=f<e?0:2;else j=h<e?1:2;e=+g[b+(j<<2)>>2]*.10000000149011612;if(e<.03999999910593033){l=+Ts(a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);l=l+ +g[a+28>>2];k=k+ +g[a+32>>2];h=h+ +g[a+36>>2];g[a+44>>2]=e;e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=h- +$b[c[(c[a>>2]|0)+48>>2]&15](a);g[a+28>>2]=l-e;g[a+32>>2]=k-f;g[a+36>>2]=h;g[a+40>>2]=0.0;j=c[a>>2]|0}else j=10928|0;h=+$b[c[j+48>>2]&15](a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);l=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=+g[b+4>>2]*+g[a+16>>2]-k;l=+g[b+8>>2]*+g[a+20>>2]-l;g[a+28>>2]=+g[b>>2]*+g[a+12>>2]-h;g[a+32>>2]=k;g[a+36>>2]=l;g[a+40>>2]=0.0;c[a+4>>2]=13;i=d;return}function ux(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0;f=i;k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=k+ +g[a+28>>2];m=k+ +g[a+32>>2];k=k+ +g[a+36>>2];w=+P(+(+g[b>>2]));v=+P(+(+g[b+4>>2]));u=+P(+(+g[b+8>>2]));s=+P(+(+g[b+16>>2]));r=+P(+(+g[b+20>>2]));q=+P(+(+g[b+24>>2]));n=+P(+(+g[b+32>>2]));l=+P(+(+g[b+36>>2]));j=+P(+(+g[b+40>>2]));t=+g[b+48>>2];p=+g[b+52>>2];h=+g[b+56>>2];g[d>>2]=t-(o*w+m*v+k*u);g[d+4>>2]=p-(o*s+m*r+k*q);g[d+8>>2]=h-(o*n+m*l+k*j);g[d+12>>2]=0.0;g[e>>2]=o*w+m*v+k*u+t;g[e+4>>2]=o*s+m*r+k*q+p;g[e+8>>2]=o*n+m*l+k*j+h;g[e+12>>2]=0.0;i=f;return}function vx(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0,h=0.0,j=0,k=0.0,l=0.0;e=i;i=i+16|0;c[e+0>>2]=c[a+28>>2];c[e+4>>2]=c[a+32>>2];c[e+8>>2]=c[a+36>>2];c[e+12>>2]=c[a+40>>2];l=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);g[e>>2]=l+ +g[e>>2];g[e+4>>2]=h+ +g[e+4>>2];g[e+8>>2]=k+ +g[e+8>>2];a=c[a+52>>2]|0;if((a|0)==2){f=2;j=0}else if(!a){f=0;j=1}else{f=1;j=0}h=+g[e+(j<<2)>>2];k=+g[e+(f<<2)>>2];k=b*.25*h*h+b/12.0*k*k*4.0;if(!a){g[d>>2]=b*.5*h*h;g[d+4>>2]=k;g[d+8>>2]=k;g[d+12>>2]=0.0;i=e;return}else if((a|0)==2){g[d>>2]=k;g[d+4>>2]=k;g[d+8>>2]=b*.5*h*h;g[d+12>>2]=0.0;i=e;return}else{g[d>>2]=k;g[d+4>>2]=b*.5*h*h;g[d+8>>2]=k;g[d+12>>2]=0.0;i=e;return}}function wx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[b+32>>2];k=+g[b+28>>2];j=+g[c+4>>2];h=+g[c+8>>2];f=+Q(+(j*j+h*h));if(f!=0.0){g[a+4>>2]=j*(e/f);if(+g[c>>2]<0.0)k=-k;g[a>>2]=k;g[a+8>>2]=h*(e/f);i=d;return}else{g[a+4>>2]=e;if(+g[c>>2]<0.0)k=-k;g[a>>2]=k;g[a+8>>2]=0.0;i=d;return}}function xx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[b+28>>2];k=+g[b+36>>2];j=+g[c>>2];h=+g[c+4>>2];f=+Q(+(j*j+h*h));if(f!=0.0){g[a>>2]=j*(e/f);if(+g[c+8>>2]<0.0)k=-k;g[a+8>>2]=k;g[a+4>>2]=h*(e/f);i=d;return}else{g[a>>2]=e;if(+g[c+8>>2]<0.0)k=-k;g[a+8>>2]=k;g[a+4>>2]=0.0;i=d;return}}function yx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[b+28>>2];k=+g[b+32>>2];j=+g[c>>2];h=+g[c+8>>2];f=+Q(+(j*j+h*h));if(f!=0.0){g[a>>2]=j*(e/f);if(+g[c+4>>2]<0.0)k=-k;g[a+4>>2]=k;g[a+8>>2]=h*(e/f);i=d;return}else{g[a>>2]=e;if(+g[c+4>>2]<0.0)k=-k;g[a+4>>2]=k;g[a+8>>2]=0.0;i=d;return}}function zx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;f=i;if((d|0)<=0){i=f;return}e=0;do{j=+g[a+28>>2];m=+g[a+32>>2];h=+g[b+(e<<4)>>2];k=+g[b+(e<<4)+8>>2];l=+Q(+(h*h+k*k));if(!(l!=0.0))if(+g[b+(e<<4)+4>>2]<0.0){h=j;m=-m;j=0.0}else{h=j;j=0.0}else{if(+g[b+(e<<4)+4>>2]<0.0)m=-m;h=h*(j/l);j=k*(j/l)}g[c+(e<<4)>>2]=h;g[c+(e<<4)+4>>2]=m;g[c+(e<<4)+8>>2]=j;e=e+1|0}while((e|0)!=(d|0));i=f;return}function Ax(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;f=i;if((d|0)<=0){i=f;return}e=0;do{m=+g[a+28>>2];j=+g[a+36>>2];h=+g[b+(e<<4)>>2];l=+g[b+(e<<4)+4>>2];k=+Q(+(h*h+l*l));if(!(k!=0.0))if(+g[b+(e<<4)+8>>2]<0.0){h=m;k=0.0;j=-j}else{h=m;k=0.0}else{if(+g[b+(e<<4)+8>>2]<0.0)j=-j;h=h*(m/k);k=l*(m/k)}g[c+(e<<4)>>2]=h;g[c+(e<<4)+4>>2]=k;g[c+(e<<4)+8>>2]=j;e=e+1|0}while((e|0)!=(d|0));i=f;return}function Bx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;f=i;if((d|0)<=0){i=f;return}e=0;do{h=+g[a+32>>2];m=+g[a+28>>2];n=b+(e<<4)|0;l=+g[b+(e<<4)+4>>2];j=+g[b+(e<<4)+8>>2];k=+Q(+(l*l+j*j));if(!(k!=0.0))if(+g[n>>2]<0.0){m=-m;l=h;h=0.0}else{l=h;h=0.0}else{if(+g[n>>2]<0.0)m=-m;l=l*(h/k);h=j*(h/k)}g[c+(e<<4)>>2]=m;g[c+(e<<4)+4>>2]=l;g[c+(e<<4)+8>>2]=h;e=e+1|0}while((e|0)!=(d|0));i=f;return}function Cx(a){a=a|0;return}function Dx(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Ex(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0;d=i;m=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);o=(m+ +g[a+28>>2])/+g[a+12>>2];l=(j+ +g[a+32>>2])/+g[a+16>>2];h=(e+ +g[a+36>>2])/+g[a+20>>2];n=+P(+(+g[b>>2]));k=+P(+(+g[b+4>>2]));f=+P(+(+g[b+8>>2]));g[a+12>>2]=n;g[a+16>>2]=k;g[a+20>>2]=f;g[a+24>>2]=0.0;g[a+28>>2]=o*n-m;g[a+32>>2]=l*k-j;g[a+36>>2]=h*f-e;g[a+40>>2]=0.0;i=d;return}function Fx(a){a=a|0;return 11408}function Gx(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;g[a+(c[b+52>>2]<<2)>>2]=1.0;i=d;return}function Hx(a,b){a=a|0;b=+b;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);f=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=j+ +g[a+28>>2];f=f+ +g[a+32>>2];k=k+ +g[a+36>>2];g[a+44>>2]=b;h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);e=+$b[c[(c[a>>2]|0)+48>>2]&15](a);b=k- +$b[c[(c[a>>2]|0)+48>>2]&15](a);g[a+28>>2]=j-h;g[a+32>>2]=f-e;g[a+36>>2]=b;g[a+40>>2]=0.0;i=d;return}function Ix(a){a=a|0;return 60}function Jx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=h;if(h)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+28>>2]=+g[a+28>>2];g[b+32>>2]=+g[a+32>>2];g[b+36>>2]=+g[a+36>>2];g[b+40>>2]=+g[a+40>>2];g[b+12>>2]=+g[a+12>>2];g[b+16>>2]=+g[a+16>>2];g[b+20>>2]=+g[a+20>>2];g[b+24>>2]=+g[a+24>>2];g[b+44>>2]=+g[a+44>>2];c[b+52>>2]=c[a+52>>2];i=e;return 11384}function Kx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);if(!(+$b[c[(c[b>>2]|0)+48>>2]&15](b)!=0.0)){i=e;return}l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function Lx(a){a=a|0;var b=0.0,d=0.0,e=0;e=i;d=+g[a+28>>2];b=+$b[c[(c[a>>2]|0)+48>>2]&15](a);+$b[c[(c[a>>2]|0)+48>>2]&15](a);+$b[c[(c[a>>2]|0)+48>>2]&15](a);i=e;return+(d+b)}function Mx(a){a=a|0;return}function Nx(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Ox(a){a=a|0;return 11368}function Px(a){a=a|0;var b=0.0,d=0.0,e=0;e=i;d=+g[a+32>>2];+$b[c[(c[a>>2]|0)+48>>2]&15](a);b=+$b[c[(c[a>>2]|0)+48>>2]&15](a);+$b[c[(c[a>>2]|0)+48>>2]&15](a);i=e;return+(d+b)}function Qx(a){a=a|0;return}function Rx(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Sx(a){a=a|0;return 11352}function Tx(a){a=a|0;var b=0.0,d=0.0,e=0;e=i;d=+g[a+28>>2];b=+$b[c[(c[a>>2]|0)+48>>2]&15](a);+$b[c[(c[a>>2]|0)+48>>2]&15](a);+$b[c[(c[a>>2]|0)+48>>2]&15](a);i=e;return+(d+b)}function Ux(b){b=b|0;var d=0,e=0;d=i;e=c[b>>2]|0;if(e)Vx(b,e);e=c[b+4>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+4>>2]=0;c[b+8>>2]=-1;e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;c[b+16>>2]=0;e=c[b+52>>2]|0;if(!e){a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;i=d;return}if(!(a[b+56>>0]|0)){a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;i=d;return}c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);e=c[b+32>>2]|0;a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;if(!e){a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;i=d;return}if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;i=d;return}function Vx(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if(c[b+40>>2]|0){Vx(a,c[b+36>>2]|0);Vx(a,c[b+40>>2]|0)}if((c[a>>2]|0)==(b|0))c[a>>2]=0;e=c[a+4>>2]|0;if(!e){c[a+4>>2]=b;i=d;return}c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);c[a+4>>2]=b;i=d;return}function Wx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+32|0;if((b|0)<0)b=c[a+12>>2]|0;j=c[a>>2]|0;if(!((j|0)!=0&(b|0)>0)){i=d;return}while(1){f=j+40|0;a:do if(c[f>>2]|0){e=0;while(1){g=(c[a+16>>2]|0)>>>e&1;k=j+32|0;h=c[k>>2]|0;if(h>>>0>j>>>0){l=(c[h+40>>2]|0)==(j|0)&1;m=c[h+((l^1)<<2)+36>>2]|0;n=c[h+32>>2]|0;if(!n)c[a>>2]=j;else c[n+(((c[n+40>>2]|0)==(h|0)&1)<<2)+36>>2]=j;c[m+32>>2]=j;c[h+32>>2]=j;c[k>>2]=n;n=j+36|0;c[h+36>>2]=c[n>>2];c[h+40>>2]=c[f>>2];c[(c[n>>2]|0)+32>>2]=h;c[(c[f>>2]|0)+32>>2]=h;c[j+(l<<2)+36>>2]=h;c[j+((l^1)<<2)+36>>2]=m;c[d+0>>2]=c[h+0>>2];c[d+4>>2]=c[h+4>>2];c[d+8>>2]=c[h+8>>2];c[d+12>>2]=c[h+12>>2];c[d+16>>2]=c[h+16>>2];c[d+20>>2]=c[h+20>>2];c[d+24>>2]=c[h+24>>2];c[d+28>>2]=c[h+28>>2];c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];c[h+16>>2]=c[j+16>>2];c[h+20>>2]=c[j+20>>2];c[h+24>>2]=c[j+24>>2];c[h+28>>2]=c[j+28>>2];c[j+0>>2]=c[d+0>>2];c[j+4>>2]=c[d+4>>2];c[j+8>>2]=c[d+8>>2];c[j+12>>2]=c[d+12>>2];c[j+16>>2]=c[d+16>>2];c[j+20>>2]=c[d+20>>2];c[j+24>>2]=c[d+24>>2];c[j+28>>2]=c[d+28>>2]}else h=j;j=c[h+(g<<2)+36>>2]|0;if(!(c[j+40>>2]|0))break a;f=j+40|0;e=e+1&31}}while(0);if(!(Yx(a,j)|0))e=0;else e=c[a>>2]|0;Xx(a,e,j);c[a+16>>2]=(c[a+16>>2]|0)+1;b=b+ -1|0;if(!b)break;j=c[a>>2]|0}i=d;return}function Xx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0,s=0.0;e=i;if(!(c[a>>2]|0)){c[a>>2]=d;c[d+32>>2]=0;i=e;return}f=c[b+40>>2]|0;if(f){l=+g[d>>2]+ +g[d+16>>2];j=+g[d+4>>2]+ +g[d+20>>2];h=+g[d+8>>2]+ +g[d+24>>2];do{r=c[b+36>>2]|0;p=+P(+(l-(+g[r>>2]+ +g[r+16>>2])))+ +P(+(j-(+g[r+4>>2]+ +g[r+20>>2])))+ +P(+(h-(+g[r+8>>2]+ +g[r+24>>2])));b=c[b+((!(p<+P(+(l-(+g[f>>2]+ +g[f+16>>2])))+ +P(+(j-(+g[f+4>>2]+ +g[f+20>>2])))+ +P(+(h-(+g[f+8>>2]+ +g[f+24>>2]))))&1)<<2)+36>>2]|0;f=c[b+40>>2]|0}while((f|0)!=0)}k=b+32|0;f=c[k>>2]|0;r=c[a+4>>2]|0;if(!r){c[5004]=(c[5004]|0)+1;r=fF(63)|0;if((r|0)!=0?(c[(r+19&-16)+ -4>>2]=r,(r+19&-16|0)!=0):0){o=(r+19&-16)+0|0;q=o+44|0;do{c[o>>2]=0;o=o+4|0}while((o|0)<(q|0));r=r+19&-16}else r=0}else c[a+4>>2]=0;c[r+32>>2]=f;o=r+36|0;c[o>>2]=0;q=r+40|0;c[q>>2]=0;s=+g[d>>2];p=+g[b>>2];p=s<p?s:p;g[r>>2]=p;s=+g[d+16>>2];l=+g[b+16>>2];l=s>l?s:l;g[r+16>>2]=l;s=+g[d+4>>2];n=+g[b+4>>2];n=s<n?s:n;g[r+4>>2]=n;s=+g[d+20>>2];j=+g[b+20>>2];j=s>j?s:j;g[r+20>>2]=j;s=+g[d+8>>2];m=+g[b+8>>2];m=s<m?s:m;g[r+8>>2]=m;s=+g[d+24>>2];h=+g[b+24>>2];h=s>h?s:h;g[r+24>>2]=h;if(!f){c[o>>2]=b;c[k>>2]=r;c[q>>2]=d;c[d+32>>2]=r;c[a>>2]=r;i=e;return}c[f+(((c[(c[k>>2]|0)+40>>2]|0)==(b|0)&1)<<2)+36>>2]=r;c[o>>2]=b;c[k>>2]=r;c[q>>2]=d;c[d+32>>2]=r;while(1){d=f+4|0;if(((((+g[f>>2]<=p?+g[d>>2]<=n:0)?+g[f+8>>2]<=m:0)?+g[f+16>>2]>=l:0)?+g[f+20>>2]>=j:0)?+g[f+24>>2]>=h:0){d=21;break}q=c[f+36>>2]|0;r=c[f+40>>2]|0;s=+g[q>>2];p=+g[r>>2];p=s<p?s:p;g[f>>2]=p;s=+g[q+16>>2];l=+g[r+16>>2];l=s>l?s:l;g[f+16>>2]=l;s=+g[q+4>>2];n=+g[r+4>>2];n=s<n?s:n;g[d>>2]=n;s=+g[q+20>>2];j=+g[r+20>>2];j=s>j?s:j;g[f+20>>2]=j;s=+g[q+8>>2];m=+g[r+8>>2];m=s<m?s:m;g[f+8>>2]=m;s=+g[q+24>>2];h=+g[r+24>>2];h=s>h?s:h;g[f+24>>2]=h;f=c[f+32>>2]|0;if(!f){d=21;break}}if((d|0)==21){i=e;return}}function Yx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0,A=0;d=i;if((c[a>>2]|0)==(b|0)){c[a>>2]=0;b=0;i=d;return b|0}f=c[b+32>>2]|0;h=c[f+32>>2]|0;b=c[f+(((c[f+40>>2]|0)!=(b|0)&1)<<2)+36>>2]|0;if(!h){c[a>>2]=b;c[b+32>>2]=0;e=c[a+4>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[a+4>>2]=f;b=c[a>>2]|0;i=d;return b|0}c[h+(((c[h+40>>2]|0)==(f|0)&1)<<2)+36>>2]=b;c[b+32>>2]=h;b=c[a+4>>2]|0;if(b){c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0)}c[a+4>>2]=f;do{u=+g[h>>2];z=h+4|0;s=+g[z>>2];x=h+8|0;q=+g[x>>2];A=h+16|0;o=+g[A>>2];y=h+20|0;m=+g[y>>2];b=h+24|0;k=+g[b>>2];w=c[h+36>>2]|0;f=c[h+40>>2]|0;v=+g[w>>2];t=+g[f>>2];t=v<t?v:t;g[h>>2]=t;v=+g[w+16>>2];n=+g[f+16>>2];n=v>n?v:n;g[A>>2]=n;v=+g[w+4>>2];r=+g[f+4>>2];r=v<r?v:r;g[z>>2]=r;v=+g[w+20>>2];l=+g[f+20>>2];l=v>l?v:l;g[y>>2]=l;v=+g[w+8>>2];p=+g[f+8>>2];p=v<p?v:p;g[x>>2]=p;v=+g[w+24>>2];j=+g[f+24>>2];j=v>j?v:j;g[b>>2]=j;if(!(u!=t|s!=r|q!=p|o!=n)?!(m!=l|k!=j):0){e=14;break}h=c[h+32>>2]|0}while((h|0)!=0);if((e|0)==14){i=d;return h|0}A=c[a>>2]|0;i=d;return A|0}function Zx(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;c[b>>2]=11432;f=b+4|0;do{a[f+36>>0]=1;c[f+32>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[f+56>>0]=1;c[f+52>>2]=0;c[f+44>>2]=0;c[f+48>>2]=0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=-1;c[f+12>>2]=0;c[f+16>>2]=0;f=f+60|0}while((f|0)!=(b+124|0));a[b+193>>0]=0;a[b+194>>0]=1;a[b+192>>0]=(d|0)!=0^1;g[b+140>>2]=0.0;c[b+144>>2]=0;c[b+164>>2]=0;c[b+148>>2]=1;c[b+152>>2]=0;c[b+156>>2]=10;c[b+160>>2]=1;c[b+168>>2]=0;c[b+172>>2]=0;g[b+176>>2]=0.0;if(d){f=b+136|0;c[f>>2]=d;f=b+188|0;c[f>>2]=0;f=b+180|0;c[f>>2]=0;f=b+184|0;c[f>>2]=0;f=b+124|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;i=e;return}c[5004]=(c[5004]|0)+1;d=fF(95)|0;if((d|0)!=0?(c[(d+19&-16)+ -4>>2]=d,(d+19&-16|0)!=0):0){Yz(d+19&-16);d=d+19&-16}else d=0;f=b+136|0;c[f>>2]=d;f=b+188|0;c[f>>2]=0;f=b+180|0;c[f>>2]=0;f=b+184|0;c[f>>2]=0;f=b+124|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;i=e;return}function _x(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=11432;if((a[b+192>>0]|0)!=0?(e=c[b+136>>2]|0,Lb[c[c[e>>2]>>2]&511](e),e=c[b+136>>2]|0,(e|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=b+124|0;do{e=e+ -60|0;Ux(e)}while((e|0)!=(b+4|0));gF(b);i=d;return}function $x(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=11432;if((a[b+192>>0]|0)!=0?(e=c[b+136>>2]|0,Lb[c[c[e>>2]>>2]&511](e),e=c[b+136>>2]|0,(e|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=b+124|0;do{e=e+ -60|0;Ux(e)}while((e|0)!=(b+4|0));i=d;return}function ay(d,e,f,g,h,j,k,l,m){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;m=i;i=i+48|0;c[5004]=(c[5004]|0)+1;g=fF(83)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}c[g>>2]=h;b[g+4>>1]=j;b[g+6>>1]=k;h=g+16|0;c[h+0>>2]=c[e+0>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];c[h+12>>2]=c[e+12>>2];h=g+32|0;c[h+0>>2]=c[f+0>>2];c[h+4>>2]=c[f+4>>2];c[h+8>>2]=c[f+8>>2];c[h+12>>2]=c[f+12>>2];c[g+8>>2]=0;h=g+56|0;c[h>>2]=0;j=g+52|0;c[j>>2]=0;c[m+16>>2]=c[e+0>>2];c[m+20>>2]=c[e+4>>2];c[m+24>>2]=c[e+8>>2];c[m+28>>2]=c[e+12>>2];c[m+32>>2]=c[f+0>>2];c[m+36>>2]=c[f+4>>2];c[m+40>>2]=c[f+8>>2];c[m+44>>2]=c[f+12>>2];c[g+60>>2]=c[d+144>>2];e=(c[d+188>>2]|0)+1|0;c[d+188>>2]=e;c[g+12>>2]=e;e=c[d+8>>2]|0;if(!e){c[5004]=(c[5004]|0)+1;e=fF(63)|0;if((e|0)!=0?(c[(e+19&-16)+ -4>>2]=e,(e+19&-16|0)!=0):0){k=(e+19&-16)+0|0;f=k+44|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(f|0));e=e+19&-16}else e=0}else c[d+8>>2]=0;c[e+32>>2]=0;c[e+36>>2]=g;c[e+40>>2]=0;c[e+0>>2]=c[m+16>>2];c[e+4>>2]=c[m+20>>2];c[e+8>>2]=c[m+24>>2];c[e+12>>2]=c[m+28>>2];c[e+16>>2]=c[m+32>>2];c[e+20>>2]=c[m+36>>2];c[e+24>>2]=c[m+40>>2];c[e+28>>2]=c[m+44>>2];Xx(d+4|0,c[d+4>>2]|0,e);c[d+16>>2]=(c[d+16>>2]|0)+1;c[g+48>>2]=e;e=d+(c[d+144>>2]<<2)+124|0;c[j>>2]=0;c[h>>2]=c[e>>2];f=c[e>>2]|0;if(f)c[f+52>>2]=g;c[e>>2]=g;if(a[d+193>>0]|0){i=m;return g|0}c[m>>2]=11696;c[m+4>>2]=d;c[m+8>>2]=g;by(c[d+4>>2]|0,m+16|0,m);by(c[d+64>>2]|0,m+16|0,m);i=m;return g|0}function by(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,h=0,j=0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;h=i;if(!a){i=h;return}e=+g[b>>2];n=+g[b+4>>2];o=+g[b+8>>2];k=+g[b+16>>2];m=+g[b+20>>2];p=+g[b+24>>2];c[5004]=(c[5004]|0)+1;q=fF(275)|0;if(q){c[(q+19&-16)+ -4>>2]=q;b=q+19&-16;if(q+19&-16)c[b>>2]=a}else b=0;t=64;a=1;do{r=a+ -1|0;q=c[b+(r<<2)>>2]|0;do if(((((+g[q>>2]<=k?+g[q+16>>2]>=e:0)?+g[q+4>>2]<=m:0)?+g[q+20>>2]>=n:0)?+g[q+8>>2]<=p:0)?+g[q+24>>2]>=o:0){if(!(c[q+40>>2]|0)){Nb[c[(c[d>>2]|0)+12>>2]&127](d,q);a=r;break}s=c[q+36>>2]|0;if((r|0)==(t|0)?(f=(t|0)==0?1:t<<1,(a|0)<=(f|0)):0){if((f|0)!=0?(c[5004]=(c[5004]|0)+1,l=fF((f<<2|3)+16|0)|0,(l|0)!=0):0){c[(l+19&-16)+ -4>>2]=l;u=l+19&-16}else u=0;if((t|0)>0){w=0;do{v=u+(w<<2)|0;if(v)c[v>>2]=c[b+(w<<2)>>2];w=w+1|0}while((w|0)!=(t|0))}if(!b){t=f;b=u}else{c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);t=f;b=u}}r=b+(r<<2)|0;if(r)c[r>>2]=s;q=c[q+40>>2]|0;if((a|0)==(t|0)){t=(a|0)==0?1:a<<1;if((a|0)<(t|0)){if((t|0)!=0?(c[5004]=(c[5004]|0)+1,j=fF((t<<2|3)+16|0)|0,(j|0)!=0):0){c[(j+19&-16)+ -4>>2]=j;r=j+19&-16}else r=0;if((a|0)>0){s=0;do{u=r+(s<<2)|0;if(u)c[u>>2]=c[b+(s<<2)>>2];s=s+1|0}while((s|0)!=(a|0))}if(!b)b=r;else{c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);b=r}}else t=a}r=b+(a<<2)|0;if(r)c[r>>2]=q;a=a+1|0}else a=r;while(0)}while((a|0)>0);if(!b){i=h;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=h;return}function cy(a){a=a|0;return}function dy(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;if((c[d+60>>2]|0)==2){g=c[d+48>>2]|0;Yx(b+64|0,g)|0;h=c[b+68>>2]|0;if(h){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+68>>2]=g;c[b+76>>2]=(c[b+76>>2]|0)+ -1}else{g=c[d+48>>2]|0;Yx(b+4|0,g)|0;h=c[b+8>>2]|0;if(h){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+8>>2]=g;c[b+16>>2]=(c[b+16>>2]|0)+ -1}h=c[d+52>>2]|0;g=c[d+56>>2]|0;if(!h)c[b+(c[d+60>>2]<<2)+124>>2]=g;else c[h+56>>2]=g;g=c[d+56>>2]|0;if(g)c[g+52>>2]=c[d+52>>2];h=c[b+136>>2]|0;rc[c[(c[h>>2]|0)+16>>2]&127](h,d,e);if(!d){h=b+194|0;a[h>>0]=1;i=f;return}c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0);h=b+194|0;a[h>>0]=1;i=f;return}function ey(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=i;c[d+0>>2]=c[b+16>>2];c[d+4>>2]=c[b+20>>2];c[d+8>>2]=c[b+24>>2];c[d+12>>2]=c[b+28>>2];c[e+0>>2]=c[b+32>>2];c[e+4>>2]=c[b+36>>2];c[e+8>>2]=c[b+40>>2];c[e+12>>2]=c[b+44>>2];i=a;return}function fy(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;d=i;i=i+16|0;c[d>>2]=11616;c[d+4>>2]=e;gy(a+4|0,c[a+4>>2]|0,b,e+4|0,e+20|0,+g[e+32>>2],f,h,d);gy(a+64|0,c[a+64>>2]|0,b,e+4|0,e+20|0,+g[e+32>>2],f,h,d);i=d;return}function gy(b,d,e,f,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=+j;k=k|0;l=l|0;m=m|0;var n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0,E=0.0;o=i;i=i+32|0;if(!d){i=o;return}s=c[b+44>>2]|0;if((s|0)<128){if((c[b+48>>2]|0)<128){c[5004]=(c[5004]|0)+1;t=fF(531)|0;if(!t)t=0;else{c[(t+19&-16)+ -4>>2]=t;t=t+19&-16}v=c[b+44>>2]|0;if((v|0)>0){u=0;do{w=t+(u<<2)|0;if(w)c[w>>2]=c[(c[b+52>>2]|0)+(u<<2)>>2];u=u+1|0}while((u|0)!=(v|0))}u=c[b+52>>2]|0;if(u){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[u+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=t;c[b+48>>2]=128;t=b+52|0}else t=b+52|0;do{u=(c[t>>2]|0)+(s<<2)|0;if(u)c[u>>2]=0;s=s+1|0}while((s|0)!=128);s=b+48|0}else s=b+48|0;c[b+44>>2]=128;c[c[b+52>>2]>>2]=d;d=1;v=126;do{t=d+ -1|0;w=c[b+52>>2]|0;u=c[w+(t<<2)>>2]|0;y=+g[u+4>>2]- +g[l+4>>2];x=+g[u+8>>2]- +g[l+8>>2];g[o>>2]=+g[u>>2]- +g[l>>2];g[o+4>>2]=y;g[o+8>>2]=x;g[o+12>>2]=0.0;x=+g[u+20>>2]- +g[k+4>>2];y=+g[u+24>>2]- +g[k+8>>2];g[o+16>>2]=+g[u+16>>2]- +g[k>>2];g[o+20>>2]=x;g[o+24>>2]=y;g[o+28>>2]=0.0;D=c[h>>2]|0;y=+g[e>>2];x=+g[f>>2];z=(+g[o+(D<<4)>>2]-y)*x;y=x*(+g[o+(1-D<<4)>>2]-y);D=c[h+4>>2]|0;x=+g[e+4>>2];E=+g[f+4>>2];A=(+g[o+(D<<4)+4>>2]-x)*E;x=E*(+g[o+(1-D<<4)+4>>2]-x);do if(((!(z>x|A>y)?(p=A>z?A:z,r=x<y?x:y,D=c[h+8>>2]|0,q=+g[e+8>>2],E=+g[f+8>>2],n=(+g[o+(D<<4)+8>>2]-q)*E,q=E*(+g[o+(1-D<<4)+8>>2]-q),!(p>q|n>r)):0)?(n>p?n:p)<j:0)?(q<r?q:r)>0.0:0){if(!(c[u+40>>2]|0)){Nb[c[(c[m>>2]|0)+12>>2]&127](m,u);d=t;break}if((t|0)>(v|0)){v=c[b+44>>2]|0;if((v|0)<(v<<1|0)){if((c[s>>2]|0)<(v<<1|0)){if(v){c[5004]=(c[5004]|0)+1;w=fF((v<<3|3)+16|0)|0;if(!w)w=0;else{c[(w+19&-16)+ -4>>2]=w;w=w+19&-16}C=c[b+44>>2]|0;if((C|0)>0){B=0;do{D=w+(B<<2)|0;if(D)c[D>>2]=c[(c[b+52>>2]|0)+(B<<2)>>2];B=B+1|0}while((B|0)!=(C|0))}}else w=0;B=c[b+52>>2]|0;if(B){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[B+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=w;c[s>>2]=v<<1;B=v}else B=v;do{w=w+(B<<2)|0;if(w)c[w>>2]=0;B=B+1|0;w=c[b+52>>2]|0}while((B|0)!=(v<<1|0))}c[b+44>>2]=v<<1;v=(v<<1)+ -2|0}c[w+(t<<2)>>2]=c[u+36>>2];c[(c[b+52>>2]|0)+(d<<2)>>2]=c[u+40>>2];d=d+1|0}else d=t;while(0)}while((d|0)!=0);i=o;return}function hy(a){a=a|0;return}function iy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+48|0;c[f+32>>2]=11536;c[f+36>>2]=e;c[f+0>>2]=c[b+0>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];c[f+16>>2]=c[d+0>>2];c[f+20>>2]=c[d+4>>2];c[f+24>>2]=c[d+8>>2];c[f+28>>2]=c[d+12>>2];by(c[a+4>>2]|0,f,f+32|0);by(c[a+64>>2]|0,f,f+32|0);i=f;return}function jy(a){a=a|0;return}function ky(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0,H=0.0;h=i;i=i+16|0;r=+g[e>>2];p=+g[e+4>>2];n=+g[e+8>>2];k=+g[e+12>>2];q=+g[f>>2];o=+g[f+4>>2];m=+g[f+8>>2];j=+g[f+12>>2];do if((c[d+60>>2]|0)==2){D=c[d+48>>2]|0;Yx(b+64|0,D)|0;l=c[b+68>>2]|0;if(l){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[b+68>>2]=D;c[b+76>>2]=(c[b+76>>2]|0)+ -1;l=c[b+8>>2]|0;if(!l){c[5004]=(c[5004]|0)+1;D=fF(63)|0;if((D|0)!=0?(c[(D+19&-16)+ -4>>2]=D,(D+19&-16|0)!=0):0){E=(D+19&-16)+0|0;l=E+44|0;do{c[E>>2]=0;E=E+4|0}while((E|0)<(l|0));l=D+19&-16}else l=0}else c[b+8>>2]=0;c[l+32>>2]=0;c[l+36>>2]=d;c[l+40>>2]=0;g[l>>2]=r;g[l+4>>2]=p;g[l+8>>2]=n;g[l+12>>2]=k;g[l+16>>2]=q;g[l+20>>2]=o;g[l+24>>2]=m;g[l+28>>2]=j;Xx(b+4|0,c[b+4>>2]|0,l);c[b+16>>2]=(c[b+16>>2]|0)+1;c[d+48>>2]=l;l=1}else{c[b+168>>2]=(c[b+168>>2]|0)+1;l=c[d+48>>2]|0;y=+g[l>>2];if(((((y<=q?(s=+g[l+16>>2],s>=r):0)?(t=+g[l+4>>2],t<=o):0)?(w=+g[l+20>>2],w>=p):0)?(u=+g[l+8>>2],u<=m):0)?(v=+g[l+24>>2],v>=n):0){H=+g[d+16>>2];C=+g[d+20>>2];B=+g[d+24>>2];x=+g[b+140>>2];z=(+g[d+32>>2]-H)*.5*x;A=x*(+g[d+36>>2]-C)*.5;x=x*(+g[d+40>>2]-B)*.5;if(r-H<0.0)z=-z;if(p-C<0.0)A=-A;if(n-B<0.0)x=-x;if(!(!(y<=r)|!(t<=p)|!(u<=n)|!(s>=q)|!(w>=o)|!(v>=m))){l=0;break}if(z>0.0){r=r+-.05000000074505806;q=z+(q+.05000000074505806)}else{r=z+(r+-.05000000074505806);q=q+.05000000074505806}if(A>0.0){p=p+-.05000000074505806;o=A+(o+.05000000074505806)}else{p=A+(p+-.05000000074505806);o=o+.05000000074505806}if(x>0.0){n=n+-.05000000074505806;m=x+(m+.05000000074505806)}else{n=x+(n+-.05000000074505806);m=m+.05000000074505806}F=Yx(b+4|0,l)|0;a:do if(F){D=c[b+12>>2]|0;if((D|0)<=-1){F=c[b+4>>2]|0;break}if((D|0)>0){E=0;while(1){G=c[F+32>>2]|0;E=E+1|0;if(!G)break a;if((E|0)>=(D|0)){F=G;break}else F=G}}}else F=0;while(0);g[l>>2]=r;g[l+4>>2]=p;g[l+8>>2]=n;g[l+12>>2]=k;g[l+16>>2]=q;g[l+20>>2]=o;g[l+24>>2]=m;g[l+28>>2]=j;Xx(b+4|0,F,l);c[b+172>>2]=(c[b+172>>2]|0)+1;l=1;break}F=Yx(b+4|0,l)|0;b:do if(F){D=c[b+12>>2]|0;if((D|0)<=-1){F=c[b+4>>2]|0;break}if((D|0)>0){E=0;while(1){G=c[F+32>>2]|0;E=E+1|0;if(!G)break b;if((E|0)>=(D|0)){F=G;break}else F=G}}}else F=0;while(0);g[l>>2]=r;g[l+4>>2]=p;g[l+8>>2]=n;g[l+12>>2]=k;g[l+16>>2]=q;g[l+20>>2]=o;g[l+24>>2]=m;g[l+28>>2]=j;Xx(b+4|0,F,l);c[b+172>>2]=(c[b+172>>2]|0)+1;l=1}while(0);D=c[d+52>>2]|0;E=c[d+56>>2]|0;if(!D)c[b+(c[d+60>>2]<<2)+124>>2]=E;else c[D+56>>2]=E;D=c[d+56>>2]|0;if(D)c[D+52>>2]=c[d+52>>2];c[d+16>>2]=c[e+0>>2];c[d+20>>2]=c[e+4>>2];c[d+24>>2]=c[e+8>>2];c[d+28>>2]=c[e+12>>2];c[d+32>>2]=c[f+0>>2];c[d+36>>2]=c[f+4>>2];c[d+40>>2]=c[f+8>>2];c[d+44>>2]=c[f+12>>2];c[d+60>>2]=c[b+144>>2];f=b+(c[b+144>>2]<<2)+124|0;c[d+52>>2]=0;c[d+56>>2]=c[f>>2];e=c[f>>2]|0;if(e)c[e+52>>2]=d;c[f>>2]=d;if(!l){i=h;return}a[b+194>>0]=1;if(a[b+193>>0]|0){i=h;return}c[h>>2]=11696;c[h+4>>2]=b;ly(b+64|0,c[b+64>>2]|0,c[d+48>>2]|0,h);ly(b+4|0,c[b+4>>2]|0,c[d+48>>2]|0,h);i=h;return}function ly(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=i;if((d|0)==0|(e|0)==0){i=h;return}if((c[b+24>>2]|0)<128?(c[b+28>>2]|0)<128:0){c[5004]=(c[5004]|0)+1;j=fF(1043)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}m=c[b+24>>2]|0;if((m|0)>0){l=0;do{k=j+(l<<3)|0;if(k){p=(c[b+32>>2]|0)+(l<<3)|0;q=c[p+4>>2]|0;c[k>>2]=c[p>>2];c[k+4>>2]=q}l=l+1|0}while((l|0)!=(m|0))}k=c[b+32>>2]|0;if(k){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=j;c[b+28>>2]=128;j=b+28|0}else j=b+28|0;c[b+24>>2]=128;m=c[b+32>>2]|0;c[m>>2]=d;c[m+4>>2]=e;e=1;m=124;do{l=e+ -1|0;o=c[b+32>>2]|0;k=c[o+(l<<3)>>2]|0;d=c[o+(l<<3)+4>>2]|0;if((l|0)>(m|0)){m=c[b+24>>2]|0;if((m|0)<(m<<1|0)?(c[j>>2]|0)<(m<<1|0):0){if(m){c[5004]=(c[5004]|0)+1;n=fF((m<<4|3)+16|0)|0;if(!n)q=0;else{c[(n+19&-16)+ -4>>2]=n;q=n+19&-16}o=c[b+24>>2]|0;if((o|0)>0){n=0;do{p=q+(n<<3)|0;if(p){s=(c[b+32>>2]|0)+(n<<3)|0;r=c[s+4>>2]|0;c[p>>2]=c[s>>2];c[p+4>>2]=r}n=n+1|0}while((n|0)!=(o|0));o=q}else o=q}else o=0;n=c[b+32>>2]|0;if(n){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[n+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=o;c[j>>2]=m<<1}c[b+24>>2]=m<<1;m=(m<<1)+ -4|0}do if((k|0)==(d|0))if(!(c[k+40>>2]|0))e=l;else{r=c[k+36>>2]|0;s=o+(l<<3)|0;c[s>>2]=r;c[s+4>>2]=r;s=c[k+40>>2]|0;r=(c[b+32>>2]|0)+(e<<3)|0;c[r>>2]=s;c[r+4>>2]=s;r=c[k+40>>2]|0;s=(c[b+32>>2]|0)+(e+1<<3)|0;c[s>>2]=c[k+36>>2];c[s+4>>2]=r;e=e+2|0}else if(((((+g[k>>2]<=+g[d+16>>2]?+g[k+16>>2]>=+g[d>>2]:0)?+g[k+4>>2]<=+g[d+20>>2]:0)?+g[k+20>>2]>=+g[d+4>>2]:0)?+g[k+8>>2]<=+g[d+24>>2]:0)?+g[k+24>>2]>=+g[d+8>>2]:0){n=(c[d+40>>2]|0)!=0;if(!(c[k+40>>2]|0))if(n){s=c[d+36>>2]|0;r=o+(l<<3)|0;c[r>>2]=k;c[r+4>>2]=s;r=c[d+40>>2]|0;s=(c[b+32>>2]|0)+(e<<3)|0;c[s>>2]=k;c[s+4>>2]=r;e=e+1|0;break}else{rc[c[(c[f>>2]|0)+8>>2]&127](f,k,d);e=l;break}else{l=o+(l<<3)|0;o=c[k+36>>2]|0;if(n){r=c[d+36>>2]|0;c[l>>2]=o;c[l+4>>2]=r;r=c[d+36>>2]|0;s=(c[b+32>>2]|0)+(e<<3)|0;c[s>>2]=c[k+40>>2];c[s+4>>2]=r;s=c[d+40>>2]|0;r=(c[b+32>>2]|0)+(e+1<<3)|0;c[r>>2]=c[k+36>>2];c[r+4>>2]=s;r=c[d+40>>2]|0;s=(c[b+32>>2]|0)+(e+2<<3)|0;c[s>>2]=c[k+40>>2];c[s+4>>2]=r;e=e+3|0;break}else{c[l>>2]=o;c[l+4>>2]=d;s=(c[b+32>>2]|0)+(e<<3)|0;c[s>>2]=c[k+40>>2];c[s+4>>2]=d;e=e+1|0;break}}}else e=l;while(0)}while((e|0)!=0);i=h;return}function my(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+48|0;Wx(b+4|0,((aa(c[b+152>>2]|0,c[b+16>>2]|0)|0)/100|0)+1|0);if(c[b+164>>2]|0){p=((aa(c[b+148>>2]|0,c[b+76>>2]|0)|0)/100|0)+1|0;Wx(b+64|0,p);p=(c[b+164>>2]|0)-p|0;c[b+164>>2]=(p|0)<0?0:p}l=((c[b+144>>2]|0)+1|0)%2|0;c[b+144>>2]=l;l=c[b+(l<<2)+124>>2]|0;if(l){do{m=l+56|0;k=l;l=c[m>>2]|0;n=c[k+52>>2]|0;if(!n)c[b+(c[k+60>>2]<<2)+124>>2]=l;else c[n+56>>2]=l;n=c[m>>2]|0;if(n)c[n+52>>2]=c[k+52>>2];c[k+52>>2]=0;c[m>>2]=c[b+132>>2];m=c[b+132>>2]|0;if(m)c[m+52>>2]=k;c[b+132>>2]=k;n=c[k+48>>2]|0;Yx(b+4|0,n)|0;m=c[b+8>>2]|0;if(m){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+8>>2]=n;c[b+16>>2]=(c[b+16>>2]|0)+ -1;c[e+16>>2]=c[k+16>>2];c[e+20>>2]=c[k+20>>2];c[e+24>>2]=c[k+24>>2];c[e+28>>2]=c[k+28>>2];c[e+32>>2]=c[k+32>>2];c[e+36>>2]=c[k+36>>2];c[e+40>>2]=c[k+40>>2];c[e+44>>2]=c[k+44>>2];m=c[b+68>>2]|0;if(!m){c[5004]=(c[5004]|0)+1;m=fF(63)|0;if((m|0)!=0?(c[(m+19&-16)+ -4>>2]=m,(m+19&-16|0)!=0):0){o=(m+19&-16)+0|0;n=o+44|0;do{c[o>>2]=0;o=o+4|0}while((o|0)<(n|0));m=m+19&-16}else m=0}else c[b+68>>2]=0;c[m+32>>2]=0;c[m+36>>2]=k;c[m+40>>2]=0;c[m+0>>2]=c[e+16>>2];c[m+4>>2]=c[e+20>>2];c[m+8>>2]=c[e+24>>2];c[m+12>>2]=c[e+28>>2];c[m+16>>2]=c[e+32>>2];c[m+20>>2]=c[e+36>>2];c[m+24>>2]=c[e+40>>2];c[m+28>>2]=c[e+44>>2];Xx(b+64|0,c[b+64>>2]|0,m);c[b+76>>2]=(c[b+76>>2]|0)+1;c[k+48>>2]=m;c[k+60>>2]=2}while((l|0)!=0);c[b+164>>2]=c[b+76>>2];a[b+194>>0]=1}c[e>>2]=11696;c[e+4>>2]=b;if((a[b+193>>0]|0)!=0?(ly(b+4|0,c[b+4>>2]|0,c[b+64>>2]|0,e),(a[b+193>>0]|0)!=0):0){p=c[b+4>>2]|0;ly(b+4|0,p,p,e)}do if((a[b+194>>0]|0)!=0?(h=c[b+136>>2]|0,h=Pb[c[(c[h>>2]|0)+28>>2]&127](h)|0,j=c[h+4>>2]|0,(j|0)>0):0){l=(aa(c[b+156>>2]|0,j)|0)/100|0;p=c[b+160>>2]|0;l=(p|0)>(l|0)?p:l;l=(j|0)<(l|0)?j:l;if((l|0)>0){k=0;do{n=((c[b+184>>2]|0)+k|0)%(j|0)|0;o=c[h+12>>2]|0;m=c[o+(n<<4)>>2]|0;n=c[o+(n<<4)+4>>2]|0;o=c[m+48>>2]|0;p=c[n+48>>2]|0;if(!(((((+g[o>>2]<=+g[p+16>>2]?+g[o+16>>2]>=+g[p>>2]:0)?+g[o+4>>2]<=+g[p+20>>2]:0)?+g[o+20>>2]>=+g[p+4>>2]:0)?+g[o+8>>2]<=+g[p+24>>2]:0)?+g[o+24>>2]>=+g[p+8>>2]:0)){j=c[b+136>>2]|0;Tb[c[(c[j>>2]|0)+12>>2]&31](j,m,n,d)|0;j=c[h+4>>2]|0;k=k+ -1|0;l=l+ -1|0}k=k+1|0}while((k|0)<(l|0));if((j|0)<=0){c[b+184>>2]=0;break}}c[b+184>>2]=((c[b+184>>2]|0)+l|0)%(j|0)|0}while(0);c[b+180>>2]=(c[b+180>>2]|0)+1;c[b+160>>2]=1;a[b+194>>0]=0;h=c[b+168>>2]|0;if(!h){g[b+176>>2]=0.0;j=c[b+172>>2]|0}else{j=c[b+172>>2]|0;g[b+176>>2]=+(j>>>0)/+(h>>>0)}c[b+172>>2]=j>>>1;c[b+168>>2]=h>>>1;p=c[b+136>>2]|0;if(!(Pb[c[(c[p>>2]|0)+56>>2]&127](p)|0)){i=e;return}h=c[b+136>>2]|0;h=Pb[c[(c[h>>2]|0)+28>>2]&127](h)|0;m=c[h+4>>2]|0;if((m|0)>1){os(h,0,m+ -1|0);o=0;l=0;j=0;k=0;f=45}else{l=0;o=0;j=0;k=0}while(1){if((f|0)==45)m=c[h+4>>2]|0;if((j|0)>=(m|0))break;n=c[h+12>>2]|0;m=n+(j<<4)|0;f=c[m>>2]|0;n=n+(j<<4)+4|0;p=c[n>>2]|0;if((f|0)==(l|0))if((p|0)==(o|0))f=55;else f=49;else{l=f;f=49}if((f|0)==49){f=0;q=c[l+48>>2]|0;o=c[p+48>>2]|0;if(((((+g[q>>2]<=+g[o+16>>2]?+g[q+16>>2]>=+g[o>>2]:0)?+g[q+4>>2]<=+g[o+20>>2]:0)?+g[q+20>>2]>=+g[o+4>>2]:0)?+g[q+8>>2]<=+g[o+24>>2]:0)?+g[q+24>>2]>=+g[o+8>>2]:0)o=p;else{o=p;f=55}}if((f|0)==55){q=c[b+136>>2]|0;rc[c[(c[q>>2]|0)+32>>2]&127](q,m,d);c[m>>2]=0;c[n>>2]=0;k=k+1|0}j=j+1|0;f=45}if((m|0)>1){os(h,0,m+ -1|0);m=c[h+4>>2]|0}b=m-k|0;if((k|0)<0){if((c[h+8>>2]|0)<(b|0)){if((m|0)==(k|0))d=0;else{c[5004]=(c[5004]|0)+1;d=fF((b<<4|3)+16|0)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}k=c[h+4>>2]|0}if((k|0)>0){f=0;do{q=c[h+12>>2]|0;c[d+(f<<4)>>2]=c[q+(f<<4)>>2];c[d+(f<<4)+4>>2]=c[q+(f<<4)+4>>2];c[d+(f<<4)+8>>2]=c[q+(f<<4)+8>>2];c[d+(f<<4)+12>>2]=c[q+(f<<4)+12>>2];f=f+1|0}while((f|0)!=(k|0))}f=c[h+12>>2]|0;if(f){if(a[h+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[h+12>>2]=0}a[h+16>>0]=1;c[h+12>>2]=d;c[h+8>>2]=b;d=h+12|0}else d=h+12|0;do{p=(c[d>>2]|0)+(m<<4)|0;m=m+1|0;q=(m|0)==(b|0);c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0}while(!q)}c[h+4>>2]=b;i=e;return}function ny(a){a=a|0;return c[a+136>>2]|0}function oy(a){a=a|0;return c[a+136>>2]|0}function py(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;e=i;f=c[a+4>>2]|0;a=c[a+64>>2]|0;do if(!f)if(!a){h=0.0;j=0.0;o=0.0;n=0.0;m=0.0;l=0.0;k=0.0;p=0.0}else{h=+g[a>>2];j=+g[a+4>>2];o=+g[a+8>>2];n=+g[a+12>>2];m=+g[a+16>>2];l=+g[a+20>>2];k=+g[a+24>>2];p=+g[a+28>>2]}else{h=+g[f>>2];if(!a){j=+g[f+4>>2];o=+g[f+8>>2];n=+g[f+12>>2];m=+g[f+16>>2];l=+g[f+20>>2];k=+g[f+24>>2];p=+g[f+28>>2];break}else{t=+g[a>>2];r=+g[f+16>>2];m=+g[a+16>>2];s=+g[f+4>>2];j=+g[a+4>>2];q=+g[f+20>>2];l=+g[a+20>>2];n=+g[f+8>>2];o=+g[a+8>>2];p=+g[f+24>>2];k=+g[a+24>>2];h=h<t?h:t;j=s<j?s:j;o=n<o?n:o;n=0.0;m=r>m?r:m;l=q>l?q:l;k=p>k?p:k;p=0.0;break}}while(0);g[b>>2]=h;g[b+4>>2]=j;g[b+8>>2]=o;g[b+12>>2]=n;g[d>>2]=m;g[d+4>>2]=l;g[d+8>>2]=k;g[d+12>>2]=p;i=e;return}function qy(b,d){b=b|0;d=d|0;var e=0;d=i;if((c[b+16>>2]|0)!=(0-(c[b+76>>2]|0)|0)){i=d;return}e=c[b+4>>2]|0;if(e)Vx(b+4|0,e);e=c[b+8>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+8>>2]=0;c[b+12>>2]=-1;e=c[b+36>>2]|0;if(e){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;c[b+20>>2]=0;e=c[b+64>>2]|0;if(e)Vx(b+64|0,e);e=c[b+68>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+68>>2]=0;c[b+72>>2]=-1;e=c[b+96>>2]|0;if(e){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;c[b+80>>2]=0;a[b+193>>0]=0;a[b+194>>0]=1;c[b+144>>2]=0;c[b+164>>2]=0;c[b+148>>2]=1;c[b+152>>2]=0;c[b+156>>2]=10;c[b+160>>2]=1;c[b+124>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;c[b+168>>2]=0;c[b+172>>2]=0;c[b+176>>2]=0;c[b+180>>2]=0;c[b+184>>2]=0;c[b+188>>2]=0;i=d;return}function ry(a){a=a|0;return}function sy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ty(a,b){a=a|0;b=b|0;var d=0;d=i;a=c[a+4>>2]|0;gc[c[(c[a>>2]|0)+8>>2]&31](a,c[b+36>>2]|0)|0;i=d;return}function uy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function vy(a,b){a=a|0;b=b|0;var d=0;d=i;a=c[a+4>>2]|0;gc[c[(c[a>>2]|0)+8>>2]&31](a,c[b+36>>2]|0)|0;i=d;return}function wy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function xy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((b|0)==(d|0)){i=e;return}f=c[(c[a+4>>2]|0)+136>>2]|0;Yb[c[(c[f>>2]|0)+8>>2]&31](f,c[b+36>>2]|0,c[d+36>>2]|0)|0;d=(c[a+4>>2]|0)+160|0;c[d>>2]=(c[d>>2]|0)+1;i=e;return}function yy(a,b){a=a|0;b=b|0;var d=0;d=i;rc[c[(c[a>>2]|0)+8>>2]&127](a,b,c[(c[a+8>>2]|0)+48>>2]|0);i=d;return}function zy(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;c[b>>2]=11776;c[5004]=(c[5004]|0)+1;k=fF(379)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}g[k+308>>2]=9999999747378752.0e-20;l=k+332|0;a[l>>0]=a[l>>0]&-16;c[b+24>>2]=k;k=(c[d+20>>2]|0)==0;c[5004]=(c[5004]|0)+1;l=fF(23)|0;if(!l)m=0;else{c[(l+19&-16)+ -4>>2]=l;m=l+19&-16}l=(m|0)==0;if(k){if(l)m=0;else c[m>>2]=14576;c[b+28>>2]=m}else{if(l)m=0;else c[m>>2]=13248;c[b+28>>2]=m}c[5004]=(c[5004]|0)+1;k=fF(43)|0;if((k|0)!=0?(j=k+19&-16,c[j+ -4>>2]=k,(k+19&-16|0)!=0):0){m=c[b+24>>2]|0;n=c[b+28>>2]|0;a[j+4>>0]=0;c[(k+19&-16)>>2]=18792;c[j+16>>2]=0;c[j+20>>2]=3;c[j+12>>2]=m;c[j+8>>2]=n;j=k+19&-16}else j=0;c[b+32>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12784;j=j+19&-16}else j=0;c[b+36>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12680;j=j+19&-16}else j=0;c[b+40>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12592;j=j+19&-16}else j=0;c[b+44>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12496;j=j+19&-16}else j=0;c[b+48>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12400;j=j+19&-16}else j=0;c[b+52>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12320;j=j+19&-16}else j=0;c[b+56>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12224;j=j+19&-16}else j=0;c[b+60>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12128;j=j+19&-16}else j=0;c[b+76>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12128;j=j+19&-16}else j=0;c[b+80>>2]=j;a[j+4>>0]=1;c[5004]=(c[5004]|0)+1;j=fF(27)|0;if((j|0)!=0?(c[(j+19&-16)+ -4>>2]=j,(j+19&-16|0)!=0):0){a[(j+19&-16)+4>>0]=0;c[(j+19&-16)>>2]=12040;j=j+19&-16}else j=0;c[b+72>>2]=j;c[5004]=(c[5004]|0)+1;j=fF(35)|0;if((j|0)!=0?(h=j+19&-16,c[h+ -4>>2]=j,(j+19&-16|0)!=0):0){a[h+4>>0]=0;c[(j+19&-16)>>2]=11904;c[h+8>>2]=1;c[h+12>>2]=0;h=j+19&-16}else h=0;c[b+88>>2]=h;c[5004]=(c[5004]|0)+1;h=fF(35)|0;if((h|0)!=0?(f=h+19&-16,c[f+ -4>>2]=h,(h+19&-16|0)!=0):0){a[f+4>>0]=0;c[(h+19&-16)>>2]=11904;c[f+8>>2]=1;c[f+12>>2]=0;f=h+19&-16}else f=0;c[b+84>>2]=f;a[f+4>>0]=1;f=c[d+16>>2]|0;f=(f|0)<36?36:f;f=(f|0)>80?f:80;f=(f|0)>44?f:44;h=c[d>>2]|0;if(!h){a[b+12>>0]=1;c[5004]=(c[5004]|0)+1;h=fF(39)|0;do if(!h)h=0;else{l=h+19&-16;c[l+ -4>>2]=h;if(!(h+19&-16)){h=0;break}j=c[d+8>>2]|0;c[(h+19&-16)>>2]=772;c[l+4>>2]=j;c[5004]=(c[5004]|0)+1;j=fF((j*772|3)+16|0)|0;if(!j)k=0;else{c[(j+19&-16)+ -4>>2]=j;k=j+19&-16}c[l+16>>2]=k;c[l+12>>2]=k;j=c[l+4>>2]|0;c[l+8>>2]=j;if(j+ -1|0){n=c[(h+19&-16)>>2]|0;m=j+ -1|0;l=k;do{o=l;l=l+n|0;c[o>>2]=l;m=m+ -1|0}while((m|0)!=0);k=k+(aa(n,j+ -1|0)|0)|0}c[k>>2]=0;h=h+19&-16}while(0);c[b+8>>2]=h}else{a[b+12>>0]=0;c[b+8>>2]=h}h=c[d+4>>2]|0;if(h){a[b+20>>0]=0;c[b+16>>2]=h;i=e;return}a[b+20>>0]=1;c[5004]=(c[5004]|0)+1;h=fF(39)|0;do if(!h)d=0;else{j=h+19&-16;c[j+ -4>>2]=h;if(!(h+19&-16)){d=0;break}d=c[d+12>>2]|0;c[(h+19&-16)>>2]=f;c[j+4>>2]=d;d=aa(d,f)|0;c[5004]=(c[5004]|0)+1;d=fF(d+19|0)|0;if(!d)f=0;else{c[(d+19&-16)+ -4>>2]=d;f=d+19&-16}c[j+16>>2]=f;c[j+12>>2]=f;d=c[j+4>>2]|0;c[j+8>>2]=d;if(d+ -1|0){k=c[(h+19&-16)>>2]|0;j=d+ -1|0;l=f;do{o=l;l=l+k|0;c[o>>2]=l;j=j+ -1|0}while((j|0)!=0);f=f+(aa(k,d+ -1|0)|0)|0}c[f>>2]=0;d=h+19&-16}while(0);c[b+16>>2]=d;i=e;return}function Ay(a){a=a|0;var b=0;b=i;By(a);gF(a);i=b;return}function By(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=11776;if(a[b+20>>0]|0){e=c[b+16>>2]|0;f=c[e+16>>2]|0;if(f){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0);e=c[b+16>>2]|0}if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}}if(a[b+12>>0]|0){e=c[b+8>>2]|0;f=c[e+16>>2]|0;if(f){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0);e=c[b+8>>2]|0}if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}}e=c[b+32>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+32>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+36>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+36>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+40>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+40>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+44>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+44>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+48>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+48>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+52>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+52>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+56>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+56>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+60>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+60>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+76>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+76>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+80>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+80>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+72>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+72>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+88>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+88>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+84>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+84>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+24>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}f=c[b+28>>2]|0;Lb[c[c[f>>2]>>2]&511](f);b=c[b+28>>2]|0;if(!b){i=d;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function Cy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;do if(!((b|0)==8&(d|0)==8)){if((b|0)==8&(d|0)==1){a=a+76|0;break}if((b|0)==1&(d|0)==8){a=a+80|0;break}if(!(d|b)){a=a+72|0;break}if((b|0)<20&(d|0)==28){a=a+88|0;break}if((d|0)<20&(b|0)==28){a=a+84|0;break}if((b|0)<20){if((d|0)<20){a=a+32|0;break}if((d+ -21|0)>>>0<9){a=a+36|0;break}}else if((d|0)<20?(b+ -21|0)>>>0<9:0){a=a+40|0;break}if((b|0)==31)if((d|0)==31){a=a+48|0;break}else{a=a+44|0;break}else if((d|0)==31){a=a+52|0;break}else{a=a+56|0;break}}else a=a+60|0;while(0);i=e;return c[a>>2]|0}function Dy(a){a=a|0;return c[a+8>>2]|0}function Ey(a){a=a|0;return c[a+16>>2]|0}function Fy(a){a=a|0;return c[a+24>>2]|0}function Gy(a){a=a|0;return}function Hy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Iy(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;g=i;h=c[d>>2]|0;h=gc[c[(c[h>>2]|0)+56>>2]&31](h,28)|0;if(!(a[b+4>>0]|0)){if(!h){f=0;i=g;return f|0}j=c[b+8>>2]|0;b=c[b+12>>2]|0;d=c[d>>2]|0;c[h+4>>2]=d;c[h>>2]=19408;a[h+8>>0]=0;c[h+12>>2]=0;a[h+16>>0]=0;c[h+20>>2]=j;c[h+24>>2]=b;if(!(Yb[c[(c[d>>2]|0)+24>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0)){j=h;i=g;return j|0}j=c[h+4>>2]|0;c[h+12>>2]=Yb[c[(c[j>>2]|0)+12>>2]&31](j,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[h+8>>0]=1;j=h;i=g;return j|0}else{if(!h){j=0;i=g;return j|0}k=c[b+8>>2]|0;b=c[b+12>>2]|0;j=c[d>>2]|0;c[h+4>>2]=j;c[h>>2]=19408;a[h+8>>0]=0;c[h+12>>2]=0;a[h+16>>0]=1;c[h+20>>2]=k;c[h+24>>2]=b;if(!(Yb[c[(c[j>>2]|0)+24>>2]&31](j,c[f+8>>2]|0,c[e+8>>2]|0)|0)){k=h;i=g;return k|0}k=c[h+4>>2]|0;c[h+12>>2]=Yb[c[(c[k>>2]|0)+12>>2]&31](k,c[f+8>>2]|0,c[e+8>>2]|0)|0;a[h+8>>0]=1;k=h;i=g;return k|0}return 0}function Jy(a){a=a|0;return}function Ky(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Ly(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,16)|0;if(!g){g=0;i=b;return g|0}d=c[d>>2]|0;c[g+4>>2]=d;c[g>>2]=17896;a[g+8>>0]=0;c[g+12>>2]=0;if(!(Yb[c[(c[d>>2]|0)+24>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0)){i=b;return g|0}d=c[g+4>>2]|0;c[g+12>>2]=Yb[c[(c[d>>2]|0)+12>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[g+8>>0]=1;i=b;return g|0}function My(a){a=a|0;return}function Ny(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Oy(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;h=c[d>>2]|0;h=gc[c[(c[h>>2]|0)+56>>2]&31](h,20)|0;if(!h){b=0;i=g;return b|0}j=c[d+4>>2]|0;b=a[b+4>>0]|0;d=c[d>>2]|0;c[h+4>>2]=d;c[h>>2]=16904;a[h+8>>0]=0;c[h+12>>2]=j;a[h+16>>0]=b;if(j){j=h;i=g;return j|0}c[h+12>>2]=Yb[c[(c[d>>2]|0)+12>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[h+8>>0]=1;j=h;i=g;return j|0}function Py(a){a=a|0;return}function Qy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Ry(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,16)|0;if(!g){g=0;i=b;return g|0}d=c[d>>2]|0;c[g+4>>2]=d;c[g>>2]=16816;a[g+8>>0]=0;c[g+12>>2]=0;c[g+12>>2]=Yb[c[(c[d>>2]|0)+12>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;a[g+8>>0]=1;i=b;return g|0}function Sy(a){a=a|0;return}function Ty(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Uy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;a=i;d=c[b>>2]|0;d=gc[c[(c[d>>2]|0)+56>>2]&31](d,8)|0;if(!d){e=0;i=a;return e|0}c[d+4>>2]=c[b>>2];c[d>>2]=12904;e=d;i=a;return e|0}function Vy(a){a=a|0;return}function Wy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Xy(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,44)|0;if(!g){g=0;i=b;return g|0}c[g+4>>2]=c[d>>2];c[g>>2]=18040;a[g+24>>0]=1;c[g+20>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;a[g+28>>0]=1;c[g+32>>2]=c[d+4>>2];a[g+36>>0]=0;c[g+40>>2]=c[(c[f+4>>2]|0)+68>>2];IC(g,e,f);i=b;return g|0}function Yy(a){a=a|0;return}function Zy(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function _y(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;h=i;b=c[d>>2]|0;b=gc[c[(c[b>>2]|0)+56>>2]&31](b,48)|0;if(!b){m=0;i=h;return m|0}c[b+4>>2]=c[d>>2];c[b>>2]=18208;a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;c[b+20>>2]=0;c[b+32>>2]=c[d+4>>2];a[b+36>>0]=0;c[5004]=(c[5004]|0)+1;d=fF(87)|0;if((d|0)!=0?(g=d+19&-16,c[g+ -4>>2]=d,(d+19&-16|0)!=0):0){c[(d+19&-16)>>2]=19600;a[g+20>>0]=1;c[g+16>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;a[g+24>>0]=0;a[g+44>>0]=1;c[g+40>>2]=0;c[g+32>>2]=0;c[g+36>>2]=0;a[g+64>>0]=1;c[g+60>>2]=0;c[g+52>>2]=0;c[g+56>>2]=0;c[5004]=(c[5004]|0)+1;j=fF(43)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}k=c[g+8>>2]|0;if((k|0)>0){l=0;do{m=j+(l*12|0)|0;if(m){n=(c[g+16>>2]|0)+(l*12|0)|0;c[m+0>>2]=c[n+0>>2];c[m+4>>2]=c[n+4>>2];c[m+8>>2]=c[n+8>>2]}l=l+1|0}while((l|0)!=(k|0))}k=c[g+16>>2]|0;if(k){if(a[g+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[g+16>>2]=0}a[g+20>>0]=1;c[g+16>>2]=j;c[g+12>>2]=2;WD(d+19&-16);g=d+19&-16}else g=0;c[b+8>>2]=g;c[b+40>>2]=c[(c[e+4>>2]|0)+68>>2];c[b+44>>2]=c[(c[f+4>>2]|0)+68>>2];n=b;i=h;return n|0}function $y(a){a=a|0;return}function az(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function bz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,44)|0;if(!g){g=0;i=b;return g|0}c[g+4>>2]=c[d>>2];c[g>>2]=18040;a[g+24>>0]=1;c[g+20>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;a[g+28>>0]=0;c[g+32>>2]=c[d+4>>2];a[g+36>>0]=0;c[g+40>>2]=c[(c[e+4>>2]|0)+68>>2];IC(g,e,f);i=b;return g|0}function cz(a){a=a|0;return}function dz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ez(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,80)|0;if(!g){g=0;i=b;return g|0}c[g+4>>2]=c[d>>2];c[g>>2]=18432;a[g+8>>0]=1;d=c[d>>2]|0;c[g+12>>2]=18464;c[g+60>>2]=d;c[g+64>>2]=0;c[g+16>>2]=f;c[g+20>>2]=e;e=Yb[c[(c[d>>2]|0)+12>>2]&31](d,c[f+8>>2]|0,c[e+8>>2]|0)|0;c[g+76>>2]=e;f=c[g+60>>2]|0;Nb[c[(c[f>>2]|0)+20>>2]&127](f,e);i=b;return g|0}function fz(a){a=a|0;return}function gz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function hz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=i;g=c[d>>2]|0;g=gc[c[(c[g>>2]|0)+56>>2]&31](g,80)|0;if(!g){g=0;i=b;return g|0}c[g+4>>2]=c[d>>2];c[g>>2]=18432;a[g+8>>0]=0;d=c[d>>2]|0;c[g+12>>2]=18464;c[g+60>>2]=d;c[g+64>>2]=0;c[g+16>>2]=e;c[g+20>>2]=f;f=Yb[c[(c[d>>2]|0)+12>>2]&31](d,c[e+8>>2]|0,c[f+8>>2]|0)|0;c[g+76>>2]=f;e=c[g+60>>2]|0;Nb[c[(c[e>>2]|0)+20>>2]&127](e,f);i=b;return g|0}function iz(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return}function jz(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function kz(a){a=a|0;return}function lz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function mz(a,b){a=a|0;b=b|0;return}function nz(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=13008;e=c[b+276>>2]|0;if(!e){a[b+280>>0]=1;c[b+276>>2]=0;c[b+268>>2]=0;c[b+272>>2]=0}else{if(a[b+280>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}a[b+280>>0]=1;c[b+276>>2]=0;c[b+268>>2]=0;c[b+272>>2]=0}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function oz(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=13008;e=c[b+276>>2]|0;if(e){if(a[b+280>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+276>>2]=0}a[b+280>>0]=1;c[b+276>>2]=0;c[b+268>>2]=0;c[b+272>>2]=0;i=d;return}function pz(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;e=i;d=c[d>>2]|0;h=c[b+268>>2]|0;a:do if((h|0)>0){k=c[b+276>>2]|0;j=0;while(1){g=j+1|0;if((c[k+(j<<2)>>2]|0)==(d|0))break;if((g|0)<(h|0))j=g;else break a}if((j|0)!=(h|0)){i=e;return}}while(0);if((h|0)==(c[b+272>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[b+268>>2]|0}if((h|0)>0){k=0;do{j=g+(k<<2)|0;if(j)c[j>>2]=c[(c[b+276>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(h|0))}j=c[b+276>>2]|0;if(j){if(a[b+280>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[b+268>>2]|0}c[b+276>>2]=0}a[b+280>>0]=1;c[b+276>>2]=g;c[b+272>>2]=f}f=(c[b+276>>2]|0)+(h<<2)|0;if(f)c[f>>2]=d;c[b+268>>2]=h+1;i=e;return}function qz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;e=i;b=c[b>>2]|0;h=c[a+268>>2]|0;if((h|0)<=0){i=e;return}k=c[a+276>>2]|0;j=0;while(1){g=k+(j<<2)|0;d=j+1|0;if((c[g>>2]|0)==(b|0))break;if((d|0)<(h|0))j=d;else{f=7;break}}if((f|0)==7){i=e;return}if((j|0)>=(h|0)){i=e;return}c[g>>2]=c[k+(h+ -1<<2)>>2];c[a+268>>2]=h+ -1;i=e;return}function rz(a){a=a|0;var b=0;b=i;sz(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function sz(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=13056;e=c[b+284>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+284>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b>>2]=13008;e=c[b+276>>2]|0;if(!e){a[b+280>>0]=1;c[b+276>>2]=0;c[b+268>>2]=0;e=b+272|0;c[e>>2]=0;i=d;return}if(a[b+280>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+276>>2]=0;a[b+280>>0]=1;c[b+276>>2]=0;c[b+268>>2]=0;e=b+272|0;c[e>>2]=0;i=d;return}function tz(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;if(!e)e=c[b+188>>2]|0;g=c[d>>2]|0;k=c[b+268>>2]|0;a:do if((k|0)>0){m=c[b+276>>2]|0;j=0;while(1){l=j+1|0;if((c[m+(j<<2)>>2]|0)==(g|0))break;if((l|0)<(k|0))j=l;else break a}if((j|0)!=(k|0)){i=f;return}}while(0);if((k|0)==(c[b+272>>2]|0)?(h=(k|0)==0?1:k<<1,(k|0)<(h|0)):0){if(!h)j=0;else{c[5004]=(c[5004]|0)+1;j=fF((h<<2|3)+16|0)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}k=c[b+268>>2]|0}if((k|0)>0){m=0;do{l=j+(m<<2)|0;if(l)c[l>>2]=c[(c[b+276>>2]|0)+(m<<2)>>2];m=m+1|0}while((m|0)!=(k|0))}l=c[b+276>>2]|0;if(l){if(a[b+280>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0);k=c[b+268>>2]|0}c[b+276>>2]=0}a[b+280>>0]=1;c[b+276>>2]=j;c[b+272>>2]=h}h=(c[b+276>>2]|0)+(k<<2)|0;if(h)c[h>>2]=g;c[b+268>>2]=k+1;m=c[b+284>>2]|0;Yb[c[(c[m>>2]|0)+8>>2]&31](m,e,d)|0;i=f;return}function uz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;h=i;f=c[b>>2]|0;if(!e)e=c[a+188>>2]|0;k=c[a+268>>2]|0;if((k|0)<=0){i=h;return}l=c[a+276>>2]|0;m=0;while(1){n=l+(m<<2)|0;j=m+1|0;if((c[n>>2]|0)==(f|0))break;if((j|0)<(k|0))m=j;else{g=9;break}}if((g|0)==9){i=h;return}if((m|0)>=(k|0)){i=h;return}c[n>>2]=c[l+(k+ -1<<2)>>2];c[a+268>>2]=k+ -1;n=c[a+284>>2]|0;Tb[c[(c[n>>2]|0)+12>>2]&31](n,e,b,d)|0;i=h;return}function vz(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=+h;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0.0,A=0.0,B=0,C=0,D=0,E=0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0.0,L=0.0,M=0.0;y=i;i=i+320|0;c[y+176>>2]=c[d+0>>2];c[y+180>>2]=c[d+4>>2];c[y+184>>2]=c[d+8>>2];c[y+188>>2]=c[d+12>>2];c[y+192>>2]=c[d+16>>2];c[y+196>>2]=c[d+20>>2];c[y+200>>2]=c[d+24>>2];c[y+204>>2]=c[d+28>>2];c[y+208>>2]=c[d+32>>2];c[y+212>>2]=c[d+36>>2];c[y+216>>2]=c[d+40>>2];c[y+220>>2]=c[d+44>>2];c[y+224>>2]=c[d+48>>2];c[y+228>>2]=c[d+52>>2];c[y+232>>2]=c[d+56>>2];c[y+236>>2]=c[d+60>>2];c[y+112>>2]=c[e+0>>2];c[y+116>>2]=c[e+4>>2];c[y+120>>2]=c[e+8>>2];c[y+124>>2]=c[e+12>>2];c[y+128>>2]=c[e+16>>2];c[y+132>>2]=c[e+20>>2];c[y+136>>2]=c[e+24>>2];c[y+140>>2]=c[e+28>>2];c[y+144>>2]=c[e+32>>2];c[y+148>>2]=c[e+36>>2];c[y+152>>2]=c[e+40>>2];c[y+156>>2]=c[e+44>>2];c[y+160>>2]=c[e+48>>2];c[y+164>>2]=c[e+52>>2];c[y+168>>2]=c[e+56>>2];c[y+172>>2]=c[e+60>>2];H=+g[y+164>>2]- +g[y+228>>2];M=+g[y+168>>2]- +g[y+232>>2];g[y+64>>2]=+g[y+160>>2]- +g[y+224>>2];g[y+68>>2]=H;g[y+72>>2]=M;g[y+76>>2]=0.0;Lo(y+176|0,y+112|0,y+248|0,y+240|0);M=+g[y+240>>2];H=M*+g[y+252>>2];F=M*+g[y+256>>2];g[y+48>>2]=+g[y+248>>2]*M;g[y+52>>2]=H;g[y+56>>2]=F;g[y+60>>2]=0.0;g[y+248>>2]=1.0;D=y+252|0;c[D+0>>2]=0;c[D+4>>2]=0;c[D+8>>2]=0;c[D+12>>2]=0;g[y+268>>2]=1.0;E=y+272|0;c[E+0>>2]=0;c[E+4>>2]=0;c[E+8>>2]=0;c[E+12>>2]=0;g[y+288>>2]=1.0;J=y+292|0;c[J+0>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;c[J+12>>2]=0;c[J+16>>2]=0;Hc(y+176|0,y+32|0);F=+g[y+32>>2];H=+g[y+36>>2];M=+g[y+40>>2];K=+g[y+44>>2];G=F*(2.0/(F*F+H*H+M*M+K*K));I=H*(2.0/(F*F+H*H+M*M+K*K));L=M*(2.0/(F*F+H*H+M*M+K*K));g[y+248>>2]=1.0-(H*I+M*L);g[D>>2]=F*I-K*L;g[y+256>>2]=F*L+K*I;g[y+260>>2]=0.0;g[y+264>>2]=F*I+K*L;g[y+268>>2]=1.0-(F*G+M*L);g[E>>2]=H*L-K*G;g[y+276>>2]=0.0;g[y+280>>2]=F*L-K*I;g[y+284>>2]=H*L+K*G;g[y+288>>2]=1.0-(F*G+H*I);g[J>>2]=0.0;wu(b,y+248|0,y+64|0,y+48|0,y+96|0,y+80|0);if((c[a+268>>2]|0)<=0){i=y;return}B=0;do{C=c[(c[a+276>>2]|0)+(B<<2)>>2]|0;if(gc[c[(c[f>>2]|0)+8>>2]&31](f,c[C+188>>2]|0)|0?(s=c[C+192>>2]|0,vc[c[(c[s>>2]|0)+8>>2]&127](s,C+4|0,y+16|0,y),z=+g[y+16>>2]+ +g[y+96>>2],v=+g[y+20>>2]+ +g[y+100>>2],p=+g[y+24>>2]+ +g[y+104>>2],g[y+16>>2]=z,g[y+20>>2]=v,g[y+24>>2]=p,g[y+28>>2]=0.0,j=+g[y>>2]+ +g[y+80>>2],u=+g[y+4>>2]+ +g[y+84>>2],o=+g[y+8>>2]+ +g[y+88>>2],g[y>>2]=j,g[y+4>>2]=u,g[y+8>>2]=o,g[y+12>>2]=0.0,x=+g[d+48>>2]-(j+z)*.5,t=+g[d+52>>2]-(u+v)*.5,n=+g[d+56>>2]-(o+p)*.5,A=+g[e+48>>2]-(j+z)*.5,w=+g[e+52>>2]-(u+v)*.5,q=+g[e+56>>2]-(o+p)*.5,s=x<-((j-z)*.5)|(x>(j-z)*.5?8:0)|(t>(u-v)*.5?16:0)|(t<-((u-v)*.5)?2:0)|(n>(o-p)*.5?32:0)|(n<-((o-p)*.5)?4:0),r=A<-((j-z)*.5)|(A>(j-z)*.5?8:0)|(w>(u-v)*.5?16:0)|(w<-((u-v)*.5)?2:0)|(q>(o-p)*.5?32:0)|(q<-((o-p)*.5)?4:0),(s&r|0)==0):0){G=1.0;D=1;E=0;H=0.0;F=1.0;while(1){if(!(D&s)){if((D&r|0)!=0?(m=(-x-F*(j-z)*.5)/(A-x),m<G):0)G=m}else{I=(-x-F*(j-z)*.5)/(A-x);if(H<=I)H=I}J=D<<1;if(!(J&s)){if((J&r|0)!=0?(l=(-t-F*(u-v)*.5)/(w-t),l<G):0)G=l}else{I=(-t-F*(u-v)*.5)/(w-t);if(H<=I)H=I}J=D<<2;if(!(J&s)){if((J&r|0)!=0?(k=(-n-F*(o-p)*.5)/(q-n),k<G):0)G=k}else{F=(-n-F*(o-p)*.5)/(q-n);if(H<=F)H=F}E=E+1|0;if((E|0)==2)break;else{D=D<<3;F=-1.0}}if(H<=G){J=c[C+192>>2]|0;c[y+248>>2]=0;c[y+252>>2]=J;c[y+256>>2]=C;c[y+260>>2]=C+4;c[y+264>>2]=-1;c[y+268>>2]=-1;Ku(b,y+176|0,y+112|0,y+248|0,f,h)}}B=B+1|0}while((B|0)<(c[a+268>>2]|0));i=y;return}function wz(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0.0;k=i;i=i+288|0;u=c[b+4>>2]|0;a[u+312>>0]=0;c[u>>2]=0;a[u+356>>0]=1;g[u+292>>2]=999999984306749400.0;g[u+296>>2]=999999984306749400.0;g[u+300>>2]=999999984306749400.0;g[u+304>>2]=0.0;c[u+336>>2]=0;c[u+340>>2]=0;c[u+344>>2]=0;c[u+348>>2]=0;a[u+352>>0]=0;a[u+332>>0]=a[u+332>>0]&-16;n=+g[e+48>>2]- +g[d+48>>2]-(+g[h+48>>2]- +g[f+48>>2]);m=+g[e+52>>2]- +g[d+52>>2]-(+g[h+52>>2]- +g[f+52>>2]);l=+g[e+56>>2]- +g[d+56>>2]-(+g[h+56>>2]- +g[f+56>>2]);c[k+216>>2]=10224;g[k+252>>2]=999999984306749400.0;a[k+256>>0]=0;u=c[b+8>>2]|0;t=c[b+12>>2]|0;b=c[b+4>>2]|0;c[k+136>>2]=13392;g[k+140>>2]=0.0;g[k+144>>2]=1.0;g[k+148>>2]=0.0;g[k+152>>2]=0.0;c[k+156>>2]=0;c[k+160>>2]=b;c[k+164>>2]=u;c[k+168>>2]=t;c[k+172>>2]=c[u+4>>2];c[k+176>>2]=c[t+4>>2];g[k+180>>2]=+$b[c[(c[u>>2]|0)+48>>2]&15](u);g[k+184>>2]=+$b[c[(c[t>>2]|0)+48>>2]&15](t);a[k+188>>0]=0;c[k+196>>2]=-1;c[k+208>>2]=1;c[k+212>>2]=1;g[k+128>>2]=999999984306749400.0;c[k+0>>2]=c[d+0>>2];c[k+4>>2]=c[d+4>>2];c[k+8>>2]=c[d+8>>2];c[k+12>>2]=c[d+12>>2];c[k+16>>2]=c[d+16>>2];c[k+20>>2]=c[d+20>>2];c[k+24>>2]=c[d+24>>2];c[k+28>>2]=c[d+28>>2];c[k+32>>2]=c[d+32>>2];c[k+36>>2]=c[d+36>>2];c[k+40>>2]=c[d+40>>2];c[k+44>>2]=c[d+44>>2];c[k+48>>2]=c[d+48>>2];c[k+52>>2]=c[d+52>>2];c[k+56>>2]=c[d+56>>2];c[k+60>>2]=c[d+60>>2];c[k+64>>2]=c[f+0>>2];c[k+68>>2]=c[f+4>>2];c[k+72>>2]=c[f+8>>2];c[k+76>>2]=c[f+12>>2];c[k+80>>2]=c[f+16>>2];c[k+84>>2]=c[f+20>>2];c[k+88>>2]=c[f+24>>2];c[k+92>>2]=c[f+28>>2];c[k+96>>2]=c[f+32>>2];c[k+100>>2]=c[f+36>>2];c[k+104>>2]=c[f+40>>2];c[k+108>>2]=c[f+44>>2];c[k+112>>2]=c[f+48>>2];c[k+116>>2]=c[f+52>>2];c[k+120>>2]=c[f+56>>2];c[k+124>>2]=c[f+60>>2];Az(k+136|0,k,k+216|0,0,0);t=(a[k+256>>0]|0)==0;b=k+236|0;c[k+264>>2]=c[b+0>>2];c[k+268>>2]=c[b+4>>2];c[k+272>>2]=c[b+8>>2];c[k+276>>2]=c[b+12>>2];if(t){u=0;i=k;return u|0}q=+g[k+252>>2];o=+g[k+220>>2];p=+g[k+224>>2];r=+g[k+228>>2];s=+g[k+232>>2];do if(q>.0010000000474974513){s=q;q=0.0;t=1;while(1){if((t|0)>32){j=0;e=13;break}v=q;q=q-s/(l*r+(m*p+n*o));if(!(!(q<0.0)&!(q>1.0)&!(q<=v))){j=0;e=13;break}Kb[c[c[j>>2]>>2]&31](j,q);v=1.0-q;g[k+48>>2]=v*+g[d+48>>2]+q*+g[e+48>>2];g[k+52>>2]=v*+g[d+52>>2]+q*+g[e+52>>2];g[k+56>>2]=v*+g[d+56>>2]+q*+g[e+56>>2];g[k+112>>2]=v*+g[f+48>>2]+q*+g[h+48>>2];g[k+116>>2]=v*+g[f+52>>2]+q*+g[h+52>>2];g[k+120>>2]=v*+g[f+56>>2]+q*+g[h+56>>2];Az(k+136|0,k,k+216|0,0,0);if(!(a[k+256>>0]|0)){j=0;e=13;break}s=+g[k+252>>2];if(s<0.0){e=8;break}c[k+264>>2]=c[b+0>>2];c[k+268>>2]=c[b+4>>2];c[k+272>>2]=c[b+8>>2];c[k+276>>2]=c[b+12>>2];o=+g[k+220>>2];p=+g[k+224>>2];r=+g[k+228>>2];if(!(s>.0010000000474974513)){e=10;break}else t=t+1|0}if((e|0)==8){g[j+164>>2]=q;r=+g[k+224>>2];s=+g[k+228>>2];v=+g[k+232>>2];g[j+132>>2]=+g[k+220>>2];g[j+136>>2]=r;g[j+140>>2]=s;g[j+144>>2]=v;c[j+148>>2]=c[b+0>>2];c[j+152>>2]=c[b+4>>2];c[j+156>>2]=c[b+8>>2];c[j+160>>2]=c[b+12>>2];u=1;i=k;return u|0}else if((e|0)==10){s=+g[k+232>>2];break}else if((e|0)==13){i=k;return j|0}}else q=0.0;while(0);if(l*r+(m*p+n*o)>=-+g[j+172>>2]){u=0;i=k;return u|0}g[j+164>>2]=q;g[j+132>>2]=o;g[j+136>>2]=p;g[j+140>>2]=r;g[j+144>>2]=s;c[j+148>>2]=c[k+264>>2];c[j+152>>2]=c[k+268>>2];c[j+156>>2]=c[k+272>>2];c[j+160>>2]=c[k+276>>2];u=1;i=k;return u|0}function xz(a){a=a|0;return}function yz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function zz(b,e,f,h,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0,A=0,B=0.0,C=0,D=0,E=0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0;b=i;i=i+10240|0;U=+g[k+52>>2]- +g[j+52>>2];H=+g[k+56>>2]- +g[j+56>>2];g[b>>2]=+g[k+48>>2]- +g[j+48>>2];g[b+4>>2]=U;g[b+8>>2]=H;g[b+12>>2]=0.0;c[b+10088>>2]=f;c[b+10092>>2]=h;H=+g[k>>2];U=+g[j>>2];G=+g[k+16>>2];y=+g[j+16>>2];B=+g[k+32>>2];V=+g[j+32>>2];L=+g[j+4>>2];W=+g[j+20>>2];M=+g[j+36>>2];v=+g[j+8>>2];K=+g[j+24>>2];I=+g[j+40>>2];T=+g[k+4>>2];S=+g[k+20>>2];R=+g[k+36>>2];P=+g[k+8>>2];O=+g[k+24>>2];N=+g[k+40>>2];g[b+10096>>2]=H*U+G*y+B*V;g[b+10100>>2]=H*L+G*W+B*M;g[b+10104>>2]=H*v+G*K+B*I;g[b+10108>>2]=0.0;g[b+10112>>2]=U*T+y*S+V*R;g[b+10116>>2]=L*T+W*S+M*R;g[b+10120>>2]=v*T+K*S+I*R;g[b+10124>>2]=0.0;g[b+10128>>2]=U*P+y*O+V*N;g[b+10132>>2]=L*P+W*O+M*N;g[b+10136>>2]=v*P+K*O+I*N;g[b+10140>>2]=0.0;I=+g[k+48>>2]- +g[j+48>>2];K=+g[k+52>>2]- +g[j+52>>2];v=+g[k+56>>2]- +g[j+56>>2];M=+g[j>>2];W=+g[k>>2];L=+g[j+16>>2];V=+g[k+16>>2];y=+g[j+32>>2];U=+g[k+32>>2];B=+g[j+4>>2];G=+g[j+20>>2];H=+g[j+36>>2];J=+g[j+8>>2];w=+g[j+24>>2];u=+g[j+40>>2];g[b+10144>>2]=M*W+L*V+y*U;g[b+10148>>2]=M*T+L*S+y*R;g[b+10152>>2]=M*P+L*O+y*N;g[b+10156>>2]=0.0;g[b+10160>>2]=W*B+V*G+U*H;g[b+10164>>2]=T*B+S*G+R*H;g[b+10168>>2]=P*B+O*G+N*H;g[b+10172>>2]=0.0;g[b+10176>>2]=W*J+V*w+U*u;g[b+10180>>2]=T*J+S*w+R*u;g[b+10184>>2]=P*J+O*w+N*u;g[b+10188>>2]=0.0;g[b+10192>>2]=I*M+K*L+v*y;g[b+10196>>2]=I*B+K*G+v*H;g[b+10200>>2]=I*J+K*w+v*u;g[b+10204>>2]=0.0;c[b+10208>>2]=70;c[b+10212>>2]=0;c[b+10072>>2]=0;c[b+9836>>2]=0;c[b+9840>>2]=0;c[b+9844>>2]=0;c[b+9848>>2]=0;c[b+10084>>2]=2;c[b+10076>>2]=0;g[b+9852>>2]=0.0;u=+g[b>>2];v=+g[b+4>>2];w=+g[b+8>>2];g[b+9328>>2]=-u;g[b+9332>>2]=-v;g[b+9336>>2]=-w;g[b+9340>>2]=0.0;do if((OD(b+9708|0,b+10088|0,b+9328|0)|0)==1){e=b+9296|0;r=b+9304|0;q=b+9308|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[b+16>>2]=9;o=b+56|0;c[b+9292>>2]=0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;s=0;do{t=128-s+ -1|0;c[b+16+(t*56|0)+2152>>2]=0;x=c[r>>2]|0;c[b+16+(t*56|0)+2156>>2]=x;if(x)c[x+44>>2]=b+16+(t*56|0)+2108;c[r>>2]=b+16+(t*56|0)+2108;c[q>>2]=(c[q>>2]|0)+1;s=s+1|0}while((s|0)!=128);s=c[b+10080>>2]|0;if((c[s+32>>2]|0)>>>0>1?PD(b+9708|0)|0:0){t=c[e>>2]|0;if(t){z=c[b+9300>>2]|0;x=c[q>>2]|0;do{C=t+48|0;D=c[C>>2]|0;A=t+44|0;if(D)c[D+44>>2]=c[A>>2];D=c[A>>2]|0;if(D)c[D+48>>2]=c[C>>2];if((c[e>>2]|0)==(t|0))c[e>>2]=c[C>>2];z=z+ -1|0;c[A>>2]=0;c[C>>2]=c[r>>2];A=c[r>>2]|0;if(A)c[A+44>>2]=t;c[r>>2]=t;x=x+1|0;t=c[e>>2]|0}while((t|0)!=0);c[b+9300>>2]=z;c[q>>2]=x}c[b+16>>2]=0;c[b+9292>>2]=0;z=c[s>>2]|0;A=c[s+12>>2]|0;W=+g[A+16>>2];N=+g[z+16>>2]-W;P=+g[A+20>>2];R=+g[z+20>>2]-P;T=+g[A+24>>2];U=+g[z+24>>2]-T;A=c[s+4>>2]|0;S=+g[A+16>>2]-W;V=+g[A+20>>2]-P;O=+g[A+24>>2]-T;x=c[s+8>>2]|0;W=+g[x+16>>2]-W;P=+g[x+20>>2]-P;T=+g[x+24>>2]-T;if(N*V*T+(R*O*W+U*S*P-N*O*P-R*S*T)-U*V*W<0.0){c[s>>2]=A;c[s+4>>2]=z;W=+g[s+16>>2];g[s+16>>2]=+g[s+20>>2];g[s+20>>2]=W;t=A}else{t=z;z=A}t=QD(b+16|0,t,z,x,1)|0;x=QD(b+16|0,c[s+4>>2]|0,c[s>>2]|0,c[s+12>>2]|0,1)|0;z=QD(b+16|0,c[s+8>>2]|0,c[s+4>>2]|0,c[s+12>>2]|0,1)|0;A=QD(b+16|0,c[s>>2]|0,c[s+8>>2]|0,c[s+12>>2]|0,1)|0;if((c[b+9300>>2]|0)==4){C=c[e>>2]|0;B=+g[C+16>>2];s=c[C+48>>2]|0;if(s){u=B*B;while(1){v=+g[s+16>>2];D=v*v<u;C=D?s:C;s=c[s+48>>2]|0;if(!s)break;else u=D?v*v:u}B=+g[C+16>>2]}y=+g[C>>2];w=+g[C+4>>2];u=+g[C+8>>2];v=+g[C+12>>2];E=c[C+20>>2]|0;F=c[C+24>>2]|0;s=c[C+28>>2]|0;a[t+52>>0]=0;c[t+32>>2]=x;a[x+52>>0]=0;c[x+32>>2]=t;a[t+53>>0]=0;c[t+36>>2]=z;a[z+52>>0]=1;c[z+32>>2]=t;a[t+54>>0]=0;c[t+40>>2]=A;a[A+52>>0]=2;c[A+32>>2]=t;a[x+53>>0]=2;c[x+36>>2]=A;a[A+54>>0]=1;c[A+40>>2]=x;a[x+54>>0]=1;c[x+40>>2]=z;a[z+53>>0]=2;c[z+36>>2]=x;a[z+54>>0]=1;c[z+40>>2]=A;a[A+53>>0]=2;c[A+36>>2]=z;c[b+16>>2]=0;A=E;z=F;x=s;t=0;s=1;while(1){D=c[b+9292>>2]|0;if(D>>>0>=64){p=48;break}c[b+10216>>2]=0;c[b+10220>>2]=0;c[b+10224>>2]=0;c[b+9292>>2]=D+1;a[C+55>>0]=s;E=C+4|0;F=C+8|0;RD(b+9708|0,+g[C>>2],+g[E>>2],+g[F>>2],b+16+(D<<5)+60|0);if(+g[C>>2]*+g[b+16+(D<<5)+76>>2]+ +g[E>>2]*+g[b+16+(D<<5)+80>>2]+ +g[F>>2]*+g[b+16+(D<<5)+84>>2]- +g[C+16>>2]>9999999747378752.0e-20){E=0;F=1}else{p=47;break}do{F=F&(SD(b+16|0,s,b+16+(D<<5)+60|0,c[C+(E<<2)+32>>2]|0,d[C+E+52>>0]|0,b+10216|0)|0);E=E+1|0}while(!(E>>>0>2|F^1));if(!F){p=46;break}if((c[b+10224>>2]|0)>>>0<=2){p=46;break}A=c[b+10216>>2]|0;z=c[b+10220>>2]|0;a[A+53>>0]=2;c[A+36>>2]=z;a[z+54>>0]=1;c[z+40>>2]=A;z=C+48|0;A=c[z>>2]|0;x=C+44|0;if(A)c[A+44>>2]=c[x>>2];A=c[x>>2]|0;if(A)c[A+48>>2]=c[z>>2];if((c[e>>2]|0)==(C|0))c[e>>2]=c[z>>2];c[b+9300>>2]=(c[b+9300>>2]|0)+ -1;c[x>>2]=0;c[z>>2]=c[r>>2];x=c[r>>2]|0;if(x)c[x+44>>2]=C;c[r>>2]=C;c[q>>2]=(c[q>>2]|0)+1;C=c[e>>2]|0;B=+g[C+16>>2];x=c[C+48>>2]|0;if(x){u=B*B;while(1){v=+g[x+16>>2];z=v*v<u;C=z?x:C;x=c[x+48>>2]|0;if(!x)break;else u=z?v*v:u}B=+g[C+16>>2]}y=+g[C>>2];w=+g[C+4>>2];u=+g[C+8>>2];v=+g[C+12>>2];A=c[C+20>>2]|0;z=c[C+24>>2]|0;x=c[C+28>>2]|0;t=t+1|0;if(t>>>0>=255)break;else s=s+1|0}if((p|0)==46)c[b+16>>2]=4;else if((p|0)==47)c[b+16>>2]=7;else if((p|0)==48)c[b+16>>2]=6;S=B*y;P=B*w;U=B*u;g[o>>2]=y;g[b+60>>2]=w;g[b+64>>2]=u;g[b+68>>2]=v;g[b+72>>2]=B;c[b+52>>2]=3;c[b+20>>2]=A;c[b+24>>2]=z;c[b+28>>2]=x;D=z+16|0;T=+g[D>>2]-S;E=z+20|0;N=+g[E>>2]-P;F=z+24|0;R=+g[F>>2]-U;C=x+16|0;M=+g[C>>2]-S;z=x+20|0;O=+g[z>>2]-P;x=x+24|0;V=+g[x>>2]-U;V=+Q(+((T*O-N*M)*(T*O-N*M)+((N*V-R*O)*(N*V-R*O)+(R*M-T*V)*(R*M-T*V))));g[b+36>>2]=V;T=+g[C>>2]-S;M=+g[z>>2]-P;R=+g[x>>2]-U;x=A+16|0;O=+g[x>>2]-S;z=A+20|0;N=+g[z>>2]-P;C=A+24|0;W=+g[C>>2]-U;W=+Q(+((T*N-M*O)*(T*N-M*O)+((M*W-R*N)*(M*W-R*N)+(R*O-T*W)*(R*O-T*W))));g[b+40>>2]=W;T=+g[x>>2]-S;O=+g[z>>2]-P;R=+g[C>>2]-U;S=+g[D>>2]-S;P=+g[E>>2]-P;U=+g[F>>2]-U;U=+Q(+((T*P-O*S)*(T*P-O*S)+((O*U-R*P)*(O*U-R*P)+(R*S-T*U)*(R*S-T*U))));g[b+36>>2]=V/(U+(V+W));g[b+40>>2]=W/(U+(V+W));g[b+44>>2]=U/(U+(V+W));if((c[b+16>>2]|0)==9){o=0;u=0.0;v=0.0;w=0.0;B=0.0;H=0.0;I=0.0;J=0.0;G=0.0;y=0.0;break}if(!(c[b+52>>2]|0)){y=0.0;B=0.0;w=0.0}else{e=b+52|0;p=54}}else p=49}else p=49;if((p|0)==49){c[b+16>>2]=8;g[o>>2]=u;g[b+60>>2]=v;g[b+64>>2]=w;g[b+68>>2]=0.0;y=+Q(+(u*u+v*v+w*w));if(y>0.0){w=1.0/y*w;v=1.0/y*v;u=1.0/y*u}else{w=0.0;v=0.0;u=1.0}g[o>>2]=u;g[b+60>>2]=v;g[b+64>>2]=w;g[b+68>>2]=0.0;g[b+72>>2]=0.0;c[b+52>>2]=1;c[b+20>>2]=c[s>>2];g[b+36>>2]=1.0;e=b+52|0;p=54}if((p|0)==54){w=0.0;u=0.0;v=0.0;p=0;do{r=c[b+10208>>2]|0;F=c[b+10212>>2]|0;q=(c[b+10088>>2]|0)+(F>>1)|0;if(F&1)r=c[(c[q>>2]|0)+r>>2]|0;rc[r&127](b+9312|0,q,c[b+16+(p<<2)+4>>2]|0);W=+g[b+16+(p<<2)+20>>2];w=w+ +g[b+9312>>2]*W;u=u+W*+g[b+9316>>2];v=v+W*+g[b+9320>>2];p=p+1|0}while(p>>>0<(c[e>>2]|0)>>>0);y=v;B=u}Y=+g[j>>2];X=+g[j+4>>2];K=+g[j+8>>2];M=+g[j+16>>2];N=+g[j+20>>2];O=+g[j+24>>2];R=+g[j+32>>2];T=+g[j+36>>2];V=+g[j+40>>2];L=+g[j+48>>2];H=+g[j+52>>2];I=+g[j+56>>2];J=+g[o>>2];U=+g[b+72>>2];G=+g[b+60>>2];W=+g[b+64>>2];P=w-J*U;S=B-U*G;U=y-U*W;o=1;u=w*Y+B*X+y*K+L;v=w*M+B*N+y*O+H;w=w*R+B*T+y*V+I;B=P*Y+S*X+U*K+L;H=P*M+S*N+U*O+H;I=P*R+S*T+U*V+I;J=-J;G=-G;y=-W}else{o=0;u=0.0;v=0.0;w=0.0;B=0.0;H=0.0;I=0.0;J=0.0;G=0.0;y=0.0}while(0);if(o){g[m>>2]=u;g[m+4>>2]=v;g[m+8>>2]=w;g[m+12>>2]=0.0;g[n>>2]=B;g[n+4>>2]=H;g[n+8>>2]=I;g[n+12>>2]=0.0;g[l>>2]=J;g[l+4>>2]=G;g[l+8>>2]=y;g[l+12>>2]=0.0;F=1;i=b;return F|0}c[b+9708>>2]=f;c[b+9712>>2]=h;w=+g[k>>2];M=+g[j>>2];y=+g[k+16>>2];N=+g[j+16>>2];B=+g[k+32>>2];O=+g[j+32>>2];P=+g[j+4>>2];R=+g[j+20>>2];S=+g[j+36>>2];U=+g[j+8>>2];W=+g[j+24>>2];Y=+g[j+40>>2];G=+g[k+4>>2];H=+g[k+20>>2];I=+g[k+36>>2];J=+g[k+8>>2];K=+g[k+24>>2];L=+g[k+40>>2];g[b+9716>>2]=w*M+y*N+B*O;g[b+9720>>2]=w*P+y*R+B*S;g[b+9724>>2]=w*U+y*W+B*Y;g[b+9728>>2]=0.0;g[b+9732>>2]=M*G+N*H+O*I;g[b+9736>>2]=P*G+R*H+S*I;g[b+9740>>2]=U*G+W*H+Y*I;g[b+9744>>2]=0.0;g[b+9748>>2]=M*J+N*K+O*L;g[b+9752>>2]=P*J+R*K+S*L;g[b+9756>>2]=U*J+W*K+Y*L;g[b+9760>>2]=0.0;T=+g[k+48>>2]- +g[j+48>>2];V=+g[k+52>>2]- +g[j+52>>2];X=+g[k+56>>2]- +g[j+56>>2];g[b+9764>>2]=w*M+y*N+B*O;g[b+9768>>2]=M*G+N*H+O*I;g[b+9772>>2]=M*J+N*K+O*L;g[b+9776>>2]=0.0;g[b+9780>>2]=w*P+y*R+B*S;g[b+9784>>2]=P*G+R*H+S*I;g[b+9788>>2]=P*J+R*K+S*L;g[b+9792>>2]=0.0;g[b+9796>>2]=w*U+y*W+B*Y;g[b+9800>>2]=U*G+W*H+Y*I;g[b+9804>>2]=U*J+W*K+Y*L;g[b+9808>>2]=0.0;g[b+9812>>2]=T*M+V*N+X*O;g[b+9816>>2]=T*P+V*R+X*S;g[b+9820>>2]=T*U+V*W+X*Y;g[b+9824>>2]=0.0;c[b+9828>>2]=71;c[b+9832>>2]=0;c[b+9692>>2]=0;c[b+9456>>2]=0;c[b+9460>>2]=0;c[b+9464>>2]=0;c[b+9468>>2]=0;c[b+9704>>2]=2;c[b+9696>>2]=0;g[b+9472>>2]=0.0;if(OD(b+9328|0,b+9708|0,b)|0){F=0;i=b;return F|0}k=c[b+9700>>2]|0;if(!(c[k+32>>2]|0)){H=0.0;G=0.0;B=0.0;u=0.0;v=0.0;y=0.0}else{B=0.0;G=0.0;H=0.0;y=0.0;v=0.0;u=0.0;f=0;do{w=+g[k+(f<<2)+16>>2];o=c[b+9828>>2]|0;F=c[b+9832>>2]|0;h=(c[b+9708>>2]|0)+(F>>1)|0;if(F&1)o=c[(c[h>>2]|0)+o>>2]|0;rc[o&127](b+9312|0,h,c[k+(f<<2)>>2]|0);B=B+w*+g[b+9312>>2];G=G+w*+g[b+9316>>2];H=H+w*+g[b+9320>>2];h=c[(c[b+9700>>2]|0)+(f<<2)>>2]|0;I=-+g[h>>2];J=-+g[h+4>>2];K=-+g[h+8>>2];h=c[b+9828>>2]|0;F=c[b+9832>>2]|0;k=(c[b+9712>>2]|0)+(F>>1)|0;if(F&1)h=c[(c[k>>2]|0)+h>>2]|0;X=+g[b+9732>>2]*I+ +g[b+9736>>2]*J+ +g[b+9740>>2]*K;W=+g[b+9748>>2]*I+ +g[b+9752>>2]*J+ +g[b+9756>>2]*K;g[b+10088>>2]=+g[b+9716>>2]*I+ +g[b+9720>>2]*J+ +g[b+9724>>2]*K;g[b+10092>>2]=X;g[b+10096>>2]=W;g[b+10100>>2]=0.0;rc[h&127](b+10216|0,k,b+10088|0);W=+g[b+10216>>2];X=+g[b+10220>>2];Y=+g[b+10224>>2];y=y+w*(W*+g[b+9764>>2]+X*+g[b+9768>>2]+Y*+g[b+9772>>2]+ +g[b+9812>>2]);v=v+w*(W*+g[b+9780>>2]+X*+g[b+9784>>2]+Y*+g[b+9788>>2]+ +g[b+9816>>2]);u=u+w*(W*+g[b+9796>>2]+X*+g[b+9800>>2]+Y*+g[b+9804>>2]+ +g[b+9820>>2]);f=f+1|0;k=c[b+9700>>2]|0}while(f>>>0<(c[k+32>>2]|0)>>>0)}I=+g[j>>2];J=+g[j+4>>2];K=+g[j+8>>2];M=+g[j+16>>2];N=+g[j+20>>2];O=+g[j+24>>2];R=+g[j+32>>2];S=+g[j+36>>2];T=+g[j+40>>2];L=+g[j+48>>2];P=+g[j+52>>2];U=+g[j+56>>2];V=B-y;W=G-v;Y=H-u;X=+Q(+(V*V+W*W+Y*Y));X=1.0/(X>9999999747378752.0e-20?X:1.0);g[m>>2]=B*I+G*J+H*K+L;g[m+4>>2]=B*M+G*N+H*O+P;g[m+8>>2]=B*R+G*S+H*T+U;g[m+12>>2]=0.0;g[n>>2]=y*I+v*J+u*K+L;g[n+4>>2]=y*M+v*N+u*O+P;g[n+8>>2]=y*R+v*S+u*T+U;g[n+12>>2]=0.0;g[l>>2]=X*V;g[l+4>>2]=X*W;g[l+8>>2]=X*Y;g[l+12>>2]=0.0;F=0;i=b;return F|0}function Az(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0,O=0,P=0.0,R=0.0;h=i;i=i+288|0;g[b+56>>2]=0.0;p=h+276|0;q=h+280|0;c[h+272>>2]=0;c[h+276>>2]=0;c[h+280>>2]=0;c[h+284>>2]=0;c[h+208>>2]=c[d+0>>2];c[h+212>>2]=c[d+4>>2];c[h+216>>2]=c[d+8>>2];c[h+220>>2]=c[d+12>>2];c[h+224>>2]=c[d+16>>2];c[h+228>>2]=c[d+20>>2];c[h+232>>2]=c[d+24>>2];c[h+236>>2]=c[d+28>>2];c[h+240>>2]=c[d+32>>2];c[h+244>>2]=c[d+36>>2];c[h+248>>2]=c[d+40>>2];c[h+252>>2]=c[d+44>>2];N=h+256|0;c[N+0>>2]=c[d+48>>2];c[N+4>>2]=c[d+52>>2];c[N+8>>2]=c[d+56>>2];c[N+12>>2]=c[d+60>>2];c[h+144>>2]=c[d+64>>2];c[h+148>>2]=c[d+68>>2];c[h+152>>2]=c[d+72>>2];c[h+156>>2]=c[d+76>>2];c[h+160>>2]=c[d+80>>2];c[h+164>>2]=c[d+84>>2];c[h+168>>2]=c[d+88>>2];c[h+172>>2]=c[d+92>>2];c[h+176>>2]=c[d+96>>2];c[h+180>>2]=c[d+100>>2];c[h+184>>2]=c[d+104>>2];c[h+188>>2]=c[d+108>>2];O=h+192|0;c[O+0>>2]=c[d+112>>2];c[O+4>>2]=c[d+116>>2];c[O+8>>2]=c[d+120>>2];c[O+12>>2]=c[d+124>>2];r=+g[N>>2];s=+g[O>>2];t=+g[h+260>>2];u=+g[h+196>>2];n=+g[h+264>>2];o=+g[h+200>>2];g[N>>2]=r-(r+s)*.5;g[h+260>>2]=t-(t+u)*.5;g[h+264>>2]=n-(n+o)*.5;g[O>>2]=s-(r+s)*.5;g[h+196>>2]=u-(t+u)*.5;g[h+200>>2]=o-(n+o)*.5;if(((c[(c[b+28>>2]|0)+4>>2]|0)+ -17|0)>>>0<2)y=((c[(c[b+32>>2]|0)+4>>2]|0)+ -17|0)>>>0<2;else y=0;w=+g[b+44>>2];v=+g[b+48>>2];c[3344]=(c[3344]|0)+1;O=(a[b+52>>0]|0)==0;v=O?v:0.0;c[b+64>>2]=0;g[b+4>>2]=0.0;g[b+8>>2]=1.0;g[b+12>>2]=0.0;g[b+16>>2]=0.0;c[b+68>>2]=0;c[b+60>>2]=-1;w=(O?w:0.0)+v;O=c[b+24>>2]|0;a[O+312>>0]=0;c[O>>2]=0;a[O+356>>0]=1;g[O+292>>2]=999999984306749400.0;g[O+296>>2]=999999984306749400.0;g[O+300>>2]=999999984306749400.0;g[O+304>>2]=0.0;c[O+336>>2]=0;c[O+340>>2]=0;c[O+344>>2]=0;c[O+348>>2]=0;a[O+352>>0]=0;a[O+332>>0]=a[O+332>>0]&-16;A=+g[b+4>>2];B=+g[b+8>>2];F=+g[b+12>>2];a:do if(y){z=999999984306749400.0;while(1){K=-A;L=-B;C=-F;M=+g[d+4>>2]*K+ +g[d+20>>2]*L+ +g[d+36>>2]*C;E=+g[d+8>>2]*K+ +g[d+24>>2]*L+ +g[d+40>>2]*C;g[h+128>>2]=+g[d>>2]*K+ +g[d+16>>2]*L+ +g[d+32>>2]*C;g[h+132>>2]=M;g[h+136>>2]=E;g[h+140>>2]=0.0;E=A*+g[d+68>>2]+B*+g[d+84>>2]+F*+g[d+100>>2];M=A*+g[d+72>>2]+B*+g[d+88>>2]+F*+g[d+104>>2];g[h+112>>2]=+g[d+64>>2]*A+ +g[d+80>>2]*B+ +g[d+96>>2]*F;g[h+116>>2]=E;g[h+120>>2]=M;g[h+124>>2]=0.0;$w(h+96|0,c[b+28>>2]|0,h+128|0);$w(h+80|0,c[b+32>>2]|0,h+112|0);F=+g[h+96>>2];M=+g[h+100>>2];B=+g[h+104>>2];E=F*+g[h+208>>2]+M*+g[h+212>>2]+B*+g[h+216>>2]+ +g[h+256>>2];B=F*+g[h+224>>2]+M*+g[h+228>>2]+B*+g[h+232>>2]+ +g[h+260>>2];M=+g[h+80>>2];F=+g[h+84>>2];C=+g[h+88>>2];A=M*+g[h+144>>2]+F*+g[h+148>>2]+C*+g[h+152>>2]+ +g[h+192>>2];C=M*+g[h+160>>2]+F*+g[h+164>>2]+C*+g[h+168>>2]+ +g[h+196>>2];F=+g[b+4>>2]*(E-A)+ +g[b+8>>2]*(B-C)+ +g[b+12>>2]*0.0;if(F>0.0?F*F>z*+g[d+128>>2]:0){j=22;break a}y=c[b+24>>2]|0;D=c[y>>2]|0;if((D|0)>0){G=+g[y+308>>2];O=0;N=0;do{K=E-A- +g[y+(N<<4)+4>>2];L=B-C- +g[y+(N<<4)+8>>2];M=0.0- +g[y+(N<<4)+12>>2];O=O|K*K+L*L+M*M<=G;N=N+1|0}while((N|0)!=(D|0))}else O=0;if((+g[y+304>>2]==0.0?+g[y+300>>2]==0.0:0)?B-C==+g[y+296>>2]:0)N=E-A==+g[y+292>>2];else N=0;if(N|O){j=31;break a}H=z-F;if(H<=z*9.999999974752427e-7){j=33;break a}g[y+292>>2]=E-A;g[y+296>>2]=B-C;g[y+300>>2]=0.0;g[y+304>>2]=0.0;a[y+356>>0]=1;g[y+(D<<4)+4>>2]=E-A;g[y+(D<<4)+8>>2]=B-C;g[y+(D<<4)+12>>2]=0.0;g[y+(D<<4)+16>>2]=0.0;N=c[y>>2]|0;g[y+(N<<4)+84>>2]=E;g[y+(N<<4)+88>>2]=B;g[y+(N<<4)+92>>2]=0.0;g[y+(N<<4)+96>>2]=0.0;N=c[y>>2]|0;g[y+(N<<4)+164>>2]=A;g[y+(N<<4)+168>>2]=C;g[y+(N<<4)+172>>2]=0.0;g[y+(N<<4)+176>>2]=0.0;c[y>>2]=(c[y>>2]|0)+1;N=c[b+24>>2]|0;O=vC(N)|0;A=+g[N+276>>2];B=+g[N+280>>2];F=+g[N+284>>2];E=+g[N+288>>2];if(!O){j=35;break a}C=z;z=A*A+B*B+F*F;if(z<9.999999974752427e-7){z=C;j=37;break a}if(C-z<=C*1.1920928955078125e-7){j=39;break a}g[b+4>>2]=A;g[b+8>>2]=B;g[b+12>>2]=F;g[b+16>>2]=E;O=c[b+64>>2]|0;c[b+64>>2]=O+1;if((O|0)>1e3){z=0.0;y=0;A=0.0;B=0.0;C=0.0;break a}if((c[c[b+24>>2]>>2]|0)==4){j=42;break}}}else{z=999999984306749400.0;while(1){G=-A;E=-B;C=-F;H=+g[d+4>>2]*G+ +g[d+20>>2]*E+ +g[d+36>>2]*C;M=+g[d+8>>2]*G+ +g[d+24>>2]*E+ +g[d+40>>2]*C;g[h+128>>2]=+g[d>>2]*G+ +g[d+16>>2]*E+ +g[d+32>>2]*C;g[h+132>>2]=H;g[h+136>>2]=M;g[h+140>>2]=0.0;M=A*+g[d+68>>2]+B*+g[d+84>>2]+F*+g[d+100>>2];H=A*+g[d+72>>2]+B*+g[d+88>>2]+F*+g[d+104>>2];g[h+112>>2]=+g[d+64>>2]*A+ +g[d+80>>2]*B+ +g[d+96>>2]*F;g[h+116>>2]=M;g[h+120>>2]=H;g[h+124>>2]=0.0;$w(h+96|0,c[b+28>>2]|0,h+128|0);$w(h+80|0,c[b+32>>2]|0,h+112|0);H=+g[h+96>>2];M=+g[h+100>>2];F=+g[h+104>>2];B=H*+g[h+208>>2]+M*+g[h+212>>2]+F*+g[h+216>>2]+ +g[h+256>>2];C=H*+g[h+224>>2]+M*+g[h+228>>2]+F*+g[h+232>>2]+ +g[h+260>>2];F=H*+g[h+240>>2]+M*+g[h+244>>2]+F*+g[h+248>>2]+ +g[h+264>>2];M=+g[h+80>>2];H=+g[h+84>>2];E=+g[h+88>>2];A=M*+g[h+144>>2]+H*+g[h+148>>2]+E*+g[h+152>>2]+ +g[h+192>>2];G=M*+g[h+160>>2]+H*+g[h+164>>2]+E*+g[h+168>>2]+ +g[h+196>>2];E=M*+g[h+176>>2]+H*+g[h+180>>2]+E*+g[h+184>>2]+ +g[h+200>>2];H=+g[b+4>>2]*(B-A)+ +g[b+8>>2]*(C-G)+ +g[b+12>>2]*(F-E);if(H>0.0?H*H>z*+g[d+128>>2]:0){j=22;break a}D=c[b+24>>2]|0;y=c[D>>2]|0;if((y|0)>0){I=+g[D+308>>2];O=0;N=0;do{K=B-A- +g[D+(N<<4)+4>>2];L=C-G- +g[D+(N<<4)+8>>2];M=F-E- +g[D+(N<<4)+12>>2];O=O|K*K+L*L+M*M<=I;N=N+1|0}while((N|0)!=(y|0))}else O=0;if((+g[D+304>>2]==0.0?F-E==+g[D+300>>2]:0)?C-G==+g[D+296>>2]:0)N=B-A==+g[D+292>>2];else N=0;if(N|O){j=31;break a}H=z-H;if(H<=z*9.999999974752427e-7){j=33;break a}g[D+292>>2]=B-A;g[D+296>>2]=C-G;g[D+300>>2]=F-E;g[D+304>>2]=0.0;a[D+356>>0]=1;g[D+(y<<4)+4>>2]=B-A;g[D+(y<<4)+8>>2]=C-G;g[D+(y<<4)+12>>2]=F-E;g[D+(y<<4)+16>>2]=0.0;N=c[D>>2]|0;g[D+(N<<4)+84>>2]=B;g[D+(N<<4)+88>>2]=C;g[D+(N<<4)+92>>2]=F;g[D+(N<<4)+96>>2]=0.0;N=c[D>>2]|0;g[D+(N<<4)+164>>2]=A;g[D+(N<<4)+168>>2]=G;g[D+(N<<4)+172>>2]=E;g[D+(N<<4)+176>>2]=0.0;c[D>>2]=(c[D>>2]|0)+1;N=c[b+24>>2]|0;O=vC(N)|0;A=+g[N+276>>2];B=+g[N+280>>2];F=+g[N+284>>2];E=+g[N+288>>2];if(!O){j=35;break a}C=z;z=A*A+B*B+F*F;if(z<9.999999974752427e-7){z=C;j=37;break a}if(C-z<=C*1.1920928955078125e-7){j=39;break a}g[b+4>>2]=A;g[b+8>>2]=B;g[b+12>>2]=F;g[b+16>>2]=E;O=c[b+64>>2]|0;c[b+64>>2]=O+1;if((O|0)>1e3){z=0.0;y=0;A=0.0;B=0.0;C=0.0;break a}if((c[c[b+24>>2]>>2]|0)==4){j=42;break}}}while(0);if((j|0)==22){c[b+68>>2]=10;j=43}else if((j|0)==31){c[b+68>>2]=1;j=43}else if((j|0)==33){c[b+68>>2]=!(H<=0.0)?11:2;j=43}else if((j|0)==35){c[b+68>>2]=3;j=43}else if((j|0)==37){g[b+4>>2]=A;g[b+8>>2]=B;g[b+12>>2]=F;g[b+16>>2]=E;c[b+68>>2]=6;j=43}else if((j|0)==39){c[b+68>>2]=12;j=43}else if((j|0)==42){c[b+68>>2]=13;z=0.0;y=0;A=0.0;B=0.0;C=0.0}do if((j|0)==43){O=c[b+24>>2]|0;vC(O)|0;A=+g[O+260>>2];B=+g[O+264>>2];C=+g[O+268>>2];c[h+272>>2]=c[b+4>>2];c[h+276>>2]=c[b+8>>2];c[h+280>>2]=c[b+12>>2];c[h+284>>2]=c[b+16>>2];G=+g[b+4>>2];F=+g[b+8>>2];E=+g[b+12>>2];if(G*G+F*F+E*E<1.0e-4)c[b+68>>2]=5;if(G*G+F*F+E*E>1.4210854715202004e-14){L=1.0/+Q(+(G*G+F*F+E*E));g[h+272>>2]=L*+g[h+272>>2];g[p>>2]=L*+g[p>>2];g[q>>2]=L*+g[q>>2];M=v/+Q(+z);c[b+60>>2]=1;z=1.0/L-w;y=1;A=M*G+A;B=M*F+B;C=M*E+C;break}else{c[b+60>>2]=2;z=0.0;y=0;break}}while(0);if(((c[b+72>>2]|0)!=0?(c[b+20>>2]|0)!=0:0)?(c[b+68>>2]|0)!=0:0)N=w+z<.01;else N=0;D=y^1;do if(N|D?(x=c[b+20>>2]|0,(x|0)!=0):0){c[3342]=(c[3342]|0)+1;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;if(!(Ob[c[(c[x>>2]|0)+8>>2]&3](x,c[b+24>>2]|0,c[b+28>>2]|0,c[b+32>>2]|0,h+208|0,h+144|0,b+4|0,h+64|0,h+48|0,f)|0)){I=+g[b+4>>2];H=+g[b+8>>2];E=+g[b+12>>2];if(!(I*I+H*H+E*E>0.0)){j=66;break}J=+g[h+48>>2];K=+g[h+64>>2]-J;G=+g[h+52>>2];L=+g[h+68>>2]-G;F=+g[h+56>>2];M=+g[h+72>>2]-F;w=+Q(+(K*K+L*L+M*M))-w;if(w<z|D){c[h+272>>2]=c[b+4>>2];c[h+276>>2]=c[b+8>>2];c[h+280>>2]=c[b+12>>2];c[h+284>>2]=c[b+16>>2];C=+g[h+272>>2];B=+g[p>>2];A=+g[q>>2];z=1.0/+Q(+(C*C+B*B+A*A));g[h+272>>2]=C*z;g[p>>2]=B*z;g[q>>2]=A*z;c[b+60>>2]=6;z=w;A=v*I+J;B=v*H+G;C=v*E+F;break}c[b+60>>2]=5;if(y)break;i=h;return}E=+g[h+48>>2];L=+g[h+64>>2];w=+g[h+52>>2];K=+g[h+68>>2];v=+g[h+56>>2];J=+g[h+72>>2];if(!((E-L)*(E-L)+(w-K)*(w-K)+(v-J)*(v-J)<=1.4210854715202004e-14)){H=v-J;G=w-K;I=E-L;F=0.0;M=(E-L)*(E-L)+(w-K)*(w-K)+(v-J)*(v-J)}else{R=+g[b+4>>2];P=+g[b+8>>2];M=+g[b+12>>2];H=M;G=P;I=R;F=+g[b+16>>2];M=R*R+P*P+M*M}if(!(M>1.4210854715202004e-14)){c[b+60>>2]=9;if(y)break;i=h;return}M=1.0/+Q(+M);J=-+Q(+((L-E)*(L-E)+(K-w)*(K-w)+(J-v)*(J-v)));if(z>J|D){g[h+272>>2]=I*M;g[p>>2]=G*M;g[q>>2]=H*M;g[h+284>>2]=F;c[b+60>>2]=3;z=J;A=E;B=w;C=v;break}c[b+60>>2]=8;if(!y){i=h;return}}else j=66;while(0);if((j|0)==66)if(!y){i=h;return}if(!(z<0.0)?!(z*z<+g[d+128>>2]):0){i=h;return}if((c[b+76>>2]|0)!=0?(O=c[b+28>>2]|0,vc[c[(c[O>>2]|0)+8>>2]&127](O,h+208|0,h+32|0,h+16|0),M=(+g[h+16>>2]+ +g[h+32>>2])*.5,P=(+g[h+20>>2]+ +g[h+36>>2])*.5,R=(+g[h+24>>2]+ +g[h+40>>2])*.5,O=c[b+32>>2]|0,vc[c[(c[O>>2]|0)+8>>2]&127](O,h+144|0,h+32|0,h+16|0),k=+g[h+272>>2],l=+g[p>>2],m=+g[q>>2],(M-(+g[h+32>>2]+ +g[h+16>>2])*.5)*k+(P-(+g[h+36>>2]+ +g[h+20>>2])*.5)*l+(R-(+g[h+40>>2]+ +g[h+24>>2])*.5)*m<0.0):0){g[h+272>>2]=k*-1.0;g[p>>2]=l*-1.0;g[q>>2]=m*-1.0}c[b+4>>2]=c[h+272>>2];c[b+8>>2]=c[h+276>>2];c[b+12>>2]=c[h+280>>2];c[b+16>>2]=c[h+284>>2];g[b+56>>2]=z;O=c[(c[e>>2]|0)+16>>2]|0;g[h>>2]=(r+s)*.5+A;g[h+4>>2]=(t+u)*.5+B;g[h+8>>2]=(n+o)*.5+C;g[h+12>>2]=0.0;qc[O&15](e,h+272|0,h,z);i=h;return}function Bz(a){a=a|0;return}function Cz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Dz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0;l=i;i=i+192|0;h=c[b+4>>2]|0;if(+g[h+752>>2]<f){i=l;return}j=c[h+740>>2]|0;m=(c[b+8>>2]|0)+8|0;k=c[m>>2]|0;q=+g[e>>2];t=+g[d>>2]*f+q;o=+g[e+4>>2];r=+g[d+4>>2]*f+o;p=+g[e+8>>2];s=+g[d+8>>2]*f+p;if((j|0)!=(k|0)){n=c[b+12>>2]|0;y=c[n+8>>2]|0;B=t- +g[y+52>>2];v=r- +g[y+56>>2];w=s- +g[y+60>>2];A=q- +g[k+52>>2];z=o- +g[k+56>>2];u=p- +g[k+60>>2];q=B*+g[y+4>>2]+v*+g[y+20>>2]+w*+g[y+36>>2];o=B*+g[y+8>>2]+v*+g[y+24>>2]+w*+g[y+40>>2];p=B*+g[y+12>>2]+v*+g[y+28>>2]+w*+g[y+44>>2];w=A*+g[k+4>>2]+z*+g[k+20>>2]+u*+g[k+36>>2];v=A*+g[k+8>>2]+z*+g[k+24>>2]+u*+g[k+40>>2];u=A*+g[k+12>>2]+z*+g[k+28>>2]+u*+g[k+44>>2]}else{z=t- +g[j+52>>2];v=r- +g[j+56>>2];w=s- +g[j+60>>2];n=c[b+12>>2]|0;y=c[n+8>>2]|0;A=q- +g[y+52>>2];B=o- +g[y+56>>2];u=p- +g[y+60>>2];q=z*+g[j+4>>2]+v*+g[j+20>>2]+w*+g[j+36>>2];o=z*+g[j+8>>2]+v*+g[j+24>>2]+w*+g[j+40>>2];p=z*+g[j+12>>2]+v*+g[j+28>>2]+w*+g[j+44>>2];w=A*+g[y+4>>2]+B*+g[y+20>>2]+u*+g[y+36>>2];v=A*+g[y+8>>2]+B*+g[y+24>>2]+u*+g[y+40>>2];u=A*+g[y+12>>2]+B*+g[y+28>>2]+u*+g[y+44>>2]}g[l>>2]=q;g[l+4>>2]=o;g[l+8>>2]=p;g[l+12>>2]=0.0;g[l+16>>2]=w;g[l+20>>2]=v;g[l+24>>2]=u;g[l+28>>2]=0.0;c[l+64>>2]=c[d+0>>2];c[l+68>>2]=c[d+4>>2];c[l+72>>2]=c[d+8>>2];c[l+76>>2]=c[d+12>>2];g[l+80>>2]=f;g[l+84>>2]=0.0;g[l+88>>2]=0.0;g[l+92>>2]=0.0;c[l+112>>2]=0;a[l+116>>0]=0;c[l+120>>2]=0;c[l+124>>2]=0;c[l+128>>2]=0;c[l+132>>2]=0;c[l+136>>2]=0;c[l+140>>2]=0;c[l+144>>2]=0;c[l+148>>2]=0;g[l+48>>2]=t;g[l+52>>2]=r;g[l+56>>2]=s;g[l+60>>2]=0.0;c[l+32>>2]=c[e+0>>2];c[l+36>>2]=c[e+4>>2];c[l+40>>2]=c[e+8>>2];c[l+44>>2]=c[e+12>>2];r=+g[h+752>>2];d=c[h+748>>2]|0;if((d|0)>0){e=0;y=-1;f=r*r;while(1){r=+g[h+(e*184|0)+4>>2]-q;s=+g[h+(e*184|0)+8>>2]-o;t=+g[h+(e*184|0)+12>>2]-p;x=r*r+s*s+t*t<f;y=x?e:y;e=e+1|0;if((e|0)==(d|0))break;else f=x?r*r+s*s+t*t:f}}else y=-1;d=c[m>>2]|0;x=c[n+8>>2]|0;o=+g[d+224>>2]*+g[x+224>>2];o=o<-10.0?-10.0:o;g[l+84>>2]=o>10.0?10.0:o;g[l+92>>2]=+g[d+228>>2]*+g[x+228>>2];o=+g[d+232>>2]*+g[x+232>>2];o=o<-10.0?-10.0:o;g[l+88>>2]=o>10.0?10.0:o;o=+g[l+72>>2];if(+P(+o)>.7071067690849304){z=+g[l+68>>2];B=1.0/+Q(+(o*o+z*z));g[l+152>>2]=0.0;g[l+156>>2]=-(B*o);g[l+160>>2]=B*z;g[l+168>>2]=(o*o+z*z)*B;A=+g[l+64>>2];g[l+172>>2]=-(A*B*z);g[l+176>>2]=A*-(B*o)}else{z=+g[l+64>>2];A=+g[l+68>>2];B=1.0/+Q(+(z*z+A*A));g[l+152>>2]=-(A*B);g[l+156>>2]=B*z;g[l+160>>2]=0.0;g[l+168>>2]=-(o*B*z);g[l+172>>2]=o*-(A*B);g[l+176>>2]=(z*z+A*A)*B}if((j|0)!=(k|0)){c[l+96>>2]=c[b+20>>2];c[l+100>>2]=c[b+16>>2];c[l+104>>2]=c[b+28>>2];c[l+108>>2]=c[b+24>>2]}else{c[l+96>>2]=c[b+16>>2];c[l+100>>2]=c[b+20>>2];c[l+104>>2]=c[b+24>>2];c[l+108>>2]=c[b+28>>2]}if((y|0)>-1){x=h+(y*184|0)+152|0;d=c[x>>2]|0;m=h+(y*184|0)+124|0;z=+g[m>>2];n=h+(y*184|0)+128|0;A=+g[n>>2];e=h+(y*184|0)+132|0;B=+g[e>>2];k=h+(y*184|0)+116|0;j=c[k>>2]|0;mF(h+(y*184|0)+4|0,l|0,184)|0;c[k>>2]=j;g[m>>2]=z;g[n>>2]=A;g[e>>2]=B;c[x>>2]=d;i=l;return}else{wA(h,l)|0;i=l;return}}function Ez(b,d,e,f,h,j,k,l,m,n){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;var o=0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0,C=0,D=0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0;b=i;i=i+4256|0;if(((c[e+4>>2]|0)+ -17|0)>>>0<2)r=((c[f+4>>2]|0)+ -17|0)>>>0<2;else r=0;o=0;do{Fz();v=+g[13568+(o<<4)>>2];w=+g[13572+(o<<4)>>2];x=+g[13576+(o<<4)>>2];z=+g[h+4>>2]*-v+ +g[h+20>>2]*-w+ +g[h+36>>2]*-x;y=+g[h+8>>2]*-v+ +g[h+24>>2]*-w+ +g[h+40>>2]*-x;g[b+1280+(o<<4)>>2]=+g[h>>2]*-v+ +g[h+16>>2]*-w+ +g[h+32>>2]*-x;g[b+1280+(o<<4)+4>>2]=z;g[b+1280+(o<<4)+8>>2]=y;g[b+1280+(o<<4)+12>>2]=0.0;y=v*+g[j+4>>2]+w*+g[j+20>>2]+x*+g[j+36>>2];z=v*+g[j+8>>2]+w*+g[j+24>>2]+x*+g[j+40>>2];g[b+288+(o<<4)>>2]=v*+g[j>>2]+w*+g[j+16>>2]+x*+g[j+32>>2];g[b+288+(o<<4)+4>>2]=y;g[b+288+(o<<4)+8>>2]=z;g[b+288+(o<<4)+12>>2]=0.0;o=o+1|0}while((o|0)!=42);A=Pb[c[(c[e>>2]|0)+84>>2]&127](e)|0;if((A|0)>0){B=0;o=42;while(1){rc[c[(c[e>>2]|0)+88>>2]&127](e,B,b+272|0);y=+g[b+272>>2];z=+g[b+276>>2];x=+g[b+280>>2];w=y*+g[h+16>>2]+z*+g[h+20>>2]+x*+g[h+24>>2];v=y*+g[h+32>>2]+z*+g[h+36>>2]+x*+g[h+40>>2];g[b+272>>2]=+g[h>>2]*y+ +g[h+4>>2]*z+ +g[h+8>>2]*x;g[b+276>>2]=w;g[b+280>>2]=v;g[b+284>>2]=0.0;Fz();C=13568+(o<<4)|0;c[C+0>>2]=c[b+272>>2];c[C+4>>2]=c[b+276>>2];c[C+8>>2]=c[b+280>>2];c[C+12>>2]=c[b+284>>2];v=+g[b+272>>2];w=+g[b+276>>2];x=+g[b+280>>2];z=+g[h+4>>2]*-v+ +g[h+20>>2]*-w+ +g[h+36>>2]*-x;y=+g[h+8>>2]*-v+ +g[h+24>>2]*-w+ +g[h+40>>2]*-x;g[b+1280+(o<<4)>>2]=+g[h>>2]*-v+ +g[h+16>>2]*-w+ +g[h+32>>2]*-x;g[b+1280+(o<<4)+4>>2]=z;g[b+1280+(o<<4)+8>>2]=y;g[b+1280+(o<<4)+12>>2]=0.0;y=v*+g[j+4>>2]+w*+g[j+20>>2]+x*+g[j+36>>2];z=v*+g[j+8>>2]+w*+g[j+24>>2]+x*+g[j+40>>2];g[b+288+(o<<4)>>2]=+g[j>>2]*v+ +g[j+16>>2]*w+ +g[j+32>>2]*x;g[b+288+(o<<4)+4>>2]=y;g[b+288+(o<<4)+8>>2]=z;g[b+288+(o<<4)+12>>2]=0.0;B=B+1|0;if((B|0)==(A|0))break;else o=o+1|0}o=A+42|0}else o=42;C=Pb[c[(c[f>>2]|0)+84>>2]&127](f)|0;if((C|0)>0){B=0;A=o;while(1){rc[c[(c[f>>2]|0)+88>>2]&127](f,B,b+256|0);y=+g[b+256>>2];z=+g[b+260>>2];x=+g[b+264>>2];w=y*+g[j+16>>2]+z*+g[j+20>>2]+x*+g[j+24>>2];v=y*+g[j+32>>2]+z*+g[j+36>>2]+x*+g[j+40>>2];g[b+256>>2]=+g[j>>2]*y+ +g[j+4>>2]*z+ +g[j+8>>2]*x;g[b+260>>2]=w;g[b+264>>2]=v;g[b+268>>2]=0.0;Fz();D=13568+(A<<4)|0;c[D+0>>2]=c[b+256>>2];c[D+4>>2]=c[b+260>>2];c[D+8>>2]=c[b+264>>2];c[D+12>>2]=c[b+268>>2];v=+g[b+256>>2];w=+g[b+260>>2];x=+g[b+264>>2];z=+g[h+4>>2]*-v+ +g[h+20>>2]*-w+ +g[h+36>>2]*-x;y=+g[h+8>>2]*-v+ +g[h+24>>2]*-w+ +g[h+40>>2]*-x;g[b+1280+(A<<4)>>2]=+g[h>>2]*-v+ +g[h+16>>2]*-w+ +g[h+32>>2]*-x;g[b+1280+(A<<4)+4>>2]=z;g[b+1280+(A<<4)+8>>2]=y;g[b+1280+(A<<4)+12>>2]=0.0;y=v*+g[j+4>>2]+w*+g[j+20>>2]+x*+g[j+36>>2];z=v*+g[j+8>>2]+w*+g[j+24>>2]+x*+g[j+40>>2];g[b+288+(A<<4)>>2]=+g[j>>2]*v+ +g[j+16>>2]*w+ +g[j+32>>2]*x;g[b+288+(A<<4)+4>>2]=y;g[b+288+(A<<4)+8>>2]=z;g[b+288+(A<<4)+12>>2]=0.0;B=B+1|0;if((B|0)==(C|0))break;else A=A+1|0}o=C+o|0}vc[c[(c[e>>2]|0)+76>>2]&127](e,b+1280|0,b+3264|0,o);vc[c[(c[f>>2]|0)+76>>2]&127](f,b+288|0,b+2272|0,o);if((o|0)>0)if(r){v=0.0;w=0.0;x=0.0;r=0;s=999999984306749400.0;while(1){Fz();t=+g[13568+(r<<4)>>2];u=+g[13572+(r<<4)>>2];p=+g[13580+(r<<4)>>2];if(t*t+u*u+0.0>.01?(y=+g[b+3264+(r<<4)>>2],z=+g[b+3264+(r<<4)+4>>2],q=+g[b+3264+(r<<4)+8>>2],G=+g[b+2272+(r<<4)>>2],F=+g[b+2272+(r<<4)+4>>2],E=+g[b+2272+(r<<4)+8>>2],q=t*(G*+g[j>>2]+F*+g[j+4>>2]+E*+g[j+8>>2]+ +g[j+48>>2]-(y*+g[h>>2]+z*+g[h+4>>2]+q*+g[h+8>>2]+ +g[h+48>>2]))+u*(G*+g[j+16>>2]+F*+g[j+20>>2]+E*+g[j+24>>2]+ +g[j+52>>2]-(y*+g[h+16>>2]+z*+g[h+20>>2]+q*+g[h+24>>2]+ +g[h+52>>2]))+0.0,q<s):0)s=q;else{p=x;u=w;t=v}r=r+1|0;if((r|0)==(o|0)){q=0.0;break}else{v=t;w=u;x=p}}}else{t=0.0;x=0.0;y=0.0;z=0.0;r=0;s=999999984306749400.0;while(1){Fz();v=+g[13568+(r<<4)>>2];u=+g[13572+(r<<4)>>2];q=+g[13576+(r<<4)>>2];w=+g[13580+(r<<4)>>2];if(v*v+u*u+q*q>.01?(F=+g[b+3264+(r<<4)>>2],G=+g[b+3264+(r<<4)+4>>2],p=+g[b+3264+(r<<4)+8>>2],I=+g[b+2272+(r<<4)>>2],H=+g[b+2272+(r<<4)+4>>2],E=+g[b+2272+(r<<4)+8>>2],p=v*(I*+g[j>>2]+H*+g[j+4>>2]+E*+g[j+8>>2]+ +g[j+48>>2]-(F*+g[h>>2]+G*+g[h+4>>2]+p*+g[h+8>>2]+ +g[h+48>>2]))+u*(I*+g[j+16>>2]+H*+g[j+20>>2]+E*+g[j+24>>2]+ +g[j+52>>2]-(F*+g[h+16>>2]+G*+g[h+20>>2]+p*+g[h+24>>2]+ +g[h+52>>2]))+q*(I*+g[j+32>>2]+H*+g[j+36>>2]+E*+g[j+40>>2]+ +g[j+56>>2]-(F*+g[h+32>>2]+G*+g[h+36>>2]+p*+g[h+40>>2]+ +g[h+56>>2])),p<s):0){t=v;s=p}else{w=z;q=y;u=x}r=r+1|0;if((r|0)==(o|0)){p=w;break}else{x=u;y=q;z=w}}}else{p=0.0;q=0.0;u=0.0;t=0.0;s=999999984306749400.0}switch(c[e+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+$b[c[(c[e>>2]|0)+48>>2]&15](e)}switch(c[f+4>>2]|0){case 4:case 5:case 10:case 11:case 13:case 1:case 0:case 8:break;default:+$b[c[(c[f>>2]|0)+48>>2]&15](f)}if(s<0.0){D=0;i=b;return D|0}switch(c[e+4>>2]|0){case 11:{v=+g[e+44>>2];break};case 10:{v=+g[e+44>>2];break};case 4:case 5:{v=+g[e+44>>2];break};case 8:{v=+g[e+28>>2]*+g[e+12>>2];break};case 0:{v=+g[e+44>>2];break};case 1:{v=+g[e+44>>2];break};case 13:{v=+g[e+44>>2];break};default:v=+$b[c[(c[e>>2]|0)+48>>2]&15](e)}o=c[f+4>>2]|0;switch(o|0){case 8:{w=+g[f+28>>2]*+g[f+12>>2];o=8;break};case 0:{w=+g[f+44>>2];o=0;break};case 1:{w=+g[f+44>>2];o=1;break};case 13:{w=+g[f+44>>2];o=13;break};case 11:{w=+g[f+44>>2];o=11;break};case 10:{w=+g[f+44>>2];o=10;break};case 4:case 5:{w=+g[f+44>>2];break};default:{w=+$b[c[(c[f>>2]|0)+48>>2]&15](f);o=c[f+4>>2]|0}}s=s+(v+w+.5);c[b+176>>2]=13392;g[b+180>>2]=0.0;g[b+184>>2]=1.0;g[b+188>>2]=0.0;g[b+192>>2]=0.0;c[b+196>>2]=0;c[b+200>>2]=d;c[b+204>>2]=e;c[b+208>>2]=f;c[b+212>>2]=c[e+4>>2];c[b+216>>2]=o;g[b+220>>2]=+$b[c[(c[e>>2]|0)+48>>2]&15](e);g[b+224>>2]=+$b[c[(c[f>>2]|0)+48>>2]&15](f);a[b+228>>0]=0;c[b+236>>2]=-1;c[b+248>>2]=1;c[b+252>>2]=1;G=+g[h+48>>2]+t*s;H=u*s+ +g[h+52>>2];I=q*s+ +g[h+56>>2];c[b+44>>2]=c[h+0>>2];c[b+48>>2]=c[h+4>>2];c[b+52>>2]=c[h+8>>2];c[b+56>>2]=c[h+12>>2];c[b+60>>2]=c[h+16>>2];c[b+64>>2]=c[h+20>>2];c[b+68>>2]=c[h+24>>2];c[b+72>>2]=c[h+28>>2];c[b+76>>2]=c[h+32>>2];c[b+80>>2]=c[h+36>>2];c[b+84>>2]=c[h+40>>2];c[b+88>>2]=c[h+44>>2];g[b+92>>2]=G;g[b+96>>2]=H;g[b+100>>2]=I;g[b+104>>2]=0.0;c[b+108>>2]=c[j+0>>2];c[b+112>>2]=c[j+4>>2];c[b+116>>2]=c[j+8>>2];c[b+120>>2]=c[j+12>>2];c[b+124>>2]=c[j+16>>2];c[b+128>>2]=c[j+20>>2];c[b+132>>2]=c[j+24>>2];c[b+136>>2]=c[j+28>>2];c[b+140>>2]=c[j+32>>2];c[b+144>>2]=c[j+36>>2];c[b+148>>2]=c[j+40>>2];c[b+152>>2]=c[j+44>>2];c[b+156>>2]=c[j+48>>2];c[b+160>>2]=c[j+52>>2];c[b+164>>2]=c[j+56>>2];c[b+168>>2]=c[j+60>>2];g[b+172>>2]=999999984306749400.0;c[b>>2]=14656;a[b+40>>0]=0;g[b+180>>2]=-t;g[b+184>>2]=-u;g[b+188>>2]=-q;g[b+192>>2]=0.0;Az(b+176|0,b+44|0,b,n,0);s=s- +g[b+36>>2];f=a[b+40>>0]|0;if(f<<24>>24){H=+g[b+24>>2]-u*s;I=+g[b+28>>2]-q*s;g[l>>2]=+g[b+20>>2]-t*s;g[l+4>>2]=H;g[l+8>>2]=I;g[l+12>>2]=0.0;c[m+0>>2]=c[b+20>>2];c[m+4>>2]=c[b+24>>2];c[m+8>>2]=c[b+28>>2];c[m+12>>2]=c[b+32>>2];g[k>>2]=t;g[k+4>>2]=u;g[k+8>>2]=q;g[k+12>>2]=p}D=f<<24>>24!=0;i=b;return D|0}function Fz(){var b=0;b=i;if(a[14560]|0){i=b;return}if(!(Ya(14560)|0)){i=b;return}g[3392]=0.0;g[3393]=-0.0;g[3394]=-1.0;g[3395]=0.0;g[3396]=.7236080169677734;g[3397]=-.5257250070571899;g[3398]=-.44721901416778564;g[3399]=0.0;g[3400]=-.2763879895210266;g[3401]=-.8506489992141724;g[3402]=-.44721901416778564;g[3403]=0.0;g[3404]=-.8944259881973267;g[3405]=-0.0;g[3406]=-.4472160041332245;g[3407]=0.0;g[3408]=-.2763879895210266;g[3409]=.8506489992141724;g[3410]=-.44721999764442444;g[3411]=0.0;g[3412]=.7236080169677734;g[3413]=.5257250070571899;g[3414]=-.44721901416778564;g[3415]=0.0;g[3416]=.2763879895210266;g[3417]=-.8506489992141724;g[3418]=.44721999764442444;g[3419]=0.0;g[3420]=-.7236080169677734;g[3421]=-.5257250070571899;g[3422]=.44721901416778564;g[3423]=0.0;g[3424]=-.7236080169677734;g[3425]=.5257250070571899;g[3426]=.44721901416778564;g[3427]=0.0;g[3428]=.2763879895210266;g[3429]=.8506489992141724;g[3430]=.44721901416778564;g[3431]=0.0;g[3432]=.8944259881973267;g[3433]=0.0;g[3434]=.4472160041332245;g[3435]=0.0;g[3436]=-0.0;g[3437]=0.0;g[3438]=1.0;g[3439]=0.0;g[3440]=.4253230094909668;g[3441]=-.3090110123157501;g[3442]=-.8506540060043335;g[3443]=0.0;g[3444]=-.16245600581169128;g[3445]=-.49999499320983887;g[3446]=-.8506540060043335;g[3447]=0.0;g[3448]=.2628690004348755;g[3449]=-.8090119957923889;g[3450]=-.525738000869751;g[3451]=0.0;g[3452]=.4253230094909668;g[3453]=.3090110123157501;g[3454]=-.8506540060043335;g[3455]=0.0;g[3456]=.8506479859352112;g[3457]=-0.0;g[3458]=-.5257359743118286;g[3459]=0.0;g[3460]=-.5257300138473511;g[3461]=-0.0;g[3462]=-.8506519794464111;g[3463]=0.0;g[3464]=-.6881899833679199;g[3465]=-.49999698996543884;g[3466]=-.5257359743118286;g[3467]=0.0;g[3468]=-.16245600581169128;g[3469]=.49999499320983887;g[3470]=-.8506540060043335;g[3471]=0.0;g[3472]=-.6881899833679199;g[3473]=.49999698996543884;g[3474]=-.5257359743118286;g[3475]=0.0;g[3476]=.2628690004348755;g[3477]=.8090119957923889;g[3478]=-.525738000869751;g[3479]=0.0;g[3480]=.9510579705238342;g[3481]=.3090130090713501;g[3482]=0.0;g[3483]=0.0;g[3484]=.9510579705238342;g[3485]=-.3090130090713501;g[3486]=0.0;g[3487]=0.0;g[3488]=.5877860188484192;g[3489]=-.80901700258255;g[3490]=0.0;g[3491]=0.0;g[3492]=0.0;g[3493]=-1.0;g[3494]=0.0;g[3495]=0.0;g[3496]=-.5877860188484192;g[3497]=-.80901700258255;g[3498]=0.0;g[3499]=0.0;g[3500]=-.9510579705238342;g[3501]=-.3090130090713501;g[3502]=-0.0;g[3503]=0.0;g[3504]=-.9510579705238342;g[3505]=.3090130090713501;g[3506]=-0.0;g[3507]=0.0;g[3508]=-.5877860188484192;g[3509]=.80901700258255;g[3510]=-0.0;g[3511]=0.0;g[3512]=-0.0;g[3513]=1.0;g[3514]=-0.0;g[3515]=0.0;g[3516]=.5877860188484192;g[3517]=.80901700258255;g[3518]=-0.0;g[3519]=0.0;g[3520]=.6881899833679199;g[3521]=-.49999698996543884;g[3522]=.5257359743118286;g[3523]=0.0;g[3524]=-.2628690004348755;g[3525]=-.8090119957923889;g[3526]=.525738000869751;g[3527]=0.0;g[3528]=-.8506479859352112;g[3529]=0.0;g[3530]=.5257359743118286;g[3531]=0.0;g[3532]=-.2628690004348755;g[3533]=.8090119957923889;g[3534]=.525738000869751;g[3535]=0.0;g[3536]=.6881899833679199;g[3537]=.49999698996543884;g[3538]=.5257359743118286;g[3539]=0.0;g[3540]=.5257300138473511;g[3541]=0.0;g[3542]=.8506519794464111;g[3543]=0.0;g[3544]=.16245600581169128;g[3545]=-.49999499320983887;g[3546]=.8506540060043335;g[3547]=0.0;g[3548]=-.4253230094909668;g[3549]=-.3090110123157501;g[3550]=.8506540060043335;g[3551]=0.0;g[3552]=-.4253230094909668;g[3553]=.3090110123157501;g[3554]=.8506540060043335;g[3555]=0.0;g[3556]=.16245600581169128;g[3557]=.49999499320983887;g[3558]=.8506540060043335;g[3559]=0.0;bb(14560);i=b;return}function Gz(a){a=a|0;return}function Hz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Iz(a){a=a|0;return}function Jz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Kz(a,b,c){a=a|0;b=b|0;c=c|0;return}function Lz(a,b,c){a=a|0;b=b|0;c=c|0;return}function Mz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0;h=i;c[b+4>>2]=c[d+0>>2];c[b+8>>2]=c[d+4>>2];c[b+12>>2]=c[d+8>>2];c[b+16>>2]=c[d+12>>2];c[b+20>>2]=c[e+0>>2];c[b+24>>2]=c[e+4>>2];c[b+28>>2]=c[e+8>>2];c[b+32>>2]=c[e+12>>2];g[b+36>>2]=f;a[b+40>>0]=1;i=h;return}function Nz(a){a=a|0;var b=0;b=i;MA(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function Oz(a){a=a|0;var b=0;b=i;MA(a);i=b;return}function Pz(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0;k=i;i=i+176|0;a[d+60>>0]=f&1;if(f){t=+g[h>>2]+-1.0;q=+g[h+4>>2]+-1.0;r=+g[h+8>>2]+-1.0;g[d+4>>2]=t;g[d+8>>2]=q;g[d+12>>2]=r;g[d+16>>2]=0.0;o=+g[j>>2]+1.0;m=+g[j+4>>2]+1.0;l=+g[j+8>>2]+1.0;g[d+20>>2]=o;g[d+24>>2]=m;g[d+28>>2]=l;g[d+32>>2]=0.0;g[d+36>>2]=65533.0/(o-t);g[d+40>>2]=65533.0/(m-q);g[d+44>>2]=65533.0/(l-r);g[d+48>>2]=0.0;a[d+60>>0]=1;n=t+ +(~~((t-t)*(65533.0/(o-t)))&65534)/(65533.0/(o-t))+-1.0;p=q+ +(~~((q-q)*(65533.0/(m-q)))&65534)/(65533.0/(m-q))+-1.0;s=r+ +(~~((r-r)*(65533.0/(l-r)))&65534)/(65533.0/(l-r))+-1.0;if(n<t)g[d+4>>2]=n;else n=t;if(p<q)g[d+8>>2]=p;else p=q;if(s<r)g[d+12>>2]=s;else s=r;u=n+ +((~~((o-n)*(65533.0/(o-t))+1.0)&65535|1)&65535)/(65533.0/(o-t))+1.0;t=p+ +((~~((m-p)*(65533.0/(m-q))+1.0)&65535|1)&65535)/(65533.0/(m-q))+1.0;q=s+ +((~~((l-s)*(65533.0/(l-r))+1.0)&65535|1)&65535)/(65533.0/(l-r))+1.0;if(o<u){g[d+20>>2]=u;o=u}if(m<t){g[d+24>>2]=t;m=t}if(l<q){g[d+28>>2]=q;l=q}g[d+36>>2]=65533.0/(o-n);g[d+40>>2]=65533.0/(m-p);g[d+44>>2]=65533.0/(l-s);g[d+48>>2]=0.0;c[k+152>>2]=15096;c[k+156>>2]=d+104;c[k+160>>2]=d;vc[c[(c[e>>2]|0)+8>>2]&127](e,k+152|0,d+4|0,d+20|0);e=c[d+108>>2]|0;c[k+136>>2]=0;c[k+140>>2]=0;c[k+144>>2]=0;c[k+148>>2]=0;j=c[d+128>>2]|0;if((j|0)<(e<<1|0)){if((c[d+132>>2]|0)<(e<<1|0)){if(!e){h=0;v=j}else{c[5004]=(c[5004]|0)+1;h=fF(e<<5|19)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}v=c[d+128>>2]|0}if((v|0)>0){f=0;do{y=h+(f<<4)|0;x=(c[d+136>>2]|0)+(f<<4)|0;c[y+0>>2]=c[x+0>>2];c[y+4>>2]=c[x+4>>2];c[y+8>>2]=c[x+8>>2];c[y+12>>2]=c[x+12>>2];f=f+1|0}while((f|0)!=(v|0))}f=c[d+136>>2]|0;if(f){if(a[d+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=h;c[d+132>>2]=e<<1;h=d+136|0}else h=d+136|0;do{y=(c[h>>2]|0)+(j<<4)|0;c[y+0>>2]=c[k+136>>2];c[y+4>>2]=c[k+140>>2];c[y+8>>2]=c[k+144>>2];c[y+12>>2]=c[k+148>>2];j=j+1|0}while((j|0)!=(e<<1|0))}c[d+128>>2]=e<<1}else{c[k+128>>2]=14960;c[k+132>>2]=d+64;g[k+112>>2]=-999999984306749400.0;g[k+116>>2]=-999999984306749400.0;g[k+120>>2]=-999999984306749400.0;g[k+124>>2]=0.0;g[k+96>>2]=999999984306749400.0;g[k+100>>2]=999999984306749400.0;g[k+104>>2]=999999984306749400.0;g[k+108>>2]=0.0;vc[c[(c[e>>2]|0)+8>>2]&127](e,k+128|0,k+112|0,k+96|0);e=c[d+68>>2]|0;h=k+32|0;v=h+64|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(v|0));j=c[d+88>>2]|0;if((j|0)<(e<<1|0)){if((c[d+92>>2]|0)<(e<<1|0)){if(!e){w=0;x=j}else{c[5004]=(c[5004]|0)+1;h=fF(e<<7|19)|0;if(!h)w=0;else{c[(h+19&-16)+ -4>>2]=h;w=h+19&-16}x=c[d+88>>2]|0}if((x|0)>0){y=0;do{h=w+(y<<6)+0|0;f=(c[d+96>>2]|0)+(y<<6)+0|0;v=h+64|0;do{c[h>>2]=c[f>>2];h=h+4|0;f=f+4|0}while((h|0)<(v|0));y=y+1|0}while((y|0)!=(x|0))}h=c[d+96>>2]|0;if(h){if(a[d+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=w;c[d+92>>2]=e<<1;w=d+96|0}else w=d+96|0;do{h=(c[w>>2]|0)+(j<<6)+0|0;f=k+32|0;v=h+64|0;do{c[h>>2]=c[f>>2];h=h+4|0;f=f+4|0}while((h|0)<(v|0));j=j+1|0}while((j|0)!=(e<<1|0))}c[d+88>>2]=e<<1}c[d+56>>2]=0;KA(d,0,e);if((a[d+60>>0]|0)!=0?(c[d+152>>2]|0)==0:0){if(!(c[d+156>>2]|0)){c[5004]=(c[5004]|0)+1;e=fF(51)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}h=c[d+152>>2]|0;if((h|0)>0){j=0;do{y=e+(j<<5)|0;x=(c[d+160>>2]|0)+(j<<5)|0;c[y+0>>2]=c[x+0>>2];c[y+4>>2]=c[x+4>>2];c[y+8>>2]=c[x+8>>2];c[y+12>>2]=c[x+12>>2];c[y+16>>2]=c[x+16>>2];c[y+20>>2]=c[x+20>>2];c[y+24>>2]=c[x+24>>2];c[y+28>>2]=c[x+28>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+160>>2]|0;if(j){if(a[d+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=e;c[d+156>>2]=1;j=(c[d+152>>2]|0)+1|0}else{j=1;e=c[d+160>>2]|0}c[d+152>>2]=j;c[e+0>>2]=c[k+0>>2];c[e+4>>2]=c[k+4>>2];c[e+8>>2]=c[k+8>>2];c[e+12>>2]=c[k+12>>2];c[e+16>>2]=c[k+16>>2];c[e+20>>2]=c[k+20>>2];c[e+24>>2]=c[k+24>>2];c[e+28>>2]=c[k+28>>2];y=c[d+160>>2]|0;x=c[d+136>>2]|0;b[y>>1]=b[x>>1]|0;b[y+2>>1]=b[x+2>>1]|0;b[y+4>>1]=b[x+4>>1]|0;b[y+6>>1]=b[x+6>>1]|0;b[y+8>>1]=b[x+8>>1]|0;b[y+10>>1]=b[x+10>>1]|0;c[y+12>>2]=0;x=c[x+12>>2]|0;c[y+16>>2]=(x|0)>-1?1:0-x|0}c[d+168>>2]=c[d+152>>2];e=c[d+116>>2]|0;if(e){if(a[d+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[d+116>>2]=0}a[d+120>>0]=1;c[d+116>>2]=0;c[d+108>>2]=0;c[d+112>>2]=0;e=c[d+76>>2]|0;if(!e){a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;y=d+72|0;c[y>>2]=0;i=k;return}if(a[d+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[d+76>>2]=0;a[d+80>>0]=1;c[d+76>>2]=0;c[d+68>>2]=0;y=d+72|0;c[y>>2]=0;i=k;return}function Qz(a){a=a|0;return 84}function Rz(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;QA(a,b,c,d)|0;i=e;return 1}function Sz(a){a=a|0;return}function Tz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Uz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0;l=i;i=i+32|0;m=+g[d>>2];h=m<999999984306749400.0?m:999999984306749400.0;n=+g[d+4>>2];j=n<999999984306749400.0?n:999999984306749400.0;o=+g[d+8>>2];k=o<999999984306749400.0?o:999999984306749400.0;p=+g[d+12>>2];r=p<0.0?p:0.0;m=m>-999999984306749400.0?m:-999999984306749400.0;n=n>-999999984306749400.0?n:-999999984306749400.0;o=o>-999999984306749400.0?o:-999999984306749400.0;p=p>0.0?p:0.0;x=+g[d+16>>2];h=x<h?x:h;y=+g[d+20>>2];j=y<j?y:j;z=+g[d+24>>2];k=z<k?z:k;A=+g[d+28>>2];r=A<r?A:r;m=m<x?x:m;n=n<y?y:n;o=o<z?z:o;p=p<A?A:p;A=+g[d+32>>2];h=A<h?A:h;z=+g[d+36>>2];j=z<j?z:j;y=+g[d+40>>2];k=y<k?y:k;x=+g[d+44>>2];r=x<r?x:r;m=m<A?A:m;n=n<z?z:n;o=o<y?y:o;p=p<x?x:p;b=c[b+4>>2]|0;v=c[b+4>>2]|0;if((v|0)==(c[b+8>>2]|0)?(q=(v|0)==0?1:v<<1,(v|0)<(q|0)):0){if(!q)d=0;else{c[5004]=(c[5004]|0)+1;d=fF(q<<6|19)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}v=c[b+4>>2]|0}if((v|0)>0){w=0;do{s=d+(w<<6)+0|0;t=(c[b+12>>2]|0)+(w<<6)+0|0;u=s+64|0;do{c[s>>2]=c[t>>2];s=s+4|0;t=t+4|0}while((s|0)<(u|0));w=w+1|0}while((w|0)!=(v|0))}s=c[b+12>>2]|0;if(s){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[s+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=d;c[b+8>>2]=q;v=c[b+4>>2]|0}w=c[b+12>>2]|0;g[w+(v<<6)>>2]=h;g[w+(v<<6)+4>>2]=j;g[w+(v<<6)+8>>2]=k;g[w+(v<<6)+12>>2]=r;g[w+(v<<6)+16>>2]=m;g[w+(v<<6)+20>>2]=n;g[w+(v<<6)+24>>2]=o;g[w+(v<<6)+28>>2]=p;c[w+(v<<6)+32>>2]=-1;c[w+(v<<6)+36>>2]=e;c[w+(v<<6)+40>>2]=f;w=w+(v<<6)+44|0;c[w+0>>2]=c[l+0>>2];c[w+4>>2]=c[l+4>>2];c[w+8>>2]=c[l+8>>2];c[w+12>>2]=c[l+12>>2];c[w+16>>2]=c[l+16>>2];c[b+4>>2]=(c[b+4>>2]|0)+1;i=l;return}function Vz(a){a=a|0;return}function Wz(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function Xz(d,e,f,h){d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0;j=i;q=+g[e>>2];v=q<999999984306749400.0?q:999999984306749400.0;r=+g[e+4>>2];w=r<999999984306749400.0?r:999999984306749400.0;s=+g[e+8>>2];u=s<999999984306749400.0?s:999999984306749400.0;q=q>-999999984306749400.0?q:-999999984306749400.0;r=r>-999999984306749400.0?r:-999999984306749400.0;s=s>-999999984306749400.0?s:-999999984306749400.0;z=+g[e+16>>2];v=z<v?z:v;A=+g[e+20>>2];w=A<w?A:w;B=+g[e+24>>2];u=B<u?B:u;q=q<z?z:q;r=r<A?A:r;s=s<B?B:s;B=+g[e+32>>2];v=B<v?B:v;A=+g[e+36>>2];w=A<w?A:w;z=+g[e+40>>2];u=z<u?z:u;q=q<B?B:q;r=r<A?A:r;s=s<z?z:s;if(q-v<.0020000000949949026){q=q+.0010000000474974513;v=v+-.0010000000474974513}if(r-w<.0020000000949949026){r=r+.0010000000474974513;w=w+-.0010000000474974513}if(s-u<.0020000000949949026){s=s+.0010000000474974513;u=u+-.0010000000474974513}e=c[d+8>>2]|0;E=+g[e+4>>2];C=+g[e+8>>2];A=+g[e+12>>2];D=+g[e+36>>2];z=+g[e+40>>2];B=+g[e+44>>2];e=~~((v-E)*D)&65534;l=~~((w-C)*z)&65534;m=~~((u-A)*B)&65534;n=(~~((q-E)*D+1.0)&65535|1)&65535;o=(~~((r-C)*z+1.0)&65535|1)&65535;p=(~~((s-A)*B+1.0)&65535|1)&65535;d=c[d+4>>2]|0;y=c[d+4>>2]|0;if((y|0)==(c[d+8>>2]|0)?(k=(y|0)==0?1:y<<1,(y|0)<(k|0)):0){if(!k)t=0;else{c[5004]=(c[5004]|0)+1;t=fF((k<<4|3)+16|0)|0;if(!t)t=0;else{c[(t+19&-16)+ -4>>2]=t;t=t+19&-16}y=c[d+4>>2]|0}if((y|0)>0){x=0;do{F=t+(x<<4)|0;G=(c[d+12>>2]|0)+(x<<4)|0;c[F+0>>2]=c[G+0>>2];c[F+4>>2]=c[G+4>>2];c[F+8>>2]=c[G+8>>2];c[F+12>>2]=c[G+12>>2];x=x+1|0}while((x|0)!=(y|0))}x=c[d+12>>2]|0;if(x){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0)}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=t;c[d+8>>2]=k;y=c[d+4>>2]|0}G=c[d+12>>2]|0;b[G+(y<<4)>>1]=e;b[G+(y<<4)+2>>1]=l;b[G+(y<<4)+4>>1]=m;b[G+(y<<4)+6>>1]=n;b[G+(y<<4)+8>>1]=o;b[G+(y<<4)+10>>1]=p;c[G+(y<<4)+12>>2]=f<<21|h;c[d+4>>2]=(c[d+4>>2]|0)+1;i=j;return}function Yz(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;c[b>>2]=15272;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+24>>2]=0;a[b+28>>0]=0;a[b+48>>0]=1;c[b+44>>2]=0;c[b+36>>2]=0;c[b+40>>2]=0;a[b+68>>0]=1;c[b+64>>2]=0;c[b+56>>2]=0;c[b+60>>2]=0;c[b+72>>2]=0;c[5004]=(c[5004]|0)+1;e=fF(51)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}f=c[b+8>>2]|0;if((f|0)>0){g=0;do{h=c[b+16>>2]|0;c[e+(g<<4)>>2]=c[h+(g<<4)>>2];c[e+(g<<4)+4>>2]=c[h+(g<<4)+4>>2];c[e+(g<<4)+8>>2]=c[h+(g<<4)+8>>2];c[e+(g<<4)+12>>2]=c[h+(g<<4)+12>>2];g=g+1|0}while((g|0)!=(f|0))}f=c[b+16>>2]|0;if(!f){a[b+20>>0]=1;c[b+16>>2]=e;c[b+12>>2]=2;Zz(b);i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=e;c[b+12>>2]=2;Zz(b);i=d;return}function Zz(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=c[b+12>>2]|0;d=c[b+36>>2]|0;if((d|0)>=(f|0)){i=e;return}if((d|0)<=(f|0)){if((c[b+40>>2]|0)<(f|0)){if(!f){g=0;j=d}else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}j=c[b+36>>2]|0}if((j|0)>0){h=0;do{k=g+(h<<2)|0;if(k)c[k>>2]=c[(c[b+44>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+44>>2]|0;if(h){if(a[b+48>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+44>>2]=0}a[b+48>>0]=1;c[b+44>>2]=g;c[b+40>>2]=f}else g=c[b+44>>2]|0;h=d;do{j=g+(h<<2)|0;if(j)c[j>>2]=0;h=h+1|0}while((h|0)!=(f|0))}c[b+36>>2]=f;g=c[b+56>>2]|0;if((g|0)<(f|0)){if((c[b+60>>2]|0)<(f|0)){if(!f){h=0;j=g}else{c[5004]=(c[5004]|0)+1;h=fF((f<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+56>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<2)|0;if(l)c[l>>2]=c[(c[b+64>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[b+64>>2]|0;if(j){if(a[b+68>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[b+64>>2]=0}a[b+68>>0]=1;c[b+64>>2]=h;c[b+60>>2]=f}else h=c[b+64>>2]|0;do{j=h+(g<<2)|0;if(j)c[j>>2]=0;g=g+1|0}while((g|0)!=(f|0))}c[b+56>>2]=f;if((f|0)>0){jF(c[b+44>>2]|0,-1,f<<2|0)|0;jF(c[b+64>>2]|0,-1,f<<2|0)|0}if((d|0)<=0){i=e;return}h=c[b+16>>2]|0;g=c[b+44>>2]|0;f=c[b+64>>2]|0;j=0;do{l=c[(c[h+(j<<4)+4>>2]|0)+12>>2]<<16|c[(c[h+(j<<4)>>2]|0)+12>>2];l=(l+~(l<<15)>>10^l+~(l<<15))*9|0;l=g+((((l>>6^l)+~((l>>6^l)<<11)>>16^(l>>6^l)+~((l>>6^l)<<11))&(c[b+12>>2]|0)+ -1)<<2)|0;c[f+(j<<2)>>2]=c[l>>2];c[l>>2]=j;j=j+1|0}while((j|0)!=(d|0));i=e;return}function _z(a){a=a|0;var b=0;b=i;$z(a);gF(a);i=b;return}function $z(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=15272;e=c[b+64>>2]|0;if(e){if(a[b+68>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+64>>2]=0}a[b+68>>0]=1;c[b+64>>2]=0;c[b+56>>2]=0;c[b+60>>2]=0;e=c[b+44>>2]|0;if(e){if(a[b+48>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+44>>2]=0}a[b+48>>0]=1;c[b+44>>2]=0;c[b+36>>2]=0;c[b+40>>2]=0;e=c[b+16>>2]|0;if(!e){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}function aA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;a=i;e=c[b+8>>2]|0;if((e|0)==0|(d|0)==0){i=a;return}Lb[c[c[e>>2]>>2]&511](e);Nb[c[(c[d>>2]|0)+60>>2]&127](d,c[b+8>>2]|0);c[b+8>>2]=0;i=a;return}function bA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=15576;c[e+4>>2]=b;c[e+8>>2]=a;c[e+12>>2]=d;rc[c[(c[a>>2]|0)+48>>2]&127](a,e,d);i=e;return}function cA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=15400;c[e+4>>2]=b;rc[c[(c[a>>2]|0)+48>>2]&127](a,e,d);i=e;return}function dA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=i;c[3814]=(c[3814]|0)+1;h=(c[b+12>>2]|0)>(c[d+12>>2]|0);g=c[(h?d:b)+12>>2]|0;b=c[(h?b:d)+12>>2]|0;d=((b<<16|g)+~((b<<16|g)<<15)>>10^(b<<16|g)+~((b<<16|g)<<15))*9|0;d=((d>>6^d)+~((d>>6^d)<<11)>>16^(d>>6^d)+~((d>>6^d)<<11))&(c[a+12>>2]|0)+ -1;if((d|0)>=(c[a+36>>2]|0)){h=0;i=f;return h|0}h=c[(c[a+44>>2]|0)+(d<<2)>>2]|0;if((h|0)==-1){h=0;i=f;return h|0}d=c[a+16>>2]|0;while(1){if((c[(c[d+(h<<4)>>2]|0)+12>>2]|0)==(g|0)?(c[(c[d+(h<<4)+4>>2]|0)+12>>2]|0)==(b|0):0)break;h=c[(c[a+64>>2]|0)+(h<<2)>>2]|0;if((h|0)==-1){g=0;e=8;break}}if((e|0)==8){i=f;return g|0}h=d+(h<<4)|0;i=f;return h|0}function eA(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;f=i;d=c[b+4>>2]|0;if((d|0)!=(c[b+8>>2]|0)){j=d;j=j+1|0;c[b+4>>2]=j;j=b+12|0;j=c[j>>2]|0;j=j+(d<<4)|0;i=f;return j|0}e=(d|0)==0?1:d<<1;if((d|0)>=(e|0)){j=d;j=j+1|0;c[b+4>>2]=j;j=b+12|0;j=c[j>>2]|0;j=j+(d<<4)|0;i=f;return j|0}if(!e){g=0;h=d}else{c[5004]=(c[5004]|0)+1;g=fF((e<<4|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[b+4>>2]|0}if((h|0)>0){j=0;do{k=c[b+12>>2]|0;c[g+(j<<4)>>2]=c[k+(j<<4)>>2];c[g+(j<<4)+4>>2]=c[k+(j<<4)+4>>2];c[g+(j<<4)+8>>2]=c[k+(j<<4)+8>>2];c[g+(j<<4)+12>>2]=c[k+(j<<4)+12>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[b+12>>2]|0;if(j){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[b+4>>2]|0}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=g;c[b+8>>2]=e;k=h;k=k+1|0;c[b+4>>2]=k;k=b+12|0;k=c[k>>2]|0;k=k+(d<<4)|0;i=f;return k|0}function fA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;c[3810]=(c[3810]|0)+1;j=(c[b+12>>2]|0)>(c[d+12>>2]|0);h=j?d:b;j=j?b:d;l=c[h+12>>2]|0;d=c[j+12>>2]|0;k=((d<<16|l)+~((d<<16|l)<<15)>>10^(d<<16|l)+~((d<<16|l)<<15))*9|0;k=((k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11))&(c[a+12>>2]|0)+ -1;m=c[(c[a+44>>2]|0)+(k<<2)>>2]|0;if((m|0)==-1){o=0;i=g;return o|0}b=c[a+16>>2]|0;while(1){if((c[(c[b+(m<<4)>>2]|0)+12>>2]|0)==(l|0)?(c[(c[b+(m<<4)+4>>2]|0)+12>>2]|0)==(d|0):0)break;m=c[(c[a+64>>2]|0)+(m<<2)>>2]|0;if((m|0)==-1){a=0;f=24;break}}if((f|0)==24){i=g;return a|0}d=b+(m<<4)|0;if(!d){o=0;i=g;return o|0}rc[c[(c[a>>2]|0)+32>>2]&127](a,d,e);b=c[b+(m<<4)+12>>2]|0;d=d-(c[a+16>>2]|0)>>4;k=(c[a+44>>2]|0)+(k<<2)|0;l=c[k>>2]|0;m=c[a+64>>2]|0;if((l|0)!=(d|0)){while(1){n=m+(l<<2)|0;o=c[n>>2]|0;if((o|0)==(d|0))break;else l=o}m=c[m+(d<<2)>>2]|0;if((l|0)==-1)f=12;else c[n>>2]=m}else{m=c[m+(d<<2)>>2]|0;f=12}if((f|0)==12)c[k>>2]=m;k=(c[a+8>>2]|0)+ -1|0;l=c[a+72>>2]|0;if(l)Tb[c[(c[l>>2]|0)+12>>2]&31](l,h,j,e)|0;if((k|0)==(d|0)){c[a+8>>2]=(c[a+8>>2]|0)+ -1;o=b;i=g;return o|0}j=c[a+16>>2]|0;h=c[(c[j+(k<<4)+4>>2]|0)+12>>2]<<16|c[(c[j+(k<<4)>>2]|0)+12>>2];h=(h+~(h<<15)>>10^h+~(h<<15))*9|0;h=((h>>6^h)+~((h>>6^h)<<11)>>16^(h>>6^h)+~((h>>6^h)<<11))&(c[a+12>>2]|0)+ -1;e=(c[a+44>>2]|0)+(h<<2)|0;m=c[e>>2]|0;n=c[a+64>>2]|0;if((m|0)!=(k|0)){while(1){l=n+(m<<2)|0;o=c[l>>2]|0;if((o|0)==(k|0))break;else m=o}n=c[n+(k<<2)>>2]|0;if((m|0)==-1)f=22;else c[l>>2]=n}else{n=c[n+(k<<2)>>2]|0;f=22}if((f|0)==22)c[e>>2]=n;c[j+(d<<4)+0>>2]=c[j+(k<<4)+0>>2];c[j+(d<<4)+4>>2]=c[j+(k<<4)+4>>2];c[j+(d<<4)+8>>2]=c[j+(k<<4)+8>>2];c[j+(d<<4)+12>>2]=c[j+(k<<4)+12>>2];o=(c[a+44>>2]|0)+(h<<2)|0;c[(c[a+64>>2]|0)+(d<<2)>>2]=c[o>>2];c[o>>2]=d;c[a+8>>2]=(c[a+8>>2]|0)+ -1;o=b;i=g;return o|0}function gA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;if((c[a+8>>2]|0)<=0){i=e;return}f=0;a:while(1){while(1){h=c[a+16>>2]|0;g=h+(f<<4)|0;if(!(gc[c[(c[b>>2]|0)+8>>2]&31](b,g)|0))break;Tb[c[(c[a>>2]|0)+12>>2]&31](a,c[g>>2]|0,c[h+(f<<4)+4>>2]|0,d)|0;c[3808]=(c[3808]|0)+ -1;if((f|0)>=(c[a+8>>2]|0)){a=7;break a}}f=f+1|0;if((f|0)>=(c[a+8>>2]|0)){a=7;break}}if((a|0)==7){i=e;return}}function hA(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+32|0;a[e+16>>0]=1;c[e+12>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;m=c[b+8>>2]|0;if((m|0)>0){k=0;f=0;l=0;g=0;while(1){h=c[b+16>>2]|0;if((f|0)==(l|0)){j=(l|0)==0?1:l<<1;if((l|0)<(j|0)){if(j){c[5004]=(c[5004]|0)+1;k=fF((j<<4|3)+16|0)|0;if(!k){k=0;l=f}else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16;l=f}}else k=0;if((l|0)>0){m=0;do{n=c[e+12>>2]|0;c[k+(m<<4)>>2]=c[n+(m<<4)>>2];c[k+(m<<4)+4>>2]=c[n+(m<<4)+4>>2];c[k+(m<<4)+8>>2]=c[n+(m<<4)+8>>2];c[k+(m<<4)+12>>2]=c[n+(m<<4)+12>>2];m=m+1|0}while((m|0)!=(l|0))}m=c[e+12>>2]|0;if(!m)f=l;else{c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0);c[e+12>>2]=0}a[e+16>>0]=1;c[e+12>>2]=k;c[e+8>>2]=j;m=c[b+8>>2]|0;l=f}else j=l}else{j=l;l=f}c[k+(l<<4)>>2]=c[h+(g<<4)>>2];c[k+(l<<4)+4>>2]=c[h+(g<<4)+4>>2];c[k+(l<<4)+8>>2]=c[h+(g<<4)+8>>2];c[k+(l<<4)+12>>2]=c[h+(g<<4)+12>>2];f=l+1|0;g=g+1|0;if((g|0)>=(m|0))break;else l=j}c[e+4>>2]=f;if((l|0)>-1){g=0;do{Tb[c[(c[b>>2]|0)+12>>2]&31](b,c[k+(g<<4)>>2]|0,c[k+(g<<4)+4>>2]|0,d)|0;g=g+1|0}while((g|0)<(f|0))}}else f=0;if((c[b+56>>2]|0)>0){d=c[b+64>>2]|0;g=0;do{c[d+(g<<2)>>2]=-1;g=g+1|0}while((g|0)<(c[b+56>>2]|0))}if((f|0)>1){os(e,0,f+ -1|0);f=c[e+4>>2]|0}if((f|0)>0){d=c[e+12>>2]|0;g=0;do{Yb[c[(c[b>>2]|0)+8>>2]&31](b,c[d+(g<<4)>>2]|0,c[d+(g<<4)+4>>2]|0)|0;g=g+1|0}while((g|0)<(f|0))}else d=c[e+12>>2]|0;if(!d){i=e;return}if(a[e+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}c[e+12>>2]=0;i=e;return}function iA(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;c[3812]=(c[3812]|0)+1;g=c[a+24>>2]|0;if(!g){if(!((b[e+6>>1]&b[d+4>>1])<<16>>16)){m=0;i=f;return m|0}if(!((b[d+6>>1]&b[e+4>>1])<<16>>16)){m=0;i=f;return m|0}}else if(!(Yb[c[(c[g>>2]|0)+8>>2]&31](g,d,e)|0)){m=0;i=f;return m|0}j=(c[d+12>>2]|0)>(c[e+12>>2]|0);g=j?e:d;e=j?d:e;j=c[g+12>>2]|0;l=c[e+12>>2]|0;d=((l<<16|j)+~((l<<16|j)<<15)>>10^(l<<16|j)+~((l<<16|j)<<15))*9|0;d=(d>>6^d)+~((d>>6^d)<<11)>>16^(d>>6^d)+~((d>>6^d)<<11);h=c[a+12>>2]|0;m=c[(c[a+44>>2]|0)+((d&h+ -1)<<2)>>2]|0;a:do if((m|0)!=-1){k=c[a+16>>2]|0;while(1){if((c[(c[k+(m<<4)>>2]|0)+12>>2]|0)==(j|0)?(c[(c[k+(m<<4)+4>>2]|0)+12>>2]|0)==(l|0):0)break;m=c[(c[a+64>>2]|0)+(m<<2)>>2]|0;if((m|0)==-1)break a}j=k+(m<<4)|0;if(j){m=j;i=f;return m|0}}while(0);k=c[a+8>>2]|0;j=eA(a+4|0)|0;l=c[a+72>>2]|0;if(l)Yb[c[(c[l>>2]|0)+8>>2]&31](l,g,e)|0;if((h|0)<(c[a+12>>2]|0)){Zz(a);d=(c[a+12>>2]|0)+ -1&d}else d=d&h+ -1;if((c[g+12>>2]|0)<(c[e+12>>2]|0)){c[j>>2]=g;c[j+4>>2]=e}else{c[j>>2]=e;c[j+4>>2]=g}c[j+8>>2]=0;c[j+12>>2]=0;m=(c[a+44>>2]|0)+(d<<2)|0;c[(c[a+64>>2]|0)+(k<<2)>>2]=c[m>>2];c[m>>2]=k;m=j;i=f;return m|0}function jA(a){a=a|0;return c[a+16>>2]|0}function kA(a){a=a|0;return c[a+16>>2]|0}function lA(a){a=a|0;return a+4|0}function mA(a){a=a|0;return c[a+8>>2]|0}function nA(a,b){a=a|0;b=b|0;c[a+24>>2]=b;return}function oA(a){a=a|0;return 0}function pA(a,b){a=a|0;b=b|0;c[a+72>>2]=b;return}function qA(a){a=a|0;return}function rA(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function sA(a,b){a=a|0;b=b|0;var d=0;d=i;a=c[a+4>>2]|0;if((c[b>>2]|0)==(a|0)){a=1;i=d;return a|0}a=(c[b+4>>2]|0)==(a|0);i=d;return a|0}function tA(a){a=a|0;return}function uA(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function vA(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+4>>2]|0;if((c[b>>2]|0)!=(e|0)?(c[b+4>>2]|0)!=(e|0):0){i=d;return 0}e=c[a+8>>2]|0;rc[c[(c[e>>2]|0)+32>>2]&127](e,b,c[a+12>>2]|0);i=d;return 0}function wA(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;d=i;f=c[a+748>>2]|0;if((f|0)!=4){c[a+748>>2]=f+1;z=f;l=(z|0)<0;z=l?0:z;l=a+(z*184|0)+4|0;mF(l|0,b|0,184)|0;i=d;return z|0}e=+g[b+80>>2];y=+g[a+84>>2];x=y<e?y:e;w=+g[a+268>>2];v=w<x?w:x;u=+g[a+452>>2];l=+g[a+636>>2]<(u<v?u:v);z=l?3:u<v?2:w<x?1:(y<e^1)<<31>>31;e=+g[b>>2];if(z){m=+g[a+188>>2];p=+g[b+4>>2];n=+g[a+192>>2];k=+g[b+8>>2];o=+g[a+196>>2];u=+g[a+556>>2];t=+g[a+372>>2];w=+g[a+560>>2];v=+g[a+376>>2];q=+g[a+564>>2];s=+g[a+380>>2];h=((e-m)*(w-v)-(p-n)*(u-t))*((e-m)*(w-v)-(p-n)*(u-t))+(((p-n)*(q-s)-(k-o)*(w-v))*((p-n)*(q-s)-(k-o)*(w-v))+((k-o)*(u-t)-(e-m)*(q-s))*((k-o)*(u-t)-(e-m)*(q-s)));if((z|0)==1){j=+g[a+12>>2];y=q;q=0.0;r=+g[a+4>>2];x=+g[a+8>>2];f=7}else{y=q;f=6}}else{m=+g[a+188>>2];n=+g[a+192>>2];o=+g[a+196>>2];h=0.0;p=+g[b+4>>2];k=+g[b+8>>2];t=+g[a+372>>2];u=+g[a+556>>2];v=+g[a+376>>2];w=+g[a+560>>2];s=+g[a+380>>2];y=+g[a+564>>2];f=6}if((f|0)==6){r=+g[a+4>>2];x=+g[a+8>>2];D=p-x;j=+g[a+12>>2];B=k-j;A=u-t;C=w-v;q=y-s;q=((e-r)*C-D*A)*((e-r)*C-D*A)+((D*q-B*C)*(D*q-B*C)+(B*A-(e-r)*q)*(B*A-(e-r)*q));if((z|0)==2){u=x;w=0.0;f=8}else f=7}if((f|0)==7){D=e-r;E=p-x;B=k-j;C=u-m;A=w-n;w=y-o;w=(D*A-E*C)*(D*A-E*C)+((E*w-B*A)*(E*w-B*A)+(B*C-D*w)*(B*C-D*w));if(l)e=0.0;else{u=x;f=8}}if((f|0)==8){E=e-r;A=p-u;C=k-j;D=t-m;B=v-n;e=s-o;e=(E*B-A*D)*(E*B-A*D)+((A*e-C*B)*(A*e-C*B)+(C*D-E*e)*(C*D-E*e))}E=+P(+h);C=+P(+q);A=+P(+w);y=+P(+e);D=E>-999999984306749400.0?E:-999999984306749400.0;B=C>D?C:D;z=y>(A>B?A:B)?3:A>B?2:C>D?1:(E>-999999984306749400.0^1)<<31>>31;l=(z|0)<0;z=l?0:z;l=a+(z*184|0)+4|0;mF(l|0,b|0,184)|0;i=d;return z|0}function xA(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;f=i;h=c[b+748>>2]|0;if((h|0)<=0){i=f;return}do{h=h+ -1|0;q=+g[b+(h*184|0)+4>>2];r=+g[b+(h*184|0)+8>>2];j=+g[b+(h*184|0)+12>>2];p=q*+g[d>>2]+r*+g[d+4>>2]+j*+g[d+8>>2]+ +g[d+48>>2];n=q*+g[d+16>>2]+r*+g[d+20>>2]+j*+g[d+24>>2]+ +g[d+52>>2];j=q*+g[d+32>>2]+r*+g[d+36>>2]+j*+g[d+40>>2]+ +g[d+56>>2];g[b+(h*184|0)+52>>2]=p;g[b+(h*184|0)+56>>2]=n;g[b+(h*184|0)+60>>2]=j;g[b+(h*184|0)+64>>2]=0.0;r=+g[b+(h*184|0)+20>>2];q=+g[b+(h*184|0)+24>>2];k=+g[b+(h*184|0)+28>>2];o=r*+g[e>>2]+q*+g[e+4>>2]+k*+g[e+8>>2]+ +g[e+48>>2];m=r*+g[e+16>>2]+q*+g[e+20>>2]+k*+g[e+24>>2]+ +g[e+52>>2];k=r*+g[e+32>>2]+q*+g[e+36>>2]+k*+g[e+40>>2]+ +g[e+56>>2];g[b+(h*184|0)+36>>2]=o;g[b+(h*184|0)+40>>2]=m;g[b+(h*184|0)+44>>2]=k;g[b+(h*184|0)+48>>2]=0.0;g[b+(h*184|0)+84>>2]=(p-o)*+g[b+(h*184|0)+68>>2]+(n-m)*+g[b+(h*184|0)+72>>2]+(j-k)*+g[b+(h*184|0)+76>>2];l=b+(h*184|0)+152|0;c[l>>2]=(c[l>>2]|0)+1}while((h|0)>0);d=c[b+748>>2]|0;if((d|0)<=0){i=f;return}e=d;do{d=d+ -1|0;h=b+(d*184|0)+4|0;k=+g[b+(d*184|0)+84>>2];j=+g[b+752>>2];if(k<=j){p=+g[b+(d*184|0)+36>>2]-(+g[b+(d*184|0)+52>>2]- +g[b+(d*184|0)+68>>2]*k);q=+g[b+(d*184|0)+40>>2]-(+g[b+(d*184|0)+56>>2]-k*+g[b+(d*184|0)+72>>2]);r=+g[b+(d*184|0)+44>>2]-(+g[b+(d*184|0)+60>>2]-k*+g[b+(d*184|0)+76>>2]);if(p*p+q*q+r*r>j*j){l=e+ -1|0;if((l|0)!=(d|0)){mF(h|0,b+(l*184|0)+4|0,184)|0;c[b+(l*184|0)+116>>2]=0;g[b+(l*184|0)+124>>2]=0.0;a[b+(l*184|0)+120>>0]=0;g[b+(l*184|0)+128>>2]=0.0;g[b+(l*184|0)+132>>2]=0.0;c[b+(l*184|0)+152>>2]=0;e=c[b+748>>2]|0}e=e+ -1|0;c[b+748>>2]=e}}else{l=e+ -1|0;if((l|0)!=(d|0)){mF(h|0,b+(l*184|0)+4|0,184)|0;c[b+(l*184|0)+116>>2]=0;g[b+(l*184|0)+124>>2]=0.0;a[b+(l*184|0)+120>>0]=0;g[b+(l*184|0)+128>>2]=0.0;g[b+(l*184|0)+132>>2]=0.0;c[b+(l*184|0)+152>>2]=0;e=c[b+748>>2]|0}e=e+ -1|0;c[b+748>>2]=e}}while((d|0)>0);i=f;return}function yA(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(d){Lb[c[c[d>>2]>>2]&511](d);d=c[a+52>>2]|0;if(d){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}if(!a){i=b;return}}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function zA(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(!d){i=b;return}Lb[c[c[d>>2]>>2]&511](d);a=c[a+52>>2]|0;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}
  
  
  
  function AA(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0,$=0,aa=0,ba=0.0,ca=0.0,da=0,ea=0;h=i;i=i+336|0;m=c[d+52>>2]|0;if((m|0)!=0?(Lb[c[c[m>>2]>>2]&511](m),j=c[d+52>>2]|0,(j|0)!=0):0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[5004]=(c[5004]|0)+1;j=fF(151)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}c[j>>2]=19496;a[j+20>>0]=1;c[j+16>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;a[j+40>>0]=1;c[j+36>>2]=0;c[j+28>>2]=0;c[j+32>>2]=0;a[j+60>>0]=1;c[j+56>>2]=0;c[j+48>>2]=0;c[j+52>>2]=0;c[d+52>>2]=j;s=0;m=0;v=0;j=0;while(1){if((s|0)>=(Pb[c[(c[d>>2]|0)+96>>2]&127](d)|0))break;if((m|0)==(v|0)){w=(v|0)==0?1:v<<1;if((v|0)<(w|0)){if((w|0)!=0?(c[5004]=(c[5004]|0)+1,p=fF((w<<4|3)+16|0)|0,(p|0)!=0):0){c[(p+19&-16)+ -4>>2]=p;u=p+19&-16}else u=0;if((v|0)>0){t=0;do{aa=u+(t<<4)|0;$=j+(t<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];t=t+1|0}while((t|0)!=(v|0))}if(!j){t=v;v=w;j=u}else{c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);t=v;v=w;j=u}}else t=v}else t=m;aa=j+(m<<4)|0;c[aa+0>>2]=c[h+256>>2];c[aa+4>>2]=c[h+260>>2];c[aa+8>>2]=c[h+264>>2];c[aa+12>>2]=c[h+268>>2];rc[c[(c[d>>2]|0)+108>>2]&127](d,s,aa);s=s+1|0;m=t+1|0}a[h+212>>0]=1;c[h+208>>2]=0;c[h+200>>2]=0;c[h+204>>2]=0;a[h+232>>0]=1;c[h+228>>2]=0;c[h+220>>2]=0;c[h+224>>2]=0;a[h+252>>0]=1;c[h+248>>2]=0;c[h+240>>2]=0;c[h+244>>2]=0;if(f){if((m|0)>0){f=0;C=0;E=0;F=0;while(1){t=f;f=f+1|0;if((f|0)<(m|0)){s=j+(t<<4)|0;p=j+(t<<4)+4|0;t=j+(t<<4)+8|0;u=f;do{x=u;u=u+1|0;if((u|0)<(m|0)){w=j+(x<<4)|0;v=j+(x<<4)+4|0;x=j+(x<<4)+8|0;y=u;do{A=+g[s>>2];U=+g[w>>2]-A;T=+g[p>>2];R=+g[v>>2]-T;B=+g[t>>2];S=+g[x>>2]-B;A=+g[j+(y<<4)>>2]-A;T=+g[j+(y<<4)+4>>2]-T;B=+g[j+(y<<4)+8>>2]-B;X=1.0;D=0;while(1){V=(R*B-S*T)*X;W=(S*A-U*B)*X;X=(U*T-R*A)*X;a:do if(X*X+(V*V+W*W)>9999999747378752.0e-20){Y=1.0/+Q(+(X*X+(V*V+W*W)));if((C|0)>0){G=0;do{if(V*Y*+g[F+(G<<4)>>2]+W*Y*+g[F+(G<<4)+4>>2]+X*Y*+g[F+(G<<4)+8>>2]>.9990000128746033)break a;G=G+1|0}while((G|0)<(C|0))}Z=V*Y*+g[s>>2]+W*Y*+g[p>>2]+X*Y*+g[t>>2];G=0;do{if(V*Y*+g[j+(G<<4)>>2]+W*Y*+g[j+(G<<4)+4>>2]+X*Y*+g[j+(G<<4)+8>>2]-Z+-.009999999776482582>0.0)break a;G=G+1|0}while((G|0)<(m|0));do if((C|0)==(E|0)){H=(E|0)==0?1:E<<1;if((E|0)<(H|0)){do if(!H)I=0;else{c[5004]=(c[5004]|0)+1;G=fF((H<<4|3)+16|0)|0;if(!G){I=0;break}c[(G+19&-16)+ -4>>2]=G;I=G+19&-16}while(0);if((E|0)>0){G=0;do{aa=I+(G<<4)|0;$=F+(G<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];G=G+1|0}while((G|0)!=(E|0))}if(!F){G=E;E=H;F=I;break}c[5006]=(c[5006]|0)+1;gF(c[F+ -4>>2]|0);G=E;E=H;F=I}else G=E}else G=C;while(0);g[F+(G<<4)>>2]=V*Y;g[F+(G<<4)+4>>2]=W*Y;g[F+(G<<4)+8>>2]=X*Y;g[F+(G<<4)+12>>2]=-Z;C=C+1|0}while(0);D=D+1|0;if((D|0)==2)break;else X=-1.0}y=y+1|0}while((y|0)!=(m|0))}}while((u|0)!=(m|0))}if((f|0)==(m|0)){m=F;break}}if((C|0)>0){p=0;f=0;s=0;v=0;while(1){aa=m+(p<<4)|0;c[h+184>>2]=c[aa+0>>2];c[h+188>>2]=c[aa+4>>2];c[h+192>>2]=c[aa+8>>2];A=+g[m+(p<<4)+12>>2];A=A- +$b[c[(c[d>>2]|0)+48>>2]&15](d);if((f|0)==(s|0)){w=(s|0)==0?1:s<<1;if((s|0)<(w|0)){if((w|0)!=0?(c[5004]=(c[5004]|0)+1,l=fF((w<<4|3)+16|0)|0,(l|0)!=0):0){c[(l+19&-16)+ -4>>2]=l;t=l+19&-16}else t=0;if((s|0)>0){u=0;do{aa=t+(u<<4)|0;$=v+(u<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];u=u+1|0}while((u|0)!=(s|0))}if(!v){u=s;s=w}else{c[5006]=(c[5006]|0)+1;gF(c[v+ -4>>2]|0);u=s;s=w}}else{u=s;t=v}}else{u=f;t=v}aa=t+(u<<4)|0;c[aa+0>>2]=c[h+184>>2];c[aa+4>>2]=c[h+188>>2];c[aa+8>>2]=c[h+192>>2];g[t+(u<<4)+12>>2]=A;f=f+1|0;p=p+1|0;if((p|0)>=(C|0)){l=t;break}else v=t}if((f|0)>0){p=0;w=0;x=0;y=0;do{t=p;p=p+1|0;if((p|0)<(f|0)){s=p;do{u=s;s=s+1|0;if((s|0)<(f|0)){v=s;do{S=+g[l+(u<<4)+4>>2];Y=+g[l+(v<<4)+8>>2];B=+g[l+(u<<4)+8>>2];T=+g[l+(v<<4)+4>>2];W=+g[l+(v<<4)>>2];U=+g[l+(u<<4)>>2];X=+g[l+(t<<4)+8>>2];R=+g[l+(t<<4)+4>>2];V=+g[l+(t<<4)>>2];b:do if((((T*U-S*W)*(T*U-S*W)+((S*Y-B*T)*(S*Y-B*T)+(B*W-Y*U)*(B*W-Y*U))>9999999747378752.0e-20?(W*R-T*V)*(W*R-T*V)+((T*X-Y*R)*(T*X-Y*R)+(Y*V-W*X)*(Y*V-W*X))>9999999747378752.0e-20:0)?(S*V-U*R)*(S*V-U*R)+((B*R-S*X)*(B*R-S*X)+(U*X-B*V)*(U*X-B*V))>9999999747378752.0e-20:0)?(z=X*(T*U-S*W)+(R*(B*W-Y*U)+(S*Y-B*T)*V),+P(+z)>9.999999974752427e-7):0){ba=+g[l+(t<<4)+12>>2];Z=+g[l+(u<<4)+12>>2];ca=+g[l+(v<<4)+12>>2];A=-1.0/z*((B*R-S*X)*ca+((S*Y-B*T)*ba+(T*X-Y*R)*Z));B=-1.0/z*((U*X-B*V)*ca+((B*W-Y*U)*ba+(Y*V-W*X)*Z));R=-1.0/z*((S*V-U*R)*ca+((T*U-S*W)*ba+(W*R-T*V)*Z));C=0;do{if(+g[l+(C<<4)+12>>2]+(A*+g[l+(C<<4)>>2]+B*+g[l+(C<<4)+4>>2]+R*+g[l+(C<<4)+8>>2])+-.009999999776482582>0.0)break b;C=C+1|0}while((C|0)<(f|0));do if((w|0)==(x|0)){D=(x|0)==0?1:x<<1;if((x|0)>=(D|0)){C=x;break}do if(!D)E=0;else{c[5004]=(c[5004]|0)+1;C=fF((D<<4|3)+16|0)|0;if(!C){E=0;break}c[(C+19&-16)+ -4>>2]=C;E=C+19&-16}while(0);if((x|0)>0){C=0;do{aa=E+(C<<4)|0;$=y+(C<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];C=C+1|0}while((C|0)!=(x|0))}if(!y){C=x;x=D;y=E;break}c[5006]=(c[5006]|0)+1;gF(c[y+ -4>>2]|0);C=x;x=D;y=E}else C=w;while(0);g[y+(C<<4)>>2]=A;g[y+(C<<4)+4>>2]=B;g[y+(C<<4)+8>>2]=R;g[y+(C<<4)+12>>2]=0.0;w=w+1|0}while(0);v=v+1|0}while((v|0)!=(f|0))}}while((s|0)!=(f|0))}}while((p|0)!=(f|0))}else{w=0;y=0}}else{l=0;w=0;y=0}}else{m=0;l=0;w=0;y=0}uE(h+196|0,y,w);if(y){c[5006]=(c[5006]|0)+1;gF(c[y+ -4>>2]|0)}if(l){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}if(m){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}}else uE(h+196|0,j,m);s=c[h+240>>2]|0;if((s|0)>0&((s|0)<0^1)){c[5004]=(c[5004]|0)+1;l=fF((s<<4|3)+16|0)|0;if(!l)m=0;else{c[(l+19&-16)+ -4>>2]=l;m=l+19&-16}l=0;do{aa=m+(l<<4)|0;c[aa+0>>2]=c[h+168>>2];c[aa+4>>2]=c[h+172>>2];c[aa+8>>2]=c[h+176>>2];c[aa+12>>2]=c[h+180>>2];l=l+1|0}while((l|0)!=(s|0))}else m=0;a[h+164>>0]=1;f=h+160|0;c[f>>2]=0;l=h+152|0;c[l>>2]=0;c[h+156>>2]=0;p=h+112|0;t=p+36|0;do{c[p>>2]=0;p=p+4|0}while((p|0)<(t|0));a[h+128>>0]=1;c[h+124>>2]=0;c[h+116>>2]=0;c[h+120>>2]=0;if((s|0)<0)Gb();if((s|0)>0){GA(h+148|0,s);p=c[f>>2]|0;t=0;do{u=p+(t*36|0)|0;if(u){IA(u,h+112|0);c[u+20>>2]=c[h+132>>2];c[u+24>>2]=c[h+136>>2];c[u+28>>2]=c[h+140>>2];c[u+32>>2]=c[h+144>>2]}t=t+1|0}while((t|0)!=(s|0));t=c[h+124>>2]|0;c[l>>2]=s;if(t){if(a[h+128>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[t+ -4>>2]|0)}c[h+124>>2]=0}}else{c[l>>2]=s;p=0}a[h+128>>0]=1;c[h+124>>2]=0;c[h+116>>2]=0;c[h+120>>2]=0;t=c[h+200>>2]|0;u=c[d+52>>2]|0;v=c[u+8>>2]|0;if((v|0)<(t|0)){if((c[u+12>>2]|0)<(t|0)){if(!t){w=0;y=v}else{c[5004]=(c[5004]|0)+1;w=fF((t<<4|3)+16|0)|0;if(!w)w=0;else{c[(w+19&-16)+ -4>>2]=w;w=w+19&-16}y=c[u+8>>2]|0}if((y|0)>0){x=0;do{aa=w+(x<<4)|0;$=(c[u+16>>2]|0)+(x<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];x=x+1|0}while((x|0)!=(y|0))}x=c[u+16>>2]|0;if(x){if(a[u+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0)}c[u+16>>2]=0}a[u+20>>0]=1;c[u+16>>2]=w;c[u+12>>2]=t;w=u+16|0}else w=u+16|0;do{aa=(c[w>>2]|0)+(v<<4)|0;c[aa+0>>2]=c[h+96>>2];c[aa+4>>2]=c[h+100>>2];c[aa+8>>2]=c[h+104>>2];c[aa+12>>2]=c[h+108>>2];v=v+1|0}while((v|0)!=(t|0))}c[u+8>>2]=t;if((t|0)>0){v=c[h+208>>2]|0;u=0;do{aa=(c[(c[d+52>>2]|0)+16>>2]|0)+(u<<4)|0;$=v+(u<<4)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];u=u+1|0}while((u|0)!=(t|0))}if((s|0)>0){t=0;do{u=(c[h+228>>2]|0)+((c[(c[h+248>>2]|0)+(t<<2)>>2]|0)*12|0)|0;x=p+(t*36|0)+4|0;v=p+(t*36|0)+8|0;w=p+(t*36|0)+12|0;y=p+(t*36|0)+16|0;p=u;D=0;do{C=p+4|0;E=c[p+((c[C>>2]|0)*12|0)+8>>2]|0;H=c[x>>2]|0;if((H|0)==(c[v>>2]|0)?(r=(H|0)==0?1:H<<1,(H|0)<(r|0)):0){if(!r)F=0;else{c[5004]=(c[5004]|0)+1;F=fF((r<<2|3)+16|0)|0;if(!F)F=0;else{c[(F+19&-16)+ -4>>2]=F;F=F+19&-16}H=c[x>>2]|0}if((H|0)>0){G=0;do{I=F+(G<<2)|0;if(I)c[I>>2]=c[(c[w>>2]|0)+(G<<2)>>2];G=G+1|0}while((G|0)!=(H|0))}G=c[w>>2]|0;if(G){if(a[y>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[G+ -4>>2]|0)}c[w>>2]=0}a[y>>0]=1;c[w>>2]=F;c[v>>2]=r;H=c[x>>2]|0}F=(c[w>>2]|0)+(H<<2)|0;if(F){c[F>>2]=E;H=c[x>>2]|0}c[x>>2]=H+1;$=c[p+8>>2]|0;aa=c[h+208>>2]|0;z=+g[aa+($<<4)>>2]- +g[aa+(E<<4)>>2];A=+g[aa+($<<4)+4>>2]- +g[aa+(E<<4)+4>>2];R=+g[aa+($<<4)+8>>2]- +g[aa+(E<<4)+8>>2];B=1.0/+Q(+(z*z+A*A+R*R));if((D|0)<2){g[h+288+(D<<4)>>2]=z*B;g[h+288+(D<<4)+4>>2]=A*B;g[h+288+(D<<4)+8>>2]=R*B;g[h+288+(D<<4)+12>>2]=0.0;D=D+1|0}aa=c[C>>2]|0;p=p+(((c[p+(aa*12|0)>>2]|0)+aa|0)*12|0)|0}while((p|0)!=(u|0));w=m+(t<<4)|0;if((D|0)==2){X=+g[h+292>>2];Y=+g[h+312>>2];Z=+g[h+296>>2];ba=+g[h+308>>2];W=+g[h+304>>2];V=+g[h+288>>2];$=m+(t<<4)+4|0;aa=m+(t<<4)+8|0;g[m+(t<<4)+12>>2]=0.0;ca=1.0/+Q(+((X*Y-Z*ba)*(X*Y-Z*ba)+(Z*W-Y*V)*(Z*W-Y*V)+(ba*V-X*W)*(ba*V-X*W)));g[w>>2]=(X*Y-Z*ba)*ca;g[$>>2]=(Z*W-Y*V)*ca;g[aa>>2]=(ba*V-X*W)*ca;p=c[f>>2]|0;g[p+(t*36|0)+20>>2]=(X*Y-Z*ba)*ca;g[p+(t*36|0)+24>>2]=+g[$>>2];g[p+(t*36|0)+28>>2]=+g[aa>>2];g[p+(t*36|0)+32>>2]=1.0000000150474662e+30}else{c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;p=c[f>>2]|0}u=c[p+(t*36|0)+4>>2]|0;if((u|0)>0){v=c[(c[d+52>>2]|0)+16>>2]|0;B=+g[w>>2];z=+g[m+(t<<4)+4>>2];A=+g[m+(t<<4)+8>>2];x=c[p+(t*36|0)+12>>2]|0;R=1.0000000150474662e+30;w=0;do{aa=c[x+(w<<2)>>2]|0;ca=+g[v+(aa<<4)>>2]*B+ +g[v+(aa<<4)+4>>2]*z+ +g[v+(aa<<4)+8>>2]*A;R=R>ca?ca:R;w=w+1|0}while((w|0)<(u|0))}else R=1.0000000150474662e+30;g[p+(t*36|0)+32>>2]=-R;t=t+1|0}while((t|0)<(s|0));s=c[l>>2]|0;if((s|0)>0){t=0;r=0;w=0;do{if((w|0)==(t|0)){t=(w|0)==0?1:w<<1;if((w|0)<(t|0)){if((t|0)!=0?(c[5004]=(c[5004]|0)+1,q=fF((t<<2|3)+16|0)|0,(q|0)!=0):0){c[(q+19&-16)+ -4>>2]=q;u=q+19&-16}else u=0;if((w|0)>0){x=0;do{v=u+(x<<2)|0;if(v)c[v>>2]=c[r+(x<<2)>>2];x=x+1|0}while((x|0)!=(w|0))}if(!r)r=u;else{c[5006]=(c[5006]|0)+1;gF(c[r+ -4>>2]|0);r=u}}else t=w}u=r+(w<<2)|0;if(u){c[u>>2]=w;s=c[l>>2]|0}w=w+1|0}while((w|0)<(s|0));if(!w)o=r;else{q=h+88|0;u=h+84|0;t=h+76|0;s=h+32|0;v=h+308|0;B=0.0;A=0.0;z=0.0;while(1){C=w+ -1|0;w=c[r+(C<<2)>>2]|0;c[5004]=(c[5004]|0)+1;y=fF(23)|0;if(y){c[(y+19&-16)+ -4>>2]=y;x=y+19&-16;if(y+19&-16)c[x>>2]=w}else x=0;S=+g[p+(w*36|0)+20>>2];R=+g[p+(w*36|0)+24>>2];T=+g[p+(w*36|0)+28>>2];w=C;F=1;y=1;D=C;c:while(1){C=(w|0)>0;d:while(1){do{aa=D;D=D+ -1|0;if((aa|0)<=0)break c;E=c[r+(D<<2)>>2]|0}while(!(S*+g[p+(E*36|0)+20>>2]+R*+g[p+(E*36|0)+24>>2]+T*+g[p+(E*36|0)+28>>2]>.9990000128746033));do if((y|0)==(F|0)?(o=(F|0)==0?1:F<<1,(F|0)<(o|0)):0){do if(!o)G=0;else{c[5004]=(c[5004]|0)+1;G=fF((o<<2|3)+16|0)|0;if(!G){G=0;break}c[(G+19&-16)+ -4>>2]=G;G=G+19&-16}while(0);if((F|0)>0){H=0;do{I=G+(H<<2)|0;if(I)c[I>>2]=c[x+(H<<2)>>2];H=H+1|0}while((H|0)!=(F|0))}if(!x){F=o;x=G;break}c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0);F=o;x=G}while(0);G=x+(y<<2)|0;if(G)c[G>>2]=E;y=y+1|0;if(C)I=0;else continue;while(1){H=r+(I<<2)|0;G=I+1|0;if((c[H>>2]|0)==(E|0))break;if((G|0)<(w|0))I=G;else continue d}if((I|0)<(w|0))break}aa=w+ -1|0;$=r+(aa<<2)|0;c[H>>2]=c[$>>2];c[$>>2]=E;w=aa}if((y|0)>1){a[q>>0]=1;c[u>>2]=0;c[t>>2]=0;c[h+80>>2]=0;G=0;B=0.0;A=0.0;z=0.0;C=0;do{E=c[x+(C<<2)>>2]|0;B=+g[p+(E*36|0)+20>>2]+B;A=+g[p+(E*36|0)+24>>2]+A;z=+g[p+(E*36|0)+28>>2]+z;D=p+(E*36|0)+4|0;H=c[D>>2]|0;if((H|0)>0){E=p+(E*36|0)+12|0;J=G;F=0;while(1){G=c[(c[E>>2]|0)+(F<<2)>>2]|0;aa=(c[(c[d+52>>2]|0)+16>>2]|0)+(G<<4)|0;c[h+56>>2]=c[aa+0>>2];c[h+60>>2]=c[aa+4>>2];c[h+64>>2]=c[aa+8>>2];c[h+68>>2]=c[aa+12>>2];e:do if((J|0)>0){I=c[u>>2]|0;K=0;while(1){if((c[I+(K*24|0)+20>>2]|0)==(G|0)){G=J;break e}K=K+1|0;if((K|0)>=(J|0)){n=207;break}}}else n=207;while(0);if((n|0)==207){n=0;c[h+0>>2]=c[h+56>>2];c[h+4>>2]=c[h+60>>2];c[h+8>>2]=c[h+64>>2];c[h+12>>2]=c[h+68>>2];do if((J|0)==(c[h+80>>2]|0)){H=(J|0)==0?1:J<<1;if((J|0)>=(H|0))break;if(!H)I=0;else{c[5004]=(c[5004]|0)+1;I=fF((H*24|3)+16|0)|0;if(!I)I=0;else{c[(I+19&-16)+ -4>>2]=I;I=I+19&-16}J=c[t>>2]|0}K=c[u>>2]|0;if((J|0)<=0){if(K)n=216}else{n=0;do{aa=I+(n*24|0)|0;$=K+(n*24|0)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];c[aa+16>>2]=c[$+16>>2];c[aa+20>>2]=c[$+20>>2];n=n+1|0}while((n|0)!=(J|0));n=216}if((n|0)==216){n=0;if(!((a[q>>0]|0)==0|(K|0)==0)){c[5006]=(c[5006]|0)+1;gF(c[K+ -4>>2]|0);J=c[t>>2]|0}c[u>>2]=0}a[q>>0]=1;c[u>>2]=I;c[h+80>>2]=H}while(0);H=c[u>>2]|0;aa=H+(J*24|0)|0;c[aa+0>>2]=c[h+0>>2];c[aa+4>>2]=c[h+4>>2];c[aa+8>>2]=c[h+8>>2];c[aa+12>>2]=c[h+12>>2];c[aa+16>>2]=c[h+16>>2];c[H+(J*24|0)+20>>2]=G;G=(c[t>>2]|0)+1|0;c[t>>2]=G;H=c[D>>2]|0}F=F+1|0;if((F|0)>=(H|0))break;else J=G}}C=C+1|0}while((C|0)<(y|0));a[h+36>>0]=1;c[s>>2]=0;c[h+24>>2]=0;c[h+28>>2]=0;aa=p+((c[x>>2]|0)*9<<2)+20|0;c[h+40>>2]=c[aa+0>>2];c[h+44>>2]=c[aa+4>>2];c[h+48>>2]=c[aa+8>>2];c[h+52>>2]=c[aa+12>>2];ca=1.0/+Q(+(B*B+A*A+z*z));B=B*ca;A=A*ca;z=z*ca;if(+P(+z)>.7071067690849304){S=1.0/+Q(+(z*z+A*A));T=0.0;R=-(z*S);S=A*S}else{R=1.0/+Q(+(B*B+A*A));T=-(A*R);R=B*R;S=0.0}f:do if((G|0)<2)if((G|0)>0){D=0;J=0;C=0;n=1;while(1){E=c[u>>2]|0;do if((D|0)==(J|0)){F=(J|0)==0?1:J<<1;if((J|0)>=(F|0)){I=J;F=J;break}do if(!F)H=0;else{c[5004]=(c[5004]|0)+1;G=fF((F*24|3)+16|0)|0;if(!G){H=0;J=D;break}c[(G+19&-16)+ -4>>2]=G;H=G+19&-16;J=D}while(0);if((J|0)>0){G=0;do{aa=H+(G*24|0)|0;$=C+(G*24|0)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];c[aa+16>>2]=c[$+16>>2];c[aa+20>>2]=c[$+20>>2];G=G+1|0}while((G|0)!=(J|0))}if(C){c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0)}I=D;G=c[t>>2]|0;C=H}else{I=D;F=J}while(0);aa=C+(I*24|0)|0;c[aa+0>>2]=c[E+0>>2];c[aa+4>>2]=c[E+4>>2];c[aa+8>>2]=c[E+8>>2];c[aa+12>>2]=c[E+12>>2];c[aa+16>>2]=c[E+16>>2];c[aa+20>>2]=c[E+20>>2];D=D+1|0;if((n|0)>=(G|0)){n=272;break f}J=F;n=n+1|0}}else{C=0;n=307}else{n=c[u>>2]|0;C=G;D=0;do{if(T*+g[n+(D*24|0)>>2]+R*+g[n+(D*24|0)+4>>2]+S*+g[n+(D*24|0)+8>>2]<T*+g[n>>2]+R*+g[n+4>>2]+S*+g[n+8>>2]){c[h+288>>2]=c[n+0>>2];c[h+292>>2]=c[n+4>>2];c[h+296>>2]=c[n+8>>2];c[h+300>>2]=c[n+12>>2];c[h+304>>2]=c[n+16>>2];c[h+308>>2]=c[n+20>>2];C=n+(D*24|0)|0;c[n+0>>2]=c[C+0>>2];c[n+4>>2]=c[C+4>>2];c[n+8>>2]=c[C+8>>2];c[n+12>>2]=c[C+12>>2];c[n+16>>2]=c[C+16>>2];c[n+20>>2]=c[C+20>>2];C=n+(D*24|0)|0;c[C+0>>2]=c[h+288>>2];c[C+4>>2]=c[h+292>>2];c[C+8>>2]=c[h+296>>2];c[C+12>>2]=c[h+300>>2];c[C+16>>2]=c[h+304>>2];c[C+20>>2]=c[h+308>>2];C=G}D=D+1|0}while((D|0)<(C|0));g[n+16>>2]=-1.0000000150474662e+30;if((C|0)>1){U=+g[n+4>>2];D=1;do{Z=+g[n+(D*24|0)>>2]- +g[n>>2];ba=+g[n+(D*24|0)+4>>2]-U;ca=+g[n+(D*24|0)+8>>2]- +g[n+8>>2];g[n+(D*24|0)+16>>2]=((T*ba-R*Z)*z+(B*(R*ca-S*ba)+A*(S*Z-T*ca)))/+Q(+(Z*Z+ba*ba+ca*ca));D=D+1|0}while((D|0)<(C|0))}c[h+272>>2]=c[n+0>>2];c[h+276>>2]=c[n+4>>2];c[h+280>>2]=c[n+8>>2];c[h+284>>2]=c[n+12>>2];JA(h+72|0,h+272|0,1,C+ -1|0);C=c[u>>2]|0;c[5004]=(c[5004]|0)+1;n=fF(43)|0;if(!n)n=0;else{c[(n+19&-16)+ -4>>2]=n;n=n+19&-16}D=c[u>>2]|0;c[n+0>>2]=c[C+0>>2];c[n+4>>2]=c[C+4>>2];c[n+8>>2]=c[C+8>>2];c[n+12>>2]=c[C+12>>2];c[n+16>>2]=c[C+16>>2];c[n+20>>2]=c[C+20>>2];c[5004]=(c[5004]|0)+1;C=fF(67)|0;if(!C)C=0;else{c[(C+19&-16)+ -4>>2]=C;C=C+19&-16}E=0;while(1){aa=C+(E*24|0)|0;$=n+(E*24|0)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];c[aa+16>>2]=c[$+16>>2];c[aa+20>>2]=c[$+20>>2];if(!E)break;else E=E+1|0}if(n){c[5006]=(c[5006]|0)+1;gF(c[n+ -4>>2]|0)}G=C+24|0;c[G+0>>2]=c[D+24>>2];c[G+4>>2]=c[D+28>>2];c[G+8>>2]=c[D+32>>2];c[G+12>>2]=c[D+36>>2];c[G+16>>2]=c[D+40>>2];c[G+20>>2]=c[D+44>>2];G=c[t>>2]|0;if((G|0)==2){D=2;n=273;break}else{H=2;D=2;F=2;n=2}while(1){g:do if((H|0)>1){aa=c[u>>2]|0;E=aa+(n*24|0)|0;R=+g[E>>2];S=+g[aa+(n*24|0)+4>>2];T=+g[aa+(n*24|0)+8>>2];while(1){aa=H+ -2|0;I=H+ -1|0;Z=+g[C+(aa*24|0)>>2];ba=Z- +g[C+(I*24|0)>>2];X=+g[C+(aa*24|0)+4>>2];W=X- +g[C+(I*24|0)+4>>2];ca=+g[C+(aa*24|0)+8>>2];Y=ca- +g[C+(I*24|0)+8>>2];if((ba*(X-S)-W*(Z-R))*z+(B*(W*(ca-T)-Y*(X-S))+A*(Y*(Z-R)-ba*(ca-T)))>0.0)break;if((I|0)>1){H=I;D=I}else{H=I;D=I;break g}}do if((H|0)==(F|0)){I=(F|0)==0?1:F<<1;if((F|0)>=(I|0)){H=F;break}do if(!I)J=0;else{c[5004]=(c[5004]|0)+1;F=fF((I*24|3)+16|0)|0;if(!F){J=0;F=D;break}c[(F+19&-16)+ -4>>2]=F;J=F+19&-16;F=D}while(0);if((F|0)>0){G=0;do{aa=J+(G*24|0)|0;$=C+(G*24|0)|0;c[aa+0>>2]=c[$+0>>2];c[aa+4>>2]=c[$+4>>2];c[aa+8>>2]=c[$+8>>2];c[aa+12>>2]=c[$+12>>2];c[aa+16>>2]=c[$+16>>2];c[aa+20>>2]=c[$+20>>2];G=G+1|0}while((G|0)!=(F|0))}if(C){c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0)}G=c[t>>2]|0;H=D;F=I;C=J}while(0);H=C+(H*24|0)|0;c[H+0>>2]=c[E+0>>2];c[H+4>>2]=c[E+4>>2];c[H+8>>2]=c[E+8>>2];c[H+12>>2]=c[E+12>>2];c[H+16>>2]=c[E+16>>2];c[H+20>>2]=c[E+20>>2];D=D+1|0;H=D}while(0);n=n+1|0;if((n|0)==(G|0)){n=272;break}}}while(0);if((n|0)==272)if((D|0)>0)n=273;else n=295;if((n|0)==273){H=0;G=0;F=0;n=0;do{E=C+(n*24|0)+20|0;do if((H|0)==(G|0)){I=(G|0)==0?1:G<<1;if((G|0)>=(I|0)){H=G;break}do if(!I)H=0;else{c[5004]=(c[5004]|0)+1;H=fF((I<<2|3)+16|0)|0;if(!H){H=0;break}c[(H+19&-16)+ -4>>2]=H;H=H+19&-16}while(0);if((G|0)>0){J=0;do{K=H+(J<<2)|0;if(K)c[K>>2]=c[F+(J<<2)>>2];J=J+1|0}while((J|0)!=(G|0))}if(F){c[5006]=(c[5006]|0)+1;gF(c[F+ -4>>2]|0);c[s>>2]=0}a[h+36>>0]=1;c[s>>2]=H;c[h+28>>2]=I;F=H;H=G;G=I}while(0);I=F+(H<<2)|0;if(I){c[I>>2]=c[E>>2];H=c[h+24>>2]|0}H=H+1|0;c[h+24>>2]=H;J=c[t>>2]|0;h:do if((J|0)>0){I=c[u>>2]|0;E=c[E>>2]|0;K=0;while(1){L=I+(K*24|0)+20|0;K=K+1|0;if((c[L>>2]|0)==(E|0))break;if((K|0)>=(J|0))break h}c[L>>2]=-1}while(0);n=n+1|0}while((n|0)<(D|0));G=c[t>>2]|0;n=295}i:do if((n|0)==295){n=0;if((G|0)>0){H=c[u>>2]|0;I=c[l>>2]|0;F=0;while(1){E=c[H+(F*24|0)+20>>2]|0;if(!((E|0)==-1|(I|0)<1)){D=0;do{J=0;while(1){if((c[x+(J<<2)>>2]|0)==(D|0))break;J=J+1|0;if((J|0)>=(y|0)){n=303;break}}do if((n|0)==303){n=0;J=c[p+(D*36|0)+4>>2]|0;if((J|0)<=0)break;K=c[p+(D*36|0)+12>>2]|0;L=0;do{if((c[K+(L<<2)>>2]|0)==(E|0)){D=1;break i}L=L+1|0}while((L|0)<(J|0))}while(0);D=D+1|0}while((D|0)<(I|0))}F=F+1|0;if((F|0)>=(G|0)){n=307;break}}}else n=307}while(0);if((n|0)==307){n=0;D=c[d+52>>2]|0;E=c[D+28>>2]|0;if((E|0)==(c[D+32>>2]|0)){GA(D+24|0,(E|0)==0?1:E<<1);E=c[D+28>>2]|0}F=(c[D+36>>2]|0)+(E*36|0)|0;if(F){IA(F,h+20|0);c[F+20>>2]=c[h+40>>2];c[F+24>>2]=c[h+44>>2];c[F+28>>2]=c[h+48>>2];c[F+32>>2]=c[h+52>>2];E=c[D+28>>2]|0}c[D+28>>2]=E+1;D=0}if(C){c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0)}C=c[s>>2]|0;if(C){if(a[h+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0)}c[s>>2]=0}C=c[u>>2]|0;if(C){if(a[q>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[C+ -4>>2]|0)}c[u>>2]=0}a[q>>0]=1;c[u>>2]=0;c[t>>2]=0;c[h+80>>2]=0;if(D&(y|0)>0)n=324}else if((y|0)>0)n=324;if((n|0)==324){n=0;C=0;do{D=c[x+(C<<2)>>2]|0;IA(h+288|0,p+(D*36|0)|0);D=p+(D*36|0)+20|0;c[v+0>>2]=c[D+0>>2];c[v+4>>2]=c[D+4>>2];c[v+8>>2]=c[D+8>>2];c[v+12>>2]=c[D+12>>2];D=c[d+52>>2]|0;E=c[D+28>>2]|0;if((E|0)==(c[D+32>>2]|0)){GA(D+24|0,(E|0)==0?1:E<<1);E=c[D+28>>2]|0}F=(c[D+36>>2]|0)+(E*36|0)|0;if(F){IA(F,h+288|0);c[F+20>>2]=c[v+0>>2];c[F+24>>2]=c[v+4>>2];c[F+28>>2]=c[v+8>>2];c[F+32>>2]=c[v+12>>2];E=c[D+28>>2]|0}c[D+28>>2]=E+1;D=c[h+300>>2]|0;if(D){if(a[h+304>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[D+ -4>>2]|0)}c[h+300>>2]=0}C=C+1|0}while((C|0)<(y|0))}if(x){c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0)}if(!w){o=r;break}}}}else o=0}else o=0;d=c[d+52>>2]|0;c[d+64>>2]=0;c[d+68>>2]=0;c[d+72>>2]=0;c[d+76>>2]=0;r=c[d+28>>2]|0;if((r|0)>0){s=r;w=0;u=0;G=0;L=0;H=0;K=0;J=0;I=0;F=0;y=0;E=0;x=0;q=0;while(1){C=c[d+36>>2]|0;r=c[C+(q*36|0)+4>>2]|0;if((r|0)>0){t=q&65535;s=q|-65536;D=0;while(1){v=D+1|0;M=c[C+(q*36|0)+12>>2]|0;O=c[M+(D<<2)>>2]&65535;M=c[M+(((v|0)==(r|0)?0:v)<<2)>>2]&65535;D=O<<16>>16<M<<16>>16?O:M;C=O<<16>>16<M<<16>>16?M:O;_=O<<16>>16<M<<16>>16?O:M;O=O<<16>>16<M<<16>>16?M:O;M=G+ -1|0;j:do if((((_&65535)<<16)+(O<<16>>16)&M)>>>0<w>>>0?(k=c[F+((((_&65535)<<16)+(O<<16>>16)&M)<<2)>>2]|0,(k|0)!=-1):0){N=k;while(1){if(O<<16>>16==(b[J+(N<<2)>>1]|0)?_<<16>>16==(b[J+(N<<2)+2>>1]|0):0)break;N=c[x+(N<<2)>>2]|0;if((N|0)==-1){N=0;break j}}if((N|0)!=-1)N=L+(N<<2)|0;else N=0}else N=0;while(0);aa=c[d+16>>2]|0;A=+g[aa+(_<<16>>16<<4)>>2]- +g[aa+(O<<16>>16<<4)>>2];z=+g[aa+(_<<16>>16<<4)+4>>2]- +g[aa+(O<<16>>16<<4)+4>>2];B=+g[aa+(_<<16>>16<<4)+8>>2]- +g[aa+(O<<16>>16<<4)+8>>2];R=1.0/+Q(+(A*A+z*z+B*B));_=c[d+48>>2]|0;k:do if((_|0)>0){O=c[d+56>>2]|0;$=0;while(1){S=+g[O+($<<4)>>2];T=+g[O+($<<4)+8>>2];do if(!(+P(+(S-A*R))>1.0e-6)){if(+P(+(+g[O+($<<4)+4>>2]-z*R))>1.0e-6)break;if(!(+P(+(T-B*R))>1.0e-6))break k}while(0);do if(!(+P(+(A*R+S))>1.0e-6)){if(+P(+(z*R+ +g[O+($<<4)+4>>2]))>1.0e-6)break;if(!(+P(+(B*R+T))>1.0e-6))break k}while(0);$=$+1|0;if(($|0)>=(_|0)){n=359;break}}}else n=359;while(0);if((n|0)==359){n=0;do if((_|0)==(c[d+52>>2]|0)){O=(_|0)==0?1:_<<1;if((_|0)>=(O|0))break;if(!O)$=0;else{c[5004]=(c[5004]|0)+1;_=fF((O<<4|3)+16|0)|0;if(!_)$=0;else{c[(_+19&-16)+ -4>>2]=_;$=_+19&-16}_=c[d+48>>2]|0}if((_|0)>0){aa=0;do{da=$+(aa<<4)|0;ea=(c[d+56>>2]|0)+(aa<<4)|0;c[da+0>>2]=c[ea+0>>2];c[da+4>>2]=c[ea+4>>2];c[da+8>>2]=c[ea+8>>2];c[da+12>>2]=c[ea+12>>2];aa=aa+1|0}while((aa|0)!=(_|0))}_=c[d+56>>2]|0;if(_){if(a[d+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[_+ -4>>2]|0)}c[d+56>>2]=0}a[d+60>>0]=1;c[d+56>>2]=$;c[d+52>>2]=O;_=c[d+48>>2]|0}while(0);ea=c[d+56>>2]|0;g[ea+(_<<4)>>2]=A*R;g[ea+(_<<4)+4>>2]=z*R;g[ea+(_<<4)+8>>2]=B*R;g[ea+(_<<4)+12>>2]=0.0;c[d+48>>2]=(c[d+48>>2]|0)+1}l:do if(!N){O=((D&65535)<<16)+(C<<16>>16)&M;m:do if(O>>>0<w>>>0){M=c[F+(O<<2)>>2]|0;if((M|0)==-1)break;while(1){if(C<<16>>16==(b[J+(M<<2)>>1]|0)?D<<16>>16==(b[J+(M<<2)+2>>1]|0):0)break;M=c[x+(M<<2)>>2]|0;if((M|0)==-1)break m}if((M|0)==-1)break;ea=L+(M<<2)|0;b[ea>>1]=s;b[ea+2>>1]=s>>>16;break l}while(0);do if((u|0)==(G|0)){M=(G|0)==0?1:G<<1;if((G|0)>=(M|0)){_=G;M=G;break}do if(!M)N=0;else{c[5004]=(c[5004]|0)+1;N=fF((M<<2|3)+16|0)|0;if(!N){N=0;break}c[(N+19&-16)+ -4>>2]=N;N=N+19&-16}while(0);if((G|0)>0){_=0;do{$=N+(_<<2)|0;if($){ea=L+(_<<2)|0;ea=e[ea>>1]|e[ea+2>>1]<<16;b[$>>1]=ea;b[$+2>>1]=ea>>>16}_=_+1|0}while((_|0)!=(G|0))}if(!L){_=G;L=N;break}c[5006]=(c[5006]|0)+1;gF(c[L+ -4>>2]|0);_=G;L=N}else{_=u;M=G}while(0);N=L+(_<<2)|0;if(N){b[N>>1]=s;b[N+2>>1]=s>>>16;_=u}N=_+1|0;do if((H|0)==(K|0)){K=(H|0)==0?1:H<<1;if((H|0)>=(K|0)){K=H;break}do if(!K)_=0;else{c[5004]=(c[5004]|0)+1;_=fF((K<<2|3)+16|0)|0;if(!_){_=0;break}c[(_+19&-16)+ -4>>2]=_;_=_+19&-16}while(0);if((H|0)>0){aa=0;do{$=_+(aa<<2)|0;if($){ea=J+(aa<<2)|0;ea=e[ea>>1]|e[ea+2>>1]<<16;b[$>>1]=ea;b[$+2>>1]=ea>>>16}aa=aa+1|0}while((aa|0)!=(H|0))}if(!J){J=_;break}c[5006]=(c[5006]|0)+1;gF(c[J+ -4>>2]|0);J=_}while(0);_=J+(H<<2)|0;if(_){b[_>>1]=(D&65535)<<16|C&65535;b[_+2>>1]=((D&65535)<<16|C&65535)>>>16}H=H+1|0;if((G|0)<(M|0)){do if((w|0)<(M|0)){if((w|0)<=(M|0)){do if((I|0)<(M|0)){do if(!M)G=0;else{c[5004]=(c[5004]|0)+1;G=fF((M<<2|3)+16|0)|0;if(!G){G=0;break}c[(G+19&-16)+ -4>>2]=G;G=G+19&-16}while(0);if((w|0)>0){I=0;do{O=G+(I<<2)|0;if(O)c[O>>2]=c[F+(I<<2)>>2];I=I+1|0}while((I|0)!=(w|0))}if(!F){I=M;F=G;break}c[5006]=(c[5006]|0)+1;gF(c[F+ -4>>2]|0);I=M;F=G}while(0);O=w;do{G=F+(O<<2)|0;if(G)c[G>>2]=0;O=O+1|0}while((O|0)!=(M|0))}if((y|0)<(M|0)){do if((E|0)<(M|0)){do if(!M)G=0;else{c[5004]=(c[5004]|0)+1;E=fF((M<<2|3)+16|0)|0;if(!E){G=0;break}c[(E+19&-16)+ -4>>2]=E;G=E+19&-16}while(0);if((y|0)>0){E=0;do{O=G+(E<<2)|0;if(O)c[O>>2]=c[x+(E<<2)>>2];E=E+1|0}while((E|0)!=(y|0))}if(!x){E=M;x=G;break}c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0);E=M;x=G}while(0);do{G=x+(y<<2)|0;if(G)c[G>>2]=0;y=y+1|0}while((y|0)!=(M|0))}if((M|0)>0){ea=M<<2;jF(F|0,-1,ea|0)|0;jF(x|0,-1,ea|0)|0}if((w|0)<=0){w=M;y=M;break}G=M+ -1|0;y=0;do{ea=F+(((e[J+(y<<2)+2>>1]<<16)+(b[J+(y<<2)>>1]|0)&G)<<2)|0;c[x+(y<<2)>>2]=c[ea>>2];c[ea>>2]=y;y=y+1|0}while((y|0)!=(w|0));w=M;y=M}while(0);O=((D&65535)<<16)+(C<<16>>16)&M+ -1}G=F+(O<<2)|0;c[x+(u<<2)>>2]=c[G>>2];c[G>>2]=u;u=N;G=M}else b[N+2>>1]=t;while(0);if((v|0)>=(r|0))break;C=c[d+36>>2]|0;D=v}r=c[d+28>>2]|0}else r=s;q=q+1|0;if((q|0)>=(r|0))break;else s=r}if((r|0)>0){n=c[d+36>>2]|0;q=c[d+16>>2]|0;R=0.0;k=0;do{u=c[n+(k*36|0)+4>>2]|0;t=c[n+(k*36|0)+12>>2]|0;s=c[t>>2]|0;if((u+ -2|0)>=1){B=+g[d+64>>2];A=+g[d+68>>2];z=+g[d+72>>2];v=1;do{da=c[t+(v<<2)>>2]|0;v=v+1|0;ea=c[t+(((v|0)%(u|0)|0)<<2)>>2]|0;S=+g[q+(s<<4)>>2];T=+g[q+(da<<4)>>2];V=+g[q+(s<<4)+4>>2];W=+g[q+(da<<4)+4>>2];Y=+g[q+(s<<4)+8>>2];Z=+g[q+(da<<4)+8>>2];U=+g[q+(ea<<4)>>2];X=+g[q+(ea<<4)+4>>2];ba=+g[q+(ea<<4)+8>>2];ca=+Q(+(((S-T)*(V-X)-(V-W)*(S-U))*((S-T)*(V-X)-(V-W)*(S-U))+(((V-W)*(Y-ba)-(Y-Z)*(V-X))*((V-W)*(Y-ba)-(Y-Z)*(V-X))+((Y-Z)*(S-U)-(S-T)*(Y-ba))*((Y-Z)*(S-U)-(S-T)*(Y-ba)))))*.5;B=B+(S+T+U)*.3333333432674408*ca;g[d+64>>2]=B;A=(V+W+X)*.3333333432674408*ca+A;g[d+68>>2]=A;z=ca*(Y+Z+ba)*.3333333432674408+z;g[d+72>>2]=z;R=R+ca}while((v|0)!=(u+ -1|0))}k=k+1|0}while((k|0)<(r|0))}else R=0.0}else{R=0.0;L=0;J=0;F=0;x=0}A=1.0/R;R=A*+g[d+64>>2];g[d+64>>2]=R;B=A*+g[d+68>>2];g[d+68>>2]=B;A=A*+g[d+72>>2];g[d+72>>2]=A;g[d+96>>2]=3.4028234663852886e+38;if((r|0)>0){n=c[d+36>>2]|0;S=3.4028234663852886e+38;k=0;while(1){z=+P(+(+g[n+(k*36|0)+32>>2]+(+g[n+(k*36|0)+20>>2]*R+ +g[n+(k*36|0)+24>>2]*B+ +g[n+(k*36|0)+28>>2]*A)));if(z<S)g[d+96>>2]=z;else z=S;k=k+1|0;if((k|0)>=(r|0))break;else S=z}}else z=3.4028234663852886e+38;k=c[d+8>>2]|0;if((k|0)>0){n=c[d+16>>2]|0;S=-3.4028234663852886e+38;T=-3.4028234663852886e+38;U=-3.4028234663852886e+38;R=3.4028234663852886e+38;B=3.4028234663852886e+38;A=3.4028234663852886e+38;q=0;do{ca=+g[n+(q<<4)>>2];R=ca<R?ca:R;S=ca>S?ca:S;ca=+g[n+(q<<4)+4>>2];B=ca<B?ca:B;T=ca>T?ca:T;ca=+g[n+(q<<4)+8>>2];A=ca<A?ca:A;U=ca>U?ca:U;q=q+1|0}while((q|0)<(k|0))}else{S=-3.4028234663852886e+38;T=-3.4028234663852886e+38;U=-3.4028234663852886e+38;R=3.4028234663852886e+38;B=3.4028234663852886e+38;A=3.4028234663852886e+38}g[d+100>>2]=S+R;g[d+104>>2]=T+B;g[d+108>>2]=A+U;g[d+112>>2]=0.0;R=S-R;B=T-B;A=U-A;g[d+116>>2]=R;g[d+120>>2]=B;g[d+124>>2]=A;g[d+128>>2]=0.0;z=z/1.7320507764816284;if(R<B)k=B<A?2:1;else k=R<A?2:0;n=d+(k<<2)+116|0;A=(+g[n>>2]*.5-z)*.0009765625;g[d+88>>2]=z;g[d+84>>2]=z;g[d+80>>2]=z;B=+g[n>>2]*.5;n=d+(k<<2)+80|0;g[n>>2]=B;q=0;while(1){if(MD(d)|0){n=470;break}B=B-A;g[n>>2]=B;q=q+1|0;if((q|0)>=1024){n=469;break}}n:do if((n|0)==469){g[d+88>>2]=z;g[d+84>>2]=z;g[d+80>>2]=z}else if((n|0)==470){z=(+g[d+96>>2]-z)*.0009765625;k=1<<k&3;R=+g[d+((1<<k&3)<<2)+80>>2];n=0;while(1){A=+g[d+(k<<2)+80>>2];g[d+(k<<2)+80>>2]=z+A;B=z+ +g[d+((1<<k&3)<<2)+80>>2];g[d+((1<<k&3)<<2)+80>>2]=B;n=n+1|0;if(!(MD(d)|0))break;if((n|0)>=1024)break n;else R=B}g[d+(k<<2)+80>>2]=A;g[d+((1<<k&3)<<2)+80>>2]=R}while(0);if(J){c[5006]=(c[5006]|0)+1;gF(c[J+ -4>>2]|0)}if(L){c[5006]=(c[5006]|0)+1;gF(c[L+ -4>>2]|0)}if(x){c[5006]=(c[5006]|0)+1;gF(c[x+ -4>>2]|0)}if(F){c[5006]=(c[5006]|0)+1;gF(c[F+ -4>>2]|0)}if(o){c[5006]=(c[5006]|0)+1;gF(c[o+ -4>>2]|0)}o=c[l>>2]|0;if((o|0)>0){q=0;do{k=p+(q*36|0)+4|0;n=p+(q*36|0)+12|0;r=c[n>>2]|0;d=p+(q*36|0)+16|0;if(r){if(a[d>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[r+ -4>>2]|0)}c[n>>2]=0}a[d>>0]=1;c[n>>2]=0;c[k>>2]=0;c[p+(q*36|0)+8>>2]=0;q=q+1|0}while((q|0)!=(o|0));p=c[f>>2]|0}if(p){if(a[h+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[p+ -4>>2]|0)}c[f>>2]=0}a[h+164>>0]=1;c[f>>2]=0;c[l>>2]=0;c[h+156>>2]=0;if(m){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}HA(h+196|0);if(!j){i=h;return 1}c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);i=h;return 1}function BA(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0,p=0.0,q=0.0,r=0;e=i;i=i+2048|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;h=+g[d>>2];j=+g[d+4>>2];k=+g[d+8>>2];if(h*h+j*j+k*k<9999999747378752.0e-20){h=1.0;j=0.0;k=0.0}else{p=1.0/+Q(+(h*h+j*j+k*k));h=h*p;j=j*p;k=k*p}if((Pb[c[(c[b>>2]|0)+96>>2]&127](b)|0)<=0){i=e;return}d=0;l=-999999984306749400.0;do{if(((Pb[c[(c[b>>2]|0)+96>>2]&127](b)|0)-d|0)<128){m=(Pb[c[(c[b>>2]|0)+96>>2]&127](b)|0)-d|0;if((m|0)>0)f=7;else{p=-3.4028234663852886e+38;o=-1}}else{m=128;f=7}if((f|0)==7){f=0;n=0;do{rc[c[(c[b>>2]|0)+108>>2]&127](b,n,e+(n<<4)|0);n=n+1|0}while((n|0)!=(m|0));n=0;p=-3.4028234663852886e+38;o=-1;do{q=h*+g[e+(n<<4)>>2]+j*+g[e+(n<<4)+4>>2]+k*+g[e+(n<<4)+8>>2];r=q>p;o=r?n:o;p=r?q:p;n=n+1|0}while((n|0)!=(m|0))}if(p>l){r=e+(o<<4)|0;c[a+0>>2]=c[r+0>>2];c[a+4>>2]=c[r+4>>2];c[a+8>>2]=c[r+8>>2];c[a+12>>2]=c[r+12>>2];l=p}d=d+128|0}while((d|0)<(Pb[c[(c[b>>2]|0)+96>>2]&127](b)|0));i=e;return}function CA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0;h=i;i=i+2048|0;if((e|0)>0)j=0;else{i=h;return}do{g[d+(j<<4)+12>>2]=-999999984306749400.0;j=j+1|0}while((j|0)!=(e|0));k=0;do{if((Pb[c[(c[a>>2]|0)+96>>2]&127](a)|0)>0){o=b+(k<<4)|0;p=b+(k<<4)+4|0;j=b+(k<<4)+8|0;m=d+(k<<4)+12|0;l=d+(k<<4)|0;n=0;do{if(((Pb[c[(c[a>>2]|0)+96>>2]&127](a)|0)-n|0)<128){q=(Pb[c[(c[a>>2]|0)+96>>2]&127](a)|0)-n|0;if((q|0)>0)f=8;else{w=-3.4028234663852886e+38;s=-1}}else{q=128;f=8}if((f|0)==8){f=0;s=0;do{rc[c[(c[a>>2]|0)+108>>2]&127](a,s,h+(s<<4)|0);s=s+1|0}while((s|0)!=(q|0));t=+g[o>>2];r=+g[p>>2];v=+g[j>>2];u=0;w=-3.4028234663852886e+38;s=-1;do{x=t*+g[h+(u<<4)>>2]+r*+g[h+(u<<4)+4>>2]+v*+g[h+(u<<4)+8>>2];y=x>w;s=y?u:s;w=y?x:w;u=u+1|0}while((u|0)!=(q|0))}if(w>+g[m>>2]){y=h+(s<<4)|0;c[l+0>>2]=c[y+0>>2];c[l+4>>2]=c[y+4>>2];c[l+8>>2]=c[y+8>>2];c[l+12>>2]=c[y+12>>2];g[m>>2]=w}n=n+128|0}while((n|0)<(Pb[c[(c[a>>2]|0)+96>>2]&127](a)|0))}k=k+1|0}while((k|0)!=(e|0));i=h;return}function DA(a,b,d){a=a|0;b=+b;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0;e=i;i=i+96|0;j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);g[e+32>>2]=1.0;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=1.0;c[e+56>>2]=0;c[e+60>>2]=0;c[e+64>>2]=0;c[e+68>>2]=0;g[e+72>>2]=1.0;k=e+76|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;vc[c[(c[a>>2]|0)+8>>2]&127](a,e+32|0,e+16|0,e);h=(j+(+g[e>>2]- +g[e+16>>2])*.5)*2.0;f=(j+(+g[e+4>>2]- +g[e+20>>2])*.5)*2.0;j=(j+(+g[e+8>>2]- +g[e+24>>2])*.5)*2.0;g[d>>2]=b*.0833333283662796*(f*f+j*j);g[d+4>>2]=b*.0833333283662796*(h*h+j*j);g[d+8>>2]=b*.0833333283662796*(h*h+f*f);g[d+12>>2]=0.0;i=e;return}function EA(b){b=b|0;var d=0,e=0,f=0,h=0.0;d=i;i=i+96|0;a[b+88>>0]=1;if((a[15960]|0)==0?(Ya(15960)|0)!=0:0){g[3966]=1.0;c[3967]=0;c[3968]=0;c[3969]=0;c[3970]=0;g[3971]=1.0;c[3972]=0;c[3973]=0;c[3974]=0;c[3975]=0;g[3976]=1.0;g[3977]=0.0;g[3978]=-1.0;c[3979]=0;c[3980]=0;c[3981]=0;c[3982]=0;g[3983]=-1.0;c[3984]=0;c[3985]=0;c[3986]=0;c[3987]=0;g[3988]=-1.0;g[3989]=0.0;bb(15960)}f=d+0|0;e=f+96|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(e|0));vc[c[(c[b>>2]|0)+76>>2]&127](b,15864,d,6);h=+g[b+44>>2];g[b+72>>2]=+g[d>>2]+h;g[b+56>>2]=+g[d+48>>2]-h;g[b+76>>2]=+g[d+20>>2]+h;g[b+60>>2]=+g[d+68>>2]-h;g[b+80>>2]=+g[d+40>>2]+h;g[b+64>>2]=+g[d+88>>2]-h;i=d;return}function FA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0;f=i;q=+$b[c[(c[a>>2]|0)+48>>2]&15](a);w=+g[a+72>>2];v=+g[a+56>>2];t=+g[a+76>>2];s=+g[a+60>>2];p=+g[a+80>>2];o=+g[a+64>>2];G=+g[b>>2];A=+P(+G);F=+g[b+4>>2];z=+P(+F);m=+g[b+8>>2];n=+P(+m);E=+g[b+16>>2];y=+P(+E);D=+g[b+20>>2];x=+P(+D);k=+g[b+24>>2];l=+P(+k);C=+g[b+32>>2];u=+P(+C);B=+g[b+36>>2];r=+P(+B);h=+g[b+40>>2];j=+P(+h);m=(w+v)*.5*G+(t+s)*.5*F+(p+o)*.5*m+ +g[b+48>>2];k=(w+v)*.5*E+(t+s)*.5*D+(p+o)*.5*k+ +g[b+52>>2];h=(w+v)*.5*C+(t+s)*.5*B+(p+o)*.5*h+ +g[b+56>>2];n=(q+(w-v)*.5)*A+(q+(t-s)*.5)*z+(q+(p-o)*.5)*n;l=(q+(w-v)*.5)*y+(q+(t-s)*.5)*x+(q+(p-o)*.5)*l;j=(q+(w-v)*.5)*u+(q+(t-s)*.5)*r+(q+(p-o)*.5)*j;g[d>>2]=m-n;g[d+4>>2]=k-l;g[d+8>>2]=h-j;g[d+12>>2]=0.0;g[e>>2]=n+m;g[e+4>>2]=l+k;g[e+8>>2]=j+h;g[e+12>>2]=0.0;i=f;return}function GA(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;if((c[b+8>>2]|0)>=(d|0)){i=e;return}if((d|0)!=0?(c[5004]=(c[5004]|0)+1,f=fF((d*36|3)+16|0)|0,(f|0)!=0):0){c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}else f=0;j=c[b+4>>2]|0;if((j|0)>0){h=0;do{g=f+(h*36|0)|0;if(g){n=c[b+12>>2]|0;IA(g,n+(h*36|0)|0);n=n+(h*36|0)+20|0;c[g+20>>2]=c[n+0>>2];c[g+24>>2]=c[n+4>>2];c[g+28>>2]=c[n+8>>2];c[g+32>>2]=c[n+12>>2]}h=h+1|0}while((h|0)!=(j|0));n=c[b+4>>2]|0;if((n|0)>0){m=0;do{l=c[b+12>>2]|0;h=l+(m*36|0)+4|0;j=l+(m*36|0)+12|0;g=c[j>>2]|0;k=l+(m*36|0)+16|0;if(g){if(a[k>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[g+ -4>>2]|0)}c[j>>2]=0}a[k>>0]=1;c[j>>2]=0;c[h>>2]=0;c[l+(m*36|0)+8>>2]=0;m=m+1|0}while((m|0)!=(n|0));g=b+12|0}else g=b+12|0}else g=b+12|0;h=c[g>>2]|0;if(h){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[g>>2]=0}a[b+16>>0]=1;c[g>>2]=f;c[b+8>>2]=d;i=e;return}function HA(b){b=b|0;var d=0,e=0;d=i;e=c[b+52>>2]|0;if(e){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;e=c[b+12>>2]|0;if(!e){a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;e=b+8|0;c[e>>2]=0;i=d;return}if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+12>>2]=0;a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;e=b+8|0;c[e>>2]=0;i=d;return}function IA(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;f=i;a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;e=c[d+4>>2]|0;if((e|0)<=0){c[b+4>>2]=e;i=f;return}c[5004]=(c[5004]|0)+1;g=fF((e<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}j=c[b+4>>2]|0;if((j|0)>0){h=0;do{k=g+(h<<2)|0;if(k)c[k>>2]=c[(c[b+12>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+12>>2]|0;if(h){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=g;c[b+8>>2]=e;h=0;do{j=g+(h<<2)|0;if(j)c[j>>2]=0;h=h+1|0}while((h|0)!=(e|0));c[b+4>>2]=e;b=0;do{h=g+(b<<2)|0;if(h)c[h>>2]=c[(c[d+12>>2]|0)+(b<<2)>>2];b=b+1|0}while((b|0)!=(e|0));i=f;return}function JA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0;f=i;i=i+32|0;n=c[a+12>>2]|0;h=+g[n+(((e+d|0)/2|0)*24|0)>>2];j=+g[n+(((e+d|0)/2|0)*24|0)+4>>2];k=+g[n+(((e+d|0)/2|0)*24|0)+8>>2];m=+g[n+(((e+d|0)/2|0)*24|0)+16>>2];l=c[n+(((e+d|0)/2|0)*24|0)+20>>2]|0;o=d;p=e;while(1){a:while(1){q=+g[n+(o*24|0)+16>>2];do if(q!=m){if(!(q<m))break a}else{s=+g[b>>2];v=+g[n+(o*24|0)>>2]-s;r=+g[b+4>>2];u=+g[n+(o*24|0)+4>>2]-r;q=+g[b+8>>2];t=+g[n+(o*24|0)+8>>2]-q;if(v*v+u*u+t*t!=(h-s)*(h-s)+(j-r)*(j-r)+(k-q)*(k-q))if(v*v+u*u+t*t<(h-s)*(h-s)+(j-r)*(j-r)+(k-q)*(k-q))break;else break a;else if((c[n+(o*24|0)+20>>2]|0)<(l|0))break;else break a}while(0);o=o+1|0}b:while(1){q=+g[n+(p*24|0)+16>>2];do if(m!=q){if(!(m<q))break b}else{r=+g[b>>2];t=+g[b+4>>2];q=+g[b+8>>2];s=+g[n+(p*24|0)>>2]-r;u=+g[n+(p*24|0)+4>>2]-t;v=+g[n+(p*24|0)+8>>2]-q;if((h-r)*(h-r)+(j-t)*(j-t)+(k-q)*(k-q)!=s*s+u*u+v*v)if((h-r)*(h-r)+(j-t)*(j-t)+(k-q)*(k-q)<s*s+u*u+v*v)break;else break b;else if((l|0)<(c[n+(p*24|0)+20>>2]|0))break;else break b}while(0);p=p+ -1|0}if((o|0)<=(p|0)){w=n+(o*24|0)|0;c[f+0>>2]=c[w+0>>2];c[f+4>>2]=c[w+4>>2];c[f+8>>2]=c[w+8>>2];c[f+12>>2]=c[w+12>>2];c[f+16>>2]=c[w+16>>2];c[f+20>>2]=c[w+20>>2];n=n+(p*24|0)|0;c[w+0>>2]=c[n+0>>2];c[w+4>>2]=c[n+4>>2];c[w+8>>2]=c[n+8>>2];c[w+12>>2]=c[n+12>>2];c[w+16>>2]=c[n+16>>2];c[w+20>>2]=c[n+20>>2];n=(c[a+12>>2]|0)+(p*24|0)|0;c[n+0>>2]=c[f+0>>2];c[n+4>>2]=c[f+4>>2];c[n+8>>2]=c[f+8>>2];c[n+12>>2]=c[f+12>>2];c[n+16>>2]=c[f+16>>2];c[n+20>>2]=c[f+20>>2];o=o+1|0;p=p+ -1|0}if((o|0)>(p|0))break;n=c[a+12>>2]|0}if((p|0)>(d|0))JA(a,b,d,p);if((o|0)>=(e|0)){i=f;return}JA(a,b,o,e);i=f;return}function KA(d,f,h){d=d|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0.0,G=0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0.0,O=0.0;j=i;i=i+128|0;m=c[d+56>>2]|0;if((h-f|0)==1){if(!(a[d+60>>0]|0)){E=(c[d+96>>2]|0)+(m<<6)+0|0;v=(c[d+76>>2]|0)+(f<<6)+0|0;r=E+64|0;do{c[E>>2]=c[v>>2];E=E+4|0;v=v+4|0}while((E|0)<(r|0))}else{L=(c[d+136>>2]|0)+(m<<4)|0;K=(c[d+116>>2]|0)+(f<<4)|0;c[L+0>>2]=c[K+0>>2];c[L+4>>2]=c[K+4>>2];c[L+8>>2]=c[K+8>>2];c[L+12>>2]=c[K+12>>2]}c[d+56>>2]=(c[d+56>>2]|0)+1;i=j;return}if((f|0)<(h|0)){o=(a[d+60>>0]|0)==0;t=0.0;u=0.0;A=0.0;p=f;do{if(o){L=c[d+76>>2]|0;y=+g[L+(p<<6)>>2];z=+g[L+(p<<6)+16>>2];w=+g[L+(p<<6)+4>>2];x=+g[L+(p<<6)+20>>2];B=+g[L+(p<<6)+8>>2];s=+g[L+(p<<6)+24>>2]}else{L=c[d+116>>2]|0;w=+g[d+36>>2];B=+g[d+40>>2];F=+g[d+44>>2];z=+g[d+4>>2];x=+g[d+8>>2];s=+g[d+12>>2];y=+(e[L+(p<<4)>>1]|0)/w+z;z=+(e[L+(p<<4)+6>>1]|0)/w+z;w=+(e[L+(p<<4)+2>>1]|0)/B+x;x=+(e[L+(p<<4)+8>>1]|0)/B+x;B=+(e[L+(p<<4)+4>>1]|0)/F+s;s=+(e[L+(p<<4)+10>>1]|0)/F+s}A=A+(z+y)*.5;t=t+(x+w)*.5;u=u+(s+B)*.5;p=p+1|0}while((p|0)!=(h|0));F=1.0/+(h-f|0);s=A*F;t=t*F;u=u*F;if(o){o=c[d+76>>2]|0;w=0.0;z=0.0;F=0.0;p=f;do{B=(+g[o+(p<<6)+16>>2]+ +g[o+(p<<6)>>2])*.5-s;C=(+g[o+(p<<6)+20>>2]+ +g[o+(p<<6)+4>>2])*.5-t;D=(+g[o+(p<<6)+24>>2]+ +g[o+(p<<6)+8>>2])*.5-u;w=w+B*B;z=z+C*C;F=F+D*D;p=p+1|0}while((p|0)!=(h|0));s=+(h-f|0)}else{p=c[d+116>>2]|0;y=+g[d+36>>2];B=+g[d+40>>2];D=+g[d+44>>2];A=+g[d+4>>2];C=+g[d+8>>2];x=+g[d+12>>2];w=0.0;z=0.0;F=0.0;o=f;do{O=(+(e[p+(o<<4)+6>>1]|0)/y+A+(+(e[p+(o<<4)>>1]|0)/y+A))*.5-s;N=(+(e[p+(o<<4)+8>>1]|0)/B+C+(+(e[p+(o<<4)+2>>1]|0)/B+C))*.5-t;M=(+(e[p+(o<<4)+10>>1]|0)/D+x+(+(e[p+(o<<4)+4>>1]|0)/D+x))*.5-u;w=w+O*O;z=z+N*N;F=F+M*M;o=o+1|0}while((o|0)!=(h|0));s=+(h-f|0)}}else{F=0.0;z=0.0;w=0.0;s=+(h-f|0)}u=1.0/(s+-1.0);s=w*u;t=z*u;u=F*u;if(s<t)o=t<u?2:1;else o=s<u?2:0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;if((f|0)<(h|0)){q=(a[d+60>>0]|0)==0;u=0.0;t=0.0;s=0.0;p=f;do{if(q){L=c[d+76>>2]|0;z=+g[L+(p<<6)>>2];y=+g[L+(p<<6)+16>>2];w=+g[L+(p<<6)+4>>2];A=+g[L+(p<<6)+20>>2];x=+g[L+(p<<6)+8>>2];B=+g[L+(p<<6)+24>>2]}else{L=c[d+116>>2]|0;w=+g[d+36>>2];x=+g[d+40>>2];O=+g[d+44>>2];y=+g[d+4>>2];A=+g[d+8>>2];B=+g[d+12>>2];z=+(e[L+(p<<4)>>1]|0)/w+y;y=+(e[L+(p<<4)+6>>1]|0)/w+y;w=+(e[L+(p<<4)+2>>1]|0)/x+A;A=+(e[L+(p<<4)+8>>1]|0)/x+A;x=+(e[L+(p<<4)+4>>1]|0)/O+B;B=+(e[L+(p<<4)+10>>1]|0)/O+B}u=u+(y+z)*.5;t=(A+w)*.5+t;s=(B+x)*.5+s;p=p+1|0}while((p|0)!=(h|0));g[j+16>>2]=u;g[j+20>>2]=t;g[j+24>>2]=s}else{u=0.0;t=0.0;s=0.0}g[j+16>>2]=1.0/+(h-f|0)*u;g[j+20>>2]=1.0/+(h-f|0)*t;g[j+24>>2]=1.0/+(h-f|0)*s;s=+g[j+16+(o<<2)>>2];if((f|0)<(h|0)){o=j+(o<<2)|0;q=f;p=f;do{r=(a[d+60>>0]|0)==0;if(r){L=c[d+76>>2]|0;x=+g[L+(q<<6)>>2];y=+g[L+(q<<6)+16>>2];u=+g[L+(q<<6)+4>>2];w=+g[L+(q<<6)+20>>2];t=+g[L+(q<<6)+8>>2];z=+g[L+(q<<6)+24>>2]}else{L=c[d+116>>2]|0;u=+g[d+36>>2];t=+g[d+40>>2];O=+g[d+44>>2];y=+g[d+4>>2];w=+g[d+8>>2];z=+g[d+12>>2];x=+(e[L+(q<<4)>>1]|0)/u+y;y=+(e[L+(q<<4)+6>>1]|0)/u+y;u=+(e[L+(q<<4)+2>>1]|0)/t+w;w=+(e[L+(q<<4)+8>>1]|0)/t+w;t=+(e[L+(q<<4)+4>>1]|0)/O+z;z=+(e[L+(q<<4)+10>>1]|0)/O+z}g[j>>2]=(y+x)*.5;g[j+4>>2]=(w+u)*.5;g[j+8>>2]=(z+t)*.5;g[j+12>>2]=0.0;if(+g[o>>2]>s){if(r){G=c[d+76>>2]|0;H=G+(q<<6)|0;E=j+32|0;v=H+0|0;r=E+64|0;do{c[E>>2]=c[v>>2];E=E+4|0;v=v+4|0}while((E|0)<(r|0));E=H+0|0;v=G+(p<<6)+0|0;r=E+64|0;do{c[E>>2]=c[v>>2];E=E+4|0;v=v+4|0}while((E|0)<(r|0));E=(c[d+76>>2]|0)+(p<<6)+0|0;v=j+32|0;r=E+64|0;do{c[E>>2]=c[v>>2];E=E+4|0;v=v+4|0}while((E|0)<(r|0))}else{K=c[d+116>>2]|0;L=K+(q<<4)|0;c[j+96>>2]=c[L+0>>2];c[j+100>>2]=c[L+4>>2];c[j+104>>2]=c[L+8>>2];c[j+108>>2]=c[L+12>>2];K=K+(p<<4)|0;c[L+0>>2]=c[K+0>>2];c[L+4>>2]=c[K+4>>2];c[L+8>>2]=c[K+8>>2];c[L+12>>2]=c[K+12>>2];L=(c[d+116>>2]|0)+(p<<4)|0;c[L+0>>2]=c[j+96>>2];c[L+4>>2]=c[j+100>>2];c[L+8>>2]=c[j+104>>2];c[L+12>>2]=c[j+108>>2]}p=p+1|0}q=q+1|0}while((q|0)!=(h|0))}else p=f;if(!((p|0)>(((h-f|0)/3|0)+f|0)?(p|0)<(h+ -1-((h-f|0)/3|0)|0):0))p=(h-f>>1)+f|0;o=c[d+56>>2]|0;do if(!(a[d+60>>0]|0)){q=(c[d+96>>2]|0)+(o<<6)|0;c[q+0>>2]=c[d+20>>2];c[q+4>>2]=c[d+24>>2];c[q+8>>2]=c[d+28>>2];c[q+12>>2]=c[d+32>>2];q=c[d+56>>2]|0;if(!(a[d+60>>0]|0)){q=(c[d+96>>2]|0)+(q<<6)+16|0;c[q+0>>2]=c[d+4>>2];c[q+4>>2]=c[d+8>>2];c[q+8>>2]=c[d+12>>2];c[q+12>>2]=c[d+16>>2];q=c[d+56>>2]|0;break}else{r=c[d+136>>2]|0;v=d+4|0;x=+g[d+8>>2];t=+g[d+12>>2];w=+g[d+36>>2];s=+g[d+40>>2];u=+g[d+44>>2];n=46;break}}else{r=c[d+136>>2]|0;x=+g[d+8>>2];t=+g[d+12>>2];w=+g[d+36>>2];s=+g[d+40>>2];N=(+g[d+24>>2]-x)*s;u=+g[d+44>>2];O=(+g[d+28>>2]-t)*u;b[r+(o<<4)>>1]=~~((+g[d+20>>2]- +g[d+4>>2])*w)&65534;b[r+(o<<4)+2>>1]=~~N&65534;b[r+(o<<4)+4>>1]=~~O&65534;q=o;v=d+4|0;n=46}while(0);if((n|0)==46){O=+g[v>>2];b[r+(q<<4)+6>>1]=~~((O-O)*w+1.0)&65535|1;b[r+(q<<4)+8>>1]=~~((x-x)*s+1.0)&65535|1;b[r+(q<<4)+10>>1]=~~((t-t)*u+1.0)&65535|1}if((f|0)<(h|0)){n=a[d+60>>0]|0;r=f;do{if(!(n<<24>>24)){v=c[d+76>>2]|0;A=+g[v+(r<<6)>>2];z=+g[v+(r<<6)+4>>2];y=+g[v+(r<<6)+8>>2];x=+g[v+(r<<6)+12>>2];w=+g[v+(r<<6)+16>>2];u=+g[v+(r<<6)+20>>2];t=+g[v+(r<<6)+24>>2];s=+g[v+(r<<6)+28>>2];v=c[d+96>>2]|0;E=v+(q<<6)|0;if(A<+g[E>>2])g[E>>2]=A;E=v+(q<<6)+4|0;if(z<+g[E>>2])g[E>>2]=z;E=v+(q<<6)+8|0;if(y<+g[E>>2])g[E>>2]=y;E=v+(q<<6)+12|0;if(x<+g[E>>2])g[E>>2]=x;E=v+(q<<6)+16|0;if(+g[E>>2]<w)g[E>>2]=w;E=v+(q<<6)+20|0;if(+g[E>>2]<u)g[E>>2]=u;E=v+(q<<6)+24|0;if(+g[E>>2]<t)g[E>>2]=t;v=v+(q<<6)+28|0;if(+g[v>>2]<s)g[v>>2]=s}else{v=c[d+116>>2]|0;w=+g[d+36>>2];A=+g[d+40>>2];F=+g[d+44>>2];x=+g[d+4>>2];B=+g[d+8>>2];M=+g[d+12>>2];y=+g[d+4>>2];C=+g[d+8>>2];N=+g[d+12>>2];z=+g[d+36>>2];D=+g[d+40>>2];O=+g[d+44>>2];K=~~((+(e[v+(r<<4)>>1]|0)/w+x-y)*z)&65534;I=~~((+(e[v+(r<<4)+2>>1]|0)/A+B-C)*D)&65534;G=~~((+(e[v+(r<<4)+4>>1]|0)/F+M-N)*O)&65534;J=(~~((+(e[v+(r<<4)+6>>1]|0)/w+x-y)*z+1.0)&65535|1)&65535;H=(~~((+(e[v+(r<<4)+8>>1]|0)/A+B-C)*D+1.0)&65535|1)&65535;v=(~~((+(e[v+(r<<4)+10>>1]|0)/F+M-N)*O+1.0)&65535|1)&65535;E=c[d+136>>2]|0;L=E+(q<<4)|0;if((e[L>>1]|0)>(K&65535))b[L>>1]=K;K=E+(q<<4)+6|0;if((e[K>>1]|0)<(J&65535))b[K>>1]=J;J=E+(q<<4)+2|0;if((e[J>>1]|0)>(I&65535))b[J>>1]=I;I=E+(q<<4)+8|0;if((e[I>>1]|0)<(H&65535))b[I>>1]=H;H=E+(q<<4)+4|0;if((e[H>>1]|0)>(G&65535))b[H>>1]=G;E=E+(q<<4)+10|0;if((e[E>>1]|0)<(v&65535))b[E>>1]=v}r=r+1|0}while((r|0)!=(h|0))}q=q+1|0;c[d+56>>2]=q;KA(d,f,p);f=c[d+56>>2]|0;KA(d,p,h);h=(c[d+56>>2]|0)-m|0;do if(a[d+60>>0]|0){if((h<<4|0)>2048){m=c[d+136>>2]|0;p=c[m+(q<<4)+12>>2]|0;p=(p|0)>-1?1:0-p|0;n=c[m+(f<<4)+12>>2]|0;n=(n|0)>-1?1:0-n|0;if((p<<4|0)<2049){r=c[d+152>>2]|0;if((r|0)==(c[d+156>>2]|0)?(l=(r|0)==0?1:r<<1,(r|0)<(l|0)):0){if(!l){v=0;G=r}else{c[5004]=(c[5004]|0)+1;v=fF(l<<5|19)|0;if(!v)v=0;else{c[(v+19&-16)+ -4>>2]=v;v=v+19&-16}G=c[d+152>>2]|0}if((G|0)>0){E=0;do{L=v+(E<<5)|0;K=(c[d+160>>2]|0)+(E<<5)|0;c[L+0>>2]=c[K+0>>2];c[L+4>>2]=c[K+4>>2];c[L+8>>2]=c[K+8>>2];c[L+12>>2]=c[K+12>>2];c[L+16>>2]=c[K+16>>2];c[L+20>>2]=c[K+20>>2];c[L+24>>2]=c[K+24>>2];c[L+28>>2]=c[K+28>>2];E=E+1|0}while((E|0)!=(G|0))}E=c[d+160>>2]|0;if(E){if(a[d+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[E+ -4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=v;c[d+156>>2]=l;l=c[d+152>>2]|0}else l=r;c[d+152>>2]=l+1;l=(c[d+160>>2]|0)+(r<<5)|0;c[l+0>>2]=c[j+96>>2];c[l+4>>2]=c[j+100>>2];c[l+8>>2]=c[j+104>>2];c[l+12>>2]=c[j+108>>2];c[l+16>>2]=c[j+112>>2];c[l+20>>2]=c[j+116>>2];c[l+24>>2]=c[j+120>>2];c[l+28>>2]=c[j+124>>2];l=c[d+160>>2]|0;b[l+(r<<5)>>1]=b[m+(q<<4)>>1]|0;b[l+(r<<5)+2>>1]=b[m+(q<<4)+2>>1]|0;b[l+(r<<5)+4>>1]=b[m+(q<<4)+4>>1]|0;b[l+(r<<5)+6>>1]=b[m+(q<<4)+6>>1]|0;b[l+(r<<5)+8>>1]=b[m+(q<<4)+8>>1]|0;b[l+(r<<5)+10>>1]=b[m+(q<<4)+10>>1]|0;c[l+(r<<5)+12>>2]=q;c[l+(r<<5)+16>>2]=p;l=d+152|0}else l=d+152|0;if((n<<4|0)<2049){p=c[l>>2]|0;if((p|0)==(c[d+156>>2]|0)?(k=(p|0)==0?1:p<<1,(p|0)<(k|0)):0){if(!k){q=0;v=p}else{c[5004]=(c[5004]|0)+1;q=fF(k<<5|19)|0;if(!q)q=0;else{c[(q+19&-16)+ -4>>2]=q;q=q+19&-16}v=c[l>>2]|0}if((v|0)>0){r=0;do{L=q+(r<<5)|0;K=(c[d+160>>2]|0)+(r<<5)|0;c[L+0>>2]=c[K+0>>2];c[L+4>>2]=c[K+4>>2];c[L+8>>2]=c[K+8>>2];c[L+12>>2]=c[K+12>>2];c[L+16>>2]=c[K+16>>2];c[L+20>>2]=c[K+20>>2];c[L+24>>2]=c[K+24>>2];c[L+28>>2]=c[K+28>>2];r=r+1|0}while((r|0)!=(v|0))}r=c[d+160>>2]|0;if(r){if(a[d+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[r+ -4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=q;c[d+156>>2]=k;k=c[l>>2]|0}else k=p;c[l>>2]=k+1;L=(c[d+160>>2]|0)+(p<<5)|0;c[L+0>>2]=c[j+32>>2];c[L+4>>2]=c[j+36>>2];c[L+8>>2]=c[j+40>>2];c[L+12>>2]=c[j+44>>2];c[L+16>>2]=c[j+48>>2];c[L+20>>2]=c[j+52>>2];c[L+24>>2]=c[j+56>>2];c[L+28>>2]=c[j+60>>2];L=c[d+160>>2]|0;b[L+(p<<5)>>1]=b[m+(f<<4)>>1]|0;b[L+(p<<5)+2>>1]=b[m+(f<<4)+2>>1]|0;b[L+(p<<5)+4>>1]=b[m+(f<<4)+4>>1]|0;b[L+(p<<5)+6>>1]=b[m+(f<<4)+6>>1]|0;b[L+(p<<5)+8>>1]=b[m+(f<<4)+8>>1]|0;b[L+(p<<5)+10>>1]=b[m+(f<<4)+10>>1]|0;c[L+(p<<5)+12>>2]=f;c[L+(p<<5)+16>>2]=n}c[d+168>>2]=c[l>>2];if(!(a[d+60>>0]|0))break;else d=d+136|0}else d=d+136|0;c[(c[d>>2]|0)+(o<<4)+12>>2]=0-h;i=j;return}while(0);c[(c[d+96>>2]|0)+(o<<6)+32>>2]=h;i=j;return}function LA(a){a=a|0;var b=0;b=i;MA(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function MA(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16080;e=c[b+160>>2]|0;if(e){if(a[b+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+160>>2]=0}a[b+164>>0]=1;c[b+160>>2]=0;c[b+152>>2]=0;c[b+156>>2]=0;e=c[b+136>>2]|0;if(e){if(a[b+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;e=c[b+116>>2]|0;if(e){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;e=c[b+96>>2]|0;if(e){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;e=c[b+76>>2]|0;if(!e){a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;e=b+72|0;c[e>>2]=0;i=d;return}if(a[b+80>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+76>>2]=0;a[b+80>>0]=1;c[b+76>>2]=0;c[b+68>>2]=0;e=b+72|0;c[e>>2]=0;i=d;return}function NA(a,b,d,f){a=a|0;b=b|0;d=d|0;f=f|0;var g=0,h=0,j=0;g=i;while(1){j=c[a+12>>2]|0;if(!(((e[f>>1]|0)>=(e[a>>1]|0)?(e[d>>1]|0)<=(e[a+6>>1]|0):0)&(e[d+4>>1]|0)<=(e[a+10>>1]|0)&(e[f+4>>1]|0)>=(e[a+4>>1]|0)&(e[d+2>>1]|0)<=(e[a+8>>1]|0)&(e[f+2>>1]|0)>=(e[a+2>>1]|0))){h=8;break}if((j|0)>-1)break;NA(a+16|0,b,d,f);j=c[a+28>>2]|0;if((j|0)>-1){a=a+32|0;continue}else{a=a+(1-j<<4)|0;continue}}if((h|0)==8){i=g;return}rc[c[(c[b>>2]|0)+8>>2]&127](b,j>>21,j&2097151);i=g;return}function OA(a,b,d,e,f,h,j,k){a=a|0;b=b|0;d=d|0;e=+e;f=+f;h=+h;j=j|0;k=k|0;var l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0,O=0.0,P=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0,X=0,Y=0;l=i;i=i+32|0;o=+g[d>>2];p=+g[d+4>>2];I=+g[d+8>>2];U=+g[j>>2];u=(o>e?e:o)+U;O=+g[j+4>>2];q=(p>f?f:p)+O;P=+g[j+8>>2];s=(I>h?h:I)+P;R=+g[k>>2];v=(o<e?e:o)+R;S=+g[k+4>>2];r=(p<f?f:p)+S;T=+g[k+8>>2];t=(I<h?h:I)+T;n=1.0/+Q(+((e-o)*(e-o)+(f-p)*(f-p)+(h-I)*(h-I)));if((e-o)*n==0.0)B=999999984306749400.0;else B=1.0/((e-o)*n);if((f-p)*n==0.0)A=999999984306749400.0;else A=1.0/((f-p)*n);if((h-I)*n==0.0)z=999999984306749400.0;else z=1.0/((h-I)*n);x=B<0.0&1;w=A<0.0&1;y=z<0.0&1;K=c[a+56>>2]|0;a:do if((K|0)>0){N=0;M=c[a+96>>2]|0;L=1;while(1){c[l+0>>2]=c[M+0>>2];c[l+4>>2]=c[M+4>>2];c[l+8>>2]=c[M+8>>2];c[l+12>>2]=c[M+12>>2];Y=M+16|0;c[l+16>>2]=c[Y+0>>2];c[l+20>>2]=c[Y+4>>2];c[l+24>>2]=c[Y+8>>2];c[l+28>>2]=c[Y+12>>2];g[l>>2]=+g[l>>2]-R;g[l+4>>2]=+g[l+4>>2]-S;g[l+8>>2]=+g[l+8>>2]-T;g[l+16>>2]=+g[l+16>>2]-U;g[l+20>>2]=+g[l+20>>2]-O;g[l+24>>2]=+g[l+24>>2]-P;if(!(u>+g[Y>>2])?!(v<+g[M>>2]):0)V=1;else V=0;if(!(!(s>+g[M+24>>2])?!(t<+g[M+8>>2]):0))V=0;if((((!(q>+g[M+20>>2])?!(r<+g[M+4>>2]|V^1):0)?(J=+g[d>>2],H=B*(+g[l+(x<<4)>>2]-J),J=B*(+g[l+((x^1)<<4)>>2]-J),m=+g[d+4>>2],G=A*(+g[l+(w<<4)+4>>2]-m),m=A*(+g[l+((w^1)<<4)+4>>2]-m),!(H>m|G>J)):0)?(F=G>H?G:H,D=m<J?m:J,C=+g[d+8>>2],E=z*(+g[l+(y<<4)+8>>2]-C),C=z*(+g[l+((y^1)<<4)+8>>2]-C),!(F>C|E>D)):0)?(E>F?E:F)<(h-I)*(h-I)*n+((e-o)*(e-o)*n+(f-p)*(f-p)*n):0){Y=(C<D?C:D)>0.0;W=c[M+32>>2]|0;if((W|0)==-1&Y){rc[c[(c[b>>2]|0)+8>>2]&127](b,c[M+36>>2]|0,c[M+40>>2]|0);K=c[a+56>>2]|0;V=24}else{X=(W|0)==-1;V=23}}else{W=c[M+32>>2]|0;X=(W|0)==-1;Y=0;V=23}if((V|0)==23){V=0;if(Y|X)V=24;else{N=W+N|0;M=M+(W<<6)|0}}if((V|0)==24){N=N+1|0;M=M+64|0}if((N|0)>=(K|0))break a;O=+g[j+4>>2];P=+g[j+8>>2];R=+g[k>>2];S=+g[k+4>>2];T=+g[k+8>>2];U=+g[j>>2];L=L+1|0}}else L=0;while(0);if((c[4028]|0)>=(L|0)){i=l;return}c[4028]=L;i=l;return}function PA(a,d,f,h,j,k,l,m,n){a=a|0;d=d|0;f=f|0;h=+h;j=+j;k=+k;l=l|0;m=m|0;n=n|0;var o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0.0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0;o=i;i=i+32|0;r=+g[f>>2];s=+g[f+4>>2];F=+g[f+8>>2];q=1.0/+Q(+((h-r)*(h-r)+(j-s)*(j-s)+(k-F)*(k-F)));if((h-r)*q==0.0)B=999999984306749400.0;else B=1.0/((h-r)*q);if((j-s)*q==0.0)C=999999984306749400.0;else C=1.0/((j-s)*q);if((k-F)*q==0.0)D=999999984306749400.0;else D=1.0/((k-F)*q);p=B<0.0&1;G=C<0.0&1;E=D<0.0&1;la=(r>h?h:r)+ +g[l>>2];ka=(s>j?j:s)+ +g[l+4>>2];ja=(F>k?k:F)+ +g[l+8>>2];ha=(r<h?h:r)+ +g[m>>2];da=(s<j?j:s)+ +g[m+4>>2];$=(F<k?k:F)+ +g[m+8>>2];ga=+g[a+4>>2];la=la<ga?ga:la;ca=+g[a+8>>2];ka=ka<ca?ca:ka;_=+g[a+12>>2];ja=ja<_?_:ja;ia=+g[a+20>>2];ea=+g[a+24>>2];aa=+g[a+28>>2];fa=+g[a+36>>2];ba=+g[a+40>>2];Z=+g[a+44>>2];I=~~(((ia<la?ia:la)-ga)*fa)&65534;L=~~(((ea<ka?ea:ka)-ca)*ba)&65534;J=~~(((aa<ja?aa:ja)-_)*Z)&65534;ha=ha<ga?ga:ha;da=da<ca?ca:da;$=$<_?_:$;H=(~~(((ia<ha?ia:ha)-ga)*fa+1.0)&65535|1)&65535;M=(~~(((ea<da?ea:da)-ca)*ba+1.0)&65535|1)&65535;K=(~~(((aa<$?aa:$)-_)*Z+1.0)&65535|1)&65535;if((n|0)>0){N=0;P=c[a+136>>2]|0;O=0;do{O=O+1|0;T=P+6|0;X=b[P>>1]|0;Y=P+10|0;V=b[P+4>>1]|0;U=P+8|0;W=b[P+2>>1]|0;R=P+12|0;S=(c[R>>2]|0)>-1;if(((((H&65535)>=(X&65535)?(I&65535)<=(e[T>>1]|0):0)&(J&65535)<=(e[Y>>1]|0)&(K&65535)>=(V&65535)&(L&65535)<=(e[U>>1]|0)&(M&65535)>=(W&65535)?(ha=+g[a+36>>2],ja=+g[a+40>>2],la=+g[a+44>>2],ia=+g[a+4>>2],ka=+g[a+8>>2],x=+g[a+12>>2],g[o+12>>2]=0.0,z=+(e[T>>1]|0)/ha+ia,y=+(e[U>>1]|0)/ja+ka,A=+(e[Y>>1]|0)/la+x,g[o+28>>2]=0.0,g[o>>2]=+(X&65535)/ha+ia- +g[m>>2],g[o+4>>2]=+(W&65535)/ja+ka- +g[m+4>>2],g[o+8>>2]=+(V&65535)/la+x- +g[m+8>>2],g[o+16>>2]=z- +g[l>>2],g[o+20>>2]=y- +g[l+4>>2],g[o+24>>2]=A- +g[l+8>>2],A=+g[f>>2],y=B*(+g[o+(p<<4)>>2]-A),A=B*(+g[o+((p^1)<<4)>>2]-A),z=+g[f+4>>2],x=C*(+g[o+(G<<4)+4>>2]-z),z=C*(+g[o+((G^1)<<4)+4>>2]-z),!(y>z|x>A)):0)?(w=x>y?x:y,u=z<A?z:A,t=+g[f+8>>2],v=D*(+g[o+(E<<4)+8>>2]-t),t=D*(+g[o+((E^1)<<4)+8>>2]-t),!(w>t|v>u)):0)?(v>w?v:w)<(k-F)*(k-F)*q+((h-r)*(h-r)*q+(j-s)*(j-s)*q):0){U=!((t<u?t:u)>0.0);if(U|S^1)T=15;else{T=c[R>>2]|0;rc[c[(c[d>>2]|0)+8>>2]&127](d,T>>21,T&2097151);T=16}}else{U=1;T=15}if((T|0)==15){T=0;if(S|U^1)T=16;else{Y=c[R>>2]|0;N=N-Y|0;P=P+(0-Y<<4)|0}}if((T|0)==16){N=N+1|0;P=P+16|0}}while((N|0)<(n|0))}else O=0;if((c[4028]|0)>=(O|0)){i=o;return}c[4028]=O;i=o;return}function QA(d,f,h,j){d=d|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;c[d+168>>2]=c[d+152>>2];c[f>>2]=16080;c[f+52>>2]=282;a[f+60>>0]=0;a[f+80>>0]=1;c[f+76>>2]=0;c[f+68>>2]=0;c[f+72>>2]=0;a[f+100>>0]=1;c[f+96>>2]=0;c[f+88>>2]=0;c[f+92>>2]=0;a[f+120>>0]=1;c[f+116>>2]=0;c[f+108>>2]=0;c[f+112>>2]=0;a[f+140>>0]=1;c[f+136>>2]=0;c[f+128>>2]=0;c[f+132>>2]=0;c[f+144>>2]=0;a[f+164>>0]=1;c[f+160>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+168>>2]=0;g[f+4>>2]=-3.4028234663852886e+38;g[f+8>>2]=-3.4028234663852886e+38;g[f+12>>2]=-3.4028234663852886e+38;g[f+16>>2]=0.0;g[f+20>>2]=3.4028234663852886e+38;g[f+24>>2]=3.4028234663852886e+38;g[f+28>>2]=3.4028234663852886e+38;g[f+32>>2]=0.0;k=c[d+56>>2]|0;if(j){c[f+56>>2]=oF(k|0)|0;a[f+4>>0]=a[d+7>>0]|0;a[f+5>>0]=a[d+6>>0]|0;a[f+6>>0]=a[d+5>>0]|0;a[f+7>>0]=a[d+4>>0]|0;a[f+8>>0]=a[d+11>>0]|0;a[f+9>>0]=a[d+10>>0]|0;a[f+10>>0]=a[d+9>>0]|0;a[f+11>>0]=a[d+8>>0]|0;a[f+12>>0]=a[d+15>>0]|0;a[f+13>>0]=a[d+14>>0]|0;a[f+14>>0]=a[d+13>>0]|0;a[f+15>>0]=a[d+12>>0]|0;a[f+16>>0]=a[d+19>>0]|0;a[f+17>>0]=a[d+18>>0]|0;a[f+18>>0]=a[d+17>>0]|0;a[f+19>>0]=a[d+16>>0]|0;a[f+20>>0]=a[d+23>>0]|0;a[f+21>>0]=a[d+22>>0]|0;a[f+22>>0]=a[d+21>>0]|0;a[f+23>>0]=a[d+20>>0]|0;a[f+24>>0]=a[d+27>>0]|0;a[f+25>>0]=a[d+26>>0]|0;a[f+26>>0]=a[d+25>>0]|0;a[f+27>>0]=a[d+24>>0]|0;a[f+28>>0]=a[d+31>>0]|0;a[f+29>>0]=a[d+30>>0]|0;a[f+30>>0]=a[d+29>>0]|0;a[f+31>>0]=a[d+28>>0]|0;a[f+32>>0]=a[d+35>>0]|0;a[f+33>>0]=a[d+34>>0]|0;a[f+34>>0]=a[d+33>>0]|0;a[f+35>>0]=a[d+32>>0]|0;a[f+36>>0]=a[d+39>>0]|0;a[f+37>>0]=a[d+38>>0]|0;a[f+38>>0]=a[d+37>>0]|0;a[f+39>>0]=a[d+36>>0]|0;a[f+40>>0]=a[d+43>>0]|0;a[f+41>>0]=a[d+42>>0]|0;a[f+42>>0]=a[d+41>>0]|0;a[f+43>>0]=a[d+40>>0]|0;a[f+44>>0]=a[d+47>>0]|0;a[f+45>>0]=a[d+46>>0]|0;a[f+46>>0]=a[d+45>>0]|0;a[f+47>>0]=a[d+44>>0]|0;a[f+48>>0]=a[d+51>>0]|0;a[f+49>>0]=a[d+50>>0]|0;a[f+50>>0]=a[d+49>>0]|0;a[f+51>>0]=a[d+48>>0]|0;c[f+144>>2]=oF(c[d+144>>2]|0)|0;k=oF(c[d+168>>2]|0)|0}else{c[f+56>>2]=k;c[f+4>>2]=c[d+4>>2];c[f+8>>2]=c[d+8>>2];c[f+12>>2]=c[d+12>>2];c[f+16>>2]=c[d+16>>2];c[f+20>>2]=c[d+20>>2];c[f+24>>2]=c[d+24>>2];c[f+28>>2]=c[d+28>>2];c[f+32>>2]=c[d+32>>2];c[f+36>>2]=c[d+36>>2];c[f+40>>2]=c[d+40>>2];c[f+44>>2]=c[d+44>>2];c[f+48>>2]=c[d+48>>2];c[f+144>>2]=c[d+144>>2];k=c[d+168>>2]|0}c[f+168>>2]=k;a[f+60>>0]=a[d+60>>0]|0;k=c[d+56>>2]|0;if(!(a[d+60>>0]|0)){l=c[f+96>>2]|0;if(l){if(a[f+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[f+96>>2]=0}c[f+88>>2]=0;c[f+92>>2]=0;c[f+96>>2]=0;a[f+100>>0]=0;c[f+96>>2]=f+172;c[f+88>>2]=k;c[f+92>>2]=k;if(j)if((k|0)>0){l=c[d+96>>2]|0;n=f+172|0;m=0;do{o=l+(m<<6)|0;q=n+(m<<6)|0;a[q>>0]=a[o+3>>0]|0;a[q+1>>0]=a[o+2>>0]|0;a[q+2>>0]=a[o+1>>0]|0;a[q+3>>0]=a[o>>0]|0;q=l+(m<<6)+4|0;o=n+(m<<6)+4|0;a[o>>0]=a[q+3>>0]|0;a[o+1>>0]=a[q+2>>0]|0;a[o+2>>0]=a[q+1>>0]|0;a[o+3>>0]=a[q>>0]|0;o=l+(m<<6)+8|0;q=n+(m<<6)+8|0;a[q>>0]=a[o+3>>0]|0;a[q+1>>0]=a[o+2>>0]|0;a[q+2>>0]=a[o+1>>0]|0;a[q+3>>0]=a[o>>0]|0;q=l+(m<<6)+12|0;n=n+(m<<6)+12|0;a[n>>0]=a[q+3>>0]|0;a[n+1>>0]=a[q+2>>0]|0;a[n+2>>0]=a[q+1>>0]|0;a[n+3>>0]=a[q>>0]|0;n=c[d+96>>2]|0;q=n+(m<<6)+16|0;o=c[f+96>>2]|0;p=o+(m<<6)+16|0;a[p>>0]=a[q+3>>0]|0;a[p+1>>0]=a[q+2>>0]|0;a[p+2>>0]=a[q+1>>0]|0;a[p+3>>0]=a[q>>0]|0;p=n+(m<<6)+20|0;q=o+(m<<6)+20|0;a[q>>0]=a[p+3>>0]|0;a[q+1>>0]=a[p+2>>0]|0;a[q+2>>0]=a[p+1>>0]|0;a[q+3>>0]=a[p>>0]|0;q=n+(m<<6)+24|0;p=o+(m<<6)+24|0;a[p>>0]=a[q+3>>0]|0;a[p+1>>0]=a[q+2>>0]|0;a[p+2>>0]=a[q+1>>0]|0;a[p+3>>0]=a[q>>0]|0;n=n+(m<<6)+28|0;o=o+(m<<6)+28|0;a[o>>0]=a[n+3>>0]|0;a[o+1>>0]=a[n+2>>0]|0;a[o+2>>0]=a[n+1>>0]|0;a[o+3>>0]=a[n>>0]|0;l=c[d+96>>2]|0;o=oF(c[l+(m<<6)+32>>2]|0)|0;n=c[f+96>>2]|0;c[n+(m<<6)+32>>2]=o;c[n+(m<<6)+36>>2]=oF(c[l+(m<<6)+36>>2]|0)|0;c[n+(m<<6)+40>>2]=oF(c[l+(m<<6)+40>>2]|0)|0;m=m+1|0}while((m|0)!=(k|0))}else n=f+172|0;else if((k|0)>0){n=f+172|0;l=c[d+96>>2]|0;m=0;do{n=n+(m<<6)|0;q=l+(m<<6)|0;c[n+0>>2]=c[q+0>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];c[n+12>>2]=c[q+12>>2];n=(c[f+96>>2]|0)+(m<<6)+16|0;q=(c[d+96>>2]|0)+(m<<6)+16|0;c[n+0>>2]=c[q+0>>2];c[n+4>>2]=c[q+4>>2];c[n+8>>2]=c[q+8>>2];c[n+12>>2]=c[q+12>>2];l=c[d+96>>2]|0;n=c[f+96>>2]|0;c[n+(m<<6)+32>>2]=c[l+(m<<6)+32>>2];c[n+(m<<6)+36>>2]=c[l+(m<<6)+36>>2];c[n+(m<<6)+40>>2]=c[l+(m<<6)+40>>2];m=m+1|0}while((m|0)!=(k|0))}else n=f+172|0;if(n){if(a[f+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[n+ -4>>2]|0)}c[f+96>>2]=0}c[f+88>>2]=0;c[f+92>>2]=0;c[f+96>>2]=0;a[f+100>>0]=0;k=k<<6}else{l=c[f+136>>2]|0;if(l){if(a[f+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[f+136>>2]=0}c[f+128>>2]=0;c[f+132>>2]=0;c[f+136>>2]=0;a[f+140>>0]=0;c[f+136>>2]=f+172;c[f+128>>2]=k;c[f+132>>2]=k;if(j){if((k|0)>0){l=c[d+136>>2]|0;m=0;do{q=e[l+(m<<4)>>1]|0;b[f+172+(m<<4)>>1]=q>>>8|q<<8;q=e[l+(m<<4)+2>>1]|0;b[f+172+(m<<4)+2>>1]=q>>>8|q<<8;q=e[l+(m<<4)+4>>1]|0;b[f+172+(m<<4)+4>>1]=q>>>8|q<<8;q=e[l+(m<<4)+6>>1]|0;b[f+172+(m<<4)+6>>1]=q>>>8|q<<8;q=e[l+(m<<4)+8>>1]|0;b[f+172+(m<<4)+8>>1]=q>>>8|q<<8;q=e[l+(m<<4)+10>>1]|0;b[f+172+(m<<4)+10>>1]=q>>>8|q<<8;c[f+172+(m<<4)+12>>2]=oF(c[l+(m<<4)+12>>2]|0)|0;m=m+1|0}while((m|0)!=(k|0))}}else if((k|0)>0){l=c[d+136>>2]|0;m=0;do{b[f+172+(m<<4)>>1]=b[l+(m<<4)>>1]|0;b[f+172+(m<<4)+2>>1]=b[l+(m<<4)+2>>1]|0;b[f+172+(m<<4)+4>>1]=b[l+(m<<4)+4>>1]|0;b[f+172+(m<<4)+6>>1]=b[l+(m<<4)+6>>1]|0;b[f+172+(m<<4)+8>>1]=b[l+(m<<4)+8>>1]|0;b[f+172+(m<<4)+10>>1]=b[l+(m<<4)+10>>1]|0;c[f+172+(m<<4)+12>>2]=c[l+(m<<4)+12>>2];m=m+1|0}while((m|0)!=(k|0))}c[f+128>>2]=0;c[f+132>>2]=0;c[f+136>>2]=0;a[f+140>>0]=0;k=k<<4}k=f+(k+172)|0;m=c[d+168>>2]|0;l=c[f+160>>2]|0;if(l){if(a[f+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[f+160>>2]=0}c[f+152>>2]=0;c[f+156>>2]=0;c[f+160>>2]=0;a[f+164>>0]=0;c[f+160>>2]=k;c[f+152>>2]=m;c[f+156>>2]=m;l=(c[d+168>>2]|0)>0;if(j){if(!l){c[f>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+160>>2]=0;a[f+164>>0]=0;i=h;return 1}l=c[d+160>>2]|0;j=0;do{q=e[l+(j<<5)>>1]|0;b[k+(j<<5)>>1]=q>>>8|q<<8;q=e[l+(j<<5)+2>>1]|0;b[k+(j<<5)+2>>1]=q>>>8|q<<8;q=e[l+(j<<5)+4>>1]|0;b[k+(j<<5)+4>>1]=q>>>8|q<<8;q=e[l+(j<<5)+6>>1]|0;b[k+(j<<5)+6>>1]=q>>>8|q<<8;q=e[l+(j<<5)+8>>1]|0;b[k+(j<<5)+8>>1]=q>>>8|q<<8;q=e[l+(j<<5)+10>>1]|0;b[k+(j<<5)+10>>1]=q>>>8|q<<8;c[k+(j<<5)+12>>2]=oF(c[l+(j<<5)+12>>2]|0)|0;c[k+(j<<5)+16>>2]=oF(c[l+(j<<5)+16>>2]|0)|0;j=j+1|0}while((j|0)<(c[d+168>>2]|0));c[f>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+160>>2]=0;a[f+164>>0]=0;i=h;return 1}else{if(!l){c[f>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+160>>2]=0;a[f+164>>0]=0;i=h;return 1}j=c[d+160>>2]|0;l=0;do{b[k+(l<<5)>>1]=b[j+(l<<5)>>1]|0;b[k+(l<<5)+2>>1]=b[j+(l<<5)+2>>1]|0;b[k+(l<<5)+4>>1]=b[j+(l<<5)+4>>1]|0;b[k+(l<<5)+6>>1]=b[j+(l<<5)+6>>1]|0;b[k+(l<<5)+8>>1]=b[j+(l<<5)+8>>1]|0;b[k+(l<<5)+10>>1]=b[j+(l<<5)+10>>1]|0;c[k+(l<<5)+12>>2]=c[j+(l<<5)+12>>2];c[k+(l<<5)+16>>2]=c[j+(l<<5)+16>>2];c[k+(l<<5)+20>>2]=0;c[k+(l<<5)+24>>2]=0;c[k+(l<<5)+28>>2]=0;l=l+1|0}while((l|0)<(c[d+168>>2]|0));c[f>>2]=0;c[f+152>>2]=0;c[f+156>>2]=0;c[f+160>>2]=0;a[f+164>>0]=0;i=h;return 1}return 0}function RA(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=i;i=i+112|0;g[d+20>>2]=+g[e+16>>2];g[d+24>>2]=+g[e+20>>2];g[d+28>>2]=+g[e+24>>2];g[d+32>>2]=+g[e+28>>2];g[d+4>>2]=+g[e>>2];g[d+8>>2]=+g[e+4>>2];g[d+12>>2]=+g[e+8>>2];g[d+16>>2]=+g[e+12>>2];g[d+36>>2]=+g[e+32>>2];g[d+40>>2]=+g[e+36>>2];g[d+44>>2]=+g[e+40>>2];g[d+48>>2]=+g[e+44>>2];c[d+56>>2]=c[e+48>>2];a[d+60>>0]=(c[e+52>>2]|0)!=0&1;h=c[e+56>>2]|0;l=f+48|0;m=l+64|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0));j=c[d+88>>2]|0;if((j|0)<(h|0)){if((c[d+92>>2]|0)<(h|0)){if(!h){n=0;o=j}else{c[5004]=(c[5004]|0)+1;k=fF(h<<6|19)|0;if(!k)n=0;else{c[(k+19&-16)+ -4>>2]=k;n=k+19&-16}o=c[d+88>>2]|0}if((o|0)>0){p=0;do{l=n+(p<<6)+0|0;k=(c[d+96>>2]|0)+(p<<6)+0|0;m=l+64|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));p=p+1|0}while((p|0)!=(o|0))}k=c[d+96>>2]|0;if(k){if(a[d+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=n;c[d+92>>2]=h;n=d+96|0}else n=d+96|0;do{l=(c[n>>2]|0)+(j<<6)+0|0;k=f+48|0;m=l+64|0;do{c[l>>2]=c[k>>2];l=l+4|0;k=k+4|0}while((l|0)<(m|0));j=j+1|0}while((j|0)!=(h|0))}c[d+88>>2]=h;if((h|0)>0){l=c[d+96>>2]|0;j=0;k=c[e+64>>2]|0;while(1){g[l+(j<<6)+16>>2]=+g[k+16>>2];g[l+(j<<6)+20>>2]=+g[k+20>>2];g[l+(j<<6)+24>>2]=+g[k+24>>2];g[l+(j<<6)+28>>2]=+g[k+28>>2];g[l+(j<<6)>>2]=+g[k>>2];g[l+(j<<6)+4>>2]=+g[k+4>>2];g[l+(j<<6)+8>>2]=+g[k+8>>2];g[l+(j<<6)+12>>2]=+g[k+12>>2];c[l+(j<<6)+32>>2]=c[k+32>>2];c[l+(j<<6)+36>>2]=c[k+36>>2];c[l+(j<<6)+40>>2]=c[k+40>>2];j=j+1|0;if((j|0)==(h|0))break;else k=k+48|0}}h=c[e+60>>2]|0;c[f+32>>2]=0;c[f+36>>2]=0;c[f+40>>2]=0;c[f+44>>2]=0;j=c[d+128>>2]|0;if((j|0)<(h|0)){if((c[d+132>>2]|0)<(h|0)){if(!h){k=0;l=j}else{c[5004]=(c[5004]|0)+1;k=fF((h<<4|3)+16|0)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}l=c[d+128>>2]|0}if((l|0)>0){m=0;do{p=k+(m<<4)|0;o=(c[d+136>>2]|0)+(m<<4)|0;c[p+0>>2]=c[o+0>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];c[p+12>>2]=c[o+12>>2];m=m+1|0}while((m|0)!=(l|0))}l=c[d+136>>2]|0;if(l){if(a[d+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=k;c[d+132>>2]=h;k=d+136|0}else k=d+136|0;do{p=(c[k>>2]|0)+(j<<4)|0;c[p+0>>2]=c[f+32>>2];c[p+4>>2]=c[f+36>>2];c[p+8>>2]=c[f+40>>2];c[p+12>>2]=c[f+44>>2];j=j+1|0}while((j|0)!=(h|0))}c[d+128>>2]=h;if((h|0)>0){k=c[d+136>>2]|0;j=0;l=c[e+68>>2]|0;while(1){c[k+(j<<4)+12>>2]=c[l+12>>2];b[k+(j<<4)+6>>1]=b[l+6>>1]|0;b[k+(j<<4)+8>>1]=b[l+8>>1]|0;b[k+(j<<4)+10>>1]=b[l+10>>1]|0;b[k+(j<<4)>>1]=b[l>>1]|0;b[k+(j<<4)+2>>1]=b[l+2>>1]|0;b[k+(j<<4)+4>>1]=b[l+4>>1]|0;j=j+1|0;if((j|0)==(h|0))break;else l=l+16|0}}c[d+144>>2]=c[e+76>>2];h=c[e+80>>2]|0;j=c[d+152>>2]|0;if((j|0)<(h|0)){if((c[d+156>>2]|0)<(h|0)){if(!h){k=0;l=j}else{c[5004]=(c[5004]|0)+1;k=fF(h<<5|19)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}l=c[d+152>>2]|0}if((l|0)>0){m=0;do{p=k+(m<<5)|0;o=(c[d+160>>2]|0)+(m<<5)|0;c[p+0>>2]=c[o+0>>2];c[p+4>>2]=c[o+4>>2];c[p+8>>2]=c[o+8>>2];c[p+12>>2]=c[o+12>>2];c[p+16>>2]=c[o+16>>2];c[p+20>>2]=c[o+20>>2];c[p+24>>2]=c[o+24>>2];c[p+28>>2]=c[o+28>>2];m=m+1|0}while((m|0)!=(l|0))}l=c[d+160>>2]|0;if(l){if(a[d+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=k;c[d+156>>2]=h;k=d+160|0}else k=d+160|0;do{p=(c[k>>2]|0)+(j<<5)|0;c[p+0>>2]=c[f+0>>2];c[p+4>>2]=c[f+4>>2];c[p+8>>2]=c[f+8>>2];c[p+12>>2]=c[f+12>>2];c[p+16>>2]=c[f+16>>2];c[p+20>>2]=c[f+20>>2];c[p+24>>2]=c[f+24>>2];c[p+28>>2]=c[f+28>>2];j=j+1|0}while((j|0)!=(h|0))}c[d+152>>2]=h;if((h|0)<=0){i=f;return}j=c[d+160>>2]|0;d=0;e=c[e+72>>2]|0;while(1){b[j+(d<<5)+6>>1]=b[e+14>>1]|0;b[j+(d<<5)+8>>1]=b[e+16>>1]|0;b[j+(d<<5)+10>>1]=b[e+18>>1]|0;b[j+(d<<5)>>1]=b[e+8>>1]|0;b[j+(d<<5)+2>>1]=b[e+10>>1]|0;b[j+(d<<5)+4>>1]=b[e+12>>1]|0;c[j+(d<<5)+12>>2]=c[e>>2];c[j+(d<<5)+16>>2]=c[e+4>>2];d=d+1|0;if((d|0)==(h|0))break;else e=e+20|0}i=f;return}function SA(d,e){d=d|0;e=e|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+112|0;g[d+20>>2]=+h[e+32>>3];g[d+24>>2]=+h[e+40>>3];g[d+28>>2]=+h[e+48>>3];g[d+32>>2]=+h[e+56>>3];g[d+4>>2]=+h[e>>3];g[d+8>>2]=+h[e+8>>3];g[d+12>>2]=+h[e+16>>3];g[d+16>>2]=+h[e+24>>3];g[d+36>>2]=+h[e+64>>3];g[d+40>>2]=+h[e+72>>3];g[d+44>>2]=+h[e+80>>3];g[d+48>>2]=+h[e+88>>3];c[d+56>>2]=c[e+96>>2];a[d+60>>0]=(c[e+100>>2]|0)!=0&1;j=c[e+104>>2]|0;m=f+48|0;n=m+64|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(n|0));k=c[d+88>>2]|0;if((k|0)<(j|0)){if((c[d+92>>2]|0)<(j|0)){if(!j){o=0;p=k}else{c[5004]=(c[5004]|0)+1;l=fF(j<<6|19)|0;if(!l)o=0;else{c[(l+19&-16)+ -4>>2]=l;o=l+19&-16}p=c[d+88>>2]|0}if((p|0)>0){q=0;do{m=o+(q<<6)+0|0;l=(c[d+96>>2]|0)+(q<<6)+0|0;n=m+64|0;do{c[m>>2]=c[l>>2];m=m+4|0;l=l+4|0}while((m|0)<(n|0));q=q+1|0}while((q|0)!=(p|0))}l=c[d+96>>2]|0;if(l){if(a[d+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[d+96>>2]=0}a[d+100>>0]=1;c[d+96>>2]=o;c[d+92>>2]=j;o=d+96|0}else o=d+96|0;do{m=(c[o>>2]|0)+(k<<6)+0|0;l=f+48|0;n=m+64|0;do{c[m>>2]=c[l>>2];m=m+4|0;l=l+4|0}while((m|0)<(n|0));k=k+1|0}while((k|0)!=(j|0))}c[d+88>>2]=j;if((j|0)>0){m=c[d+96>>2]|0;k=0;l=c[e+112>>2]|0;while(1){g[m+(k<<6)+16>>2]=+h[l+32>>3];g[m+(k<<6)+20>>2]=+h[l+40>>3];g[m+(k<<6)+24>>2]=+h[l+48>>3];g[m+(k<<6)+28>>2]=+h[l+56>>3];g[m+(k<<6)>>2]=+h[l>>3];g[m+(k<<6)+4>>2]=+h[l+8>>3];g[m+(k<<6)+8>>2]=+h[l+16>>3];g[m+(k<<6)+12>>2]=+h[l+24>>3];c[m+(k<<6)+32>>2]=c[l+64>>2];c[m+(k<<6)+36>>2]=c[l+68>>2];c[m+(k<<6)+40>>2]=c[l+72>>2];k=k+1|0;if((k|0)==(j|0))break;else l=l+80|0}}j=c[e+108>>2]|0;c[f+32>>2]=0;c[f+36>>2]=0;c[f+40>>2]=0;c[f+44>>2]=0;k=c[d+128>>2]|0;if((k|0)<(j|0)){if((c[d+132>>2]|0)<(j|0)){if(!j){l=0;m=k}else{c[5004]=(c[5004]|0)+1;l=fF((j<<4|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}m=c[d+128>>2]|0}if((m|0)>0){n=0;do{q=l+(n<<4)|0;p=(c[d+136>>2]|0)+(n<<4)|0;c[q+0>>2]=c[p+0>>2];c[q+4>>2]=c[p+4>>2];c[q+8>>2]=c[p+8>>2];c[q+12>>2]=c[p+12>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[d+136>>2]|0;if(m){if(a[d+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=l;c[d+132>>2]=j;l=d+136|0}else l=d+136|0;do{q=(c[l>>2]|0)+(k<<4)|0;c[q+0>>2]=c[f+32>>2];c[q+4>>2]=c[f+36>>2];c[q+8>>2]=c[f+40>>2];c[q+12>>2]=c[f+44>>2];k=k+1|0}while((k|0)!=(j|0))}c[d+128>>2]=j;if((j|0)>0){l=c[d+136>>2]|0;k=0;m=c[e+116>>2]|0;while(1){c[l+(k<<4)+12>>2]=c[m+12>>2];b[l+(k<<4)+6>>1]=b[m+6>>1]|0;b[l+(k<<4)+8>>1]=b[m+8>>1]|0;b[l+(k<<4)+10>>1]=b[m+10>>1]|0;b[l+(k<<4)>>1]=b[m>>1]|0;b[l+(k<<4)+2>>1]=b[m+2>>1]|0;b[l+(k<<4)+4>>1]=b[m+4>>1]|0;k=k+1|0;if((k|0)==(j|0))break;else m=m+16|0}}c[d+144>>2]=c[e+120>>2];j=c[e+124>>2]|0;k=c[d+152>>2]|0;if((k|0)<(j|0)){if((c[d+156>>2]|0)<(j|0)){if(!j){l=0;m=k}else{c[5004]=(c[5004]|0)+1;l=fF(j<<5|19)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}m=c[d+152>>2]|0}if((m|0)>0){n=0;do{q=l+(n<<5)|0;p=(c[d+160>>2]|0)+(n<<5)|0;c[q+0>>2]=c[p+0>>2];c[q+4>>2]=c[p+4>>2];c[q+8>>2]=c[p+8>>2];c[q+12>>2]=c[p+12>>2];c[q+16>>2]=c[p+16>>2];c[q+20>>2]=c[p+20>>2];c[q+24>>2]=c[p+24>>2];c[q+28>>2]=c[p+28>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[d+160>>2]|0;if(m){if(a[d+164>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[d+160>>2]=0}a[d+164>>0]=1;c[d+160>>2]=l;c[d+156>>2]=j;l=d+160|0}else l=d+160|0;do{q=(c[l>>2]|0)+(k<<5)|0;c[q+0>>2]=c[f+0>>2];c[q+4>>2]=c[f+4>>2];c[q+8>>2]=c[f+8>>2];c[q+12>>2]=c[f+12>>2];c[q+16>>2]=c[f+16>>2];c[q+20>>2]=c[f+20>>2];c[q+24>>2]=c[f+24>>2];c[q+28>>2]=c[f+28>>2];k=k+1|0}while((k|0)!=(j|0))}c[d+152>>2]=j;if((j|0)<=0){i=f;return}k=c[d+160>>2]|0;d=0;e=c[e+128>>2]|0;while(1){b[k+(d<<5)+6>>1]=b[e+14>>1]|0;b[k+(d<<5)+8>>1]=b[e+16>>1]|0;b[k+(d<<5)+10>>1]=b[e+18>>1]|0;b[k+(d<<5)>>1]=b[e+8>>1]|0;b[k+(d<<5)+2>>1]=b[e+10>>1]|0;b[k+(d<<5)+4>>1]=b[e+12>>1]|0;c[k+(d<<5)+12>>2]=c[e>>2];c[k+(d<<5)+16>>2]=c[e+4>>2];d=d+1|0;if((d|0)==(j|0))break;else e=e+20|0}i=f;return}function TA(a,e,f){a=a|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;g[e+16>>2]=+g[a+20>>2];g[e+20>>2]=+g[a+24>>2];g[e+24>>2]=+g[a+28>>2];g[e+28>>2]=+g[a+32>>2];g[e>>2]=+g[a+4>>2];g[e+4>>2]=+g[a+8>>2];g[e+8>>2]=+g[a+12>>2];g[e+12>>2]=+g[a+16>>2];g[e+32>>2]=+g[a+36>>2];g[e+36>>2]=+g[a+40>>2];g[e+40>>2]=+g[a+44>>2];g[e+44>>2]=+g[a+48>>2];c[e+48>>2]=c[a+56>>2];c[e+52>>2]=d[a+60>>0];c[e+56>>2]=c[a+88>>2];if(c[a+88>>2]|0){n=gc[c[(c[f>>2]|0)+28>>2]&31](f,c[a+96>>2]|0)|0;c[e+64>>2]=n;if(n){n=c[a+88>>2]|0;j=Yb[c[(c[f>>2]|0)+16>>2]&31](f,48,n)|0;if((n|0)>0){k=c[a+96>>2]|0;m=0;l=c[j+8>>2]|0;while(1){g[l+16>>2]=+g[k+(m<<6)+16>>2];g[l+20>>2]=+g[k+(m<<6)+20>>2];g[l+24>>2]=+g[k+(m<<6)+24>>2];g[l+28>>2]=+g[k+(m<<6)+28>>2];g[l>>2]=+g[k+(m<<6)>>2];g[l+4>>2]=+g[k+(m<<6)+4>>2];g[l+8>>2]=+g[k+(m<<6)+8>>2];g[l+12>>2]=+g[k+(m<<6)+12>>2];c[l+32>>2]=c[k+(m<<6)+32>>2];c[l+36>>2]=c[k+(m<<6)+36>>2];c[l+40>>2]=c[k+(m<<6)+40>>2];m=m+1|0;if((m|0)==(n|0))break;else l=l+48|0}}else k=c[a+96>>2]|0;Jb[c[(c[f>>2]|0)+20>>2]&31](f,j,16120,1497453121,k)}}else c[e+64>>2]=0;c[e+60>>2]=c[a+128>>2];if(c[a+128>>2]|0){n=gc[c[(c[f>>2]|0)+28>>2]&31](f,c[a+136>>2]|0)|0;c[e+68>>2]=n;if(n){k=c[a+128>>2]|0;j=Yb[c[(c[f>>2]|0)+16>>2]&31](f,16,k)|0;if((k|0)>0){l=c[a+136>>2]|0;n=0;m=c[j+8>>2]|0;while(1){c[m+12>>2]=c[l+(n<<4)+12>>2];b[m+6>>1]=b[l+(n<<4)+6>>1]|0;b[m+8>>1]=b[l+(n<<4)+8>>1]|0;b[m+10>>1]=b[l+(n<<4)+10>>1]|0;b[m>>1]=b[l+(n<<4)>>1]|0;b[m+2>>1]=b[l+(n<<4)+2>>1]|0;b[m+4>>1]=b[l+(n<<4)+4>>1]|0;n=n+1|0;if((n|0)==(k|0))break;else m=m+16|0}}else l=c[a+136>>2]|0;Jb[c[(c[f>>2]|0)+20>>2]&31](f,j,16144,1497453121,l)}}else c[e+68>>2]=0;c[e+76>>2]=c[a+144>>2];c[e+80>>2]=c[a+152>>2];if(!(c[a+152>>2]|0)){c[e+72>>2]=0;i=h;return 16192}n=gc[c[(c[f>>2]|0)+28>>2]&31](f,c[a+160>>2]|0)|0;c[e+72>>2]=n;if(!n){i=h;return 16192}j=c[a+152>>2]|0;e=Yb[c[(c[f>>2]|0)+16>>2]&31](f,20,j)|0;if((j|0)>0){a=c[a+160>>2]|0;l=0;k=c[e+8>>2]|0;while(1){b[k+14>>1]=b[a+(l<<5)+6>>1]|0;b[k+16>>1]=b[a+(l<<5)+8>>1]|0;b[k+18>>1]=b[a+(l<<5)+10>>1]|0;b[k+8>>1]=b[a+(l<<5)>>1]|0;b[k+10>>1]=b[a+(l<<5)+2>>1]|0;b[k+12>>1]=b[a+(l<<5)+4>>1]|0;c[k>>2]=c[a+(l<<5)+12>>2];c[k+4>>2]=c[a+(l<<5)+16>>2];l=l+1|0;if((l|0)==(j|0))break;else k=k+20|0}}else a=c[a+160>>2]|0;Jb[c[(c[f>>2]|0)+20>>2]&31](f,e,16168,1497453121,a);i=h;return 16192}function UA(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;f=i;i=i+32|0;C=+g[b+16>>2];s=+g[b>>2];B=+g[b+20>>2];u=+g[b+4>>2];y=+g[b+24>>2];x=+g[b+8>>2];v=+g[b+32>>2];o=+g[b+36>>2];p=+g[b+40>>2];m=(B-u)*(p-x)-(y-x)*(o-u);k=(y-x)*(v-s)-(C-s)*(p-x);l=(C-s)*(o-u)-(B-u)*(v-s);g[f+16>>2]=m;g[f+20>>2]=k;g[f+24>>2]=l;g[f+28>>2]=0.0;z=+g[a+4>>2];w=+g[a+8>>2];q=+g[a+12>>2];h=m*z+k*w+l*q-(s*m+u*k+x*l);A=+g[a+20>>2];t=+g[a+24>>2];r=+g[a+28>>2];if(h*(m*A+k*t+l*r-(s*m+u*k+x*l))>=0.0){i=f;return}b=c[a+36>>2]|0;if(!((b&1|0)==0|!(h<=0.0))){i=f;return}j=h/(h-(m*A+k*t+l*r-(s*m+u*k+x*l)));if(!(j<+g[a+40>>2])){i=f;return}n=(m*m+k*k+l*l)*-9999999747378752.0e-20;s=s-(A*j+z*(1.0-j));u=u-(t*j+w*(1.0-j));x=x-(r*j+q*(1.0-j));C=C-(A*j+z*(1.0-j));B=B-(t*j+w*(1.0-j));y=y-(r*j+q*(1.0-j));if(!(l*(s*B-u*C)+(m*(u*y-x*B)+k*(x*C-s*y))>=n)){i=f;return}v=v-(A*j+z*(1.0-j));o=o-(t*j+w*(1.0-j));p=p-(r*j+q*(1.0-j));if(!(l*(C*o-B*v)+(m*(B*p-y*o)+k*(y*v-C*p))>=n)){i=f;return}if(!(l*(u*v-s*o)+(m*(x*o-u*p)+k*(s*p-x*v))>=n)){i=f;return}n=1.0/+Q(+(m*m+k*k+l*l));g[f+16>>2]=m*n;g[f+20>>2]=k*n;g[f+24>>2]=l*n;D=c[(c[a>>2]|0)+12>>2]|0;if((b&2|0)!=0|!(h<=0.0)){g[a+40>>2]=+nc[D&3](a,f+16|0,j,d,e);i=f;return}else{g[f>>2]=-(m*n);g[f+4>>2]=-(k*n);g[f+8>>2]=-(l*n);g[f+12>>2]=0.0;g[a+40>>2]=+nc[D&3](a,f,j,d,e);i=f;return}}function VA(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;h=i;i=i+672|0;c[h+576>>2]=0;g[h+580>>2]=1.0;g[h+584>>2]=1.0;g[h+588>>2]=1.0;g[h+592>>2]=0.0;c[h+620>>2]=0;c[h+568>>2]=16376;c[h+572>>2]=1;c[h+624>>2]=c[d+0>>2];c[h+628>>2]=c[d+4>>2];c[h+632>>2]=c[d+8>>2];c[h+636>>2]=c[d+12>>2];c[h+640>>2]=c[d+16>>2];c[h+644>>2]=c[d+20>>2];c[h+648>>2]=c[d+24>>2];c[h+652>>2]=c[d+28>>2];c[h+656>>2]=c[d+32>>2];c[h+660>>2]=c[d+36>>2];c[h+664>>2]=c[d+40>>2];c[h+668>>2]=c[d+44>>2];g[h+612>>2]=+g[b+204>>2];g[h+516>>2]=9999999747378752.0e-20;a[h+540>>0]=0;c[h+200>>2]=13248;d=c[b+4>>2]|0;c[h+176>>2]=10152;c[h+180>>2]=h+208;c[h+184>>2]=h+200;c[h+188>>2]=d;c[h+192>>2]=h+568;c[h+196>>2]=0;c[h>>2]=9440;c[h+168>>2]=0;g[h+164>>2]=1.0;g[h+172>>2]=+g[b+208>>2];if((xw(h+176|0,b+8|0,b+72|0,b+136|0,b+136|0,h)|0?(j=+g[h+132>>2],l=+g[h+136>>2],m=+g[h+140>>2],j*j+l*l+m*m>9999999747378752.0e-20):0)?(k=+g[h+164>>2],k<+g[b+200>>2]):0){n=1.0/+Q(+(j*j+l*l+m*m));g[h+132>>2]=j*n;g[h+136>>2]=l*n;g[h+140>>2]=m*n;+bc[c[(c[b>>2]|0)+12>>2]&3](b,h+132|0,h+148|0,k,e,f)}c[h+568>>2]=15736;e=c[h+620>>2]|0;if(!e){i=h;return}Lb[c[c[e>>2]>>2]&511](e);e=c[h+620>>2]|0;if(!e){i=h;return}c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);i=h;return}function WA(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(!d){i=b;return}Lb[c[c[d>>2]>>2]&511](d);a=c[a+52>>2]|0;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function XA(a){a=a|0;return}function YA(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ZA(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=15736;d=c[a+52>>2]|0;if(d){Lb[c[c[d>>2]>>2]&511](d);d=c[a+52>>2]|0;if(d){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}if(!a){i=b;return}}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function _A(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+80>>2]&127](a,b,d,e);i=f;return}function $A(a,b,d){a=a|0;b=+b;d=d|0;a=i;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=a;return}function aB(a){a=a|0;return 16544}function bB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;l=+g[d>>2];k=+g[d+4>>2];f=+g[d+8>>2];j=l*+g[b+56>>2]+k*+g[b+60>>2]+f*+g[b+64>>2];h=l*+g[b+72>>2]+k*+g[b+76>>2]+f*+g[b+80>>2];f=l*+g[b+88>>2]+k*+g[b+92>>2]+f*+g[b+96>>2];if(j<h)d=h<f?2:1;else d=j<f?2:0;d=b+(d<<4)+56|0;c[a+0>>2]=c[d+0>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];i=e;return}function cB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0;h=i;if((e|0)<=0){i=h;return}f=0;do{p=+g[b+(f<<4)>>2];o=+g[b+(f<<4)+4>>2];k=+g[b+(f<<4)+8>>2];m=p*+g[a+56>>2]+o*+g[a+60>>2]+k*+g[a+64>>2];l=p*+g[a+72>>2]+o*+g[a+76>>2]+k*+g[a+80>>2];k=p*+g[a+88>>2]+o*+g[a+92>>2]+k*+g[a+96>>2];j=d+(f<<4)|0;if(m<l)n=l<k?2:1;else n=m<k?2:0;n=a+(n<<4)+56|0;c[j+0>>2]=c[n+0>>2];c[j+4>>2]=c[n+4>>2];c[j+8>>2]=c[n+8>>2];c[j+12>>2]=c[n+12>>2];f=f+1|0}while((f|0)!=(e|0));i=h;return}function dB(a){a=a|0;return 2}function eB(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0,j=0.0,k=0.0,l=0.0,m=0.0;h=i;k=+g[a+56>>2];f=+g[a+72>>2]-k;j=+g[a+60>>2];e=+g[a+76>>2]-j;l=+g[a+64>>2];d=+g[a+80>>2]-l;k=+g[a+88>>2]-k;j=+g[a+92>>2]-j;l=+g[a+96>>2]-l;g[c+12>>2]=0.0;m=1.0/+Q(+((f*j-e*k)*(f*j-e*k)+((e*l-d*j)*(e*l-d*j)+(d*k-f*l)*(d*k-f*l))));g[c>>2]=m*(e*l-d*j);g[c+4>>2]=m*(d*k-f*l);g[c+8>>2]=(f*j-e*k)*m;if(!b){i=h;return}g[c>>2]=m*(e*l-d*j)*-1.0;g[c+4>>2]=m*(d*k-f*l)*-1.0;g[c+8>>2]=(f*j-e*k)*m*-1.0;i=h;return}function fB(a){a=a|0;return 3}function gB(a){a=a|0;return 3}function hB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;rc[c[(c[a>>2]|0)+108>>2]&127](a,b,d);rc[c[(c[a>>2]|0)+108>>2]&127](a,(b+1|0)%3|0,e);i=f;return}function iB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[d+0>>2]=c[a+(b<<4)+56>>2];c[d+4>>2]=c[a+(b<<4)+60>>2];c[d+8>>2]=c[a+(b<<4)+64>>2];c[d+12>>2]=c[a+(b<<4)+68>>2];i=e;return}function jB(a){a=a|0;return 1}function kB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vc[c[(c[a>>2]|0)+124>>2]&127](a,e,b,d);i=f;return}function lB(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0;e=i;i=i+32|0;n=+g[a+56>>2];r=+g[a+72>>2]-n;m=+g[a+60>>2];p=+g[a+76>>2]-m;l=+g[a+64>>2];s=+g[a+80>>2]-l;o=+g[a+88>>2]-n;q=+g[a+92>>2]-m;f=+g[a+96>>2]-l;j=1.0/+Q(+((r*q-p*o)*(r*q-p*o)+((p*f-s*q)*(p*f-s*q)+(s*o-r*f)*(s*o-r*f))));h=j*(p*f-s*q);f=j*(s*o-r*f);j=(r*q-p*o)*j;l=+g[b>>2]*h+ +g[b+4>>2]*f+j*+g[b+8>>2]-(h*n+f*m+j*l);if(!(l>=-d)|!(l<=d)){k=0;i=e;return k|0}k=0;while(1){vc[c[(c[a>>2]|0)+104>>2]&127](a,k,e+16|0,e);n=+g[e+16>>2];s=+g[e>>2]-n;p=+g[e+20>>2];o=+g[e+4>>2]-p;m=+g[e+24>>2];r=+g[e+8>>2]-m;q=1.0/+Q(+((f*s-h*o)*(f*s-h*o)+((j*o-f*r)*(j*o-f*r)+(h*r-j*s)*(h*r-j*s))));k=k+1|0;if(+g[b>>2]*q*(j*o-f*r)+ +g[b+4>>2]*q*(h*r-j*s)+(f*s-h*o)*q*+g[b+8>>2]-(m*(f*s-h*o)*q+(n*q*(j*o-f*r)+p*q*(h*r-j*s)))<-d){b=0;a=5;break}if((k|0)>=3){b=1;a=5;break}}if((a|0)==5){i=e;return b|0}return 0}function mB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;b=i;h=+g[a+56>>2];l=+g[a+72>>2]-h;k=+g[a+60>>2];j=+g[a+76>>2]-k;m=+g[a+64>>2];n=+g[a+80>>2]-m;h=+g[a+88>>2]-h;k=+g[a+92>>2]-k;m=+g[a+96>>2]-m;g[d+12>>2]=0.0;f=1.0/+Q(+((l*k-j*h)*(l*k-j*h)+((j*m-n*k)*(j*m-n*k)+(n*h-l*m)*(n*h-l*m))));g[d>>2]=f*(j*m-n*k);g[d+4>>2]=f*(n*h-l*m);g[d+8>>2]=(l*k-j*h)*f;c[e+0>>2]=c[a+56>>2];c[e+4>>2]=c[a+60>>2];c[e+8>>2]=c[a+64>>2];c[e+12>>2]=c[a+68>>2];i=b;return}function nB(a){a=a|0;var b=0;b=i;oB(a);gF(a);i=b;return}function oB(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16568;e=c[b+56>>2]|0;if(e){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;e=c[b+36>>2]|0;if(e){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;e=c[b+16>>2]|0;if(!e){e=b+12|0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[e>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;e=b+12|0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[e>>2]=0;i=d;return}function pB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;if((c[d+8>>2]|0)>0){h=c[d+16>>2]|0;j=0;f=0;do{k=c[h+(j<<2)>>2]|0;if(!(c[k+204>>2]&3)){c[k+208>>2]=f;f=f+1|0}c[k+212>>2]=-1;g[k+244>>2]=1.0;j=j+1|0}while((j|0)<(c[d+8>>2]|0))}else f=0;h=c[b+8>>2]|0;if((h|0)<(f|0)){if((c[b+12>>2]|0)<(f|0)){if(!f){j=0;m=h}else{c[5004]=(c[5004]|0)+1;j=fF((f<<3|3)+16|0)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}m=c[b+8>>2]|0}if((m|0)>0){l=0;do{k=j+(l<<3)|0;if(k){o=(c[b+16>>2]|0)+(l<<3)|0;n=c[o+4>>2]|0;c[k>>2]=c[o>>2];c[k+4>>2]=n}l=l+1|0}while((l|0)!=(m|0))}k=c[b+16>>2]|0;if(k){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=j;c[b+12>>2]=f;j=b+16|0}else j=b+16|0;do{k=(c[j>>2]|0)+(h<<3)|0;if(k){c[k>>2]=0;c[k+4>>2]=0}h=h+1|0}while((h|0)!=(f|0))}c[b+8>>2]=f;if((f|0)>0){j=c[b+16>>2]|0;h=0;do{c[j+(h<<3)>>2]=h;c[j+(h<<3)+4>>2]=1;h=h+1|0}while((h|0)!=(f|0))}f=c[d+68>>2]|0;f=Pb[c[(c[f>>2]|0)+36>>2]&127](f)|0;d=Pb[c[(c[f>>2]|0)+36>>2]&127](f)|0;if(!d){i=e;return}h=Pb[c[(c[f>>2]|0)+20>>2]&127](f)|0;if((d|0)<=0){i=e;return}f=0;do{k=c[c[h+(f<<4)>>2]>>2]|0;j=c[c[h+(f<<4)+4>>2]>>2]|0;if(((k|0)!=0?!((j|0)==0?1:(c[k+204>>2]&7|0)!=0):0)?(c[j+204>>2]&7|0)==0:0){l=c[k+208>>2]|0;k=c[j+208>>2]|0;j=c[b+16>>2]|0;m=c[j+(l<<3)>>2]|0;if((m|0)!=(l|0)){n=j+(l<<3)|0;do{l=j+(m<<3)|0;c[n>>2]=c[l>>2];l=c[l>>2]|0;n=j+(l<<3)|0;m=c[n>>2]|0}while((l|0)!=(m|0))}m=c[j+(k<<3)>>2]|0;if((m|0)!=(k|0)){n=j+(k<<3)|0;do{k=j+(m<<3)|0;c[n>>2]=c[k>>2];k=c[k>>2]|0;n=j+(k<<3)|0;m=c[n>>2]|0}while((k|0)!=(m|0))}if((l|0)!=(k|0)){c[j+(l<<3)>>2]=k;o=j+(k<<3)+4|0;c[o>>2]=(c[o>>2]|0)+(c[j+(l<<3)+4>>2]|0)}}f=f+1|0}while((f|0)!=(d|0));i=e;return}function qB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;if((c[b+8>>2]|0)<=0){i=f;return}d=c[b+16>>2]|0;e=0;g=0;do{h=c[d+(e<<2)>>2]|0;if(!(c[h+204>>2]&3)){j=c[a+16>>2]|0;l=j+(g<<3)|0;k=c[l>>2]|0;if((k|0)==(g|0))m=g;else do{m=j+(k<<3)|0;c[l>>2]=c[m>>2];m=c[m>>2]|0;l=j+(m<<3)|0;k=c[l>>2]|0}while((m|0)!=(k|0));c[h+208>>2]=m;c[j+(g<<3)+4>>2]=e;c[h+212>>2]=-1;g=g+1|0}else{c[h+208>>2]=-1;c[h+212>>2]=-2}e=e+1|0}while((e|0)<(c[b+8>>2]|0));i=f;return}function rB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;while(1){f=c[a+12>>2]|0;g=c[f+(((b+d|0)/2|0)<<2)>>2]|0;l=b;k=d;while(1){h=c[(c[g+740>>2]|0)+208>>2]|0;if((h|0)>-1)while(1){j=c[f+(l<<2)>>2]|0;m=c[(c[j+740>>2]|0)+208>>2]|0;if((m|0)<=-1)m=c[(c[j+744>>2]|0)+208>>2]|0;if((m|0)<(h|0))l=l+1|0;else break}else{m=c[(c[g+744>>2]|0)+208>>2]|0;while(1){j=c[f+(l<<2)>>2]|0;n=c[(c[j+740>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[j+744>>2]|0)+208>>2]|0;if((n|0)<(m|0))l=l+1|0;else break}}if((h|0)>-1)while(1){m=c[f+(k<<2)>>2]|0;n=c[(c[m+740>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[m+744>>2]|0)+208>>2]|0;if((h|0)<(n|0))k=k+ -1|0;else break}else{h=c[(c[g+744>>2]|0)+208>>2]|0;while(1){m=c[f+(k<<2)>>2]|0;n=c[(c[m+740>>2]|0)+208>>2]|0;if((n|0)<=-1)n=c[(c[m+744>>2]|0)+208>>2]|0;if((h|0)<(n|0))k=k+ -1|0;else break}}if((l|0)<=(k|0)){c[f+(l<<2)>>2]=m;c[(c[a+12>>2]|0)+(k<<2)>>2]=j;l=l+1|0;k=k+ -1|0}if((l|0)>(k|0))break;f=c[a+12>>2]|0}if((k|0)>(b|0))rB(a,b,k);if((l|0)<(d|0))b=l;else break}i=e;return}function sB(a,b,d){a=a|0;b=b|0;d=d|0;d=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=d;return}function tB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;a=i;if((e|0)>0)b=0;else{i=a;return}do{g=d+(b<<4)|0;b=b+1|0;f=(b|0)==(e|0);c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0}while(!f);i=a;return}function uB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;rc[c[(c[b>>2]|0)+68>>2]&127](a,b,d);l=+g[d>>2];j=+g[d+4>>2];h=+g[d+8>>2];f=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:h;k=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:j;l=l*l+j*j+h*h<1.4210854715202004e-14?-1.0:l;h=1.0/+Q(+(f*f+(l*l+k*k)));j=+$b[c[(c[b>>2]|0)+48>>2]&15](b);g[a>>2]=h*l*j+ +g[a>>2];g[a+4>>2]=j*h*k+ +g[a+4>>2];g[a+8>>2]=j*h*f+ +g[a+8>>2];i=e;return}function vB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;f=i;k=+$b[c[(c[a>>2]|0)+48>>2]&15](a);j=+$b[c[(c[a>>2]|0)+48>>2]&15](a);h=+$b[c[(c[a>>2]|0)+48>>2]&15](a);m=+g[b+52>>2]-j;l=+g[b+56>>2]-h;g[d>>2]=+g[b+48>>2]-k;g[d+4>>2]=m;g[d+8>>2]=l;g[d+12>>2]=0.0;j=j+ +g[b+52>>2];h=h+ +g[b+56>>2];g[e>>2]=k+ +g[b+48>>2];g[e+4>>2]=j;g[e+8>>2]=h;g[e+12>>2]=0.0;i=f;return}function wB(a,b,d){a=a|0;b=+b;d=d|0;var e=0;e=i;b=b*.4000000059604645*+$b[c[(c[a>>2]|0)+48>>2]&15](a);b=b*+$b[c[(c[a>>2]|0)+48>>2]&15](a);g[d>>2]=b;g[d+4>>2]=b;g[d+8>>2]=b;g[d+12>>2]=0.0;i=e;return}function xB(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=16816;if((a[b+8>>0]|0)!=0?(e=c[b+12>>2]|0,(e|0)!=0):0){f=c[b+4>>2]|0;Nb[c[(c[f>>2]|0)+16>>2]&127](f,e)}gF(b);i=d;return}function yB(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16816;if(!(a[b+8>>0]|0)){i=d;return}e=c[b+12>>2]|0;if(!e){i=d;return}b=c[b+4>>2]|0;Nb[c[(c[b>>2]|0)+16>>2]&127](b,e);i=d;return}function zB(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0.0;e=i;i=i+32|0;a=c[a+12>>2]|0;if(!a){i=e;return}c[f+4>>2]=a;o=c[b+4>>2]|0;p=c[d+4>>2]|0;b=c[b+12>>2]|0;d=c[d+12>>2]|0;m=+g[b+48>>2]- +g[d+48>>2];n=+g[b+52>>2]- +g[d+52>>2];l=+g[b+56>>2]- +g[d+56>>2];j=+Q(+(m*m+n*n+l*l));h=+g[p+28>>2]*+g[p+12>>2];k=+g[o+28>>2]*+g[o+12>>2]+h;if(j>k){if(!(c[a+748>>2]|0)){i=e;return}d=c[a+740>>2]|0;b=c[(c[f+8>>2]|0)+8>>2]|0;if((d|0)==(b|0)){xA(a,d+4|0,(c[(c[f+12>>2]|0)+8>>2]|0)+4|0);i=e;return}else{xA(a,(c[(c[f+12>>2]|0)+8>>2]|0)+4|0,b+4|0);i=e;return}}g[e+16>>2]=1.0;g[e+20>>2]=0.0;g[e+24>>2]=0.0;g[e+28>>2]=0.0;if(j>1.1920928955078125e-7){g[e+16>>2]=m*(1.0/j);g[e+20>>2]=n*(1.0/j);g[e+24>>2]=l*(1.0/j);g[e+28>>2]=0.0;m=m*(1.0/j);n=n*(1.0/j);l=l*(1.0/j)}else{m=1.0;n=0.0;l=0.0}q=h*n+ +g[d+52>>2];n=h*l+ +g[d+56>>2];g[e>>2]=h*m+ +g[d+48>>2];g[e+4>>2]=q;g[e+8>>2]=n;g[e+12>>2]=0.0;qc[c[(c[f>>2]|0)+16>>2]&15](f,e+16|0,e,j-k);a=c[f+4>>2]|0;if(!(c[a+748>>2]|0)){i=e;return}d=c[a+740>>2]|0;b=c[(c[f+8>>2]|0)+8>>2]|0;if((d|0)==(b|0)){xA(a,d+4|0,(c[(c[f+12>>2]|0)+8>>2]|0)+4|0);i=e;return}else{xA(a,(c[(c[f+12>>2]|0)+8>>2]|0)+4|0,b+4|0);i=e;return}}function AB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function BB(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+12>>2]|0)){i=e;return}if(!(a[b+8>>0]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+12>>2];c[d+4>>2]=h+1;i=e;return}function CB(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=16904;if((a[b+8>>0]|0)!=0?(e=c[b+12>>2]|0,(e|0)!=0):0){f=c[b+4>>2]|0;Nb[c[(c[f>>2]|0)+16>>2]&127](f,e)}gF(b);i=d;return}function DB(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=16904;if(!(a[b+8>>0]|0)){i=d;return}e=c[b+12>>2]|0;if(!e){i=d;return}b=c[b+4>>2]|0;Nb[c[(c[b>>2]|0)+16>>2]&127](b,e);i=d;return}function EB(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0.0,o=0;j=i;i=i+160|0;k=c[b+12>>2]|0;if(!k){i=j;return}l=(a[b+16>>0]|0)!=0;m=l?e:d;d=l?d:e;o=c[m+4>>2]|0;e=c[d+4>>2]|0;c[h+4>>2]=k;n=+g[(c[b+12>>2]|0)+752>>2];c[j+136>>2]=17768;c[j+140>>2]=o;c[j+144>>2]=e;g[j+148>>2]=n;g[j+128>>2]=999999984306749400.0;e=c[m+12>>2]|0;c[j+0>>2]=c[e+0>>2];c[j+4>>2]=c[e+4>>2];c[j+8>>2]=c[e+8>>2];c[j+12>>2]=c[e+12>>2];c[j+16>>2]=c[e+16>>2];c[j+20>>2]=c[e+20>>2];c[j+24>>2]=c[e+24>>2];c[j+28>>2]=c[e+28>>2];c[j+32>>2]=c[e+32>>2];c[j+36>>2]=c[e+36>>2];c[j+40>>2]=c[e+40>>2];c[j+44>>2]=c[e+44>>2];c[j+48>>2]=c[e+48>>2];c[j+52>>2]=c[e+52>>2];c[j+56>>2]=c[e+56>>2];c[j+60>>2]=c[e+60>>2];d=c[d+12>>2]|0;c[j+64>>2]=c[d+0>>2];c[j+68>>2]=c[d+4>>2];c[j+72>>2]=c[d+8>>2];c[j+76>>2]=c[d+12>>2];c[j+80>>2]=c[d+16>>2];c[j+84>>2]=c[d+20>>2];c[j+88>>2]=c[d+24>>2];c[j+92>>2]=c[d+28>>2];c[j+96>>2]=c[d+32>>2];c[j+100>>2]=c[d+36>>2];c[j+104>>2]=c[d+40>>2];c[j+108>>2]=c[d+44>>2];c[j+112>>2]=c[d+48>>2];c[j+116>>2]=c[d+52>>2];c[j+120>>2]=c[d+56>>2];c[j+124>>2]=c[d+60>>2];xC(j+136|0,j,h,c[f+20>>2]|0,l);if(!(a[b+8>>0]|0)){i=j;return}b=c[h+4>>2]|0;if(!(c[b+748>>2]|0)){i=j;return}k=c[b+740>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;if((k|0)==(e|0)){xA(b,k+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=j;return}else{xA(b,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,e+4|0);i=j;return}}function FB(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function GB(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+12>>2]|0)){i=e;return}if(!(a[b+8>>0]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+12>>2];c[d+4>>2]=h+1;i=e;return}function HB(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function IB(a){a=a|0;return}function JB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;g[c>>2]=-999999984306749400.0;g[c+4>>2]=-999999984306749400.0;g[c+8>>2]=-999999984306749400.0;g[c+12>>2]=0.0;g[d>>2]=999999984306749400.0;g[d+4>>2]=999999984306749400.0;g[d+8>>2]=999999984306749400.0;g[d+12>>2]=0.0;return}function KB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0;f=i;i=i+48|0;k=+g[e>>2];l=+g[d>>2];h=+g[e+4>>2];j=+g[d+4>>2];m=+g[e+8>>2];o=+g[d+8>>2];t=+Q(+((k-l)*.5*(k-l)*.5+(h-j)*.5*(h-j)*.5+(m-o)*.5*(m-o)*.5));p=+g[a+56>>2];if(+P(+p)>.7071067690849304){n=+g[a+52>>2];s=1.0/+Q(+(p*p+n*n));y=+g[a+48>>2];q=y;x=n;r=0.0;w=-(p*s);v=n*s;u=(p*p+n*n)*s;n=-(y*n*s);s=y*-(p*s)}else{z=+g[a+48>>2];y=+g[a+52>>2];s=1.0/+Q(+(z*z+y*y));q=z;x=y;r=-(y*s);w=z*s;v=0.0;u=-(p*z*s);n=p*-(y*s);s=(z*z+y*y)*s}z=(k+l)*.5*q+(h+j)*.5*x+(m+o)*.5*p- +g[a+64>>2];j=(h+j)*.5-x*z;q=(k+l)*.5-q*z;r=t*r;w=t*w;y=t*v;u=t*u;v=t*n;x=t*s;g[f>>2]=u+(r+q);g[f+4>>2]=v+(w+j);g[f+8>>2]=x+(y+((m+o)*.5-p*z));g[f+12>>2]=0.0;g[f+16>>2]=r+q-u;g[f+20>>2]=w+j-v;g[f+24>>2]=y+((m+o)*.5-p*z)-x;g[f+28>>2]=0.0;g[f+32>>2]=q-r-u;g[f+36>>2]=j-w-v;g[f+40>>2]=(m+o)*.5-p*z-y-x;g[f+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,f,0,0);g[f>>2]=q-r-u;g[f+4>>2]=j-w-v;g[f+8>>2]=(m+o)*.5-p*z-y-x;g[f+12>>2]=0.0;g[f+16>>2]=u+(q-r);g[f+20>>2]=v+(j-w);g[f+24>>2]=x+((m+o)*.5-p*z-y);g[f+28>>2]=0.0;g[f+32>>2]=u+(r+q);g[f+36>>2]=v+(w+j);g[f+40>>2]=x+(y+((m+o)*.5-p*z));g[f+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,f,0,1);i=f;return}function LB(a,b,d){a=a|0;b=+b;d=d|0;a=i;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=a;return}function MB(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+68>>2]=c[b+0>>2];c[a+72>>2]=c[b+4>>2];c[a+76>>2]=c[b+8>>2];c[a+80>>2]=c[b+12>>2];i=d;return}function NB(a){a=a|0;return a+68|0}function OB(a){a=a|0;return 17128}function PB(a){a=a|0;return 52}function QB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0;e=i;f=gc[c[(c[d>>2]|0)+40>>2]&31](d,a)|0;h=gc[c[(c[d>>2]|0)+28>>2]&31](d,f)|0;c[b>>2]=h;if(h)Nb[c[(c[d>>2]|0)+48>>2]&127](d,f);c[b+4>>2]=c[a+4>>2];g[b+12>>2]=+g[a+68>>2];g[b+16>>2]=+g[a+72>>2];g[b+20>>2]=+g[a+76>>2];g[b+24>>2]=+g[a+80>>2];g[b+28>>2]=+g[a+48>>2];g[b+32>>2]=+g[a+52>>2];g[b+36>>2]=+g[a+56>>2];g[b+40>>2]=+g[a+60>>2];g[b+44>>2]=+g[a+64>>2];i=e;return 17104}function RB(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0,da=0,ea=0.0,fa=0,ga=0.0;k=i;i=i+128|0;fa=c[b+4>>2]|0;a[fa+312>>0]=0;c[fa>>2]=0;a[fa+356>>0]=1;g[fa+292>>2]=999999984306749400.0;g[fa+296>>2]=999999984306749400.0;g[fa+300>>2]=999999984306749400.0;g[fa+304>>2]=0.0;c[fa+336>>2]=0;c[fa+340>>2]=0;c[fa+344>>2]=0;c[fa+348>>2]=0;a[fa+352>>0]=0;a[fa+332>>0]=a[fa+332>>0]&-16;O=+g[d+48>>2];V=+g[d+52>>2];R=+g[d+56>>2];Y=+g[f+48>>2];W=+g[f+52>>2];P=+g[f+56>>2];D=+g[d>>2];p=+g[d+4>>2];r=+g[d+8>>2];E=+g[d+16>>2];z=+g[d+20>>2];s=+g[d+24>>2];w=+g[d+32>>2];q=+g[d+36>>2];t=+g[d+40>>2];u=+g[f>>2];x=+g[f+4>>2];A=+g[f+8>>2];v=+g[f+16>>2];y=+g[f+20>>2];B=+g[f+24>>2];F=+g[f+32>>2];o=+g[f+36>>2];C=+g[f+40>>2];m=+g[e+48>>2]-O-(+g[h+48>>2]-Y);l=+g[e+52>>2]-V-(+g[h+52>>2]-W);n=+g[e+56>>2]-R-(+g[h+56>>2]-P);fa=c[b+8>>2]|0;da=c[(c[fa>>2]|0)+64>>2]|0;g[k+96>>2]=D*-m+E*-l+w*-n;g[k+100>>2]=p*-m+z*-l+q*-n;g[k+104>>2]=r*-m+s*-l+t*-n;g[k+108>>2]=0.0;rc[da&127](k+112|0,fa,k+96|0);aa=+g[k+112>>2];ea=+g[k+116>>2];X=+g[k+120>>2];Z=aa*+g[d>>2]+ea*+g[d+4>>2]+X*+g[d+8>>2]+ +g[d+48>>2];_=aa*+g[d+16>>2]+ea*+g[d+20>>2]+X*+g[d+24>>2]+ +g[d+52>>2];X=aa*+g[d+32>>2]+ea*+g[d+36>>2]+X*+g[d+40>>2]+ +g[d+56>>2];fa=c[b+12>>2]|0;da=c[(c[fa>>2]|0)+64>>2]|0;ea=m*+g[f+4>>2]+l*+g[f+20>>2]+n*+g[f+36>>2];aa=m*+g[f+8>>2]+l*+g[f+24>>2]+n*+g[f+40>>2];g[k+64>>2]=m*+g[f>>2]+l*+g[f+16>>2]+n*+g[f+32>>2];g[k+68>>2]=ea;g[k+72>>2]=aa;g[k+76>>2]=0.0;rc[da&127](k+80|0,fa,k+64|0);aa=+g[k+80>>2];ea=+g[k+84>>2];$=+g[k+88>>2];Z=Z-(aa*+g[f>>2]+ea*+g[f+4>>2]+$*+g[f+8>>2]+ +g[f+48>>2]);_=_-(aa*+g[f+16>>2]+ea*+g[f+20>>2]+$*+g[f+24>>2]+ +g[f+52>>2]);$=X-(aa*+g[f+32>>2]+ea*+g[f+36>>2]+$*+g[f+40>>2]+ +g[f+56>>2]);a:do if(Z*Z+_*_+$*$>9999999747378752.0e-20){S=0.0;U=0.0;X=0.0;T=0.0;H=0.0;G=32;aa=0.0;while(1){if(!G)break a;G=G+ -1|0;fa=c[b+8>>2]|0;da=c[(c[fa>>2]|0)+64>>2]|0;I=-Z;ga=-_;ea=-$;g[k+32>>2]=D*I+E*ga+w*ea;g[k+36>>2]=p*I+z*ga+q*ea;g[k+40>>2]=r*I+s*ga+t*ea;g[k+44>>2]=0.0;rc[da&127](k+48|0,fa,k+32|0);ea=+g[k+48>>2];ga=+g[k+52>>2];I=+g[k+56>>2];J=O+(D*ea+p*ga+r*I);L=V+(E*ea+z*ga+s*I);I=R+(w*ea+q*ga+t*I);fa=c[b+12>>2]|0;da=c[(c[fa>>2]|0)+64>>2]|0;g[k>>2]=u*Z+v*_+F*$;g[k+4>>2]=x*Z+y*_+o*$;g[k+8>>2]=A*Z+B*_+C*$;g[k+12>>2]=0.0;rc[da&127](k+16|0,fa,k);ga=+g[k+16>>2];ea=+g[k+20>>2];M=+g[k+24>>2];K=Y+(u*ga+x*ea+A*M);N=W+(v*ga+y*ea+B*M);M=P+(F*ga+o*ea+C*M);ea=Z*(J-K)+_*(L-N)+$*(I-M);if(H>1.0){j=0;h=24;break}if(ea>0.0){O=m*Z+l*_+n*$;if(O>=-1.4210854715202004e-14){j=0;h=24;break}H=H-ea/O;R=(1.0-H)*+g[d+56>>2]+H*+g[e+56>>2];V=(1.0-H)*+g[d+52>>2]+H*+g[e+52>>2];O=+g[d+48>>2]*(1.0-H)+H*+g[e+48>>2];P=(1.0-H)*+g[f+56>>2]+H*+g[h+56>>2];W=(1.0-H)*+g[f+52>>2]+H*+g[h+52>>2];Y=(1.0-H)*+g[f+48>>2]+H*+g[h+48>>2];T=aa;X=$;U=_;S=Z}ba=c[b+4>>2]|0;ca=c[ba>>2]|0;if((ca|0)>0){Z=+g[ba+308>>2];fa=0;da=0;do{aa=J-K- +g[ba+(da<<4)+4>>2];ea=L-N- +g[ba+(da<<4)+8>>2];ga=I-M- +g[ba+(da<<4)+12>>2];fa=fa|aa*aa+ea*ea+ga*ga<=Z;da=da+1|0}while((da|0)!=(ca|0))}else fa=0;if((+g[ba+304>>2]==0.0?I-M==+g[ba+300>>2]:0)?L-N==+g[ba+296>>2]:0)da=J-K==+g[ba+292>>2];else da=0;if(!(da|fa)){g[ba+292>>2]=J-K;g[ba+296>>2]=L-N;g[ba+300>>2]=I-M;g[ba+304>>2]=0.0;a[ba+356>>0]=1;g[ba+(ca<<4)+4>>2]=J-K;g[ba+(ca<<4)+8>>2]=L-N;g[ba+(ca<<4)+12>>2]=I-M;g[ba+(ca<<4)+16>>2]=0.0;fa=c[ba>>2]|0;g[ba+(fa<<4)+84>>2]=J;g[ba+(fa<<4)+88>>2]=L;g[ba+(fa<<4)+92>>2]=I;g[ba+(fa<<4)+96>>2]=0.0;fa=c[ba>>2]|0;g[ba+(fa<<4)+164>>2]=K;g[ba+(fa<<4)+168>>2]=N;g[ba+(fa<<4)+172>>2]=M;g[ba+(fa<<4)+176>>2]=0.0;c[ba>>2]=(c[ba>>2]|0)+1;ba=c[b+4>>2]|0}fa=vC(ba)|0;Z=+g[ba+276>>2];_=+g[ba+280>>2];$=+g[ba+284>>2];if(!fa)break a;if(!(Z*Z+_*_+$*$>9999999747378752.0e-20))break a;else aa=+g[ba+288>>2]}if((h|0)==24){i=k;return j|0}}else{T=0.0;X=0.0;U=0.0;S=0.0;H=0.0}while(0);g[j+164>>2]=H;o=X*X+(U*U+S*S);if(!(o>=1.4210854715202004e-14)){c[j+132>>2]=0;c[j+136>>2]=0;c[j+140>>2]=0;c[j+144>>2]=0;o=0.0;q=0.0;p=0.0}else{p=1.0/+Q(+o);o=S*p;q=U*p;p=X*p;g[j+132>>2]=o;g[j+136>>2]=q;g[j+140>>2]=p;g[j+144>>2]=T}if(m*o+l*q+n*p>=-+g[j+172>>2]){fa=0;i=k;return fa|0}fa=c[b+4>>2]|0;vC(fa)|0;nF(j+148|0,fa+260|0,16)|0;fa=1;i=k;return fa|0}function SB(a){a=a|0;return}function TB(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function UB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;f=i;g[b+4>>2]=1.0;g[b+8>>2]=1.0;g[b+12>>2]=1.0;g[b+16>>2]=0.0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;c[b+48>>2]=0;c[b>>2]=17304;a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;a[b+164>>0]=d&1;a[b+165>>0]=e&1;g[b+168>>2]=0.0;c[5004]=(c[5004]|0)+1;e=fF(51)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}d=c[b+24>>2]|0;if((d|0)>0){h=0;do{j=e+(h<<5)|0;k=(c[b+32>>2]|0)+(h<<5)|0;c[j+0>>2]=c[k+0>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[j+16>>2]=c[k+16>>2];c[j+20>>2]=c[k+20>>2];c[j+24>>2]=c[k+24>>2];c[j+28>>2]=c[k+28>>2];h=h+1|0}while((h|0)!=(d|0))}d=c[b+32>>2]|0;if(d){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[d+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=e;c[b+28>>2]=1;k=c[b+24>>2]|0;c[e+(k<<5)>>2]=0;c[e+(k<<5)+4>>2]=0;c[e+(k<<5)+8>>2]=12;c[e+(k<<5)+12>>2]=0;c[e+(k<<5)+16>>2]=0;c[e+(k<<5)+20>>2]=16;c[e+(k<<5)+24>>2]=2;c[e+(k<<5)+28>>2]=0;c[b+24>>2]=(c[b+24>>2]|0)+1;if(!(a[b+164>>0]|0)){e=c[b+32>>2]|0;c[e>>2]=(c[b+148>>2]|0)/3|0;c[e+4>>2]=0;e=c[b+32>>2]|0;c[e+24>>2]=3;c[e+8>>2]=6}else{e=c[b+32>>2]|0;c[e>>2]=(c[b+128>>2]|0)/3|0;c[e+4>>2]=0;e=c[b+32>>2]|0;c[e+24>>2]=2;c[e+8>>2]=12}if(!(a[b+165>>0]|0)){c[e+12>>2]=(c[b+108>>2]|0)/3|0;c[e+16>>2]=0;c[(c[b+32>>2]|0)+20>>2]=12;i=f;return}else{c[e+12>>2]=c[b+88>>2];c[e+16>>2]=0;c[(c[b+32>>2]|0)+20>>2]=16;i=f;return}}function VB(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;if(!(a[d+164>>0]|0)){j=c[d+148>>2]|0;if((j|0)==(c[d+152>>2]|0)?(g=(j|0)==0?1:j<<1,(j|0)<(g|0)):0){if(!g)h=0;else{c[5004]=(c[5004]|0)+1;h=fF((g<<1)+19|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[d+148>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<1)|0;if(l)b[l>>1]=b[(c[d+156>>2]|0)+(k<<1)>>1]|0;k=k+1|0}while((k|0)!=(j|0))}k=c[d+156>>2]|0;if(k){if(a[d+160>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0);j=c[d+148>>2]|0}c[d+156>>2]=0}a[d+160>>0]=1;c[d+156>>2]=h;c[d+152>>2]=g}g=c[d+156>>2]|0;h=g+(j<<1)|0;if(h)b[h>>1]=e;c[d+148>>2]=j+1;c[(c[d+32>>2]|0)+4>>2]=g;i=f;return}else{l=c[d+128>>2]|0;if((l|0)==(c[d+132>>2]|0)?(h=(l|0)==0?1:l<<1,(l|0)<(h|0)):0){if(!h)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((h<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}l=c[d+128>>2]|0}if((l|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+136>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(l|0))}j=c[d+136>>2]|0;if(j){if(a[d+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=g;c[d+132>>2]=h;l=c[d+128>>2]|0}g=c[d+136>>2]|0;h=g+(l<<2)|0;if(h){c[h>>2]=e;l=c[d+128>>2]|0}c[d+128>>2]=l+1;c[(c[d+32>>2]|0)+4>>2]=g;i=f;return}}function WB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0.0,t=0.0;f=i;if(a[b+165>>0]|0){a:do if(e?(j=c[b+88>>2]|0,(j|0)>0):0){e=c[b+96>>2]|0;o=+g[d>>2];p=+g[d+4>>2];m=+g[d+8>>2];n=+g[b+168>>2];k=0;while(1){t=+g[e+(k<<4)>>2]-o;s=+g[e+(k<<4)+4>>2]-p;r=+g[e+(k<<4)+8>>2]-m;if(t*t+s*s+r*r<=n)break;k=k+1|0;if((k|0)>=(j|0))break a}i=f;return k|0}while(0);e=(c[b+32>>2]|0)+12|0;c[e>>2]=(c[e>>2]|0)+1;e=c[b+88>>2]|0;if((e|0)==(c[b+92>>2]|0)?(h=(e|0)==0?1:e<<1,(e|0)<(h|0)):0){if(!h)j=0;else{c[5004]=(c[5004]|0)+1;j=fF((h<<4|3)+16|0)|0;if(!j)j=0;else{c[(j+19&-16)+ -4>>2]=j;j=j+19&-16}e=c[b+88>>2]|0}if((e|0)>0){k=0;do{q=j+(k<<4)|0;l=(c[b+96>>2]|0)+(k<<4)|0;c[q+0>>2]=c[l+0>>2];c[q+4>>2]=c[l+4>>2];c[q+8>>2]=c[l+8>>2];c[q+12>>2]=c[l+12>>2];k=k+1|0}while((k|0)!=(e|0))}e=c[b+96>>2]|0;if(e){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=j;c[b+92>>2]=h;e=c[b+88>>2]|0}q=(c[b+96>>2]|0)+(e<<4)|0;c[q+0>>2]=c[d+0>>2];c[q+4>>2]=c[d+4>>2];c[q+8>>2]=c[d+8>>2];c[q+12>>2]=c[d+12>>2];q=c[b+88>>2]|0;c[b+88>>2]=q+1;c[(c[b+32>>2]|0)+16>>2]=c[b+96>>2];i=f;return q|0}j=c[b+108>>2]|0;b:do if((j|0)>0&e){e=c[b+116>>2]|0;m=+g[d>>2];n=+g[d+4>>2];o=+g[d+8>>2];p=+g[b+168>>2];h=0;while(1){r=+g[e+(h<<2)>>2]-m;s=+g[e+(h+1<<2)>>2]-n;t=+g[e+(h+2<<2)>>2]-o;k=h+3|0;if(r*r+s*s+t*t<=p)break;if((k|0)<(j|0))h=k;else{h=d;break b}}q=(h|0)/3|0;i=f;return q|0}else h=d;while(0);e=c[b+112>>2]|0;if((j|0)==(e|0)){e=(j|0)==0?1:j<<1;if((j|0)<(e|0)){if(!e)k=0;else{c[5004]=(c[5004]|0)+1;j=fF((e<<2|3)+16|0)|0;if(!j)k=0;else{c[(j+19&-16)+ -4>>2]=j;k=j+19&-16}j=c[b+108>>2]|0}if((j|0)>0){l=0;do{q=k+(l<<2)|0;if(q)g[q>>2]=+g[(c[b+116>>2]|0)+(l<<2)>>2];l=l+1|0}while((l|0)!=(j|0))}l=c[b+116>>2]|0;if(l){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0);j=c[b+108>>2]|0}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=k;c[b+112>>2]=e;l=j}else{l=j;e=j}}else l=j;k=c[b+116>>2]|0;j=k+(l<<2)|0;if(j)g[j>>2]=+g[h>>2];j=l+1|0;c[b+108>>2]=j;if((j|0)==(e|0)){h=(e|0)==0?1:e<<1;if((e|0)<(h|0)){if(!h)k=0;else{c[5004]=(c[5004]|0)+1;j=fF((h<<2|3)+16|0)|0;if(!j)k=0;else{c[(j+19&-16)+ -4>>2]=j;k=j+19&-16}e=c[b+108>>2]|0}if((e|0)>0){j=0;do{l=k+(j<<2)|0;if(l)g[l>>2]=+g[(c[b+116>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(e|0))}j=c[b+116>>2]|0;if(j){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);e=c[b+108>>2]|0}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=k;c[b+112>>2]=h;j=e}else{j=e;h=e}}else h=e;e=k+(j<<2)|0;if(e)g[e>>2]=+g[d+4>>2];j=j+1|0;c[b+108>>2]=j;if((j|0)==(h|0)){j=(h|0)==0?1:h<<1;if((h|0)<(j|0)){if(!j)k=0;else{c[5004]=(c[5004]|0)+1;h=fF((j<<2|3)+16|0)|0;if(!h)k=0;else{c[(h+19&-16)+ -4>>2]=h;k=h+19&-16}h=c[b+108>>2]|0}if((h|0)>0){e=0;do{l=k+(e<<2)|0;if(l)g[l>>2]=+g[(c[b+116>>2]|0)+(e<<2)>>2];e=e+1|0}while((e|0)!=(h|0))}e=c[b+116>>2]|0;if(e){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);h=c[b+108>>2]|0}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=k;c[b+112>>2]=j}}else h=j;j=k+(h<<2)|0;if(j)g[j>>2]=+g[d+8>>2];c[b+108>>2]=h+1;q=c[b+32>>2]|0;c[q+12>>2]=(c[q+12>>2]|0)+1;c[q+16>>2]=k;q=((c[b+108>>2]|0)/3|0)+ -1|0;i=f;return q|0}function XB(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0;e=i;if(a[b+165>>0]|0){if((c[b+92>>2]|0)>=(d|0)){i=e;return}if((d|0)!=0?(c[5004]=(c[5004]|0)+1,h=fF((d<<4|3)+16|0)|0,(h|0)!=0):0){c[(h+19&-16)+ -4>>2]=h;f=h+19&-16}else f=0;h=c[b+88>>2]|0;if((h|0)>0){j=0;do{k=f+(j<<4)|0;l=(c[b+96>>2]|0)+(j<<4)|0;c[k+0>>2]=c[l+0>>2];c[k+4>>2]=c[l+4>>2];c[k+8>>2]=c[l+8>>2];c[k+12>>2]=c[l+12>>2];j=j+1|0}while((j|0)!=(h|0))}h=c[b+96>>2]|0;if(h){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=f;c[b+92>>2]=d;i=e;return}if((c[b+112>>2]|0)>=(d|0)){i=e;return}if((d|0)!=0?(c[5004]=(c[5004]|0)+1,f=fF((d<<2|3)+16|0)|0,(f|0)!=0):0){c[(f+19&-16)+ -4>>2]=f;f=f+19&-16}else f=0;h=c[b+108>>2]|0;if((h|0)>0){k=0;do{j=f+(k<<2)|0;if(j)g[j>>2]=+g[(c[b+116>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(h|0))}h=c[b+116>>2]|0;if(h){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=f;c[b+112>>2]=d;i=e;return}function YB(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;if(!(a[d+164>>0]|0)){if((c[d+152>>2]|0)>=(e|0)){i=f;return}if((e|0)!=0?(c[5004]=(c[5004]|0)+1,h=fF((e<<1)+19|0)|0,(h|0)!=0):0){c[(h+19&-16)+ -4>>2]=h;g=h+19&-16}else g=0;h=c[d+148>>2]|0;if((h|0)>0){k=0;do{j=g+(k<<1)|0;if(j)b[j>>1]=b[(c[d+156>>2]|0)+(k<<1)>>1]|0;k=k+1|0}while((k|0)!=(h|0))}h=c[d+156>>2]|0;if(h){if(a[d+160>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[d+156>>2]=0}a[d+160>>0]=1;c[d+156>>2]=g;c[d+152>>2]=e;i=f;return}else{if((c[d+132>>2]|0)>=(e|0)){i=f;return}if((e|0)!=0?(c[5004]=(c[5004]|0)+1,g=fF((e<<2|3)+16|0)|0,(g|0)!=0):0){c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}else g=0;k=c[d+128>>2]|0;if((k|0)>0){j=0;do{h=g+(j<<2)|0;if(h)c[h>>2]=c[(c[d+136>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(k|0))}h=c[d+136>>2]|0;if(h){if(a[d+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[d+136>>2]=0}a[d+140>>0]=1;c[d+136>>2]=g;c[d+132>>2]=e;i=f;return}}function ZB(a){a=a|0;var b=0;b=i;dC(a);i=b;return}function _B(a){a=a|0;var b=0;b=i;dC(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function $B(a,b){a=a|0;b=b|0;return}function aC(a,b){a=a|0;b=b|0;return}function bC(a){a=a|0;return c[a+24>>2]|0}function cC(a){a=a|0;return 28}function dC(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=17304;e=c[b+156>>2]|0;if(e){if(a[b+160>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+156>>2]=0}a[b+160>>0]=1;c[b+156>>2]=0;c[b+148>>2]=0;c[b+152>>2]=0;e=c[b+136>>2]|0;if(e){if(a[b+140>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+136>>2]=0}a[b+140>>0]=1;c[b+136>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;e=c[b+116>>2]|0;if(e){if(a[b+120>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+116>>2]=0}a[b+120>>0]=1;c[b+116>>2]=0;c[b+108>>2]=0;c[b+112>>2]=0;e=c[b+96>>2]|0;if(e){if(a[b+100>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+96>>2]=0}a[b+100>>0]=1;c[b+96>>2]=0;c[b+88>>2]=0;c[b+92>>2]=0;c[b>>2]=19904;e=c[b+32>>2]|0;if(!e){a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;e=b+28|0;c[e>>2]=0;i=d;return}if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0;a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;e=b+28|0;c[e>>2]=0;i=d;return}function eC(a){a=a|0;var b=0;b=i;if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function fC(a){a=a|0;return}function gC(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0;f=i;q=(+g[a+32>>2]- +g[a+16>>2])*.5;n=(+g[a+36>>2]- +g[a+20>>2])*.5;k=(+g[a+40>>2]- +g[a+24>>2])*.5;p=+$b[c[(c[a>>2]|0)+48>>2]&15](a);m=+$b[c[(c[a>>2]|0)+48>>2]&15](a);k=k+ +$b[c[(c[a>>2]|0)+48>>2]&15](a);D=(+g[a+32>>2]+ +g[a+16>>2])*.5;B=(+g[a+36>>2]+ +g[a+20>>2])*.5;z=(+g[a+40>>2]+ +g[a+24>>2])*.5;H=+g[b>>2];y=+P(+H);G=+g[b+4>>2];x=+P(+G);v=+g[b+8>>2];w=+P(+v);F=+g[b+16>>2];u=+P(+F);E=+g[b+20>>2];t=+P(+E);r=+g[b+24>>2];s=+P(+r);C=+g[b+32>>2];o=+P(+C);A=+g[b+36>>2];l=+P(+A);h=+g[b+40>>2];j=+P(+h);v=D*H+B*G+z*v+ +g[b+48>>2];r=D*F+B*E+z*r+ +g[b+52>>2];h=D*C+B*A+z*h+ +g[b+56>>2];g[d>>2]=v-((q+p)*y+(n+m)*x+k*w);g[d+4>>2]=r-((q+p)*u+(n+m)*t+k*s);g[d+8>>2]=h-((q+p)*o+(n+m)*l+k*j);g[d+12>>2]=0.0;g[e>>2]=(q+p)*y+(n+m)*x+k*w+v;g[e+4>>2]=(q+p)*u+(n+m)*t+k*s+r;g[e+8>>2]=(q+p)*o+(n+m)*l+k*j+h;g[e+12>>2]=0.0;i=f;return}function hC(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+48|0;e=(c[a+48>>2]|0)+4|0;c[e+0>>2]=c[b+0>>2];c[e+4>>2]=c[b+4>>2];c[e+8>>2]=c[b+8>>2];c[e+12>>2]=c[b+12>>2];c[d+32>>2]=0;c[d+36>>2]=0;c[d+40>>2]=0;c[d+44>>2]=0;g[d+32>>2]=1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+32>>2]=+g[d+16>>2]+ +g[a+12>>2];g[d+32>>2]=-1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d+0>>2];c[d+20>>2]=c[d+4>>2];c[d+24>>2]=c[d+8>>2];c[d+28>>2]=c[d+12>>2];g[a+16>>2]=+g[d+16>>2]- +g[a+12>>2];c[d+32>>2]=0;c[d+36>>2]=0;c[d+40>>2]=0;c[d+44>>2]=0;g[d+36>>2]=1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+36>>2]=+g[d+20>>2]+ +g[a+12>>2];g[d+36>>2]=-1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d+0>>2];c[d+20>>2]=c[d+4>>2];c[d+24>>2]=c[d+8>>2];c[d+28>>2]=c[d+12>>2];g[a+20>>2]=+g[d+20>>2]- +g[a+12>>2];c[d+32>>2]=0;c[d+36>>2]=0;c[d+40>>2]=0;c[d+44>>2]=0;g[d+40>>2]=1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d+16|0,a,d+32|0);g[a+40>>2]=+g[d+24>>2]+ +g[a+12>>2];g[d+40>>2]=-1.0;rc[c[(c[a>>2]|0)+68>>2]&127](d,a,d+32|0);c[d+16>>2]=c[d+0>>2];c[d+20>>2]=c[d+4>>2];c[d+24>>2]=c[d+8>>2];c[d+28>>2]=c[d+12>>2];g[a+24>>2]=+g[d+24>>2]- +g[a+12>>2];i=d;return}function iC(a){a=a|0;return(c[a+48>>2]|0)+4|0}function jC(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+48|0;c[f>>2]=17624;c[f+4>>2]=b;c[f+8>>2]=c[d+0>>2];c[f+12>>2]=c[d+4>>2];c[f+16>>2]=c[d+8>>2];c[f+20>>2]=c[d+12>>2];c[f+24>>2]=c[e+0>>2];c[f+28>>2]=c[e+4>>2];c[f+32>>2]=c[e+8>>2];c[f+36>>2]=c[e+12>>2];b=c[a+48>>2]|0;vc[c[(c[b>>2]|0)+8>>2]&127](b,f,d,e);i=f;return}function kC(a,b,d){a=a|0;b=+b;d=d|0;a=i;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=a;return}function lC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;i=i+176|0;c[e+160>>2]=0;c[e+164>>2]=0;c[e+168>>2]=0;c[e+172>>2]=0;c[e+136>>2]=0;c[e+140>>2]=0;c[e+144>>2]=0;c[e+148>>2]=0;c[e+152>>2]=0;c[e+32>>2]=17560;c[e+36>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;g[e+52>>2]=1.0;c[e+56>>2]=c[e+160>>2];c[e+60>>2]=c[e+164>>2];c[e+64>>2]=c[e+168>>2];c[e+68>>2]=0;g[e+72>>2]=1.0;c[e+76>>2]=0;c[e+80>>2]=0;c[e+84>>2]=0;c[e+88>>2]=0;g[e+92>>2]=1.0;g[e+96>>2]=0.0;c[e+100>>2]=c[e+140>>2];c[e+104>>2]=c[e+144>>2];c[e+108>>2]=c[e+148>>2];c[e+112>>2]=c[e+152>>2];g[e+116>>2]=-999999984306749400.0;l=+g[d>>2];k=+g[d+4>>2];j=+g[d+8>>2];h=l*+g[e+56>>2]+k+j*0.0;f=l*+g[e+60>>2]+k*0.0+j;g[e+120>>2]=l+k*0.0+j*0.0;g[e+124>>2]=h;g[e+128>>2]=f;g[e+132>>2]=0.0;g[e+16>>2]=999999984306749400.0;g[e+20>>2]=999999984306749400.0;g[e+24>>2]=999999984306749400.0;g[e+28>>2]=0.0;d=c[(c[b>>2]|0)+64>>2]|0;g[e>>2]=-999999984306749400.0;g[e+4>>2]=-999999984306749400.0;g[e+8>>2]=-999999984306749400.0;g[e+12>>2]=0.0;vc[d&127](b,e+32|0,e,e+16|0);c[a+0>>2]=c[e+36>>2];c[a+4>>2]=c[e+40>>2];c[a+8>>2]=c[e+44>>2];c[a+12>>2]=c[e+48>>2];i=e;return}function mC(a){a=a|0;return}function nC(a){a=a|0;return 17536}function oC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function pC(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;f=+g[a+88>>2];j=+g[a+92>>2];h=+g[a+96>>2];k=f*+g[b>>2]+j*+g[b+4>>2]+h*+g[b+8>>2];l=+g[a+84>>2];if(k>l){g[a+84>>2]=k;c[a+4>>2]=c[b+0>>2];c[a+8>>2]=c[b+4>>2];c[a+12>>2]=c[b+8>>2];c[a+16>>2]=c[b+12>>2]}else k=l;l=f*+g[b+16>>2]+j*+g[b+20>>2]+h*+g[b+24>>2];if(l>k){g[a+84>>2]=l;c[a+4>>2]=c[b+16>>2];c[a+8>>2]=c[b+20>>2];c[a+12>>2]=c[b+24>>2];c[a+16>>2]=c[b+28>>2];k=l}f=f*+g[b+32>>2]+j*+g[b+36>>2]+h*+g[b+40>>2];if(!(f>k)){i=e;return}g[a+84>>2]=f;c[a+4>>2]=c[b+32>>2];c[a+8>>2]=c[b+36>>2];c[a+12>>2]=c[b+40>>2];c[a+16>>2]=c[b+44>>2];i=e;return}function qC(a){a=a|0;return}function rC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function sC(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0;f=i;k=+g[b>>2];j=+g[b+16>>2];l=k<j?k:j;h=+g[b+32>>2];if((l<h?l:h)>+g[a+24>>2]){i=f;return}m=k>j?b:b+16|0;if(+g[(+g[m>>2]>h?m:b+32|0)>>2]<+g[a+8>>2]){i=f;return}h=+g[b+8>>2];j=+g[b+24>>2];l=h<j?h:j;k=+g[b+40>>2];if((l<k?l:k)>+g[a+32>>2]){i=f;return}m=h>j?b+8|0:b+24|0;if(+g[(+g[m>>2]>k?m:b+40|0)>>2]<+g[a+16>>2]){i=f;return}h=+g[b+4>>2];j=+g[b+20>>2];l=h<j?h:j;k=+g[b+36>>2];if((l<k?l:k)>+g[a+28>>2]){i=f;return}m=h>j?b+4|0:b+20|0;if(+g[(+g[m>>2]>k?m:b+36|0)>>2]<+g[a+12>>2]){i=f;return}m=c[a+4>>2]|0;vc[c[(c[m>>2]|0)+8>>2]&127](m,b,d,e);i=f;return}function tC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;while(1){f=c[a+12>>2]|0;g=c[f+(((b+d|0)/2|0)<<3)>>2]|0;k=b;h=d;while(1){while(1){l=k+1|0;if((c[f+(k<<3)>>2]|0)<(g|0))k=l;else{j=h;break}}while(1){m=f+(j<<3)|0;h=j+ -1|0;if((g|0)<(c[m>>2]|0))j=h;else break}if((k|0)>(j|0))h=j;else{k=f+(k<<3)|0;n=c[k>>2]|0;f=c[k+4>>2]|0;o=c[m+4>>2]|0;c[k>>2]=c[m>>2];c[k+4>>2]=o;k=(c[a+12>>2]|0)+(j<<3)|0;c[k>>2]=n;c[k+4>>2]=f;k=l}if((k|0)>(h|0))break;f=c[a+12>>2]|0}if((h|0)>(b|0))tC(a,b,h);if((k|0)<(d|0))b=k;else break}i=e;return}function uC(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;h=c[b>>2]|0;if((h|0)>3){g=a[d>>0]|0;if(!(g&8)){c[b>>2]=h+ -1;f=b+(h+ -1<<4)+4|0;c[b+52>>2]=c[f+0>>2];c[b+56>>2]=c[f+4>>2];c[b+60>>2]=c[f+8>>2];c[b+64>>2]=c[f+12>>2];f=b+(h+ -1<<4)+84|0;c[b+132>>2]=c[f+0>>2];c[b+136>>2]=c[f+4>>2];c[b+140>>2]=c[f+8>>2];c[b+144>>2]=c[f+12>>2];f=b+(h+ -1<<4)+164|0;c[b+212>>2]=c[f+0>>2];c[b+216>>2]=c[f+4>>2];c[b+220>>2]=c[f+8>>2];c[b+224>>2]=c[f+12>>2];h=h+ -1|0;f=4}else f=6}else f=4;if((f|0)==4)if((h|0)>2){g=a[d>>0]|0;f=6}else g=h;if((f|0)==6)if(!(g&4)){g=h+ -1|0;c[b>>2]=g;c[b+36>>2]=c[b+(g<<4)+4>>2];c[b+40>>2]=c[b+(g<<4)+8>>2];c[b+44>>2]=c[b+(g<<4)+12>>2];c[b+48>>2]=c[b+(g<<4)+16>>2];c[b+116>>2]=c[b+(g<<4)+84>>2];c[b+120>>2]=c[b+(g<<4)+88>>2];c[b+124>>2]=c[b+(g<<4)+92>>2];c[b+128>>2]=c[b+(g<<4)+96>>2];c[b+196>>2]=c[b+(g<<4)+164>>2];c[b+200>>2]=c[b+(g<<4)+168>>2];c[b+204>>2]=c[b+(g<<4)+172>>2];c[b+208>>2]=c[b+(g<<4)+176>>2]}else g=h;if((g|0)>1){h=a[d>>0]|0;if(!(h&2)){g=g+ -1|0;c[b>>2]=g;c[b+20>>2]=c[b+(g<<4)+4>>2];c[b+24>>2]=c[b+(g<<4)+8>>2];c[b+28>>2]=c[b+(g<<4)+12>>2];c[b+32>>2]=c[b+(g<<4)+16>>2];c[b+100>>2]=c[b+(g<<4)+84>>2];c[b+104>>2]=c[b+(g<<4)+88>>2];c[b+108>>2]=c[b+(g<<4)+92>>2];c[b+112>>2]=c[b+(g<<4)+96>>2];c[b+180>>2]=c[b+(g<<4)+164>>2];c[b+184>>2]=c[b+(g<<4)+168>>2];c[b+188>>2]=c[b+(g<<4)+172>>2];c[b+192>>2]=c[b+(g<<4)+176>>2];f=11}else d=h}else f=11;do if((f|0)==11)if((g|0)>0){d=a[d>>0]|0;break}else{i=e;return}while(0);if(d&1){i=e;return}h=g+ -1|0;c[b>>2]=h;c[b+4>>2]=c[b+(h<<4)+4>>2];c[b+8>>2]=c[b+(h<<4)+8>>2];c[b+12>>2]=c[b+(h<<4)+12>>2];c[b+16>>2]=c[b+(h<<4)+16>>2];c[b+84>>2]=c[b+(h<<4)+84>>2];c[b+88>>2]=c[b+(h<<4)+88>>2];c[b+92>>2]=c[b+(h<<4)+92>>2];c[b+96>>2]=c[b+(h<<4)+96>>2];c[b+164>>2]=c[b+(h<<4)+164>>2];c[b+168>>2]=c[b+(h<<4)+168>>2];c[b+172>>2]=c[b+(h<<4)+172>>2];c[b+176>>2]=c[b+(h<<4)+176>>2];i=e;return}function vC(b){b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0.0,L=0.0,M=0,N=0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0,T=0;d=i;i=i+80|0;if(!(a[b+356>>0]|0)){T=a[b+312>>0]|0;T=T<<24>>24!=0;i=d;return T|0}c[b+336>>2]=0;c[b+340>>2]=0;c[b+344>>2]=0;c[b+348>>2]=0;a[b+352>>0]=0;J=a[b+332>>0]|0;a[b+332>>0]=J&-16;a[b+356>>0]=0;switch(c[b>>2]|0){case 1:{c[b+244>>2]=c[b+84>>2];c[b+248>>2]=c[b+88>>2];c[b+252>>2]=c[b+92>>2];c[b+256>>2]=c[b+96>>2];c[b+260>>2]=c[b+164>>2];c[b+264>>2]=c[b+168>>2];c[b+268>>2]=c[b+172>>2];c[b+272>>2]=c[b+176>>2];Q=+g[b+248>>2]- +g[b+264>>2];R=+g[b+252>>2]- +g[b+268>>2];g[b+276>>2]=+g[b+244>>2]- +g[b+260>>2];g[b+280>>2]=Q;g[b+284>>2]=R;g[b+288>>2]=0.0;c[b+336>>2]=0;c[b+340>>2]=0;c[b+344>>2]=0;c[b+348>>2]=0;a[b+352>>0]=0;a[b+332>>0]=J&-16;g[b+336>>2]=1.0;g[b+340>>2]=0.0;g[b+344>>2]=0.0;g[b+348>>2]=0.0;a[b+312>>0]=1;T=1;T=T<<24>>24!=0;i=d;return T|0};case 4:{c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;j=d+48|0;a[j>>0]=0;c[b+316>>2]=c[d+0>>2];c[b+320>>2]=c[d+4>>2];c[b+324>>2]=c[d+8>>2];c[b+328>>2]=c[d+12>>2];a[b+332>>0]=J|15;G=+g[b+20>>2];P=+g[b+4>>2];C=+g[b+24>>2];Q=+g[b+8>>2];E=+g[b+28>>2];O=+g[b+12>>2];F=+g[b+36>>2];L=+g[b+40>>2];I=+g[b+44>>2];H=+g[b+52>>2];K=+g[b+56>>2];D=+g[b+60>>2];R=(H-P)*((C-Q)*(I-O)-(E-O)*(L-Q))+(K-Q)*((E-O)*(F-P)-(G-P)*(I-O))+((G-P)*(L-Q)-(C-Q)*(F-P))*(D-O);if(R*R<9.99999905104687e-9)N=-1;else N=R*(((E-O)*(F-P)-(G-P)*(I-O))*(0.0-Q)+((C-Q)*(I-O)-(E-O)*(L-Q))*(0.0-P)+((G-P)*(L-Q)-(C-Q)*(F-P))*(0.0-O))<0.0&1;R=(G-P)*((L-Q)*(D-O)-(I-O)*(K-Q))+(C-Q)*((I-O)*(H-P)-(F-P)*(D-O))+((F-P)*(K-Q)-(L-Q)*(H-P))*(E-O);if(R*R<9.99999905104687e-9)M=-1;else M=R*(((I-O)*(H-P)-(F-P)*(D-O))*(0.0-Q)+((L-Q)*(D-O)-(I-O)*(K-Q))*(0.0-P)+((F-P)*(K-Q)-(L-Q)*(H-P))*(0.0-O))<0.0&1;R=(F-P)*((K-Q)*(E-O)-(D-O)*(C-Q))+(L-Q)*((D-O)*(G-P)-(H-P)*(E-O))+((H-P)*(C-Q)-(K-Q)*(G-P))*(I-O);if(R*R<9.99999905104687e-9)J=-1;else J=R*(((D-O)*(G-P)-(H-P)*(E-O))*(0.0-Q)+((K-Q)*(E-O)-(D-O)*(C-Q))*(0.0-P)+((H-P)*(C-Q)-(K-Q)*(G-P))*(0.0-O))<0.0&1;O=(P-G)*((K-C)*(I-E)-(D-E)*(L-C))+(Q-C)*((D-E)*(F-G)-(H-G)*(I-E))+((H-G)*(L-C)-(K-C)*(F-G))*(O-E);if(O*O<9.99999905104687e-9)S=-1;else S=O*(((D-E)*(F-G)-(H-G)*(I-E))*(0.0-C)+((K-C)*(I-E)-(D-E)*(L-C))*(0.0-G)+((H-G)*(L-C)-(K-C)*(F-G))*(0.0-E))<0.0&1;if((M|N|J|S|0)<0){a[b+352>>0]=1;a[b+312>>0]=0;T=0;T=T<<24>>24!=0;i=d;return T|0}T=(N|0)!=0;N=(M|0)==0;J=(J|0)==0;M=(S|0)==0;if(N&(T^1)&J&M){a[b+312>>0]=1;c[b+276>>2]=0;c[b+280>>2]=0;c[b+284>>2]=0;c[b+288>>2]=0;T=1;T=T<<24>>24!=0;i=d;return T|0}if(T?(wC(d,b+4|0,b+20|0,b+36|0,d+32|0),B=+g[d+32>>2],w=+g[d+36>>2],x=+g[d+40>>2],y=B- +g[d>>2],z=w- +g[d+4>>2],A=x- +g[d+8>>2],y*y+z*z+A*A<3.4028234663852886e+38):0){R=+g[d+44>>2];g[b+316>>2]=B;g[b+320>>2]=w;g[b+324>>2]=x;g[b+328>>2]=R;T=a[j>>0]|0;a[b+332>>0]=T&1|a[b+332>>0]&-16|T&2|T&4;R=+g[d+56>>2];w=+g[d+60>>2];g[b+336>>2]=+g[d+52>>2];g[b+340>>2]=R;g[b+344>>2]=w;g[b+348>>2]=0.0;w=y*y+z*z+A*A}else w=3.4028234663852886e+38;if(!N?(wC(d,b+4|0,b+36|0,b+52|0,d+32|0),r=+g[d+32>>2],u=+g[d+36>>2],q=+g[d+40>>2],v=r- +g[d>>2],s=u- +g[d+4>>2],t=q- +g[d+8>>2],v*v+s*s+t*t<w):0){R=+g[d+44>>2];g[b+316>>2]=r;g[b+320>>2]=u;g[b+324>>2]=q;g[b+328>>2]=R;T=a[j>>0]|0;a[b+332>>0]=T<<1&4|(T&1|a[b+332>>0]&-16)|T<<1&8;R=+g[d+56>>2];w=+g[d+60>>2];g[b+336>>2]=+g[d+52>>2];g[b+340>>2]=0.0;g[b+344>>2]=R;g[b+348>>2]=w;w=v*v+s*s+t*t}if(!J?(wC(d,b+4|0,b+52|0,b+20|0,d+32|0),k=+g[d+32>>2],l=+g[d+36>>2],m=+g[d+40>>2],n=k- +g[d>>2],o=l- +g[d+4>>2],p=m- +g[d+8>>2],n*n+o*o+p*p<w):0){R=+g[d+44>>2];g[b+316>>2]=k;g[b+320>>2]=l;g[b+324>>2]=m;g[b+328>>2]=R;T=a[j>>0]|0;a[b+332>>0]=(T&255)>>>1&2|(T&1|a[b+332>>0]&-16)|T<<2&8;R=+g[d+60>>2];w=+g[d+56>>2];g[b+336>>2]=+g[d+52>>2];g[b+340>>2]=R;g[b+344>>2]=0.0;g[b+348>>2]=w;w=n*n+o*o+p*p}if(!M?(wC(d,b+20|0,b+52|0,b+36|0,d+32|0),f=+g[d+32>>2],e=+g[d+36>>2],h=+g[d+40>>2],P=f- +g[d>>2],Q=e- +g[d+4>>2],R=h- +g[d+8>>2],P*P+Q*Q+R*R<w):0){P=+g[d+44>>2];g[b+316>>2]=f;g[b+320>>2]=e;g[b+324>>2]=h;g[b+328>>2]=P;T=a[j>>0]|0;a[b+332>>0]=T<<1&2|a[b+332>>0]&-16|T&4|T<<2&8;P=+g[d+52>>2];Q=+g[d+60>>2];R=+g[d+56>>2];g[b+336>>2]=0.0;g[b+340>>2]=P;g[b+344>>2]=Q;g[b+348>>2]=R}G=+g[b+336>>2];H=+g[b+340>>2];I=+g[b+344>>2];R=+g[b+348>>2];K=+g[b+84>>2]*G+ +g[b+100>>2]*H+ +g[b+116>>2]*I+ +g[b+132>>2]*R;O=G*+g[b+88>>2]+H*+g[b+104>>2]+I*+g[b+120>>2]+R*+g[b+136>>2];Q=G*+g[b+92>>2]+H*+g[b+108>>2]+I*+g[b+124>>2]+R*+g[b+140>>2];g[b+244>>2]=K;g[b+248>>2]=O;g[b+252>>2]=Q;g[b+256>>2]=0.0;L=+g[b+164>>2]*G+ +g[b+180>>2]*H+ +g[b+196>>2]*I+ +g[b+212>>2]*R;P=G*+g[b+168>>2]+H*+g[b+184>>2]+I*+g[b+200>>2]+R*+g[b+216>>2];R=G*+g[b+172>>2]+H*+g[b+188>>2]+I*+g[b+204>>2]+R*+g[b+220>>2];g[b+260>>2]=L;g[b+264>>2]=P;g[b+268>>2]=R;g[b+272>>2]=0.0;g[b+276>>2]=K-L;g[b+280>>2]=O-P;g[b+284>>2]=Q-R;g[b+288>>2]=0.0;uC(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)j=+g[b+348>>2]>=0.0&1;else j=0;a[b+312>>0]=j;T=j;T=T<<24>>24!=0;i=d;return T|0};case 2:{k=+g[b+4>>2];f=+g[b+8>>2];m=+g[b+12>>2];e=+g[b+20>>2]-k;h=+g[b+24>>2]-f;l=+g[b+28>>2]-m;do if((0.0-k)*e+(0.0-f)*h+(0.0-m)*l>0.0)if((0.0-k)*e+(0.0-f)*h+(0.0-m)*l<e*e+h*h+l*l){a[b+332>>0]=J&-16|3;e=((0.0-k)*e+(0.0-f)*h+(0.0-m)*l)/(e*e+h*h+l*l);break}else{a[b+332>>0]=J&-16|2;e=1.0;break}else{a[b+332>>0]=J&-16|1;e=0.0}while(0);g[b+336>>2]=1.0-e;g[b+340>>2]=e;g[b+344>>2]=0.0;g[b+348>>2]=0.0;K=+g[b+84>>2];O=+g[b+88>>2];Q=+g[b+92>>2];K=K+e*(+g[b+100>>2]-K);O=O+e*(+g[b+104>>2]-O);Q=Q+e*(+g[b+108>>2]-Q);g[b+244>>2]=K;g[b+248>>2]=O;g[b+252>>2]=Q;g[b+256>>2]=0.0;L=+g[b+164>>2];P=+g[b+168>>2];R=+g[b+172>>2];L=L+e*(+g[b+180>>2]-L);P=P+e*(+g[b+184>>2]-P);R=R+e*(+g[b+188>>2]-R);g[b+260>>2]=L;g[b+264>>2]=P;g[b+268>>2]=R;g[b+272>>2]=0.0;g[b+276>>2]=K-L;g[b+280>>2]=O-P;g[b+284>>2]=Q-R;g[b+288>>2]=0.0;uC(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)j=+g[b+348>>2]>=0.0&1;else j=0;a[b+312>>0]=j;T=j;T=T<<24>>24!=0;i=d;return T|0};case 0:{a[b+312>>0]=0;T=0;T=T<<24>>24!=0;i=d;return T|0};case 3:{c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=0;c[d+28>>2]=0;wC(d+16|0,b+4|0,b+20|0,b+36|0,b+316|0);H=+g[b+336>>2];I=+g[b+340>>2];R=+g[b+344>>2];K=+g[b+84>>2]*H+ +g[b+100>>2]*I+ +g[b+116>>2]*R;O=H*+g[b+88>>2]+I*+g[b+104>>2]+R*+g[b+120>>2];Q=H*+g[b+92>>2]+I*+g[b+108>>2]+R*+g[b+124>>2];g[b+244>>2]=K;g[b+248>>2]=O;g[b+252>>2]=Q;g[b+256>>2]=0.0;L=+g[b+164>>2]*H+ +g[b+180>>2]*I+ +g[b+196>>2]*R;P=H*+g[b+168>>2]+I*+g[b+184>>2]+R*+g[b+200>>2];R=H*+g[b+172>>2]+I*+g[b+188>>2]+R*+g[b+204>>2];g[b+260>>2]=L;g[b+264>>2]=P;g[b+268>>2]=R;g[b+272>>2]=0.0;g[b+276>>2]=K-L;g[b+280>>2]=O-P;g[b+284>>2]=Q-R;g[b+288>>2]=0.0;uC(b,b+332|0);if((+g[b+336>>2]>=0.0?+g[b+340>>2]>=0.0:0)?+g[b+344>>2]>=0.0:0)j=+g[b+348>>2]>=0.0&1;else j=0;a[b+312>>0]=j;T=j;T=T<<24>>24!=0;i=d;return T|0};default:{a[b+312>>0]=0;T=0;T=T<<24>>24!=0;i=d;return T|0}}return 0}function wC(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;r=i;o=a[h+16>>0]&-16;a[h+16>>0]=o;l=+g[e>>2];k=+g[d>>2];n=+g[e+4>>2];m=+g[d+4>>2];p=+g[e+8>>2];j=+g[d+8>>2];q=+g[f>>2];s=+g[f+4>>2];t=+g[f+8>>2];u=+g[b>>2];v=+g[b+4>>2];y=+g[b+8>>2];w=(l-k)*(u-k)+(n-m)*(v-m)+(p-j)*(y-j);x=(q-k)*(u-k)+(s-m)*(v-m)+(t-j)*(y-j);if(!(!(w<=0.0)|!(x<=0.0))){c[h+0>>2]=c[d+0>>2];c[h+4>>2]=c[d+4>>2];c[h+8>>2]=c[d+8>>2];c[h+12>>2]=c[d+12>>2];a[h+16>>0]=o|1;g[h+20>>2]=1.0;g[h+24>>2]=0.0;g[h+28>>2]=0.0;g[h+32>>2]=0.0;i=r;return}z=(l-k)*(u-l)+(n-m)*(v-n)+(p-j)*(y-p);A=(q-k)*(u-l)+(s-m)*(v-n)+(t-j)*(y-p);if(!(!(z>=0.0)|!(A<=z))){c[h+0>>2]=c[e+0>>2];c[h+4>>2]=c[e+4>>2];c[h+8>>2]=c[e+8>>2];c[h+12>>2]=c[e+12>>2];a[h+16>>0]=o|2;g[h+20>>2]=0.0;g[h+24>>2]=1.0;g[h+28>>2]=0.0;g[h+32>>2]=0.0;i=r;return}if(!((w>=0.0?!(w*A-z*x<=0.0):1)|!(z<=0.0))){g[h>>2]=k+(l-k)*(w/(w-z));g[h+4>>2]=m+(n-m)*(w/(w-z));g[h+8>>2]=j+(p-j)*(w/(w-z));g[h+12>>2]=0.0;a[h+16>>0]=o|3;g[h+20>>2]=1.0-w/(w-z);g[h+24>>2]=w/(w-z);g[h+28>>2]=0.0;g[h+32>>2]=0.0;i=r;return}B=(l-k)*(u-q)+(n-m)*(v-s)+(p-j)*(y-t);u=(q-k)*(u-q)+(s-m)*(v-s)+(t-j)*(y-t);if(!(!(u>=0.0)|!(B<=u))){c[h+0>>2]=c[f+0>>2];c[h+4>>2]=c[f+4>>2];c[h+8>>2]=c[f+8>>2];c[h+12>>2]=c[f+12>>2];a[h+16>>0]=o|4;g[h+20>>2]=0.0;g[h+24>>2]=0.0;g[h+28>>2]=1.0;g[h+32>>2]=0.0;i=r;return}if(!((x>=0.0?!(B*x-w*u<=0.0):1)|!(u<=0.0))){g[h>>2]=k+(q-k)*(x/(x-u));g[h+4>>2]=m+(s-m)*(x/(x-u));g[h+8>>2]=j+(t-j)*(x/(x-u));g[h+12>>2]=0.0;a[h+16>>0]=o|5;g[h+20>>2]=1.0-x/(x-u);g[h+24>>2]=0.0;g[h+28>>2]=x/(x-u);g[h+32>>2]=0.0;i=r;return}if((z*u-B*A<=0.0?A-z>=0.0:0)?B-u>=0.0:0){B=(A-z)/(A-z+(B-u));g[h>>2]=l+(q-l)*B;g[h+4>>2]=n+(s-n)*B;g[h+8>>2]=p+(t-p)*B;g[h+12>>2]=0.0;a[h+16>>0]=o|6;g[h+20>>2]=0.0;g[h+24>>2]=1.0-B;g[h+28>>2]=B;g[h+32>>2]=0.0;i=r;return}v=1.0/(w*A-z*x+(z*u-B*A+(B*x-w*u)));y=(B*x-w*u)*v;B=(w*A-z*x)*v;g[h>>2]=(q-k)*B+(k+(l-k)*y);g[h+4>>2]=(s-m)*B+(m+(n-m)*y);g[h+8>>2]=(t-j)*B+((p-j)*y+j);g[h+12>>2]=0.0;a[h+16>>0]=o|7;g[h+20>>2]=1.0-y-B;g[h+24>>2]=y;g[h+28>>2]=B;g[h+32>>2]=0.0;i=r;return}function xC(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0;e=i;i=i+96|0;p=+g[b+48>>2]- +g[b+112>>2];j=+g[b+52>>2]- +g[b+116>>2];k=+g[b+56>>2]- +g[b+120>>2];n=p*+g[b+64>>2]+j*+g[b+80>>2]+k*+g[b+96>>2];m=p*+g[b+68>>2]+j*+g[b+84>>2]+k*+g[b+100>>2];k=p*+g[b+72>>2]+j*+g[b+88>>2]+k*+g[b+104>>2];q=c[a+8>>2]|0;s=c[a+4>>2]|0;j=+g[s+28>>2]*+g[s+12>>2];p=j+ +g[a+12>>2];w=+g[q+72>>2];u=+g[q+56>>2];t=+g[q+76>>2];B=+g[q+60>>2];v=+g[q+80>>2];x=+g[q+64>>2];y=+g[q+88>>2];z=+g[q+92>>2];A=+g[q+96>>2];C=(t-B)*(A-x)-(v-x)*(z-B);l=(v-x)*(y-u)-(w-u)*(A-x);h=(w-u)*(z-B)-(t-B)*(y-u);o=1.0/+Q(+(h*h+(C*C+l*l)));r=(n-u)*o*C+o*l*(m-B)+o*h*(k-x);if(r<0.0){r=r*-1.0;h=o*h*-1.0;l=o*l*-1.0;o=o*C*-1.0}else{h=o*h;l=o*l;o=o*C}if(!(r<p)){i=e;return}C=(k-x)*((w-u)*l-(t-B)*o)+((n-u)*((t-B)*h-(v-x)*l)+(m-B)*((v-x)*o-(w-u)*h));D=(k-v)*((y-w)*l-(z-t)*o)+((n-w)*((z-t)*h-(A-v)*l)+(m-t)*((A-v)*o-(y-w)*h));E=(k-A)*((u-y)*l-(B-z)*o)+((n-y)*((B-z)*h-(x-A)*l)+(m-z)*((x-A)*o-(u-y)*h));if(!(C>0.0&D>0.0&E>0.0)?!(C<=0.0)|!(D<=0.0)|!(E<=0.0):0){if((Pb[c[(c[q>>2]|0)+100>>2]&127](q)|0)<=0){i=e;return}r=0.0;t=0.0;y=0.0;s=0;q=0;do{F=c[a+8>>2]|0;vc[c[(c[F>>2]|0)+104>>2]&127](F,q,e+80|0,e+64|0);w=+g[e+80>>2];z=+g[e+84>>2];D=+g[e+88>>2];v=+g[e+64>>2]-w;x=+g[e+68>>2]-z;E=+g[e+72>>2]-D;do if((n-w)*v+(m-z)*x+(k-D)*E>0.0)if((n-w)*v+(m-z)*x+(k-D)*E<v*v+x*x+E*E){u=((n-w)*v+(m-z)*x+(k-D)*E)/(v*v+x*x+E*E);A=n-w-v*u;B=m-z-x*u;C=k-D-E*u;break}else{A=n-w-v;B=m-z-x;C=k-D-E;u=1.0;break}else{A=n-w;B=m-z;C=k-D;u=0.0}while(0);if(C*C+(B*B+A*A)<p*p){y=D+E*u;t=z+x*u;r=w+v*u;s=1}q=q+1|0;F=c[a+8>>2]|0}while((q|0)<(Pb[c[(c[F>>2]|0)+100>>2]&127](F)|0));if(!(s&1)){i=e;return}else{u=p*p;p=r}}else{u=p*p;p=n-o*r;t=m-l*r;y=k-h*r}n=n-p;m=m-t;k=k-y;if(!(n*n+m*m+k*k<u)){i=e;return}if(n*n+m*m+k*k>1.1920928955078125e-7){h=+Q(+(n*n+m*m+k*k));j=j-h;o=n*(1.0/h);l=m*(1.0/h);h=k*(1.0/h)}j=-j;if(f){z=+g[b+64>>2];A=+g[b+68>>2];B=+g[b+72>>2];C=z*o+A*l+B*h;n=+g[b+80>>2];r=+g[b+84>>2];u=+g[b+88>>2];D=o*n+l*r+h*u;v=+g[b+96>>2];w=+g[b+100>>2];x=+g[b+104>>2];E=o*v+l*w+h*x;g[e+48>>2]=-C;g[e+52>>2]=-D;g[e+56>>2]=-E;g[e+60>>2]=0.0;D=p*n+t*r+y*u+ +g[b+116>>2]+D*j;E=p*v+t*w+y*x+ +g[b+120>>2]+E*j;g[e+32>>2]=p*z+t*A+y*B+ +g[b+112>>2]+C*j;g[e+36>>2]=D;g[e+40>>2]=E;g[e+44>>2]=0.0;qc[c[(c[d>>2]|0)+16>>2]&15](d,e+48|0,e+32|0,j);i=e;return}else{F=c[(c[d>>2]|0)+16>>2]|0;A=+g[b+64>>2];B=+g[b+68>>2];C=+g[b+72>>2];v=+g[b+80>>2];w=+g[b+84>>2];D=+g[b+88>>2];x=+g[b+96>>2];z=+g[b+100>>2];E=+g[b+104>>2];g[e+16>>2]=A*o+B*l+C*h;g[e+20>>2]=o*v+l*w+h*D;g[e+24>>2]=o*x+l*z+h*E;g[e+28>>2]=0.0;D=p*v+t*w+y*D+ +g[b+116>>2];E=p*x+t*z+y*E+ +g[b+120>>2];g[e>>2]=p*A+t*B+y*C+ +g[b+112>>2];g[e+4>>2]=D;g[e+8>>2]=E;g[e+12>>2]=0.0;qc[F&15](d,e+16|0,e,j);i=e;return}}function yC(a){a=a|0;return}function zC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function AC(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=17896;if((a[b+8>>0]|0)!=0?(e=c[b+12>>2]|0,(e|0)!=0):0){f=c[b+4>>2]|0;Nb[c[(c[f>>2]|0)+16>>2]&127](f,e)}gF(b);i=d;return}function BC(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=17896;if(!(a[b+8>>0]|0)){i=d;return}e=c[b+12>>2]|0;if(!e){i=d;return}b=c[b+4>>2]|0;Nb[c[(c[b>>2]|0)+16>>2]&127](b,e);i=d;return}function CC(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0;j=i;i=i+144|0;k=c[b+12>>2]|0;if(!k){i=j;return}m=c[d+4>>2]|0;l=c[e+4>>2]|0;c[h+4>>2]=k;g[j+140>>2]=999999984306749400.0;k=c[d+12>>2]|0;c[j+12>>2]=c[k+0>>2];c[j+16>>2]=c[k+4>>2];c[j+20>>2]=c[k+8>>2];c[j+24>>2]=c[k+12>>2];c[j+28>>2]=c[k+16>>2];c[j+32>>2]=c[k+20>>2];c[j+36>>2]=c[k+24>>2];c[j+40>>2]=c[k+28>>2];c[j+44>>2]=c[k+32>>2];c[j+48>>2]=c[k+36>>2];c[j+52>>2]=c[k+40>>2];c[j+56>>2]=c[k+44>>2];c[j+60>>2]=c[k+48>>2];c[j+64>>2]=c[k+52>>2];c[j+68>>2]=c[k+56>>2];c[j+72>>2]=c[k+60>>2];e=c[e+12>>2]|0;c[j+76>>2]=c[e+0>>2];c[j+80>>2]=c[e+4>>2];c[j+84>>2]=c[e+8>>2];c[j+88>>2]=c[e+12>>2];c[j+92>>2]=c[e+16>>2];c[j+96>>2]=c[e+20>>2];c[j+100>>2]=c[e+24>>2];c[j+104>>2]=c[e+28>>2];c[j+108>>2]=c[e+32>>2];c[j+112>>2]=c[e+36>>2];c[j+116>>2]=c[e+40>>2];c[j+120>>2]=c[e+44>>2];c[j+124>>2]=c[e+48>>2];c[j+128>>2]=c[e+52>>2];c[j+132>>2]=c[e+56>>2];c[j+136>>2]=c[e+60>>2];c[j>>2]=17976;c[j+4>>2]=m;c[j+8>>2]=l;FC(j,j+12|0,h,c[f+20>>2]|0,0);if(!(a[b+8>>0]|0)){i=j;return}d=c[h+4>>2]|0;if(!(c[d+748>>2]|0)){i=j;return}k=c[d+740>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;if((k|0)==(e|0)){xA(d,k+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=j;return}else{xA(d,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,e+4|0);i=j;return}}function DC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function EC(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+12>>2]|0)){i=e;return}if(!(a[b+8>>0]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+12>>2];c[d+4>>2]=h+1;i=e;return}function FC(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0.0,na=0.0,oa=0.0,pa=0,qa=0.0,ra=0.0,sa=0,ta=0,ua=0,va=0.0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0;e=i;i=i+656|0;g[e+48>>2]=+g[b>>2];g[e>>2]=+g[b+64>>2];f=e+52|0;g[f>>2]=+g[b+4>>2];g[e+4>>2]=+g[b+68>>2];g[e+56>>2]=+g[b+8>>2];g[e+8>>2]=+g[b+72>>2];g[e+64>>2]=+g[b+16>>2];g[e+16>>2]=+g[b+80>>2];g[e+68>>2]=+g[b+20>>2];g[e+20>>2]=+g[b+84>>2];g[e+72>>2]=+g[b+24>>2];g[e+24>>2]=+g[b+88>>2];g[e+80>>2]=+g[b+32>>2];g[e+32>>2]=+g[b+96>>2];g[e+84>>2]=+g[b+36>>2];g[e+36>>2]=+g[b+100>>2];g[e+88>>2]=+g[b+40>>2];g[e+40>>2]=+g[b+104>>2];Da=c[a+4>>2]|0;A=+g[Da+28>>2];B=+g[Da+32>>2];E=+g[Da+36>>2];C=+$b[c[(c[Da>>2]|0)+48>>2]&15](Da);D=+$b[c[(c[Da>>2]|0)+48>>2]&15](Da);E=(E+ +$b[c[(c[Da>>2]|0)+48>>2]&15](Da))*2.0;Da=c[a+8>>2]|0;w=+g[Da+28>>2];y=+g[Da+32>>2];q=+g[Da+36>>2];v=+$b[c[(c[Da>>2]|0)+48>>2]&15](Da);x=+$b[c[(c[Da>>2]|0)+48>>2]&15](Da);q=(q+ +$b[c[(c[Da>>2]|0)+48>>2]&15](Da))*2.0;R=+g[b+112>>2]- +g[b+48>>2];S=+g[b+116>>2]- +g[b+52>>2];O=+g[b+120>>2]- +g[b+56>>2];k=+g[e+48>>2];j=+g[e+64>>2];h=+g[e+80>>2];I=+g[f>>2];J=+g[e+68>>2];H=+g[e+84>>2];G=+g[e+56>>2];F=+g[e+72>>2];z=+g[e+88>>2];g[e+548>>2]=(A+C)*2.0*.5;g[e+552>>2]=(B+D)*2.0*.5;g[e+556>>2]=E*.5;g[e+536>>2]=(w+v)*2.0*.5;g[e+540>>2]=(y+x)*2.0*.5;g[e+544>>2]=q*.5;p=+g[e>>2];u=+g[e+16>>2];r=+g[e+32>>2];o=+g[e+4>>2];t=+g[e+20>>2];s=+g[e+36>>2];n=+g[e+8>>2];m=+g[e+24>>2];l=+g[e+40>>2];X=+P(+(k*p+j*u+h*r));T=+P(+(k*o+j*t+h*s));K=+P(+(k*n+j*m+h*l));Z=+P(+(p*I+u*J+r*H));V=+P(+(o*I+t*J+s*H));N=+P(+(n*I+m*J+l*H));L=+P(+(p*G+u*F+r*z));M=+P(+(o*G+t*F+s*z));U=+P(+(n*G+m*F+l*z));$=+P(+(R*k+S*j+O*h))-(q*.5*K+((A+C)*2.0*.5+X*(w+v)*2.0*.5+T*(y+x)*2.0*.5));if($>0.0){i=e;return}if($>-3.4028234663852886e+38){ga=1;W=R*k+S*j+O*h<0.0&1;a=e+48|0}else{ga=0;W=0;a=0;$=-3.4028234663852886e+38}_=+P(+(R*I+S*J+O*H))-((B+D)*2.0*.5+Z*(w+v)*2.0*.5+V*(y+x)*2.0*.5+N*q*.5);if(_>0.0){i=e;return}if(_>$){ga=2;W=R*I+S*J+O*H<0.0&1;a=f}else _=$;$=+P(+(R*G+S*F+O*z))-(E*.5+L*(w+v)*2.0*.5+M*(y+x)*2.0*.5+U*q*.5);if($>0.0){i=e;return}if($>_){ga=3;W=R*G+S*F+O*z<0.0&1;a=e+56|0;_=$}$=+P(+(R*p+S*u+O*r))-((w+v)*2.0*.5+(X*(A+C)*2.0*.5+Z*(B+D)*2.0*.5+L*E*.5));if($>0.0){i=e;return}if($>_){ga=4;W=R*p+S*u+O*r<0.0&1;a=e;_=$}$=+P(+(R*o+S*t+O*s))-((y+x)*2.0*.5+(T*(A+C)*2.0*.5+V*(B+D)*2.0*.5+M*E*.5));if($>0.0){i=e;return}if($>_){ga=5;W=R*o+S*t+O*s<0.0&1;a=e+4|0;_=$}qa=+P(+(R*n+S*m+O*l))-(q*.5+(K*(A+C)*2.0*.5+N*(B+D)*2.0*.5+U*E*.5));if(qa>0.0){i=e;return}if(qa>_){ga=6;W=R*n+S*m+O*l<0.0&1;a=e+8|0}else qa=_;ba=(R*G+S*F+O*z)*(p*I+u*J+r*H)-(R*I+S*J+O*H)*(p*G+u*F+r*z);$=+P(+ba)-((L+9999999747378752.0e-21)*(B+D)*2.0*.5+(Z+9999999747378752.0e-21)*E*.5+(K+9999999747378752.0e-21)*(y+x)*2.0*.5+(T+9999999747378752.0e-21)*q*.5);if($>1.1920928955078125e-7){i=e;return}da=(p*G+u*F+r*z)*(p*G+u*F+r*z)+0.0;aa=(p*I+u*J+r*H)*(p*I+u*J+r*H);_=+Q(+(aa+da));if(_>1.1920928955078125e-7?$/_*1.0499999523162842>qa:0){oa=(p*I+u*J+r*H)/_;na=-(p*G+u*F+r*z)/_;ma=0.0/_;ga=7;W=ba<0.0&1;a=0;qa=$/_}else{oa=0.0;na=0.0;ma=0.0}ca=(R*G+S*F+O*z)*(o*I+t*J+s*H)-(R*I+S*J+O*H)*(o*G+t*F+s*z);$=+P(+ca)-((M+9999999747378752.0e-21)*(B+D)*2.0*.5+(V+9999999747378752.0e-21)*E*.5+(K+9999999747378752.0e-21)*(w+v)*2.0*.5+(X+9999999747378752.0e-21)*q*.5);if($>1.1920928955078125e-7){i=e;return}ea=(o*G+t*F+s*z)*(o*G+t*F+s*z)+0.0;_=(o*I+t*J+s*H)*(o*I+t*J+s*H);ba=+Q(+(_+ea));if(ba>1.1920928955078125e-7?$/ba*1.0499999523162842>qa:0){oa=(o*I+t*J+s*H)/ba;na=-(o*G+t*F+s*z)/ba;ma=0.0/ba;ga=8;W=ca<0.0&1;a=0;qa=$/ba}va=(R*G+S*F+O*z)*(n*I+m*J+l*H)-(R*I+S*J+O*H)*(n*G+m*F+l*z);ba=+P(+va)-((U+9999999747378752.0e-21)*(B+D)*2.0*.5+(N+9999999747378752.0e-21)*E*.5+(T+9999999747378752.0e-21)*(w+v)*2.0*.5+(X+9999999747378752.0e-21)*(y+x)*2.0*.5);if(ba>1.1920928955078125e-7){i=e;return}ca=(n*G+m*F+l*z)*(n*G+m*F+l*z)+0.0;$=(n*I+m*J+l*H)*(n*I+m*J+l*H);ra=+Q(+($+ca));if(ra>1.1920928955078125e-7?ba/ra*1.0499999523162842>qa:0){oa=(n*I+m*J+l*H)/ra;na=-(n*G+m*F+l*z)/ra;ma=0.0/ra;ga=9;W=va<0.0&1;a=0;qa=ba/ra}va=(R*k+S*j+O*h)*(p*G+u*F+r*z)-(R*G+S*F+O*z)*(k*p+j*u+h*r);ra=+P(+va)-((L+9999999747378752.0e-21)*(A+C)*2.0*.5+(X+9999999747378752.0e-21)*E*.5+(N+9999999747378752.0e-21)*(y+x)*2.0*.5+(V+9999999747378752.0e-21)*q*.5);if(ra>1.1920928955078125e-7){i=e;return}ba=(k*p+j*u+h*r)*(k*p+j*u+h*r);da=+Q(+(ba+da));do if(da>1.1920928955078125e-7){if(!(ra/da*1.0499999523162842>qa))break;oa=-(k*p+j*u+h*r)/da;na=0.0/da;ma=(p*G+u*F+r*z)/da;ga=10;W=va<0.0&1;a=0;qa=ra/da}while(0);va=(R*k+S*j+O*h)*(o*G+t*F+s*z)-(R*G+S*F+O*z)*(k*o+j*t+h*s);ra=+P(+va)-((M+9999999747378752.0e-21)*(A+C)*2.0*.5+(T+9999999747378752.0e-21)*E*.5+(N+9999999747378752.0e-21)*(w+v)*2.0*.5+(Z+9999999747378752.0e-21)*q*.5);if(ra>1.1920928955078125e-7){i=e;return}da=(k*o+j*t+h*s)*(k*o+j*t+h*s);ea=+Q(+(da+ea));do if(ea>1.1920928955078125e-7){if(!(ra/ea*1.0499999523162842>qa))break;oa=-(k*o+j*t+h*s)/ea;na=0.0/ea;ma=(o*G+t*F+s*z)/ea;ga=11;W=va<0.0&1;a=0;qa=ra/ea}while(0);va=(R*k+S*j+O*h)*(n*G+m*F+l*z)-(R*G+S*F+O*z)*(k*n+j*m+h*l);ra=+P(+va)-((U+9999999747378752.0e-21)*(A+C)*2.0*.5+(K+9999999747378752.0e-21)*E*.5+(V+9999999747378752.0e-21)*(w+v)*2.0*.5+(Z+9999999747378752.0e-21)*(y+x)*2.0*.5);if(ra>1.1920928955078125e-7){i=e;return}ea=(k*n+j*m+h*l)*(k*n+j*m+h*l);ca=+Q(+(ea+ca));do if(ca>1.1920928955078125e-7){if(!(ra/ca*1.0499999523162842>qa))break;oa=-(k*n+j*m+h*l)/ca;na=0.0/ca;ma=(n*G+m*F+l*z)/ca;ga=12;W=va<0.0&1;a=0;qa=ra/ca}while(0);ca=(R*I+S*J+O*H)*(k*p+j*u+h*r)-(R*k+S*j+O*h)*(p*I+u*J+r*H);X=+P(+ca)-((Z+9999999747378752.0e-21)*(A+C)*2.0*.5+(X+9999999747378752.0e-21)*(B+D)*2.0*.5+(U+9999999747378752.0e-21)*(y+x)*2.0*.5+(M+9999999747378752.0e-21)*q*.5);if(X>1.1920928955078125e-7){i=e;return}Z=+Q(+(ba+aa+0.0));do if(Z>1.1920928955078125e-7){if(!(X/Z*1.0499999523162842>qa))break;oa=0.0/Z;na=(k*p+j*u+h*r)/Z;ma=-(p*I+u*J+r*H)/Z;ga=13;W=ca<0.0&1;a=0;qa=X/Z}while(0);X=(R*I+S*J+O*H)*(k*o+j*t+h*s)-(R*k+S*j+O*h)*(o*I+t*J+s*H);T=+P(+X)-((V+9999999747378752.0e-21)*(A+C)*2.0*.5+(T+9999999747378752.0e-21)*(B+D)*2.0*.5+(U+9999999747378752.0e-21)*(w+v)*2.0*.5+(L+9999999747378752.0e-21)*q*.5);if(T>1.1920928955078125e-7){i=e;return}U=+Q(+(da+_+0.0));do if(U>1.1920928955078125e-7){if(!(T/U*1.0499999523162842>qa)){fa=a;break}oa=0.0/U;na=(k*o+j*t+h*s)/U;ma=-(o*I+t*J+s*H)/U;ga=14;W=X<0.0&1;fa=0;qa=T/U}else fa=a;while(0);O=(R*I+S*J+O*H)*(k*n+j*m+h*l)-(R*k+S*j+O*h)*(n*I+m*J+l*H);K=+P(+O)-((N+9999999747378752.0e-21)*(A+C)*2.0*.5+(K+9999999747378752.0e-21)*(B+D)*2.0*.5+(M+9999999747378752.0e-21)*(w+v)*2.0*.5+(L+9999999747378752.0e-21)*(y+x)*2.0*.5);if(K>1.1920928955078125e-7){i=e;return}L=+Q(+(ea+$+0.0));do if(L>1.1920928955078125e-7){if(!(K/L*1.0499999523162842>qa)){a=55;break}ma=-(n*I+m*J+l*H)/L;na=(k*n+j*m+h*l)/L;oa=0.0/L;ga=15;W=O<0.0&1;qa=K/L;a=58}else a=55;while(0);do if((a|0)==55){if(!ga){i=e;return}if(!fa){a=58;break}h=+g[fa>>2];j=+g[fa+16>>2];k=+g[fa+32>>2]}while(0);if((a|0)==58){h=ma*+g[e+48>>2]+na*+g[f>>2]+oa*G;j=ma*+g[e+64>>2]+na*+g[e+68>>2]+oa*F;k=ma*+g[e+80>>2]+na*+g[e+84>>2]+oa*z}if(W){h=-h;j=-j;k=-k}if((ga|0)>6){ca=+g[e+48>>2];da=+g[e+64>>2];na=+g[e+80>>2];ma=(h*ca+j*da+k*na>0.0?1.0:-1.0)*(A+C)*2.0*.5;A=+g[f>>2];ea=+g[e+68>>2];ra=+g[e+84>>2];oa=(h*A+j*ea+k*ra>0.0?1.0:-1.0)*(B+D)*2.0*.5;va=(h*G+j*F+k*z>0.0?1.0:-1.0)*E*.5;A=+g[b+48>>2]+ma*ca+oa*A+va*G;B=+g[b+52>>2]+ma*da+oa*ea+va*F;z=+g[b+56>>2]+ma*na+oa*ra+va*z;c[e+520>>2]=c[b+112>>2];c[e+524>>2]=c[b+116>>2];c[e+528>>2]=c[b+120>>2];w=(h*p+j*u+k*r>0.0?-1.0:1.0)*(w+v)*2.0*.5;x=(h*o+j*t+k*s>0.0?-1.0:1.0)*(y+x)*2.0*.5;t=+g[e+524>>2]+w*u+x*t;r=+g[e+528>>2]+w*r+x*s;q=(h*n+j*m+k*l>0.0?-1.0:1.0)*q*.5;n=+g[e+520>>2]+w*p+x*o+q*n;g[e+520>>2]=n;g[e+524>>2]=t+q*m;g[e+528>>2]=r+q*l;Da=ga+ -7|0;u=+g[e+48+(((Da|0)/3|0)<<2)>>2];x=+g[e+48+(((Da|0)/3|0)+4<<2)>>2];w=+g[e+48+(((Da|0)/3|0)+8<<2)>>2];s=+g[e+(((Da|0)%3|0)<<2)>>2];p=+g[e+(((Da|0)%3|0)+4<<2)>>2];o=+g[e+(((Da|0)%3|0)+8<<2)>>2];v=1.0-(u*s+x*p+w*o)*(u*s+x*p+w*o);if(!(v<=9999999747378752.0e-20))u=(((n-A)*u+(t+q*m-B)*x+(r+q*l-z)*w)*(u*s+x*p+w*o)-((n-A)*s+(t+q*m-B)*p+(r+q*l-z)*o))*(1.0/v);else u=0.0;g[e+520>>2]=n+u*s;g[e+524>>2]=t+q*m+u*p;g[e+528>>2]=r+q*l+u*o;Da=c[(c[d>>2]|0)+16>>2]|0;g[e+504>>2]=-h;g[e+508>>2]=-j;g[e+512>>2]=-k;g[e+516>>2]=0.0;qc[Da&15](d,e+504|0,e+520|0,qa);i=e;return}W=(ga|0)<4;if(W){l=h;m=j;n=k;ha=e+48|0;ta=e;fa=e+548|0;pa=e+536|0;f=b+48|0;b=b+112|0}else{l=-h;m=-j;n=-k;ha=e;ta=e+48|0;fa=e+536|0;pa=e+548|0;f=b+112|0;b=b+48|0}o=l*+g[ta>>2]+m*+g[ta+16>>2]+n*+g[ta+32>>2];g[e+488>>2]=o;q=l*+g[ta+4>>2]+m*+g[ta+20>>2]+n*+g[ta+36>>2];g[e+492>>2]=q;p=l*+g[ta+8>>2]+m*+g[ta+24>>2]+n*+g[ta+40>>2];g[e+496>>2]=p;o=+P(+o);q=+P(+q);p=+P(+p);if(q>o){ja=q>p;sa=0;ia=q>p?1:2}else{ja=o>p;sa=o>p&1;ia=o>p?0:2}ua=ja?2:1;q=+g[pa+(ia<<2)>>2];p=+g[b>>2]- +g[f>>2];o=q*+g[ta+(ia<<2)>>2];if(+g[e+488+(ia<<2)>>2]<0.0){o=p+o;p=+g[b+4>>2]- +g[f+4>>2]+q*+g[ta+((ia|4)<<2)>>2];q=+g[b+8>>2]- +g[f+8>>2]+q*+g[ta+((ia|8)<<2)>>2]}else{o=p-o;p=+g[b+4>>2]- +g[f+4>>2]-q*+g[ta+((ia|4)<<2)>>2];q=+g[b+8>>2]- +g[f+8>>2]-q*+g[ta+((ia|8)<<2)>>2]}la=(W?-1:-4)+ga|0;if(!la){wa=1;xa=2}else if((la|0)==1){wa=0;xa=2}else{wa=0;xa=1}t=+g[ha+(wa<<2)>>2];u=+g[ha+((wa|4)<<2)>>2];v=+g[ha+((wa|8)<<2)>>2];r=o*t+p*u+q*v;w=+g[ha+(xa<<2)>>2];s=+g[ha+((xa|4)<<2)>>2];y=+g[ha+((xa|8)<<2)>>2];A=o*w+p*s+q*y;ka=ta+(sa<<2)|0;x=+g[ka>>2];ia=ta+((sa|4)<<2)|0;C=+g[ia>>2];b=ta+((sa|8)<<2)|0;D=+g[b>>2];ja=ta+(ua<<2)|0;z=+g[ja>>2];ha=ta+((ua|4)<<2)|0;B=+g[ha>>2];ga=ta+((ua|8)<<2)|0;E=+g[ga>>2];ra=+g[pa+(sa<<2)>>2];va=+g[pa+(ua<<2)>>2];qa=(t*z+u*B+v*E)*va;va=(w*z+s*B+y*E)*va;g[e+456>>2]=r-(t*x+u*C+v*D)*ra-qa;g[e+460>>2]=A-(w*x+s*C+y*D)*ra-va;g[e+464>>2]=r-(t*x+u*C+v*D)*ra+qa;g[e+468>>2]=A-(w*x+s*C+y*D)*ra+va;g[e+472>>2]=r+(t*x+u*C+v*D)*ra+qa;g[e+476>>2]=A+(w*x+s*C+y*D)*ra+va;g[e+480>>2]=r+(t*x+u*C+v*D)*ra-qa;g[e+484>>2]=A+(w*x+s*C+y*D)*ra-va;g[e+448>>2]=+g[fa+(wa<<2)>>2];g[e+452>>2]=+g[fa+(xa<<2)>>2];ua=0;za=4;xa=e+456|0;ta=e+384|0;a:while(1){sa=e+448+(ua<<2)|0;pa=1-ua|0;wa=-1;while(1){if((za|0)>0){F=+(wa|0);Ba=0;ya=xa;Aa=ta;while(1){Ca=ya+(ua<<2)|0;G=+g[Ca>>2];H=+g[sa>>2];if(F*G<H){g[Aa>>2]=+g[ya>>2];g[Aa+4>>2]=+g[ya+4>>2];Ba=Ba+1|0;if(Ba&8){za=Ba;break a}G=+g[Ca>>2];H=+g[sa>>2];Aa=Aa+8|0}Ca=ya;ya=ya+8|0;Da=(za|0)>1?ya:xa;I=+g[Da+(ua<<2)>>2];if(F*G<H^F*I<H){va=+g[Ca+(pa<<2)>>2];g[Aa+(pa<<2)>>2]=va+(F*H-G)*((+g[Da+(pa<<2)>>2]-va)/(I-G));g[Aa+(ua<<2)>>2]=F*+g[sa>>2];Ba=Ba+1|0;if(!(Ba&8))Aa=Aa+8|0;else{za=Ba;break a}}za=za+ -1|0;if((za|0)<=0){za=Ba;break}}}else za=0;ya=(ta|0)==(e+384|0)?e+592|0:e+384|0;if((wa|0)<0){xa=ta;ta=ya;wa=wa+2|0}else break}ua=ua+1|0;if((ua|0)<2){xa=ta;ta=ya}else break}if((ta|0)!=(e+384|0))mF(e+384|0,ta|0,za<<3|0)|0;if((za|0)<1){i=e;return}F=1.0/((t*x+u*C+v*D)*(w*z+s*B+y*E)-(w*x+s*C+y*D)*(t*z+u*B+v*E));G=+g[fa+(la<<2)>>2];H=+g[ka>>2];I=+g[ja>>2];J=+g[ia>>2];K=+g[ha>>2];L=+g[b>>2];M=+g[ga>>2];b=0;fa=0;do{Da=fa<<1;O=+g[e+384+(Da<<2)>>2];N=+g[e+384+((Da|1)<<2)>>2];oa=(w*z+s*B+y*E)*F*(O-r)-(t*z+u*B+v*E)*F*(N-A);va=(t*x+u*C+v*D)*F*(N-A)-(w*x+s*C+y*D)*F*(O-r);Da=b*3|0;qa=o+oa*H+va*I;g[e+288+(Da<<2)>>2]=qa;ra=p+oa*J+va*K;g[e+288+(Da+1<<2)>>2]=ra;va=q+oa*L+va*M;g[e+288+(Da+2<<2)>>2]=va;va=G-(l*qa+m*ra+n*va);g[e+256+(b<<2)>>2]=va;if(va>=0.0){Da=b<<1;g[e+384+(Da<<2)>>2]=O;g[e+384+((Da|1)<<2)>>2]=N;b=b+1|0}fa=fa+1|0}while((fa|0)!=(za|0));if((b|0)<1){i=e;return}fa=(b|0)<4?b:4;fa=(fa|0)<1?1:fa;if((b|0)<=(fa|0)){a=(b|0)>0;if(W){if(!a){i=e;return}a=f+4|0;W=f+8|0;h=-h;j=-j;k=-k;fa=0;do{Da=fa*3|0;g[e+240>>2]=+g[e+288+(Da<<2)>>2]+ +g[f>>2];g[e+244>>2]=+g[e+288+(Da+1<<2)>>2]+ +g[a>>2];g[e+248>>2]=+g[e+288+(Da+2<<2)>>2]+ +g[W>>2];Da=c[(c[d>>2]|0)+16>>2]|0;g[e+224>>2]=h;g[e+228>>2]=j;g[e+232>>2]=k;g[e+236>>2]=0.0;qc[Da&15](d,e+224|0,e+240|0,-+g[e+256+(fa<<2)>>2]);fa=fa+1|0}while((fa|0)!=(b|0));i=e;return}else{if(!a){i=e;return}W=f+4|0;fa=f+8|0;l=-h;n=-j;m=-k;a=0;do{Da=a*3|0;va=+g[e+256+(a<<2)>>2];g[e+208>>2]=+g[e+288+(Da<<2)>>2]+ +g[f>>2]-h*va;g[e+212>>2]=+g[e+288+(Da+1<<2)>>2]+ +g[W>>2]-j*va;g[e+216>>2]=+g[e+288+(Da+2<<2)>>2]+ +g[fa>>2]-k*va;Da=c[(c[d>>2]|0)+16>>2]|0;g[e+192>>2]=l;g[e+196>>2]=n;g[e+200>>2]=m;g[e+204>>2]=0.0;qc[Da&15](d,e+192|0,e+208|0,-va);a=a+1|0}while((a|0)!=(b|0));i=e;return}}if((b|0)>1){ha=1;ga=0;l=+g[e+256>>2];while(1){m=+g[e+256+(ha<<2)>>2];ia=m>l;ga=ia?ha:ga;ha=ha+1|0;if((ha|0)==(b|0))break;else l=ia?m:l}}else ga=0;if((b|0)==1){q=+g[e+384>>2];l=+g[e+388>>2];a=115}else if((b|0)!=2){ha=b+ -1|0;if((ha|0)>0){r=0.0;q=0.0;p=0.0;ia=0;do{Da=ia<<1;oa=+g[e+384+(Da<<2)>>2];qa=+g[e+384+(Da+3<<2)>>2];ra=+g[e+384+(Da+2<<2)>>2];va=+g[e+384+((Da|1)<<2)>>2];r=r+(oa*qa-ra*va);q=q+(oa+ra)*(oa*qa-ra*va);p=p+(qa+va)*(oa*qa-ra*va);ia=ia+1|0}while((ia|0)!=(ha|0))}else{r=0.0;q=0.0;p=0.0}Da=b<<1;o=+g[e+384+(Da+ -2<<2)>>2];n=+g[e+388>>2];m=+g[e+384>>2];l=+g[e+384+(Da+ -1<<2)>>2];r=r+(o*n-m*l);if(+P(+r)>1.1920928955078125e-7)r=1.0/(r*3.0);else r=999999984306749400.0;if((b|0)>0){q=r*(q+(o*n-m*l)*(o+m));l=r*(p+(o*n-m*l)*(l+n));a=115}else ha=0}else{q=(+g[e+384>>2]+ +g[e+392>>2])*.5;l=(+g[e+388>>2]+ +g[e+396>>2])*.5;a=115}if((a|0)==115){a=0;do{Da=a<<1;g[e+592+(a<<2)>>2]=+Y(+(+g[e+384+((Da|1)<<2)>>2]-l),+(+g[e+384+(Da<<2)>>2]-q));a=a+1|0}while((a|0)!=(b|0));a=0;do{c[e+560+(a<<2)>>2]=1;a=a+1|0}while((a|0)!=(b|0));ha=1}a=e+560+(ga<<2)|0;c[a>>2]=0;c[e+160>>2]=ga;b:do if((fa|0)>1){l=+g[e+592+(ga<<2)>>2];if(ha){ha=e+164|0;a=1}else{ha=e+164|0;b=1;while(1){c[ha>>2]=ga;c[a>>2]=0;b=b+1|0;if((b|0)==(fa|0))break b;else ha=ha+4|0}}while(1){m=+(a|0)*(6.2831854820251465/+(fa|0))+l;if(m>3.1415927410125732)m=m+-6.2831854820251465;c[ha>>2]=ga;ja=ga;ia=0;n=1.0e9;do{do if(c[e+560+(ia<<2)>>2]|0){o=+P(+(+g[e+592+(ia<<2)>>2]-m));if(o>3.1415927410125732)o=6.2831854820251465-o;if(!(o<n))break;c[ha>>2]=ia;ja=ia;n=o}while(0);ia=ia+1|0}while((ia|0)!=(b|0));c[e+560+(ja<<2)>>2]=0;a=a+1|0;if((a|0)==(fa|0))break;else ha=ha+4|0}}while(0);if((fa|0)<=0){i=e;return}a=f+4|0;b=f+8|0;m=-k;l=-j;n=-h;if(W){W=0;do{Da=c[e+160+(W<<2)>>2]|0;g[e+144>>2]=+g[e+288+(Da*3<<2)>>2]+ +g[f>>2];g[e+148>>2]=+g[e+288+((Da*3|0)+1<<2)>>2]+ +g[a>>2];g[e+152>>2]=+g[e+288+((Da*3|0)+2<<2)>>2]+ +g[b>>2];Ca=c[(c[d>>2]|0)+16>>2]|0;g[e+128>>2]=n;g[e+132>>2]=l;g[e+136>>2]=m;g[e+140>>2]=0.0;qc[Ca&15](d,e+128|0,e+144|0,-+g[e+256+(Da<<2)>>2]);W=W+1|0}while((W|0)<(fa|0));i=e;return}else{W=0;do{Ca=c[e+160+(W<<2)>>2]|0;oa=+g[e+288+(Ca*3<<2)>>2]+ +g[f>>2];g[e+144>>2]=oa;qa=+g[e+288+((Ca*3|0)+1<<2)>>2]+ +g[a>>2];g[e+148>>2]=qa;ra=+g[e+288+((Ca*3|0)+2<<2)>>2]+ +g[b>>2];g[e+152>>2]=ra;Da=c[(c[d>>2]|0)+16>>2]|0;g[e+112>>2]=n;g[e+116>>2]=l;g[e+120>>2]=m;g[e+124>>2]=0.0;va=+g[e+256+(Ca<<2)>>2];g[e+96>>2]=oa-h*va;g[e+100>>2]=qa-va*j;g[e+104>>2]=ra-va*k;g[e+108>>2]=0.0;qc[Da&15](d,e+112|0,e+96|0,-va);W=W+1|0}while((W|0)<(fa|0));i=e;return}}function GC(a){a=a|0;return}function HC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function IC(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+32|0;h=(a[b+28>>0]|0)!=0;f=h?e:d;e=h?d:e;d=c[f+4>>2]|0;h=c[d+16>>2]|0;j=c[b+12>>2]|0;if((j|0)<(h|0)){if((c[b+16>>2]|0)<(h|0)){if(!h){k=0;m=j}else{c[5004]=(c[5004]|0)+1;k=fF((h<<2|3)+16|0)|0;if(!k)k=0;else{c[(k+19&-16)+ -4>>2]=k;k=k+19&-16}m=c[b+12>>2]|0}if((m|0)>0){l=0;do{n=k+(l<<2)|0;if(n)c[n>>2]=c[(c[b+20>>2]|0)+(l<<2)>>2];l=l+1|0}while((l|0)!=(m|0))}l=c[b+20>>2]|0;if(l){if(a[b+24>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[l+ -4>>2]|0)}c[b+20>>2]=0}a[b+24>>0]=1;c[b+20>>2]=k;c[b+16>>2]=h;k=b+20|0}else k=b+20|0;do{l=(c[k>>2]|0)+(j<<2)|0;if(l)c[l>>2]=0;j=j+1|0}while((j|0)!=(h|0))}c[b+12>>2]=h;if((h|0)<=0){i=g;return}j=0;do{if(!(c[d+64>>2]|0)){l=c[(c[d+24>>2]|0)+(j*80|0)+64>>2]|0;m=c[f+8>>2]|0;n=c[f+12>>2]|0;c[g>>2]=f;c[g+4>>2]=l;c[g+8>>2]=m;c[g+12>>2]=n;c[g+16>>2]=-1;c[g+20>>2]=j;n=c[b+4>>2]|0;n=Tb[c[(c[n>>2]|0)+8>>2]&31](n,g,e,c[b+32>>2]|0)|0;c[(c[b+20>>2]|0)+(j<<2)>>2]=n}else c[(c[b+20>>2]|0)+(j<<2)>>2]=0;j=j+1|0}while((j|0)!=(h|0));i=g;return}function JC(a){a=a|0;var b=0;b=i;KC(a);gF(a);i=b;return}function KC(b){b=b|0;var d=0,e=0,f=0,g=0;d=i;c[b>>2]=18040;e=c[b+12>>2]|0;if((e|0)>0){f=0;do{g=c[(c[b+20>>2]|0)+(f<<2)>>2]|0;if(g){Lb[c[c[g>>2]>>2]&511](g);g=c[b+4>>2]|0;Nb[c[(c[g>>2]|0)+60>>2]&127](g,c[(c[b+20>>2]|0)+(f<<2)>>2]|0)}f=f+1|0}while((f|0)!=(e|0))}e=c[b+20>>2]|0;if(!e){a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;g=b+16|0;c[g>>2]=0;i=d;return}if(a[b+24>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+20>>2]=0;a[b+24>>0]=1;c[b+20>>2]=0;c[b+12>>2]=0;g=b+16|0;c[g>>2]=0;i=d;return}function LC(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0;j=i;i=i+320|0;k=(a[b+28>>0]|0)!=0;m=k?e:d;k=k?d:e;l=c[m+4>>2]|0;if((c[l+68>>2]|0)!=(c[b+40>>2]|0)){p=c[b+12>>2]|0;if((p|0)>0){o=0;do{n=c[(c[b+20>>2]|0)+(o<<2)>>2]|0;if(n){Lb[c[c[n>>2]>>2]&511](n);s=c[b+4>>2]|0;Nb[c[(c[s>>2]|0)+60>>2]&127](s,c[(c[b+20>>2]|0)+(o<<2)>>2]|0)}o=o+1|0}while((o|0)!=(p|0))}IC(b,d,e)}d=c[l+64>>2]|0;n=c[b+4>>2]|0;q=c[b+20>>2]|0;o=c[b+32>>2]|0;c[j+280>>2]=18120;c[j+284>>2]=m;c[j+288>>2]=k;c[j+292>>2]=n;c[j+296>>2]=f;c[j+300>>2]=h;c[j+304>>2]=q;c[j+308>>2]=o;f=j+272|0;a[f>>0]=1;o=j+268|0;c[o>>2]=0;n=j+260|0;c[n>>2]=0;c[j+264>>2]=0;e=c[b+12>>2]|0;if((e|0)>0){p=0;while(1){q=c[q+(p<<2)>>2]|0;if(q){Nb[c[(c[q>>2]|0)+16>>2]&127](q,j+256|0);e=c[n>>2]|0;if((e|0)>0){r=e;e=0;do{q=c[(c[o>>2]|0)+(e<<2)>>2]|0;if(c[q+748>>2]|0){c[h+4>>2]=q;s=c[q+740>>2]|0;r=c[(c[h+8>>2]|0)+8>>2]|0;if((s|0)==(r|0))xA(q,s+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);else xA(q,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,r+4|0);c[h+4>>2]=0;r=c[n>>2]|0}e=e+1|0}while((e|0)<(r|0));e=r}if((e|0)<0){if((c[j+264>>2]|0)<0){r=c[o>>2]|0;if((e|0)>0){q=0;do{if(q)c[0+(q<<2)>>2]=c[r+(q<<2)>>2];q=q+1|0}while((q|0)!=(e|0))}if(r){if(a[f>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[r+ -4>>2]|0)}c[o>>2]=0}a[f>>0]=1;c[o>>2]=0;c[j+264>>2]=0}do{q=(c[o>>2]|0)+(e<<2)|0;if(q)c[q>>2]=0;e=e+1|0}while((e|0)!=0)}c[n>>2]=0;e=c[b+12>>2]|0}p=p+1|0;if((p|0)>=(e|0))break;q=c[b+20>>2]|0}h=c[o>>2]|0;if(h){if(a[f>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[o>>2]=0}}a[f>>0]=1;c[o>>2]=0;c[n>>2]=0;c[j+264>>2]=0;if(!d){h=c[b+12>>2]|0;if((h|0)>0){d=0;do{MC(j+280|0,c[(c[l+24>>2]|0)+(d*80|0)+64>>2]|0,d);d=d+1|0}while((d|0)<(h|0))}else{i=j;return}}else{s=c[m+12>>2]|0;H=+g[s>>2];G=+g[s+16>>2];F=+g[s+32>>2];E=+g[s+4>>2];D=+g[s+20>>2];C=+g[s+36>>2];y=+g[s+8>>2];w=+g[s+24>>2];u=+g[s+40>>2];B=-+g[s+48>>2];A=-+g[s+52>>2];z=-+g[s+56>>2];s=c[k+12>>2]|0;Q=+g[s>>2];P=+g[s+16>>2];O=+g[s+32>>2];N=+g[s+4>>2];M=+g[s+20>>2];L=+g[s+36>>2];K=+g[s+8>>2];J=+g[s+24>>2];I=+g[s+40>>2];x=+g[s+48>>2];v=+g[s+52>>2];t=+g[s+56>>2];g[j+160>>2]=H*Q+G*P+F*O;g[j+164>>2]=H*N+G*M+F*L;g[j+168>>2]=H*K+G*J+F*I;g[j+172>>2]=0.0;g[j+176>>2]=E*Q+D*P+C*O;g[j+180>>2]=E*N+D*M+C*L;g[j+184>>2]=E*K+D*J+C*I;g[j+188>>2]=0.0;g[j+192>>2]=y*Q+w*P+u*O;g[j+196>>2]=y*N+w*M+u*L;g[j+200>>2]=y*K+w*J+u*I;g[j+204>>2]=0.0;g[j+208>>2]=H*B+G*A+F*z+(H*x+G*v+F*t);g[j+212>>2]=E*B+D*A+C*z+(E*x+D*v+C*t);g[j+216>>2]=y*B+w*A+u*z+(y*x+w*v+u*t);g[j+220>>2]=0.0;s=c[k+4>>2]|0;vc[c[(c[s>>2]|0)+8>>2]&127](s,j+160|0,j+240|0,j+224|0);c[j+128>>2]=c[j+240>>2];c[j+132>>2]=c[j+244>>2];c[j+136>>2]=c[j+248>>2];c[j+140>>2]=c[j+252>>2];c[j+144>>2]=c[j+224>>2];c[j+148>>2]=c[j+228>>2];c[j+152>>2]=c[j+232>>2];c[j+156>>2]=c[j+236>>2];by(c[d>>2]|0,j+128|0,j+280|0)}h=c[b+12>>2]|0;if((h|0)<=0){i=j;return}d=0;do{do if(c[(c[b+20>>2]|0)+(d<<2)>>2]|0){q=c[l+24>>2]|0;s=c[q+(d*80|0)+64>>2]|0;r=c[m+12>>2]|0;w=+g[r>>2];x=+g[r+4>>2];y=+g[r+8>>2];z=+g[r+16>>2];A=+g[r+20>>2];B=+g[r+24>>2];I=+g[r+32>>2];K=+g[r+36>>2];M=+g[r+40>>2];C=+g[q+(d*80|0)>>2];D=+g[q+(d*80|0)+16>>2];E=+g[q+(d*80|0)+32>>2];F=+g[q+(d*80|0)+4>>2];G=+g[q+(d*80|0)+20>>2];H=+g[q+(d*80|0)+36>>2];J=+g[q+(d*80|0)+8>>2];L=+g[q+(d*80|0)+24>>2];N=+g[q+(d*80|0)+40>>2];u=+g[q+(d*80|0)+48>>2];v=+g[q+(d*80|0)+52>>2];Q=+g[q+(d*80|0)+56>>2];O=+g[r+48>>2]+(w*u+x*v+y*Q);P=+g[r+52>>2]+(z*u+A*v+B*Q);Q=+g[r+56>>2]+(I*u+K*v+M*Q);g[j+64>>2]=w*C+x*D+y*E;g[j+68>>2]=w*F+x*G+y*H;g[j+72>>2]=w*J+x*L+y*N;g[j+76>>2]=0.0;g[j+80>>2]=z*C+A*D+B*E;g[j+84>>2]=z*F+A*G+B*H;g[j+88>>2]=z*J+A*L+B*N;g[j+92>>2]=0.0;g[j+96>>2]=I*C+K*D+M*E;g[j+100>>2]=I*F+K*G+M*H;g[j+104>>2]=I*J+K*L+M*N;g[j+108>>2]=0.0;g[j+112>>2]=O;g[j+116>>2]=P;g[j+120>>2]=Q;g[j+124>>2]=0.0;vc[c[(c[s>>2]|0)+8>>2]&127](s,j+64|0,j+48|0,j+32|0);s=c[k+4>>2]|0;vc[c[(c[s>>2]|0)+8>>2]&127](s,c[k+12>>2]|0,j+16|0,j);if(!(+g[j+48>>2]>+g[j>>2])?!(+g[j+32>>2]<+g[j+16>>2]):0)f=1;else f=0;if(!(!(+g[j+56>>2]>+g[j+8>>2])?!(+g[j+40>>2]<+g[j+24>>2]):0))f=0;if(!(+g[j+52>>2]>+g[j+4>>2])?!(+g[j+36>>2]<+g[j+20>>2]|f^1):0)break;s=c[(c[b+20>>2]|0)+(d<<2)>>2]|0;Lb[c[c[s>>2]>>2]&511](s);s=c[b+4>>2]|0;Nb[c[(c[s>>2]|0)+60>>2]&127](s,c[(c[b+20>>2]|0)+(d<<2)>>2]|0);c[(c[b+20>>2]|0)+(d<<2)>>2]=0}while(0);d=d+1|0}while((d|0)<(h|0));i=j;return}function MC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0;e=i;i=i+160|0;f=c[a+4>>2]|0;h=c[f+12>>2]|0;D=+g[h>>2];C=+g[h+4>>2];B=+g[h+8>>2];A=+g[h+16>>2];z=+g[h+20>>2];y=+g[h+24>>2];r=+g[h+32>>2];p=+g[h+36>>2];n=+g[h+40>>2];f=c[(c[f+4>>2]|0)+24>>2]|0;x=+g[f+(d*80|0)>>2];w=+g[f+(d*80|0)+16>>2];v=+g[f+(d*80|0)+32>>2];u=+g[f+(d*80|0)+4>>2];t=+g[f+(d*80|0)+20>>2];s=+g[f+(d*80|0)+36>>2];q=+g[f+(d*80|0)+8>>2];o=+g[f+(d*80|0)+24>>2];m=+g[f+(d*80|0)+40>>2];F=+g[f+(d*80|0)+48>>2];E=+g[f+(d*80|0)+52>>2];j=+g[f+(d*80|0)+56>>2];l=+g[h+48>>2]+(D*F+C*E+B*j);k=+g[h+52>>2]+(A*F+z*E+y*j);j=+g[h+56>>2]+(r*F+p*E+n*j);g[e+88>>2]=D*x+C*w+B*v;g[e+92>>2]=D*u+C*t+B*s;g[e+96>>2]=D*q+C*o+B*m;g[e+100>>2]=0.0;g[e+104>>2]=A*x+z*w+y*v;g[e+108>>2]=A*u+z*t+y*s;g[e+112>>2]=A*q+z*o+y*m;g[e+116>>2]=0.0;g[e+120>>2]=r*x+p*w+n*v;g[e+124>>2]=r*u+p*t+n*s;g[e+128>>2]=r*q+p*o+n*m;g[e+132>>2]=0.0;g[e+136>>2]=l;g[e+140>>2]=k;g[e+144>>2]=j;g[e+148>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,e+88|0,e+72|0,e+56|0);h=c[a+8>>2]|0;f=c[h+4>>2]|0;vc[c[(c[f>>2]|0)+8>>2]&127](f,c[h+12>>2]|0,e+40|0,e+24|0);if(!(+g[e+72>>2]>+g[e+24>>2])?!(+g[e+56>>2]<+g[e+40>>2]):0)f=1;else f=0;if(!(!(+g[e+80>>2]>+g[e+32>>2])?!(+g[e+64>>2]<+g[e+48>>2]):0))f=0;if(+g[e+76>>2]>+g[e+28>>2]){i=e;return}if(+g[e+60>>2]<+g[e+44>>2]|f^1){i=e;return}f=c[a+4>>2]|0;h=c[f+8>>2]|0;c[e>>2]=f;c[e+4>>2]=b;c[e+8>>2]=h;c[e+12>>2]=e+88;c[e+16>>2]=-1;c[e+20>>2]=d;if(!(c[(c[a+24>>2]|0)+(d<<2)>>2]|0)){b=c[a+12>>2]|0;b=Tb[c[(c[b>>2]|0)+8>>2]&31](b,e,c[a+8>>2]|0,c[a+28>>2]|0)|0;c[(c[a+24>>2]|0)+(d<<2)>>2]=b;b=c[a+4>>2]|0}else b=f;h=c[a+20>>2]|0;f=c[h+8>>2]|0;if((c[f+8>>2]|0)==(c[b+8>>2]|0)){c[h+8>>2]=e;h=c[a+20>>2]|0;rc[c[(c[h>>2]|0)+8>>2]&127](h,-1,d)}else{f=c[h+12>>2]|0;c[h+12>>2]=e;h=c[a+20>>2]|0;rc[c[(c[h>>2]|0)+12>>2]&127](h,-1,d)}d=c[(c[a+24>>2]|0)+(d<<2)>>2]|0;Jb[c[(c[d>>2]|0)+8>>2]&31](d,e,c[a+8>>2]|0,c[a+16>>2]|0,c[a+20>>2]|0);d=c[a+20>>2]|0;if((c[(c[d+8>>2]|0)+8>>2]|0)==(c[(c[a+4>>2]|0)+8>>2]|0)){c[d+8>>2]=f;i=e;return}else{c[d+12>>2]=f;i=e;return}}function NC(a){a=a|0;return}function OC(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0.0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0;j=i;t=(a[b+28>>0]|0)!=0;k=t?e:d;d=t?d:e;t=c[b+12>>2]|0;if((t|0)<=0){E=1.0;i=j;return+E}n=(c[k+192>>2]|0)+24|0;o=+g[k+4>>2];p=+g[k+8>>2];q=+g[k+12>>2];A=+g[k+16>>2];r=+g[k+20>>2];s=+g[k+24>>2];l=+g[k+28>>2];B=+g[k+32>>2];u=+g[k+36>>2];v=+g[k+40>>2];w=+g[k+44>>2];C=+g[k+48>>2];x=+g[k+52>>2];y=+g[k+56>>2];z=+g[k+60>>2];D=+g[k+64>>2];e=c[k+260>>2]|0;E=1.0;m=0;do{G=c[n>>2]|0;R=+g[G+(m*80|0)>>2];Q=+g[G+(m*80|0)+16>>2];P=+g[G+(m*80|0)+32>>2];O=+g[G+(m*80|0)+4>>2];N=+g[G+(m*80|0)+20>>2];M=+g[G+(m*80|0)+36>>2];L=+g[G+(m*80|0)+8>>2];K=+g[G+(m*80|0)+24>>2];J=+g[G+(m*80|0)+40>>2];I=+g[G+(m*80|0)+48>>2];H=+g[G+(m*80|0)+52>>2];F=+g[G+(m*80|0)+56>>2];c[k+260>>2]=e+1;g[k+4>>2]=o*R+p*Q+q*P;g[k+8>>2]=o*O+p*N+q*M;g[k+12>>2]=o*L+p*K+q*J;g[k+16>>2]=0.0;g[k+20>>2]=r*R+s*Q+l*P;g[k+24>>2]=r*O+s*N+l*M;g[k+28>>2]=r*L+s*K+l*J;g[k+32>>2]=0.0;g[k+36>>2]=u*R+v*Q+w*P;g[k+40>>2]=u*O+v*N+w*M;g[k+44>>2]=u*L+v*K+w*J;g[k+48>>2]=0.0;g[k+52>>2]=x+(o*I+p*H+q*F);g[k+56>>2]=y+(r*I+s*H+l*F);g[k+60>>2]=z+(u*I+v*H+w*F);g[k+64>>2]=0.0;G=c[(c[b+20>>2]|0)+(m<<2)>>2]|0;F=+Xb[c[(c[G>>2]|0)+12>>2]&15](G,k,d,f,h);E=F<E?F:E;e=(c[k+260>>2]|0)+1|0;c[k+260>>2]=e;g[k+4>>2]=o;g[k+8>>2]=p;g[k+12>>2]=q;g[k+16>>2]=A;g[k+20>>2]=r;g[k+24>>2]=s;g[k+28>>2]=l;g[k+32>>2]=B;g[k+36>>2]=u;g[k+40>>2]=v;g[k+44>>2]=w;g[k+48>>2]=C;g[k+52>>2]=x;g[k+56>>2]=y;g[k+60>>2]=z;g[k+64>>2]=D;m=m+1|0}while((m|0)!=(t|0));i=j;return+E}function PC(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;f=c[a+12>>2]|0;if((f|0)<=0){i=d;return}e=0;do{g=c[(c[a+20>>2]|0)+(e<<2)>>2]|0;if(g){Nb[c[(c[g>>2]|0)+16>>2]&127](g,b);f=c[a+12>>2]|0}e=e+1|0}while((e|0)<(f|0));i=d;return}function QC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function RC(a,b){a=a|0;b=b|0;var d=0;d=i;b=c[b+36>>2]|0;MC(a,c[(c[(c[(c[a+4>>2]|0)+4>>2]|0)+24>>2]|0)+(b*80|0)+64>>2]|0,b);i=d;return}function SC(a){a=a|0;var b=0;b=i;TC(a);gF(a);i=b;return}function TC(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;c[b>>2]=18208;f=c[b+8>>2]|0;e=c[f+8>>2]|0;if((e|0)>0){g=0;do{h=c[(c[f+16>>2]|0)+(g*12|0)+8>>2]|0;if(h){Lb[c[c[h>>2]>>2]&511](h);j=c[b+4>>2]|0;Nb[c[(c[j>>2]|0)+60>>2]&127](j,h)}g=g+1|0}while((g|0)!=(e|0));f=c[b+8>>2]|0}ZD(f);e=c[b+8>>2]|0;Lb[c[c[e>>2]>>2]&511](e);e=c[b+8>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}e=c[b+24>>2]|0;if(!e){a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;j=b+20|0;c[j>>2]=0;i=d;return}if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+24>>2]=0;a[b+28>>0]=1;c[b+24>>2]=0;c[b+16>>2]=0;j=b+20|0;c[j>>2]=0;i=d;return}function UC(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;a=c[a+8>>2]|0;f=c[a+8>>2]|0;if((f|0)<=0){i=d;return}e=0;do{g=c[(c[a+16>>2]|0)+(e*12|0)+8>>2]|0;if(g){Nb[c[(c[g>>2]|0)+16>>2]&127](g,b);f=c[a+8>>2]|0}e=e+1|0}while((e|0)<(f|0));i=d;return}function VC(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0;j=i;i=i+192|0;k=c[d+4>>2]|0;m=c[e+4>>2]|0;if((c[k+68>>2]|0)==(c[b+40>>2]|0)?(c[m+68>>2]|0)==(c[b+44>>2]|0):0)n=b+8|0;else{n=c[b+8>>2]|0;Y=c[n+8>>2]|0;if((Y|0)>0){X=0;do{W=c[(c[n+16>>2]|0)+(X*12|0)+8>>2]|0;if(W){Lb[c[c[W>>2]>>2]&511](W);ca=c[b+4>>2]|0;Nb[c[(c[ca>>2]|0)+60>>2]&127](ca,W)}X=X+1|0}while((X|0)!=(Y|0));n=c[b+8>>2]|0}ZD(n);n=b+8|0}W=j+180|0;a[W>>0]=1;X=j+176|0;c[X>>2]=0;Y=j+168|0;c[Y>>2]=0;c[j+172>>2]=0;Z=c[n>>2]|0;$=c[Z+8>>2]|0;if(($|0)>0){_=0;do{aa=c[(c[Z+16>>2]|0)+(_*12|0)+8>>2]|0;if(aa){Nb[c[(c[aa>>2]|0)+16>>2]&127](aa,j+164|0);ba=c[Y>>2]|0;if((ba|0)>0){$=0;do{aa=c[(c[X>>2]|0)+($<<2)>>2]|0;if(c[aa+748>>2]|0){c[h+4>>2]=aa;ba=c[aa+740>>2]|0;ca=c[(c[h+8>>2]|0)+8>>2]|0;if((ba|0)==(ca|0))xA(aa,ba+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);else xA(aa,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,ca+4|0);c[h+4>>2]=0;ba=c[Y>>2]|0}$=$+1|0}while(($|0)<(ba|0))}if((ba|0)<0){if((c[j+172>>2]|0)<0){$=c[X>>2]|0;if((ba|0)>0){aa=0;do{if(aa)c[0+(aa<<2)>>2]=c[$+(aa<<2)>>2];aa=aa+1|0}while((aa|0)!=(ba|0))}if($){if(a[W>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[$+ -4>>2]|0)}c[X>>2]=0}a[W>>0]=1;c[X>>2]=0;c[j+172>>2]=0}do{$=(c[X>>2]|0)+(ba<<2)|0;if($)c[$>>2]=0;ba=ba+1|0}while((ba|0)!=0)}c[Y>>2]=0;$=c[Z+8>>2]|0}_=_+1|0}while((_|0)<($|0));Z=c[X>>2]|0;if(Z){if(a[W>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[Z+ -4>>2]|0)}c[X>>2]=0}}a[W>>0]=1;c[X>>2]=0;c[Y>>2]=0;c[j+172>>2]=0;ba=c[k+64>>2]|0;ca=c[m+64>>2]|0;_=c[b+4>>2]|0;$=c[n>>2]|0;aa=c[b+32>>2]|0;c[j+128>>2]=18296;c[j+132>>2]=0;c[j+136>>2]=d;c[j+140>>2]=e;c[j+144>>2]=_;c[j+148>>2]=f;c[j+152>>2]=h;c[j+156>>2]=$;c[j+160>>2]=aa;f=c[d+12>>2]|0;z=+g[f>>2];B=+g[f+16>>2];D=+g[f+32>>2];t=+g[f+4>>2];s=+g[f+20>>2];r=+g[f+36>>2];q=+g[f+8>>2];p=+g[f+24>>2];o=+g[f+40>>2];A=-+g[f+48>>2];C=-+g[f+52>>2];E=-+g[f+56>>2];f=c[e+12>>2]|0;I=+g[f>>2];J=+g[f+16>>2];K=+g[f+32>>2];L=+g[f+4>>2];y=+g[f+20>>2];x=+g[f+36>>2];w=+g[f+8>>2];v=+g[f+24>>2];u=+g[f+40>>2];F=+g[f+48>>2];G=+g[f+52>>2];H=+g[f+56>>2];f=c[ba>>2]|0;h=c[ca>>2]|0;if(!((f|0)==0|(h|0)==0)){c[5004]=(c[5004]|0)+1;_=fF(1043)|0;c[(_+19&-16)+ -4>>2]=_;c[(_+19&-16)>>2]=f;c[(_+19&-16)+4>>2]=h;V=+P(+(z*I+B*J+D*K));U=+P(+(z*L+B*y+D*x));T=+P(+(z*w+B*v+D*u));M=+P(+(t*I+s*J+r*K));S=+P(+(t*L+s*y+r*x));R=+P(+(t*w+s*v+r*u));Q=+P(+(q*I+p*J+o*K));O=+P(+(q*L+p*y+o*x));N=+P(+(q*w+p*v+o*u));_=_+19&-16;Y=128;$=128;f=1;Z=124;do{h=f+ -1|0;X=c[_+(h<<3)>>2]|0;W=c[_+(h<<3)+4>>2]|0;na=+g[W+16>>2];ma=+g[W>>2];la=+g[W+20>>2];ka=+g[W+4>>2];ja=+g[W+24>>2];da=+g[W+8>>2];ia=z*A+B*C+D*E+(z*F+B*G+D*H)+((z*I+B*J+D*K)*(na+ma)*.5+(z*L+B*y+D*x)*(la+ka)*.5+(z*w+B*v+D*u)*(ja+da)*.5);ga=t*A+s*C+r*E+(t*F+s*G+r*H)+((t*I+s*J+r*K)*(na+ma)*.5+(t*L+s*y+r*x)*(la+ka)*.5+(t*w+s*v+r*u)*(ja+da)*.5);ea=q*A+p*C+o*E+(q*F+p*G+o*H)+((q*I+p*J+o*K)*(na+ma)*.5+(q*L+p*y+o*x)*(la+ka)*.5+(q*w+p*v+o*u)*(ja+da)*.5);ha=((na-ma)*.5+0.0)*V+((la-ka)*.5+0.0)*U+((ja-da)*.5+0.0)*T;fa=((na-ma)*.5+0.0)*M+((la-ka)*.5+0.0)*S+((ja-da)*.5+0.0)*R;da=((na-ma)*.5+0.0)*Q+((la-ka)*.5+0.0)*O+((ja-da)*.5+0.0)*N;do if(((((+g[X>>2]<=ha+ia?+g[X+16>>2]>=ia-ha:0)?+g[X+4>>2]<=ga+fa:0)?+g[X+20>>2]>=ga-fa:0)?+g[X+8>>2]<=ea+da:0)?+g[X+24>>2]>=ea-da:0){if((h|0)>(Z|0)){Z=Y<<1;if((Y|0)<(Z|0)&($|0)<(Z|0)){if(Y){c[5004]=(c[5004]|0)+1;$=fF((Y<<4|3)+16|0)|0;if(!$)$=0;else{c[($+19&-16)+ -4>>2]=$;$=$+19&-16}if((Y|0)>0){aa=0;do{ba=$+(aa<<3)|0;if(ba){oa=_+(aa<<3)|0;ca=c[oa+4>>2]|0;c[ba>>2]=c[oa>>2];c[ba+4>>2]=ca}aa=aa+1|0}while((aa|0)!=(Y|0))}}else $=0;if(!_){_=$;$=Z}else{c[5006]=(c[5006]|0)+1;gF(c[_+ -4>>2]|0);_=$;$=Z}}Y=Z;Z=Z+ -4|0}aa=(c[W+40>>2]|0)!=0;if(!(c[X+40>>2]|0))if(aa){oa=c[W+36>>2]|0;ca=_+(h<<3)|0;c[ca>>2]=X;c[ca+4>>2]=oa;ca=c[W+40>>2]|0;oa=_+(f<<3)|0;c[oa>>2]=X;c[oa+4>>2]=ca;f=f+1|0;break}else{rc[c[(c[j+128>>2]|0)+8>>2]&127](j+128|0,X,W);f=h;break}else{h=_+(h<<3)|0;ba=c[X+36>>2]|0;if(aa){ca=c[W+36>>2]|0;c[h>>2]=ba;c[h+4>>2]=ca;ca=c[W+36>>2]|0;oa=_+(f<<3)|0;c[oa>>2]=c[X+40>>2];c[oa+4>>2]=ca;oa=c[W+40>>2]|0;ca=_+(f+1<<3)|0;c[ca>>2]=c[X+36>>2];c[ca+4>>2]=oa;ca=c[W+40>>2]|0;oa=_+(f+2<<3)|0;c[oa>>2]=c[X+40>>2];c[oa+4>>2]=ca;f=f+3|0;break}else{c[h>>2]=ba;c[h+4>>2]=W;oa=_+(f<<3)|0;c[oa>>2]=c[X+40>>2];c[oa+4>>2]=W;f=f+1|0;break}}}else f=h;while(0)}while((f|0)!=0);if(_){c[5006]=(c[5006]|0)+1;gF(c[_+ -4>>2]|0)}}f=c[n>>2]|0;if((c[f+8>>2]|0)>0){h=0;do{X=c[f+16>>2]|0;W=c[X+(h*12|0)+8>>2]|0;do if(W){oa=c[X+(h*12|0)>>2]|0;ca=c[k+24>>2]|0;ba=c[ca+(oa*80|0)+64>>2]|0;aa=c[d+12>>2]|0;na=+g[aa>>2];K=+g[aa+4>>2];J=+g[aa+8>>2];ka=+g[aa+16>>2];ia=+g[aa+20>>2];ga=+g[aa+24>>2];ja=+g[aa+32>>2];fa=+g[aa+36>>2];Q=+g[aa+40>>2];ea=+g[ca+(oa*80|0)>>2];da=+g[ca+(oa*80|0)+16>>2];V=+g[ca+(oa*80|0)+32>>2];U=+g[ca+(oa*80|0)+4>>2];T=+g[ca+(oa*80|0)+20>>2];S=+g[ca+(oa*80|0)+36>>2];ha=+g[ca+(oa*80|0)+8>>2];R=+g[ca+(oa*80|0)+24>>2];O=+g[ca+(oa*80|0)+40>>2];ma=+g[ca+(oa*80|0)+48>>2];la=+g[ca+(oa*80|0)+52>>2];L=+g[ca+(oa*80|0)+56>>2];N=+g[aa+48>>2]+(na*ma+K*la+J*L);M=+g[aa+52>>2]+(ka*ma+ia*la+ga*L);L=+g[aa+56>>2]+(ja*ma+fa*la+Q*L);g[j>>2]=na*ea+K*da+J*V;g[j+4>>2]=na*U+K*T+J*S;g[j+8>>2]=na*ha+K*R+J*O;g[j+12>>2]=0.0;g[j+16>>2]=ka*ea+ia*da+ga*V;g[j+20>>2]=ka*U+ia*T+ga*S;g[j+24>>2]=ka*ha+ia*R+ga*O;g[j+28>>2]=0.0;g[j+32>>2]=ja*ea+fa*da+Q*V;g[j+36>>2]=ja*U+fa*T+Q*S;g[j+40>>2]=ja*ha+fa*R+Q*O;g[j+44>>2]=0.0;g[j+48>>2]=N;g[j+52>>2]=M;g[j+56>>2]=L;g[j+60>>2]=0.0;vc[c[(c[ba>>2]|0)+8>>2]&127](ba,j,j+112|0,j+96|0);ba=c[(c[f+16>>2]|0)+(h*12|0)+4>>2]|0;aa=c[m+24>>2]|0;oa=c[aa+(ba*80|0)+64>>2]|0;ca=c[e+12>>2]|0;L=+g[ca>>2];M=+g[ca+4>>2];N=+g[ca+8>>2];O=+g[ca+16>>2];Q=+g[ca+20>>2];R=+g[ca+24>>2];fa=+g[ca+32>>2];ha=+g[ca+36>>2];ja=+g[ca+40>>2];S=+g[aa+(ba*80|0)>>2];T=+g[aa+(ba*80|0)+16>>2];U=+g[aa+(ba*80|0)+32>>2];V=+g[aa+(ba*80|0)+4>>2];da=+g[aa+(ba*80|0)+20>>2];ea=+g[aa+(ba*80|0)+36>>2];ga=+g[aa+(ba*80|0)+8>>2];ia=+g[aa+(ba*80|0)+24>>2];ka=+g[aa+(ba*80|0)+40>>2];J=+g[aa+(ba*80|0)+48>>2];K=+g[aa+(ba*80|0)+52>>2];na=+g[aa+(ba*80|0)+56>>2];la=+g[ca+48>>2]+(L*J+M*K+N*na);ma=+g[ca+52>>2]+(O*J+Q*K+R*na);na=+g[ca+56>>2]+(fa*J+ha*K+ja*na);g[j>>2]=L*S+M*T+N*U;g[j+4>>2]=L*V+M*da+N*ea;g[j+8>>2]=L*ga+M*ia+N*ka;g[j+12>>2]=0.0;g[j+16>>2]=O*S+Q*T+R*U;g[j+20>>2]=O*V+Q*da+R*ea;g[j+24>>2]=O*ga+Q*ia+R*ka;g[j+28>>2]=0.0;g[j+32>>2]=fa*S+ha*T+ja*U;g[j+36>>2]=fa*V+ha*da+ja*ea;g[j+40>>2]=fa*ga+ha*ia+ja*ka;g[j+44>>2]=0.0;g[j+48>>2]=la;g[j+52>>2]=ma;g[j+56>>2]=na;g[j+60>>2]=0.0;vc[c[(c[oa>>2]|0)+8>>2]&127](oa,j,j+80|0,j+64|0);if(!(+g[j+112>>2]>+g[j+64>>2])?!(+g[j+96>>2]<+g[j+80>>2]):0)X=1;else X=0;if(!(!(+g[j+120>>2]>+g[j+72>>2])?!(+g[j+104>>2]<+g[j+88>>2]):0))X=0;if(!(+g[j+116>>2]>+g[j+68>>2])?!(+g[j+100>>2]<+g[j+84>>2]|X^1):0)break;Lb[c[c[W>>2]>>2]&511](W);X=c[b+4>>2]|0;Nb[c[(c[X>>2]|0)+60>>2]&127](X,W);X=c[f+16>>2]|0;W=c[X+(h*12|0)>>2]|0;X=c[X+(h*12|0)+4>>2]|0;$=c[b+16>>2]|0;if(($|0)==(c[b+20>>2]|0)?(l=($|0)==0?1:$<<1,($|0)<(l|0)):0){if(!l)Y=0;else{c[5004]=(c[5004]|0)+1;Y=fF((l*12|3)+16|0)|0;if(!Y)Y=0;else{c[(Y+19&-16)+ -4>>2]=Y;Y=Y+19&-16}$=c[b+16>>2]|0}if(($|0)>0){_=0;do{Z=Y+(_*12|0)|0;if(Z){oa=(c[b+24>>2]|0)+(_*12|0)|0;c[Z+0>>2]=c[oa+0>>2];c[Z+4>>2]=c[oa+4>>2];c[Z+8>>2]=c[oa+8>>2]}_=_+1|0}while((_|0)!=($|0))}Z=c[b+24>>2]|0;if(Z){if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[Z+ -4>>2]|0)}c[b+24>>2]=0}a[b+28>>0]=1;c[b+24>>2]=Y;c[b+20>>2]=l;$=c[b+16>>2]|0}Z=c[b+24>>2]|0;Y=Z+($*12|0)|0;if(Y){c[Y>>2]=W;c[Z+($*12|0)+4>>2]=X;c[Z+($*12|0)+8>>2]=0;$=c[b+16>>2]|0}c[b+16>>2]=$+1}while(0);h=h+1|0}while((h|0)<(c[f+8>>2]|0));d=b+24|0;e=b+16|0}else{d=b+24|0;e=b+16|0}if((c[e>>2]|0)>0){k=0;do{ca=c[n>>2]|0;oa=c[d>>2]|0;Yb[c[(c[ca>>2]|0)+8>>2]&31](ca,c[oa+(k*12|0)>>2]|0,c[oa+(k*12|0)+4>>2]|0)|0;k=k+1|0}while((k|0)<(c[e>>2]|0))}k=c[d>>2]|0;if(!k){a[b+28>>0]=1;c[d>>2]=0;c[e>>2]=0;oa=b+20|0;c[oa>>2]=0;i=j;return}if(a[b+28>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[k+ -4>>2]|0)}c[d>>2]=0;a[b+28>>0]=1;c[d>>2]=0;c[e>>2]=0;oa=b+20|0;c[oa>>2]=0;i=j;return}function WC(a){a=a|0;return}function XC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 0.0}function YC(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function ZC(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0;f=i;i=i+240|0;c[a+4>>2]=(c[a+4>>2]|0)+1;b=c[b+36>>2]|0;d=c[d+36>>2]|0;l=c[a+8>>2]|0;K=c[(c[l+4>>2]|0)+24>>2]|0;j=c[K+(b*80|0)+64>>2]|0;J=(c[(c[a+12>>2]|0)+4>>2]|0)+24|0;k=c[(c[J>>2]|0)+(d*80|0)+64>>2]|0;l=c[l+12>>2]|0;m=+g[l>>2];H=+g[l+4>>2];I=+g[l+8>>2];p=+g[l+16>>2];r=+g[l+20>>2];t=+g[l+24>>2];q=+g[l+32>>2];u=+g[l+36>>2];C=+g[l+40>>2];v=+g[K+(b*80|0)>>2];w=+g[K+(b*80|0)+16>>2];x=+g[K+(b*80|0)+32>>2];y=+g[K+(b*80|0)+4>>2];z=+g[K+(b*80|0)+20>>2];A=+g[K+(b*80|0)+36>>2];s=+g[K+(b*80|0)+8>>2];B=+g[K+(b*80|0)+24>>2];D=+g[K+(b*80|0)+40>>2];n=+g[K+(b*80|0)+48>>2];o=+g[K+(b*80|0)+52>>2];G=+g[K+(b*80|0)+56>>2];E=+g[l+48>>2]+(m*n+H*o+I*G);F=+g[l+52>>2]+(p*n+r*o+t*G);G=+g[l+56>>2]+(q*n+u*o+C*G);g[f+176>>2]=m*v+H*w+I*x;g[f+180>>2]=m*y+H*z+I*A;g[f+184>>2]=m*s+H*B+I*D;g[f+188>>2]=0.0;g[f+192>>2]=p*v+r*w+t*x;g[f+196>>2]=p*y+r*z+t*A;g[f+200>>2]=p*s+r*B+t*D;g[f+204>>2]=0.0;g[f+208>>2]=q*v+u*w+C*x;g[f+212>>2]=q*y+u*z+C*A;g[f+216>>2]=q*s+u*B+C*D;g[f+220>>2]=0.0;g[f+224>>2]=E;g[f+228>>2]=F;g[f+232>>2]=G;g[f+236>>2]=0.0;l=c[(c[a+12>>2]|0)+12>>2]|0;G=+g[l>>2];F=+g[l+4>>2];E=+g[l+8>>2];D=+g[l+16>>2];C=+g[l+20>>2];B=+g[l+24>>2];u=+g[l+32>>2];s=+g[l+36>>2];q=+g[l+40>>2];J=c[J>>2]|0;A=+g[J+(d*80|0)>>2];z=+g[J+(d*80|0)+16>>2];y=+g[J+(d*80|0)+32>>2];x=+g[J+(d*80|0)+4>>2];w=+g[J+(d*80|0)+20>>2];v=+g[J+(d*80|0)+36>>2];t=+g[J+(d*80|0)+8>>2];r=+g[J+(d*80|0)+24>>2];p=+g[J+(d*80|0)+40>>2];I=+g[J+(d*80|0)+48>>2];H=+g[J+(d*80|0)+52>>2];m=+g[J+(d*80|0)+56>>2];o=+g[l+48>>2]+(G*I+F*H+E*m);n=+g[l+52>>2]+(D*I+C*H+B*m);m=+g[l+56>>2]+(u*I+s*H+q*m);g[f+112>>2]=G*A+F*z+E*y;g[f+116>>2]=G*x+F*w+E*v;g[f+120>>2]=G*t+F*r+E*p;g[f+124>>2]=0.0;g[f+128>>2]=D*A+C*z+B*y;g[f+132>>2]=D*x+C*w+B*v;g[f+136>>2]=D*t+C*r+B*p;g[f+140>>2]=0.0;g[f+144>>2]=u*A+s*z+q*y;g[f+148>>2]=u*x+s*w+q*v;g[f+152>>2]=u*t+s*r+q*p;g[f+156>>2]=0.0;g[f+160>>2]=o;g[f+164>>2]=n;g[f+168>>2]=m;g[f+172>>2]=0.0;vc[c[(c[j>>2]|0)+8>>2]&127](j,f+176|0,f+96|0,f+80|0);vc[c[(c[k>>2]|0)+8>>2]&127](k,f+112|0,f+64|0,f+48|0);if(!(+g[f+96>>2]>+g[f+48>>2])?!(+g[f+80>>2]<+g[f+64>>2]):0)l=1;else l=0;if(!(!(+g[f+104>>2]>+g[f+56>>2])?!(+g[f+88>>2]<+g[f+72>>2]):0))l=0;if(+g[f+100>>2]>+g[f+52>>2]){i=f;return}if(+g[f+84>>2]<+g[f+68>>2]|l^1){i=f;return}J=c[a+8>>2]|0;K=c[J+8>>2]|0;c[f+24>>2]=J;c[f+28>>2]=j;c[f+32>>2]=K;c[f+36>>2]=f+176;c[f+40>>2]=-1;c[f+44>>2]=b;K=c[a+12>>2]|0;j=c[K+8>>2]|0;c[f>>2]=K;c[f+4>>2]=k;c[f+8>>2]=j;c[f+12>>2]=f+112;c[f+16>>2]=-1;c[f+20>>2]=d;j=c[a+28>>2]|0;c[4896]=(c[4896]|0)+1;k=((d<<16|b)+~((d<<16|b)<<15)>>10^(d<<16|b)+~((d<<16|b)<<15))*9|0;k=(c[j+12>>2]|0)+ -1&((k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11));a:do if((k|0)<(c[j+32>>2]|0)?(h=c[(c[j+40>>2]|0)+(k<<2)>>2]|0,(h|0)!=-1):0){k=c[j+16>>2]|0;while(1){if((c[k+(h*12|0)>>2]|0)==(b|0)?(c[k+(h*12|0)+4>>2]|0)==(d|0):0)break;h=c[(c[j+60>>2]|0)+(h<<2)>>2]|0;if((h|0)==-1){e=17;break a}}if(k+(h*12|0)|0)h=c[k+(h*12|0)+8>>2]|0;else e=17}else e=17;while(0);if((e|0)==17){h=c[a+16>>2]|0;h=Tb[c[(c[h>>2]|0)+8>>2]&31](h,f+24|0,f,c[a+32>>2]|0)|0;K=c[a+28>>2]|0;c[(Yb[c[(c[K>>2]|0)+12>>2]&31](K,b,d)|0)+8>>2]=h}l=c[a+24>>2]|0;J=c[l+8>>2]|0;K=c[l+12>>2]|0;c[l+8>>2]=f+24;c[(c[a+24>>2]|0)+12>>2]=f;l=c[a+24>>2]|0;rc[c[(c[l>>2]|0)+8>>2]&127](l,-1,b);l=c[a+24>>2]|0;rc[c[(c[l>>2]|0)+12>>2]&127](l,-1,d);Jb[c[(c[h>>2]|0)+8>>2]&31](h,f+24|0,f,c[a+20>>2]|0,c[a+24>>2]|0);c[(c[a+24>>2]|0)+8>>2]=J;c[(c[a+24>>2]|0)+12>>2]=K;i=f;return}function _C(a,b){a=a|0;b=b|0;return}function $C(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=18432;c[a+12>>2]=18464;d=c[a+60>>2]|0;Nb[c[(c[d>>2]|0)+20>>2]&127](d,c[a+76>>2]|0);d=c[a+60>>2]|0;Nb[c[(c[d>>2]|0)+16>>2]&127](d,c[a+76>>2]|0);gF(a);i=b;return}function aD(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=18432;c[a+12>>2]=18464;d=c[a+60>>2]|0;Nb[c[(c[d>>2]|0)+20>>2]&127](d,c[a+76>>2]|0);d=c[a+60>>2]|0;Nb[c[(c[d>>2]|0)+16>>2]&127](d,c[a+76>>2]|0);i=b;return}function bD(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+76>>2]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+76>>2];c[d+4>>2]=h+1;i=e;return}function cD(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=18464;d=c[a+48>>2]|0;Nb[c[(c[d>>2]|0)+20>>2]&127](d,c[a+64>>2]|0);d=c[a+48>>2]|0;Nb[c[(c[d>>2]|0)+16>>2]&127](d,c[a+64>>2]|0);gF(a);i=b;return}function dD(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=18464;d=c[a+48>>2]|0;Nb[c[(c[d>>2]|0)+20>>2]&127](d,c[a+64>>2]|0);d=c[a+48>>2]|0;Nb[c[(c[d>>2]|0)+16>>2]&127](d,c[a+64>>2]|0);i=b;return}function eD(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0.0,p=0;f=i;i=i+128|0;l=+g[b>>2];j=+g[b+16>>2];o=l<j?l:j;k=+g[b+32>>2];if((o<k?o:k)>+g[a+28>>2]){i=f;return}n=l>j?b:b+16|0;if(+g[(+g[n>>2]>k?n:b+32|0)>>2]<+g[a+12>>2]){i=f;return}j=+g[b+8>>2];k=+g[b+24>>2];o=j<k?j:k;l=+g[b+40>>2];if((o<l?o:l)>+g[a+36>>2]){i=f;return}n=j>k?b+8|0:b+24|0;if(+g[(+g[n>>2]>l?n:b+40|0)>>2]<+g[a+20>>2]){i=f;return}l=+g[b+4>>2];j=+g[b+20>>2];o=l<j?l:j;k=+g[b+36>>2];if((o<k?o:k)>+g[a+32>>2]){i=f;return}n=l>j?b+4|0:b+20|0;if(+g[(+g[n>>2]>k?n:b+36|0)>>2]<+g[a+16>>2]){i=f;return}h=c[a+48>>2]|0;m=c[a+4>>2]|0;if((c[(c[m+4>>2]|0)+4>>2]|0)>=20){i=f;return}c[f+32>>2]=0;g[f+36>>2]=1.0;g[f+40>>2]=1.0;g[f+44>>2]=1.0;g[f+48>>2]=0.0;c[f+76>>2]=0;c[f+24>>2]=16376;c[f+28>>2]=1;c[f+80>>2]=c[b+0>>2];c[f+84>>2]=c[b+4>>2];c[f+88>>2]=c[b+8>>2];c[f+92>>2]=c[b+12>>2];c[f+96>>2]=c[b+16>>2];c[f+100>>2]=c[b+20>>2];c[f+104>>2]=c[b+24>>2];c[f+108>>2]=c[b+28>>2];c[f+112>>2]=c[b+32>>2];c[f+116>>2]=c[b+36>>2];c[f+120>>2]=c[b+40>>2];c[f+124>>2]=c[b+44>>2];g[f+68>>2]=+g[a+56>>2];p=c[a+8>>2]|0;n=c[p+8>>2]|0;b=c[p+12>>2]|0;c[f>>2]=p;c[f+4>>2]=f+24;c[f+8>>2]=n;c[f+12>>2]=b;c[f+16>>2]=d;c[f+20>>2]=e;b=Tb[c[(c[h>>2]|0)+8>>2]&31](h,m,f,c[a+64>>2]|0)|0;m=c[a+44>>2]|0;n=c[m+8>>2]|0;if((c[n+8>>2]|0)==(c[(c[a+8>>2]|0)+8>>2]|0)){c[m+8>>2]=f;p=c[a+44>>2]|0;rc[c[(c[p>>2]|0)+8>>2]&127](p,d,e)}else{n=c[m+12>>2]|0;c[m+12>>2]=f;p=c[a+44>>2]|0;rc[c[(c[p>>2]|0)+12>>2]&127](p,d,e)}Jb[c[(c[b>>2]|0)+8>>2]&31](b,c[a+4>>2]|0,f,c[a+52>>2]|0,c[a+44>>2]|0);d=c[a+44>>2]|0;if((c[(c[d+8>>2]|0)+8>>2]|0)==(c[(c[a+8>>2]|0)+8>>2]|0))c[d+8>>2]=n;else c[d+12>>2]=n;Lb[c[c[b>>2]>>2]&511](b);Nb[c[(c[h>>2]|0)+60>>2]&127](h,b);c[f+24>>2]=15736;a=c[f+76>>2]|0;if(!a){i=f;return}Lb[c[c[a>>2]>>2]&511](a);a=c[f+76>>2]|0;if(!a){i=f;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=f;return}function fD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0;j=i;i=i+64|0;l=(a[b+8>>0]|0)!=0;k=l?e:d;e=l?d:e;d=c[e+4>>2]|0;if(((c[d+4>>2]|0)+ -21|0)>>>0>=9){i=j;return}if((c[(c[k+4>>2]|0)+4>>2]|0)>=20){i=j;return}m=+$b[c[(c[d>>2]|0)+48>>2]&15](d);c[h+4>>2]=c[b+76>>2];c[b+16>>2]=k;c[b+20>>2]=e;c[b+64>>2]=f;g[b+68>>2]=m;c[b+56>>2]=h;l=c[e+12>>2]|0;B=+g[l>>2];A=+g[l+16>>2];z=+g[l+32>>2];y=+g[l+4>>2];x=+g[l+20>>2];w=+g[l+36>>2];s=+g[l+8>>2];q=+g[l+24>>2];o=+g[l+40>>2];v=-+g[l+48>>2];u=-+g[l+52>>2];t=-+g[l+56>>2];l=c[k+12>>2]|0;K=+g[l>>2];J=+g[l+16>>2];I=+g[l+32>>2];H=+g[l+4>>2];G=+g[l+20>>2];F=+g[l+36>>2];E=+g[l+8>>2];D=+g[l+24>>2];C=+g[l+40>>2];r=+g[l+48>>2];p=+g[l+52>>2];n=+g[l+56>>2];g[j>>2]=B*K+A*J+z*I;g[j+4>>2]=B*H+A*G+z*F;g[j+8>>2]=B*E+A*D+z*C;g[j+12>>2]=0.0;g[j+16>>2]=y*K+x*J+w*I;g[j+20>>2]=y*H+x*G+w*F;g[j+24>>2]=y*E+x*D+w*C;g[j+28>>2]=0.0;g[j+32>>2]=s*K+q*J+o*I;g[j+36>>2]=s*H+q*G+o*F;g[j+40>>2]=s*E+q*D+o*C;g[j+44>>2]=0.0;g[j+48>>2]=B*v+A*u+z*t+(B*r+A*p+z*n);g[j+52>>2]=y*v+x*u+w*t+(y*r+x*p+w*n);g[j+56>>2]=s*v+q*u+o*t+(s*r+q*p+o*n);g[j+60>>2]=0.0;l=c[(c[b+16>>2]|0)+4>>2]|0;vc[c[(c[l>>2]|0)+8>>2]&127](l,j,b+24|0,b+40|0);g[b+40>>2]=+g[b+40>>2]+m;g[b+44>>2]=+g[b+44>>2]+m;g[b+48>>2]=+g[b+48>>2]+m;g[b+24>>2]=+g[b+24>>2]-m;g[b+28>>2]=+g[b+28>>2]-m;g[b+32>>2]=+g[b+32>>2]-m;l=c[b+76>>2]|0;e=c[e+8>>2]|0;c[l+740>>2]=c[k+8>>2];c[l+744>>2]=e;vc[c[(c[d>>2]|0)+64>>2]&127](d,b+12|0,b+24|0,b+40|0);k=c[h+4>>2]|0;do if(c[k+748>>2]|0){f=c[k+740>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;if((f|0)==(e|0)){xA(k,f+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);break}else{xA(k,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,e+4|0);break}}while(0);c[b+16>>2]=0;c[b+20>>2]=0;i=j;return}function gD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0;h=i;i=i+240|0;f=(a[b+8>>0]|0)!=0;b=f?e:d;d=f?d:e;S=+g[b+116>>2]- +g[b+52>>2];T=+g[b+120>>2]- +g[b+56>>2];U=+g[b+124>>2]- +g[b+60>>2];V=+g[b+252>>2];if(S*S+T*T+U*U<V*V){V=1.0;i=h;return+V}n=+g[d+4>>2];p=+g[d+20>>2];r=+g[d+36>>2];z=+g[d+8>>2];A=+g[d+24>>2];B=+g[d+40>>2];j=+g[d+12>>2];C=+g[d+28>>2];E=+g[d+44>>2];R=-+g[d+52>>2];S=-+g[d+56>>2];T=-+g[d+60>>2];o=+g[b+4>>2];q=+g[b+20>>2];s=+g[b+36>>2];t=+g[b+8>>2];u=+g[b+24>>2];v=+g[b+40>>2];w=+g[b+12>>2];x=+g[b+28>>2];y=+g[b+44>>2];J=+g[b+52>>2];I=+g[b+56>>2];H=+g[b+60>>2];F=n*R+p*S+r*T+(n*J+p*I+r*H);G=z*R+A*S+B*T+(z*J+A*I+B*H);H=j*R+C*S+E*T+(j*J+C*I+E*H);I=+g[b+68>>2];J=+g[b+84>>2];K=+g[b+100>>2];L=+g[b+72>>2];M=+g[b+88>>2];N=+g[b+104>>2];O=+g[b+76>>2];P=+g[b+92>>2];m=+g[b+108>>2];U=+g[b+116>>2];V=+g[b+120>>2];D=+g[b+124>>2];l=n*R+p*S+r*T+(n*U+p*V+r*D);k=z*R+A*S+B*T+(z*U+A*V+B*D);D=j*R+C*S+E*T+(j*U+C*V+E*D);d=c[d+192>>2]|0;if(((c[d+4>>2]|0)+ -21|0)>>>0>=9){V=1.0;i=h;return+V}g[h+224>>2]=F;g[h+228>>2]=G;g[h+232>>2]=H;g[h+236>>2]=0.0;if(l<F){g[h+224>>2]=l;T=l}else T=F;if(k<G){g[h+228>>2]=k;U=k}else U=G;if(D<H){g[h+232>>2]=D;V=D}else V=H;g[h+208>>2]=F;g[h+212>>2]=G;g[h+216>>2]=H;g[h+220>>2]=0.0;if(F<l){g[h+208>>2]=l;Q=l}else Q=F;if(G<k){g[h+212>>2]=k;R=k}else R=G;if(H<D){g[h+216>>2]=D;S=D}else S=H;W=+g[b+248>>2];g[h+224>>2]=T-W;g[h+228>>2]=U-W;g[h+232>>2]=V-W;g[h+208>>2]=W+Q;g[h+212>>2]=W+R;g[h+216>>2]=W+S;c[h>>2]=18592;g[h+4>>2]=n*o+p*q+r*s;g[h+8>>2]=n*t+p*u+r*v;g[h+12>>2]=n*w+p*x+r*y;g[h+16>>2]=0.0;g[h+20>>2]=z*o+A*q+B*s;g[h+24>>2]=z*t+A*u+B*v;g[h+28>>2]=z*w+A*x+B*y;g[h+32>>2]=0.0;g[h+36>>2]=j*o+C*q+E*s;g[h+40>>2]=j*t+C*u+E*v;g[h+44>>2]=j*w+C*x+E*y;g[h+48>>2]=0.0;g[h+52>>2]=F;g[h+56>>2]=G;g[h+60>>2]=H;g[h+64>>2]=0.0;g[h+68>>2]=n*I+p*J+r*K;g[h+72>>2]=n*L+p*M+r*N;g[h+76>>2]=n*O+p*P+r*m;g[h+80>>2]=0.0;g[h+84>>2]=z*I+A*J+B*K;g[h+88>>2]=z*L+A*M+B*N;g[h+92>>2]=z*O+A*P+B*m;g[h+96>>2]=0.0;g[h+100>>2]=j*I+C*J+E*K;g[h+104>>2]=j*L+C*M+E*N;g[h+108>>2]=j*O+C*P+E*m;g[h+112>>2]=0.0;g[h+116>>2]=l;g[h+120>>2]=k;g[h+124>>2]=D;g[h+128>>2]=0.0;g[h+196>>2]=W;g[h+200>>2]=+g[b+244>>2];if(!d){W=1.0;i=h;return+W}vc[c[(c[d>>2]|0)+64>>2]&127](d,h,h+224|0,h+208|0);j=+g[h+200>>2];if(!(j<+g[b+244>>2])){W=1.0;i=h;return+W}g[b+244>>2]=j;W=j;i=h;return+W}function hD(a){a=a|0;return}function iD(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function jD(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0;e=i;i=i+784|0;g[e+712>>2]=1.0;c[e+716>>2]=0;c[e+720>>2]=0;c[e+724>>2]=0;c[e+728>>2]=0;g[e+732>>2]=1.0;c[e+736>>2]=0;c[e+740>>2]=0;c[e+744>>2]=0;c[e+748>>2]=0;g[e+752>>2]=1.0;f=e+756|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[e+536>>2]=9440;c[e+704>>2]=0;g[e+708>>2]=0.0;g[e+700>>2]=+g[b+200>>2];j=+g[b+196>>2];c[e+488>>2]=0;g[e+492>>2]=1.0;g[e+496>>2]=1.0;g[e+500>>2]=1.0;g[e+504>>2]=0.0;c[e+480>>2]=16680;c[e+484>>2]=8;g[e+508>>2]=j;g[e+524>>2]=j;c[e+384>>2]=0;g[e+388>>2]=1.0;g[e+392>>2]=1.0;g[e+396>>2]=1.0;g[e+400>>2]=0.0;g[e+420>>2]=.03999999910593033;c[e+428>>2]=0;c[e+376>>2]=16376;c[e+380>>2]=1;c[e+432>>2]=c[d+0>>2];c[e+436>>2]=c[d+4>>2];c[e+440>>2]=c[d+8>>2];c[e+444>>2]=c[d+12>>2];c[e+448>>2]=c[d+16>>2];c[e+452>>2]=c[d+20>>2];c[e+456>>2]=c[d+24>>2];c[e+460>>2]=c[d+28>>2];c[e+464>>2]=c[d+32>>2];c[e+468>>2]=c[d+36>>2];c[e+472>>2]=c[d+40>>2];c[e+476>>2]=c[d+44>>2];g[e+324>>2]=9999999747378752.0e-20;a[e+348>>0]=0;c[e>>2]=17152;c[e+4>>2]=e+16;c[e+8>>2]=e+480;c[e+12>>2]=e+376;if(RB(e,b+4|0,b+68|0,e+712|0,e+712|0,e+536|0)|0?(h=+g[e+700>>2],+g[b+200>>2]>h):0)g[b+200>>2]=h;c[e+376>>2]=15736;b=c[e+428>>2]|0;if(!b){i=e;return}Lb[c[c[b>>2]>>2]&511](b);b=c[e+428>>2]|0;if(!b){i=e;return}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=e;return}function kD(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function lD(a){a=a|0;return}function mD(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=18816;if((a[b+16>>0]|0)!=0?(e=c[b+20>>2]|0,(e|0)!=0):0){f=c[b+4>>2]|0;Nb[c[(c[f>>2]|0)+16>>2]&127](f,e)}gF(b);i=d;return}function nD(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=18816;if(!(a[b+16>>0]|0)){i=d;return}e=c[b+20>>2]|0;if(!e){i=d;return}b=c[b+4>>2]|0;Nb[c[(c[b>>2]|0)+16>>2]&127](b,e);i=d;return}function oD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,R=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0,na=0,oa=0,pa=0.0,qa=0.0,ra=0.0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0;j=i;i=i+832|0;r=c[b+20>>2]|0;if(!r){r=c[b+4>>2]|0;r=Yb[c[(c[r>>2]|0)+12>>2]&31](r,c[d+8>>2]|0,c[e+8>>2]|0)|0;c[b+20>>2]=r;a[b+16>>0]=1}c[h+4>>2]=r;l=c[d+4>>2]|0;k=c[e+4>>2]|0;u=c[l+4>>2]|0;if((u|0)==10?(c[k+4>>2]|0)==10:0){m=+g[(c[b+20>>2]|0)+752>>2];za=c[l+52>>2]|0;B=+g[l+(za<<2)+28>>2];o=+g[l+(((za+2|0)%3|0)<<2)+28>>2];Aa=c[k+52>>2]|0;C=+g[k+(Aa<<2)+28>>2];p=+g[k+(((Aa+2|0)%3|0)<<2)+28>>2];Ba=c[d+12>>2]|0;b=c[e+12>>2]|0;v=+g[Ba+(za<<2)>>2];q=+g[Ba+(za<<2)+16>>2];w=+g[Ba+(za<<2)+32>>2];D=+g[b+(Aa<<2)>>2];E=+g[b+(Aa<<2)+16>>2];A=+g[b+(Aa<<2)+32>>2];z=+g[b+48>>2]- +g[Ba+48>>2];y=+g[b+52>>2]- +g[Ba+52>>2];x=+g[b+56>>2]- +g[Ba+56>>2];F=1.0-(v*D+q*E+w*A)*(v*D+q*E+w*A);if(!(F==0.0)){G=(v*z+q*y+w*x-(v*D+q*E+w*A)*(D*z+E*y+A*x))/F;if(!(G<-B)){if(G>B)G=B}else G=-B}else G=0.0;F=(v*D+q*E+w*A)*G-(D*z+E*y+A*x);if(F<-C){F=(v*D+q*E+w*A)*-C+(v*z+q*y+w*x);if(!(F<-B))if(F>B)C=-C;else{B=F;C=-C}else{B=-B;C=-C}}else if(F>C){F=C*(v*D+q*E+w*A)+(v*z+q*y+w*x);if(!(F<-B)){if(!(F>B))B=F}else B=-B}else{B=G;C=F}D=D*C;E=E*C;A=A*C;z=D+(z-v*B);y=E+(y-q*B);B=A+(x-w*B);x=+Q(+(B*B+(z*z+y*y)));if(!(x-o-p>m)){do if(B*B+(z*z+y*y)<=1.4210854715202004e-14)if(+P(+w)>.7071067690849304){ra=1.0/+Q(+(q*q+w*w));g[j+320>>2]=0.0;g[j+324>>2]=-(w*ra);g[j+328>>2]=q*ra;z=0.0;v=-(w*ra);q=q*ra;break}else{ra=1.0/+Q(+(v*v+q*q));g[j+320>>2]=-(q*ra);g[j+324>>2]=v*ra;g[j+328>>2]=0.0;z=-(q*ra);v=v*ra;q=0.0;break}else{g[j+320>>2]=z*-(1.0/x);g[j+324>>2]=y*-(1.0/x);g[j+328>>2]=B*-(1.0/x);g[j+332>>2]=0.0;z=z*-(1.0/x);v=y*-(1.0/x);q=B*-(1.0/x)}while(0);qa=p*v+(E+ +g[b+52>>2]);ra=p*q+(A+ +g[b+56>>2]);g[j+304>>2]=p*z+(D+ +g[b+48>>2]);g[j+308>>2]=qa;g[j+312>>2]=ra;g[j+316>>2]=0.0}if(x-o-p<m){qc[c[(c[h>>2]|0)+16>>2]&15](h,j+320|0,j+304|0,x-o-p);r=c[h+4>>2]|0}if(!(c[r+748>>2]|0)){i=j;return}d=c[r+740>>2]|0;b=c[(c[h+8>>2]|0)+8>>2]|0;if((d|0)==(b|0)){xA(r,d+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=j;return}else{xA(r,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,b+4|0);i=j;return}}else ta=k+4|0;g[j+296>>2]=999999984306749400.0;J=c[b+8>>2]|0;O=c[b+12>>2]|0;c[j+88>>2]=13392;g[j+92>>2]=0.0;g[j+96>>2]=1.0;g[j+100>>2]=0.0;g[j+104>>2]=0.0;c[j+108>>2]=O;c[j+112>>2]=J;c[j+116>>2]=l;c[j+120>>2]=k;c[j+124>>2]=u;c[j+128>>2]=c[ta>>2];g[j+132>>2]=+$b[c[(c[l>>2]|0)+48>>2]&15](l);g[j+136>>2]=+$b[c[(c[k>>2]|0)+48>>2]&15](k);a[j+140>>0]=0;c[j+148>>2]=-1;c[j+160>>2]=1;c[j+164>>2]=1;c[j+116>>2]=l;c[j+120>>2]=k;qa=+$b[c[(c[l>>2]|0)+48>>2]&15](l);ra=+$b[c[(c[k>>2]|0)+48>>2]&15](k);ra=qa+ra+ +g[(c[b+20>>2]|0)+752>>2];g[j+296>>2]=ra*ra;J=c[d+12>>2]|0;c[j+168>>2]=c[J+0>>2];c[j+172>>2]=c[J+4>>2];c[j+176>>2]=c[J+8>>2];c[j+180>>2]=c[J+12>>2];O=j+184|0;c[O+0>>2]=c[J+16>>2];c[O+4>>2]=c[J+20>>2];c[O+8>>2]=c[J+24>>2];c[O+12>>2]=c[J+28>>2];I=j+200|0;c[I+0>>2]=c[J+32>>2];c[I+4>>2]=c[J+36>>2];c[I+8>>2]=c[J+40>>2];c[I+12>>2]=c[J+44>>2];na=j+216|0;c[na+0>>2]=c[J+48>>2];c[na+4>>2]=c[J+52>>2];c[na+8>>2]=c[J+56>>2];c[na+12>>2]=c[J+60>>2];J=j+232|0;r=c[e+12>>2]|0;c[J+0>>2]=c[r+0>>2];c[J+4>>2]=c[r+4>>2];c[J+8>>2]=c[r+8>>2];c[J+12>>2]=c[r+12>>2];ba=j+248|0;c[ba+0>>2]=c[r+16>>2];c[ba+4>>2]=c[r+20>>2];c[ba+8>>2]=c[r+24>>2];c[ba+12>>2]=c[r+28>>2];ma=j+264|0;c[ma+0>>2]=c[r+32>>2];c[ma+4>>2]=c[r+36>>2];c[ma+8>>2]=c[r+40>>2];c[ma+12>>2]=c[r+44>>2];u=j+280|0;c[u+0>>2]=c[r+48>>2];c[u+4>>2]=c[r+52>>2];c[u+8>>2]=c[r+56>>2];c[u+12>>2]=c[r+60>>2];r=c[l+4>>2]|0;do if((r|0)<7?(s=c[ta>>2]|0,(s|0)<7):0){c[j+80>>2]=19224;if(!r)q=0.0;else{q=+$b[c[(c[l>>2]|0)+48>>2]&15](l);s=c[ta>>2]|0}if(!s)x=0.0;else x=+$b[c[(c[k>>2]|0)+48>>2]&15](k);c[j+40>>2]=19032;c[j+44>>2]=h;g[j+64>>2]=q;g[j+68>>2]=x;a[j+76>>0]=0;s=c[l+52>>2]|0;if(s){r=c[k+52>>2]|0;if(!r){if((c[ta>>2]|0)!=1)break;u=j+32|0;a[u>>0]=1;r=j+28|0;c[r>>2]=0;s=j+20|0;c[s>>2]=0;n=j+24|0;c[n>>2]=0;I=c[e+12>>2]|0;qa=+g[k+56>>2];ra=+g[k+60>>2];p=+g[k+64>>2];m=qa*+g[I>>2]+ra*+g[I+4>>2]+p*+g[I+8>>2]+ +g[I+48>>2];o=qa*+g[I+16>>2]+ra*+g[I+20>>2]+p*+g[I+24>>2]+ +g[I+52>>2];p=qa*+g[I+32>>2]+ra*+g[I+36>>2]+p*+g[I+40>>2]+ +g[I+56>>2];c[5004]=(c[5004]|0)+1;I=fF(35)|0;if(!I)I=0;else{c[(I+19&-16)+ -4>>2]=I;I=I+19&-16}J=c[r>>2]|0;if(J){if(a[u>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[J+ -4>>2]|0)}c[r>>2]=0}a[u>>0]=1;c[r>>2]=I;c[n>>2]=1;J=c[s>>2]|0;g[I+(J<<4)>>2]=m;g[I+(J<<4)+4>>2]=o;g[I+(J<<4)+8>>2]=p;g[I+(J<<4)+12>>2]=0.0;J=c[s>>2]|0;c[s>>2]=J+1;I=c[e+12>>2]|0;qa=+g[k+72>>2];ra=+g[k+76>>2];o=+g[k+80>>2];m=qa*+g[I>>2]+ra*+g[I+4>>2]+o*+g[I+8>>2]+ +g[I+48>>2];p=qa*+g[I+16>>2]+ra*+g[I+20>>2]+o*+g[I+24>>2]+ +g[I+52>>2];o=qa*+g[I+32>>2]+ra*+g[I+36>>2]+o*+g[I+40>>2]+ +g[I+56>>2];I=c[n>>2]|0;if((J+1|0)==(I|0)){I=(J+1|0)==0?1:J+1<<1;if((J+1|0)<(I|0)){if((I|0)!=0?(c[5004]=(c[5004]|0)+1,sa=fF((I<<4|3)+16|0)|0,(sa|0)!=0):0){c[(sa+19&-16)+ -4>>2]=sa;O=sa+19&-16}else O=0;if((J|0)>-1){ba=0;do{Ba=O+(ba<<4)|0;Aa=(c[r>>2]|0)+(ba<<4)|0;c[Ba+0>>2]=c[Aa+0>>2];c[Ba+4>>2]=c[Aa+4>>2];c[Ba+8>>2]=c[Aa+8>>2];c[Ba+12>>2]=c[Aa+12>>2];ba=ba+1|0}while((ba|0)!=(J+1|0))}J=c[r>>2]|0;if(J){if(a[u>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[J+ -4>>2]|0)}c[r>>2]=0}a[u>>0]=1;c[r>>2]=O;c[n>>2]=I;O=c[s>>2]|0}else{O=J+1|0;I=J+1|0}}else O=J+1|0;J=c[r>>2]|0;g[J+(O<<4)>>2]=m;g[J+(O<<4)+4>>2]=p;g[J+(O<<4)+8>>2]=o;g[J+(O<<4)+12>>2]=0.0;O=O+1|0;c[s>>2]=O;Ba=c[e+12>>2]|0;qa=+g[k+88>>2];ra=+g[k+92>>2];o=+g[k+96>>2];p=qa*+g[Ba>>2]+ra*+g[Ba+4>>2]+o*+g[Ba+8>>2]+ +g[Ba+48>>2];m=qa*+g[Ba+16>>2]+ra*+g[Ba+20>>2]+o*+g[Ba+24>>2]+ +g[Ba+52>>2];o=qa*+g[Ba+32>>2]+ra*+g[Ba+36>>2]+o*+g[Ba+40>>2]+ +g[Ba+56>>2];if((O|0)==(I|0)){e=(I|0)==0?1:I<<1;if((I|0)<(e|0)){if((e|0)!=0?(c[5004]=(c[5004]|0)+1,oa=fF((e<<4|3)+16|0)|0,(oa|0)!=0):0){c[(oa+19&-16)+ -4>>2]=oa;J=oa+19&-16}else J=0;if((I|0)>0){O=0;do{Ba=J+(O<<4)|0;Aa=(c[r>>2]|0)+(O<<4)|0;c[Ba+0>>2]=c[Aa+0>>2];c[Ba+4>>2]=c[Aa+4>>2];c[Ba+8>>2]=c[Aa+8>>2];c[Ba+12>>2]=c[Aa+12>>2];O=O+1|0}while((O|0)!=(I|0))}I=c[r>>2]|0;if(I){if(a[u>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[I+ -4>>2]|0)}c[r>>2]=0}a[u>>0]=1;c[r>>2]=J;c[n>>2]=e;I=c[s>>2]|0}}else I=O;g[J+(I<<4)>>2]=p;g[J+(I<<4)+4>>2]=m;g[J+(I<<4)+8>>2]=o;g[J+(I<<4)+12>>2]=0.0;c[s>>2]=(c[s>>2]|0)+1;m=+g[(c[b+20>>2]|0)+752>>2];Az(j+88|0,j+168|0,j+80|0,c[f+20>>2]|0,0);o=+g[j+92>>2];q=+g[j+96>>2];p=+g[j+100>>2];if(o*o+q*q+p*p>1.1920928955078125e-7){qa=1.0/(o*o+q*q+p*p);g[j>>2]=o*qa;g[j+4>>2]=q*qa;g[j+8>>2]=p*qa;g[j+12>>2]=0.0;qa=+g[j+144>>2];ra=+$b[c[(c[l>>2]|0)+48>>2]&15](l);ra=qa-ra- +$b[c[(c[k>>2]|0)+48>>2]&15](k);cE(j,c[l+52>>2]|0,c[d+12>>2]|0,j+16|0,ra-m,m,h)}do if((a[b+16>>0]|0)!=0?(t=c[h+4>>2]|0,(c[t+748>>2]|0)!=0):0){d=c[t+740>>2]|0;b=c[(c[h+8>>2]|0)+8>>2]|0;if((d|0)==(b|0)){xA(t,d+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);break}else{xA(t,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,b+4|0);break}}while(0);h=c[r>>2]|0;if(h){if(a[u>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[r>>2]=0}a[u>>0]=1;c[r>>2]=0;c[s>>2]=0;c[n>>2]=0;i=j;return}m=+g[(c[b+20>>2]|0)+752>>2];if(!(a[f+24>>0]|0)){Az(j+88|0,j+168|0,j+40|0,c[f+20>>2]|0,0);o=+g[j+72>>2];if((a[j+76>>0]|0)!=0&o<0.0){L=+g[j+48>>2];M=+g[j+52>>2];H=+g[j+56>>2];K=+g[j+60>>2];n=105}}else{f=c[d+12>>2]|0;t=c[e+12>>2]|0;c[4920]=(c[4920]|0)+1;ka=+g[s+64>>2];la=+g[s+68>>2];y=+g[f+4>>2];pa=+g[s+72>>2];z=+g[f+8>>2];A=+g[f+16>>2];B=+g[f+20>>2];D=+g[f+24>>2];C=+g[f+32>>2];E=+g[f+36>>2];F=+g[f+40>>2];qa=+g[r+64>>2];ra=+g[r+68>>2];o=+g[r+72>>2];q=ka*+g[f>>2]+la*y+pa*z+ +g[f+48>>2]-(qa*+g[t>>2]+ra*+g[t+4>>2]+o*+g[t+8>>2]+ +g[t+48>>2]);p=ka*A+la*B+pa*D+ +g[f+52>>2]-(qa*+g[t+16>>2]+ra*+g[t+20>>2]+o*+g[t+24>>2]+ +g[t+52>>2]);o=ka*C+la*E+pa*F+ +g[f+56>>2]-(qa*+g[t+32>>2]+ra*+g[t+36>>2]+o*+g[t+40>>2]+ +g[t+56>>2]);u=c[s+28>>2]|0;a:do if((u|0)>0){x=0.0;R=3.4028234663852886e+38;I=0;L=0.0;M=0.0;H=0.0;K=0.0;while(1){Ba=c[s+36>>2]|0;pa=+g[Ba+(I*36|0)+20>>2];qa=+g[Ba+(I*36|0)+24>>2];ra=+g[Ba+(I*36|0)+28>>2];y=pa*+g[f>>2]+qa*y+ra*z;z=pa*A+qa*B+ra*D;A=pa*C+qa*E+ra*F;g[j+400>>2]=y;g[j+404>>2]=z;g[j+408>>2]=A;g[j+412>>2]=0.0;if(q*y+p*z+o*A<0.0){g[j+400>>2]=y*-1.0;g[j+404>>2]=z*-1.0;g[j+408>>2]=A*-1.0;y=y*-1.0;z=z*-1.0;A=A*-1.0}c[4916]=(c[4916]|0)+1;if(bE(f,t,q,p,o,y,z,A,s,r,R)|0){c[4918]=(c[4918]|0)+1;ND(s,f,j+400|0,j+808|0,j+784|0,j+464|0,j+448|0);ND(r,t,j+400|0,j+720|0,j+480|0,j+432|0,j+416|0);z=+g[j+784>>2];y=+g[j+720>>2];if(!(z<y)?(w=+g[j+480>>2],v=+g[j+808>>2],!(w<v)):0){J=1;y=z-y<w-v?z-y:w-v}else{J=0;y=x}if(!J){r=0;break a}if(y<R){x=y;R=y;L=+g[j+400>>2];M=+g[j+404>>2];H=+g[j+408>>2];K=+g[j+412>>2]}else x=y}I=I+1|0;if((I|0)>=(u|0)){n=52;break a}y=+g[f+4>>2];z=+g[f+8>>2];A=+g[f+16>>2];B=+g[f+20>>2];D=+g[f+24>>2];C=+g[f+32>>2];E=+g[f+36>>2];F=+g[f+40>>2]}}else{R=3.4028234663852886e+38;L=0.0;M=0.0;H=0.0;K=0.0;n=52}while(0);b:do if((n|0)==52){u=c[r+28>>2]|0;if((u|0)>0){v=0.0;I=0;do{Ba=c[r+36>>2]|0;qa=+g[Ba+(I*36|0)+20>>2];ra=+g[Ba+(I*36|0)+24>>2];x=+g[Ba+(I*36|0)+28>>2];w=qa*+g[t>>2]+ra*+g[t+4>>2]+x*+g[t+8>>2];y=qa*+g[t+16>>2]+ra*+g[t+20>>2]+x*+g[t+24>>2];x=qa*+g[t+32>>2]+ra*+g[t+36>>2]+x*+g[t+40>>2];g[j+384>>2]=w;g[j+388>>2]=y;g[j+392>>2]=x;g[j+396>>2]=0.0;if(q*w+p*y+o*x<0.0){g[j+384>>2]=w*-1.0;g[j+388>>2]=y*-1.0;g[j+392>>2]=x*-1.0;w=w*-1.0;y=y*-1.0;x=x*-1.0}c[4916]=(c[4916]|0)+1;do if(bE(f,t,q,p,o,w,y,x,s,r,R)|0){c[4918]=(c[4918]|0)+1;ND(s,f,j+384|0,j+808|0,j+784|0,j+464|0,j+448|0);ND(r,t,j+384|0,j+720|0,j+480|0,j+432|0,j+416|0);y=+g[j+784>>2];x=+g[j+720>>2];do if(y<x){J=0;w=v}else{w=+g[j+480>>2];z=+g[j+808>>2];if(w<z){J=0;w=v;break}J=1;w=y-x<w-z?y-x:w-z}while(0);if(!J){r=0;break b}if(!(w<R)){v=w;break}v=w;R=w;L=+g[j+384>>2];M=+g[j+388>>2];H=+g[j+392>>2];K=+g[j+396>>2]}while(0);I=I+1|0}while((I|0)<(u|0))}J=c[s+48>>2]|0;if((J|0)>0){y=0.0;z=0.0;A=0.0;B=0.0;C=0.0;D=0.0;F=0.0;E=0.0;G=0.0;N=0.0;W=0.0;Y=0.0;Z=0.0;X=0.0;V=0.0;U=0.0;_=0.0;$=0.0;aa=0.0;ba=c[r+48>>2]|0;u=0;O=-1;I=-1;while(1){Ba=c[s+56>>2]|0;qa=+g[Ba+(u<<4)>>2];ra=+g[Ba+(u<<4)+4>>2];w=+g[Ba+(u<<4)+8>>2];x=qa*+g[f>>2]+ra*+g[f+4>>2]+w*+g[f+8>>2];v=qa*+g[f+16>>2]+ra*+g[f+20>>2]+w*+g[f+24>>2];w=qa*+g[f+32>>2]+ra*+g[f+36>>2]+w*+g[f+40>>2];if((ba|0)>0){J=0;do{Ba=c[r+56>>2]|0;qa=+g[Ba+(J<<4)>>2];ra=+g[Ba+(J<<4)+4>>2];ha=+g[Ba+(J<<4)+8>>2];ea=qa*+g[t>>2]+ra*+g[t+4>>2]+ha*+g[t+8>>2];ga=qa*+g[t+16>>2]+ra*+g[t+20>>2]+ha*+g[t+24>>2];ha=qa*+g[t+32>>2]+ra*+g[t+36>>2]+ha*+g[t+40>>2];g[j+368>>2]=v*ha-w*ga;g[j+372>>2]=w*ea-x*ha;g[j+376>>2]=x*ga-v*ea;g[j+380>>2]=0.0;do if(!(+P(+(v*ha-w*ga))>1.0e-6)){if(+P(+(w*ea-x*ha))>1.0e-6){n=70;break}if(+P(+(x*ga-v*ea))>1.0e-6)n=70}else n=70;while(0);do if((n|0)==70){n=0;ca=1.0/+Q(+((v*ha-w*ga)*(v*ha-w*ga)+(w*ea-x*ha)*(w*ea-x*ha)+(x*ga-v*ea)*(x*ga-v*ea)));da=(v*ha-w*ga)*ca;g[j+368>>2]=da;fa=(w*ea-x*ha)*ca;g[j+372>>2]=fa;ca=(x*ga-v*ea)*ca;g[j+376>>2]=ca;if(q*da+p*fa+o*ca<0.0){g[j+368>>2]=da*-1.0;g[j+372>>2]=fa*-1.0;g[j+376>>2]=ca*-1.0;da=da*-1.0;fa=fa*-1.0;ca=ca*-1.0}c[4916]=(c[4916]|0)+1;if(!(bE(f,t,q,p,o,da,fa,ca,s,r,R)|0))break;c[4918]=(c[4918]|0)+1;ND(s,f,j+368|0,j+808|0,j+784|0,j+464|0,j+448|0);ND(r,t,j+368|0,j+720|0,j+480|0,j+432|0,j+416|0);ka=+g[j+784>>2];qa=+g[j+720>>2];do if(!(ka<qa)){pa=+g[j+480>>2];ra=+g[j+808>>2];if(pa<ra){ba=0;la=Z;ja=Y;ia=W;fa=F;ca=D;da=C;ka=y;break}if(ka-qa<pa-ra){ba=1;la=+g[j+456>>2];ja=+g[j+452>>2];ia=+g[j+448>>2];fa=+g[j+440>>2];ca=+g[j+436>>2];da=+g[j+432>>2];ka=ka-qa;break}else{ba=1;la=+g[j+472>>2];ja=+g[j+468>>2];ia=+g[j+464>>2];fa=+g[j+424>>2];ca=+g[j+420>>2];da=+g[j+416>>2];ka=pa-ra;break}}else{ba=0;la=Z;ja=Y;ia=W;fa=F;ca=D;da=C;ka=y}while(0);if(!ba){r=0;break b}if(!(ka<R)){Z=la;Y=ja;W=ia;F=fa;D=ca;C=da;y=ka;break}aa=w;$=v;_=x;U=ha;V=ga;X=ea;Z=la;Y=ja;W=ia;N=la;G=ja;E=ia;F=fa;D=ca;C=da;B=fa;A=ca;z=da;y=ka;R=ka;O=u;I=J;L=+g[j+368>>2];M=+g[j+372>>2];H=+g[j+376>>2];K=+g[j+380>>2]}while(0);J=J+1|0;ba=c[r+48>>2]|0}while((J|0)<(ba|0));v=aa;w=$;x=_;J=c[s+48>>2]|0}else{v=aa;w=$;x=_}u=u+1|0;if((u|0)>=(J|0))break;else{_=x;$=w;aa=v}}}else{v=0.0;w=0.0;x=0.0;U=0.0;V=0.0;X=0.0;N=0.0;G=0.0;E=0.0;B=0.0;A=0.0;z=0.0;O=-1;I=-1}if((I|O|0)>-1){C=z-E;D=A-G;y=B-N;N=x*X+w*V+v*U;F=x*C+w*D+v*y;G=X*C+V*D+U*y;do if(!(1.0-N*N==0.0))if((F-N*G)/(1.0-N*N)<-1.0000000150474662e+30)E=-1.0000000150474662e+30;else{if(!((F-N*G)/(1.0-N*N)>1.0000000150474662e+30)){E=(F-N*G)/(1.0-N*N);break}E=1.0000000150474662e+30}else E=0.0;while(0);G=N*E-G;do if(G<-1.0000000150474662e+30){if(N*-1.0000000150474662e+30+F<-1.0000000150474662e+30){E=-1.0000000150474662e+30;N=-1.0000000150474662e+30;break}if(!(N*-1.0000000150474662e+30+F>1.0000000150474662e+30)){E=N*-1.0000000150474662e+30+F;N=-1.0000000150474662e+30;break}E=1.0000000150474662e+30;N=-1.0000000150474662e+30}else{if(!(G>1.0000000150474662e+30)){N=G;break}if(N*1.0000000150474662e+30+F<-1.0000000150474662e+30){E=-1.0000000150474662e+30;N=1.0000000150474662e+30;break}if(!(N*1.0000000150474662e+30+F>1.0000000150474662e+30)){E=N*1.0000000150474662e+30+F;N=1.0000000150474662e+30;break}E=1.0000000150474662e+30;N=1.0000000150474662e+30}while(0);F=X*N;G=N*V;N=N*U;x=C-x*E+F;w=D-E*w+G;y=y-E*v+N;g[j+352>>2]=x;g[j+356>>2]=w;g[j+360>>2]=y;g[j+364>>2]=0.0;if(x*x+w*w+y*y>1.1920928955078125e-7){v=+Q(+(x*x+w*w+y*y));g[j+352>>2]=x*(1.0/v);g[j+356>>2]=1.0/v*w;g[j+360>>2]=1.0/v*y;if(x*(1.0/v)*q+1.0/v*w*p+1.0/v*y*o<0.0){g[j+352>>2]=x*(1.0/v)*-1.0;g[j+356>>2]=1.0/v*w*-1.0;g[j+360>>2]=1.0/v*y*-1.0}g[j+336>>2]=z+F;g[j+340>>2]=A+G;g[j+344>>2]=B+N;g[j+348>>2]=0.0;qc[c[(c[h>>2]|0)+16>>2]&15](h,j+352|0,j+336|0,-v)}}if(q*L+p*M+o*H<0.0){r=1;L=-L;M=-M;H=-H;K=0.0}else r=1}while(0);if(r){o=-1.0000000150474662e+30;n=105}}if((n|0)==105){l=c[l+52>>2]|0;k=c[k+52>>2]|0;d=c[d+12>>2]|0;e=c[e+12>>2]|0;o=o-m;v=1.0/+Q(+(L*L+M*M+H*H));p=L*v;q=M*v;v=H*v;g[j+808>>2]=p;g[j+812>>2]=q;g[j+816>>2]=v;g[j+820>>2]=K;f=c[k+28>>2]|0;n=c[k+36>>2]|0;if((f|0)>0){w=+g[e>>2];x=+g[e+4>>2];A=+g[e+8>>2];D=+g[e+16>>2];E=+g[e+20>>2];H=+g[e+24>>2];G=+g[e+32>>2];C=+g[e+36>>2];B=+g[e+40>>2];t=-1;K=-3.4028234663852886e+38;r=0;while(1){y=+g[n+(r*36|0)+20>>2];z=+g[n+(r*36|0)+24>>2];F=+g[n+(r*36|0)+28>>2];s=(y*w+z*x+F*A)*p+(y*D+z*E+F*H)*q+(y*G+z*C+F*B)*v>K;t=s?r:t;r=r+1|0;if((r|0)>=(f|0)){s=t;break}else K=s?(y*w+z*x+F*A)*p+(y*D+z*E+F*H)*q+(y*G+z*C+F*B)*v:K}}else s=-1;a[j+800>>0]=1;r=j+796|0;c[r>>2]=0;c[j+788>>2]=0;c[j+792>>2]=0;f=c[n+(s*36|0)+4>>2]|0;c:do if((f|0)>0){n=n+(s*36|0)+12|0;O=0;J=0;u=0;t=0;while(1){Ba=c[(c[n>>2]|0)+(t<<2)>>2]|0;Aa=c[k+16>>2]|0;qa=+g[Aa+(Ba<<4)>>2];ra=+g[Aa+(Ba<<4)+4>>2];v=+g[Aa+(Ba<<4)+8>>2];p=qa*+g[e>>2]+ra*+g[e+4>>2]+v*+g[e+8>>2]+ +g[e+48>>2];q=qa*+g[e+16>>2]+ra*+g[e+20>>2]+v*+g[e+24>>2]+ +g[e+52>>2];v=qa*+g[e+32>>2]+ra*+g[e+36>>2]+v*+g[e+40>>2]+ +g[e+56>>2];if((O|0)==(u|0)){I=(u|0)==0?1:u<<1;if((u|0)<(I|0)){do if(!I)J=0;else{c[5004]=(c[5004]|0)+1;J=fF((I<<4|3)+16|0)|0;if(!J){J=0;break}c[(J+19&-16)+ -4>>2]=J;J=J+19&-16}while(0);if((u|0)>0){O=0;do{Ba=J+(O<<4)|0;Aa=(c[r>>2]|0)+(O<<4)|0;c[Ba+0>>2]=c[Aa+0>>2];c[Ba+4>>2]=c[Aa+4>>2];c[Ba+8>>2]=c[Aa+8>>2];c[Ba+12>>2]=c[Aa+12>>2];O=O+1|0}while((O|0)!=(u|0))}u=c[r>>2]|0;if(u){if(a[j+800>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[u+ -4>>2]|0)}c[r>>2]=0}a[j+800>>0]=1;c[r>>2]=J;c[j+792>>2]=I;I=J;u=c[j+788>>2]|0}else I=J}else{I=J;u=O}g[I+(u<<4)>>2]=p;g[I+(u<<4)+4>>2]=q;g[I+(u<<4)+8>>2]=v;g[I+(u<<4)+12>>2]=0.0;O=(c[j+788>>2]|0)+1|0;c[j+788>>2]=O;t=t+1|0;if((t|0)>=(f|0))break c;J=I;u=c[j+792>>2]|0}}else I=0;while(0);if((s|0)>-1){cE(j+808|0,l,d,j+784|0,o,m,h);I=c[r>>2]|0}if(I){if(a[j+800>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[I+ -4>>2]|0)}c[r>>2]=0}}if(!(a[b+16>>0]|0)){i=j;return}e=c[h+4>>2]|0;if(!(c[e+748>>2]|0)){i=j;return}d=c[e+740>>2]|0;b=c[(c[h+8>>2]|0)+8>>2]|0;if((d|0)==(b|0)){xA(e,d+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=j;return}else{xA(e,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,b+4|0);i=j;return}}}while(0);Az(j+88|0,j+168|0,h,c[f+20>>2]|0,0);if(((c[b+28>>2]|0)!=0?(c[(c[h+4>>2]|0)+748>>2]|0)<(c[b+32>>2]|0):0)?(p=+g[j+92>>2],m=+g[j+96>>2],o=+g[j+100>>2],p*p+m*m+o*o>1.1920928955078125e-7):0){q=1.0/(p*p+m*m+o*o);if(+P(+(o*q))>.7071067690849304){z=1.0/+Q(+(o*q*o*q+m*q*m*q));x=0.0;y=-(o*q*z);z=m*q*z}else{y=1.0/+Q(+(p*q*p*q+m*q*m*q));x=-(m*q*y);y=p*q*y;z=0.0}v=+$b[c[(c[l>>2]|0)+16>>2]&15](l);w=+$b[c[(c[k>>2]|0)+16>>2]&15](k);A=.019999999552965164/(v<w?v:w);if(v<w){c[j+720>>2]=c[j+168>>2];c[j+724>>2]=c[j+172>>2];c[j+728>>2]=c[j+176>>2];c[j+732>>2]=c[j+180>>2];c[j+736>>2]=c[O+0>>2];c[j+740>>2]=c[O+4>>2];c[j+744>>2]=c[O+8>>2];c[j+748>>2]=c[O+12>>2];c[j+752>>2]=c[I+0>>2];c[j+756>>2]=c[I+4>>2];c[j+760>>2]=c[I+8>>2];c[j+764>>2]=c[I+12>>2];c[j+768>>2]=c[na+0>>2];c[j+772>>2]=c[na+4>>2];c[j+776>>2]=c[na+8>>2];c[j+780>>2]=c[na+12>>2]}else{c[j+720>>2]=c[J+0>>2];c[j+724>>2]=c[J+4>>2];c[j+728>>2]=c[J+8>>2];c[j+732>>2]=c[J+12>>2];c[j+736>>2]=c[ba+0>>2];c[j+740>>2]=c[ba+4>>2];c[j+744>>2]=c[ba+8>>2];c[j+748>>2]=c[ba+12>>2];c[j+752>>2]=c[ma+0>>2];c[j+756>>2]=c[ma+4>>2];c[j+760>>2]=c[ma+8>>2];c[j+764>>2]=c[ma+12>>2];c[j+768>>2]=c[u+0>>2];c[j+772>>2]=c[u+4>>2];c[j+776>>2]=c[u+8>>2];c[j+780>>2]=c[u+12>>2]}Aa=c[b+28>>2]|0;if((Aa|0)>0){B=z*z+(y*y+x*x);A=A>.39269909262657166?.19634954631328583:A*.5;ya=j+516|0;va=j+532|0;xa=j+548|0;oa=j+564|0;wa=j+580|0;k=j+596|0;n=j+612|0;r=j+628|0;t=j+644|0;ta=j+660|0;l=j+736|0;s=j+676|0;ua=j+752|0;sa=j+692|0;za=j+768|0;if(B>1.1920928955078125e-7){B=+T(+A)/+Q(+B);x=x*B;y=y*B;z=z*B;B=+S(+A);A=+Q(+(o*q*o*q+(p*q*p*q+m*q*m*q)));if(v<w){Ba=0;do{aa=+(Ba|0)*(6.2831854820251465/+(Aa|0))*.5;la=+T(+aa)/A;aa=+S(+aa);ha=z*-(m*q*la)+(x*aa+B*-(p*q*la))-y*-(o*q*la);qa=x*-(o*q*la)+(y*aa+B*-(m*q*la))-z*-(p*q*la);ia=y*-(p*q*la)+(z*aa+B*-(o*q*la))-x*-(m*q*la);$=B*aa-x*-(p*q*la)-y*-(m*q*la)-z*-(o*q*la);ka=o*q*la*qa+(p*q*la*$+aa*ha)-m*q*la*ia;pa=p*q*la*ia+(aa*qa+m*q*la*$)-o*q*la*ha;_=m*q*la*ha+(o*q*la*$+aa*ia)-p*q*la*qa;ia=aa*$-p*q*la*ha-m*q*la*qa-o*q*la*ia;la=ka*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));qa=pa*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));ha=_*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));Ca=c[d+12>>2]|0;$=+g[Ca>>2];aa=+g[Ca+16>>2];ca=+g[Ca+32>>2];da=+g[Ca+4>>2];ea=+g[Ca+20>>2];fa=+g[Ca+36>>2];ga=+g[Ca+8>>2];ja=+g[Ca+24>>2];ra=+g[Ca+40>>2];g[j+168>>2]=(ka*ha+ia*qa)*ca+(aa*(ka*qa-ia*ha)+$*(1.0-(pa*qa+_*ha)));g[j+172>>2]=(1.0-(pa*qa+_*ha))*da+(ka*qa-ia*ha)*ea+(ka*ha+ia*qa)*fa;g[j+176>>2]=(1.0-(pa*qa+_*ha))*ga+(ka*qa-ia*ha)*ja+(ka*ha+ia*qa)*ra;g[j+180>>2]=0.0;g[j+184>>2]=(pa*ha-ia*la)*ca+($*(ka*qa+ia*ha)+aa*(1.0-(ka*la+_*ha)));g[j+188>>2]=(ka*qa+ia*ha)*da+(1.0-(ka*la+_*ha))*ea+(pa*ha-ia*la)*fa;g[j+192>>2]=(ka*qa+ia*ha)*ga+(1.0-(ka*la+_*ha))*ja+(pa*ha-ia*la)*ra;g[j+196>>2]=0.0;g[j+200>>2]=$*(ka*ha-ia*qa)+aa*(pa*ha+ia*la)+ca*(1.0-(ka*la+pa*qa));g[j+204>>2]=(ka*ha-ia*qa)*da+(pa*ha+ia*la)*ea+(1.0-(ka*la+pa*qa))*fa;g[j+208>>2]=(ka*ha-ia*qa)*ga+(pa*ha+ia*la)*ja+(1.0-(ka*la+pa*qa))*ra;g[j+212>>2]=0.0;Ca=c[e+12>>2]|0;c[J+0>>2]=c[Ca+0>>2];c[J+4>>2]=c[Ca+4>>2];c[J+8>>2]=c[Ca+8>>2];c[J+12>>2]=c[Ca+12>>2];c[ba+0>>2]=c[Ca+16>>2];c[ba+4>>2]=c[Ca+20>>2];c[ba+8>>2]=c[Ca+24>>2];c[ba+12>>2]=c[Ca+28>>2];c[ma+0>>2]=c[Ca+32>>2];c[ma+4>>2]=c[Ca+36>>2];c[ma+8>>2]=c[Ca+40>>2];c[ma+12>>2]=c[Ca+44>>2];c[u+0>>2]=c[Ca+48>>2];c[u+4>>2]=c[Ca+52>>2];c[u+8>>2]=c[Ca+56>>2];c[u+12>>2]=c[Ca+60>>2];Ca=c[f+20>>2]|0;c[j+480>>2]=18952;c[j+512>>2]=h;c[ya+0>>2]=c[j+168>>2];c[ya+4>>2]=c[j+172>>2];c[ya+8>>2]=c[j+176>>2];c[ya+12>>2]=c[j+180>>2];c[va+0>>2]=c[O+0>>2];c[va+4>>2]=c[O+4>>2];c[va+8>>2]=c[O+8>>2];c[va+12>>2]=c[O+12>>2];c[xa+0>>2]=c[I+0>>2];c[xa+4>>2]=c[I+4>>2];c[xa+8>>2]=c[I+8>>2];c[xa+12>>2]=c[I+12>>2];c[oa+0>>2]=c[na+0>>2];c[oa+4>>2]=c[na+4>>2];c[oa+8>>2]=c[na+8>>2];c[oa+12>>2]=c[na+12>>2];c[wa+0>>2]=c[J+0>>2];c[wa+4>>2]=c[J+4>>2];c[wa+8>>2]=c[J+8>>2];c[wa+12>>2]=c[J+12>>2];c[k+0>>2]=c[ba+0>>2];c[k+4>>2]=c[ba+4>>2];c[k+8>>2]=c[ba+8>>2];c[k+12>>2]=c[ba+12>>2];c[n+0>>2]=c[ma+0>>2];c[n+4>>2]=c[ma+4>>2];c[n+8>>2]=c[ma+8>>2];c[n+12>>2]=c[ma+12>>2];c[r+0>>2]=c[u+0>>2];c[r+4>>2]=c[u+4>>2];c[r+8>>2]=c[u+8>>2];c[r+12>>2]=c[u+12>>2];c[t+0>>2]=c[j+720>>2];c[t+4>>2]=c[j+724>>2];c[t+8>>2]=c[j+728>>2];c[t+12>>2]=c[j+732>>2];c[ta+0>>2]=c[l+0>>2];c[ta+4>>2]=c[l+4>>2];c[ta+8>>2]=c[l+8>>2];c[ta+12>>2]=c[l+12>>2];c[s+0>>2]=c[ua+0>>2];c[s+4>>2]=c[ua+4>>2];c[s+8>>2]=c[ua+8>>2];c[s+12>>2]=c[ua+12>>2];c[sa+0>>2]=c[za+0>>2];c[sa+4>>2]=c[za+4>>2];c[sa+8>>2]=c[za+8>>2];c[sa+12>>2]=c[za+12>>2];a[j+708>>0]=v<w&1;c[j+712>>2]=Ca;Az(j+88|0,j+168|0,j+480|0,Ca,0);Aa=c[b+28>>2]|0;Ba=Ba+1|0}while((Ba|0)<(Aa|0))}else{Ba=0;do{aa=+(Ba|0)*(6.2831854820251465/+(Aa|0))*.5;la=+T(+aa)/A;aa=+S(+aa);Ca=c[d+12>>2]|0;c[j+168>>2]=c[Ca+0>>2];c[j+172>>2]=c[Ca+4>>2];c[j+176>>2]=c[Ca+8>>2];c[j+180>>2]=c[Ca+12>>2];c[O+0>>2]=c[Ca+16>>2];c[O+4>>2]=c[Ca+20>>2];c[O+8>>2]=c[Ca+24>>2];c[O+12>>2]=c[Ca+28>>2];c[I+0>>2]=c[Ca+32>>2];c[I+4>>2]=c[Ca+36>>2];c[I+8>>2]=c[Ca+40>>2];c[I+12>>2]=c[Ca+44>>2];c[na+0>>2]=c[Ca+48>>2];c[na+4>>2]=c[Ca+52>>2];c[na+8>>2]=c[Ca+56>>2];c[na+12>>2]=c[Ca+60>>2];ha=z*-(m*q*la)+(x*aa+B*-(p*q*la))-y*-(o*q*la);qa=x*-(o*q*la)+(y*aa+B*-(m*q*la))-z*-(p*q*la);ia=y*-(p*q*la)+(z*aa+B*-(o*q*la))-x*-(m*q*la);$=B*aa-x*-(p*q*la)-y*-(m*q*la)-z*-(o*q*la);ka=o*q*la*qa+(p*q*la*$+aa*ha)-m*q*la*ia;pa=p*q*la*ia+(aa*qa+m*q*la*$)-o*q*la*ha;_=m*q*la*ha+(o*q*la*$+aa*ia)-p*q*la*qa;ia=aa*$-p*q*la*ha-m*q*la*qa-o*q*la*ia;la=ka*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));qa=pa*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));ha=_*(2.0/(ia*ia+(_*_+(ka*ka+pa*pa))));Ca=c[e+12>>2]|0;$=+g[Ca>>2];aa=+g[Ca+16>>2];ca=+g[Ca+32>>2];da=+g[Ca+4>>2];ea=+g[Ca+20>>2];fa=+g[Ca+36>>2];ga=+g[Ca+8>>2];ja=+g[Ca+24>>2];ra=+g[Ca+40>>2];g[j+232>>2]=(ka*ha+ia*qa)*ca+(aa*(ka*qa-ia*ha)+$*(1.0-(pa*qa+_*ha)));g[j+236>>2]=(1.0-(pa*qa+_*ha))*da+(ka*qa-ia*ha)*ea+(ka*ha+ia*qa)*fa;g[j+240>>2]=(1.0-(pa*qa+_*ha))*ga+(ka*qa-ia*ha)*ja+(ka*ha+ia*qa)*ra;g[j+244>>2]=0.0;g[j+248>>2]=(pa*ha-ia*la)*ca+($*(ka*qa+ia*ha)+aa*(1.0-(ka*la+_*ha)));g[j+252>>2]=(ka*qa+ia*ha)*da+(1.0-(ka*la+_*ha))*ea+(pa*ha-ia*la)*fa;g[j+256>>2]=(ka*qa+ia*ha)*ga+(1.0-(ka*la+_*ha))*ja+(pa*ha-ia*la)*ra;g[j+260>>2]=0.0;g[j+264>>2]=$*(ka*ha-ia*qa)+aa*(pa*ha+ia*la)+ca*(1.0-(ka*la+pa*qa));g[j+268>>2]=(ka*ha-ia*qa)*da+(pa*ha+ia*la)*ea+(1.0-(ka*la+pa*qa))*fa;g[j+272>>2]=(ka*ha-ia*qa)*ga+(pa*ha+ia*la)*ja+(1.0-(ka*la+pa*qa))*ra;g[j+276>>2]=0.0;Ca=c[f+20>>2]|0;c[j+480>>2]=18952;c[j+512>>2]=h;c[ya+0>>2]=c[j+168>>2];c[ya+4>>2]=c[j+172>>2];c[ya+8>>2]=c[j+176>>2];c[ya+12>>2]=c[j+180>>2];c[va+0>>2]=c[O+0>>2];c[va+4>>2]=c[O+4>>2];c[va+8>>2]=c[O+8>>2];c[va+12>>2]=c[O+12>>2];c[xa+0>>2]=c[I+0>>2];c[xa+4>>2]=c[I+4>>2];c[xa+8>>2]=c[I+8>>2];c[xa+12>>2]=c[I+12>>2];c[oa+0>>2]=c[na+0>>2];c[oa+4>>2]=c[na+4>>2];c[oa+8>>2]=c[na+8>>2];c[oa+12>>2]=c[na+12>>2];c[wa+0>>2]=c[J+0>>2];c[wa+4>>2]=c[J+4>>2];c[wa+8>>2]=c[J+8>>2];c[wa+12>>2]=c[J+12>>2];c[k+0>>2]=c[ba+0>>2];c[k+4>>2]=c[ba+4>>2];c[k+8>>2]=c[ba+8>>2];c[k+12>>2]=c[ba+12>>2];c[n+0>>2]=c[ma+0>>2];c[n+4>>2]=c[ma+4>>2];c[n+8>>2]=c[ma+8>>2];c[n+12>>2]=c[ma+12>>2];c[r+0>>2]=c[u+0>>2];c[r+4>>2]=c[u+4>>2];c[r+8>>2]=c[u+8>>2];c[r+12>>2]=c[u+12>>2];c[t+0>>2]=c[j+720>>2];c[t+4>>2]=c[j+724>>2];c[t+8>>2]=c[j+728>>2];c[t+12>>2]=c[j+732>>2];c[ta+0>>2]=c[l+0>>2];c[ta+4>>2]=c[l+4>>2];c[ta+8>>2]=c[l+8>>2];c[ta+12>>2]=c[l+12>>2];c[s+0>>2]=c[ua+0>>2];c[s+4>>2]=c[ua+4>>2];c[s+8>>2]=c[ua+8>>2];c[s+12>>2]=c[ua+12>>2];c[sa+0>>2]=c[za+0>>2];c[sa+4>>2]=c[za+4>>2];c[sa+8>>2]=c[za+8>>2];c[sa+12>>2]=c[za+12>>2];a[j+708>>0]=v<w&1;c[j+712>>2]=Ca;Az(j+88|0,j+168|0,j+480|0,Ca,0);Aa=c[b+28>>2]|0;Ba=Ba+1|0}while((Ba|0)<(Aa|0))}}else if(v<w){d=0;do d=d+1|0;while((d|0)<(Aa|0))}else{d=0;do d=d+1|0;while((d|0)<(Aa|0))}}}if(!(a[b+16>>0]|0)){i=j;return}b=c[h+4>>2]|0;if(!(c[b+748>>2]|0)){i=j;return}d=c[b+740>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;if((d|0)==(e|0)){xA(b,d+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=j;return}else{xA(b,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,e+4|0);i=j;return}}function pD(a){a=a|0;return}function qD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;f=i;i=i+624|0;p=+g[d+116>>2]- +g[d+52>>2];o=+g[d+120>>2]- +g[d+56>>2];n=+g[d+124>>2]- +g[d+60>>2];l=+g[e+116>>2]- +g[e+52>>2];k=+g[e+120>>2]- +g[e+56>>2];j=+g[e+124>>2]- +g[e+60>>2];m=+g[d+252>>2];if(p*p+o*o+n*n<m*m?(p=+g[e+252>>2],l*l+k*k+j*j<p*p):0){p=1.0;i=f;return+p}b=c[d+192>>2]|0;p=+g[e+248>>2];c[f+576>>2]=0;g[f+580>>2]=1.0;g[f+584>>2]=1.0;g[f+588>>2]=1.0;g[f+592>>2]=0.0;c[f+568>>2]=16680;c[f+572>>2]=8;g[f+596>>2]=p;g[f+612>>2]=p;c[f+392>>2]=9440;g[f+556>>2]=999999984306749400.0;c[f+560>>2]=0;g[f+564>>2]=0.0;g[f+340>>2]=9999999747378752.0e-20;a[f+364>>0]=0;c[f+16>>2]=13184;c[f+20>>2]=f+32;c[f+24>>2]=b;c[f+28>>2]=f+568;if(wz(f+16|0,d+4|0,d+68|0,e+4|0,e+68|0,f+392|0)|0){k=+g[f+556>>2];if(+g[d+244>>2]>k)g[d+244>>2]=k;if(+g[e+244>>2]>k)g[e+244>>2]=k;if(!(k<1.0))k=1.0}else k=1.0;b=c[e+192>>2]|0;p=+g[d+248>>2];c[f+576>>2]=0;g[f+580>>2]=1.0;g[f+584>>2]=1.0;g[f+588>>2]=1.0;g[f+592>>2]=0.0;c[f+568>>2]=16680;c[f+572>>2]=8;g[f+596>>2]=p;g[f+612>>2]=p;c[f+392>>2]=9440;g[f+556>>2]=999999984306749400.0;c[f+560>>2]=0;g[f+564>>2]=0.0;g[f+340>>2]=9999999747378752.0e-20;a[f+364>>0]=a[f+364>>0]&-16;c[f>>2]=13184;c[f+4>>2]=f+32;c[f+8>>2]=f+568;c[f+12>>2]=b;if(!(wz(f,d+4|0,d+68|0,e+4|0,e+68|0,f+392|0)|0)){p=k;i=f;return+p}j=+g[f+556>>2];if(+g[d+244>>2]>j)g[d+244>>2]=j;if(+g[e+244>>2]>j)g[e+244>>2]=j;if(!(k>j)){p=k;i=f;return+p}p=j;i=f;return+p}function rD(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+20>>2]|0)){i=e;return}if(!(a[b+16>>0]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+20>>2];c[d+4>>2]=h+1;i=e;return}function sD(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;e=i;f=c[d>>2]|0;f=gc[c[(c[f>>2]|0)+56>>2]&31](f,36)|0;if(!f){f=0;i=e;return f|0}h=c[d+4>>2]|0;k=c[b+12>>2]|0;j=c[b+8>>2]|0;g=c[b+16>>2]|0;b=c[b+20>>2]|0;c[f+4>>2]=c[d>>2];c[f>>2]=18816;c[f+8>>2]=k;c[f+12>>2]=j;a[f+16>>0]=0;c[f+20>>2]=h;a[f+24>>0]=0;c[f+28>>2]=g;c[f+32>>2]=b;i=e;return f|0}function tD(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function uD(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0;l=i;i=i+16|0;n=+g[d>>2];h=+g[d+4>>2];j=+g[d+8>>2];m=+g[e>>2];k=+g[e+4>>2];o=+g[e+8>>2];if(!(a[b+228>>0]|0)){z=+g[b+100>>2];w=+g[b+116>>2];C=+g[b+132>>2];y=+g[b+104>>2];u=+g[b+120>>2];B=+g[b+136>>2];x=+g[b+108>>2];s=+g[b+124>>2];A=+g[b+140>>2];F=-+g[b+148>>2];E=-+g[b+152>>2];D=-+g[b+156>>2];I=+g[b+164>>2];r=+g[b+168>>2];J=+g[b+172>>2];H=+g[b+180>>2];G=+g[b+184>>2];q=+g[b+188>>2];v=+g[b+196>>2];t=+g[b+200>>2];p=+g[b+204>>2];r=o*(C*I+B*r+A*J)+(m*(z*I+y*r+x*J)+k*(w*I+u*r+s*J))+((x*F+s*E+A*D)*J+(I*(z*F+w*E+C*D)+r*(y*F+u*E+B*D))+ +g[b+212>>2]);q=o*(C*H+B*G+A*q)+(m*(z*H+y*G+x*q)+k*(w*H+u*G+s*q))+((z*F+w*E+C*D)*H+(y*F+u*E+B*D)*G+(x*F+s*E+A*D)*q+ +g[b+216>>2]);p=(z*F+w*E+C*D)*v+(y*F+u*E+B*D)*t+(x*F+s*E+A*D)*p+ +g[b+220>>2]+(o*(C*v+B*t+A*p)+(m*(z*v+y*t+x*p)+k*(w*v+u*t+s*p)));g[l>>2]=r;g[l+4>>2]=q;g[l+8>>2]=p;g[l+12>>2]=0.0;o=(n*f+m-r)*+g[d>>2]+(h*f+k-q)*+g[d+4>>2]+(j*f+o-p)*+g[d+8>>2];e=b+32|0;e=c[e>>2]|0;b=c[e>>2]|0;b=b+16|0;b=c[b>>2]|0;qc[b&15](e,d,l,o);i=l;return}else{z=+g[b+36>>2];C=+g[b+52>>2];w=+g[b+68>>2];A=+g[b+40>>2];E=+g[b+56>>2];x=+g[b+72>>2];B=+g[b+44>>2];G=+g[b+60>>2];y=+g[b+76>>2];t=-+g[b+84>>2];u=-+g[b+88>>2];v=-+g[b+92>>2];q=+g[b+164>>2];H=+g[b+168>>2];p=+g[b+172>>2];r=+g[b+180>>2];s=+g[b+184>>2];I=+g[b+188>>2];D=+g[b+196>>2];F=+g[b+200>>2];J=+g[b+204>>2];H=(j*f+o)*(w*q+x*H+y*p)+((n*f+m)*(z*q+A*H+B*p)+(h*f+k)*(C*q+E*H+G*p))+((B*t+G*u+y*v)*p+(q*(z*t+C*u+w*v)+H*(A*t+E*u+x*v))+ +g[b+212>>2]);I=(j*f+o)*(w*r+x*s+y*I)+((n*f+m)*(z*r+A*s+B*I)+(h*f+k)*(C*r+E*s+G*I))+((z*t+C*u+w*v)*r+(A*t+E*u+x*v)*s+(B*t+G*u+y*v)*I+ +g[b+216>>2]);J=(z*t+C*u+w*v)*D+(A*t+E*u+x*v)*F+(B*t+G*u+y*v)*J+ +g[b+220>>2]+((j*f+o)*(w*D+x*F+y*J)+((n*f+m)*(z*D+A*F+B*J)+(h*f+k)*(C*D+E*F+G*J)));g[l>>2]=H+n*(n*(H-m)+h*(I-k)+j*(J-o));g[l+4>>2]=I+h*(n*(H-m)+h*(I-k)+j*(J-o));g[l+8>>2]=J+j*(n*(H-m)+h*(I-k)+j*(J-o));g[l+12>>2]=0.0;J=n*(H-m)+h*(I-k)+j*(J-o);e=b+32|0;e=c[e>>2]|0;b=c[e>>2]|0;b=b+16|0;b=c[b>>2]|0;qc[b&15](e,d,l,J);i=l;return}}function vD(a){a=a|0;return}function wD(a){a=a|0;return}function xD(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function yD(a,b,c){a=a|0;b=b|0;c=c|0;return}function zD(a,b,c){a=a|0;b=b|0;c=c|0;return}function AD(b,d,e,f){b=b|0;d=d|0;e=e|0;f=+f;var h=0,j=0.0,k=0.0,l=0.0;h=i;i=i+16|0;g[b+32>>2]=f;c[b+8>>2]=c[d+0>>2];c[b+12>>2]=c[d+4>>2];c[b+16>>2]=c[d+8>>2];c[b+20>>2]=c[d+12>>2];j=+g[b+28>>2];l=+g[e+4>>2]-j*+g[d+4>>2];k=+g[e+8>>2]-j*+g[d+8>>2];g[h>>2]=+g[e>>2]- +g[d>>2]*j;g[h+4>>2]=l;g[h+8>>2]=k;g[h+12>>2]=0.0;f=+g[b+24>>2]+j+f;g[b+32>>2]=f;if(!(f<0.0)){e=b+4|0;e=c[e>>2]|0;b=c[e>>2]|0;b=b+16|0;b=c[b>>2]|0;qc[b&15](e,d,h,f);i=h;return}a[b+36>>0]=1;e=b+4|0;e=c[e>>2]|0;b=c[e>>2]|0;b=b+16|0;b=c[b>>2]|0;qc[b&15](e,d,h,f);i=h;return}function BD(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function CD(a,b,c){a=a|0;b=b|0;c=c|0;return}function DD(a,b,c){a=a|0;b=b|0;c=c|0;return}function ED(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;return}function FD(b){b=b|0;var d=0,e=0,f=0;d=i;c[b>>2]=19408;if((a[b+8>>0]|0)!=0?(e=c[b+12>>2]|0,(e|0)!=0):0){f=c[b+4>>2]|0;Nb[c[(c[f>>2]|0)+16>>2]&127](f,e)}gF(b);i=d;return}function GD(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=19408;if(!(a[b+8>>0]|0)){i=d;return}e=c[b+12>>2]|0;if(!e){i=d;return}b=c[b+4>>2]|0;Nb[c[(c[b>>2]|0)+16>>2]&127](b,e);i=d;return}function HD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0,K=0,L=0.0,M=0.0,N=0.0,O=0.0,R=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0;f=i;i=i+128|0;if(!(c[b+12>>2]|0)){i=f;return}C=(a[b+16>>0]|0)!=0;K=C?e:d;C=C?d:e;o=c[K+4>>2]|0;j=c[C+4>>2]|0;K=c[K+12>>2]|0;q=+g[K>>2];D=+g[K+16>>2];z=+g[K+32>>2];t=+g[K+4>>2];s=+g[K+20>>2];r=+g[K+36>>2];p=+g[K+8>>2];n=+g[K+24>>2];y=+g[K+40>>2];F=+g[K+48>>2];G=+g[K+52>>2];H=+g[K+56>>2];K=c[C+12>>2]|0;O=+g[K>>2];N=+g[K+16>>2];k=+g[K+32>>2];M=+g[K+4>>2];L=+g[K+20>>2];x=+g[K+36>>2];m=+g[K+8>>2];B=+g[K+24>>2];v=+g[K+40>>2];I=-+g[K+48>>2];E=-+g[K+52>>2];u=-+g[K+56>>2];K=c[(c[o>>2]|0)+64>>2]|0;A=-+g[j+48>>2];l=-+g[j+52>>2];w=-+g[j+56>>2];g[f+32>>2]=(q*O+D*N+z*k)*A+(q*M+D*L+z*x)*l+(q*m+D*B+z*v)*w;g[f+36>>2]=(t*O+s*N+r*k)*A+(t*M+s*L+r*x)*l+(t*m+s*B+r*v)*w;g[f+40>>2]=(p*O+n*N+y*k)*A+(p*M+n*L+y*x)*l+(p*m+n*B+y*v)*w;g[f+44>>2]=0.0;rc[K&127](f+48|0,o,f+32|0);w=+g[f+48>>2];l=+g[f+52>>2];A=+g[f+56>>2];k=F*O+G*N+H*k+(O*I+N*E+k*u)+((q*O+D*N+z*k)*w+(t*O+s*N+r*k)*l+(p*O+n*N+y*k)*A);x=F*M+G*L+H*x+(M*I+L*E+x*u)+((q*M+D*L+z*x)*w+(t*M+s*L+r*x)*l+(p*M+n*L+y*x)*A);A=F*m+G*B+H*v+(m*I+B*E+v*u)+((q*m+D*B+z*v)*w+(t*m+s*B+r*v)*l+(p*m+n*B+y*v)*A);v=+g[j+48>>2];y=+g[j+52>>2];B=+g[j+56>>2];n=B*A+(v*k+y*x)- +g[j+64>>2];K=c[C+12>>2]|0;m=+g[K>>2];p=+g[K+4>>2];l=+g[K+8>>2];r=+g[K+16>>2];s=+g[K+20>>2];t=+g[K+24>>2];w=+g[K+32>>2];z=+g[K+36>>2];D=+g[K+40>>2];q=+g[K+48>>2];u=+g[K+52>>2];E=+g[K+56>>2];K=c[b+12>>2]|0;J=n<+g[K+752>>2];c[h+4>>2]=K;if(J){K=c[C+12>>2]|0;N=v*+g[K+16>>2]+y*+g[K+20>>2]+B*+g[K+24>>2];O=v*+g[K+32>>2]+y*+g[K+36>>2]+B*+g[K+40>>2];g[f+16>>2]=+g[K>>2]*v+ +g[K+4>>2]*y+ +g[K+8>>2]*B;g[f+20>>2]=N;g[f+24>>2]=O;g[f+28>>2]=0.0;g[f>>2]=l*(A-B*n)+(m*(k-v*n)+p*(x-y*n))+q;g[f+4>>2]=(k-v*n)*r+(x-y*n)*s+(A-B*n)*t+u;g[f+8>>2]=(k-v*n)*w+(x-y*n)*z+(A-B*n)*D+E;g[f+12>>2]=0.0;qc[c[(c[h>>2]|0)+16>>2]&15](h,f+16|0,f,n)}if((c[o+4>>2]|0)<7?(c[(c[h+4>>2]|0)+748>>2]|0)<(c[b+24>>2]|0):0){l=+g[j+56>>2];if(+P(+l)>.7071067690849304){O=+g[j+52>>2];m=1.0/+Q(+(l*l+O*O));k=0.0;l=-(l*m);m=O*m}else{m=+g[j+48>>2];k=+g[j+52>>2];l=1.0/+Q(+(m*m+k*k));k=-(k*l);l=m*l;m=0.0}O=.019999999552965164/+$b[c[(c[o>>2]|0)+16>>2]&15](o);n=+Q(+(m*m+(l*l+k*k)));O=O>.39269909262657166?.19634954631328583:O*.5;n=+T(+O)/n;k=k*n;l=l*n;n=m*n;m=+S(+O);C=c[b+20>>2]|0;if((C|0)>0){o=0;do{q=+g[j+48>>2];O=+g[j+52>>2];p=+g[j+56>>2];x=+(o|0)*(6.2831854820251465/+(C|0))*.5;N=+T(+x)/+Q(+(q*q+O*O+p*p));x=+S(+x);z=n*-(O*N)+(k*x+m*-(q*N))-l*-(p*N);s=k*-(p*N)+(l*x+m*-(O*N))-n*-(q*N);fa=l*-(q*N)+(n*x+m*-(p*N))-k*-(O*N);A=m*x-k*-(q*N)-l*-(O*N)-n*-(p*N);E=p*N*s+(q*N*A+x*z)-O*N*fa;D=q*N*fa+(x*s+O*N*A)-p*N*z;ba=O*N*z+(p*N*A+x*fa)-q*N*s;fa=x*A-q*N*z-O*N*s-p*N*fa;C=(a[b+16>>0]|0)!=0;$=C?e:d;C=C?d:e;K=c[$+4>>2]|0;J=c[C+4>>2]|0;$=c[$+12>>2]|0;N=+g[$>>2];p=+g[$+4>>2];s=+g[$+8>>2];O=+g[$+16>>2];z=+g[$+20>>2];q=+g[$+24>>2];A=+g[$+32>>2];x=+g[$+36>>2];H=+g[$+40>>2];W=+g[$+48>>2];V=+g[$+52>>2];U=+g[$+56>>2];$=c[C+12>>2]|0;_=+g[$>>2];Z=+g[$+16>>2];u=+g[$+32>>2];Y=+g[$+4>>2];X=+g[$+20>>2];w=+g[$+36>>2];r=+g[$+8>>2];F=+g[$+24>>2];G=+g[$+40>>2];R=-+g[$+48>>2];L=-+g[$+52>>2];M=-+g[$+56>>2];t=E*(2.0/(E*E+D*D+ba*ba+fa*fa));I=D*(2.0/(E*E+D*D+ba*ba+fa*fa));ga=ba*(2.0/(E*E+D*D+ba*ba+fa*fa));da=s*(E*ga-fa*I)+(p*(E*I+fa*ga)+N*(1.0-(D*I+ba*ga)));aa=s*(D*ga+fa*t)+(N*(E*I-fa*ga)+p*(1.0-(E*t+ba*ga)));y=N*(E*ga+fa*I)+p*(D*ga-fa*t)+s*(1.0-(E*t+D*I));ca=q*(E*ga-fa*I)+(z*(E*I+fa*ga)+O*(1.0-(D*I+ba*ga)));B=q*(D*ga+fa*t)+(O*(E*I-fa*ga)+z*(1.0-(E*t+ba*ga)));v=O*(E*ga+fa*I)+z*(D*ga-fa*t)+q*(1.0-(E*t+D*I));ea=H*(E*ga-fa*I)+(x*(E*I+fa*ga)+A*(1.0-(D*I+ba*ga)));ba=H*(D*ga+fa*t)+(A*(E*I-fa*ga)+x*(1.0-(E*t+ba*ga)));I=A*(E*ga+fa*I)+x*(D*ga-fa*t)+H*(1.0-(E*t+D*I));$=c[(c[K>>2]|0)+64>>2]|0;D=-+g[J+48>>2];t=-+g[J+52>>2];E=-+g[J+56>>2];g[f+96>>2]=(G*ea+(r*da+F*ca))*E+((u*ea+(_*da+Z*ca))*D+(w*ea+(Y*da+X*ca))*t);g[f+100>>2]=(G*ba+(r*aa+F*B))*E+((u*ba+(_*aa+Z*B))*D+(w*ba+(Y*aa+X*B))*t);g[f+104>>2]=(G*I+(r*y+F*v))*E+((u*I+(_*y+Z*v))*D+(w*I+(Y*y+X*v))*t);g[f+108>>2]=0.0;rc[$&127](f+112|0,K,f+96|0);t=+g[f+112>>2];v=+g[f+116>>2];y=+g[f+120>>2];I=+g[J+48>>2];D=+g[J+52>>2];E=+g[J+56>>2];B=E*(W*r+V*F+U*G+(r*R+F*L+G*M)+((N*r+O*F+A*G)*t+(p*r+z*F+x*G)*v+(s*r+q*F+H*G)*y))+(I*(W*_+V*Z+U*u+(_*R+Z*L+u*M)+((N*_+O*Z+A*u)*t+(p*_+z*Z+x*u)*v+(s*_+q*Z+H*u)*y))+D*(W*Y+V*X+U*w+(Y*R+X*L+w*M)+((N*Y+O*X+A*w)*t+(p*Y+z*X+x*w)*v+(s*Y+q*X+H*w)*y)))- +g[J+64>>2];u=W*_+V*Z+U*u+(_*R+Z*L+u*M)+((N*_+O*Z+A*u)*t+(p*_+z*Z+x*u)*v+(s*_+q*Z+H*u)*y)-I*B;w=W*Y+V*X+U*w+(Y*R+X*L+w*M)+((N*Y+O*X+A*w)*t+(p*Y+z*X+x*w)*v+(s*Y+q*X+H*w)*y)-D*B;y=W*r+V*F+U*G+(r*R+F*L+G*M)+((N*r+O*F+A*G)*t+(p*r+z*F+x*G)*v+(s*r+q*F+H*G)*y)-E*B;J=c[C+12>>2]|0;G=+g[J>>2];H=+g[J+4>>2];F=+g[J+8>>2];q=+g[J+16>>2];r=+g[J+20>>2];s=+g[J+24>>2];v=+g[J+32>>2];x=+g[J+36>>2];z=+g[J+40>>2];p=+g[J+48>>2];t=+g[J+52>>2];A=+g[J+56>>2];J=c[b+12>>2]|0;K=B<+g[J+752>>2];c[h+4>>2]=J;if(K){$=c[C+12>>2]|0;fa=I*+g[$+16>>2]+D*+g[$+20>>2]+E*+g[$+24>>2];ga=I*+g[$+32>>2]+D*+g[$+36>>2]+E*+g[$+40>>2];g[f+80>>2]=+g[$>>2]*I+ +g[$+4>>2]*D+ +g[$+8>>2]*E;g[f+84>>2]=fa;g[f+88>>2]=ga;g[f+92>>2]=0.0;g[f+64>>2]=F*y+(G*u+H*w)+p;g[f+68>>2]=u*q+w*r+y*s+t;g[f+72>>2]=u*v+w*x+y*z+A;g[f+76>>2]=0.0;qc[c[(c[h>>2]|0)+16>>2]&15](h,f+80|0,f+64|0,B)}o=o+1|0;C=c[b+20>>2]|0}while((o|0)<(C|0))}}if(!(a[b+8>>0]|0)){i=f;return}if(!(c[(c[b+12>>2]|0)+748>>2]|0)){i=f;return}b=c[h+4>>2]|0;if(!(c[b+748>>2]|0)){i=f;return}d=c[b+740>>2]|0;e=c[(c[h+8>>2]|0)+8>>2]|0;if((d|0)==(e|0)){xA(b,d+4|0,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0);i=f;return}else{xA(b,(c[(c[h+12>>2]|0)+8>>2]|0)+4|0,e+4|0);i=f;return}}function ID(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return 1.0}function JD(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if(!(c[b+12>>2]|0)){i=e;return}if(!(a[b+8>>0]|0)){i=e;return}h=c[d+4>>2]|0;if((h|0)==(c[d+8>>2]|0)?(f=(h|0)==0?1:h<<1,(h|0)<(f|0)):0){if(!f)g=0;else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}h=c[d+4>>2]|0}if((h|0)>0){j=0;do{k=g+(j<<2)|0;if(k)c[k>>2]=c[(c[d+12>>2]|0)+(j<<2)>>2];j=j+1|0}while((j|0)!=(h|0))}j=c[d+12>>2]|0;if(j){if(a[d+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0);h=c[d+4>>2]|0}c[d+12>>2]=0}a[d+16>>0]=1;c[d+12>>2]=g;c[d+8>>2]=f}f=(c[d+12>>2]|0)+(h<<2)|0;if(f)c[f>>2]=c[b+12>>2];c[d+4>>2]=h+1;i=e;return}function KD(a){a=a|0;var b=0;b=i;LD(a);if(!a){i=b;return}c[5006]=(c[5006]|0)+1;gF(c[a+ -4>>2]|0);i=b;return}function LD(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;c[b>>2]=19496;e=c[b+56>>2]|0;if(e){if(a[b+60>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+56>>2]=0}a[b+60>>0]=1;c[b+56>>2]=0;c[b+48>>2]=0;c[b+52>>2]=0;f=c[b+28>>2]|0;if((f|0)>0){g=0;do{h=c[b+36>>2]|0;l=h+(g*36|0)+4|0;k=h+(g*36|0)+12|0;e=c[k>>2]|0;j=h+(g*36|0)+16|0;if(e){if(a[j>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[k>>2]=0}a[j>>0]=1;c[k>>2]=0;c[l>>2]=0;c[h+(g*36|0)+8>>2]=0;g=g+1|0}while((g|0)!=(f|0))}e=c[b+36>>2]|0;if(e){if(a[b+40>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+36>>2]=0}a[b+40>>0]=1;c[b+36>>2]=0;c[b+28>>2]=0;c[b+32>>2]=0;e=c[b+16>>2]|0;if(!e){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;l=b+12|0;c[l>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;l=b+12|0;c[l>>2]=0;i=d;return}function MD(a){a=a|0;var b=0,d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0;b=i;d=c[a+28>>2]|0;if((d|0)<=0){a=0;do a=a+1|0;while((a|0)<8);d=1;i=b;return d|0}e=c[a+36>>2]|0;k=0.0;j=0.0;h=0.0;f=0;a:while(1){switch(f|0){case 1:{h=+g[a+72>>2]- +g[a+88>>2];j=+g[a+84>>2]+ +g[a+68>>2];k=+g[a+80>>2]+ +g[a+64>>2];break};case 4:{h=+g[a+88>>2]+ +g[a+72>>2];j=+g[a+84>>2]+ +g[a+68>>2];k=+g[a+64>>2]- +g[a+80>>2];break};case 2:{h=+g[a+88>>2]+ +g[a+72>>2];j=+g[a+68>>2]- +g[a+84>>2];k=+g[a+80>>2]+ +g[a+64>>2];break};case 0:{h=+g[a+88>>2]+ +g[a+72>>2];j=+g[a+84>>2]+ +g[a+68>>2];k=+g[a+80>>2]+ +g[a+64>>2];break};case 3:{h=+g[a+72>>2]- +g[a+88>>2];j=+g[a+68>>2]- +g[a+84>>2];k=+g[a+80>>2]+ +g[a+64>>2];break};case 6:{h=+g[a+88>>2]+ +g[a+72>>2];j=+g[a+68>>2]- +g[a+84>>2];k=+g[a+64>>2]- +g[a+80>>2];break};case 7:{h=+g[a+72>>2]- +g[a+88>>2];j=+g[a+68>>2]- +g[a+84>>2];k=+g[a+64>>2]- +g[a+80>>2];break};case 5:{h=+g[a+72>>2]- +g[a+88>>2];j=+g[a+84>>2]+ +g[a+68>>2];k=+g[a+64>>2]- +g[a+80>>2];break};default:{}}l=0;do{if(+g[e+(l*36|0)+32>>2]+(k*+g[e+(l*36|0)+20>>2]+j*+g[e+(l*36|0)+24>>2]+h*+g[e+(l*36|0)+28>>2])>0.0){d=0;a=17;break a}l=l+1|0}while((l|0)<(d|0));f=f+1|0;if((f|0)>=8){d=1;a=17;break}}if((a|0)==17){i=b;return d|0}return 0}function ND(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0.0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0;k=i;i=i+16|0;g[e>>2]=3.4028234663852886e+38;g[f>>2]=-3.4028234663852886e+38;m=c[a+8>>2]|0;if((m|0)>0){n=0;do{s=c[a+16>>2]|0;r=+g[s+(n<<4)>>2];q=+g[s+(n<<4)+4>>2];l=+g[s+(n<<4)+8>>2];p=r*+g[b>>2]+q*+g[b+4>>2]+l*+g[b+8>>2]+ +g[b+48>>2];o=r*+g[b+16>>2]+q*+g[b+20>>2]+l*+g[b+24>>2]+ +g[b+52>>2];l=r*+g[b+32>>2]+q*+g[b+36>>2]+l*+g[b+40>>2]+ +g[b+56>>2];q=p*+g[d>>2]+o*+g[d+4>>2]+l*+g[d+8>>2];if(q<+g[e>>2]){g[e>>2]=q;g[h>>2]=p;g[h+4>>2]=o;g[h+8>>2]=l;g[h+12>>2]=0.0}if(q>+g[f>>2]){g[f>>2]=q;g[j>>2]=p;g[j+4>>2]=o;g[j+8>>2]=l;g[j+12>>2]=0.0}n=n+1|0}while((n|0)!=(m|0));o=+g[f>>2]}else o=-3.4028234663852886e+38;l=+g[e>>2];if(!(l>o)){i=k;return}g[e>>2]=o;g[f>>2]=l;c[k+0>>2]=c[h+0>>2];c[k+4>>2]=c[h+4>>2];c[k+8>>2]=c[h+8>>2];c[k+12>>2]=c[h+12>>2];c[h+0>>2]=c[j+0>>2];c[h+4>>2]=c[j+4>>2];c[h+8>>2]=c[j+8>>2];c[h+12>>2]=c[j+12>>2];c[j+0>>2]=c[k+0>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];i=k;return}function OD(b,e,f){b=b|0;e=e|0;f=f|0;var h=0,j=0.0,k=0,l=0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0;h=i;i=i+176|0;c[b+348>>2]=b+220;c[b+352>>2]=b+252;c[b+356>>2]=b+284;c[b+360>>2]=b+316;c[b+364>>2]=4;c[b+368>>2]=0;c[b+376>>2]=0;y=c[e+4>>2]|0;c[b>>2]=c[e>>2];c[b+4>>2]=y;c[b+8>>2]=c[e+8>>2];c[b+12>>2]=c[e+12>>2];c[b+16>>2]=c[e+16>>2];c[b+20>>2]=c[e+20>>2];c[b+24>>2]=c[e+24>>2];c[b+28>>2]=c[e+28>>2];c[b+32>>2]=c[e+32>>2];c[b+36>>2]=c[e+36>>2];c[b+40>>2]=c[e+40>>2];c[b+44>>2]=c[e+44>>2];c[b+48>>2]=c[e+48>>2];c[b+52>>2]=c[e+52>>2];c[b+56>>2]=c[e+56>>2];c[b+60>>2]=c[e+60>>2];c[b+64>>2]=c[e+64>>2];c[b+68>>2]=c[e+68>>2];c[b+72>>2]=c[e+72>>2];c[b+76>>2]=c[e+76>>2];c[b+80>>2]=c[e+80>>2];c[b+84>>2]=c[e+84>>2];c[b+88>>2]=c[e+88>>2];c[b+92>>2]=c[e+92>>2];c[b+96>>2]=c[e+96>>2];c[b+100>>2]=c[e+100>>2];c[b+104>>2]=c[e+104>>2];c[b+108>>2]=c[e+108>>2];c[b+112>>2]=c[e+112>>2];c[b+116>>2]=c[e+116>>2];y=d[e+120>>0]|d[e+121>>0]<<8|d[e+122>>0]<<16|d[e+123>>0]<<24;z=d[e+124>>0]|d[e+125>>0]<<8|d[e+126>>0]<<16|d[e+127>>0]<<24;a[b+120>>0]=y;a[b+121>>0]=y>>8;a[b+122>>0]=y>>16;a[b+123>>0]=y>>24;a[b+124>>0]=z;a[b+125>>0]=z>>8;a[b+126>>0]=z>>16;a[b+127>>0]=z>>24;g[b+144>>2]=0.0;c[b+180>>2]=0;c[b+128>>2]=c[f+0>>2];c[b+132>>2]=c[f+4>>2];c[b+136>>2]=c[f+8>>2];c[b+140>>2]=c[f+12>>2];s=+g[b+128>>2];t=+g[b+132>>2];n=+g[b+136>>2];if(s*s+t*t+n*n>0.0){v=-s;m=-t;u=-n}else{v=1.0;m=0.0;u=0.0}g[b+164>>2]=0.0;c[b+364>>2]=3;c[b+148>>2]=b+316;c[b+180>>2]=1;RD(b,v,m,u,b+316|0);g[b+164>>2]=1.0;e=(c[b+148>>2]|0)+16|0;c[b+128>>2]=c[e+0>>2];c[b+132>>2]=c[e+4>>2];c[b+136>>2]=c[e+8>>2];c[b+140>>2]=c[e+12>>2];c[h+72>>2]=c[e+0>>2];c[h+76>>2]=c[e+4>>2];c[h+80>>2]=c[e+8>>2];c[h+84>>2]=c[e+12>>2];c[h+56>>2]=c[e+0>>2];c[h+60>>2]=c[e+4>>2];c[h+64>>2]=c[e+8>>2];c[h+68>>2]=c[e+12>>2];c[h+40>>2]=c[e+0>>2];c[h+44>>2]=c[e+4>>2];c[h+48>>2]=c[e+8>>2];c[h+52>>2]=c[e+12>>2];c[h+24>>2]=c[e+0>>2];c[h+28>>2]=c[e+4>>2];c[h+32>>2]=c[e+8>>2];c[h+36>>2]=c[e+12>>2];m=0.0;e=1;f=1;A=s*s+t*t+n*n;a:while(1){l=c[b+368>>2]|0;u=+g[b+128>>2];t=+g[b+132>>2];s=+g[b+136>>2];n=+Q(+(u*u+t*t+s*s));if(n<9999999747378752.0e-20){k=5;break}g[b+(l*36|0)+(c[b+(l*36|0)+180>>2]<<2)+164>>2]=0.0;o=(c[b+364>>2]|0)+ -1|0;c[b+364>>2]=o;c[b+(l*36|0)+(c[b+(l*36|0)+180>>2]<<2)+148>>2]=c[b+(o<<2)+348>>2];o=c[b+(l*36|0)+180>>2]|0;c[b+(l*36|0)+180>>2]=o+1;RD(b,-u,-t,-s,c[b+(l*36|0)+(o<<2)+148>>2]|0);o=c[b+(l*36|0)+180>>2]|0;q=c[b+(l*36|0)+(o+ -1<<2)+148>>2]|0;s=+g[q+16>>2];u=+g[q+20>>2];t=+g[q+24>>2];p=0;do{v=s- +g[h+24+(p<<4)>>2];w=u- +g[h+24+(p<<4)+4>>2];x=t- +g[h+24+(p<<4)+8>>2];p=p+1|0;if(v*v+w*w+x*x<9999999747378752.0e-20){k=9;break a}}while(p>>>0<4);z=h+24+(e<<4)|0;c[z+0>>2]=c[q+16>>2];c[z+4>>2]=c[q+20>>2];c[z+8>>2]=c[q+24>>2];c[z+12>>2]=c[q+28>>2];x=(+g[b+128>>2]*s+ +g[b+132>>2]*u+ +g[b+136>>2]*t)/n;m=x>m?x:m;if(n-m-n*9999999747378752.0e-20<=0.0){k=11;break}c[h>>2]=0;if((o|0)==4){q=c[b+(l*36|0)+148>>2]|0;r=c[b+(l*36|0)+152>>2]|0;p=c[b+(l*36|0)+156>>2]|0;o=c[b+(l*36|0)+160>>2]|0;c[h+152>>2]=q+16;c[h+156>>2]=r+16;c[h+160>>2]=p+16;c[h+164>>2]=o+16;u=+g[q+16>>2];v=+g[o+16>>2];s=+g[q+20>>2];w=+g[o+20>>2];t=+g[q+24>>2];x=+g[o+24>>2];g[h+104>>2]=u-v;g[h+108>>2]=s-w;g[h+112>>2]=t-x;g[h+116>>2]=0.0;C=+g[r+16>>2];E=+g[r+20>>2];A=+g[r+24>>2];g[h+120>>2]=C-v;g[h+124>>2]=E-w;g[h+128>>2]=A-x;g[h+132>>2]=0.0;B=+g[p+16>>2];F=+g[p+20>>2];D=+g[p+24>>2];g[h+136>>2]=B-v;g[h+140>>2]=F-w;g[h+144>>2]=D-x;g[h+148>>2]=0.0;n=(s-w)*(A-x)*(B-v)+(t-x)*(C-v)*(F-w)-(F-w)*(A-x)*(u-v)-(s-w)*(C-v)*(D-x)+(D-x)*(u-v)*(E-w)-(B-v)*(t-x)*(E-w);if(!(!(n*(t*((C-B)*(s-E)-(E-F)*(u-C))+(u*((E-F)*(t-A)-(A-D)*(s-E))+s*((A-D)*(u-C)-(C-B)*(t-A))))<=0.0)|(n!=n|0.0!=0.0|n==0.0))){c[h+92>>2]=0;c[h+96>>2]=0;c[h+100>>2]=0;c[h+88>>2]=0;s=s-w;t=t-x;u=u-v;y=0;A=-1.0;while(1){z=c[19552+(y<<2)>>2]|0;D=+g[h+104+(z<<4)+8>>2];E=+g[h+104+(z<<4)+4>>2];F=+g[h+104+(z<<4)>>2];if(n*((s*D-t*E)*v+w*(t*F-D*u)+(E*u-s*F)*x)>0.0?(j=+VD(c[h+152+(y<<2)>>2]|0,c[h+152+(z<<2)>>2]|0,o+16|0,h+92|0,h+88|0),A<0.0|j<A):0){G=c[h+88>>2]|0;c[h>>2]=((G&2|0)==0?0:1<<z)+(G<<1&8)+((G&1|0)==0?0:1<<y);g[h+8+(y<<2)>>2]=+g[h+92>>2];g[h+8+(z<<2)>>2]=+g[h+96>>2];g[h+8+(c[19552+(z<<2)>>2]<<2)>>2]=0.0;g[h+20>>2]=+g[h+100>>2];A=j}y=y+1|0;if((y|0)==3)break;s=+g[h+104+(y<<4)+4>>2];t=+g[h+104+(y<<4)+8>>2];u=+g[h+104+(y<<4)>>2];v=+g[o+16>>2];w=+g[o+20>>2];x=+g[o+24>>2]}if(A<0.0){c[h>>2]=15;A=+g[p+20>>2];s=+g[r+24>>2];E=+g[o+16>>2];w=+g[p+24>>2];t=+g[r+16>>2];v=+g[o+20>>2];B=+g[p+16>>2];C=+g[o+24>>2];u=+g[r+20>>2];g[h+8>>2]=(A*s*E+w*t*v-v*s*B-A*t*C+C*B*u-E*w*u)/n;x=+g[q+20>>2];F=+g[q+24>>2];D=+g[q+16>>2];g[h+12>>2]=(x*w*E+F*B*v-v*w*D-x*B*C+C*D*A-E*F*A)/n;g[h+16>>2]=(u*F*E+s*D*v-v*F*t-u*D*C+C*t*x-E*s*x)/n;g[h+20>>2]=1.0-((u*F*E+s*D*v-v*F*t-u*D*C+C*t*x-E*s*x)/n+((A*s*E+w*t*v-v*s*B-A*t*C+C*B*u-E*w*u)/n+(x*w*E+F*B*v-v*w*D-x*B*C+C*D*A-E*F*A)/n));A=0.0}}else A=-1.0}else if((o|0)==3)A=+VD((c[b+(l*36|0)+148>>2]|0)+16|0,(c[b+(l*36|0)+152>>2]|0)+16|0,(c[b+(l*36|0)+156>>2]|0)+16|0,h+8|0,h);else if((o|0)==2)A=+UD((c[b+(l*36|0)+148>>2]|0)+16|0,(c[b+(l*36|0)+152>>2]|0)+16|0,h+8|0,h);if(!(A>=0.0)){k=32;break}c[b+((1-l|0)*36|0)+180>>2]=0;c[b+128>>2]=0;c[b+132>>2]=0;c[b+136>>2]=0;c[b+140>>2]=0;c[b+368>>2]=1-l;y=c[b+(l*36|0)+180>>2]|0;o=c[h>>2]|0;if(y){r=0;do{q=b+(l*36|0)+(r<<2)+148|0;p=c[q>>2]|0;if(!(o&1<<r)){G=c[b+364>>2]|0;c[b+364>>2]=G+1;c[b+(G<<2)+348>>2]=p}else{c[b+((1-l|0)*36|0)+(c[b+((1-l|0)*36|0)+180>>2]<<2)+148>>2]=p;D=+g[h+8+(r<<2)>>2];G=c[b+((1-l|0)*36|0)+180>>2]|0;c[b+((1-l|0)*36|0)+180>>2]=G+1;g[b+((1-l|0)*36|0)+(G<<2)+164>>2]=D;G=c[q>>2]|0;E=D*+g[G+20>>2];F=D*+g[G+24>>2];g[b+128>>2]=+g[G+16>>2]*D+ +g[b+128>>2];g[b+132>>2]=E+ +g[b+132>>2];g[b+136>>2]=F+ +g[b+136>>2]}r=r+1|0}while((r|0)!=(y|0))}if((o|0)==15)c[b+376>>2]=1;if(f>>>0>=128){k=34;break}if(c[b+376>>2]|0)break;e=e+1&3;f=f+1|0}if((k|0)==5)c[b+376>>2]=1;else if((k|0)==9){G=c[b+368>>2]|0;z=(c[b+(G*36|0)+180>>2]|0)+ -1|0;c[b+(G*36|0)+180>>2]=z;z=c[b+(G*36|0)+(z<<2)+148>>2]|0;G=c[b+364>>2]|0;c[b+364>>2]=G+1;c[b+(G<<2)+348>>2]=z}else if((k|0)==11){G=c[b+368>>2]|0;z=(c[b+(G*36|0)+180>>2]|0)+ -1|0;c[b+(G*36|0)+180>>2]=z;z=c[b+(G*36|0)+(z<<2)+148>>2]|0;G=c[b+364>>2]|0;c[b+364>>2]=G+1;c[b+(G<<2)+348>>2]=z}else if((k|0)==32){G=c[b+368>>2]|0;z=(c[b+(G*36|0)+180>>2]|0)+ -1|0;c[b+(G*36|0)+180>>2]=z;z=c[b+(G*36|0)+(z<<2)+148>>2]|0;G=c[b+364>>2]|0;c[b+364>>2]=G+1;c[b+(G<<2)+348>>2]=z}else if((k|0)==34)c[b+376>>2]=2;c[b+372>>2]=b+((c[b+368>>2]|0)*36|0)+148;k=c[b+376>>2]|0;if((k|0)==1){g[b+144>>2]=0.0;i=h;return k|0}else if(!k){D=+g[b+128>>2];E=+g[b+132>>2];F=+g[b+136>>2];g[b+144>>2]=+Q(+(D*D+E*E+F*F));i=h;return k|0}else{i=h;return k|0}return 0}function PD(a){a=a|0;var b=0,d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0;b=i;i=i+32|0;d=c[a+372>>2]|0;m=c[d+32>>2]|0;a:do if((m|0)==2){n=c[d+4>>2]|0;d=c[d>>2]|0;h=+g[n+16>>2]- +g[d+16>>2];e=+g[n+20>>2]- +g[d+20>>2];f=+g[n+24>>2]- +g[d+24>>2];d=0;while(1){n=b+(d<<2)|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;g[n>>2]=1.0;j=+g[b+8>>2];k=+g[b+4>>2];l=+g[b>>2];if((e*j-f*k)*(e*j-f*k)+(f*l-h*j)*(f*l-h*j)+(h*k-e*l)*(h*k-e*l)>0.0){m=c[a+372>>2]|0;g[m+(c[m+32>>2]<<2)+16>>2]=0.0;n=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=n;c[m+(c[m+32>>2]<<2)>>2]=c[a+(n<<2)+348>>2];n=c[m+32>>2]|0;c[m+32>>2]=n+1;RD(a,e*j-f*k,f*l-h*j,h*k-e*l,c[m+(n<<2)>>2]|0);if(PD(a)|0){d=1;a=19;break}m=c[a+372>>2]|0;n=(c[m+32>>2]|0)+ -1|0;c[m+32>>2]=n;n=c[m+(n<<2)>>2]|0;m=c[a+364>>2]|0;c[a+364>>2]=m+1;c[a+(m<<2)+348>>2]=n;m=c[a+372>>2]|0;g[m+(c[m+32>>2]<<2)+16>>2]=0.0;n=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=n;c[m+(c[m+32>>2]<<2)>>2]=c[a+(n<<2)+348>>2];n=c[m+32>>2]|0;c[m+32>>2]=n+1;RD(a,-(e*j-f*k),-(f*l-h*j),-(h*k-e*l),c[m+(n<<2)>>2]|0);if(PD(a)|0){d=1;a=19;break}n=c[a+372>>2]|0;m=(c[n+32>>2]|0)+ -1|0;c[n+32>>2]=m;m=c[n+(m<<2)>>2]|0;n=c[a+364>>2]|0;c[a+364>>2]=n+1;c[a+(n<<2)+348>>2]=m}d=d+1|0;if(d>>>0>=3)break a}if((a|0)==19){i=b;return d|0}}else if((m|0)==1){n=1;m=0;while(1){o=b+16+(m<<2)|0;c[b+16>>2]=0;c[b+20>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;g[o>>2]=1.0;o=d+32|0;g[d+(n<<2)+16>>2]=0.0;n=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=n;c[d+(c[o>>2]<<2)>>2]=c[a+(n<<2)+348>>2];n=c[o>>2]|0;c[o>>2]=n+1;h=+g[b+16>>2];e=+g[b+20>>2];f=+g[b+24>>2];RD(a,h,e,f,c[d+(n<<2)>>2]|0);if(PD(a)|0){d=1;a=19;break}n=c[a+372>>2]|0;o=(c[n+32>>2]|0)+ -1|0;c[n+32>>2]=o;o=c[n+(o<<2)>>2]|0;n=c[a+364>>2]|0;c[a+364>>2]=n+1;c[a+(n<<2)+348>>2]=o;n=c[a+372>>2]|0;g[n+(c[n+32>>2]<<2)+16>>2]=0.0;o=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=o;c[n+(c[n+32>>2]<<2)>>2]=c[a+(o<<2)+348>>2];o=c[n+32>>2]|0;c[n+32>>2]=o+1;RD(a,-h,-e,-f,c[n+(o<<2)>>2]|0);if(PD(a)|0){d=1;a=19;break}o=c[a+372>>2]|0;n=(c[o+32>>2]|0)+ -1|0;c[o+32>>2]=n;n=c[o+(n<<2)>>2]|0;o=c[a+364>>2]|0;c[a+364>>2]=o+1;c[a+(o<<2)+348>>2]=n;m=m+1|0;if(m>>>0>=3)break a;d=c[a+372>>2]|0;n=c[d+32>>2]|0}if((a|0)==19){i=b;return d|0}}else if((m|0)==3){o=c[d+4>>2]|0;n=c[d>>2]|0;e=+g[n+16>>2];j=+g[o+16>>2]-e;f=+g[n+20>>2];l=+g[o+20>>2]-f;k=+g[n+24>>2];h=+g[o+24>>2]-k;o=c[d+8>>2]|0;e=+g[o+16>>2]-e;f=+g[o+20>>2]-f;k=+g[o+24>>2]-k;if((l*k-h*f)*(l*k-h*f)+(h*e-j*k)*(h*e-j*k)+(j*f-l*e)*(j*f-l*e)>0.0){g[d+28>>2]=0.0;o=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=o;c[d+(c[d+32>>2]<<2)>>2]=c[a+(o<<2)+348>>2];o=c[d+32>>2]|0;c[d+32>>2]=o+1;RD(a,l*k-h*f,h*e-j*k,j*f-l*e,c[d+(o<<2)>>2]|0);if(PD(a)|0){o=1;i=b;return o|0}n=c[a+372>>2]|0;o=(c[n+32>>2]|0)+ -1|0;c[n+32>>2]=o;o=c[n+(o<<2)>>2]|0;n=c[a+364>>2]|0;c[a+364>>2]=n+1;c[a+(n<<2)+348>>2]=o;n=c[a+372>>2]|0;g[n+(c[n+32>>2]<<2)+16>>2]=0.0;o=(c[a+364>>2]|0)+ -1|0;c[a+364>>2]=o;c[n+(c[n+32>>2]<<2)>>2]=c[a+(o<<2)+348>>2];o=c[n+32>>2]|0;c[n+32>>2]=o+1;RD(a,-(l*k-h*f),-(h*e-j*k),-(j*f-l*e),c[n+(o<<2)>>2]|0);if(PD(a)|0){o=1;i=b;return o|0}else{o=c[a+372>>2]|0;n=(c[o+32>>2]|0)+ -1|0;c[o+32>>2]=n;n=c[o+(n<<2)>>2]|0;o=c[a+364>>2]|0;c[a+364>>2]=o+1;c[a+(o<<2)+348>>2]=n;break}}}else if((m|0)==4?(o=c[d>>2]|0,n=c[d+12>>2]|0,l=+g[n+16>>2],r=+g[o+16>>2]-l,p=+g[n+20>>2],e=+g[o+20>>2]-p,h=+g[n+24>>2],j=+g[o+24>>2]-h,o=c[d+4>>2]|0,f=+g[o+16>>2]-l,k=+g[o+20>>2]-p,q=+g[o+24>>2]-h,o=c[d+8>>2]|0,l=+g[o+16>>2]-l,p=+g[o+20>>2]-p,h=+g[o+24>>2]-h,!(( false?undefined:r*k*h+(e*q*l+j*f*p-r*q*p-e*f*h)-j*k*l!=r*k*h+(e*q*l+j*f*p-r*q*p-e*f*h)-j*k*l)|r*k*h+(e*q*l+j*f*p-r*q*p-e*f*h)-j*k*l==0.0)):0){o=1;i=b;return o|0}while(0);o=0;i=b;return o|0}function QD(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0;k=i;j=c[b+9288>>2]|0;if(!j){c[b>>2]=5;s=0;i=k;return s|0}s=c[j+48>>2]|0;if(s)c[s+44>>2]=c[j+44>>2];s=c[j+44>>2]|0;if(s)c[s+48>>2]=c[j+48>>2];if((c[b+9288>>2]|0)==(j|0))c[b+9288>>2]=c[j+48>>2];c[b+9292>>2]=(c[b+9292>>2]|0)+ -1;c[j+44>>2]=0;c[j+48>>2]=c[b+9280>>2];s=c[b+9280>>2]|0;if(s)c[s+44>>2]=j;c[b+9280>>2]=j;c[b+9284>>2]=(c[b+9284>>2]|0)+1;a[j+55>>0]=0;c[j+20>>2]=d;c[j+24>>2]=e;c[j+28>>2]=f;p=+g[d+16>>2];n=+g[e+16>>2]-p;r=+g[d+20>>2];q=+g[e+20>>2]-r;m=+g[d+24>>2];l=+g[e+24>>2]-m;p=+g[f+16>>2]-p;r=+g[f+20>>2]-r;m=+g[f+24>>2]-m;g[j>>2]=q*m-l*r;g[j+4>>2]=l*p-n*m;g[j+8>>2]=n*r-q*p;g[j+12>>2]=0.0;o=+Q(+((q*m-l*r)*(q*m-l*r)+(l*p-n*m)*(l*p-n*m)+(n*r-q*p)*(n*r-q*p)));do if(o>9999999747378752.0e-20){if((!(TD(q*m-l*r,l*p-n*m,n*r-q*p,+g[d+16>>2],+g[d+20>>2],+g[d+24>>2],+g[e+16>>2],+g[e+20>>2],+g[e+24>>2],j+16|0)|0)?!(TD(+g[j>>2],+g[j+4>>2],+g[j+8>>2],+g[e+16>>2],+g[e+20>>2],+g[e+24>>2],+g[f+16>>2],+g[f+20>>2],+g[f+24>>2],j+16|0)|0):0)?!(TD(+g[j>>2],+g[j+4>>2],+g[j+8>>2],+g[f+16>>2],+g[f+20>>2],+g[f+24>>2],+g[d+16>>2],+g[d+20>>2],+g[d+24>>2],j+16|0)|0):0)g[j+16>>2]=(+g[d+16>>2]*+g[j>>2]+ +g[d+20>>2]*+g[j+4>>2]+ +g[d+24>>2]*+g[j+8>>2])/o;g[j>>2]=1.0/o*+g[j>>2];g[j+4>>2]=1.0/o*+g[j+4>>2];g[j+8>>2]=1.0/o*+g[j+8>>2];if(h){s=j;i=k;return s|0}if(!(+g[j+16>>2]>=-9999999747378752.0e-21)){c[b>>2]=3;break}else{s=j;i=k;return s|0}}else c[b>>2]=2;while(0);h=c[j+48>>2]|0;if(h)c[h+44>>2]=c[j+44>>2];h=c[j+44>>2]|0;if(h)c[h+48>>2]=c[j+48>>2];if((c[b+9280>>2]|0)==(j|0))c[b+9280>>2]=c[j+48>>2];c[b+9284>>2]=(c[b+9284>>2]|0)+ -1;c[j+44>>2]=0;c[j+48>>2]=c[b+9288>>2];h=c[b+9288>>2]|0;if(h)c[h+44>>2]=j;c[b+9288>>2]=j;c[b+9292>>2]=(c[b+9292>>2]|0)+1;s=0;i=k;return s|0}function RD(a,b,e,f,h){a=a|0;b=+b;e=+e;f=+f;h=h|0;var j=0,k=0,l=0,m=0,n=0.0,o=0.0;j=i;i=i+48|0;n=1.0/+Q(+(b*b+e*e+f*f));g[h>>2]=n*b;g[h+4>>2]=n*e;g[h+8>>2]=n*f;g[h+12>>2]=0.0;l=d[a+120>>0]|d[a+121>>0]<<8|d[a+122>>0]<<16|d[a+123>>0]<<24;m=d[a+124>>0]|d[a+125>>0]<<8|d[a+126>>0]<<16|d[a+127>>0]<<24;k=(c[a>>2]|0)+(m>>1)|0;if(m&1)l=c[(c[k>>2]|0)+l>>2]|0;rc[l&127](j,k,h);e=-+g[h>>2];f=-+g[h+4>>2];b=-+g[h+8>>2];l=d[a+120>>0]|d[a+121>>0]<<8|d[a+122>>0]<<16|d[a+123>>0]<<24;m=d[a+124>>0]|d[a+125>>0]<<8|d[a+126>>0]<<16|d[a+127>>0]<<24;k=(c[a+4>>2]|0)+(m>>1)|0;if(m&1)l=c[(c[k>>2]|0)+l>>2]|0;n=+g[a+24>>2]*e+ +g[a+28>>2]*f+ +g[a+32>>2]*b;o=+g[a+40>>2]*e+ +g[a+44>>2]*f+ +g[a+48>>2]*b;g[j+16>>2]=+g[a+8>>2]*e+ +g[a+12>>2]*f+ +g[a+16>>2]*b;g[j+20>>2]=n;g[j+24>>2]=o;g[j+28>>2]=0.0;rc[l&127](j+32|0,k,j+16|0);o=+g[j+32>>2];e=+g[j+36>>2];f=+g[j+40>>2];b=+g[j+4>>2]-(o*+g[a+72>>2]+e*+g[a+76>>2]+f*+g[a+80>>2]+ +g[a+108>>2]);n=+g[j+8>>2]-(o*+g[a+88>>2]+e*+g[a+92>>2]+f*+g[a+96>>2]+ +g[a+112>>2]);g[h+16>>2]=+g[j>>2]-(o*+g[a+56>>2]+e*+g[a+60>>2]+f*+g[a+64>>2]+ +g[a+104>>2]);g[h+20>>2]=b;g[h+24>>2]=n;g[h+28>>2]=0.0;i=j;return}function SD(b,e,f,h,j,k){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;var l=0,m=0;l=i;if((d[h+55>>0]|0|0)==(e|0)){j=0;i=l;return j|0}m=c[19552+(j<<2)>>2]|0;if(+g[h>>2]*+g[f+16>>2]+ +g[h+4>>2]*+g[f+20>>2]+ +g[h+8>>2]*+g[f+24>>2]- +g[h+16>>2]<-9999999747378752.0e-21){b=QD(b,c[h+(m<<2)+20>>2]|0,c[h+(j<<2)+20>>2]|0,f,0)|0;if(!b){j=0;i=l;return j|0}a[b+52>>0]=j;c[b+32>>2]=h;a[h+j+52>>0]=0;c[h+(j<<2)+32>>2]=b;h=c[k>>2]|0;if(!h)c[k+4>>2]=b;else{a[h+53>>0]=2;c[h+36>>2]=b;a[b+54>>0]=1;c[b+40>>2]=h}c[k>>2]=b;c[k+8>>2]=(c[k+8>>2]|0)+1;j=1;i=l;return j|0}j=c[19536+(j<<2)>>2]|0;a[h+55>>0]=e;if(!(SD(b,e,f,c[h+(m<<2)+32>>2]|0,d[h+m+52>>0]|0,k)|0)){j=0;i=l;return j|0}if(!(SD(b,e,f,c[h+(j<<2)+32>>2]|0,d[h+j+52>>0]|0,k)|0)){j=0;i=l;return j|0}k=c[h+48>>2]|0;if(k)c[k+44>>2]=c[h+44>>2];k=c[h+44>>2]|0;if(k)c[k+48>>2]=c[h+48>>2];if((c[b+9280>>2]|0)==(h|0))c[b+9280>>2]=c[h+48>>2];c[b+9284>>2]=(c[b+9284>>2]|0)+ -1;c[h+44>>2]=0;c[h+48>>2]=c[b+9288>>2];k=c[b+9288>>2]|0;if(k)c[k+44>>2]=h;c[b+9288>>2]=h;c[b+9292>>2]=(c[b+9292>>2]|0)+1;j=1;i=l;return j|0}function TD(a,b,c,d,e,f,h,j,k,l){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;h=+h;j=+j;k=+k;l=l|0;var m=0;m=i;if(!(((h-d)*b-(j-e)*a)*f+(((j-e)*c-(k-f)*b)*d+((k-f)*a-(h-d)*c)*e)<0.0)){l=0;i=m;return l|0}if((h-d)*d+(j-e)*e+(k-f)*f>0.0){g[l>>2]=+Q(+(d*d+e*e+f*f));l=1;i=m;return l|0}if((h-d)*h+(j-e)*j+(k-f)*k<0.0){g[l>>2]=+Q(+(h*h+j*j+k*k));l=1;i=m;return l|0}else{b=((h*h+j*j+k*k)*(d*d+e*e+f*f)-(h*d+j*e+k*f)*(h*d+j*e+k*f))/((h-d)*(h-d)+(j-e)*(j-e)+(k-f)*(k-f));g[l>>2]=+Q(+(b>0.0?b:0.0));l=1;i=m;return l|0}return 0}function UD(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0;k=i;l=+g[a>>2];f=+g[b>>2]-l;m=+g[a+4>>2];h=+g[b+4>>2]-m;n=+g[a+8>>2];j=+g[b+8>>2]-n;if(!(f*f+h*h+j*j>0.0)){n=-1.0;i=k;return+n}l=-(l*f+m*h+n*j)/(f*f+h*h+j*j);if(l>=1.0){g[d>>2]=0.0;g[d+4>>2]=1.0;c[e>>2]=2;l=+g[b>>2];m=+g[b+4>>2];n=+g[b+8>>2];n=l*l+m*m+n*n;i=k;return+n}if(!(l<=0.0)){g[d+4>>2]=l;g[d>>2]=1.0-l;c[e>>2]=3;f=f*l+ +g[a>>2];m=h*l+ +g[a+4>>2];n=j*l+ +g[a+8>>2];n=f*f+m*m+n*n;i=k;return+n}else{g[d>>2]=1.0;g[d+4>>2]=0.0;c[e>>2]=1;l=+g[a>>2];m=+g[a+4>>2];n=+g[a+8>>2];n=l*l+m*m+n*n;i=k;return+n}return 0.0}function VD(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0.0;u=i;i=i+80|0;c[u+64>>2]=a;c[u+68>>2]=b;c[u+72>>2]=d;r=+g[a>>2];l=+g[b>>2];s=+g[a+4>>2];n=+g[b+4>>2];t=+g[a+8>>2];p=+g[b+8>>2];g[u+16>>2]=r-l;g[u+20>>2]=s-n;g[u+24>>2]=t-p;g[u+28>>2]=0.0;m=+g[d>>2];o=+g[d+4>>2];q=+g[d+8>>2];g[u+32>>2]=l-m;g[u+36>>2]=n-o;g[u+40>>2]=p-q;g[u+44>>2]=0.0;g[u+48>>2]=m-r;g[u+52>>2]=o-s;g[u+56>>2]=q-t;g[u+60>>2]=0.0;j=(s-n)*(p-q)-(t-p)*(n-o);k=(t-p)*(l-m)-(p-q)*(r-l);h=(n-o)*(r-l)-(s-n)*(l-m);if(!(h*h+(j*j+k*k)>0.0)){F=-1.0;i=u;return+F}c[u>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;B=s-n;D=t-p;C=r-l;x=r;y=s;A=t;z=a;E=0;F=-1.0;while(1){if(x*(h*B-k*D)+y*(j*D-h*C)+(k*C-j*B)*A>0.0?(v=c[19552+(E<<2)>>2]|0,w=+UD(z,c[u+64+(v<<2)>>2]|0,u,u+8|0),F<0.0|w<F):0){z=c[u+8>>2]|0;c[f>>2]=((z&1|0)==0?0:1<<E)+((z&2|0)==0?0:1<<v);g[e+(E<<2)>>2]=+g[u>>2];g[e+(v<<2)>>2]=+g[u+4>>2];g[e+(c[19552+(v<<2)>>2]<<2)>>2]=0.0;F=w}E=E+1|0;if((E|0)==3)break;z=c[u+64+(E<<2)>>2]|0;B=+g[u+16+(E<<4)+4>>2];D=+g[u+16+(E<<4)+8>>2];C=+g[u+16+(E<<4)>>2];x=+g[z>>2];y=+g[z+4>>2];A=+g[z+8>>2]}if(!(F<0.0)){i=u;return+F}C=+Q(+(h*h+(j*j+k*k)));F=(j*+g[a>>2]+k*+g[a+4>>2]+h*+g[a+8>>2])/(h*h+(j*j+k*k));c[f>>2]=7;A=+g[b>>2]-j*F;y=+g[b+4>>2]-k*F;D=+g[b+8>>2]-h*F;D=+Q(+((y*(l-m)-A*(n-o))*(y*(l-m)-A*(n-o))+(((n-o)*D-y*(p-q))*((n-o)*D-y*(p-q))+(A*(p-q)-D*(l-m))*(A*(p-q)-D*(l-m)))))/C;g[e>>2]=D;A=+g[d>>2]-j*F;y=+g[d+4>>2]-k*F;B=+g[d+8>>2]-h*F;C=+Q(+((y*(m-r)-A*(o-s))*(y*(m-r)-A*(o-s))+(((o-s)*B-y*(q-t))*((o-s)*B-y*(q-t))+(A*(q-t)-B*(m-r))*(A*(q-t)-B*(m-r)))))/C;g[e+4>>2]=C;g[e+8>>2]=1.0-(C+D);F=h*F*h*F+(j*F*j*F+k*F*k*F);i=u;return+F}function WD(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=c[b+12>>2]|0;d=c[b+32>>2]|0;if((d|0)>=(f|0)){i=e;return}if((d|0)<=(f|0)){if((c[b+36>>2]|0)<(f|0)){if(!f){g=0;j=d}else{c[5004]=(c[5004]|0)+1;g=fF((f<<2|3)+16|0)|0;if(!g)g=0;else{c[(g+19&-16)+ -4>>2]=g;g=g+19&-16}j=c[b+32>>2]|0}if((j|0)>0){h=0;do{k=g+(h<<2)|0;if(k)c[k>>2]=c[(c[b+40>>2]|0)+(h<<2)>>2];h=h+1|0}while((h|0)!=(j|0))}h=c[b+40>>2]|0;if(h){if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=g;c[b+36>>2]=f}else g=c[b+40>>2]|0;h=d;do{j=g+(h<<2)|0;if(j)c[j>>2]=0;h=h+1|0}while((h|0)!=(f|0))}c[b+32>>2]=f;g=c[b+52>>2]|0;if((g|0)<(f|0)){if((c[b+56>>2]|0)<(f|0)){if(!f){h=0;j=g}else{c[5004]=(c[5004]|0)+1;h=fF((f<<2|3)+16|0)|0;if(!h)h=0;else{c[(h+19&-16)+ -4>>2]=h;h=h+19&-16}j=c[b+52>>2]|0}if((j|0)>0){k=0;do{l=h+(k<<2)|0;if(l)c[l>>2]=c[(c[b+60>>2]|0)+(k<<2)>>2];k=k+1|0}while((k|0)!=(j|0))}j=c[b+60>>2]|0;if(j){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[j+ -4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=h;c[b+56>>2]=f}else h=c[b+60>>2]|0;do{j=h+(g<<2)|0;if(j)c[j>>2]=0;g=g+1|0}while((g|0)!=(f|0))}c[b+52>>2]=f;if((f|0)>0){jF(c[b+40>>2]|0,-1,f<<2|0)|0;jF(c[b+60>>2]|0,-1,f<<2|0)|0}if((d|0)<=0){i=e;return}h=c[b+16>>2]|0;g=c[b+40>>2]|0;f=c[b+60>>2]|0;j=0;do{l=c[h+(j*12|0)+4>>2]<<16|c[h+(j*12|0)>>2];l=(l+~(l<<15)>>10^l+~(l<<15))*9|0;l=g+((((l>>6^l)+~((l>>6^l)<<11)>>16^(l>>6^l)+~((l>>6^l)<<11))&(c[b+12>>2]|0)+ -1)<<2)|0;c[f+(j<<2)>>2]=c[l>>2];c[l>>2]=j;j=j+1|0}while((j|0)!=(d|0));i=e;return}function XD(a){a=a|0;var b=0;b=i;YD(a);gF(a);i=b;return}function YD(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=19600;e=c[b+60>>2]|0;if(e){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;e=c[b+40>>2]|0;if(e){if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;e=c[b+16>>2]|0;if(!e){a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0;a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;e=b+12|0;c[e>>2]=0;i=d;return}function ZD(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b+16>>2]|0;if(e){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;e=c[b+40>>2]|0;if(e){if(a[b+44>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+40>>2]=0}a[b+44>>0]=1;c[b+40>>2]=0;c[b+32>>2]=0;c[b+36>>2]=0;e=c[b+60>>2]|0;if(e){if(a[b+64>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+60>>2]=0}a[b+64>>0]=1;c[b+60>>2]=0;c[b+52>>2]=0;c[b+56>>2]=0;if((c[b+12>>2]|0)>=2){WD(b);i=d;return}c[5004]=(c[5004]|0)+1;e=fF(43)|0;if(!e)e=0;else{c[(e+19&-16)+ -4>>2]=e;e=e+19&-16}f=c[b+8>>2]|0;if((f|0)>0){h=0;do{g=e+(h*12|0)|0;if(g){j=(c[b+16>>2]|0)+(h*12|0)|0;c[g+0>>2]=c[j+0>>2];c[g+4>>2]=c[j+4>>2];c[g+8>>2]=c[j+8>>2]}h=h+1|0}while((h|0)!=(f|0))}f=c[b+16>>2]|0;if(f){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=e;c[b+12>>2]=2;WD(b);i=d;return}function _D(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;c[4892]=(c[4892]|0)+1;k=((d<<16|b)+~((d<<16|b)<<15)>>10^(d<<16|b)+~((d<<16|b)<<15))*9|0;g=c[a+40>>2]|0;k=g+(((c[a+12>>2]|0)+ -1&((k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11)))<<2)|0;l=c[k>>2]|0;if((l|0)==-1){o=0;i=e;return o|0}h=c[a+16>>2]|0;j=l;while(1){if((c[h+(j*12|0)>>2]|0)==(b|0)?(c[h+(j*12|0)+4>>2]|0)==(d|0):0)break;j=c[(c[a+60>>2]|0)+(j<<2)>>2]|0;if((j|0)==-1){a=0;f=22;break}}if((f|0)==22){i=e;return a|0}if(!(h+(j*12|0)|0)){o=0;i=e;return o|0}b=c[h+(j*12|0)+8>>2]|0;j=(j*12|0)/12|0;d=c[a+60>>2]|0;if((l|0)!=(j|0)){while(1){m=d+(l<<2)|0;n=c[m>>2]|0;if((n|0)==(j|0))break;else l=n}n=c[d+(j<<2)>>2]|0;if((l|0)==-1)f=12;else c[m>>2]=n}else{n=c[d+(l<<2)>>2]|0;f=12}if((f|0)==12)c[k>>2]=n;l=(c[a+8>>2]|0)+ -1|0;if((l|0)==(j|0)){c[a+8>>2]=j;o=b;i=e;return o|0}k=c[h+(l*12|0)+4>>2]<<16|c[h+(l*12|0)>>2];k=(k+~(k<<15)>>10^k+~(k<<15))*9|0;k=((k>>6^k)+~((k>>6^k)<<11)>>16^(k>>6^k)+~((k>>6^k)<<11))&(c[a+12>>2]|0)+ -1;n=c[g+(k<<2)>>2]|0;if((n|0)!=(l|0)){while(1){m=d+(n<<2)|0;o=c[m>>2]|0;if((o|0)==(l|0))break;else n=o}d=c[d+(l<<2)>>2]|0;if((n|0)==-1)f=20;else c[m>>2]=d}else{d=c[d+(l<<2)>>2]|0;f=20}if((f|0)==20)c[g+(k<<2)>>2]=d;c[h+(j*12|0)+0>>2]=c[h+(l*12|0)+0>>2];c[h+(j*12|0)+4>>2]=c[h+(l*12|0)+4>>2];c[h+(j*12|0)+8>>2]=c[h+(l*12|0)+8>>2];o=(c[a+40>>2]|0)+(k<<2)|0;c[(c[a+60>>2]|0)+(j<<2)>>2]=c[o>>2];c[o>>2]=j;c[a+8>>2]=(c[a+8>>2]|0)+ -1;o=b;i=e;return o|0}function $D(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=i;c[4894]=(c[4894]|0)+1;h=((e<<16|d)+~((e<<16|d)<<15)>>10^(e<<16|d)+~((e<<16|d)<<15))*9|0;h=(h>>6^h)+~((h>>6^h)<<11)>>16^(h>>6^h)+~((h>>6^h)<<11);g=c[b+12>>2]|0;k=c[(c[b+40>>2]|0)+((g+ -1&h)<<2)>>2]|0;a:do if((k|0)!=-1){j=c[b+16>>2]|0;while(1){if((c[j+(k*12|0)>>2]|0)==(d|0)?(c[j+(k*12|0)+4>>2]|0)==(e|0):0)break;k=c[(c[b+60>>2]|0)+(k<<2)>>2]|0;if((k|0)==-1)break a}j=j+(k*12|0)|0;if(j){o=j;i=f;return o|0}}while(0);j=c[b+8>>2]|0;if((j|0)==(g|0)){k=(g|0)==0?1:g<<1;if((g|0)<(k|0)){if(!k){l=0;o=g}else{c[5004]=(c[5004]|0)+1;l=fF((k*12|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}o=c[b+8>>2]|0}if((o|0)>0){n=0;do{m=l+(n*12|0)|0;if(m){p=(c[b+16>>2]|0)+(n*12|0)|0;c[m+0>>2]=c[p+0>>2];c[m+4>>2]=c[p+4>>2];c[m+8>>2]=c[p+8>>2]}n=n+1|0}while((n|0)!=(o|0))}m=c[b+16>>2]|0;if(m){if(a[b+20>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+16>>2]=0}a[b+20>>0]=1;c[b+16>>2]=l;c[b+12>>2]=k;l=c[b+8>>2]|0}else{l=g;k=g}}else{l=j;k=g}c[b+8>>2]=l+1;l=c[b+16>>2]|0;if((g|0)<(k|0)){WD(b);g=(c[b+12>>2]|0)+ -1&h}else g=g+ -1&h;if(!(l+(j*12|0)|0))d=0;else{c[l+(j*12|0)>>2]=d;c[l+(j*12|0)+4>>2]=e;c[l+(j*12|0)+8>>2]=0;d=l+(j*12|0)|0}c[d+8>>2]=0;p=(c[b+40>>2]|0)+(g<<2)|0;c[(c[b+60>>2]|0)+(j<<2)>>2]=c[p>>2];c[p>>2]=j;p=d;i=f;return p|0}function aE(a){a=a|0;return c[a+16>>2]|0}function bE(a,b,c,d,e,f,h,j,k,l,m){a=a|0;b=b|0;c=+c;d=+d;e=+e;f=+f;h=+h;j=+j;k=k|0;l=l|0;m=+m;var n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;p=i;o=+g[a>>2]*f+ +g[a+16>>2]*h+ +g[a+32>>2]*j;n=+g[a+4>>2]*f+ +g[a+20>>2]*h+ +g[a+36>>2]*j;r=+g[a+8>>2]*f+ +g[a+24>>2]*h+ +g[a+40>>2]*j;q=+g[b>>2]*f+ +g[b+16>>2]*h+ +g[b+32>>2]*j;s=+g[b+4>>2]*f+ +g[b+20>>2]*h+ +g[b+36>>2]*j;t=+g[b+8>>2]*f+ +g[b+24>>2]*h+ +g[b+40>>2]*j;u=+g[k+80>>2];if(o<0.0)u=-u;v=+g[k+84>>2];if(n<0.0)v=-v;w=+g[k+88>>2];if(r<0.0)w=-w;x=+g[l+80>>2];if(q<0.0)x=-x;y=+g[l+84>>2];if(s<0.0)y=-y;z=+g[l+88>>2];if(!(t<0.0)){A=z;z=o*u;v=n*v;v=z+v;z=r*w;z=v+z;x=q*x;y=s*y;y=x+y;x=t*A;x=y+x;a=k+96|0;y=+g[a>>2];a=z>y;y=a?z:y;a=l+96|0;z=+g[a>>2];a=x>z;z=a?x:z;z=y+z;y=c*f+d*h+e*j+z;z=z-(c*f+d*h+e*j);a=y<z;z=a?y:z;a=!(z>m);i=p;return a|0}B=-z;A=o*u;z=n*v;z=A+z;A=r*w;A=z+A;x=q*x;z=s*y;z=x+z;y=t*B;y=z+y;a=k+96|0;z=+g[a>>2];a=A>z;z=a?A:z;a=l+96|0;A=+g[a>>2];a=y>A;A=a?y:A;A=z+A;z=c*f+d*h+e*j+A;A=A-(c*f+d*h+e*j);a=z<A;A=a?z:A;a=!(A>m);i=p;return a|0}function cE(b,d,e,f,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;h=+h;j=+j;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0,S=0.0,T=0.0,U=0.0,V=0.0,W=0,X=0,Y=0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0,ca=0,da=0;l=i;i=i+64|0;a[l+48>>0]=1;c[l+44>>2]=0;c[l+36>>2]=0;c[l+40>>2]=0;m=c[f+4>>2]|0;if((m|0)>0){c[5004]=(c[5004]|0)+1;n=fF((m<<4|3)+16|0)|0;if(!n)u=0;else{c[(n+19&-16)+ -4>>2]=n;u=n+19&-16}a[l+48>>0]=1;c[l+44>>2]=u;c[l+40>>2]=m}else u=0;t=c[d+28>>2]|0;if((t|0)>0){n=c[d+36>>2]|0;G=+g[e>>2];N=+g[e+4>>2];O=+g[e+8>>2];E=+g[e+16>>2];D=+g[e+20>>2];C=+g[e+24>>2];B=+g[e+32>>2];A=+g[e+36>>2];z=+g[e+40>>2];V=+g[b>>2];U=+g[b+4>>2];Z=+g[b+8>>2];m=-1;T=3.4028234663852886e+38;v=0;while(1){S=+g[n+(v*36|0)+20>>2];Q=+g[n+(v*36|0)+24>>2];P=+g[n+(v*36|0)+28>>2];s=(S*G+Q*N+P*O)*V+(S*E+Q*D+P*C)*U+(S*B+Q*A+P*z)*Z<T;m=s?v:m;v=v+1|0;if((v|0)>=(t|0))break;else T=s?(S*G+Q*N+P*O)*V+(S*E+Q*D+P*C)*U+(S*B+Q*A+P*z)*Z:T}if((m|0)>=0){v=c[n+(m*36|0)+4>>2]|0;if((v|0)>0){w=n+(m*36|0)+12|0;s=n+(m*36|0)+20|0;u=n+(m*36|0)+24|0;t=n+(m*36|0)+28|0;P=E;Q=D;S=C;T=B;U=A;V=z;y=l+32|0;x=0;while(1){F=c[w>>2]|0;Y=c[F+(x<<2)>>2]|0;M=c[d+16>>2]|0;x=x+1|0;F=c[F+(((x|0)==(v|0)?0:x)<<2)>>2]|0;$=+g[M+(Y<<4)>>2];aa=$- +g[M+(F<<4)>>2];_=+g[M+(Y<<4)+4>>2];ba=_- +g[M+(F<<4)+4>>2];Z=+g[M+(Y<<4)+8>>2];C=Z- +g[M+(F<<4)+8>>2];B=aa*G+ba*N+C*O;A=aa*P+ba*Q+C*S;C=aa*T+ba*U+C*V;ba=+g[s>>2];aa=+g[u>>2];z=+g[t>>2];E=G*ba+N*aa+O*z;D=P*ba+Q*aa+S*z;z=T*ba+U*aa+V*z;G=($*G+_*N+Z*O+ +g[e+48>>2])*-(A*z-C*D)+($*P+_*Q+Z*S+ +g[e+52>>2])*-(C*E-B*z)+($*T+_*U+Z*V+ +g[e+56>>2])*-(B*D-A*E);F=f+4|0;M=c[F>>2]|0;if((M|0)>=2){L=f+12|0;W=c[L>>2]|0;aa=+g[W+(M+ -1<<4)>>2];ba=+g[W+(M+ -1<<4)+4>>2];Z=+g[W+(M+ -1<<4)+8>>2];J=y+4|0;H=y+8|0;K=y+12|0;I=y+16|0;T=aa;U=ba;V=Z;Z=aa*-(A*z-C*D)+ba*-(C*E-B*z)+Z*-(B*D-A*E)-G;R=0;while(1){O=+g[W+(R<<4)>>2];P=+g[W+(R<<4)+4>>2];Q=+g[W+(R<<4)+8>>2];S=+g[W+(R<<4)+12>>2];N=O*-(A*z-C*D)+P*-(C*E-B*z)+Q*-(B*D-A*E)-G;do if(Z<0.0)if(N<0.0){X=c[J>>2]|0;if((X|0)==(c[H>>2]|0)?(r=(X|0)==0?1:X<<1,(X|0)<(r|0)):0){if(!r)W=0;else{c[5004]=(c[5004]|0)+1;W=fF((r<<4|3)+16|0)|0;if(!W)W=0;else{c[(W+19&-16)+ -4>>2]=W;W=W+19&-16}X=c[J>>2]|0}if((X|0)>0){Y=0;do{ca=W+(Y<<4)|0;da=(c[K>>2]|0)+(Y<<4)|0;c[ca+0>>2]=c[da+0>>2];c[ca+4>>2]=c[da+4>>2];c[ca+8>>2]=c[da+8>>2];c[ca+12>>2]=c[da+12>>2];Y=Y+1|0}while((Y|0)!=(X|0))}X=c[K>>2]|0;if(X){if(a[I>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[X+ -4>>2]|0)}c[K>>2]=0}a[I>>0]=1;c[K>>2]=W;c[H>>2]=r;X=c[J>>2]|0}da=c[K>>2]|0;g[da+(X<<4)>>2]=O;g[da+(X<<4)+4>>2]=P;g[da+(X<<4)+8>>2]=Q;g[da+(X<<4)+12>>2]=S;c[J>>2]=(c[J>>2]|0)+1;break}else{ba=Z/(Z-N);S=T+(O-T)*ba;T=U+(P-U)*ba;U=V+(Q-V)*ba;Y=c[J>>2]|0;if((Y|0)==(c[H>>2]|0)?(p=(Y|0)==0?1:Y<<1,(Y|0)<(p|0)):0){if(!p)W=0;else{c[5004]=(c[5004]|0)+1;W=fF((p<<4|3)+16|0)|0;if(!W)W=0;else{c[(W+19&-16)+ -4>>2]=W;W=W+19&-16}Y=c[J>>2]|0}if((Y|0)>0){X=0;do{da=W+(X<<4)|0;ca=(c[K>>2]|0)+(X<<4)|0;c[da+0>>2]=c[ca+0>>2];c[da+4>>2]=c[ca+4>>2];c[da+8>>2]=c[ca+8>>2];c[da+12>>2]=c[ca+12>>2];X=X+1|0}while((X|0)!=(Y|0))}X=c[K>>2]|0;if(X){if(a[I>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[X+ -4>>2]|0)}c[K>>2]=0}a[I>>0]=1;c[K>>2]=W;c[H>>2]=p;Y=c[J>>2]|0}da=c[K>>2]|0;g[da+(Y<<4)>>2]=S;g[da+(Y<<4)+4>>2]=T;g[da+(Y<<4)+8>>2]=U;g[da+(Y<<4)+12>>2]=0.0;c[J>>2]=(c[J>>2]|0)+1;break}else if(N<0.0){ba=Z/(Z-N);T=T+(O-T)*ba;U=U+(P-U)*ba;V=V+(Q-V)*ba;X=c[J>>2]|0;if((X|0)==(c[H>>2]|0)?(o=(X|0)==0?1:X<<1,(X|0)<(o|0)):0){if(!o)W=0;else{c[5004]=(c[5004]|0)+1;W=fF((o<<4|3)+16|0)|0;if(!W)W=0;else{c[(W+19&-16)+ -4>>2]=W;W=W+19&-16}X=c[J>>2]|0}if((X|0)>0){Y=0;do{da=W+(Y<<4)|0;ca=(c[K>>2]|0)+(Y<<4)|0;c[da+0>>2]=c[ca+0>>2];c[da+4>>2]=c[ca+4>>2];c[da+8>>2]=c[ca+8>>2];c[da+12>>2]=c[ca+12>>2];Y=Y+1|0}while((Y|0)!=(X|0))}X=c[K>>2]|0;if(X){if(a[I>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[X+ -4>>2]|0)}c[K>>2]=0}a[I>>0]=1;c[K>>2]=W;c[H>>2]=o;X=c[J>>2]|0}da=c[K>>2]|0;g[da+(X<<4)>>2]=T;g[da+(X<<4)+4>>2]=U;g[da+(X<<4)+8>>2]=V;g[da+(X<<4)+12>>2]=0.0;X=(c[J>>2]|0)+1|0;c[J>>2]=X;if((X|0)==(c[H>>2]|0)?(q=(X|0)==0?1:X<<1,(X|0)<(q|0)):0){if(!q)W=0;else{c[5004]=(c[5004]|0)+1;W=fF((q<<4|3)+16|0)|0;if(!W)W=0;else{c[(W+19&-16)+ -4>>2]=W;W=W+19&-16}X=c[J>>2]|0}if((X|0)>0){Y=0;do{da=W+(Y<<4)|0;ca=(c[K>>2]|0)+(Y<<4)|0;c[da+0>>2]=c[ca+0>>2];c[da+4>>2]=c[ca+4>>2];c[da+8>>2]=c[ca+8>>2];c[da+12>>2]=c[ca+12>>2];Y=Y+1|0}while((Y|0)!=(X|0))}X=c[K>>2]|0;if(X){if(a[I>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[X+ -4>>2]|0)}c[K>>2]=0}a[I>>0]=1;c[K>>2]=W;c[H>>2]=q;X=c[J>>2]|0}da=c[K>>2]|0;g[da+(X<<4)>>2]=O;g[da+(X<<4)+4>>2]=P;g[da+(X<<4)+8>>2]=Q;g[da+(X<<4)+12>>2]=S;c[J>>2]=(c[J>>2]|0)+1}while(0);R=R+1|0;if((R|0)==(M|0))break;W=c[L>>2]|0;T=O;U=P;V=Q;Z=N}M=c[F>>2]|0}if((M|0)<0){K=f+8|0;H=f+12|0;if((c[K>>2]|0)<0){I=c[H>>2]|0;J=f+16|0;if(I){if(a[J>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[I+ -4>>2]|0)}c[H>>2]=0}a[J>>0]=1;c[H>>2]=0;c[K>>2]=0}do{da=(c[H>>2]|0)+(M<<4)|0;c[da+0>>2]=c[l+16>>2];c[da+4>>2]=c[l+20>>2];c[da+8>>2]=c[l+24>>2];c[da+12>>2]=c[l+28>>2];M=M+1|0}while((M|0)!=0)}c[F>>2]=0;G=+g[e>>2];N=+g[e+4>>2];O=+g[e+8>>2];E=+g[e+16>>2];D=+g[e+20>>2];C=+g[e+24>>2];B=+g[e+32>>2];A=+g[e+36>>2];z=+g[e+40>>2];if((x|0)>=(v|0)){f=y;o=e+48|0;d=e+52|0;e=e+56|0;break}else{da=y;P=E;Q=D;S=C;T=B;U=A;V=z;y=f;f=da}}}else{u=n+(m*36|0)+24|0;t=n+(m*36|0)+28|0;o=e+48|0;d=e+52|0;e=e+56|0;s=n+(m*36|0)+20|0}$=+g[s>>2];aa=+g[u>>2];ba=+g[t>>2];G=$*G+aa*N+ba*O;C=$*E+aa*D+ba*C;z=$*B+aa*A+ba*z;A=+g[n+(m*36|0)+32>>2]-(G*+g[o>>2]+C*+g[d>>2]+z*+g[e>>2]);m=f+4|0;d=c[m>>2]|0;if((d|0)>0){n=f+12|0;e=0;do{da=c[n>>2]|0;o=da+(e<<4)|0;B=A+(G*+g[o>>2]+C*+g[da+(e<<4)+4>>2]+z*+g[da+(e<<4)+8>>2]);B=!(B<=h)?B:h;if(B<=j){c[l+0>>2]=c[o+0>>2];c[l+4>>2]=c[o+4>>2];c[l+8>>2]=c[o+8>>2];c[l+12>>2]=c[o+12>>2];qc[c[(c[k>>2]|0)+16>>2]&15](k,b,l,B);d=c[m>>2]|0}e=e+1|0}while((e|0)<(d|0))}u=c[l+44>>2]|0}}if(!u){i=l;return}if(a[l+48>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[u+ -4>>2]|0)}c[l+44>>2]=0;i=l;return}function dE(a,b,f,j){a=a|0;b=b|0;f=f|0;j=j|0;var k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0,s=0,t=0,u=0,v=0;n=i;i=i+80|0;f=Pb[c[(c[a>>2]|0)+28>>2]&127](a)|0;m=+g[a+4>>2];k=+g[a+8>>2];l=+g[a+12>>2];if((f|0)<=0){i=n;return}j=0;do{fc[c[(c[a>>2]|0)+16>>2]&3](a,n+76|0,n+52|0,n+64|0,n+56|0,n+72|0,n+68|0,n+48|0,n+60|0,j);o=c[n+64>>2]|0;do if(!o){o=c[n+60>>2]|0;if((o|0)==5){if((c[n+48>>2]|0)>0)o=0;else break;do{u=c[n+72>>2]|0;t=aa(c[n+68>>2]|0,o)|0;s=c[n+76>>2]|0;r=c[n+56>>2]|0;v=aa(d[u+t>>0]|0,r)|0;q=k*+g[s+(v+4)>>2];p=l*+g[s+(v+8)>>2];g[n>>2]=m*+g[s+v>>2];g[n+4>>2]=q;g[n+8>>2]=p;g[n+12>>2]=0.0;v=aa(d[u+(t+1)>>0]|0,r)|0;p=k*+g[s+(v+4)>>2];q=l*+g[s+(v+8)>>2];g[n+16>>2]=m*+g[s+v>>2];g[n+20>>2]=p;g[n+24>>2]=q;g[n+28>>2]=0.0;r=aa(d[u+(t+2)>>0]|0,r)|0;q=k*+g[s+(r+4)>>2];p=l*+g[s+(r+8)>>2];g[n+32>>2]=m*+g[s+r>>2];g[n+36>>2]=q;g[n+40>>2]=p;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else if((o|0)==2){if((c[n+48>>2]|0)>0)o=0;else break;do{t=c[n+72>>2]|0;v=aa(c[n+68>>2]|0,o)|0;u=c[n+76>>2]|0;s=c[n+56>>2]|0;r=aa(s,c[t+v>>2]|0)|0;p=k*+g[u+(r+4)>>2];q=l*+g[u+(r+8)>>2];g[n>>2]=m*+g[u+r>>2];g[n+4>>2]=p;g[n+8>>2]=q;g[n+12>>2]=0.0;r=aa(s,c[t+(v+4)>>2]|0)|0;q=k*+g[u+(r+4)>>2];p=l*+g[u+(r+8)>>2];g[n+16>>2]=m*+g[u+r>>2];g[n+20>>2]=q;g[n+24>>2]=p;g[n+28>>2]=0.0;v=aa(s,c[t+(v+8)>>2]|0)|0;p=k*+g[u+(v+4)>>2];q=l*+g[u+(v+8)>>2];g[n+32>>2]=m*+g[u+v>>2];g[n+36>>2]=p;g[n+40>>2]=q;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else if((o|0)==3){if((c[n+48>>2]|0)>0)o=0;else break;do{s=c[n+72>>2]|0;t=aa(c[n+68>>2]|0,o)|0;u=c[n+76>>2]|0;v=c[n+56>>2]|0;r=aa(e[s+t>>1]|0,v)|0;p=k*+g[u+(r+4)>>2];q=l*+g[u+(r+8)>>2];g[n>>2]=m*+g[u+r>>2];g[n+4>>2]=p;g[n+8>>2]=q;g[n+12>>2]=0.0;r=aa(e[s+(t+2)>>1]|0,v)|0;q=k*+g[u+(r+4)>>2];p=l*+g[u+(r+8)>>2];g[n+16>>2]=m*+g[u+r>>2];g[n+20>>2]=q;g[n+24>>2]=p;g[n+28>>2]=0.0;v=aa(e[s+(t+4)>>1]|0,v)|0;p=k*+g[u+(v+4)>>2];q=l*+g[u+(v+8)>>2];g[n+32>>2]=m*+g[u+v>>2];g[n+36>>2]=p;g[n+40>>2]=q;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else break}else if((o|0)==1){o=c[n+60>>2]|0;if((o|0)==3){if((c[n+48>>2]|0)>0)o=0;else break;do{s=c[n+72>>2]|0;t=aa(c[n+68>>2]|0,o)|0;u=c[n+76>>2]|0;v=c[n+56>>2]|0;r=aa(e[s+t>>1]|0,v)|0;p=k*+h[u+(r+8)>>3];q=l*+h[u+(r+16)>>3];g[n>>2]=m*+h[u+r>>3];g[n+4>>2]=p;g[n+8>>2]=q;g[n+12>>2]=0.0;r=aa(e[s+(t+2)>>1]|0,v)|0;q=k*+h[u+(r+8)>>3];p=l*+h[u+(r+16)>>3];g[n+16>>2]=m*+h[u+r>>3];g[n+20>>2]=q;g[n+24>>2]=p;g[n+28>>2]=0.0;v=aa(e[s+(t+4)>>1]|0,v)|0;p=k*+h[u+(v+8)>>3];q=l*+h[u+(v+16)>>3];g[n+32>>2]=m*+h[u+v>>3];g[n+36>>2]=p;g[n+40>>2]=q;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else if((o|0)==2){if((c[n+48>>2]|0)>0)o=0;else break;do{t=c[n+72>>2]|0;v=aa(c[n+68>>2]|0,o)|0;u=c[n+76>>2]|0;s=c[n+56>>2]|0;r=aa(s,c[t+v>>2]|0)|0;p=k*+h[u+(r+8)>>3];q=l*+h[u+(r+16)>>3];g[n>>2]=m*+h[u+r>>3];g[n+4>>2]=p;g[n+8>>2]=q;g[n+12>>2]=0.0;r=aa(s,c[t+(v+4)>>2]|0)|0;q=k*+h[u+(r+8)>>3];p=l*+h[u+(r+16)>>3];g[n+16>>2]=m*+h[u+r>>3];g[n+20>>2]=q;g[n+24>>2]=p;g[n+28>>2]=0.0;v=aa(s,c[t+(v+8)>>2]|0)|0;p=k*+h[u+(v+8)>>3];q=l*+h[u+(v+16)>>3];g[n+32>>2]=m*+h[u+v>>3];g[n+36>>2]=p;g[n+40>>2]=q;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else if((o|0)==5){if((c[n+48>>2]|0)>0)o=0;else break;do{s=c[n+72>>2]|0;t=aa(c[n+68>>2]|0,o)|0;u=c[n+76>>2]|0;v=c[n+56>>2]|0;r=aa(d[s+t>>0]|0,v)|0;p=k*+h[u+(r+8)>>3];q=l*+h[u+(r+16)>>3];g[n>>2]=m*+h[u+r>>3];g[n+4>>2]=p;g[n+8>>2]=q;g[n+12>>2]=0.0;r=aa(d[s+(t+1)>>0]|0,v)|0;q=k*+h[u+(r+8)>>3];p=l*+h[u+(r+16)>>3];g[n+16>>2]=m*+h[u+r>>3];g[n+20>>2]=q;g[n+24>>2]=p;g[n+28>>2]=0.0;v=aa(d[s+(t+2)>>0]|0,v)|0;p=k*+h[u+(v+8)>>3];q=l*+h[u+(v+16)>>3];g[n+32>>2]=m*+h[u+v>>3];g[n+36>>2]=p;g[n+40>>2]=q;g[n+44>>2]=0.0;vc[c[(c[b>>2]|0)+8>>2]&127](b,n,j,o);o=o+1|0}while((o|0)<(c[n+48>>2]|0))}else break}while(0);Nb[c[(c[a>>2]|0)+24>>2]&127](a,j);j=j+1|0}while((j|0)!=(f|0));i=n;return}function eE(d,e,f){d=d|0;e=e|0;f=f|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0;j=i;i=i+32|0;m=Pb[c[(c[d>>2]|0)+28>>2]&127](d)|0;c[e+20>>2]=m;c[e>>2]=0;if(!m){w=e+4|0;v=d+4|0;x=+g[v>>2];g[w>>2]=x;w=d+8|0;x=+g[w>>2];w=e+8|0;g[w>>2]=x;w=d+12|0;x=+g[w>>2];w=e+12|0;g[w>>2]=x;w=d+16|0;x=+g[w>>2];w=e+16|0;g[w>>2]=x;i=j;return 19824}m=Yb[c[(c[f>>2]|0)+16>>2]&31](f,32,m)|0;p=c[m+8>>2]|0;c[e>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,p)|0;n=Pb[c[(c[d>>2]|0)+28>>2]&127](d)|0;if((n|0)>0){o=0;while(1){fc[c[(c[d>>2]|0)+16>>2]&3](d,j+28|0,j+4|0,j+16|0,j+8|0,j+24|0,j+20|0,j,j+12|0,o);c[p+24>>2]=c[j>>2];c[p+28>>2]=c[j+4>>2];s=p+8|0;t=p+12|0;r=p+16|0;q=p+4|0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;c[p+20>>2]=0;u=c[j+12>>2]|0;if((u|0)==2){r=c[j>>2]|0;if(r){r=Yb[c[(c[f>>2]|0)+16>>2]&31](f,4,r*3|0)|0;t=c[r+8>>2]|0;c[s>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,t)|0;if((c[j>>2]|0)>0){u=c[j+24>>2]|0;s=0;do{v=aa(c[j+20>>2]|0,s)|0;w=s*3|0;c[t+(w<<2)>>2]=c[u+v>>2];c[t+(w+1<<2)>>2]=c[u+(v+4)>>2];c[t+(w+2<<2)>>2]=c[u+(v+8)>>2];s=s+1|0}while((s|0)<(c[j>>2]|0))}Jb[c[(c[f>>2]|0)+20>>2]&31](f,r,19688,1497453121,c[r+8>>2]|0)}}else if((u|0)==5){s=c[j>>2]|0;if(s){t=Yb[c[(c[f>>2]|0)+16>>2]&31](f,4,s)|0;s=c[t+8>>2]|0;c[r>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,s)|0;if((c[j>>2]|0)>0){r=0;do{v=c[j+24>>2]|0;w=aa(c[j+20>>2]|0,r)|0;a[s+(r<<2)>>0]=a[v+w>>0]|0;a[s+(r<<2)+1>>0]=a[v+(w+1)>>0]|0;a[s+(r<<2)+2>>0]=a[v+(w+2)>>0]|0;r=r+1|0}while((r|0)<(c[j>>2]|0))}Jb[c[(c[f>>2]|0)+20>>2]&31](f,t,19736,1497453121,c[t+8>>2]|0)}}else if((u|0)==3?(k=c[j>>2]|0,(k|0)!=0):0){s=Yb[c[(c[f>>2]|0)+16>>2]&31](f,8,k)|0;r=c[s+8>>2]|0;c[t>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,r)|0;t=c[j>>2]|0;if((t|0)>0){v=c[j+24>>2]|0;u=c[j+20>>2]|0;w=0;do{y=aa(u,w)|0;b[r+(w<<3)>>1]=b[v+y>>1]|0;b[r+(w<<3)+2>>1]=b[v+(y+2)>>1]|0;b[r+(w<<3)+4>>1]=b[v+(y+4)>>1]|0;w=w+1|0}while((w|0)<(t|0))}Jb[c[(c[f>>2]|0)+20>>2]&31](f,s,19704,1497453121,c[s+8>>2]|0)}r=c[j+16>>2]|0;if(!r){q=c[j+4>>2]|0;if(q){u=Yb[c[(c[f>>2]|0)+16>>2]&31](f,16,q)|0;t=c[u+8>>2]|0;c[p>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,t)|0;s=c[j+4>>2]|0;if((s|0)>0){q=c[j+28>>2]|0;r=c[j+8>>2]|0;v=0;do{y=aa(r,v)|0;g[t+(v<<4)>>2]=+g[q+y>>2];g[t+(v<<4)+4>>2]=+g[q+(y+4)>>2];g[t+(v<<4)+8>>2]=+g[q+(y+8)>>2];v=v+1|0}while((v|0)<(s|0))}Jb[c[(c[f>>2]|0)+20>>2]&31](f,u,19760,1497453121,c[u+8>>2]|0)}}else if((r|0)==1?(l=c[j+4>>2]|0,(l|0)!=0):0){r=Yb[c[(c[f>>2]|0)+16>>2]&31](f,32,l)|0;s=c[r+8>>2]|0;c[q>>2]=gc[c[(c[f>>2]|0)+28>>2]&31](f,s)|0;t=c[j+4>>2]|0;if((t|0)>0){q=c[j+28>>2]|0;u=c[j+8>>2]|0;v=0;do{y=aa(u,v)|0;h[s+(v<<5)>>3]=+h[q+y>>3];h[s+(v<<5)+8>>3]=+h[q+(y+8)>>3];h[s+(v<<5)+16>>3]=+h[q+(y+16)>>3];v=v+1|0}while((v|0)<(t|0))}Jb[c[(c[f>>2]|0)+20>>2]&31](f,r,19784,1497453121,c[r+8>>2]|0)}Nb[c[(c[d>>2]|0)+24>>2]&127](d,o);o=o+1|0;if((o|0)==(n|0)){k=f;break}else p=p+32|0}}else k=f;Jb[c[(c[k>>2]|0)+20>>2]&31](f,m,19808,1497453121,c[m+8>>2]|0);y=e+4|0;w=d+4|0;x=+g[w>>2];g[y>>2]=x;y=d+8|0;x=+g[y>>2];y=e+8|0;g[y>>2]=x;y=d+12|0;x=+g[y>>2];y=e+12|0;g[y>>2]=x;y=d+16|0;x=+g[y>>2];y=e+16|0;g[y>>2]=x;i=j;return 19824}function fE(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=19904;e=c[b+32>>2]|0;if(!e){a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0}else{if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0}c[5006]=(c[5006]|0)+1;gF(c[b+ -4>>2]|0);i=d;return}function gE(b){b=b|0;var d=0,e=0;d=i;c[b>>2]=19904;e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;i=d;return}function hE(a,b,d,e,f,g,h,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;a=c[a+32>>2]|0;c[d>>2]=c[a+(k<<5)+12>>2];c[b>>2]=c[a+(k<<5)+16>>2];c[e>>2]=c[a+(k<<5)+28>>2];c[f>>2]=c[a+(k<<5)+20>>2];c[i>>2]=c[a+(k<<5)>>2];c[g>>2]=c[a+(k<<5)+4>>2];c[h>>2]=c[a+(k<<5)+8>>2];c[j>>2]=c[a+(k<<5)+24>>2];return}function iE(a,b,d,e,f,g,h,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;a=c[a+32>>2]|0;c[d>>2]=c[a+(k<<5)+12>>2];c[b>>2]=c[a+(k<<5)+16>>2];c[e>>2]=c[a+(k<<5)+28>>2];c[f>>2]=c[a+(k<<5)+20>>2];c[i>>2]=c[a+(k<<5)>>2];c[g>>2]=c[a+(k<<5)+4>>2];c[h>>2]=c[a+(k<<5)+8>>2];c[j>>2]=c[a+(k<<5)+24>>2];return}function jE(a){a=a|0;return(c[a+48>>2]|0)==1|0}function kE(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[a+52>>2]=c[b+0>>2];c[a+56>>2]=c[b+4>>2];c[a+60>>2]=c[b+8>>2];c[a+64>>2]=c[b+12>>2];c[a+68>>2]=c[d+0>>2];c[a+72>>2]=c[d+4>>2];c[a+76>>2]=c[d+8>>2];c[a+80>>2]=c[d+12>>2];c[a+48>>2]=1;i=e;return}function lE(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;c[b+0>>2]=c[a+52>>2];c[b+4>>2]=c[a+56>>2];c[b+8>>2]=c[a+60>>2];c[b+12>>2]=c[a+64>>2];c[d+0>>2]=c[a+68>>2];c[d+4>>2]=c[a+72>>2];c[d+8>>2]=c[a+76>>2];c[d+12>>2]=c[a+80>>2];i=e;return}function mE(a,b){a=a|0;b=b|0;return}function nE(a,b){a=a|0;b=b|0;return}function oE(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[g+16>>2]|0;if((j|0)!=(f|0)){l=f-j|0;i=h;return l|0}if(!f){l=0;i=h;return l|0}l=c[g+8>>2]|0;n=c[g+12>>2]|0;k=xF(l|0,0,a|0,0)|0;j=E;p=xF(n|0,0,a|0,0)|0;m=E;l=xF(l|0,0,b|0,0)|0;a=E;n=xF(n|0,0,b|0,0)|0;o=E;b=lF(p|0,0,l|0,0)|0;l=E;o=lF(m|0,0,n|0,o|0)|0;a=lF(o|0,E|0,a|0,0)|0;l=lF(a|0,E|0,l|0,0)|0;a=E;j=lF(0,b|0,k|0,j|0)|0;k=E;b=lF(l|0,a|0,(k>>>0<b>>>0|(k|0)==(b|0)&j>>>0<0)&1|0,0)|0;a=E;l=c[g>>2]|0;o=c[g+4>>2]|0;n=xF(l|0,0,d|0,0)|0;g=E;m=xF(o|0,0,d|0,0)|0;p=E;l=xF(l|0,0,e|0,0)|0;d=E;o=xF(o|0,0,e|0,0)|0;e=E;l=lF(m|0,0,l|0,0)|0;m=E;e=lF(p|0,0,o|0,e|0)|0;e=lF(e|0,E|0,d|0,0)|0;m=lF(e|0,E|0,m|0,0)|0;e=E;g=lF(0,l|0,n|0,g|0)|0;d=E;l=lF(m|0,e|0,(d>>>0<l>>>0|(d|0)==(l|0)&g>>>0<0)&1|0,0)|0;e=E;if(!(a>>>0<e>>>0|(a|0)==(e|0)&b>>>0<l>>>0))if(!(a>>>0>e>>>0|(a|0)==(e|0)&b>>>0>l>>>0))if(k>>>0<d>>>0|(k|0)==(d|0)&j>>>0<g>>>0)a=-1;else a=(k>>>0>d>>>0|(k|0)==(d|0)&j>>>0>g>>>0)&1;else a=1;else a=-1;p=aa(a,f)|0;i=h;return p|0}function pE(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;e=c[a+8>>2]|0;if(!e){g=c[a+4>>2]|0;if(!g){c[5004]=(c[5004]|0)+1;e=fF(31)|0;if((e|0)!=0?(d=e+19&-16,c[d+ -4>>2]=e,(e+19&-16|0)!=0):0){g=c[a+12>>2]|0;c[d+4>>2]=g;c[d+8>>2]=0;c[5004]=(c[5004]|0)+1;d=fF((g*24|3)+16|0)|0;if(!d)d=0;else{c[(d+19&-16)+ -4>>2]=d;d=d+19&-16}c[(e+19&-16)>>2]=d;g=e+19&-16}else g=0;c[g+8>>2]=c[a>>2];c[a>>2]=g}else c[a+4>>2]=c[g+8>>2];f=c[g+4>>2]|0;if((f|0)>0){d=0;e=c[g>>2]|0;do{d=d+1|0;h=e;e=e+24|0;c[h>>2]=(d|0)<(f|0)?e:0}while((d|0)!=(f|0))}e=c[g>>2]|0;c[a+8>>2]=c[e>>2];if(!e){h=0;i=b;return h|0}}else c[a+8>>2]=c[e>>2];c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;h=e;i=b;return h|0}function qE(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0;f=i;i=i+144|0;do if((d-b|0)==1)g=c[(c[a+92>>2]|0)+(b<<2)>>2]|0;else if((d-b|0)==2){g=c[(c[a+92>>2]|0)+(b<<2)>>2]|0;h=c[g+88>>2]|0;d=c[g+200>>2]|0;b=c[g+92>>2]|0;k=c[g+204>>2]|0;if((h|0)==(d|0)){if((b|0)==(k|0))if((c[g+96>>2]|0)==(c[g+208>>2]|0))break;else j=b;else j=k;if((b|0)==(j|0)){J=(c[g+96>>2]|0)>(c[g+208>>2]|0);h=J?g+112|0:g;c[h>>2]=h;c[h+4>>2]=h;c[e>>2]=h;c[e+4>>2]=h;c[e+8>>2]=h;c[e+12>>2]=h;g=J?g:g+112|0}else{k=0;s=9}}else{j=k;k=(b|0)==(k|0);s=9}do if((s|0)==9){b=b-j|0;c[g>>2]=g+112;c[g+4>>2]=g+112;c[g+112>>2]=g;c[g+116>>2]=g;if((h-d|0)>=0?!((h|0)==(d|0)&(b|0)<0):0){c[e>>2]=g+112;c[e+4>>2]=g}else{c[e>>2]=g;c[e+4>>2]=g+112}if((b|0)<0|k&(h-d|0)<0){c[e+8>>2]=g;c[e+12>>2]=g+112;h=g;g=g+112|0;break}else{c[e+8>>2]=g+112;c[e+12>>2]=g;h=g;g=g+112|0;break}}while(0);b=pE(a+48|0)|0;d=pE(a+48|0)|0;c[b+8>>2]=d;c[d+8>>2]=b;c[b+20>>2]=c[a+100>>2];c[d+20>>2]=c[a+100>>2];c[b+12>>2]=g;c[d+12>>2]=h;c[b+16>>2]=0;c[d+16>>2]=0;d=c[a+116>>2]|0;c[a+116>>2]=d+1;if((d|0)>=(c[a+120>>2]|0))c[a+120>>2]=d+1;c[b>>2]=b;c[b+4>>2]=b;c[h+8>>2]=b;J=c[b+8>>2]|0;c[J>>2]=J;c[J+4>>2]=J;c[g+8>>2]=J;i=f;return}else if(!(d-b|0)){c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;i=f;return}else{r=((d-b|0)/2|0)+b|0;u=c[a+92>>2]|0;v=c[u+(r+ -1<<2)>>2]|0;y=c[v+88>>2]|0;x=c[v+92>>2]|0;v=c[v+96>>2]|0;a:do if((r|0)<(d|0)){w=r;while(1){z=c[u+(w<<2)>>2]|0;if((c[z+88>>2]|0)!=(y|0)){t=w;break a}if((c[z+92>>2]|0)!=(x|0)){t=w;break a}t=w+1|0;if((c[z+96>>2]|0)!=(v|0)){t=w;break a}if((t|0)<(d|0))w=t;else break}}else t=r;while(0);qE(a,b,r,e);c[f+96>>2]=0;c[f+100>>2]=0;c[f+104>>2]=0;c[f+108>>2]=0;qE(a,t,d,f+96|0);r=f+100|0;v=c[r>>2]|0;if(!v){i=f;return}if(!(c[e+4>>2]|0)){c[e+0>>2]=c[f+96>>2];c[e+4>>2]=c[f+100>>2];c[e+8>>2]=c[f+104>>2];c[e+12>>2]=c[f+108>>2];i=f;return}c[a+100>>2]=(c[a+100>>2]|0)+ -1;b=c[e+12>>2]|0;d=c[f+104>>2]|0;u=c[b+88>>2]|0;b:do if((u|0)==(c[d+88>>2]|0)?(c[b+92>>2]|0)==(c[d+92>>2]|0):0){t=c[d+4>>2]|0;if((t|0)==(d|0)){e=c[d+8>>2]|0;if(e){d=c[e+12>>2]|0;u=c[d+88>>2]|0}w=c[d+96>>2]|0;t=u+1|0;break}b=c[d>>2]|0;c[t>>2]=b;c[b+4>>2]=t;c:do if((d|0)==(c[f+96>>2]|0)){s=c[b+88>>2]|0;u=c[t+88>>2]|0;do if((s|0)>=(u|0)){if((s|0)==(u|0)?(c[b+92>>2]|0)<(c[t+92>>2]|0):0)break;c[f+96>>2]=t;break c}while(0);c[f+96>>2]=b}while(0);v=c[r>>2]|0;if((d|0)==(v|0)){d=c[b+88>>2]|0;s=c[t+88>>2]|0;do if((d|0)<=(s|0)){if((d|0)==(s|0)?(c[b+92>>2]|0)>(c[t+92>>2]|0):0)break;c[r>>2]=t;v=t;s=45;break b}while(0);c[r>>2]=b;v=b;s=45}else s=45}else s=45;while(0);if((s|0)==45){s=c[f+96>>2]|0;u=0;t=1;w=e+4|0;b=0;d=0;d:while(1){z=c[w>>2]|0;while(1){w=c[z+88>>2]|0;y=aa((c[v+88>>2]|0)-w|0,t)|0;e:do if((y|0)<=0){if((y|0)>=0){A=c[z+92>>2]|0;x=(u|0)!=0;f:do if(x){y=z;while(1){B=c[y>>2]|0;if((B|0)==(z|0)){z=y;break f}if((c[B+88>>2]|0)!=(w|0)){z=y;break f}J=A;A=c[B+92>>2]|0;if((A|0)>(J|0)){z=y;break}else y=B}}else{y=z;while(1){B=c[y+4>>2]|0;if((B|0)==(z|0)){z=y;break f}if((c[B+88>>2]|0)!=(w|0)){z=y;break f}J=A;A=c[B+92>>2]|0;if((A|0)>(J|0)){z=y;break}else y=B}}while(0);y=c[v+92>>2]|0;if(x){x=v;while(1){A=c[x+4>>2]|0;if((A|0)==(v|0))break e;if((c[A+88>>2]|0)!=(w|0))break e;J=y;y=c[A+92>>2]|0;if((y|0)<(J|0))break e;else x=A}}else{x=v;while(1){A=c[x>>2]|0;if((A|0)==(v|0))break e;if((c[A+88>>2]|0)!=(w|0))break e;J=y;y=c[A+92>>2]|0;if((y|0)<(J|0))break e;else x=A}}}w=c[v+92>>2]|0;C=c[z+92>>2]|0;if(!u)while(1){B=c[v>>2]|0;x=(B|0)==(v|0);A=v+88|0;while(1){G=z+88|0;D=w-C|0;if(!x?(p=c[B+88>>2]|0,n=aa(p-(c[A>>2]|0)|0,t)|0,o=c[B+92>>2]|0,j=o-w|0,(j|0)>-1):0){if(!n)break;if((n|0)<0?(aa(j,y)|0)<=(aa(n,D)|0):0)break}F=c[z>>2]|0;if((F|0)==(z|0)){x=v;break e}J=c[F+88>>2]|0;H=aa(J-(c[G>>2]|0)|0,t)|0;G=c[F+92>>2]|0;I=G-C|0;C=y;y=aa((c[A>>2]|0)-J|0,t)|0;if(!((y|0)<0&(I|0)>0)){x=v;break e}if(!H){C=G;z=F;continue}if((H|0)>=0){x=v;break e}if((aa(I,C)|0)>=(aa(H,D)|0)){x=v;break e}else{C=G;z=F}}w=o;y=aa(p-(c[G>>2]|0)|0,t)|0;v=B}else while(1){x=c[v+4>>2]|0;B=(x|0)==(v|0);A=v+88|0;while(1){G=z+88|0;D=w-C|0;if(!B?(m=c[x+88>>2]|0,q=aa(m-(c[A>>2]|0)|0,t)|0,l=c[x+92>>2]|0,k=l-w|0,(k|0)>-1):0){if(!q)break;if((q|0)<0?(aa(k,y)|0)<=(aa(q,D)|0):0)break}F=c[z+4>>2]|0;if((F|0)==(z|0)){x=v;break e}J=c[F+88>>2]|0;G=aa(J-(c[G>>2]|0)|0,t)|0;H=c[F+92>>2]|0;C=H-C|0;I=y;y=aa((c[A>>2]|0)-J|0,t)|0;if(!((y|0)<0&(C|0)>0)){x=v;break e}if(!G){C=H;z=F;continue}if((G|0)>=0){x=v;break e}if((aa(C,I)|0)>=(aa(G,D)|0)){x=v;break e}else{C=H;z=F}}w=l;y=aa(m-(c[G>>2]|0)|0,t)|0;v=x}}else{w=(u|0)!=0;x=c[v+92>>2]|0;C=z;while(1){z=v+88|0;D=C+88|0;B=c[C+92>>2]|0;G=x-B|0;A=c[(w?C:C+4|0)>>2]|0;g:do if((A|0)==(C|0)){B=D;D=G;F=y;A=C}else{F=y;while(1){J=c[A+88>>2]|0;I=aa(J-(c[D>>2]|0)|0,t)|0;H=B;B=c[A+92>>2]|0;H=B-H|0;if((H|0)>=1){B=D;D=G;A=C;break g}if(I){if((I|0)>=0){B=D;D=G;A=C;break g}if((aa(H,F)|0)>(aa(I,G)|0)){B=D;D=G;A=C;break g}}F=aa((c[z>>2]|0)-J|0,t)|0;D=A+88|0;G=x-B|0;C=c[(w?A:A+4|0)>>2]|0;if((C|0)==(A|0)){B=D;D=G;break}else{J=A;A=C;C=J}}}while(0);G=c[(w?v:v+4|0)>>2]|0;if((G|0)==(v|0)){z=A;x=v;break e}y=c[G+88>>2]|0;C=aa(y-(c[z>>2]|0)|0,t)|0;z=x;x=c[G+92>>2]|0;z=x-z|0;y=aa(y-(c[B>>2]|0)|0,t)|0;if(!((y|0)>0&(z|0)<0)){z=A;x=v;break e}if(!C){C=A;v=G;continue}if((C|0)>=0){z=A;x=v;break e}if((aa(z,F)|0)>=(aa(C,D)|0)){z=A;x=v;break}else{C=A;v=G}}}while(0);if(!u){u=1;t=-1;w=e;b=z;v=s;d=x;continue d}u=u+1|0;if((u|0)==2)break d;else v=x}}c[z+4>>2]=x;c[x>>2]=z;c[b>>2]=d;c[d+4>>2]=b;j=c[f+96>>2]|0;if((c[j+88>>2]|0)<(c[(c[e>>2]|0)+88>>2]|0))c[e>>2]=j;j=c[r>>2]|0;if((c[j+88>>2]|0)>=(c[(c[e+4>>2]|0)+88>>2]|0))c[e+4>>2]=j;c[e+12>>2]=c[f+108>>2];k=c[d+88>>2]|0;y=c[b+88>>2]|0;l=c[d+92>>2]|0;e=c[b+92>>2]|0;o=c[d+96>>2]|0;z=c[b+96>>2]|0;t=((l-e|0)<0)<<31>>31;j=0-(k-y)|0;s=iF(0,0,j|0,((j|0)<0)<<31>>31|0)|0;s=xF(o-z|0,((o-z|0)<0)<<31>>31|0,s|0,E|0)|0;r=E;q=xF(o-z|0,((o-z|0)<0)<<31>>31|0,l-e|0,t|0)|0;p=E;x=xF(k-y|0,((k-y|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;m=E;n=xF(l-e|0,t|0,l-e|0,t|0)|0;n=iF(x|0,m|0,n|0,E|0)|0;m=E;x=c[b+8>>2]|0;c[f+140>>2]=0;if(!x)A=0;else{u=iF(0,0,l-e|0,t|0)|0;w=E;A=0;v=x;do{C=c[v+12>>2]|0;F=c[C+88>>2]|0;B=c[C+92>>2]|0;C=c[C+96>>2]|0;H=xF(B-e|0,((B-e|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;J=E;I=xF(F-y|0,((F-y|0)<0)<<31>>31|0,u|0,w|0)|0;do if((H|0)==(I|0)&(J|0)==(E|0)?(I=xF(F-y|0,((F-y|0)<0)<<31>>31|0,s|0,r|0)|0,H=E,J=xF(B-e|0,((B-e|0)<0)<<31>>31|0,q|0,p|0)|0,H=lF(J|0,E|0,I|0,H|0)|0,I=E,J=xF(C-z|0,((C-z|0)<0)<<31>>31|0,n|0,m|0)|0,J=lF(H|0,I|0,J|0,E|0)|0,I=E,(I|0)>0|(I|0)==0&J>>>0>0):0){if(A){D=(c[A+4>>2]|0)==(v|0);if((c[A>>2]|0)==(v|0)){if(!D)break;H=c[A+12>>2]|0;G=c[(c[v+8>>2]|0)+12>>2]|0;J=c[G+88>>2]|0;I=c[G+92>>2]|0;G=c[G+96>>2]|0;D=(c[H+96>>2]|0)-G|0;I=(aa(C-G|0,(c[H+92>>2]|0)-I|0)|0)-(aa(D,B-I|0)|0)|0;B=(aa(D,F-J|0)|0)-(aa(C-G|0,(c[H+88>>2]|0)-J|0)|0)|0;I=xF(I|0,((I|0)<0)<<31>>31|0,l-e|0,t|0)|0;J=E;B=xF(B|0,((B|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;B=lF(I|0,J|0,B|0,E|0)|0;J=E;B=(J|0)>0|(J|0)==0&B>>>0>0?2:1}else B=D&1;if((B|0)!=1)break}c[f+140>>2]=v;A=v}while(0);v=c[v>>2]|0}while((v|0)!=(x|0))}w=c[d+8>>2]|0;c[f+136>>2]=0;if(!w)z=0;else{u=iF(0,0,l-e|0,t|0)|0;v=E;z=0;x=w;do{y=c[x+12>>2]|0;B=c[y+88>>2]|0;C=c[y+92>>2]|0;y=c[y+96>>2]|0;H=xF(C-l|0,((C-l|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;J=E;I=xF(B-k|0,((B-k|0)<0)<<31>>31|0,u|0,v|0)|0;do if((H|0)==(I|0)&(J|0)==(E|0)?(I=xF(B-k|0,((B-k|0)<0)<<31>>31|0,s|0,r|0)|0,H=E,J=xF(C-l|0,((C-l|0)<0)<<31>>31|0,q|0,p|0)|0,H=lF(J|0,E|0,I|0,H|0)|0,I=E,J=xF(y-o|0,((y-o|0)<0)<<31>>31|0,n|0,m|0)|0,J=lF(H|0,I|0,J|0,E|0)|0,I=E,(I|0)>0|(I|0)==0&J>>>0>0):0){if(z){if((c[z>>2]|0)!=(x|0))break;if((c[z+4>>2]|0)==(x|0)?(I=c[z+12>>2]|0,G=c[(c[x+8>>2]|0)+12>>2]|0,J=c[G+88>>2]|0,H=c[G+92>>2]|0,G=c[G+96>>2]|0,F=(c[I+96>>2]|0)-G|0,H=(aa(y-G|0,(c[I+92>>2]|0)-H|0)|0)-(aa(F,C-H|0)|0)|0,J=(aa(F,B-J|0)|0)-(aa(y-G|0,(c[I+88>>2]|0)-J|0)|0)|0,H=xF(H|0,((H|0)<0)<<31>>31|0,l-e|0,t|0)|0,I=E,J=xF(J|0,((J|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0,J=lF(H|0,I|0,J|0,E|0)|0,I=E,!((I|0)>0|(I|0)==0&J>>>0>0)):0)break}c[f+136>>2]=x;z=x}while(0);x=c[x>>2]|0}while((x|0)!=(w|0))}if(!((A|0)==0&(z|0)==0)){sE(a,b,d,f+140|0,f+136|0);e=c[f+140>>2]|0;if(e)b=c[e+12>>2]|0;e=c[f+136>>2]|0;if(e)d=c[e+12>>2]|0}w=(c[d+96>>2]|0)+1|0;t=c[d+88>>2]|0}u=c[d+92>>2]|0;s=u;e=b;m=d;j=0;q=0;z=1;n=0;v=0;o=0;x=0;k=0;p=0;while(1){y=e+88|0;G=(c[m+88>>2]|0)-(c[y>>2]|0)|0;J=e+92|0;l=s-(c[J>>2]|0)|0;F=e+96|0;C=(c[m+96>>2]|0)-(c[F>>2]|0)|0;c[f+120>>2]=G;c[f+124>>2]=l;c[f+128>>2]=C;c[f+132>>2]=-1;y=t-(c[y>>2]|0)|0;J=u-(c[J>>2]|0)|0;F=w-(c[F>>2]|0)|0;D=(aa(C,J)|0)-(aa(l,F)|0)|0;F=(aa(G,F)|0)-(aa(C,y)|0)|0;J=(aa(l,y)|0)-(aa(G,J)|0)|0;c[f+72>>2]=D;c[f+76>>2]=((D|0)<0)<<31>>31;c[f+80>>2]=F;c[f+84>>2]=((F|0)<0)<<31>>31;c[f+88>>2]=J;c[f+92>>2]=((J|0)<0)<<31>>31;y=xF(J|0,((J|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;I=E;H=xF(C|0,((C|0)<0)<<31>>31|0,F|0,((F|0)<0)<<31>>31|0)|0;H=iF(y|0,I|0,H|0,E|0)|0;I=E;C=xF(D|0,((D|0)<0)<<31>>31|0,C|0,((C|0)<0)<<31>>31|0)|0;y=E;J=xF(G|0,((G|0)<0)<<31>>31|0,J|0,((J|0)<0)<<31>>31|0)|0;J=iF(C|0,y|0,J|0,E|0)|0;y=E;F=xF(G|0,((G|0)<0)<<31>>31|0,F|0,((F|0)<0)<<31>>31|0)|0;G=E;l=xF(D|0,((D|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;l=iF(F|0,G|0,l|0,E|0)|0;c[f+48>>2]=H;c[f+52>>2]=I;c[f+56>>2]=J;c[f+60>>2]=y;c[f+64>>2]=l;c[f+68>>2]=E;c[f+24>>2]=0;c[f+28>>2]=0;c[f+32>>2]=0;c[f+36>>2]=0;c[f+40>>2]=0;l=rE(a,0,e,f+120|0,f+72|0,f+48|0,f+24|0)|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;y=rE(a,1,m,f+120|0,f+72|0,f+48|0,f)|0;if((y|0)==0&((l|0)!=0^1)){s=138;break}if((y|0)==0|(l|0)!=0^1)r=(l|0)!=0?-1:1;else r=oE(c[f+24>>2]|0,c[f+28>>2]|0,c[f+32>>2]|0,c[f+36>>2]|0,c[f+40>>2]|0,f)|0;do if(!z){if((r|0)>-1){if((c[f+16>>2]|0)>=0){s=150;break}if((c[f+8>>2]|0)==0&(c[f+12>>2]|0)==0){s=157;break}else{s=150;break}}if((c[f+40>>2]|0)<0?(c[f+32>>2]|0)==0&(c[f+36>>2]|0)==0:0){c[f+116>>2]=l;c[f+112>>2]=y;y=l;r=v;v=x;s=179}else s=150}else s=150;while(0);if((s|0)==150){s=pE(a+48|0)|0;z=pE(a+48|0)|0;c[s+8>>2]=z;c[z+8>>2]=s;c[s+20>>2]=c[a+100>>2];c[z+20>>2]=c[a+100>>2];c[s+12>>2]=m;c[z+12>>2]=e;c[s+16>>2]=0;c[z+16>>2]=0;z=c[a+116>>2]|0;c[a+116>>2]=z+1;if((z|0)>=(c[a+120>>2]|0))c[a+120>>2]=z+1;if(!o)n=s;else c[o+4>>2]=s;c[s>>2]=o;z=c[s+8>>2]|0;if(!x)v=z;else c[x>>2]=z;c[z+4>>2]=x;o=s;x=z;s=157}do if((s|0)==157){s=0;c[f+116>>2]=l;c[f+112>>2]=y;if(r)if((r|0)>-1)z=y;else{y=l;r=v;v=x;s=179;break}else{sE(a,e,m,f+116|0,f+112|0);z=c[f+112>>2]|0}if(z){t=(p|0)!=0;if(t?(g=c[p>>2]|0,(g|0)!=(y|0)):0){B=g;do{A=B;B=c[B>>2]|0;w=c[A+8>>2]|0;if((B|0)==(A|0))c[(c[w+12>>2]|0)+8>>2]=0;else{c[B+4>>2]=c[A+4>>2];c[c[A+4>>2]>>2]=B;c[(c[w+12>>2]|0)+8>>2]=B}u=c[w>>2]|0;if((u|0)==(w|0))c[(c[A+12>>2]|0)+8>>2]=0;else{c[u+4>>2]=c[w+4>>2];c[c[w+4>>2]>>2]=u;c[(c[A+12>>2]|0)+8>>2]=u}c[A+0>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[A+12>>2]=0;c[A+16>>2]=0;c[A>>2]=c[a+56>>2];c[a+56>>2]=A;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;c[w+16>>2]=0;c[w>>2]=c[a+56>>2];c[a+56>>2]=w;c[a+116>>2]=(c[a+116>>2]|0)+ -1}while((B|0)!=(y|0))}if(!x){p=z;q=t?q:y}else{if(t){c[p>>2]=v;c[v+4>>2]=p;p=y+4|0}else{p=c[y+4>>2]|0;c[p>>2]=v;c[v+4>>2]=p;p=y+4|0;q=v}c[x>>2]=y;c[p>>2]=x;p=c[f+112>>2]|0;v=0}w=c[m+96>>2]|0;u=c[m+92>>2]|0;t=c[m+88>>2]|0;m=c[p+12>>2]|0;x=0;p=c[p+8>>2]|0}if((r|0)<1){y=c[f+116>>2]|0;r=v;v=x;s=179}else{l=v;r=x}}while(0);if((s|0)==179){s=0;if(!y){l=r;r=v}else{t=(k|0)!=0;if(t?(h=c[k+4>>2]|0,(h|0)!=(l|0)):0){x=h;do{A=x+4|0;u=x;x=c[A>>2]|0;z=c[u>>2]|0;w=c[u+8>>2]|0;if((z|0)==(u|0))c[(c[w+12>>2]|0)+8>>2]=0;else{c[z+4>>2]=x;c[c[A>>2]>>2]=z;c[(c[w+12>>2]|0)+8>>2]=z}z=c[w>>2]|0;if((z|0)==(w|0))c[(c[u+12>>2]|0)+8>>2]=0;else{c[z+4>>2]=c[w+4>>2];c[c[w+4>>2]>>2]=z;c[(c[u+12>>2]|0)+8>>2]=z}c[u+0>>2]=0;c[u+4>>2]=0;c[u+8>>2]=0;c[u+12>>2]=0;c[u+16>>2]=0;c[u>>2]=c[a+56>>2];c[a+56>>2]=u;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;c[w+16>>2]=0;c[w>>2]=c[a+56>>2];c[a+56>>2]=w;c[a+116>>2]=(c[a+116>>2]|0)+ -1}while((x|0)!=(l|0))}if(!o)j=t?j:l;else{if(t){c[n>>2]=k;c[k+4>>2]=n;k=l}else{k=c[l>>2]|0;c[n>>2]=k;c[k+4>>2]=n;k=l;j=n}c[k>>2]=o;c[o+4>>2]=l;y=c[f+116>>2]|0;n=0}w=c[e+96>>2]|0;u=c[e+92>>2]|0;t=c[e+88>>2]|0;e=c[y+12>>2]|0;l=r;o=0;r=v;k=c[y+8>>2]|0}}if((e|0)==(b|0)&(m|0)==(d|0))break;s=c[m+92>>2]|0;z=0;v=l;x=r}if((s|0)==138){h=pE(a+48|0)|0;g=pE(a+48|0)|0;c[h+8>>2]=g;c[g+8>>2]=h;c[h+20>>2]=c[a+100>>2];c[g+20>>2]=c[a+100>>2];c[h+12>>2]=m;c[g+12>>2]=e;c[h+16>>2]=0;c[g+16>>2]=0;g=c[a+116>>2]|0;c[a+116>>2]=g+1;if((g|0)>=(c[a+120>>2]|0))c[a+120>>2]=g+1;c[h>>2]=h;c[h+4>>2]=h;c[e+8>>2]=h;J=c[h+8>>2]|0;c[J>>2]=J;c[J+4>>2]=J;c[m+8>>2]=J;i=f;return}if(k){g=k+4|0;e=c[g>>2]|0;if((e|0)!=(j|0))do{s=e+4|0;h=e;e=c[s>>2]|0;m=c[h>>2]|0;b=c[h+8>>2]|0;if((m|0)==(h|0))c[(c[b+12>>2]|0)+8>>2]=0;else{c[m+4>>2]=e;c[c[s>>2]>>2]=m;c[(c[b+12>>2]|0)+8>>2]=m}m=c[b>>2]|0;if((m|0)==(b|0))c[(c[h+12>>2]|0)+8>>2]=0;else{c[m+4>>2]=c[b+4>>2];c[c[b+4>>2]>>2]=m;c[(c[h+12>>2]|0)+8>>2]=m}c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h>>2]=c[a+56>>2];c[a+56>>2]=h;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[b>>2]=c[a+56>>2];c[a+56>>2]=b;c[a+116>>2]=(c[a+116>>2]|0)+ -1}while((e|0)!=(j|0));if(o){c[n>>2]=k;c[g>>2]=n;c[j>>2]=o;c[o+4>>2]=j}}else{c[n>>2]=o;c[o+4>>2]=n;c[b+8>>2]=o}if(!p){c[r>>2]=l;c[l+4>>2]=r;c[d+8>>2]=r;i=f;return}g=c[p>>2]|0;if((g|0)!=(q|0))do{d=g;g=c[g>>2]|0;h=c[d+8>>2]|0;if((g|0)==(d|0))c[(c[h+12>>2]|0)+8>>2]=0;else{c[g+4>>2]=c[d+4>>2];c[c[d+4>>2]>>2]=g;c[(c[h+12>>2]|0)+8>>2]=g}b=c[h>>2]|0;if((b|0)==(h|0))c[(c[d+12>>2]|0)+8>>2]=0;else{c[b+4>>2]=c[h+4>>2];c[c[h+4>>2]>>2]=b;c[(c[d+12>>2]|0)+8>>2]=b}c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d>>2]=c[a+56>>2];c[a+56>>2]=d;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h>>2]=c[a+56>>2];c[a+56>>2]=h;c[a+116>>2]=(c[a+116>>2]|0)+ -1}while((g|0)!=(q|0));if(!r){i=f;return}c[p>>2]=l;c[l+4>>2]=p;c[r>>2]=q;c[q+4>>2]=r;i=f;return}while(0);c[g+8>>2]=0;c[g>>2]=g;c[g+4>>2]=g;c[e>>2]=g;c[e+4>>2]=g;c[e+8>>2]=g;c[e+12>>2]=g;i=f;return}function rE(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;j=i;k=c[d+8>>2]|0;if(!k){y=0;i=j;return y|0}l=0;do{do if((c[k+20>>2]|0)>(c[a+100>>2]|0)){p=c[k+12>>2]|0;r=c[p+88>>2]|0;o=r-(c[d+88>>2]|0)|0;q=c[p+92>>2]|0;m=q-(c[d+92>>2]|0)|0;p=c[p+96>>2]|0;n=p-(c[d+96>>2]|0)|0;u=xF(o|0,((o|0)<0)<<31>>31|0,c[g>>2]|0,c[g+4>>2]|0)|0;w=E;s=xF(m|0,((m|0)<0)<<31>>31|0,c[g+8>>2]|0,c[g+12>>2]|0)|0;w=lF(s|0,E|0,u|0,w|0)|0;u=E;s=xF(n|0,((n|0)<0)<<31>>31|0,c[g+16>>2]|0,c[g+20>>2]|0)|0;s=lF(w|0,u|0,s|0,E|0)|0;u=E;w=xF(c[f>>2]|0,c[f+4>>2]|0,o|0,((o|0)<0)<<31>>31|0)|0;y=E;x=xF(c[f+8>>2]|0,c[f+12>>2]|0,m|0,((m|0)<0)<<31>>31|0)|0;y=lF(x|0,E|0,w|0,y|0)|0;w=E;x=xF(c[f+16>>2]|0,c[f+20>>2]|0,n|0,((n|0)<0)<<31>>31|0)|0;x=lF(y|0,w|0,x|0,E|0)|0;w=E;if((u|0)>0|(u|0)==0&s>>>0>0){v=1;t=u;u=1}else{s=iF(0,0,s|0,u|0)|0;v=(u|0)<0?-1:0;s=(u|0)<0?s:0;t=(u|0)<0?E:0;u=(u|0)<0?-1:0}if(!((w|0)>0|(w|0)==0&x>>>0>0)){if((w|0)<0){u=0-v|0;z=iF(0,0,x|0,w|0)|0;v=u;y=(x|0)==0&(w|0)==0;x=z;w=E}else{y=1;x=0;w=0}if((v|0)==0&y)break;else v=x}else v=x;if(!l){c[h>>2]=s;c[h+4>>2]=t;c[h+8>>2]=v;c[h+12>>2]=w;c[h+16>>2]=u;l=k;break}x=oE(s,t,v,w,u,h)|0;if((x|0)<0){c[h>>2]=s;c[h+4>>2]=t;c[h+8>>2]=v;c[h+12>>2]=w;c[h+16>>2]=u;l=k;break}if(!x){s=(c[l+4>>2]|0)==(k|0);if((c[l>>2]|0)==(k|0))if(s){z=c[e+8>>2]|0;w=aa(z,m)|0;u=c[e+4>>2]|0;w=w-(aa(u,n)|0)|0;y=c[e>>2]|0;z=(aa(y,n)|0)-(aa(o,z)|0)|0;y=(aa(o,u)|0)-(aa(y,m)|0)|0;o=c[l+12>>2]|0;m=c[(c[k+8>>2]|0)+12>>2]|0;u=c[m+88>>2]|0;t=(c[o+88>>2]|0)-u|0;s=c[m+92>>2]|0;v=(c[o+92>>2]|0)-s|0;m=c[m+96>>2]|0;o=(c[o+96>>2]|0)-m|0;x=(aa(p-m|0,v)|0)-(aa(q-s|0,o)|0)|0;m=(aa(r-u|0,o)|0)-(aa(p-m|0,t)|0)|0;v=(aa(q-s|0,t)|0)-(aa(r-u|0,v)|0)|0;w=xF(x|0,((x|0)<0)<<31>>31|0,w|0,((w|0)<0)<<31>>31|0)|0;x=E;z=xF(m|0,((m|0)<0)<<31>>31|0,z|0,((z|0)<0)<<31>>31|0)|0;m=E;y=xF(v|0,((v|0)<0)<<31>>31|0,y|0,((y|0)<0)<<31>>31|0)|0;y=lF(w|0,x|0,y|0,E|0)|0;m=lF(y|0,E|0,z|0,m|0)|0;z=E;m=(z|0)>0|(z|0)==0&m>>>0>0?2:1}else m=2;else m=s&1;l=(m|0)==2^b?l:k}}while(0);k=c[k>>2]|0}while((k|0)!=(c[d+8>>2]|0));i=j;return l|0}function sE(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;g=i;i=i+96|0;s=c[e>>2]|0;h=c[f>>2]|0;if(s)j=c[s+12>>2]|0;else j=b;x=c[j+88>>2]|0;w=c[j+92>>2]|0;v=c[j+96>>2]|0;if(!h)j=d;else j=c[h+12>>2]|0;B=c[j+88>>2]|0;A=c[j+92>>2]|0;z=c[j+96>>2]|0;r=c[b+88>>2]|0;j=(c[d+88>>2]|0)-r|0;C=c[b+92>>2]|0;k=(c[d+92>>2]|0)-C|0;G=c[b+96>>2]|0;p=(c[d+96>>2]|0)-G|0;d=c[((s|0)!=0?s:h)+12>>2]|0;o=(c[d+88>>2]|0)-r|0;u=(c[d+92>>2]|0)-C|0;d=(c[d+96>>2]|0)-G|0;q=(aa(u,p)|0)-(aa(d,k)|0)|0;d=(aa(d,j)|0)-(aa(o,p)|0)|0;u=(aa(o,k)|0)-(aa(u,j)|0)|0;r=xF(q|0,((q|0)<0)<<31>>31|0,r|0,((r|0)<0)<<31>>31|0)|0;o=E;C=xF(d|0,((d|0)<0)<<31>>31|0,C|0,((C|0)<0)<<31>>31|0)|0;D=E;G=xF(u|0,((u|0)<0)<<31>>31|0,G|0,((G|0)<0)<<31>>31|0)|0;G=lF(r|0,o|0,G|0,E|0)|0;D=lF(G|0,E|0,C|0,D|0)|0;C=E;G=xF(u|0,((u|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;o=E;r=xF(d|0,((d|0)<0)<<31>>31|0,p|0,((p|0)<0)<<31>>31|0)|0;r=iF(G|0,o|0,r|0,E|0)|0;o=E;G=xF(q|0,((q|0)<0)<<31>>31|0,p|0,((p|0)<0)<<31>>31|0)|0;l=E;b=xF(u|0,((u|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;b=iF(G|0,l|0,b|0,E|0)|0;l=E;G=xF(d|0,((d|0)<0)<<31>>31|0,j|0,((j|0)<0)<<31>>31|0)|0;n=E;m=xF(q|0,((q|0)<0)<<31>>31|0,k|0,((k|0)<0)<<31>>31|0)|0;m=iF(G|0,n|0,m|0,E|0)|0;n=E;G=xF(r|0,o|0,x|0,((x|0)<0)<<31>>31|0)|0;Z=E;F=xF(b|0,l|0,w|0,((w|0)<0)<<31>>31|0)|0;Z=lF(F|0,E|0,G|0,Z|0)|0;G=E;F=xF(m|0,n|0,v|0,((v|0)<0)<<31>>31|0)|0;F=lF(Z|0,G|0,F|0,E|0)|0;G=E;if((s|0)!=0?(c[s+12>>2]|0)!=0:0){y=s;while(1){y=c[(c[y+8>>2]|0)+4>>2]|0;J=y+12|0;I=c[J>>2]|0;K=c[I+88>>2]|0;Y=xF(K|0,((K|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;X=E;H=c[I+92>>2]|0;Z=xF(H|0,((H|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;X=lF(Z|0,E|0,Y|0,X|0)|0;Y=E;I=c[I+96>>2]|0;Z=xF(I|0,((I|0)<0)<<31>>31|0,u|0,((u|0)<0)<<31>>31|0)|0;Z=lF(X|0,Y|0,Z|0,E|0)|0;Y=E;if((Y|0)<(C|0)|(Y|0)==(C|0)&Z>>>0<D>>>0)break;if((c[y+20>>2]|0)==(c[a+100>>2]|0))break;Y=xF(K|0,((K|0)<0)<<31>>31|0,r|0,o|0)|0;Z=E;H=xF(H|0,((H|0)<0)<<31>>31|0,b|0,l|0)|0;Z=lF(H|0,E|0,Y|0,Z|0)|0;H=E;I=xF(I|0,((I|0)<0)<<31>>31|0,m|0,n|0)|0;I=lF(Z|0,H|0,I|0,E|0)|0;H=E;if(!((H|0)>(G|0)|(H|0)==(G|0)&I>>>0>F>>>0))break;c[e>>2]=y;Z=c[J>>2]|0;x=c[Z+88>>2]|0;w=c[Z+92>>2]|0;v=c[Z+96>>2]|0;if(!Z){F=I;G=H;break}else{G=H;F=I}}y=c[f>>2]|0}else y=h;H=xF(r|0,o|0,B|0,((B|0)<0)<<31>>31|0)|0;Z=E;I=xF(b|0,l|0,A|0,((A|0)<0)<<31>>31|0)|0;Z=lF(I|0,E|0,H|0,Z|0)|0;H=E;I=xF(m|0,n|0,z|0,((z|0)<0)<<31>>31|0)|0;I=lF(Z|0,H|0,I|0,E|0)|0;H=E;a:do if(y)if(!(c[y+12>>2]|0))C=I;else while(1){J=c[c[y+8>>2]>>2]|0;M=c[J+12>>2]|0;K=c[M+88>>2]|0;Y=xF(K|0,((K|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;X=E;L=c[M+92>>2]|0;Z=xF(L|0,((L|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;X=lF(Z|0,E|0,Y|0,X|0)|0;Y=E;M=c[M+96>>2]|0;Z=xF(M|0,((M|0)<0)<<31>>31|0,u|0,((u|0)<0)<<31>>31|0)|0;Z=lF(X|0,Y|0,Z|0,E|0)|0;Y=E;if((Y|0)<(C|0)|(Y|0)==(C|0)&Z>>>0<D>>>0){C=I;break a}if((c[J+20>>2]|0)==(c[a+100>>2]|0)){C=I;break a}K=xF(K|0,((K|0)<0)<<31>>31|0,r|0,o|0)|0;Z=E;L=xF(L|0,((L|0)<0)<<31>>31|0,b|0,l|0)|0;Z=lF(L|0,E|0,K|0,Z|0)|0;K=E;L=xF(M|0,((M|0)<0)<<31>>31|0,m|0,n|0)|0;L=lF(Z|0,K|0,L|0,E|0)|0;K=E;if(!((K|0)>(H|0)|(K|0)==(H|0)&L>>>0>I>>>0)){C=I;break a}c[f>>2]=J;Z=c[J+12>>2]|0;B=c[Z+88>>2]|0;A=c[Z+92>>2]|0;z=c[Z+96>>2]|0;if(!Z){C=L;H=K;y=J;break}else{y=J;H=K;I=L}}else{C=I;y=0}while(0);D=iF(C|0,H|0,F|0,G|0)|0;C=E;if((C|0)>0|(C|0)==0&D>>>0>0){I=iF(0,0,u|0,((u|0)<0)<<31>>31|0)|0;J=E;H=v;G=w;F=x;N=z;O=A;P=B;L=D;K=C;b:while(1){c:while(1){M=(aa(O-G|0,k)|0)+(aa(N-H|0,p)|0)+(aa(P-F|0,j)|0)|0;Q=c[e>>2]|0;do if(((Q|0)!=0?(c[Q+12>>2]|0)!=0:0)?(t=c[(c[Q>>2]|0)+8>>2]|0,(c[t+20>>2]|0)>(c[a+100>>2]|0)):0){T=c[t+12>>2]|0;R=c[T+88>>2]|0;Z=R-F|0;U=c[T+92>>2]|0;X=U-G|0;T=c[T+96>>2]|0;V=T-H|0;W=xF(Z|0,((Z|0)<0)<<31>>31|0,r|0,o|0)|0;S=E;Y=xF(X|0,((X|0)<0)<<31>>31|0,b|0,l|0)|0;S=lF(Y|0,E|0,W|0,S|0)|0;W=E;Y=xF(V|0,((V|0)<0)<<31>>31|0,m|0,n|0)|0;Y=lF(S|0,W|0,Y|0,E|0)|0;W=E;V=(aa(X,k)|0)+(aa(Z,j)|0)+(aa(V,p)|0)|0;if((Y|0)==0&(W|0)==0)if((V|0)<0)break c;else break;if((W|0)<0){if((V|0)>0){X=1;Z=1;S=V;V=((V|0)<0)<<31>>31}else{S=iF(0,0,V|0,((V|0)<0)<<31>>31|0)|0;X=(V|0)<0?-1:0;Z=(V|0)<0?-1:0;S=(V|0)<0?S:0;V=(V|0)<0?E:0}if(!((W|0)>0|(W|0)==0&Y>>>0>0)){Y=iF(0,0,Y|0,W|0)|0;X=0-Z|0;W=E}do if((M|0)<=0)if((M|0)<0){c[g+88>>2]=-1;Z=iF(0,0,M|0,((M|0)<0)<<31>>31|0)|0;c[g+72>>2]=Z;c[g+76>>2]=E;Z=-1;break}else{c[g+88>>2]=0;c[g+72>>2]=0;c[g+76>>2]=0;Z=0;break}else{c[g+88>>2]=1;c[g+72>>2]=M;c[g+76>>2]=((M|0)<0)<<31>>31;Z=1}while(0);do if(!((K|0)>0|(K|0)==0&L>>>0>0))if((K|0)<0){c[g+88>>2]=0-Z;Z=iF(0,0,L|0,K|0)|0;c[g+80>>2]=Z;c[g+84>>2]=E;break}else{c[g+80>>2]=0;c[g+84>>2]=0;break}else{c[g+80>>2]=L;c[g+84>>2]=K}while(0);if((oE(S,V,Y,W,X,g+72|0)|0)>-1)break c}}while(0);Q=c[f>>2]|0;if(!Q){s=117;break b}if(!(c[Q+12>>2]|0)){s=117;break b}Q=c[c[Q+8>>2]>>2]|0;if((c[Q+20>>2]|0)<=(c[a+100>>2]|0)){s=117;break b}U=c[Q+12>>2]|0;R=c[U+88>>2]|0;S=R-P|0;P=c[U+92>>2]|0;T=P-O|0;U=c[U+96>>2]|0;V=U-N|0;Z=xF(S|0,((S|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;X=E;Y=xF(T|0,((T|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;X=lF(Y|0,E|0,Z|0,X|0)|0;Z=E;Y=xF(V|0,((V|0)<0)<<31>>31|0,I|0,J|0)|0;if(!((X|0)==(Y|0)&(Z|0)==(E|0))){s=117;break b}N=xF(S|0,((S|0)<0)<<31>>31|0,r|0,o|0)|0;Y=E;O=xF(T|0,((T|0)<0)<<31>>31|0,b|0,l|0)|0;Y=lF(O|0,E|0,N|0,Y|0)|0;N=E;O=xF(V|0,((V|0)<0)<<31>>31|0,m|0,n|0)|0;O=lF(Y|0,N|0,O|0,E|0)|0;N=E;T=(aa(T,k)|0)+(aa(S,j)|0)+(aa(V,p)|0)|0;R=R-F|0;Y=P-G|0;S=U-H|0;R=xF(R|0,((R|0)<0)<<31>>31|0,r|0,o|0)|0;Z=E;Y=xF(Y|0,((Y|0)<0)<<31>>31|0,b|0,l|0)|0;Z=lF(Y|0,E|0,R|0,Z|0)|0;R=E;S=xF(S|0,((S|0)<0)<<31>>31|0,m|0,n|0)|0;S=lF(Z|0,R|0,S|0,E|0)|0;R=E;if(!((R|0)>0|(R|0)==0&S>>>0>0)){s=117;break b}if((O|0)==0&(N|0)==0){if((T|0)>=0){s=117;break b}}else{if((N|0)>=0){s=117;break b}if((T|0)>0){U=1;V=1;P=T;T=((T|0)<0)<<31>>31}else{P=iF(0,0,T|0,((T|0)<0)<<31>>31|0)|0;U=(T|0)<0?-1:0;V=(T|0)<0?-1:0;P=(T|0)<0?P:0;T=(T|0)<0?E:0}if(!((N|0)>0|(N|0)==0&O>>>0>0)){O=iF(0,0,O|0,N|0)|0;U=0-V|0;N=E}do if((M|0)<=0)if((M|0)<0){c[g+64>>2]=-1;M=iF(0,0,M|0,((M|0)<0)<<31>>31|0)|0;c[g+48>>2]=M;c[g+52>>2]=E;M=-1;break}else{c[g+64>>2]=0;c[g+48>>2]=0;c[g+52>>2]=0;M=0;break}else{c[g+64>>2]=1;c[g+48>>2]=M;c[g+52>>2]=((M|0)<0)<<31>>31;M=1}while(0);do if(!((K|0)>0|(K|0)==0&L>>>0>0))if((K|0)<0){c[g+64>>2]=0-M;Z=iF(0,0,L|0,K|0)|0;c[g+56>>2]=Z;c[g+60>>2]=E;break}else{c[g+56>>2]=0;c[g+60>>2]=0;break}else{c[g+56>>2]=L;c[g+60>>2]=K}while(0);if((oE(P,T,O,N,U,g+48|0)|0)<=0){s=117;break b}}c[f>>2]=Q;N=c[Q+12>>2]|0;P=c[N+88>>2]|0;O=c[N+92>>2]|0;N=c[N+96>>2]|0;K=R;L=S}H=P-R|0;F=O-U|0;L=N-T|0;H=xF(H|0,((H|0)<0)<<31>>31|0,r|0,o|0)|0;G=E;F=xF(F|0,((F|0)<0)<<31>>31|0,b|0,l|0)|0;G=lF(F|0,E|0,H|0,G|0)|0;H=E;L=xF(L|0,((L|0)<0)<<31>>31|0,m|0,n|0)|0;L=lF(G|0,H|0,L|0,E|0)|0;c[e>>2]=(Q|0)==(s|0)?0:t;H=T;G=U;F=R;K=E}if((s|0)==117){i=g;return}}if((C|0)>=0){i=g;return}s=iF(0,0,u|0,((u|0)<0)<<31>>31|0)|0;t=E;while(1){F=(aa(A-w|0,k)|0)+(aa(z-v|0,p)|0)+(aa(B-x|0,j)|0)|0;d:do if(!y){u=F;y=F;F=((F|0)<0)<<31>>31}else{u=F;G=F;F=((F|0)<0)<<31>>31;while(1){if(!(c[y+12>>2]|0)){y=G;break d}K=c[(c[y+4>>2]|0)+8>>2]|0;if((c[K+20>>2]|0)<=(c[a+100>>2]|0)){y=G;break d}J=c[K+12>>2]|0;H=c[J+88>>2]|0;Z=H-B|0;I=c[J+92>>2]|0;Y=I-A|0;J=c[J+96>>2]|0;M=J-z|0;N=xF(Z|0,((Z|0)<0)<<31>>31|0,r|0,o|0)|0;X=E;P=xF(Y|0,((Y|0)<0)<<31>>31|0,b|0,l|0)|0;X=lF(P|0,E|0,N|0,X|0)|0;N=E;P=xF(M|0,((M|0)<0)<<31>>31|0,m|0,n|0)|0;P=lF(X|0,N|0,P|0,E|0)|0;N=E;M=(aa(Y,k)|0)+(aa(Z,j)|0)+(aa(M,p)|0)|0;if((P|0)==0&(N|0)==0){if((M|0)<=0){y=G;break d}}else{if((N|0)>=0){y=G;break d}if((M|0)>0){O=1;Q=1;L=M;M=((M|0)<0)<<31>>31}else{L=iF(0,0,M|0,((M|0)<0)<<31>>31|0)|0;O=(M|0)<0?-1:0;Q=(M|0)<0?-1:0;L=(M|0)<0?L:0;M=(M|0)<0?E:0}if(!((N|0)>0|(N|0)==0&P>>>0>0)){P=iF(0,0,P|0,N|0)|0;O=0-Q|0;N=E}do if((u|0)<=0)if((u|0)<0){c[g+40>>2]=-1;Q=iF(0,0,G|0,F|0)|0;c[g+24>>2]=Q;c[g+28>>2]=E;Q=-1;break}else{c[g+40>>2]=0;c[g+24>>2]=0;c[g+28>>2]=0;Q=0;break}else{c[g+40>>2]=1;c[g+24>>2]=G;c[g+28>>2]=F;Q=1}while(0);do if(!((C|0)>0|(C|0)==0&D>>>0>0))if((C|0)<0){c[g+40>>2]=0-Q;Z=iF(0,0,D|0,C|0)|0;c[g+32>>2]=Z;c[g+36>>2]=E;break}else{c[g+32>>2]=0;c[g+36>>2]=0;break}else{c[g+32>>2]=D;c[g+36>>2]=C}while(0);if((oE(L,M,P,N,O,g+24|0)|0)>=1){y=G;break d}}F=H-x|0;Y=I-w|0;Z=J-v|0;C=xF(F|0,((F|0)<0)<<31>>31|0,r|0,o|0)|0;X=E;D=xF(Y|0,((Y|0)<0)<<31>>31|0,b|0,l|0)|0;X=lF(D|0,E|0,C|0,X|0)|0;C=E;D=xF(Z|0,((Z|0)<0)<<31>>31|0,m|0,n|0)|0;D=lF(X|0,C|0,D|0,E|0)|0;C=E;y=(y|0)==(h|0)?0:K;c[f>>2]=y;F=(aa(Y,k)|0)+(aa(Z,p)|0)+(aa(F,j)|0)|0;if(!y){z=J;A=I;B=H;u=F;y=F;F=((F|0)<0)<<31>>31;break}else{B=H;A=I;z=J;u=F;G=F;F=((F|0)<0)<<31>>31}}}while(0);G=c[e>>2]|0;if(!G){s=117;break}if(!(c[G+12>>2]|0)){s=117;break}G=c[(c[G+8>>2]|0)+4>>2]|0;if((c[G+20>>2]|0)<=(c[a+100>>2]|0)){s=117;break}K=c[G+12>>2]|0;H=c[K+88>>2]|0;I=H-x|0;x=c[K+92>>2]|0;J=x-w|0;K=c[K+96>>2]|0;L=K-v|0;Z=xF(I|0,((I|0)<0)<<31>>31|0,q|0,((q|0)<0)<<31>>31|0)|0;X=E;Y=xF(J|0,((J|0)<0)<<31>>31|0,d|0,((d|0)<0)<<31>>31|0)|0;X=lF(Y|0,E|0,Z|0,X|0)|0;Z=E;Y=xF(L|0,((L|0)<0)<<31>>31|0,s|0,t|0)|0;if(!((X|0)==(Y|0)&(Z|0)==(E|0))){s=117;break}v=xF(I|0,((I|0)<0)<<31>>31|0,r|0,o|0)|0;Y=E;w=xF(J|0,((J|0)<0)<<31>>31|0,b|0,l|0)|0;Y=lF(w|0,E|0,v|0,Y|0)|0;v=E;w=xF(L|0,((L|0)<0)<<31>>31|0,m|0,n|0)|0;w=lF(Y|0,v|0,w|0,E|0)|0;v=E;J=(aa(J,k)|0)+(aa(I,j)|0)+(aa(L,p)|0)|0;H=B-H|0;Y=A-x|0;I=z-K|0;H=xF(H|0,((H|0)<0)<<31>>31|0,r|0,o|0)|0;Z=E;Y=xF(Y|0,((Y|0)<0)<<31>>31|0,b|0,l|0)|0;Z=lF(Y|0,E|0,H|0,Z|0)|0;H=E;I=xF(I|0,((I|0)<0)<<31>>31|0,m|0,n|0)|0;I=lF(Z|0,H|0,I|0,E|0)|0;H=E;if((H|0)>=0){s=117;break}if((w|0)==0&(v|0)==0){if((J|0)<=0){s=117;break}}else{if((v|0)>=0){s=117;break}if((J|0)>0){K=1;L=1;x=J;J=((J|0)<0)<<31>>31}else{x=iF(0,0,J|0,((J|0)<0)<<31>>31|0)|0;K=(J|0)<0?-1:0;L=(J|0)<0?-1:0;x=(J|0)<0?x:0;J=(J|0)<0?E:0}if(!((v|0)>0|(v|0)==0&w>>>0>0)){w=iF(0,0,w|0,v|0)|0;K=0-L|0;v=E}do if((u|0)<=0)if((u|0)<0){c[g+16>>2]=-1;u=iF(0,0,y|0,F|0)|0;c[g>>2]=u;c[g+4>>2]=E;u=-1;break}else{c[g+16>>2]=0;c[g>>2]=0;c[g+4>>2]=0;u=0;break}else{c[g+16>>2]=1;c[g>>2]=y;c[g+4>>2]=F;u=1}while(0);do if(!((C|0)>0|(C|0)==0&D>>>0>0))if((C|0)<0){c[g+16>>2]=0-u;Z=iF(0,0,D|0,C|0)|0;c[g+8>>2]=Z;c[g+12>>2]=E;break}else{c[g+8>>2]=0;c[g+12>>2]=0;break}else{c[g+8>>2]=D;c[g+12>>2]=C}while(0);if((oE(x,J,w,v,K,g)|0)>=0){s=117;break}}c[e>>2]=G;x=c[G+12>>2]|0;v=c[x+96>>2]|0;w=c[x+92>>2]|0;x=c[x+88>>2]|0;y=c[f>>2]|0;D=I;C=H}if((s|0)==117){i=g;return}}function tE(a){a=a|0;var b=0,d=0,e=0,f=0.0,g=0,h=0,j=0;b=i;i=i+16|0;e=c[a+8>>2]|0;d=c[a+12>>2]|0;if((d|0)>-1|(d|0)==-1&e>>>0>4294967295){f=(+(e>>>0)+4294967296.0*+(d>>>0))*18446744073709552000.0+(+((c[a>>2]|0)>>>0)+4294967296.0*+((c[a+4>>2]|0)>>>0));i=b;return+f}else{j=c[a>>2]|0;h=c[a+4>>2]|0;g=iF(0,0,j|0,h|0)|0;a=E;e=lF((j|0)==0&(h|0)==0&1|0,0,~e|0,~d|0)|0;c[b>>2]=g;c[b+4>>2]=a;c[b+8>>2]=e;c[b+12>>2]=E;f=-+tE(b);i=b;return+f}return 0.0}function uE(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0;f=i;i=i+256|0;if((e|0)<1){e=c[b+12>>2]|0;if(e){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+24>>2]=0;c[b+28>>2]=0;e=c[b+52>>2]|0;if(e){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+44>>2]=0;c[b+48>>2]=0;i=f;return}c[f+88>>2]=0;c[f+92>>2]=0;h=f+96|0;c[h>>2]=0;c[f+100>>2]=256;c[f+104>>2]=0;c[f+108>>2]=0;c[f+112>>2]=0;c[f+116>>2]=256;c[f+120>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;c[f+132>>2]=256;a[f+152>>0]=1;j=f+148|0;c[j>>2]=0;c[f+140>>2]=0;c[f+144>>2]=0;t=1.0000000150474662e+30;x=1.0000000150474662e+30;u=1.0000000150474662e+30;y=-1.0000000150474662e+30;w=-1.0000000150474662e+30;v=-1.0000000150474662e+30;n=0;m=d;while(1){q=+g[m>>2];r=+g[m+4>>2];s=+g[m+8>>2];t=q<t?q:t;x=r<x?r:x;u=s<u?s:u;y=y<q?q:y;w=w<r?r:w;v=v<s?s:v;n=n+1|0;if((n|0)==(e|0))break;else m=m+16|0}q=y-t;r=w-x;s=v-u;if(q<r){c[f+168>>2]=r<s?2:1;m=q<s?0:2;p=f+168|0}else{c[f+168>>2]=q<s?2:0;m=r<s?1:2;p=f+168|0}c[f+160>>2]=m;n=c[p>>2]|0;if((m|0)==(n|0)){m=((m+1|0)>>>0)%3|0;c[f+160>>2]=m;n=c[p>>2]|0}E=3-n-m|0;c[f+164>>2]=E;if(((E+1|0)%3|0|0)==(c[p>>2]|0)){q=q*9788566967472434.0e-20;r=r*9788566967472434.0e-20;s=s*9788566967472434.0e-20}else{q=q*9788566967472434.0e-20*-1.0;r=r*9788566967472434.0e-20*-1.0;s=s*9788566967472434.0e-20*-1.0}g[f+56>>2]=q;g[f+60>>2]=r;g[f+64>>2]=s;g[f+68>>2]=0.0;if(q!=0.0)q=1.0/q;if(r!=0.0)r=1.0/r;if(s!=0.0)s=1.0/s;g[f+72>>2]=(t+y)*.5;g[f+76>>2]=(x+w)*.5;g[f+80>>2]=(u+v)*.5;g[f+84>>2]=0.0;m=f+248|0;a[m>>0]=1;n=f+244|0;c[n>>2]=0;o=f+236|0;c[o>>2]=0;c[f+240>>2]=0;if((e|0)>0){c[5004]=(c[5004]|0)+1;z=fF((e<<4|3)+16|0)|0;if(!z)z=0;else{c[(z+19&-16)+ -4>>2]=z;z=z+19&-16}C=c[o>>2]|0;if((C|0)>0){A=0;do{B=z+(A<<4)|0;if(B){E=(c[n>>2]|0)+(A<<4)|0;c[B+0>>2]=c[E+0>>2];c[B+4>>2]=c[E+4>>2];c[B+8>>2]=c[E+8>>2];c[B+12>>2]=c[E+12>>2]}A=A+1|0}while((A|0)!=(C|0))}A=c[n>>2]|0;if(A){if(a[m>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[A+ -4>>2]|0)}c[n>>2]=0}a[m>>0]=1;c[n>>2]=z;c[f+240>>2]=e;A=0;while(1){z=z+(A<<4)|0;if(z){c[z+0>>2]=c[f+216>>2];c[z+4>>2]=c[f+220>>2];c[z+8>>2]=c[f+224>>2];c[z+12>>2]=c[f+228>>2]}A=A+1|0;if((A|0)==(e|0))break;z=c[n>>2]|0}c[o>>2]=e;z=c[n>>2]|0;u=+g[f+72>>2];v=+g[f+76>>2];t=+g[f+80>>2];A=0;while(1){w=+g[d>>2];g[f+200>>2]=w;x=+g[d+4>>2];g[f+204>>2]=x;y=s*(+g[d+8>>2]-t);g[f+200>>2]=q*(w-u);g[f+204>>2]=r*(x-v);g[f+208>>2]=y;g[f+212>>2]=0.0;c[z+(A<<4)>>2]=~~+g[f+200+(c[f+164>>2]<<2)>>2];c[z+(A<<4)+4>>2]=~~+g[f+200+(c[p>>2]<<2)>>2];c[z+(A<<4)+8>>2]=~~+g[f+200+(c[f+160>>2]<<2)>>2];c[z+(A<<4)+12>>2]=A;A=A+1|0;if((A|0)==(e|0))break;d=d+16|0}d=c[o>>2]|0;if((d|0)>1)vE(f+232|0,0,d+ -1|0)}else c[o>>2]=e;c[f+92>>2]=c[f+88>>2];c[h>>2]=0;c[f+100>>2]=e;d=c[f+140>>2]|0;if((d|0)<(e|0)){if((c[f+144>>2]|0)<(e|0)){if(!e){p=0;z=d}else{c[5004]=(c[5004]|0)+1;p=fF((e<<2|3)+16|0)|0;if(!p)p=0;else{c[(p+19&-16)+ -4>>2]=p;p=p+19&-16}z=c[f+140>>2]|0}if((z|0)>0){B=0;do{A=p+(B<<2)|0;if(A)c[A>>2]=c[(c[j>>2]|0)+(B<<2)>>2];B=B+1|0}while((B|0)!=(z|0))}z=c[j>>2]|0;if(z){if(a[f+152>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[z+ -4>>2]|0)}c[j>>2]=0}a[f+152>>0]=1;c[j>>2]=p;c[f+144>>2]=e}do{p=(c[j>>2]|0)+(d<<2)|0;if(p)c[p>>2]=0;d=d+1|0}while((d|0)!=(e|0))}c[f+140>>2]=e;if((e|0)>0){d=0;do{p=c[h>>2]|0;if(!p){p=c[f+92>>2]|0;if(!p){c[5004]=(c[5004]|0)+1;p=fF(31)|0;if((p|0)!=0?(l=p+19&-16,c[l+ -4>>2]=p,(p+19&-16|0)!=0):0){z=c[f+100>>2]|0;c[l+4>>2]=z;c[l+8>>2]=0;c[5004]=(c[5004]|0)+1;z=fF((z*112|3)+16|0)|0;if(!z)z=0;else{c[(z+19&-16)+ -4>>2]=z;z=z+19&-16}c[(p+19&-16)>>2]=z;p=p+19&-16}else p=0;c[p+8>>2]=c[f+88>>2];c[f+88>>2]=p}else c[f+92>>2]=c[p+8>>2];z=c[p+4>>2]|0;if((z|0)>0){A=0;B=c[p>>2]|0;do{A=A+1|0;E=B;B=B+112|0;c[E>>2]=(A|0)<(z|0)?B:0}while((A|0)!=(z|0))}p=c[p>>2]|0;c[h>>2]=c[p>>2];if(!p)p=0;else k=85}else{c[h>>2]=c[p>>2];k=85}if((k|0)==85){k=0;E=p+104|0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;c[E>>2]=-1}c[p+8>>2]=0;E=p+88|0;D=(c[n>>2]|0)+(d<<4)|0;c[E+0>>2]=c[D+0>>2];c[E+4>>2]=c[D+4>>2];c[E+8>>2]=c[D+8>>2];c[E+12>>2]=c[D+12>>2];c[p+104>>2]=-1;c[(c[j>>2]|0)+(d<<2)>>2]=p;d=d+1|0}while((d|0)<(e|0))}h=c[n>>2]|0;if(h){if(a[m>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[n>>2]=0}a[m>>0]=1;c[n>>2]=0;c[o>>2]=0;c[f+240>>2]=0;c[f+108>>2]=c[f+104>>2];c[f+112>>2]=0;c[f+116>>2]=e*6;c[f+172>>2]=0;c[f+176>>2]=0;c[f+156>>2]=-3;c[f+184>>2]=0;c[f+188>>2]=0;c[f+192>>2]=0;c[f+196>>2]=0;qE(f+56|0,0,e,f+184|0);c[f+180>>2]=c[f+184>>2];e=c[n>>2]|0;if(e){if(a[m>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[n>>2]=0}e=c[b+4>>2]|0;if((e|0)<0){if((c[b+8>>2]|0)<0){h=c[b+12>>2]|0;if(h){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[h+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=0;c[b+8>>2]=0}do{E=(c[b+12>>2]|0)+(e<<4)|0;c[E+0>>2]=c[f+40>>2];c[E+4>>2]=c[f+44>>2];c[E+8>>2]=c[f+48>>2];c[E+12>>2]=c[f+52>>2];e=e+1|0}while((e|0)!=0)}c[b+4>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;c[f+32>>2]=0;h=c[b+24>>2]|0;if((h|0)<0){if((c[b+28>>2]|0)<0){e=c[b+32>>2]|0;if(e){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=0;c[b+28>>2]=0}do{e=(c[b+32>>2]|0)+(h*12|0)|0;if(e){c[e+0>>2]=c[f+24>>2];c[e+4>>2]=c[f+28>>2];c[e+8>>2]=c[f+32>>2]}h=h+1|0}while((h|0)!=0)}c[b+24>>2]=0;h=c[b+44>>2]|0;if((h|0)<0){e=c[b+52>>2]|0;if((c[b+48>>2]|0)<0){if(e){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=0;c[b+48>>2]=0;e=0}j=h;do{h=e+(j<<2)|0;if(h)c[h>>2]=0;j=j+1|0}while((j|0)!=0)}c[b+44>>2]=0;e=c[f+180>>2]|0;if((c[e+104>>2]|0)<0){c[e+104>>2]=0;c[5004]=(c[5004]|0)+1;h=fF(23)|0;if(h){c[(h+19&-16)+ -4>>2]=h;p=h+19&-16;if(h+19&-16)c[p>>2]=e}else p=0;j=1;o=1;e=0;while(1){h=c[p+(e<<2)>>2]|0;if((c[h+100>>2]|0)>-1){g[f+232+(c[f+164>>2]<<2)>>2]=+(c[h+88>>2]|0);g[f+232+(c[f+168>>2]<<2)>>2]=+(c[h+92>>2]|0);q=+(c[h+96>>2]|0)}else{q=+tE(h+24|0);q=q/+tE(h+72|0);g[f+232+(c[f+164>>2]<<2)>>2]=q;q=+tE(h+40|0);q=q/+tE(h+72|0);g[f+232+(c[f+168>>2]<<2)>>2]=q;q=+tE(h+56|0);q=q/+tE(h+72|0)}g[f+232+(c[f+160>>2]<<2)>>2]=q;s=+g[f+232>>2]*+g[f+56>>2]+ +g[f+72>>2];q=+g[f+236>>2]*+g[f+60>>2]+ +g[f+76>>2];r=+g[f+240>>2]*+g[f+64>>2]+ +g[f+80>>2];m=c[b+4>>2]|0;do if((m|0)==(c[b+8>>2]|0)){k=(m|0)==0?1:m<<1;if((m|0)>=(k|0))break;if(!k)l=0;else{c[5004]=(c[5004]|0)+1;l=fF((k<<4|3)+16|0)|0;if(!l)l=0;else{c[(l+19&-16)+ -4>>2]=l;l=l+19&-16}m=c[b+4>>2]|0}if((m|0)>0){n=0;do{E=l+(n<<4)|0;D=(c[b+12>>2]|0)+(n<<4)|0;c[E+0>>2]=c[D+0>>2];c[E+4>>2]=c[D+4>>2];c[E+8>>2]=c[D+8>>2];c[E+12>>2]=c[D+12>>2];n=n+1|0}while((n|0)!=(m|0))}m=c[b+12>>2]|0;if(m){if(a[b+16>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[m+ -4>>2]|0)}c[b+12>>2]=0}a[b+16>>0]=1;c[b+12>>2]=l;c[b+8>>2]=k;m=c[b+4>>2]|0}while(0);E=c[b+12>>2]|0;g[E+(m<<4)>>2]=s;g[E+(m<<4)+4>>2]=q;g[E+(m<<4)+8>>2]=r;g[E+(m<<4)+12>>2]=0.0;c[b+4>>2]=(c[b+4>>2]|0)+1;h=c[h+8>>2]|0;if(h){k=h;l=-1;m=-1;do{n=k+20|0;d=c[n>>2]|0;if((d|0)<0){d=c[b+24>>2]|0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;z=c[b+28>>2]|0;do if((d|0)==(z|0)){z=(d|0)==0?1:d<<1;if((d|0)>=(z|0)){A=d;z=d;break}if(!z){A=0;D=d}else{c[5004]=(c[5004]|0)+1;A=fF((z*12|3)+16|0)|0;if(!A)A=0;else{c[(A+19&-16)+ -4>>2]=A;A=A+19&-16}D=c[b+24>>2]|0}if((D|0)>0){C=0;do{B=A+(C*12|0)|0;if(B){E=(c[b+32>>2]|0)+(C*12|0)|0;c[B+0>>2]=c[E+0>>2];c[B+4>>2]=c[E+4>>2];c[B+8>>2]=c[E+8>>2]}C=C+1|0}while((C|0)!=(D|0))}B=c[b+32>>2]|0;if(B){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[B+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=A;c[b+28>>2]=z;A=c[b+24>>2]|0}else A=d;while(0);B=(c[b+32>>2]|0)+(A*12|0)|0;if(!B)D=z;else{c[B+0>>2]=c[f+12>>2];c[B+4>>2]=c[f+16>>2];c[B+8>>2]=c[f+20>>2];A=c[b+24>>2]|0;D=c[b+28>>2]|0}z=A+1|0;c[b+24>>2]=z;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;do if((z|0)==(D|0)){z=(D|0)==0?1:D<<1;if((D|0)>=(z|0))break;if(!z)A=0;else{c[5004]=(c[5004]|0)+1;A=fF((z*12|3)+16|0)|0;if(!A)A=0;else{c[(A+19&-16)+ -4>>2]=A;A=A+19&-16}D=c[b+24>>2]|0}if((D|0)>0){C=0;do{B=A+(C*12|0)|0;if(B){E=(c[b+32>>2]|0)+(C*12|0)|0;c[B+0>>2]=c[E+0>>2];c[B+4>>2]=c[E+4>>2];c[B+8>>2]=c[E+8>>2]}C=C+1|0}while((C|0)!=(D|0))}B=c[b+32>>2]|0;if(B){if(a[b+36>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[B+ -4>>2]|0)}c[b+32>>2]=0}a[b+36>>0]=1;c[b+32>>2]=A;c[b+28>>2]=z;D=c[b+24>>2]|0}else D=z;while(0);z=c[b+32>>2]|0;A=z+(D*12|0)|0;if(A){c[A+0>>2]=c[f+0>>2];c[A+4>>2]=c[f+4>>2];c[A+8>>2]=c[f+8>>2];D=c[b+24>>2]|0;z=c[b+32>>2]|0}c[b+24>>2]=D+1;c[n>>2]=d;c[(c[k+8>>2]|0)+20>>2]=d+1;c[z+(d*12|0)+4>>2]=1;c[z+((d+1|0)*12|0)+4>>2]=-1;A=c[k+12>>2]|0;B=c[A+104>>2]|0;if((B|0)<0){c[A+104>>2]=j;do if((j|0)==(o|0)){B=(o|0)==0?1:o<<1;if((o|0)>=(B|0))break;do if(!B)C=0;else{c[5004]=(c[5004]|0)+1;C=fF((B<<2|3)+16|0)|0;if(!C){C=0;break}c[(C+19&-16)+ -4>>2]=C;C=C+19&-16}while(0);if((o|0)>0){E=0;do{D=C+(E<<2)|0;if(D)c[D>>2]=c[p+(E<<2)>>2];E=E+1|0}while((E|0)!=(o|0))}if(!p){p=C;o=B;break}c[5006]=(c[5006]|0)+1;gF(c[p+ -4>>2]|0);p=C;o=B}while(0);B=p+(j<<2)|0;if(B)c[B>>2]=A;A=j+1|0}else{A=j;j=B}c[z+(d*12|0)+8>>2]=j;c[z+((d+1|0)*12|0)+8>>2]=e;d=c[n>>2]|0;j=A}if((m|0)>-1){c[(c[b+32>>2]|0)+(d*12|0)>>2]=m-d;m=c[n>>2]|0}else{m=d;l=d}k=c[k>>2]|0}while((k|0)!=(h|0));c[(c[b+32>>2]|0)+(l*12|0)>>2]=m-l}h=e+1|0;if((h|0)<(j|0))e=h;else break}if((e|0)>-1){k=0;do{e=c[(c[p+(k<<2)>>2]|0)+8>>2]|0;if(e){j=e;do{l=j+20|0;if((c[l>>2]|0)>-1){d=c[b+44>>2]|0;do if((d|0)==(c[b+48>>2]|0)){m=(d|0)==0?1:d<<1;if((d|0)>=(m|0))break;if(!m)n=0;else{c[5004]=(c[5004]|0)+1;n=fF((m<<2|3)+16|0)|0;if(!n)n=0;else{c[(n+19&-16)+ -4>>2]=n;n=n+19&-16}d=c[b+44>>2]|0}if((d|0)>0){o=0;do{z=n+(o<<2)|0;if(z)c[z>>2]=c[(c[b+52>>2]|0)+(o<<2)>>2];o=o+1|0}while((o|0)!=(d|0))}o=c[b+52>>2]|0;if(o){if(a[b+56>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[o+ -4>>2]|0)}c[b+52>>2]=0}a[b+56>>0]=1;c[b+52>>2]=n;c[b+48>>2]=m;d=c[b+44>>2]|0}while(0);m=(c[b+52>>2]|0)+(d<<2)|0;if(m){c[m>>2]=c[l>>2];d=c[b+44>>2]|0}c[b+44>>2]=d+1;l=j;do{c[l+20>>2]=-1;l=c[(c[l+8>>2]|0)+4>>2]|0}while((l|0)!=(j|0))}j=c[j>>2]|0}while((j|0)!=(e|0))}k=k+1|0}while((k|0)<(h|0))}if(p){c[5006]=(c[5006]|0)+1;gF(c[p+ -4>>2]|0)}}wE(f+56|0);i=f;return}function vE(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;j=i;i=i+16|0;h=c[a+12>>2]|0;f=c[h+(((d+b|0)/2|0)<<4)>>2]|0;g=c[h+(((d+b|0)/2|0)<<4)+4>>2]|0;e=c[h+(((d+b|0)/2|0)<<4)+8>>2]|0;k=b;l=d;while(1){while(1){m=c[h+(k<<4)+4>>2]|0;if((m|0)>=(g|0)){if((m|0)!=(g|0))break;m=c[h+(k<<4)>>2]|0;if((m|0)>=(f|0)){if((m|0)!=(f|0))break;if((c[h+(k<<4)+8>>2]|0)>=(e|0))break}}k=k+1|0}while(1){m=c[h+(l<<4)+4>>2]|0;if((g|0)>=(m|0)){if((g|0)!=(m|0))break;m=c[h+(l<<4)>>2]|0;if((f|0)>=(m|0)){if((f|0)!=(m|0))break;if((e|0)>=(c[h+(l<<4)+8>>2]|0))break}}l=l+ -1|0}if((k|0)<=(l|0)){m=h+(k<<4)|0;c[j+0>>2]=c[m+0>>2];c[j+4>>2]=c[m+4>>2];c[j+8>>2]=c[m+8>>2];c[j+12>>2]=c[m+12>>2];h=h+(l<<4)|0;c[m+0>>2]=c[h+0>>2];c[m+4>>2]=c[h+4>>2];c[m+8>>2]=c[h+8>>2];c[m+12>>2]=c[h+12>>2];m=(c[a+12>>2]|0)+(l<<4)|0;c[m+0>>2]=c[j+0>>2];c[m+4>>2]=c[j+4>>2];c[m+8>>2]=c[j+8>>2];c[m+12>>2]=c[j+12>>2];k=k+1|0;l=l+ -1|0}if((k|0)>(l|0))break;h=c[a+12>>2]|0}if((l|0)>(b|0))vE(a,b,l);if((k|0)>=(d|0)){i=j;return}vE(a,k,d);i=j;return}function wE(b){b=b|0;var d=0,e=0,f=0;d=i;e=c[b+92>>2]|0;if(e){if(a[b+96>>0]|0){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[b+92>>2]=0}a[b+96>>0]=1;c[b+92>>2]=0;c[b+84>>2]=0;c[b+88>>2]=0;e=c[b+64>>2]|0;if(e)do{c[b+64>>2]=c[e+8>>2];f=c[e>>2]|0;if(f){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);e=c[b+64>>2]|0}while((e|0)!=0);f=c[b+48>>2]|0;if(f)do{c[b+48>>2]=c[f+8>>2];e=c[f>>2]|0;if(e){c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0)}c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0);f=c[b+48>>2]|0}while((f|0)!=0);e=c[b+32>>2]|0;if(!e){i=d;return}do{c[b+32>>2]=c[e+8>>2];f=c[e>>2]|0;if(f){c[5006]=(c[5006]|0)+1;gF(c[f+ -4>>2]|0)}c[5006]=(c[5006]|0)+1;gF(c[e+ -4>>2]|0);e=c[b+32>>2]|0}while((e|0)!=0);i=d;return}function xE(a){a=a|0;var b=0,d=0;b=i;do{c[a+4>>2]=0;g[a+8>>2]=0.0;d=c[a+24>>2]|0;if(d)xE(d);a=c[a+28>>2]|0}while((a|0)!=0);i=b;return}function yE(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=c[5022]|0;if((c[d>>2]|0)!=(a|0)){f=c[d+24>>2]|0;a:do if(!f)e=5;else while(1){if((c[f>>2]|0)==(a|0)){d=f;break a}f=c[f+28>>2]|0;if(!f){e=5;break}}while(0);if((e|0)==5){e=fF(36)|0;b:do if(!e){while(1){e=c[5158]|0;c[5158]=e+0;if(!e)break;sc[e&3]();e=fF(36)|0;if(e)break b}f=Ab(4)|0;c[f>>2]=20472;yb(f|0,20520,265)}while(0);c[e>>2]=a;a=e+4|0;f=e+20|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[f>>2]=d;c[e+24>>2]=0;f=e+28|0;c[f>>2]=0;c[e+32>>2]=0;xE(e);c[f>>2]=c[d+24>>2];c[d+24>>2]=e;d=e}c[5022]=d}e=d+4|0;c[e>>2]=(c[e>>2]|0)+1;e=d+16|0;f=c[e>>2]|0;c[e>>2]=f+1;if(f){i=b;return}Eb(b|0,0)|0;f=c[5008]|0;c[d+12>>2]=(c[b+4>>2]|0)-(c[f+4>>2]|0)+(((c[b>>2]|0)-(c[f>>2]|0)|0)*1e6|0);i=b;return}function zE(){var a=0,b=0;a=i;b=fF(8)|0;a:do if(!b){while(1){b=c[5158]|0;c[5158]=b+0;if(!b)break;sc[b&3]();b=fF(8)|0;if(b)break a}b=Ab(4)|0;c[b>>2]=20472;yb(b|0,20520,265)}while(0);c[5008]=b;Eb(b|0,0)|0;c[5010]=20080;c[5011]=0;c[5012]=0;c[5013]=0;c[5014]=0;c[5015]=0;c[5016]=0;c[5017]=0;c[5018]=0;xE(20040);i=a;return}function AE(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=b;b=c[o>>2]|0;_a(b|0,a|0,d|0)|0;xb(10,b|0)|0;zb()}function BE(){var a=0,b=0,d=0,e=0;a=i;i=i+16|0;if(sb(20288,3)|0)AE(20296,a);b=pb(c[5070]|0)|0;if(!b)AE(20264,a);b=c[b>>2]|0;if(!b)AE(20264,a);d=c[b+48>>2]|0;e=c[b+52>>2]|0;if(!((d&-256|0)==1126902528&(e|0)==1129074247)){c[a>>2]=20112;AE(20224,a)}if((d|0)==1126902529&(e|0)==1129074247)d=c[b+44>>2]|0;else d=b+80|0;c[a+12>>2]=d;e=c[b>>2]|0;b=c[e+4>>2]|0;if(PE(20656,e,a+12|0)|0){e=c[a+12>>2]|0;e=Pb[c[(c[e>>2]|0)+8>>2]&127](e)|0;c[a>>2]=20112;c[a+4>>2]=b;c[a+8>>2]=e;AE(20128,a)}else{c[a>>2]=20112;c[a+4>>2]=b;AE(20176,a)}}function CE(){var a=0;a=i;i=i+16|0;if(!(tb(20280,273)|0)){i=a;return}else AE(20352,a)}function DE(a){a=a|0;var b=0;b=i;i=i+16|0;gF(a);if(!(wb(c[5070]|0,0)|0)){i=b;return}else AE(20408,b)}function EE(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function FE(a){a=a|0;return}function GE(a){a=a|0;return 20488}function HE(a){a=a|0;var b=0;b=i;i=i+16|0;sc[a&3]();AE(20536,b)}function IE(){var a=0,b=0;b=i;i=i+16|0;if(sb(20288,3)|0)AE(20296,b);b=pb(c[5070]|0)|0;if(((b|0)!=0?(a=c[b>>2]|0,(a|0)!=0):0)?(c[a+52>>2]|0)==1129074247?(c[a+48>>2]&-256|0)==1126902528:0:0)HE(c[a+12>>2]|0);b=c[5026]|0;c[5026]=b+0;HE(b)}function JE(a){a=a|0;return}function KE(a){a=a|0;return}function LE(a){a=a|0;return}function ME(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function NE(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function OE(a){a=a|0;var b=0;b=i;gF(a);i=b;return}function PE(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+64|0;if((a|0)==(b|0)){g=1;i=e;return g|0}if(!b){g=0;i=e;return g|0}b=VE(b,20784)|0;if(!b){g=0;i=e;return g|0}g=e+0|0;f=g+56|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(f|0));c[e>>2]=b;c[e+8>>2]=a;c[e+12>>2]=-1;c[e+48>>2]=1;vc[c[(c[b>>2]|0)+28>>2]&127](b,e,c[d>>2]|0,1);if((c[e+24>>2]|0)!=1){g=0;i=e;return g|0}c[d>>2]=c[e+16>>2];g=1;i=e;return g|0}function QE(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=c[b+16>>2]|0;if(!g){c[b+16>>2]=d;c[b+24>>2]=e;c[b+36>>2]=1;i=f;return}if((g|0)!=(d|0)){c[b+36>>2]=(c[b+36>>2]|0)+1;c[b+24>>2]=2;a[b+54>>0]=1;i=f;return}if((c[b+24>>2]|0)!=2){i=f;return}c[b+24>>2]=e;i=f;return}function RE(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((c[b+8>>2]|0)!=(a|0)){i=f;return}QE(b,d,e);i=f;return}function SE(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==(c[b+8>>2]|0)){QE(b,d,e);i=f;return}else{a=c[a+8>>2]|0;vc[c[(c[a>>2]|0)+28>>2]&127](a,b,d,e);i=f;return}}function TE(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=c[a+4>>2]|0;if(!(g&1))h=g>>8;else h=c[(c[d>>2]|0)+(g>>8)>>2]|0;a=c[a>>2]|0;vc[c[(c[a>>2]|0)+28>>2]&127](a,b,d+h|0,(g&2|0)!=0?e:2);i=f;return}function UE(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;if((b|0)==(c[d+8>>2]|0)){QE(d,e,f);i=g;return}h=c[b+12>>2]|0;TE(b+16|0,d,e,f);if((h|0)<=1){i=g;return}j=b+24|0;while(1){TE(j,d,e,f);if(a[d+54>>0]|0){f=7;break}j=j+8|0;if(j>>>0>=(b+(h<<3)+16|0)>>>0){f=7;break}}if((f|0)==7){i=g;return}}function VE(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;i=i+64|0;g=c[d>>2]|0;h=d+(c[g+ -8>>2]|0)|0;g=c[g+ -4>>2]|0;c[f>>2]=e;c[f+4>>2]=d;c[f+8>>2]=20728;j=f+12|0;d=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(d|0));b[f+52>>1]=0;a[f+54>>0]=0;do if((g|0)==(e|0)){c[f+48>>2]=1;Zb[c[(c[g>>2]|0)+20>>2]&7](g,f,h,h,1,0);e=(c[f+24>>2]|0)==1?h:0}else{Jb[c[(c[g>>2]|0)+24>>2]&31](g,f,h,1,0);e=c[f+36>>2]|0;if(!e){if((c[f+40>>2]|0)!=1){e=0;break}if((c[f+28>>2]|0)!=1){e=0;break}e=(c[f+32>>2]|0)==1?c[f+20>>2]|0:0;break}else if((e|0)!=1){e=0;break}if((c[f+24>>2]|0)!=1){if(c[f+40>>2]|0){e=0;break}if((c[f+28>>2]|0)!=1){e=0;break}if((c[f+32>>2]|0)!=1){e=0;break}}e=c[f+16>>2]|0}while(0);i=f;return e|0}function WE(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a[b+53>>0]=1;if((c[b+4>>2]|0)!=(e|0)){i=g;return}a[b+52>>0]=1;e=c[b+16>>2]|0;if(!e){c[b+16>>2]=d;c[b+24>>2]=f;c[b+36>>2]=1;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}if((e|0)!=(d|0)){c[b+36>>2]=(c[b+36>>2]|0)+1;a[b+54>>0]=1;i=g;return}d=c[b+24>>2]|0;if((d|0)==2)c[b+24>>2]=f;else f=d;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}function XE(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;k=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=k;return}if((c[d+28>>2]|0)==1){i=k;return}c[d+28>>2]=f;i=k;return}if((b|0)!=(c[d>>2]|0)){l=c[b+12>>2]|0;ZE(b+16|0,d,e,f,g);if((l|0)<=1){i=k;return}m=c[b+8>>2]|0;if((m&2|0)==0?(c[d+36>>2]|0)!=1:0){if(!(m&1)){m=b+24|0;while(1){if(a[d+54>>0]|0){m=43;break}if((c[d+36>>2]|0)==1){m=43;break}ZE(m,d,e,f,g);m=m+8|0;if(m>>>0>=(b+(l<<3)+16|0)>>>0){m=43;break}}if((m|0)==43){i=k;return}}m=b+24|0;while(1){if(a[d+54>>0]|0){m=43;break}if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==1:0){m=43;break}ZE(m,d,e,f,g);m=m+8|0;if(m>>>0>=(b+(l<<3)+16|0)>>>0){m=43;break}}if((m|0)==43){i=k;return}}m=b+24|0;while(1){if(a[d+54>>0]|0){m=43;break}ZE(m,d,e,f,g);m=m+8|0;if(m>>>0>=(b+(l<<3)+16|0)>>>0){m=43;break}}if((m|0)==43){i=k;return}}if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;if((c[d+44>>2]|0)==4){i=k;return}n=c[b+12>>2]|0;a:do if((n|0)>0){o=0;m=0;l=b+16|0;b:do{a[d+52>>0]=0;a[d+53>>0]=0;YE(l,d,e,e,1,g);if(a[d+54>>0]|0)break;do if(a[d+53>>0]|0){if(!(a[d+52>>0]|0))if(!(c[b+8>>2]&1)){m=1;break b}else{m=1;break}if((c[d+24>>2]|0)==1){m=25;break a}if(!(c[b+8>>2]&2)){m=25;break a}else{o=1;m=1}}while(0);l=l+8|0}while(l>>>0<(b+(n<<3)+16|0)>>>0);if(o){j=m;m=24}else{h=m;m=21}}else{h=0;m=21}while(0);if((m|0)==21){c[d+20>>2]=e;c[d+40>>2]=(c[d+40>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(h)m=25;else m=26}else{j=h;m=24}}if((m|0)==24)if(j)m=25;else m=26;if((m|0)==25){c[d+44>>2]=3;i=k;return}else if((m|0)==26){c[d+44>>2]=4;i=k;return}}if((f|0)!=1){i=k;return}c[d+32>>2]=1;i=k;return}function YE(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=c[a+4>>2]|0;if(!(j&1))k=j>>8;else k=c[(c[e>>2]|0)+(j>>8)>>2]|0;a=c[a>>2]|0;Zb[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e+k|0,(j&2|0)!=0?f:2,g);i=h;return}function ZE(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;h=c[a+4>>2]|0;if(!(h&1))j=h>>8;else j=c[(c[d>>2]|0)+(h>>8)>>2]|0;a=c[a>>2]|0;Jb[c[(c[a>>2]|0)+24>>2]&31](a,b,d+j|0,(h&2|0)!=0?e:2,f);i=g;return}function _E(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}if((c[d+28>>2]|0)==1){i=h;return}c[d+28>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){b=c[b+8>>2]|0;Jb[c[(c[b>>2]|0)+24>>2]&31](b,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;if((c[d+44>>2]|0)==4){i=h;return}a[d+52>>0]=0;a[d+53>>0]=0;b=c[b+8>>2]|0;Zb[c[(c[b>>2]|0)+20>>2]&7](b,d,e,e,1,g);if(a[d+53>>0]|0){if(!(a[d+52>>0]|0)){f=1;j=13}}else{f=0;j=13}do if((j|0)==13){c[d+20>>2]=e;c[d+40>>2]=(c[d+40>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(f)break}else j=16;if((j|0)==16?f:0)break;c[d+44>>2]=4;i=h;return}while(0);c[d+44>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function $E(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}if((c[d+28>>2]|0)==1){i=g;return}c[d+28>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(c[d+20>>2]|0)!=(e|0):0){c[d+32>>2]=f;c[d+20>>2]=e;c[d+40>>2]=(c[d+40>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function aF(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;if((b|0)==(c[d+8>>2]|0)){WE(d,e,f,g);i=j;return}k=a[d+52>>0]|0;l=a[d+53>>0]|0;m=c[b+12>>2]|0;a[d+52>>0]=0;a[d+53>>0]=0;YE(b+16|0,d,e,f,g,h);a:do if((m|0)>1){n=b+24|0;do{if(a[d+54>>0]|0)break a;if(!(a[d+52>>0]|0)){if((a[d+53>>0]|0)!=0?(c[b+8>>2]&1|0)==0:0)break a}else{if((c[d+24>>2]|0)==1)break a;if(!(c[b+8>>2]&2))break a}a[d+52>>0]=0;a[d+53>>0]=0;YE(n,d,e,f,g,h);n=n+8|0}while(n>>>0<(b+(m<<3)+16|0)>>>0)}while(0);a[d+52>>0]=k;a[d+53>>0]=l;i=j;return}function bF(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((a|0)==(c[b+8>>2]|0)){WE(b,d,e,f);i=h;return}else{a=c[a+8>>2]|0;Zb[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e,f,g);i=h;return}}function cF(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[b+8>>2]|0)!=(a|0)){i=g;return}WE(b,d,e,f);i=g;return}function dF(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;i=i+16|0;c[e>>2]=c[d>>2];b=Yb[c[(c[a>>2]|0)+16>>2]&31](a,b,e)|0;if(!b){i=e;return b&1|0}c[d>>2]=c[e>>2];i=e;return b&1|0}function eF(a){a=a|0;var b=0;b=i;if(!a)a=0;else a=(VE(a,20896)|0)!=0;i=b;return a&1|0}
  
  
  
  function fF(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;b=i;do if(a>>>0<245){if(a>>>0<11)o=16;else o=a+11&-8;u=o>>>3;p=c[5286]|0;if(p>>>u&3){e=c[21184+(((p>>>u&1^1)+u<<1)+2<<2)>>2]|0;d=c[e+8>>2]|0;do if((21184+((p>>>u&1^1)+u<<1<<2)|0)!=(d|0)){if(d>>>0<(c[5290]|0)>>>0)zb();if((c[d+12>>2]|0)==(e|0)){c[d+12>>2]=21184+((p>>>u&1^1)+u<<1<<2);c[21184+(((p>>>u&1^1)+u<<1)+2<<2)>>2]=d;break}else zb()}else c[5286]=p&~(1<<(p>>>u&1^1)+u);while(0);c[e+4>>2]=(p>>>u&1^1)+u<<3|3;c[e+((p>>>u&1^1)+u<<3|4)>>2]=c[e+((p>>>u&1^1)+u<<3|4)>>2]|1;E=e+8|0;i=b;return E|0}if(o>>>0>(c[5288]|0)>>>0){if(p>>>u){e=(p>>>u<<u&(2<<u|0-(2<<u))&0-(p>>>u<<u&(2<<u|0-(2<<u))))+ -1|0;d=e>>>(e>>>12&16)>>>(e>>>(e>>>12&16)>>>5&8);g=d>>>(d>>>2&4)>>>(d>>>(d>>>2&4)>>>1&2);g=(e>>>(e>>>12&16)>>>5&8|e>>>12&16|d>>>2&4|d>>>(d>>>2&4)>>>1&2|g>>>1&1)+(g>>>(g>>>1&1))|0;d=c[21184+((g<<1)+2<<2)>>2]|0;e=c[d+8>>2]|0;do if((21184+(g<<1<<2)|0)!=(e|0)){if(e>>>0<(c[5290]|0)>>>0)zb();if((c[e+12>>2]|0)==(d|0)){c[e+12>>2]=21184+(g<<1<<2);c[21184+((g<<1)+2<<2)>>2]=e;break}else zb()}else c[5286]=p&~(1<<g);while(0);f=(g<<3)-o|0;c[d+4>>2]=o|3;e=d+o|0;c[d+(o|4)>>2]=f|1;c[d+(g<<3)>>2]=f;h=c[5288]|0;if(h){g=c[5291]|0;j=c[5286]|0;if(j&1<<(h>>>3)){j=c[21184+((h>>>3<<1)+2<<2)>>2]|0;if(j>>>0<(c[5290]|0)>>>0)zb();else{C=21184+((h>>>3<<1)+2<<2)|0;B=j}}else{c[5286]=j|1<<(h>>>3);C=21184+((h>>>3<<1)+2<<2)|0;B=21184+(h>>>3<<1<<2)|0}c[C>>2]=g;c[B+12>>2]=g;c[g+8>>2]=B;c[g+12>>2]=21184+(h>>>3<<1<<2)}c[5288]=f;c[5291]=e;E=d+8|0;i=b;return E|0}p=c[5287]|0;if(p){e=((p&0-p)+ -1|0)>>>(((p&0-p)+ -1|0)>>>12&16);d=e>>>(e>>>5&8)>>>(e>>>(e>>>5&8)>>>2&4);d=c[21448+((e>>>5&8|((p&0-p)+ -1|0)>>>12&16|e>>>(e>>>5&8)>>>2&4|d>>>1&2|d>>>(d>>>1&2)>>>1&1)+(d>>>(d>>>1&2)>>>(d>>>(d>>>1&2)>>>1&1))<<2)>>2]|0;e=(c[d+4>>2]&-8)-o|0;f=d;while(1){g=c[f+16>>2]|0;if(!g){g=c[f+20>>2]|0;if(!g)break}f=(c[g+4>>2]&-8)-o|0;E=f>>>0<e>>>0;e=E?f:e;f=g;d=E?g:d}h=c[5290]|0;if(d>>>0<h>>>0)zb();f=d+o|0;if(d>>>0>=f>>>0)zb();g=c[d+24>>2]|0;j=c[d+12>>2]|0;do if((j|0)==(d|0)){k=d+20|0;j=c[k>>2]|0;if(!j){k=d+16|0;j=c[k>>2]|0;if(!j){A=0;break}}while(1){l=j+20|0;m=c[l>>2]|0;if(m){j=m;k=l;continue}m=j+16|0;l=c[m>>2]|0;if(!l)break;else{j=l;k=m}}if(k>>>0<h>>>0)zb();else{c[k>>2]=0;A=j;break}}else{k=c[d+8>>2]|0;if(k>>>0<h>>>0)zb();if((c[k+12>>2]|0)!=(d|0))zb();if((c[j+8>>2]|0)==(d|0)){c[k+12>>2]=j;c[j+8>>2]=k;A=j;break}else zb()}while(0);do if(g){h=c[d+28>>2]|0;if((d|0)==(c[21448+(h<<2)>>2]|0)){c[21448+(h<<2)>>2]=A;if(!A){c[5287]=c[5287]&~(1<<h);break}}else{if(g>>>0<(c[5290]|0)>>>0)zb();if((c[g+16>>2]|0)==(d|0))c[g+16>>2]=A;else c[g+20>>2]=A;if(!A)break}if(A>>>0<(c[5290]|0)>>>0)zb();c[A+24>>2]=g;g=c[d+16>>2]|0;do if(g)if(g>>>0<(c[5290]|0)>>>0)zb();else{c[A+16>>2]=g;c[g+24>>2]=A;break}while(0);g=c[d+20>>2]|0;if(g)if(g>>>0<(c[5290]|0)>>>0)zb();else{c[A+20>>2]=g;c[g+24>>2]=A;break}}while(0);if(e>>>0<16){E=e+o|0;c[d+4>>2]=E|3;E=d+(E+4)|0;c[E>>2]=c[E>>2]|1}else{c[d+4>>2]=o|3;c[d+(o|4)>>2]=e|1;c[d+(e+o)>>2]=e;g=c[5288]|0;if(g){h=c[5291]|0;j=c[5286]|0;if(j&1<<(g>>>3)){j=c[21184+((g>>>3<<1)+2<<2)>>2]|0;if(j>>>0<(c[5290]|0)>>>0)zb();else{z=21184+((g>>>3<<1)+2<<2)|0;y=j}}else{c[5286]=j|1<<(g>>>3);z=21184+((g>>>3<<1)+2<<2)|0;y=21184+(g>>>3<<1<<2)|0}c[z>>2]=h;c[y+12>>2]=h;c[h+8>>2]=y;c[h+12>>2]=21184+(g>>>3<<1<<2)}c[5288]=e;c[5291]=f}E=d+8|0;i=b;return E|0}}}else if(a>>>0<=4294967231){o=a+11&-8;A=c[5287]|0;if(A){if((a+11|0)>>>8)if(o>>>0>16777215)B=31;else{B=(a+11|0)>>>8<<((((a+11|0)>>>8)+1048320|0)>>>16&8);B=14-((B+520192|0)>>>16&4|(((a+11|0)>>>8)+1048320|0)>>>16&8|((B<<((B+520192|0)>>>16&4))+245760|0)>>>16&2)+(B<<((B+520192|0)>>>16&4)<<(((B<<((B+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;B=o>>>(B+7|0)&1|B<<1}else B=0;C=c[21448+(B<<2)>>2]|0;a:do if(!C){z=0-o|0;a=0;y=0}else{if((B|0)==31)y=0;else y=25-(B>>>1)|0;z=0-o|0;a=0;D=o<<y;y=0;while(1){E=c[C+4>>2]&-8;if((E-o|0)>>>0<z>>>0)if((E|0)==(o|0)){z=E-o|0;a=C;y=C;break a}else{z=E-o|0;y=C}E=c[C+20>>2]|0;C=c[C+(D>>>31<<2)+16>>2]|0;a=(E|0)==0|(E|0)==(C|0)?a:E;if(!C)break;else D=D<<1}}while(0);if((a|0)==0&(y|0)==0){B=2<<B;if(!(A&(B|0-B)))break;D=(A&(B|0-B)&0-(A&(B|0-B)))+ -1|0;E=D>>>(D>>>12&16)>>>(D>>>(D>>>12&16)>>>5&8);a=E>>>(E>>>2&4)>>>(E>>>(E>>>2&4)>>>1&2);a=c[21448+((D>>>(D>>>12&16)>>>5&8|D>>>12&16|E>>>2&4|E>>>(E>>>2&4)>>>1&2|a>>>1&1)+(a>>>(a>>>1&1))<<2)>>2]|0}if(a)while(1){E=(c[a+4>>2]&-8)-o|0;A=E>>>0<z>>>0;z=A?E:z;y=A?a:y;A=c[a+16>>2]|0;if(A){a=A;continue}a=c[a+20>>2]|0;if(!a)break}if((y|0)!=0?z>>>0<((c[5288]|0)-o|0)>>>0:0){f=c[5290]|0;if(y>>>0<f>>>0)zb();d=y+o|0;if(y>>>0>=d>>>0)zb();e=c[y+24>>2]|0;g=c[y+12>>2]|0;do if((g|0)==(y|0)){h=y+20|0;g=c[h>>2]|0;if(!g){h=y+16|0;g=c[h>>2]|0;if(!g){x=0;break}}while(1){k=g+20|0;j=c[k>>2]|0;if(j){g=j;h=k;continue}k=g+16|0;j=c[k>>2]|0;if(!j)break;else{g=j;h=k}}if(h>>>0<f>>>0)zb();else{c[h>>2]=0;x=g;break}}else{h=c[y+8>>2]|0;if(h>>>0<f>>>0)zb();if((c[h+12>>2]|0)!=(y|0))zb();if((c[g+8>>2]|0)==(y|0)){c[h+12>>2]=g;c[g+8>>2]=h;x=g;break}else zb()}while(0);do if(e){f=c[y+28>>2]|0;if((y|0)==(c[21448+(f<<2)>>2]|0)){c[21448+(f<<2)>>2]=x;if(!x){c[5287]=c[5287]&~(1<<f);break}}else{if(e>>>0<(c[5290]|0)>>>0)zb();if((c[e+16>>2]|0)==(y|0))c[e+16>>2]=x;else c[e+20>>2]=x;if(!x)break}if(x>>>0<(c[5290]|0)>>>0)zb();c[x+24>>2]=e;e=c[y+16>>2]|0;do if(e)if(e>>>0<(c[5290]|0)>>>0)zb();else{c[x+16>>2]=e;c[e+24>>2]=x;break}while(0);e=c[y+20>>2]|0;if(e)if(e>>>0<(c[5290]|0)>>>0)zb();else{c[x+20>>2]=e;c[e+24>>2]=x;break}}while(0);b:do if(z>>>0>=16){c[y+4>>2]=o|3;c[y+(o|4)>>2]=z|1;c[y+(z+o)>>2]=z;e=z>>>3;if(z>>>0<256){f=c[5286]|0;do if(!(f&1<<e)){c[5286]=f|1<<e;v=21184+((e<<1)+2<<2)|0;u=21184+(e<<1<<2)|0}else{f=c[21184+((e<<1)+2<<2)>>2]|0;if(f>>>0>=(c[5290]|0)>>>0){v=21184+((e<<1)+2<<2)|0;u=f;break}zb()}while(0);c[v>>2]=d;c[u+12>>2]=d;c[y+(o+8)>>2]=u;c[y+(o+12)>>2]=21184+(e<<1<<2);break}e=z>>>8;if(e)if(z>>>0>16777215)e=31;else{E=e<<((e+1048320|0)>>>16&8)<<(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4);e=14-(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4|(e+1048320|0)>>>16&8|(E+245760|0)>>>16&2)+(E<<((E+245760|0)>>>16&2)>>>15)|0;e=z>>>(e+7|0)&1|e<<1}else e=0;f=21448+(e<<2)|0;c[y+(o+28)>>2]=e;c[y+(o+20)>>2]=0;c[y+(o+16)>>2]=0;h=c[5287]|0;g=1<<e;if(!(h&g)){c[5287]=h|g;c[f>>2]=d;c[y+(o+24)>>2]=f;c[y+(o+12)>>2]=d;c[y+(o+8)>>2]=d;break}f=c[f>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;c:do if((c[f+4>>2]&-8|0)!=(z|0)){e=z<<e;while(1){g=f+(e>>>31<<2)+16|0;h=c[g>>2]|0;if(!h)break;if((c[h+4>>2]&-8|0)==(z|0)){p=h;break c}else{e=e<<1;f=h}}if(g>>>0<(c[5290]|0)>>>0)zb();else{c[g>>2]=d;c[y+(o+24)>>2]=f;c[y+(o+12)>>2]=d;c[y+(o+8)>>2]=d;break b}}else p=f;while(0);e=p+8|0;f=c[e>>2]|0;g=c[5290]|0;if(p>>>0<g>>>0)zb();if(f>>>0<g>>>0)zb();else{c[f+12>>2]=d;c[e>>2]=d;c[y+(o+8)>>2]=f;c[y+(o+12)>>2]=p;c[y+(o+24)>>2]=0;break}}else{E=z+o|0;c[y+4>>2]=E|3;E=y+(E+4)|0;c[E>>2]=c[E>>2]|1}while(0);E=y+8|0;i=b;return E|0}}}else o=-1;while(0);p=c[5288]|0;if(o>>>0<=p>>>0){d=p-o|0;e=c[5291]|0;if(d>>>0>15){c[5291]=e+o;c[5288]=d;c[e+(o+4)>>2]=d|1;c[e+p>>2]=d;c[e+4>>2]=o|3}else{c[5288]=0;c[5291]=0;c[e+4>>2]=p|3;c[e+(p+4)>>2]=c[e+(p+4)>>2]|1}E=e+8|0;i=b;return E|0}p=c[5289]|0;if(o>>>0<p>>>0){D=p-o|0;c[5289]=D;E=c[5292]|0;c[5292]=E+o;c[E+(o+4)>>2]=D|1;c[E+4>>2]=o|3;E=E+8|0;i=b;return E|0}do if(!(c[5404]|0)){p=nb(30)|0;if(!(p+ -1&p)){c[5406]=p;c[5405]=p;c[5407]=-1;c[5408]=-1;c[5409]=0;c[5397]=0;c[5404]=(Cb(0)|0)&-16^1431655768;break}else zb()}while(0);v=o+48|0;p=c[5406]|0;x=o+47|0;u=p+x&0-p;if(u>>>0<=o>>>0){E=0;i=b;return E|0}y=c[5396]|0;if((y|0)!=0?(E=c[5394]|0,(E+u|0)>>>0<=E>>>0|(E+u|0)>>>0>y>>>0):0){E=0;i=b;return E|0}d:do if(!(c[5397]&4)){y=c[5292]|0;e:do if(y){z=21592|0;while(1){A=c[z>>2]|0;if(A>>>0<=y>>>0?(w=z+4|0,(A+(c[w>>2]|0)|0)>>>0>y>>>0):0)break;z=c[z+8>>2]|0;if(!z){n=182;break e}}if(z){A=p+x-(c[5289]|0)&0-p;if(A>>>0<2147483647){p=gb(A|0)|0;z=(p|0)==((c[z>>2]|0)+(c[w>>2]|0)|0);w=p;y=A;p=z?p:-1;z=z?A:0;n=191}else z=0}else n=182}else n=182;while(0);do if((n|0)==182){z=gb(0)|0;if((z|0)!=(-1|0)){p=c[5405]|0;if(!(p+ -1&z))A=u;else A=u-z+(p+ -1+z&0-p)|0;w=c[5394]|0;p=w+A|0;if(A>>>0>o>>>0&A>>>0<2147483647){E=c[5396]|0;if((E|0)!=0?p>>>0<=w>>>0|p>>>0>E>>>0:0){z=0;break}n=gb(A|0)|0;w=n;y=A;p=(n|0)==(z|0)?z:-1;z=(n|0)==(z|0)?A:0;n=191}else z=0}else z=0}while(0);f:do if((n|0)==191){n=0-y|0;if((p|0)!=(-1|0)){q=z;n=202;break d}do if((w|0)!=(-1|0)&y>>>0<2147483647&y>>>0<v>>>0?(t=c[5406]|0,t=x-y+t&0-t,t>>>0<2147483647):0)if((gb(t|0)|0)==(-1|0)){gb(n|0)|0;break f}else{y=t+y|0;break}while(0);if((w|0)!=(-1|0)){p=w;q=y;n=202;break d}}while(0);c[5397]=c[5397]|4;n=199}else{z=0;n=199}while(0);if((((n|0)==199?u>>>0<2147483647:0)?(s=gb(u|0)|0,r=gb(0)|0,(r|0)!=(-1|0)&(s|0)!=(-1|0)&s>>>0<r>>>0):0)?(q=(r-s|0)>>>0>(o+40|0)>>>0,q):0){p=s;q=q?r-s|0:z;n=202}if((n|0)==202){r=(c[5394]|0)+q|0;c[5394]=r;if(r>>>0>(c[5395]|0)>>>0)c[5395]=r;r=c[5292]|0;g:do if(r){w=21592|0;while(1){t=c[w>>2]|0;u=w+4|0;v=c[u>>2]|0;if((p|0)==(t+v|0)){n=214;break}s=c[w+8>>2]|0;if(!s)break;else w=s}if(((n|0)==214?(c[w+12>>2]&8|0)==0:0)?r>>>0>=t>>>0&r>>>0<p>>>0:0){c[u>>2]=v+q;e=(c[5289]|0)+q|0;if(!(r+8&7))d=0;else d=0-(r+8)&7;E=e-d|0;c[5292]=r+d;c[5289]=E;c[r+(d+4)>>2]=E|1;c[r+(e+4)>>2]=40;c[5293]=c[5408];break}if(p>>>0<(c[5290]|0)>>>0)c[5290]=p;t=p+q|0;s=21592|0;while(1){if((c[s>>2]|0)==(t|0)){n=224;break}u=c[s+8>>2]|0;if(!u)break;else s=u}if((n|0)==224?(c[s+12>>2]&8|0)==0:0){c[s>>2]=p;h=s+4|0;c[h>>2]=(c[h>>2]|0)+q;h=p+8|0;if(!(h&7))h=0;else h=0-h&7;k=p+(q+8)|0;if(!(k&7))r=0;else r=0-k&7;s=p+(r+q)|0;k=h+o|0;l=p+k|0;m=s-(p+h)-o|0;c[p+(h+4)>>2]=o|3;h:do if((s|0)!=(c[5292]|0)){if((s|0)==(c[5291]|0)){E=(c[5288]|0)+m|0;c[5288]=E;c[5291]=l;c[p+(k+4)>>2]=E|1;c[p+(E+k)>>2]=E;break}o=q+4|0;n=c[p+(o+r)>>2]|0;if((n&3|0)==1){i:do if(n>>>0>=256){j=c[p+((r|24)+q)>>2]|0;u=c[p+(q+12+r)>>2]|0;do if((u|0)==(s|0)){v=r|16;u=p+(o+v)|0;t=c[u>>2]|0;if(!t){u=p+(v+q)|0;t=c[u>>2]|0;if(!t){g=0;break}}while(1){v=t+20|0;w=c[v>>2]|0;if(w){t=w;u=v;continue}v=t+16|0;w=c[v>>2]|0;if(!w)break;else{t=w;u=v}}if(u>>>0<(c[5290]|0)>>>0)zb();else{c[u>>2]=0;g=t;break}}else{t=c[p+((r|8)+q)>>2]|0;if(t>>>0<(c[5290]|0)>>>0)zb();if((c[t+12>>2]|0)!=(s|0))zb();if((c[u+8>>2]|0)==(s|0)){c[t+12>>2]=u;c[u+8>>2]=t;g=u;break}else zb()}while(0);if(!j)break;t=c[p+(q+28+r)>>2]|0;do if((s|0)!=(c[21448+(t<<2)>>2]|0)){if(j>>>0<(c[5290]|0)>>>0)zb();if((c[j+16>>2]|0)==(s|0))c[j+16>>2]=g;else c[j+20>>2]=g;if(!g)break i}else{c[21448+(t<<2)>>2]=g;if(g)break;c[5287]=c[5287]&~(1<<t);break i}while(0);if(g>>>0<(c[5290]|0)>>>0)zb();c[g+24>>2]=j;j=r|16;s=c[p+(j+q)>>2]|0;do if(s)if(s>>>0<(c[5290]|0)>>>0)zb();else{c[g+16>>2]=s;c[s+24>>2]=g;break}while(0);j=c[p+(o+j)>>2]|0;if(!j)break;if(j>>>0<(c[5290]|0)>>>0)zb();else{c[g+20>>2]=j;c[j+24>>2]=g;break}}else{g=c[p+((r|8)+q)>>2]|0;o=c[p+(q+12+r)>>2]|0;do if((g|0)!=(21184+(n>>>3<<1<<2)|0)){if(g>>>0<(c[5290]|0)>>>0)zb();if((c[g+12>>2]|0)==(s|0))break;zb()}while(0);if((o|0)==(g|0)){c[5286]=c[5286]&~(1<<(n>>>3));break}do if((o|0)==(21184+(n>>>3<<1<<2)|0))j=o+8|0;else{if(o>>>0<(c[5290]|0)>>>0)zb();if((c[o+8>>2]|0)==(s|0)){j=o+8|0;break}zb()}while(0);c[g+12>>2]=o;c[j>>2]=g}while(0);s=p+((n&-8|r)+q)|0;m=(n&-8)+m|0}g=s+4|0;c[g>>2]=c[g>>2]&-2;c[p+(k+4)>>2]=m|1;c[p+(m+k)>>2]=m;g=m>>>3;if(m>>>0<256){d=c[5286]|0;do if(!(d&1<<g)){c[5286]=d|1<<g;f=21184+((g<<1)+2<<2)|0;e=21184+(g<<1<<2)|0}else{d=c[21184+((g<<1)+2<<2)>>2]|0;if(d>>>0>=(c[5290]|0)>>>0){f=21184+((g<<1)+2<<2)|0;e=d;break}zb()}while(0);c[f>>2]=l;c[e+12>>2]=l;c[p+(k+8)>>2]=e;c[p+(k+12)>>2]=21184+(g<<1<<2);break}e=m>>>8;do if(!e)e=0;else{if(m>>>0>16777215){e=31;break}E=e<<((e+1048320|0)>>>16&8)<<(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4);e=14-(((e<<((e+1048320|0)>>>16&8))+520192|0)>>>16&4|(e+1048320|0)>>>16&8|(E+245760|0)>>>16&2)+(E<<((E+245760|0)>>>16&2)>>>15)|0;e=m>>>(e+7|0)&1|e<<1}while(0);j=21448+(e<<2)|0;c[p+(k+28)>>2]=e;c[p+(k+20)>>2]=0;c[p+(k+16)>>2]=0;f=c[5287]|0;g=1<<e;if(!(f&g)){c[5287]=f|g;c[j>>2]=l;c[p+(k+24)>>2]=j;c[p+(k+12)>>2]=l;c[p+(k+8)>>2]=l;break}f=c[j>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;j:do if((c[f+4>>2]&-8|0)!=(m|0)){e=m<<e;while(1){g=f+(e>>>31<<2)+16|0;j=c[g>>2]|0;if(!j)break;if((c[j+4>>2]&-8|0)==(m|0)){d=j;break j}else{e=e<<1;f=j}}if(g>>>0<(c[5290]|0)>>>0)zb();else{c[g>>2]=l;c[p+(k+24)>>2]=f;c[p+(k+12)>>2]=l;c[p+(k+8)>>2]=l;break h}}else d=f;while(0);f=d+8|0;e=c[f>>2]|0;g=c[5290]|0;if(d>>>0<g>>>0)zb();if(e>>>0<g>>>0)zb();else{c[e+12>>2]=l;c[f>>2]=l;c[p+(k+8)>>2]=e;c[p+(k+12)>>2]=d;c[p+(k+24)>>2]=0;break}}else{E=(c[5289]|0)+m|0;c[5289]=E;c[5292]=l;c[p+(k+4)>>2]=E|1}while(0);E=p+(h|8)|0;i=b;return E|0}d=21592|0;while(1){e=c[d>>2]|0;if(e>>>0<=r>>>0?(m=c[d+4>>2]|0,(e+m|0)>>>0>r>>>0):0)break;d=c[d+8>>2]|0}if(!(e+(m+ -39)&7))d=0;else d=0-(e+(m+ -39))&7;d=e+(m+ -47+d)|0;d=d>>>0<(r+16|0)>>>0?r:d;f=p+8|0;if(!(f&7))f=0;else f=0-f&7;E=q+ -40-f|0;c[5292]=p+f;c[5289]=E;c[p+(f+4)>>2]=E|1;c[p+(q+ -36)>>2]=40;c[5293]=c[5408];c[d+4>>2]=27;c[d+8>>2]=c[5398];c[d+12>>2]=c[5399];c[d+16>>2]=c[5400];c[d+20>>2]=c[5401];c[5398]=p;c[5399]=q;c[5401]=0;c[5400]=d+8;c[d+28>>2]=7;if((d+32|0)>>>0<(e+m|0)>>>0){f=d+28|0;do{E=f;f=f+4|0;c[f>>2]=7}while((E+8|0)>>>0<(e+m|0)>>>0)}if((d|0)!=(r|0)){c[r+(d-r+4)>>2]=c[r+(d-r+4)>>2]&-2;c[r+4>>2]=d-r|1;c[r+(d-r)>>2]=d-r;if((d-r|0)>>>0<256){e=c[5286]|0;do if(!(e&1<<((d-r|0)>>>3))){c[5286]=e|1<<((d-r|0)>>>3);l=21184+(((d-r|0)>>>3<<1)+2<<2)|0;k=21184+((d-r|0)>>>3<<1<<2)|0}else{e=c[21184+(((d-r|0)>>>3<<1)+2<<2)>>2]|0;if(e>>>0>=(c[5290]|0)>>>0){l=21184+(((d-r|0)>>>3<<1)+2<<2)|0;k=e;break}zb()}while(0);c[l>>2]=r;c[k+12>>2]=r;c[r+8>>2]=k;c[r+12>>2]=21184+((d-r|0)>>>3<<1<<2);break}if((d-r|0)>>>8)if((d-r|0)>>>0>16777215)e=31;else{e=(d-r|0)>>>8<<((((d-r|0)>>>8)+1048320|0)>>>16&8);e=14-((e+520192|0)>>>16&4|(((d-r|0)>>>8)+1048320|0)>>>16&8|((e<<((e+520192|0)>>>16&4))+245760|0)>>>16&2)+(e<<((e+520192|0)>>>16&4)<<(((e<<((e+520192|0)>>>16&4))+245760|0)>>>16&2)>>>15)|0;e=(d-r|0)>>>(e+7|0)&1|e<<1}else e=0;j=21448+(e<<2)|0;c[r+28>>2]=e;c[r+20>>2]=0;c[r+16>>2]=0;f=c[5287]|0;g=1<<e;if(!(f&g)){c[5287]=f|g;c[j>>2]=r;c[r+24>>2]=j;c[r+12>>2]=r;c[r+8>>2]=r;break}g=c[j>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;k:do if((c[g+4>>2]&-8|0)!=(d-r|0)){e=d-r<<e;while(1){f=g+(e>>>31<<2)+16|0;j=c[f>>2]|0;if(!j)break;if((c[j+4>>2]&-8|0)==(d-r|0)){h=j;break k}else{e=e<<1;g=j}}if(f>>>0<(c[5290]|0)>>>0)zb();else{c[f>>2]=r;c[r+24>>2]=g;c[r+12>>2]=r;c[r+8>>2]=r;break g}}else h=g;while(0);e=h+8|0;d=c[e>>2]|0;f=c[5290]|0;if(h>>>0<f>>>0)zb();if(d>>>0<f>>>0)zb();else{c[d+12>>2]=r;c[e>>2]=r;c[r+8>>2]=d;c[r+12>>2]=h;c[r+24>>2]=0;break}}}else{E=c[5290]|0;if((E|0)==0|p>>>0<E>>>0)c[5290]=p;c[5398]=p;c[5399]=q;c[5401]=0;c[5295]=c[5404];c[5294]=-1;d=0;do{E=d<<1;c[21184+(E+3<<2)>>2]=21184+(E<<2);c[21184+(E+2<<2)>>2]=21184+(E<<2);d=d+1|0}while((d|0)!=32);d=p+8|0;if(!(d&7))d=0;else d=0-d&7;E=q+ -40-d|0;c[5292]=p+d;c[5289]=E;c[p+(d+4)>>2]=E|1;c[p+(q+ -36)>>2]=40;c[5293]=c[5408]}while(0);d=c[5289]|0;if(d>>>0>o>>>0){D=d-o|0;c[5289]=D;E=c[5292]|0;c[5292]=E+o;c[E+(o+4)>>2]=D|1;c[E+4>>2]=o|3;E=E+8|0;i=b;return E|0}}c[(vb()|0)>>2]=12;E=0;i=b;return E|0}function gF(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;b=i;if(!a){i=b;return}r=c[5290]|0;if((a+ -8|0)>>>0<r>>>0)zb();h=c[a+ -4>>2]|0;if((h&3|0)==1)zb();k=a+((h&-8)+ -8)|0;do if(!(h&1)){o=c[a+ -8>>2]|0;if(!(h&3)){i=b;return}m=a+(-8-o)|0;n=o+(h&-8)|0;if(m>>>0<r>>>0)zb();if((m|0)==(c[5291]|0)){if((c[a+((h&-8)+ -4)>>2]&3|0)!=3){d=m;p=n;break}c[5288]=n;c[a+((h&-8)+ -4)>>2]=c[a+((h&-8)+ -4)>>2]&-2;c[a+(-8-o+4)>>2]=n|1;c[k>>2]=n;i=b;return}if(o>>>0<256){p=c[a+(-8-o+8)>>2]|0;d=c[a+(-8-o+12)>>2]|0;if((p|0)!=(21184+(o>>>3<<1<<2)|0)){if(p>>>0<r>>>0)zb();if((c[p+12>>2]|0)!=(m|0))zb()}if((d|0)==(p|0)){c[5286]=c[5286]&~(1<<(o>>>3));d=m;p=n;break}if((d|0)!=(21184+(o>>>3<<1<<2)|0)){if(d>>>0<r>>>0)zb();if((c[d+8>>2]|0)!=(m|0))zb();else s=d+8|0}else s=d+8|0;c[p+12>>2]=d;c[s>>2]=p;d=m;p=n;break}s=c[a+(-8-o+24)>>2]|0;u=c[a+(-8-o+12)>>2]|0;do if((u|0)==(m|0)){u=c[a+(-8-o+20)>>2]|0;if(!u){u=c[a+(-8-o+16)>>2]|0;if(!u){q=0;break}else t=a+(-8-o+16)|0}else t=a+(-8-o+20)|0;while(1){w=u+20|0;v=c[w>>2]|0;if(v){u=v;t=w;continue}w=u+16|0;v=c[w>>2]|0;if(!v)break;else{u=v;t=w}}if(t>>>0<r>>>0)zb();else{c[t>>2]=0;q=u;break}}else{t=c[a+(-8-o+8)>>2]|0;if(t>>>0<r>>>0)zb();if((c[t+12>>2]|0)!=(m|0))zb();if((c[u+8>>2]|0)==(m|0)){c[t+12>>2]=u;c[u+8>>2]=t;q=u;break}else zb()}while(0);if(s){r=c[a+(-8-o+28)>>2]|0;if((m|0)==(c[21448+(r<<2)>>2]|0)){c[21448+(r<<2)>>2]=q;if(!q){c[5287]=c[5287]&~(1<<r);d=m;p=n;break}}else{if(s>>>0<(c[5290]|0)>>>0)zb();if((c[s+16>>2]|0)==(m|0))c[s+16>>2]=q;else c[s+20>>2]=q;if(!q){d=m;p=n;break}}if(q>>>0<(c[5290]|0)>>>0)zb();c[q+24>>2]=s;r=c[a+(-8-o+16)>>2]|0;do if(r)if(r>>>0<(c[5290]|0)>>>0)zb();else{c[q+16>>2]=r;c[r+24>>2]=q;break}while(0);o=c[a+(-8-o+20)>>2]|0;if(o)if(o>>>0<(c[5290]|0)>>>0)zb();else{c[q+20>>2]=o;c[o+24>>2]=q;d=m;p=n;break}else{d=m;p=n}}else{d=m;p=n}}else{d=a+ -8|0;p=h&-8}while(0);if(d>>>0>=k>>>0)zb();m=c[a+((h&-8)+ -4)>>2]|0;if(!(m&1))zb();if(!(m&2)){if((k|0)==(c[5292]|0)){w=(c[5289]|0)+p|0;c[5289]=w;c[5292]=d;c[d+4>>2]=w|1;if((d|0)!=(c[5291]|0)){i=b;return}c[5291]=0;c[5288]=0;i=b;return}if((k|0)==(c[5291]|0)){w=(c[5288]|0)+p|0;c[5288]=w;c[5291]=d;c[d+4>>2]=w|1;c[d+w>>2]=w;i=b;return}p=(m&-8)+p|0;do if(m>>>0>=256){l=c[a+((h&-8)+16)>>2]|0;n=c[a+(h&-8|4)>>2]|0;do if((n|0)==(k|0)){n=c[a+((h&-8)+12)>>2]|0;if(!n){n=c[a+((h&-8)+8)>>2]|0;if(!n){j=0;break}else m=a+((h&-8)+8)|0}else m=a+((h&-8)+12)|0;while(1){o=n+20|0;q=c[o>>2]|0;if(q){n=q;m=o;continue}o=n+16|0;q=c[o>>2]|0;if(!q)break;else{n=q;m=o}}if(m>>>0<(c[5290]|0)>>>0)zb();else{c[m>>2]=0;j=n;break}}else{m=c[a+(h&-8)>>2]|0;if(m>>>0<(c[5290]|0)>>>0)zb();if((c[m+12>>2]|0)!=(k|0))zb();if((c[n+8>>2]|0)==(k|0)){c[m+12>>2]=n;c[n+8>>2]=m;j=n;break}else zb()}while(0);if(l){m=c[a+((h&-8)+20)>>2]|0;if((k|0)==(c[21448+(m<<2)>>2]|0)){c[21448+(m<<2)>>2]=j;if(!j){c[5287]=c[5287]&~(1<<m);break}}else{if(l>>>0<(c[5290]|0)>>>0)zb();if((c[l+16>>2]|0)==(k|0))c[l+16>>2]=j;else c[l+20>>2]=j;if(!j)break}if(j>>>0<(c[5290]|0)>>>0)zb();c[j+24>>2]=l;k=c[a+((h&-8)+8)>>2]|0;do if(k)if(k>>>0<(c[5290]|0)>>>0)zb();else{c[j+16>>2]=k;c[k+24>>2]=j;break}while(0);h=c[a+((h&-8)+12)>>2]|0;if(h)if(h>>>0<(c[5290]|0)>>>0)zb();else{c[j+20>>2]=h;c[h+24>>2]=j;break}}}else{j=c[a+(h&-8)>>2]|0;h=c[a+(h&-8|4)>>2]|0;if((j|0)!=(21184+(m>>>3<<1<<2)|0)){if(j>>>0<(c[5290]|0)>>>0)zb();if((c[j+12>>2]|0)!=(k|0))zb()}if((h|0)==(j|0)){c[5286]=c[5286]&~(1<<(m>>>3));break}if((h|0)!=(21184+(m>>>3<<1<<2)|0)){if(h>>>0<(c[5290]|0)>>>0)zb();if((c[h+8>>2]|0)!=(k|0))zb();else l=h+8|0}else l=h+8|0;c[j+12>>2]=h;c[l>>2]=j}while(0);c[d+4>>2]=p|1;c[d+p>>2]=p;if((d|0)==(c[5291]|0)){c[5288]=p;i=b;return}}else{c[a+((h&-8)+ -4)>>2]=m&-2;c[d+4>>2]=p|1;c[d+p>>2]=p}h=p>>>3;if(p>>>0<256){e=c[5286]|0;if(e&1<<h){e=c[21184+((h<<1)+2<<2)>>2]|0;if(e>>>0<(c[5290]|0)>>>0)zb();else{f=21184+((h<<1)+2<<2)|0;g=e}}else{c[5286]=e|1<<h;f=21184+((h<<1)+2<<2)|0;g=21184+(h<<1<<2)|0}c[f>>2]=d;c[g+12>>2]=d;c[d+8>>2]=g;c[d+12>>2]=21184+(h<<1<<2);i=b;return}f=p>>>8;if(f)if(p>>>0>16777215)f=31;else{w=f<<((f+1048320|0)>>>16&8)<<(((f<<((f+1048320|0)>>>16&8))+520192|0)>>>16&4);f=14-(((f<<((f+1048320|0)>>>16&8))+520192|0)>>>16&4|(f+1048320|0)>>>16&8|(w+245760|0)>>>16&2)+(w<<((w+245760|0)>>>16&2)>>>15)|0;f=p>>>(f+7|0)&1|f<<1}else f=0;g=21448+(f<<2)|0;c[d+28>>2]=f;c[d+20>>2]=0;c[d+16>>2]=0;a=c[5287]|0;h=1<<f;a:do if(a&h){g=c[g>>2]|0;if((f|0)==31)f=0;else f=25-(f>>>1)|0;b:do if((c[g+4>>2]&-8|0)!=(p|0)){f=p<<f;h=g;while(1){a=h+(f>>>31<<2)+16|0;g=c[a>>2]|0;if(!g)break;if((c[g+4>>2]&-8|0)==(p|0)){e=g;break b}else{f=f<<1;h=g}}if(a>>>0<(c[5290]|0)>>>0)zb();else{c[a>>2]=d;c[d+24>>2]=h;c[d+12>>2]=d;c[d+8>>2]=d;break a}}else e=g;while(0);f=e+8|0;h=c[f>>2]|0;g=c[5290]|0;if(e>>>0<g>>>0)zb();if(h>>>0<g>>>0)zb();else{c[h+12>>2]=d;c[f>>2]=d;c[d+8>>2]=h;c[d+12>>2]=e;c[d+24>>2]=0;break}}else{c[5287]=a|h;c[g>>2]=d;c[d+24>>2]=g;c[d+12>>2]=d;c[d+8>>2]=d}while(0);w=(c[5294]|0)+ -1|0;c[5294]=w;if(!w)d=21600|0;else{i=b;return}while(1){d=c[d>>2]|0;if(!d)break;else d=d+8|0}c[5294]=-1;i=b;return}function hF(){}function iF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;b=b-d-(c>>>0>a>>>0|0)>>>0;return(E=b,a-c>>>0|0)|0}function jF(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;g=d|d<<8|d<<16|d<<24;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(f&~3|0)){c[b>>2]=g;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function kF(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function lF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return(E=b+d+(a+c>>>0>>>0<a>>>0|0)>>>0,a+c>>>0|0)|0}function mF(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return rb(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function nF(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else mF(b,c,d)|0;return b|0}function oF(a){a=a|0;return(a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function pF(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}E=a<<c-32;return 0}function qF(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=0;return b>>>c-32|0}function rF(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=(b|0)<0?-1:0;return b>>c-32|0}function sF(b){b=b|0;var c=0;c=a[n+(b>>>24)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)>>0]|0)+24|0}function tF(b){b=b|0;var c=0;c=a[m+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)>>0]|0)+24|0}function uF(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=aa(b&65535,a&65535)|0;e=(c>>>16)+(aa(b&65535,a>>>16)|0)|0;d=aa(b>>>16,a&65535)|0;return(E=(e>>>16)+(aa(b>>>16,a>>>16)|0)+(((e&65535)+d|0)>>>16)|0,e+d<<16|c&65535|0)|0}function vF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;g=b>>31|((b|0)<0?-1:0)<<1;e=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;h=d>>31|((d|0)<0?-1:0)<<1;f=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;b=iF(g^a,e^b,g,e)|0;a=E;a=iF((AF(b,a,iF(h^c,f^d,h,f)|0,E,0)|0)^(h^g),E^(f^e),h^g,f^e)|0;return a|0}function wF(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;i=i+8|0;h=b>>31|((b|0)<0?-1:0)<<1;g=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;j=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;b=iF(h^a,g^b,h,g)|0;a=E;AF(b,a,iF(k^d,j^e,k,j)|0,E,f|0)|0;a=iF(c[f>>2]^h,c[f+4>>2]^g,h,g)|0;b=E;i=f;return(E=b,a)|0}function xF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=uF(a,c)|0;f=E;return(E=(aa(b,c)|0)+(aa(d,a)|0)+f|f&0,e|0|0)|0}function yF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;a=AF(a,b,c,d,0)|0;return a|0}function zF(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;i=i+8|0;AF(a,b,d,e,f|0)|0;i=f;return(E=c[f+4>>2]|0,c[f>>2]|0)|0}function AF(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!b)if(!e){if(f){c[f>>2]=(a>>>0)%(d>>>0);c[f+4>>2]=0}k=0;l=(a>>>0)/(d>>>0)>>>0;return(E=k,l)|0}else{if(!f){k=0;l=0;return(E=k,l)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;k=0;l=0;return(E=k,l)|0}do if(d){if(e){k=(sF(e|0)|0)-(sF(b|0)|0)|0;if(k>>>0<=31){i=k+1|0;g=a>>>((k+1|0)>>>0)&k-31>>31|b<<31-k;h=b>>>((k+1|0)>>>0)&k-31>>31;j=0;l=a<<31-k;break}if(!f){k=0;l=0;return(E=k,l)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;k=0;l=0;return(E=k,l)|0}if(d-1&d){l=(sF(d|0)|0)+33-(sF(b|0)|0)|0;i=l;g=32-l-1>>31&b>>>((l-32|0)>>>0)|(b<<32-l|a>>>(l>>>0))&l-32>>31;h=l-32>>31&b>>>(l>>>0);j=a<<64-l&32-l>>31;l=(b<<64-l|a>>>((l-32|0)>>>0))&32-l>>31|a<<32-l&l-33>>31;break}if(f){c[f>>2]=d-1&a;c[f+4>>2]=0}if((d|0)==1){k=b|b&0;l=a|0|0;return(E=k,l)|0}else{l=tF(d|0)|0;k=b>>>(l>>>0)|0;l=b<<32-l|a>>>(l>>>0)|0;return(E=k,l)|0}}else{if(!e){if(f){c[f>>2]=(b>>>0)%(d>>>0);c[f+4>>2]=0}k=0;l=(b>>>0)/(d>>>0)>>>0;return(E=k,l)|0}if(!a){if(f){c[f>>2]=0;c[f+4>>2]=(b>>>0)%(e>>>0)}k=0;l=(b>>>0)/(e>>>0)>>>0;return(E=k,l)|0}if(!(e-1&e)){if(f){c[f>>2]=a|0;c[f+4>>2]=e-1&b|b&0}k=0;l=b>>>((tF(e|0)|0)>>>0);return(E=k,l)|0}k=(sF(e|0)|0)-(sF(b|0)|0)|0;if(k>>>0<=30){i=k+1|0;g=b<<31-k|a>>>((k+1|0)>>>0);h=b>>>((k+1|0)>>>0);j=0;l=a<<31-k;break}if(!f){k=0;l=0;return(E=k,l)|0}c[f>>2]=a|0;c[f+4>>2]=b|b&0;k=0;l=0;return(E=k,l)|0}while(0);if(!i){e=l;k=j;d=0;j=0}else{a=lF(d|0|0,e|e&0,-1,-1)|0;b=E;k=j;j=0;do{p=l;l=k>>>31|l<<1;k=j|k<<1;p=g<<1|p>>>31|0;o=g>>>31|h<<1|0;iF(a,b,p,o)|0;m=E;n=m>>31|((m|0)<0?-1:0)<<1;j=n&1;g=iF(p,o,n&(d|0),(((m|0)<0?-1:0)>>31|((m|0)<0?-1:0)<<1)&(e|e&0))|0;h=E;i=i-1|0}while((i|0)!=0);e=l;d=0}if(f){c[f>>2]=g;c[f+4>>2]=h}o=(k|0)>>>31|e<<1|(0<<1|k>>>31)&0|d;p=(k<<1|0>>>31)&-2|j;return(E=o,p)|0}function BF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Jb[a&31](b|0,c|0,d|0,e|0,f|0)}function CF(a,b,c){a=a|0;b=b|0;c=+c;Kb[a&31](b|0,+c)}function DF(a,b){a=a|0;b=b|0;Lb[a&511](b|0)}function EF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;g=g|0;Mb[a&0](b|0,c|0,d|0,+e,f|0,g|0)}function FF(a,b,c){a=a|0;b=b|0;c=c|0;Nb[a&127](b|0,c|0)}function GF(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;return Ob[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)|0}function HF(a,b){a=a|0;b=b|0;return Pb[a&127](b|0)|0}function IF(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;Qb[a&7](b|0,c|0,+d,e|0)}function JF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=+c;d=+d;e=e|0;f=f|0;g=g|0;Rb[a&0](b|0,+c,+d,e|0,f|0,g|0)}function KF(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;Sb[a&0](b|0,+c,d|0,e|0)}function LF(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Tb[a&31](b|0,c|0,d|0,e|0)|0}function MF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;Ub[a&15](b|0,+c,d|0)}function NF(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return+Vb[a&1](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function OF(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=+h;i=+i;j=j|0;k=k|0;l=+l;Wb[a&0](b|0,c|0,d|0,e|0,+f,+g,+h,+i,j|0,k|0,+l)}function PF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return+Xb[a&15](b|0,c|0,d|0,e|0,f|0)}function QF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Yb[a&31](b|0,c|0,d|0)|0}function RF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Zb[a&7](b|0,c|0,d|0,e|0,f|0,g|0)}function SF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;return _b[a&7](b|0,c|0,+d)|0}function TF(a,b){a=a|0;b=b|0;return+$b[a&15](b|0)}function UF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return ac[a&3](b|0,c|0,d|0,e|0,f|0,g|0)|0}function VF(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=f|0;g=g|0;return+bc[a&3](b|0,c|0,d|0,+e,f|0,g|0)}function WF(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;cc[a&0](b|0,c|0,+d,e|0,f|0)}function XF(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;dc[a&1](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function YF(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ec[a&1](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function ZF(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;fc[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)}function _F(a,b,c){a=a|0;b=b|0;c=c|0;return gc[a&31](b|0,c|0)|0}function $F(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return+hc[a&15](b|0,c|0,d|0)}function aG(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;return+ic[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0,k|0)}function bG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;jc[a&1](b|0,c|0,d|0,e|0,+f)}function cG(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;return+kc[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function dG(a,b,c){a=a|0;b=b|0;c=+c;return+lc[a&1](b|0,+c)}function eG(a,b,c,d,e,f,g,h,i,j,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=+h;i=+i;j=+j;k=k|0;l=+l;m=m|0;mc[a&0](b|0,c|0,d|0,e|0,+f,+g,+h,+i,+j,k|0,+l,m|0)}function fG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;return+nc[a&3](b|0,c|0,+d,e|0,f|0)}function gG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return+oc[a&1](b|0,c|0,d|0,e|0)}function hG(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;return pc[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)|0}function iG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;qc[a&15](b|0,c|0,d|0,+e)}function jG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;rc[a&127](b|0,c|0,d|0)}function kG(a){a=a|0;sc[a&3]()}function lG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;tc[a&7](b|0,c|0,+d)}function mG(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=+e;return uc[a&1](b|0,+c,d|0,+e)|0}function nG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;vc[a&127](b|0,c|0,d|0,e|0)}function oG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ba(0)}function pG(a,b){a=a|0;b=+b;ba(1)}function qG(a){a=a|0;ba(2)}function rG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;ba(3)}function sG(a,b){a=a|0;b=b|0;ba(4)}function tG(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ba(5);return 0}function uG(a){a=a|0;ba(6);return 0}function vG(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ba(7)}function wG(a,b,c,d,e,f){a=a|0;b=+b;c=+c;d=d|0;e=e|0;f=f|0;ba(8)}function xG(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;ba(9)}function yG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(10);return 0}function zG(a,b,c){a=a|0;b=+b;c=c|0;ba(11)}function AG(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;ba(12);return 0.0}function BG(a,b,c,d,e,f,g,h,i,j,k){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=+f;g=+g;h=+h;i=i|0;j=j|0;k=+k;ba(13)}function CG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ba(14);return 0.0}function DG(a,b,c){a=a|0;b=b|0;c=c|0;ba(15);return 0}function EG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ba(16)}function FG(a,b,c){a=a|0;b=b|0;c=+c;ba(17);return 0}function GG(a){a=a|0;ba(18);return 0.0}function HG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ba(19);return 0}function IG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;ba(20);return 0.0}function JG(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ba(21)}function KG(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ba(22)}function LG(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;ba(23)}function MG(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ba(24)}function NG(a,b){a=a|0;b=b|0;ba(25);return 0}function OG(a,b,c){a=a|0;b=b|0;c=c|0;ba(26);return 0.0}function PG(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;ba(27);return 0.0}function QG(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;ba(28)}function RG(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;ba(29);return 0.0}function SG(a,b){a=a|0;b=+b;ba(30);return 0.0}function TG(a,b,c,d,e,f,g,h,i,j,k,l){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;f=+f;g=+g;h=+h;i=+i;j=j|0;k=+k;l=l|0;ba(31)}function UG(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ba(32);return 0.0}function VG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(33);return 0.0}function WG(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;ba(34);return 0}function XG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;ba(35)}function YG(a,b,c){a=a|0;b=b|0;c=c|0;ba(36)}function ZG(){ba(37)}function _G(){Hb()}function $G(a,b,c){a=a|0;b=b|0;c=+c;ba(38)}function aH(a,b,c,d){a=a|0;b=+b;c=c|0;d=+d;ba(39);return 0}function bH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(40)}
  
  
  
  
  // EMSCRIPTEN_END_FUNCS
  var Jb=[oG,ds,_w,ky,iz,Az,zB,EB,xC,CC,FC,LC,VC,fD,oD,HD,$E,_E,XE,oG,oG,oG,oG,oG,oG,oG,oG,oG,oG,oG,oG,oG];var Kb=[pG,qp,pp,bp,Vo,Po,Bp,ar,br,Ss,ot,Kt,Kv,Zv,lw,Hx,Hp,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG,pG];var Lb=[qG,Un,Vn,Wn,Zn,_n,eo,fo,jo,ko,oo,po,so,to,Ho,Io,zo,Oo,No,Du,Eu,Qo,Fu,To,Ro,mp,So,op,Np,Qp,Rp,gq,hq,Zp,dq,sq,tq,mq,xq,wq,Hq,yq,Mq,Tq,Uq,Oq,Zq,Yq,gr,hr,Xq,ir,ur,tr,Lr,Ur,Vr,$r,as,ms,ts,us,vs,ws,Os,Ps,ht,gt,st,tt,vt,wt,yt,zt,Et,Ft,Nt,Ot,Qt,Rt,Wt,Vt,cu,ku,Bu,Au,Uu,Tu,Zu,Yu,av,Ru,cv,Pu,ev,Nu,gv,iv,jv,mv,nv,pv,qv,uv,vv,tv,yv,Ev,Fv,Hv,Iv,Iu,Nv,Qv,Pv,Sv,fw,gw,ow,pw,sw,tw,zw,Aw,yw,Bw,Tw,Uw,ox,px,cx,rx,Cx,Dx,Mx,Nx,Qx,Rx,$x,_x,ry,jy,sy,hy,uy,cy,wy,By,Ay,Gy,Hy,Jy,Ky,My,Ny,Py,Qy,Sy,Ty,Vy,Wy,Yy,Zy,$y,az,cz,dz,fz,gz,kz,lz,oz,nz,sz,rz,xz,yz,Lu,sv,Bz,Cz,Ut,mu,Gz,Hz,Iz,Jz,Oz,Nz,Sz,Tz,Vz,Wz,$z,_z,qA,rA,tA,uA,zA,yA,MA,LA,XA,YA,WA,ZA,oB,nB,np,Dp,yB,xB,DB,CB,IB,HB,SB,TB,ZB,_B,fC,eC,mC,oC,qC,rC,yC,zC,BC,AC,GC,HC,KC,JC,NC,QC,TC,SC,WC,YC,aD,$C,dD,cD,hD,iD,lD,kD,nD,mD,pD,tD,wD,xD,vD,BD,GD,FD,LD,KD,YD,XD,gE,fE,FE,EE,JE,ME,KE,LE,NE,OE,DE,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG,qG];var Mb=[rG];var Nb=[sG,lo,mo,wo,yo,xp,Zo,wp,dp,ep,fp,Wo,Xo,$o,_o,rp,gp,hp,ip,jp,kp,Ap,_p,$p,nq,oq,Jq,Aq,Cq,Dq,Eq,Kq,Pq,Qq,cr,jr,sr,Qr,Rr,hs,ls,Gs,Ks,Ls,Qs,Gp,yu,jt,lt,mt,Ht,Jt,Zt,Yt,eu,Gu,Wu,Av,Lv,Vv,Rv,ew,kw,rw,vw,Fw,mx,Ex,Gx,my,qy,ty,vy,yy,mz,qu,RA,SA,nA,pA,hA,Xw,qB,BB,GB,MB,$B,aC,XB,YB,hC,EC,PC,RC,UC,_C,bD,rD,JD,mE,nE,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG,sG];var Ob=[tG,zz,Ez,tG];var Pb=[uG,Ec,Jo,yp,sp,tp,zp,iq,uq,Gq,Iq,Vq,qr,Or,Wr,is,js,As,Bs,Cs,Es,Js,Ep,Rs,Jp,Xs,Zs,_s,bt,iC,nt,qt,It,Lt,Lp,Pt,St,fu,hu,iu,ju,Xv,Yv,$v,jw,mw,qw,uw,Vw,Ww,Kw,Lw,Ow,nx,qx,fx,gx,jx,Fx,Ix,Ox,Sx,ny,oy,Dy,Ey,Fy,su,Qz,jA,kA,lA,mA,oA,aB,dB,fB,gB,jB,Fp,NB,OB,PB,bC,jE,cC,nC,zu,aE,GE,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG,uG];var Qb=[vG,Eo,eq,qq,Rq,Sr,vG,vG];var Rb=[wG];var Sb=[xG];var Tb=[yG,ao,dr,ys,_t,Iy,Ly,Oy,Ry,Uy,Xy,_y,bz,ez,hz,QA,Rz,fA,sD,yG,yG,yG,yG,yG,yG,yG,yG,yG,yG,yG,yG,yG];var Ub=[zG,Ns,kC,Dt,Uv,iw,DA,vx,$A,wB,LB,zG,zG,zG,zG,zG];var Vb=[AG,vo];var Wb=[BG];var Xb=[CG,jz,AB,FB,DC,OC,XC,gD,qD,ID,CG,CG,CG,CG,CG,CG];var Yb=[DG,Zr,$n,Ko,jq,vq,Wq,rr,Xr,xs,Is,Kp,kt,Mt,Xt,au,$t,Wv,nw,Rw,Jx,Cy,pu,TA,iA,dA,QB,eE,xu,_D,$D,PE];var Zb=[EG,Sp,fs,fy,cF,bF,aF,EG];var _b=[FG,dt,Qw,lx,lB,FG,FG,FG];var $b=[GG,vu,Ts,pt,_v,Lx,Px,Tx,Ip,GG,GG,GG,GG,GG,GG,GG];var ac=[HG,xw,wz,RB];var bc=[IG,ov,rv,IG];var cc=[JG];var dc=[KG,Sw];var ec=[LG,Hr];var fc=[MG,hE,iE,MG];var gc=[NG,go,qo,uo,up,vp,Op,or,AA,gu,du,lu,fv,hv,kv,wv,Cv,Dv,ru,sA,vA,NG,NG,NG,NG,NG,NG,NG,NG,NG,NG,NG];var hc=[OG,ho,ro,Fo,Pp,fq,rq,Nq,Sq,Tr,lv,xv,OG,OG,OG,OG];var ic=[PG,Kr,Gr,PG];var jc=[QG,Xn];var kc=[RG,Fr,Ir,RG];var lc=[SG,uu];var mc=[TG];var nc=[UG,Gv,Jv,UG];var oc=[VG,Jr];var pc=[WG,bs,ay,WG];var qc=[XG,Yn,Ao,dv,Ew,Dz,Mz,uD,AD,ED,XG,XG,XG,XG,XG,XG];var rc=[YG,bo,Go,cp,Mr,Nr,cs,ks,zs,Ds,Fs,Hs,tu,Us,Vs,Ys,at,et,lC,rt,ut,xt,At,Zw,Bt,Mp,nu,ou,zv,Mv,dw,bw,Cw,Dw,Jw,Hw,Nw,ex,bx,ix,Kx,yx,wx,xx,dy,py,xy,pz,tz,Kz,Lz,cA,aA,bA,gA,BA,bB,eB,iB,pB,uB,sB,kE,lE,ZC,yD,zD,CD,DD,Tt,ax,$w,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG,YG];var sc=[ZG,_G,BE,CE];var tc=[$G,Lq,Bq,Fq,er,Bv,$G,$G];var uc=[aH,Uo];var vc=[bH,Su,Mu,Yo,ap,fr,Er,es,gs,Ms,Ws,Yw,$s,ct,gC,it,Gt,Ct,bu,Cu,_u,$u,bv,VA,UA,Tv,hw,cw,FA,Iw,Mw,Pw,dx,hx,kx,sx,ux,zx,Bx,Ax,ey,iy,qz,uz,Uz,Xz,CA,_A,cB,hB,kB,mB,vB,tB,JB,KB,dE,jC,pC,sC,eD,jD,RE,SE,UE,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH,bH];return{_emscripten_bind_btCylinderShape___destroy___0:Pn,_strlen:kF,_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1:ed,_emscripten_bind_btCollisionObject_isActive_0:Ue,_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1:xh,_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4:ef,_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1:Hl,_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0:ti,_emscripten_bind_btQuaternion_setX_1:Yi,_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0:bd,_emscripten_bind_btQuaternion_setZ_1:_i,_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0:em,_emscripten_bind_btKinematicCharacterController_setMaxSlope_1:pk,_emscripten_bind_btQuadWord_z_0:Fn,_emscripten_bind_btTransform_setIdentity_0:kn,_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0:vj,_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0:pj,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0:$d,_emscripten_bind_btCollisionDispatcher___destroy___0:mh,_emscripten_bind_btRigidBody_applyCentralImpulse_1:zm,_emscripten_bind_btDefaultMotionState_getWorldTransform_1:ai,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1:of,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3:qf,_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2:pf,_emscripten_bind_btVector3_op_mul_1:Mk,_emscripten_bind_btDynamicsWorld_rayTest_3:Ei,_emscripten_bind_btRaycastVehicle_updateWheelTransform_2:Tl,_emscripten_bind_btQuadWord_x_0:Dn,_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0:gm,_emscripten_bind_btCollisionObject_isKinematicObject_0:Ve,_emscripten_bind_ConvexResultCallback___destroy___0:Pf,_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1:Nh,_emscripten_bind_btRigidBody_getCenterOfMassTransform_0:nm,_emscripten_bind_btGhostObject_isKinematicObject_0:yl,_emscripten_bind_btCapsuleShape___destroy___0:vd,_emscripten_bind_btCollisionObject_activate_1:Te,_emscripten_bind_btCollisionObject_activate_0:Se,_emscripten_bind_btKinematicCharacterController_setUpAxis_1:ck,_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1:cd,_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1:jh,_emscripten_bind_btVector3_setX_1:Ik,_emscripten_bind_btCollisionConfiguration___destroy___0:wd,_emscripten_bind_btQuaternion_btQuaternion_4:Si,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1:De,_emscripten_bind_btManifoldPoint_set_m_localPointB_1:Be,_emscripten_bind_btVector3_setZ_1:Kk,_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0:Hj,_emscripten_bind_btQuaternion_setValue_4:Ti,_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1:ad,_emscripten_bind_LocalShapeInfo___destroy___0:Nl,_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0:Jj,_emscripten_bind_btQuadWord_setY_1:In,_emscripten_bind_btRigidBody_isKinematicObject_0:Qm,_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1:ge,_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0:ci,_emscripten_bind_btConeTwistConstraint_setDamping_1:ng,_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0:Cd,_emscripten_bind_btCollisionWorld___destroy___0:Cn,_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0:ij,_emscripten_bind_btBoxShape_btBoxShape_1:fh,_emscripten_bind_btPersistentManifold_getBody1_0:bh,_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1:Ai,_emscripten_bind_btKinematicCharacterController_setGravity_1:nk,_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1:ml,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5:Ke,_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3:Je,_emscripten_bind_LocalShapeInfo_get_m_shapePart_0:Jl,_emscripten_bind_btWheelInfo_get_m_rollInfluence_0:tj,_emscripten_bind_btVector4_setValue_4:Sj,_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1:Pc,_emscripten_bind_btDynamicsWorld_getDispatchInfo_0:Gi,_emscripten_bind_btVector3_length_0:Ek,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2:Ef,_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1:Df,_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1:Ph,_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1:lj,_emscripten_bind_btPairCachingGhostObject___destroy___0:Wd,_emscripten_bind_btPairCachingGhostObject_activate_0:Hd,_emscripten_bind_btPairCachingGhostObject_activate_1:Id,_emscripten_bind_btPairCachingGhostObject_forceActivationState_1:Gd,_emscripten_bind_btDefaultMotionState___destroy___0:ei,_emscripten_bind_btDispatcherInfo_get_m_stepCount_0:Zc,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1:ae,_emscripten_bind_btQuadWord_setW_1:Kn,_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0:be,_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2:Oi,_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0:Fj,_emscripten_bind_btRigidBody_setLinearFactor_1:sm,_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1:od,_emscripten_bind_btRaycastVehicle_setSteeringValue_2:Rl,_emscripten_bind_btPoint2PointConstraint___destroy___0:Zf,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2:mf,_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1:lf,_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1:ke,_malloc:fF,_emscripten_bind_btDispatcherInfo_get_m_useEpa_0:jd,_emscripten_bind_btTransform_btTransform_2:jn,_emscripten_bind_btTransform_btTransform_0:hn,_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1:yj,_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1:id,_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3:Zl,_emscripten_bind_btCollisionObject_setActivationState_1:Qe,_emscripten_bind_btPersistentManifold___destroy___0:eh,_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0:ll,_emscripten_bind_btCylinderShapeZ___destroy___0:gn,_emscripten_bind_btMatrix3x3___destroy___0:Ic,_emscripten_bind_ConvexResultCallback_hasHit_0:If,_emscripten_bind_btCollisionShape_calculateLocalInertia_2:el,_emscripten_bind_btCollisionWorld_convexSweepTest_5:An,_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1:ui,_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2:Qi,_emscripten_bind_btConstraintSetting_set_m_damping_1:kl,_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1:Kj,_emscripten_bind_btRigidBody_setCcdMotionThreshold_1:Ym,_emscripten_bind_btRigidBody_applyForce_2:um,_emscripten_bind_btConeShapeZ_calculateLocalInertia_2:Jg,_emscripten_bind_btConstraintSetting_set_m_tau_1:il,_emscripten_bind_btConvexHullShape_calculateLocalInertia_2:Zg,_emscripten_bind_btSphereShape_calculateLocalInertia_2:Rk,_emscripten_bind_btPoint2PointConstraint_get_m_setting_0:Xf,_emscripten_bind_LocalConvexResult_LocalConvexResult_5:$l,_emscripten_bind_btGhostObject_setFriction_1:Al,_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0:Nd,_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1:Zm,_emscripten_bind_btRigidBody_setFriction_1:Sm,_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1:hm,_emscripten_bind_btGhostObject_setWorldTransform_1:El,_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1:kf,_emscripten_bind_btConvexHullShape___destroy___0:_g,_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0:yf,_emscripten_bind_btVector4_setX_1:Xj,_emscripten_bind_btKinematicCharacterController_jump_0:mk,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1:qg,_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1:Ff,_emscripten_bind_btRigidBody_upcast_1:Im,_emscripten_bind_btCollisionObject_getWorldTransform_0:Ye,_emscripten_bind_btVector4_setZ_1:Zj,_emscripten_bind_btQuadWord_y_0:En,___cxa_can_catch:dF,_emscripten_bind_btTransform_getBasis_0:qn,_emscripten_bind_btPairCachingGhostObject_setFriction_1:Md,_emscripten_bind_btDispatcherInfo_set_m_useEpa_1:kd,_emscripten_bind_btCollisionDispatcher_getNumManifolds_0:kh,_emscripten_bind_btVehicleRaycaster___destroy___0:Ok,_emscripten_bind_ClosestRayResultCallback___destroy___0:Bi,_emscripten_bind_btQuadWord_w_0:Gn,_emscripten_bind_btCompoundShape___destroy___0:Fh,_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2:Qc,_emscripten_bind_btGhostObject_btGhostObject_0:ol,_emscripten_bind_btConeShape_btConeShape_2:vg,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1:ue,_emscripten_bind_btManifoldPoint_set_m_localPointA_1:ze,_emscripten_bind_btCollisionObject_setCollisionShape_1:af,_emscripten_bind_btWheelInfo___destroy___0:Lj,_emscripten_bind_btTransform_setRotation_1:nn,_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0:Ud,_emscripten_bind_btPoint2PointConstraint_enableFeedback_1:Wf,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1:wi,_emscripten_bind_btAxisSweep3_btAxisSweep3_2:xd,_emscripten_bind_btAxisSweep3_btAxisSweep3_3:yd,_emscripten_bind_btBoxShape_calculateLocalInertia_2:hh,_emscripten_bind_btVector3_setY_1:Jk,_emscripten_bind_btAxisSweep3_btAxisSweep3_4:zd,_emscripten_bind_btAxisSweep3_btAxisSweep3_5:Ad,_emscripten_bind_btQuadWord_setX_1:Hn,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0:pe,_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1:ph,_emscripten_bind_btOverlappingPairCache___destroy___0:Bk,_emscripten_bind_btConstraintSetting___destroy___0:nl,_emscripten_bind_RayResultCallback___destroy___0:oj,_emscripten_bind_btPersistentManifold_getBody0_0:ah,_emscripten_bind_btConeShapeX_btConeShapeX_2:Lg,_emscripten_bind_btConeTwistConstraint_enableFeedback_1:tg,_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1:cj,_emscripten_bind_btRigidBody_applyTorque_1:tm,_emscripten_bind_btSliderConstraint_setUpperLinLimit_1:eg,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2:jg,_emscripten_bind_btConcaveShape___destroy___0:Oj,_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4:kg,_emscripten_bind_btQuaternion_x_0:Ui,_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1:fm,_emscripten_bind_btConcaveShape_setLocalScaling_1:Mj,_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0:uf,_emscripten_bind_btConeShapeX_setLocalScaling_1:Mg,_emscripten_bind_btQuaternion_z_0:Wi,_emscripten_bind_btConvexHullShape_btConvexHullShape_0:Vg,_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1:Gj,_emscripten_bind_btConstraintSetting_get_m_damping_0:jl,_emscripten_bind_btGhostObject___destroy___0:Il,_emscripten_bind_btGhostObject_setContactProcessingThreshold_1:sl,_emscripten_bind_btRigidBody_applyCentralForce_1:vm,_emscripten_bind_btQuaternion___destroy___0:aj,_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1:lh,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2:$h,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0:Xh,_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1:_h,_emscripten_bind_btKinematicCharacterController_canJump_0:lk,_emscripten_bind_btRigidBody_isActive_0:Pm,_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3:Pl,_emscripten_bind_btMotionState_setWorldTransform_1:$f,_emscripten_bind_btCylinderShape_setLocalScaling_1:Nn,_emscripten_bind_btCollisionWorld_rayTest_3:tn,_emscripten_bind_btCompoundShape_calculateLocalInertia_2:Eh,_emscripten_bind_btCollisionWorld_getDispatchInfo_0:vn,_emscripten_bind_btRigidBody_setCollisionShape_1:Xm,_emscripten_bind_btConeShapeX___destroy___0:Og,_emscripten_bind_btCollisionObject_getCollisionFlags_0:Ze,_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1:gd,_emscripten_bind_btConeTwistConstraint_enableMotor_1:og,_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1:Aj,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4:bk,_emscripten_bind_btPairCachingGhostObject_setRestitution_1:Ld,_emscripten_bind_btBroadphaseInterface___destroy___0:Ne,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1:oe,_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1:Pe,_emscripten_bind_btPersistentManifold_getNumContacts_0:ch,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0:te,_emscripten_bind_LocalConvexResult___destroy___0:km,_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0:Wc,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1:qe,_emscripten_bind_btCollisionWorld_addCollisionObject_3:yn,_emscripten_bind_btRigidBody_getCollisionFlags_0:Um,_emscripten_bind_btCollisionShape_setLocalScaling_1:dl,_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0:Uh,_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0:am,_emscripten_bind_btMatrix3x3_setEulerZYX_3:Fc,_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0:pd,_emscripten_bind_btConvexHullShape_setLocalScaling_1:Yg,_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0:kj,_emscripten_bind_btCollisionWorld_getDispatcher_0:sn,_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1:jj,_emscripten_bind_btTriangleMesh_btTriangleMesh_1:Qg,_i64Subtract:iF,_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1:Sl,_emscripten_bind_btRigidBody_setDamping_2:qm,_emscripten_bind_btDynamicsWorld_getDispatcher_0:Di,_emscripten_bind_btGhostObject_setCollisionFlags_1:Dl,_emscripten_bind_btMatrix3x3_getRotation_1:Gc,_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1:pg,_emscripten_bind_btCylinderShapeX_setLocalScaling_1:an,_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0:Sc,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0:le,_emscripten_bind_btCompoundShape_setLocalScaling_1:Dh,_emscripten_bind_btOverlappingPairCallback___destroy___0:lm,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0:Ce,_emscripten_bind_btVector4_setY_1:Yj,_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1:Td,_emscripten_bind_btRigidBody_setContactProcessingThreshold_1:Km,_emscripten_bind_btRigidBody_getLinearVelocity_0:Cm,_emscripten_bind_btRigidBody_applyImpulse_2:xm,_emscripten_bind_btConcaveShape_calculateLocalInertia_2:Nj,_emscripten_bind_btRigidBody_setWorldTransform_1:Wm,_emscripten_bind_btRigidBody_setAngularVelocity_1:Fm,_emscripten_bind_btConvexShape_setLocalScaling_1:zg,_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2:gi,_free:gF,_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1:Ed,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0:xi,_emscripten_bind_RayResultCallback_hasHit_0:hj,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0:re,_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0:Kh,_emscripten_bind_btWheelInfo_get_m_frictionSlip_0:rj,_emscripten_bind_btConeShapeZ_setLocalScaling_1:Ig,_emscripten_bind_btPairCachingGhostObject_setActivationState_1:Fd,_emscripten_bind_btConvexTriangleMeshShape___destroy___0:Hf,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1:vh,_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1:dn,_emscripten_bind_btRigidBody_getAngularVelocity_0:Dm,_emscripten_bind_btCompoundShape_btCompoundShape_0:Ah,_emscripten_bind_btCompoundShape_btCompoundShape_1:Bh,_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1:Ak,_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2:vk,_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0:dd,_emscripten_bind_btRigidBody_updateInertiaTensor_0:Bm,_emscripten_bind_btTransform_setOrigin_1:mn,_emscripten_bind_ClosestRayResultCallback_hasHit_0:mi,_emscripten_bind_btCompoundShape_addChildShape_2:Ch,_emscripten_bind_btDispatcher___destroy___0:ki,_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0:qh,_emscripten_bind_btDiscreteDynamicsWorld___destroy___0:Cf,_emscripten_bind_btConvexShape___destroy___0:Bg,_memmove:nF,_emscripten_bind_btCapsuleShapeX_setLocalScaling_1:Pi,_emscripten_bind_btCollisionObject_setRestitution_1:We,_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0:zj,_emscripten_bind_LocalConvexResult_get_m_hitFraction_0:im,_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0:hd,_emscripten_bind_btQuaternion_w_0:Xi,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0:Jf,_emscripten_bind_btTransform_getRotation_0:pn,_emscripten_bind_btHingeConstraint_btHingeConstraint_6:Zk,_emscripten_bind_btHingeConstraint_btHingeConstraint_7:_k,_emscripten_bind_btHingeConstraint_btHingeConstraint_4:Xk,_emscripten_bind_btHingeConstraint_btHingeConstraint_5:Yk,_emscripten_bind_btHingeConstraint_btHingeConstraint_2:Vk,_emscripten_bind_btHingeConstraint_btHingeConstraint_3:Wk,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1:se,_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0:Mh,_emscripten_bind_btTypedConstraint___destroy___0:Tn,_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1:$m,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3:jf,_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1:hf,_emscripten_bind_btVector3_z_0:Hk,_emscripten_bind_btSphereShape_btSphereShape_1:Pk,_emscripten_bind_btQuaternion_y_0:Vi,_emscripten_bind_btCollisionWorld_addCollisionObject_1:wn,_emscripten_bind_btCollisionWorld_addCollisionObject_2:xn,_emscripten_bind_btRigidBody_setRestitution_1:Rm,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1:Rh,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0:Qh,_emscripten_bind_btRigidBody_getMotionState_0:Gm,_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1:fj,_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7:Kc,_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0:Vc,_emscripten_bind_btActionInterface___destroy___0:zk,_emscripten_bind_btDefaultMotionState_setWorldTransform_1:bi,_emscripten_bind_btDefaultVehicleRaycaster___destroy___0:gj,_emscripten_bind_RayResultCallback_get_m_collisionObject_0:mj,_emscripten_bind_btPoint2PointConstraint_getPivotInA_0:Uf,_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0:Ih,_emscripten_bind_btCylinderShape_calculateLocalInertia_2:On,_emscripten_bind_btGhostObject_setRestitution_1:zl,_emscripten_bind_btDynamicsWorld_addCollisionObject_1:Hi,_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0:Sh,_emscripten_bind_btDynamicsWorld_addCollisionObject_3:Ji,_emscripten_bind_btDynamicsWorld_addCollisionObject_2:Ii,_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0:rf,_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1:sk,_emscripten_bind_btVector4_op_mul_1:_j,_emscripten_bind_btCylinderShape_btCylinderShape_1:Mn,_emscripten_bind_btVector3___destroy___0:Nk,_emscripten_bind_btRigidBody_setAngularFactor_1:Hm,_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2:fn,_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1:Ml,_emscripten_bind_btMotionState_getWorldTransform_1:_f,_emscripten_bind_btDynamicsWorld_getBroadphase_0:Ki,_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1:qd,_emscripten_bind_btVector3_x_0:Fk,___cxa_is_pointer_type:eF,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3:Xd,_emscripten_bind_btCollisionObject_getCollisionShape_0:Oe,_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4:Yd,_emscripten_bind_btManifoldPoint___destroy___0:Ie,_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1:ee,_emscripten_bind_btVector4_length_0:Tj,_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1:di,_emscripten_bind_btCylinderShapeZ_setLocalScaling_1:en,_emscripten_bind_ClosestConvexResultCallback___destroy___0:Wh,_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0:Uk,_emscripten_bind_btCollisionObject_setFriction_1:Xe,_emscripten_bind_btDefaultCollisionConfiguration___destroy___0:Eg,_emscripten_bind_btRigidBody_setMassProps_2:rm,_emscripten_bind_btVector3_setValue_3:Lk,_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1:Sd,_emscripten_bind_btGhostObject_getCollisionFlags_0:Cl,_emscripten_bind_btCapsuleShapeX___destroy___0:Ri,_emscripten_bind_btHingeConstraint_setLimit_4:$k,_emscripten_bind_btHingeConstraint_setLimit_5:al,_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1:Ij,_emscripten_bind_btConeShape_setLocalScaling_1:wg,_emscripten_bind_btGhostObject_getNumOverlappingObjects_0:pl,_emscripten_bind_btGhostObject_getCollisionShape_0:rl,_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1:ce,_emscripten_bind_btPersistentManifold_getContactPoint_1:dh,_emscripten_bind_btConeShapeX_calculateLocalInertia_2:Ng,_emscripten_bind_btGhostObject_activate_0:vl,_emscripten_bind_btGhostObject_activate_1:wl,_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0:xe,_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0:Ee,_emscripten_bind_btConeShapeZ_btConeShapeZ_2:Hg,_emscripten_bind_btSphereShape___destroy___0:Sk,_emscripten_bind_btSliderConstraint_setUpperAngLimit_1:gg,_emscripten_bind_btDynamicsWorld_contactPairTest_3:Mi,_emscripten_bind_btCollisionWorld_getPairCache_0:un,_emscripten_bind_btConeTwistConstraint_setMotorTarget_1:rg,_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1:Jh,_emscripten_bind_btWheelInfo_set_m_rollInfluence_1:uj,_emscripten_bind_btGhostObject_setCcdMotionThreshold_1:Gl,_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0:Tk,_emscripten_bind_btGhostObject_forceActivationState_1:ul,_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0:Jc,_emscripten_bind_VoidPtr___destroy___0:Uc,_emscripten_bind_btSliderConstraint_setLowerAngLimit_1:fg,_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2:Gh,_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0:ni,_emscripten_bind_btRaycastVehicle_getRigidBody_0:Wl,_emscripten_bind_btWheelInfo_get_m_steering_0:Dj,_emscripten_bind_btConstraintSetting_get_m_tau_0:hl,_emscripten_bind_btSliderConstraint___destroy___0:ig,_emscripten_bind_btCollisionShape___destroy___0:fl,_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0:Nf,_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0:$c,_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0:de,_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1:Rd,_emscripten_bind_btKinematicCharacterController_warp_1:fk,_emscripten_bind_btAxisSweep3___destroy___0:Bd,_emscripten_bind_btTriangleMesh___destroy___0:Ug,_emscripten_bind_btKinematicCharacterController_preStep_1:gk,_emscripten_bind_btRaycastVehicle_applyEngineForce_2:Ql,_emscripten_bind_btRaycastVehicle_setBrake_2:Yl,_emscripten_bind_ConcreteContactResultCallback___destroy___0:Lc,_emscripten_bind_btCollisionObject___destroy___0:df,_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1:th,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1:ie,_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1:sg,_emscripten_bind_btDispatcherInfo_set_m_timeStep_1:Yc,_emscripten_bind_btVector3_btVector3_3:Dk,_emscripten_bind_btVector3_btVector3_0:Ck,_emscripten_bind_btBoxShape___destroy___0:ih,_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0:gf,_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0:Oh,_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0:sh,_emscripten_bind_btConeTwistConstraint___destroy___0:ug,_emscripten_bind_btQuadWord___destroy___0:Ln,_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1:oi,_emscripten_bind_btRigidBody_setCenterOfMassTransform_1:om,_emscripten_bind_btConstraintSolver___destroy___0:Ol,_emscripten_bind_btDbvtBroadphase___destroy___0:Tc,_emscripten_bind_btCapsuleShape_btCapsuleShape_2:sd,_emscripten_bind_btTypedConstraint_enableFeedback_1:Sn,_emscripten_bind_btQuadWord_setZ_1:Jn,_emscripten_bind_btCapsuleShape_setLocalScaling_1:td,_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0:ne,_emscripten_bind_btTriangleMeshShape_setLocalScaling_1:fi,_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1:Of,_emscripten_bind_btPersistentManifold_btPersistentManifold_0:$g,_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0:Lf,_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2:li,_emscripten_bind_btVector4___destroy___0:$j,_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0:Kd,_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1:yi,_i64Add:lF,_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2:xk,_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1:zh,_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1:bf,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0:Cg,_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1:Dg,_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3:ak,_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0:je,_emscripten_bind_btPoint2PointConstraint_getPivotInB_0:Vf,_emscripten_bind_btKinematicCharacterController_playerStep_2:hk,_emscripten_bind_btDispatcherInfo___destroy___0:rd,_emscripten_bind_btStaticPlaneShape_setLocalScaling_1:wk,_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2:Gf,_emscripten_bind_ContactResultCallback_addSingleResult_7:Fg,_emscripten_bind_btGhostObject_getWorldTransform_0:Bl,_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0:tf,_emscripten_bind_LocalConvexResult_set_m_hitFraction_1:jm,_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2:dj,_emscripten_bind_btDispatcherInfo_get_m_timeStep_0:Xc,_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1:rh,_emscripten_bind_btDynamicsWorld___destroy___0:Ni,_emscripten_bind_btMotionState___destroy___0:ag,_emscripten_bind_btCollisionObject_setCollisionFlags_1:_e,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1:vf,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2:wf,_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3:xf,_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1:qj,_emscripten_bind_btRaycastVehicle_getNumWheels_0:Vl,_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1:ji,_emscripten_bind_btWheelInfo_set_m_steering_1:Ej,_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1:Qd,_emscripten_bind_btConeTwistConstraint_setAngularOnly_1:mg,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4:Rf,_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2:Qf,_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1:jk,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1:Kf,_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1:Vd,_emscripten_bind_btRigidBodyConstructionInfo___destroy___0:ve,_emscripten_bind_btRigidBody_getWorldTransform_0:Tm,_emscripten_bind_btPoint2PointConstraint_setPivotA_1:Sf,_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1:Lh,_memcpy:mF,_emscripten_bind_btCapsuleShape_calculateLocalInertia_2:ud,_emscripten_bind_btVector3_y_0:Gk,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0:yh,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2:Mc,_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3:Oc,_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0:Ll,_emscripten_bind_btGhostObject_setCollisionShape_1:Fl,_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1:md,_emscripten_bind_btQuaternion_setW_1:$i,_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1:ff,_emscripten_bind_btGhostObject_isActive_0:xl,_emscripten_bind_btVector4_z_0:Wj,_emscripten_bind_btCollisionObject_forceActivationState_1:Re,_emscripten_bind_btKinematicCharacterController_onGround_0:tk,_emscripten_bind_btRaycastVehicle_getWheelInfo_1:Xl,_emscripten_bind_btConeTwistConstraint_setLimit_2:lg,_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1:Th,_emscripten_bind_btRigidBody___destroy___0:_m,_emscripten_bind_btStridingMeshInterface___destroy___0:Me,_emscripten_bind_btRigidBody_setSleepingThresholds_2:pm,_emscripten_bind_btCollisionObject_setWorldTransform_1:$e,_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0:cm,_emscripten_bind_btManifoldPoint_get_m_localPointA_0:ye,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0:Zd,_emscripten_bind_btCollisionWorld_getBroadphase_0:zn,_emscripten_bind_btDispatcher_getNumManifolds_0:ii,_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0:he,_emscripten_bind_btRigidBody_activate_1:Om,_emscripten_bind_btRigidBody_activate_0:Nm,_emscripten_bind_btRaycastVehicle___destroy___0:_l,_emscripten_bind_btGhostObject_setActivationState_1:tl,_emscripten_bind_btCollisionWorld_contactPairTest_3:Bn,_emscripten_bind_btCylinderShapeX___destroy___0:cn,_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0:we,_emscripten_bind_ContactResultCallback___destroy___0:Gg,_emscripten_bind_btDispatcherInfo_set_m_stepCount_1:_c,_emscripten_bind_btVector4_x_0:Uj,_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1:Pd,_emscripten_bind_btKinematicCharacterController_getGhostObject_0:rk,_emscripten_bind_btRigidBody_btRigidBody_1:mm,_emscripten_bind_btTriangleMeshShape___destroy___0:hi,_emscripten_bind_btKinematicCharacterController_setWalkDirection_1:dk,_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0:fe,_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0:oh,_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1:He,_emscripten_bind_btKinematicCharacterController_getGravity_0:ok,_emscripten_bind_btDiscreteDynamicsWorld_addAction_1:Bf,_emscripten_bind_btQuaternion_setY_1:Zi,_emscripten_bind_btConeShape_calculateLocalInertia_2:xg,_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2:bn,_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1:Mf,_llvm_bswap_i32:oF,_emscripten_bind_btSphereShape_setLocalScaling_1:Qk,_emscripten_bind_btVector4_w_0:Rj,_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0:Ge,_emscripten_bind_btBvhTriangleMeshShape___destroy___0:Rc,_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0:pi,_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1:Vh,_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1:nf,_emscripten_bind_btVector4_y_0:Vj,_emscripten_bind_btGeneric6DofConstraint___destroy___0:Le,_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0:uh,_emscripten_bind_btConvexHullShape_addPoint_1:Wg,_emscripten_bind_btConvexHullShape_addPoint_2:Xg,_emscripten_bind_btTransform_getOrigin_0:on,_emscripten_bind_btHingeConstraint___destroy___0:cl,_emscripten_bind_btHingeConstraint_enableFeedback_1:bl,_emscripten_bind_btConvexShape_calculateLocalInertia_2:Ag,_memset:jF,_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0:ri,_emscripten_bind_btTriangleMesh_btTriangleMesh_0:Pg,_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0:Dd,_emscripten_bind_btTriangleMesh_btTriangleMesh_2:Rg,_emscripten_bind_btTransform___destroy___0:rn,_emscripten_bind_btWheelInfo_set_m_frictionSlip_1:sj,_emscripten_bind_btRigidBody_getCollisionShape_0:Jm,_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1:Fe,_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0:Bj,_emscripten_bind_btManifoldPoint_get_m_localPointB_0:Ae,_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3:Af,_emscripten_bind_btSliderConstraint_setLowerLinLimit_1:dg,_emscripten_bind_btPoint2PointConstraint_set_m_setting_1:Yf,_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1:cf,_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0:xj,_emscripten_bind_btRigidBody_setLinearVelocity_1:Em,_emscripten_bind_btVehicleTuning_btVehicleTuning_0:nh,_emscripten_bind_RayResultCallback_set_m_collisionObject_1:nj,_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1:qi,_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0:vi,_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1:Cj,_emscripten_bind_btDynamicsWorld_addAction_1:Ci,_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0:Od,_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1:_d,_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1:me,_emscripten_bind_btKinematicCharacterController_setFallSpeed_1:ik,_emscripten_bind_btRigidBody_setActivationState_1:Lm,_emscripten_bind_ClosestConvexResultCallback_hasHit_0:Hh,_emscripten_bind_btCapsuleShapeZ___destroy___0:ej,_emscripten_bind_LocalShapeInfo_set_m_shapePart_1:Kl,_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0:zi,_emscripten_bind_btTriangleMesh_addTriangle_3:Sg,_emscripten_bind_btGhostObject_getOverlappingObject_1:ql,_emscripten_bind_btTriangleMesh_addTriangle_4:Tg,_emscripten_bind_btRigidBody_applyTorqueImpulse_1:wm,_emscripten_bind_btRigidBody_setCollisionFlags_1:Vm,_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1:wj,_emscripten_bind_btConeShape___destroy___0:yg,_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2:bj,_emscripten_bind_btSliderConstraint_btSliderConstraint_5:cg,_emscripten_bind_btSliderConstraint_btSliderConstraint_3:bg,_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0:ld,_emscripten_bind_btDynamicsWorld_convexSweepTest_5:Li,_emscripten_bind_btRigidBody_forceActivationState_1:Mm,_emscripten_bind_btPoint2PointConstraint_setPivotB_1:Tf,_emscripten_bind_btGhostPairCallback___destroy___0:Rn,_emscripten_bind_btKinematicCharacterController_getMaxSlope_0:qk,_emscripten_bind_btSliderConstraint_enableFeedback_1:hg,_emscripten_bind_btRaycastVehicle_addWheel_7:Ul,_emscripten_bind_btPairCachingGhostObject_isActive_0:Jd,_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1:dm,_emscripten_bind_btStaticPlaneShape___destroy___0:yk,_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0:nd,_emscripten_bind_btBoxShape_setLocalScaling_1:gh,_emscripten_bind_btConeShapeZ___destroy___0:Kg,_emscripten_bind_btDynamicsWorld_getPairCache_0:Fi,_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5:zf,_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2:ek,_emscripten_bind_btVector4_btVector4_0:Pj,_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0:fd,_emscripten_bind_btVector4_btVector4_4:Qj,_emscripten_bind_btKinematicCharacterController___destroy___0:uk,_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1:bm,_emscripten_bind_btConstraintSetting_btConstraintSetting_0:gl,_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3:sf,_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0:Qn,_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1:kk,_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1:si,_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0:wh,__GLOBAL__I_a:zE,runPostSets:hF,stackAlloc:wc,stackSave:xc,stackRestore:yc,setThrew:zc,setTempRet0:Cc,getTempRet0:Dc,dynCall_viiiii:BF,dynCall_vid:CF,dynCall_vi:DF,dynCall_viiidii:EF,dynCall_vii:FF,dynCall_iiiiiiiiiii:GF,dynCall_ii:HF,dynCall_viidi:IF,dynCall_viddiii:JF,dynCall_vidii:KF,dynCall_iiiii:LF,dynCall_vidi:MF,dynCall_diiiiiiii:NF,dynCall_viiiiddddiid:OF,dynCall_diiiii:PF,dynCall_iiii:QF,dynCall_viiiiii:RF,dynCall_iiid:SF,dynCall_di:TF,dynCall_iiiiiii:UF,dynCall_diiidii:VF,dynCall_viidii:WF,dynCall_viiiiiii:XF,dynCall_viiiiiiiii:YF,dynCall_viiiiiiiiii:ZF,dynCall_iii:_F,dynCall_diii:$F,dynCall_diiiiiiiiii:aG,dynCall_viiiid:bG,dynCall_diiiiiiiii:cG,dynCall_did:dG,dynCall_viiiidddddidi:eG,dynCall_diidii:fG,dynCall_diiii:gG,dynCall_iiiiiiiiii:hG,dynCall_viiid:iG,dynCall_viii:jG,dynCall_v:kG,dynCall_viid:lG,dynCall_iidid:mG,dynCall_viiii:nG}})
  
  
  // EMSCRIPTEN_END_ASM
  (Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _emscripten_bind_btCylinderShape___destroy___0=Module["_emscripten_bind_btCylinderShape___destroy___0"]=asm["_emscripten_bind_btCylinderShape___destroy___0"];var _strlen=Module["_strlen"]=asm["_strlen"];var _emscripten_bind_btDispatcherInfo_set_m_useContinuous_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1"];var _emscripten_bind_btCollisionObject_isActive_0=Module["_emscripten_bind_btCollisionObject_isActive_0"]=asm["_emscripten_bind_btCollisionObject_isActive_0"];var _emscripten_bind_btVehicleTuning_set_m_frictionSlip_1=Module["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1"];var _emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=Module["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"];var _emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0"];var _emscripten_bind_btQuaternion_setX_1=Module["_emscripten_bind_btQuaternion_setX_1"]=asm["_emscripten_bind_btQuaternion_setX_1"];var _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0=Module["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0"];var _emscripten_bind_btQuaternion_setZ_1=Module["_emscripten_bind_btQuaternion_setZ_1"]=asm["_emscripten_bind_btQuaternion_setZ_1"];var _emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0"];var _emscripten_bind_btKinematicCharacterController_setMaxSlope_1=Module["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"]=asm["_emscripten_bind_btKinematicCharacterController_setMaxSlope_1"];var _emscripten_bind_btQuadWord_z_0=Module["_emscripten_bind_btQuadWord_z_0"]=asm["_emscripten_bind_btQuadWord_z_0"];var _emscripten_bind_btTransform_setIdentity_0=Module["_emscripten_bind_btTransform_setIdentity_0"]=asm["_emscripten_bind_btTransform_setIdentity_0"];var _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0=Module["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"]=asm["_emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0"];var _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0=Module["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"]=asm["_emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0"];var _emscripten_bind_btCollisionDispatcher___destroy___0=Module["_emscripten_bind_btCollisionDispatcher___destroy___0"]=asm["_emscripten_bind_btCollisionDispatcher___destroy___0"];var _emscripten_bind_btRigidBody_applyCentralImpulse_1=Module["_emscripten_bind_btRigidBody_applyCentralImpulse_1"]=asm["_emscripten_bind_btRigidBody_applyCentralImpulse_1"];var _emscripten_bind_btDefaultMotionState_getWorldTransform_1=Module["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"]=asm["_emscripten_bind_btDefaultMotionState_getWorldTransform_1"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3"];var _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2"];var _emscripten_bind_btVector3_op_mul_1=Module["_emscripten_bind_btVector3_op_mul_1"]=asm["_emscripten_bind_btVector3_op_mul_1"];var _emscripten_bind_btDynamicsWorld_rayTest_3=Module["_emscripten_bind_btDynamicsWorld_rayTest_3"]=asm["_emscripten_bind_btDynamicsWorld_rayTest_3"];var _emscripten_bind_btRaycastVehicle_updateWheelTransform_2=Module["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"]=asm["_emscripten_bind_btRaycastVehicle_updateWheelTransform_2"];var _emscripten_bind_btQuadWord_x_0=Module["_emscripten_bind_btQuadWord_x_0"]=asm["_emscripten_bind_btQuadWord_x_0"];var _emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0"];var _emscripten_bind_btCollisionObject_isKinematicObject_0=Module["_emscripten_bind_btCollisionObject_isKinematicObject_0"]=asm["_emscripten_bind_btCollisionObject_isKinematicObject_0"];var _emscripten_bind_ConvexResultCallback___destroy___0=Module["_emscripten_bind_ConvexResultCallback___destroy___0"]=asm["_emscripten_bind_ConvexResultCallback___destroy___0"];var _emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1"];var _emscripten_bind_btRigidBody_getCenterOfMassTransform_0=Module["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"]=asm["_emscripten_bind_btRigidBody_getCenterOfMassTransform_0"];var _emscripten_bind_btGhostObject_isKinematicObject_0=Module["_emscripten_bind_btGhostObject_isKinematicObject_0"]=asm["_emscripten_bind_btGhostObject_isKinematicObject_0"];var _emscripten_bind_btCapsuleShape___destroy___0=Module["_emscripten_bind_btCapsuleShape___destroy___0"]=asm["_emscripten_bind_btCapsuleShape___destroy___0"];var _emscripten_bind_btCollisionObject_activate_1=Module["_emscripten_bind_btCollisionObject_activate_1"]=asm["_emscripten_bind_btCollisionObject_activate_1"];var _emscripten_bind_btCollisionObject_activate_0=Module["_emscripten_bind_btCollisionObject_activate_0"]=asm["_emscripten_bind_btCollisionObject_activate_0"];var _emscripten_bind_btKinematicCharacterController_setUpAxis_1=Module["_emscripten_bind_btKinematicCharacterController_setUpAxis_1"]=asm["_emscripten_bind_btKinematicCharacterController_setUpAxis_1"];var _emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1=Module["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1"];var _emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=Module["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"]=asm["_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1"];var _emscripten_bind_btVector3_setX_1=Module["_emscripten_bind_btVector3_setX_1"]=asm["_emscripten_bind_btVector3_setX_1"];var _emscripten_bind_btCollisionConfiguration___destroy___0=Module["_emscripten_bind_btCollisionConfiguration___destroy___0"]=asm["_emscripten_bind_btCollisionConfiguration___destroy___0"];var _emscripten_bind_btQuaternion_btQuaternion_4=Module["_emscripten_bind_btQuaternion_btQuaternion_4"]=asm["_emscripten_bind_btQuaternion_btQuaternion_4"];var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1"];var _emscripten_bind_btManifoldPoint_set_m_localPointB_1=Module["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_localPointB_1"];var _emscripten_bind_btVector3_setZ_1=Module["_emscripten_bind_btVector3_setZ_1"]=asm["_emscripten_bind_btVector3_setZ_1"];var _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0=Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"]=asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0"];var _emscripten_bind_btQuaternion_setValue_4=Module["_emscripten_bind_btQuaternion_setValue_4"]=asm["_emscripten_bind_btQuaternion_setValue_4"];var _emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1=Module["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1"];var _emscripten_bind_LocalShapeInfo___destroy___0=Module["_emscripten_bind_LocalShapeInfo___destroy___0"]=asm["_emscripten_bind_LocalShapeInfo___destroy___0"];var _emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0=Module["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"]=asm["_emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0"];var _emscripten_bind_btQuadWord_setY_1=Module["_emscripten_bind_btQuadWord_setY_1"]=asm["_emscripten_bind_btQuadWord_setY_1"];var _emscripten_bind_btRigidBody_isKinematicObject_0=Module["_emscripten_bind_btRigidBody_isKinematicObject_0"]=asm["_emscripten_bind_btRigidBody_isKinematicObject_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1"];var _emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0=Module["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"]=asm["_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0"];var _emscripten_bind_btConeTwistConstraint_setDamping_1=Module["_emscripten_bind_btConeTwistConstraint_setDamping_1"]=asm["_emscripten_bind_btConeTwistConstraint_setDamping_1"];var _emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=Module["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"]=asm["_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0"];var _emscripten_bind_btCollisionWorld___destroy___0=Module["_emscripten_bind_btCollisionWorld___destroy___0"]=asm["_emscripten_bind_btCollisionWorld___destroy___0"];var _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btBoxShape_btBoxShape_1=Module["_emscripten_bind_btBoxShape_btBoxShape_1"]=asm["_emscripten_bind_btBoxShape_btBoxShape_1"];var _emscripten_bind_btPersistentManifold_getBody1_0=Module["_emscripten_bind_btPersistentManifold_getBody1_0"]=asm["_emscripten_bind_btPersistentManifold_getBody1_0"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1"];var _emscripten_bind_btKinematicCharacterController_setGravity_1=Module["_emscripten_bind_btKinematicCharacterController_setGravity_1"]=asm["_emscripten_bind_btKinematicCharacterController_setGravity_1"];var _emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=Module["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1"];var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"]=asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5"];var _emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=Module["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"]=asm["_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3"];var _emscripten_bind_LocalShapeInfo_get_m_shapePart_0=Module["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"]=asm["_emscripten_bind_LocalShapeInfo_get_m_shapePart_0"];var _emscripten_bind_btWheelInfo_get_m_rollInfluence_0=Module["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"]=asm["_emscripten_bind_btWheelInfo_get_m_rollInfluence_0"];var _emscripten_bind_btVector4_setValue_4=Module["_emscripten_bind_btVector4_setValue_4"]=asm["_emscripten_bind_btVector4_setValue_4"];var _emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_btDynamicsWorld_getDispatchInfo_0=Module["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btDynamicsWorld_getDispatchInfo_0"];var _emscripten_bind_btVector3_length_0=Module["_emscripten_bind_btVector3_length_0"]=asm["_emscripten_bind_btVector3_length_0"];var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"]=asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"];var _emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=Module["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"]=asm["_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1"];var _emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1"];var _emscripten_bind_btPairCachingGhostObject___destroy___0=Module["_emscripten_bind_btPairCachingGhostObject___destroy___0"]=asm["_emscripten_bind_btPairCachingGhostObject___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_activate_0=Module["_emscripten_bind_btPairCachingGhostObject_activate_0"]=asm["_emscripten_bind_btPairCachingGhostObject_activate_0"];var _emscripten_bind_btPairCachingGhostObject_activate_1=Module["_emscripten_bind_btPairCachingGhostObject_activate_1"]=asm["_emscripten_bind_btPairCachingGhostObject_activate_1"];var _emscripten_bind_btPairCachingGhostObject_forceActivationState_1=Module["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"]=asm["_emscripten_bind_btPairCachingGhostObject_forceActivationState_1"];var _emscripten_bind_btDefaultMotionState___destroy___0=Module["_emscripten_bind_btDefaultMotionState___destroy___0"]=asm["_emscripten_bind_btDefaultMotionState___destroy___0"];var _emscripten_bind_btDispatcherInfo_get_m_stepCount_0=Module["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_stepCount_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1"];var _emscripten_bind_btQuadWord_setW_1=Module["_emscripten_bind_btQuadWord_setW_1"]=asm["_emscripten_bind_btQuadWord_setW_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0"];var _emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2=Module["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"]=asm["_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2"];var _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0=Module["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"]=asm["_emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0"];var _emscripten_bind_btRigidBody_setLinearFactor_1=Module["_emscripten_bind_btRigidBody_setLinearFactor_1"]=asm["_emscripten_bind_btRigidBody_setLinearFactor_1"];var _emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1"];var _emscripten_bind_btRaycastVehicle_setSteeringValue_2=Module["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"]=asm["_emscripten_bind_btRaycastVehicle_setSteeringValue_2"];var _emscripten_bind_btPoint2PointConstraint___destroy___0=Module["_emscripten_bind_btPoint2PointConstraint___destroy___0"]=asm["_emscripten_bind_btPoint2PointConstraint___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2"];var _emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"];var _malloc=Module["_malloc"]=asm["_malloc"];var _emscripten_bind_btDispatcherInfo_get_m_useEpa_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useEpa_0"];var _emscripten_bind_btTransform_btTransform_2=Module["_emscripten_bind_btTransform_btTransform_2"]=asm["_emscripten_bind_btTransform_btTransform_2"];var _emscripten_bind_btTransform_btTransform_0=Module["_emscripten_bind_btTransform_btTransform_0"]=asm["_emscripten_bind_btTransform_btTransform_0"];var _emscripten_bind_btWheelInfo_set_m_wheelsRadius_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1"];var _emscripten_bind_btDispatcherInfo_set_m_enableSPU_1=Module["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1"];var _emscripten_bind_btRaycastVehicle_setCoordinateSystem_3=Module["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"]=asm["_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3"];var _emscripten_bind_btCollisionObject_setActivationState_1=Module["_emscripten_bind_btCollisionObject_setActivationState_1"]=asm["_emscripten_bind_btCollisionObject_setActivationState_1"];var _emscripten_bind_btPersistentManifold___destroy___0=Module["_emscripten_bind_btPersistentManifold___destroy___0"]=asm["_emscripten_bind_btPersistentManifold___destroy___0"];var _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=Module["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_impulseClamp_0"];var _emscripten_bind_btCylinderShapeZ___destroy___0=Module["_emscripten_bind_btCylinderShapeZ___destroy___0"]=asm["_emscripten_bind_btCylinderShapeZ___destroy___0"];var _emscripten_bind_btMatrix3x3___destroy___0=Module["_emscripten_bind_btMatrix3x3___destroy___0"]=asm["_emscripten_bind_btMatrix3x3___destroy___0"];var _emscripten_bind_ConvexResultCallback_hasHit_0=Module["_emscripten_bind_ConvexResultCallback_hasHit_0"]=asm["_emscripten_bind_ConvexResultCallback_hasHit_0"];var _emscripten_bind_btCollisionShape_calculateLocalInertia_2=Module["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCollisionShape_calculateLocalInertia_2"];var _emscripten_bind_btCollisionWorld_convexSweepTest_5=Module["_emscripten_bind_btCollisionWorld_convexSweepTest_5"]=asm["_emscripten_bind_btCollisionWorld_convexSweepTest_5"];var _emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1"];var _emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2"];var _emscripten_bind_btConstraintSetting_set_m_damping_1=Module["_emscripten_bind_btConstraintSetting_set_m_damping_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_damping_1"];var _emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1=Module["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"]=asm["_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1"];var _emscripten_bind_btRigidBody_setCcdMotionThreshold_1=Module["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btRigidBody_setCcdMotionThreshold_1"];var _emscripten_bind_btRigidBody_applyForce_2=Module["_emscripten_bind_btRigidBody_applyForce_2"]=asm["_emscripten_bind_btRigidBody_applyForce_2"];var _emscripten_bind_btConeShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShapeZ_calculateLocalInertia_2"];var _emscripten_bind_btConstraintSetting_set_m_tau_1=Module["_emscripten_bind_btConstraintSetting_set_m_tau_1"]=asm["_emscripten_bind_btConstraintSetting_set_m_tau_1"];var _emscripten_bind_btConvexHullShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexHullShape_calculateLocalInertia_2"];var _emscripten_bind_btSphereShape_calculateLocalInertia_2=Module["_emscripten_bind_btSphereShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btSphereShape_calculateLocalInertia_2"];var _emscripten_bind_btPoint2PointConstraint_get_m_setting_0=Module["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"]=asm["_emscripten_bind_btPoint2PointConstraint_get_m_setting_0"];var _emscripten_bind_LocalConvexResult_LocalConvexResult_5=Module["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"]=asm["_emscripten_bind_LocalConvexResult_LocalConvexResult_5"];var _emscripten_bind_btGhostObject_setFriction_1=Module["_emscripten_bind_btGhostObject_setFriction_1"]=asm["_emscripten_bind_btGhostObject_setFriction_1"];var _emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=Module["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0"];var _emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1"];var _emscripten_bind_btRigidBody_setFriction_1=Module["_emscripten_bind_btRigidBody_setFriction_1"]=asm["_emscripten_bind_btRigidBody_setFriction_1"];var _emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1"];var _emscripten_bind_btGhostObject_setWorldTransform_1=Module["_emscripten_bind_btGhostObject_setWorldTransform_1"]=asm["_emscripten_bind_btGhostObject_setWorldTransform_1"];var _emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1"];var _emscripten_bind_btConvexHullShape___destroy___0=Module["_emscripten_bind_btConvexHullShape___destroy___0"]=asm["_emscripten_bind_btConvexHullShape___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0"];var _emscripten_bind_btVector4_setX_1=Module["_emscripten_bind_btVector4_setX_1"]=asm["_emscripten_bind_btVector4_setX_1"];var _emscripten_bind_btKinematicCharacterController_jump_0=Module["_emscripten_bind_btKinematicCharacterController_jump_0"]=asm["_emscripten_bind_btKinematicCharacterController_jump_0"];var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1"];var _emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_btRigidBody_upcast_1=Module["_emscripten_bind_btRigidBody_upcast_1"]=asm["_emscripten_bind_btRigidBody_upcast_1"];var _emscripten_bind_btCollisionObject_getWorldTransform_0=Module["_emscripten_bind_btCollisionObject_getWorldTransform_0"]=asm["_emscripten_bind_btCollisionObject_getWorldTransform_0"];var _emscripten_bind_btVector4_setZ_1=Module["_emscripten_bind_btVector4_setZ_1"]=asm["_emscripten_bind_btVector4_setZ_1"];var _emscripten_bind_btQuadWord_y_0=Module["_emscripten_bind_btQuadWord_y_0"]=asm["_emscripten_bind_btQuadWord_y_0"];var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _emscripten_bind_btTransform_getBasis_0=Module["_emscripten_bind_btTransform_getBasis_0"]=asm["_emscripten_bind_btTransform_getBasis_0"];var _emscripten_bind_btPairCachingGhostObject_setFriction_1=Module["_emscripten_bind_btPairCachingGhostObject_setFriction_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setFriction_1"];var _emscripten_bind_btDispatcherInfo_set_m_useEpa_1=Module["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_useEpa_1"];var _emscripten_bind_btCollisionDispatcher_getNumManifolds_0=Module["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"]=asm["_emscripten_bind_btCollisionDispatcher_getNumManifolds_0"];var _emscripten_bind_btVehicleRaycaster___destroy___0=Module["_emscripten_bind_btVehicleRaycaster___destroy___0"]=asm["_emscripten_bind_btVehicleRaycaster___destroy___0"];var _emscripten_bind_ClosestRayResultCallback___destroy___0=Module["_emscripten_bind_ClosestRayResultCallback___destroy___0"]=asm["_emscripten_bind_ClosestRayResultCallback___destroy___0"];var _emscripten_bind_btQuadWord_w_0=Module["_emscripten_bind_btQuadWord_w_0"]=asm["_emscripten_bind_btQuadWord_w_0"];var _emscripten_bind_btCompoundShape___destroy___0=Module["_emscripten_bind_btCompoundShape___destroy___0"]=asm["_emscripten_bind_btCompoundShape___destroy___0"];var _emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2"];var _emscripten_bind_btGhostObject_btGhostObject_0=Module["_emscripten_bind_btGhostObject_btGhostObject_0"]=asm["_emscripten_bind_btGhostObject_btGhostObject_0"];var _emscripten_bind_btConeShape_btConeShape_2=Module["_emscripten_bind_btConeShape_btConeShape_2"]=asm["_emscripten_bind_btConeShape_btConeShape_2"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1"];var _emscripten_bind_btManifoldPoint_set_m_localPointA_1=Module["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_localPointA_1"];var _emscripten_bind_btCollisionObject_setCollisionShape_1=Module["_emscripten_bind_btCollisionObject_setCollisionShape_1"]=asm["_emscripten_bind_btCollisionObject_setCollisionShape_1"];var _emscripten_bind_btWheelInfo___destroy___0=Module["_emscripten_bind_btWheelInfo___destroy___0"]=asm["_emscripten_bind_btWheelInfo___destroy___0"];var _emscripten_bind_btTransform_setRotation_1=Module["_emscripten_bind_btTransform_setRotation_1"]=asm["_emscripten_bind_btTransform_setRotation_1"];var _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=Module["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0"];var _emscripten_bind_btPoint2PointConstraint_enableFeedback_1=Module["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"]=asm["_emscripten_bind_btPoint2PointConstraint_enableFeedback_1"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_2=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_2"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_3=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_3"];var _emscripten_bind_btBoxShape_calculateLocalInertia_2=Module["_emscripten_bind_btBoxShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btBoxShape_calculateLocalInertia_2"];var _emscripten_bind_btVector3_setY_1=Module["_emscripten_bind_btVector3_setY_1"]=asm["_emscripten_bind_btVector3_setY_1"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_4=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_4"];var _emscripten_bind_btAxisSweep3_btAxisSweep3_5=Module["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"]=asm["_emscripten_bind_btAxisSweep3_btAxisSweep3_5"];var _emscripten_bind_btQuadWord_setX_1=Module["_emscripten_bind_btQuadWord_setX_1"]=asm["_emscripten_bind_btQuadWord_setX_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0"];var _emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1"];var _emscripten_bind_btOverlappingPairCache___destroy___0=Module["_emscripten_bind_btOverlappingPairCache___destroy___0"]=asm["_emscripten_bind_btOverlappingPairCache___destroy___0"];var _emscripten_bind_btConstraintSetting___destroy___0=Module["_emscripten_bind_btConstraintSetting___destroy___0"]=asm["_emscripten_bind_btConstraintSetting___destroy___0"];var _emscripten_bind_RayResultCallback___destroy___0=Module["_emscripten_bind_RayResultCallback___destroy___0"]=asm["_emscripten_bind_RayResultCallback___destroy___0"];var _emscripten_bind_btPersistentManifold_getBody0_0=Module["_emscripten_bind_btPersistentManifold_getBody0_0"]=asm["_emscripten_bind_btPersistentManifold_getBody0_0"];var _emscripten_bind_btConeShapeX_btConeShapeX_2=Module["_emscripten_bind_btConeShapeX_btConeShapeX_2"]=asm["_emscripten_bind_btConeShapeX_btConeShapeX_2"];var _emscripten_bind_btConeTwistConstraint_enableFeedback_1=Module["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"]=asm["_emscripten_bind_btConeTwistConstraint_enableFeedback_1"];var _emscripten_bind_btCapsuleShapeZ_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1"];var _emscripten_bind_btRigidBody_applyTorque_1=Module["_emscripten_bind_btRigidBody_applyTorque_1"]=asm["_emscripten_bind_btRigidBody_applyTorque_1"];var _emscripten_bind_btSliderConstraint_setUpperLinLimit_1=Module["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setUpperLinLimit_1"];var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"]=asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2"];var _emscripten_bind_btConcaveShape___destroy___0=Module["_emscripten_bind_btConcaveShape___destroy___0"]=asm["_emscripten_bind_btConcaveShape___destroy___0"];var _emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=Module["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"]=asm["_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4"];var _emscripten_bind_btQuaternion_x_0=Module["_emscripten_bind_btQuaternion_x_0"]=asm["_emscripten_bind_btQuaternion_x_0"];var _emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1"];var _emscripten_bind_btConcaveShape_setLocalScaling_1=Module["_emscripten_bind_btConcaveShape_setLocalScaling_1"]=asm["_emscripten_bind_btConcaveShape_setLocalScaling_1"];var _emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0"];var _emscripten_bind_btConeShapeX_setLocalScaling_1=Module["_emscripten_bind_btConeShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btConeShapeX_setLocalScaling_1"];var _emscripten_bind_btQuaternion_z_0=Module["_emscripten_bind_btQuaternion_z_0"]=asm["_emscripten_bind_btQuaternion_z_0"];var _emscripten_bind_btConvexHullShape_btConvexHullShape_0=Module["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"]=asm["_emscripten_bind_btConvexHullShape_btConvexHullShape_0"];var _emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1=Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"]=asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1"];var _emscripten_bind_btConstraintSetting_get_m_damping_0=Module["_emscripten_bind_btConstraintSetting_get_m_damping_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_damping_0"];var _emscripten_bind_btGhostObject___destroy___0=Module["_emscripten_bind_btGhostObject___destroy___0"]=asm["_emscripten_bind_btGhostObject___destroy___0"];var _emscripten_bind_btGhostObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btGhostObject_setContactProcessingThreshold_1"];var _emscripten_bind_btRigidBody_applyCentralForce_1=Module["_emscripten_bind_btRigidBody_applyCentralForce_1"]=asm["_emscripten_bind_btRigidBody_applyCentralForce_1"];var _emscripten_bind_btQuaternion___destroy___0=Module["_emscripten_bind_btQuaternion___destroy___0"]=asm["_emscripten_bind_btQuaternion___destroy___0"];var _emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=Module["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"]=asm["_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0"];var _emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=Module["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"]=asm["_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1"];var _emscripten_bind_btKinematicCharacterController_canJump_0=Module["_emscripten_bind_btKinematicCharacterController_canJump_0"]=asm["_emscripten_bind_btKinematicCharacterController_canJump_0"];var _emscripten_bind_btRigidBody_isActive_0=Module["_emscripten_bind_btRigidBody_isActive_0"]=asm["_emscripten_bind_btRigidBody_isActive_0"];var _emscripten_bind_btRaycastVehicle_btRaycastVehicle_3=Module["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"]=asm["_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3"];var _emscripten_bind_btMotionState_setWorldTransform_1=Module["_emscripten_bind_btMotionState_setWorldTransform_1"]=asm["_emscripten_bind_btMotionState_setWorldTransform_1"];var _emscripten_bind_btCylinderShape_setLocalScaling_1=Module["_emscripten_bind_btCylinderShape_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShape_setLocalScaling_1"];var _emscripten_bind_btCollisionWorld_rayTest_3=Module["_emscripten_bind_btCollisionWorld_rayTest_3"]=asm["_emscripten_bind_btCollisionWorld_rayTest_3"];var _emscripten_bind_btCompoundShape_calculateLocalInertia_2=Module["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCompoundShape_calculateLocalInertia_2"];var _emscripten_bind_btCollisionWorld_getDispatchInfo_0=Module["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"]=asm["_emscripten_bind_btCollisionWorld_getDispatchInfo_0"];var _emscripten_bind_btRigidBody_setCollisionShape_1=Module["_emscripten_bind_btRigidBody_setCollisionShape_1"]=asm["_emscripten_bind_btRigidBody_setCollisionShape_1"];var _emscripten_bind_btConeShapeX___destroy___0=Module["_emscripten_bind_btConeShapeX___destroy___0"]=asm["_emscripten_bind_btConeShapeX___destroy___0"];var _emscripten_bind_btCollisionObject_getCollisionFlags_0=Module["_emscripten_bind_btCollisionObject_getCollisionFlags_0"]=asm["_emscripten_bind_btCollisionObject_getCollisionFlags_0"];var _emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1=Module["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1"];var _emscripten_bind_btConeTwistConstraint_enableMotor_1=Module["_emscripten_bind_btConeTwistConstraint_enableMotor_1"]=asm["_emscripten_bind_btConeTwistConstraint_enableMotor_1"];var _emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1"];var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"]=asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4"];var _emscripten_bind_btPairCachingGhostObject_setRestitution_1=Module["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setRestitution_1"];var _emscripten_bind_btBroadphaseInterface___destroy___0=Module["_emscripten_bind_btBroadphaseInterface___destroy___0"]=asm["_emscripten_bind_btBroadphaseInterface___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1"];var _emscripten_bind_btCollisionObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1"];var _emscripten_bind_btPersistentManifold_getNumContacts_0=Module["_emscripten_bind_btPersistentManifold_getNumContacts_0"]=asm["_emscripten_bind_btPersistentManifold_getNumContacts_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0"];var _emscripten_bind_LocalConvexResult___destroy___0=Module["_emscripten_bind_LocalConvexResult___destroy___0"]=asm["_emscripten_bind_LocalConvexResult___destroy___0"];var _emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=Module["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"]=asm["_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1"];var _emscripten_bind_btCollisionWorld_addCollisionObject_3=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_3"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_3"];var _emscripten_bind_btRigidBody_getCollisionFlags_0=Module["_emscripten_bind_btRigidBody_getCollisionFlags_0"]=asm["_emscripten_bind_btRigidBody_getCollisionFlags_0"];var _emscripten_bind_btCollisionShape_setLocalScaling_1=Module["_emscripten_bind_btCollisionShape_setLocalScaling_1"]=asm["_emscripten_bind_btCollisionShape_setLocalScaling_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0"];var _emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0"];var _emscripten_bind_btMatrix3x3_setEulerZYX_3=Module["_emscripten_bind_btMatrix3x3_setEulerZYX_3"]=asm["_emscripten_bind_btMatrix3x3_setEulerZYX_3"];var _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0=Module["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0"];var _emscripten_bind_btConvexHullShape_setLocalScaling_1=Module["_emscripten_bind_btConvexHullShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexHullShape_setLocalScaling_1"];var _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_btCollisionWorld_getDispatcher_0=Module["_emscripten_bind_btCollisionWorld_getDispatcher_0"]=asm["_emscripten_bind_btCollisionWorld_getDispatcher_0"];var _emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_1=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_1"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _emscripten_bind_btRaycastVehicle_getWheelTransformWS_1=Module["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"]=asm["_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1"];var _emscripten_bind_btRigidBody_setDamping_2=Module["_emscripten_bind_btRigidBody_setDamping_2"]=asm["_emscripten_bind_btRigidBody_setDamping_2"];var _emscripten_bind_btDynamicsWorld_getDispatcher_0=Module["_emscripten_bind_btDynamicsWorld_getDispatcher_0"]=asm["_emscripten_bind_btDynamicsWorld_getDispatcher_0"];var _emscripten_bind_btGhostObject_setCollisionFlags_1=Module["_emscripten_bind_btGhostObject_setCollisionFlags_1"]=asm["_emscripten_bind_btGhostObject_setCollisionFlags_1"];var _emscripten_bind_btMatrix3x3_getRotation_1=Module["_emscripten_bind_btMatrix3x3_getRotation_1"]=asm["_emscripten_bind_btMatrix3x3_getRotation_1"];var _emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=Module["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1"];var _emscripten_bind_btCylinderShapeX_setLocalScaling_1=Module["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShapeX_setLocalScaling_1"];var _emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=Module["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"]=asm["_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0"];var _emscripten_bind_btCompoundShape_setLocalScaling_1=Module["_emscripten_bind_btCompoundShape_setLocalScaling_1"]=asm["_emscripten_bind_btCompoundShape_setLocalScaling_1"];var _emscripten_bind_btOverlappingPairCallback___destroy___0=Module["_emscripten_bind_btOverlappingPairCallback___destroy___0"]=asm["_emscripten_bind_btOverlappingPairCallback___destroy___0"];var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0"];var _emscripten_bind_btVector4_setY_1=Module["_emscripten_bind_btVector4_setY_1"]=asm["_emscripten_bind_btVector4_setY_1"];var _emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_btRigidBody_setContactProcessingThreshold_1=Module["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btRigidBody_setContactProcessingThreshold_1"];var _emscripten_bind_btRigidBody_getLinearVelocity_0=Module["_emscripten_bind_btRigidBody_getLinearVelocity_0"]=asm["_emscripten_bind_btRigidBody_getLinearVelocity_0"];var _emscripten_bind_btRigidBody_applyImpulse_2=Module["_emscripten_bind_btRigidBody_applyImpulse_2"]=asm["_emscripten_bind_btRigidBody_applyImpulse_2"];var _emscripten_bind_btConcaveShape_calculateLocalInertia_2=Module["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConcaveShape_calculateLocalInertia_2"];var _emscripten_bind_btRigidBody_setWorldTransform_1=Module["_emscripten_bind_btRigidBody_setWorldTransform_1"]=asm["_emscripten_bind_btRigidBody_setWorldTransform_1"];var _emscripten_bind_btRigidBody_setAngularVelocity_1=Module["_emscripten_bind_btRigidBody_setAngularVelocity_1"]=asm["_emscripten_bind_btRigidBody_setAngularVelocity_1"];var _emscripten_bind_btConvexShape_setLocalScaling_1=Module["_emscripten_bind_btConvexShape_setLocalScaling_1"]=asm["_emscripten_bind_btConvexShape_setLocalScaling_1"];var _emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2"];var _free=Module["_free"]=asm["_free"];var _emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1=Module["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_RayResultCallback_hasHit_0=Module["_emscripten_bind_RayResultCallback_hasHit_0"]=asm["_emscripten_bind_RayResultCallback_hasHit_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0"];var _emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0"];var _emscripten_bind_btWheelInfo_get_m_frictionSlip_0=Module["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"]=asm["_emscripten_bind_btWheelInfo_get_m_frictionSlip_0"];var _emscripten_bind_btConeShapeZ_setLocalScaling_1=Module["_emscripten_bind_btConeShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btConeShapeZ_setLocalScaling_1"];var _emscripten_bind_btPairCachingGhostObject_setActivationState_1=Module["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setActivationState_1"];var _emscripten_bind_btConvexTriangleMeshShape___destroy___0=Module["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btConvexTriangleMeshShape___destroy___0"];var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1=Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1"];var _emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1=Module["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"]=asm["_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1"];var _emscripten_bind_btRigidBody_getAngularVelocity_0=Module["_emscripten_bind_btRigidBody_getAngularVelocity_0"]=asm["_emscripten_bind_btRigidBody_getAngularVelocity_0"];var _emscripten_bind_btCompoundShape_btCompoundShape_0=Module["_emscripten_bind_btCompoundShape_btCompoundShape_0"]=asm["_emscripten_bind_btCompoundShape_btCompoundShape_0"];var _emscripten_bind_btCompoundShape_btCompoundShape_1=Module["_emscripten_bind_btCompoundShape_btCompoundShape_1"]=asm["_emscripten_bind_btCompoundShape_btCompoundShape_1"];var _emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=Module["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"]=asm["_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1"];var _emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=Module["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"]=asm["_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2"];var _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useContinuous_0"];var _emscripten_bind_btRigidBody_updateInertiaTensor_0=Module["_emscripten_bind_btRigidBody_updateInertiaTensor_0"]=asm["_emscripten_bind_btRigidBody_updateInertiaTensor_0"];var _emscripten_bind_btTransform_setOrigin_1=Module["_emscripten_bind_btTransform_setOrigin_1"]=asm["_emscripten_bind_btTransform_setOrigin_1"];var _emscripten_bind_ClosestRayResultCallback_hasHit_0=Module["_emscripten_bind_ClosestRayResultCallback_hasHit_0"]=asm["_emscripten_bind_ClosestRayResultCallback_hasHit_0"];var _emscripten_bind_btCompoundShape_addChildShape_2=Module["_emscripten_bind_btCompoundShape_addChildShape_2"]=asm["_emscripten_bind_btCompoundShape_addChildShape_2"];var _emscripten_bind_btDispatcher___destroy___0=Module["_emscripten_bind_btDispatcher___destroy___0"]=asm["_emscripten_bind_btDispatcher___destroy___0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0"];var _emscripten_bind_btDiscreteDynamicsWorld___destroy___0=Module["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld___destroy___0"];var _emscripten_bind_btConvexShape___destroy___0=Module["_emscripten_bind_btConvexShape___destroy___0"]=asm["_emscripten_bind_btConvexShape___destroy___0"];var _memmove=Module["_memmove"]=asm["_memmove"];var _emscripten_bind_btCapsuleShapeX_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShapeX_setLocalScaling_1"];var _emscripten_bind_btCollisionObject_setRestitution_1=Module["_emscripten_bind_btCollisionObject_setRestitution_1"]=asm["_emscripten_bind_btCollisionObject_setRestitution_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0"];var _emscripten_bind_LocalConvexResult_get_m_hitFraction_0=Module["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_hitFraction_0"];var _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0=Module["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_enableSPU_0"];var _emscripten_bind_btQuaternion_w_0=Module["_emscripten_bind_btQuaternion_w_0"]=asm["_emscripten_bind_btQuaternion_w_0"];var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btTransform_getRotation_0=Module["_emscripten_bind_btTransform_getRotation_0"]=asm["_emscripten_bind_btTransform_getRotation_0"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_6=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_6"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_7=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_7"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_4=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_4"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_5=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_5"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_2=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_2"];var _emscripten_bind_btHingeConstraint_btHingeConstraint_3=Module["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"]=asm["_emscripten_bind_btHingeConstraint_btHingeConstraint_3"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0"];var _emscripten_bind_btTypedConstraint___destroy___0=Module["_emscripten_bind_btTypedConstraint___destroy___0"]=asm["_emscripten_bind_btTypedConstraint___destroy___0"];var _emscripten_bind_btCylinderShapeX_btCylinderShapeX_1=Module["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"]=asm["_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3"];var _emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1"];var _emscripten_bind_btVector3_z_0=Module["_emscripten_bind_btVector3_z_0"]=asm["_emscripten_bind_btVector3_z_0"];var _emscripten_bind_btSphereShape_btSphereShape_1=Module["_emscripten_bind_btSphereShape_btSphereShape_1"]=asm["_emscripten_bind_btSphereShape_btSphereShape_1"];var _emscripten_bind_btQuaternion_y_0=Module["_emscripten_bind_btQuaternion_y_0"]=asm["_emscripten_bind_btQuaternion_y_0"];var _emscripten_bind_btCollisionWorld_addCollisionObject_1=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_1"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_1"];var _emscripten_bind_btCollisionWorld_addCollisionObject_2=Module["_emscripten_bind_btCollisionWorld_addCollisionObject_2"]=asm["_emscripten_bind_btCollisionWorld_addCollisionObject_2"];var _emscripten_bind_btRigidBody_setRestitution_1=Module["_emscripten_bind_btRigidBody_setRestitution_1"]=asm["_emscripten_bind_btRigidBody_setRestitution_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btRigidBody_getMotionState_0=Module["_emscripten_bind_btRigidBody_getMotionState_0"]=asm["_emscripten_bind_btRigidBody_getMotionState_0"];var _emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1=Module["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"]=asm["_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1"];var _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7=Module["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"]=asm["_emscripten_bind_ConcreteContactResultCallback_addSingleResult_7"];var _emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=Module["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"]=asm["_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"];var _emscripten_bind_btActionInterface___destroy___0=Module["_emscripten_bind_btActionInterface___destroy___0"]=asm["_emscripten_bind_btActionInterface___destroy___0"];var _emscripten_bind_btDefaultMotionState_setWorldTransform_1=Module["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"]=asm["_emscripten_bind_btDefaultMotionState_setWorldTransform_1"];var _emscripten_bind_btDefaultVehicleRaycaster___destroy___0=Module["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"]=asm["_emscripten_bind_btDefaultVehicleRaycaster___destroy___0"];var _emscripten_bind_RayResultCallback_get_m_collisionObject_0=Module["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"]=asm["_emscripten_bind_RayResultCallback_get_m_collisionObject_0"];var _emscripten_bind_btPoint2PointConstraint_getPivotInA_0=Module["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"]=asm["_emscripten_bind_btPoint2PointConstraint_getPivotInA_0"];var _emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0"];var _emscripten_bind_btCylinderShape_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShape_calculateLocalInertia_2"];var _emscripten_bind_btGhostObject_setRestitution_1=Module["_emscripten_bind_btGhostObject_setRestitution_1"]=asm["_emscripten_bind_btGhostObject_setRestitution_1"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_1=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_1"];var _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_3=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_3"];var _emscripten_bind_btDynamicsWorld_addCollisionObject_2=Module["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"]=asm["_emscripten_bind_btDynamicsWorld_addCollisionObject_2"];var _emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0"];var _emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=Module["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"]=asm["_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1"];var _emscripten_bind_btVector4_op_mul_1=Module["_emscripten_bind_btVector4_op_mul_1"]=asm["_emscripten_bind_btVector4_op_mul_1"];var _emscripten_bind_btCylinderShape_btCylinderShape_1=Module["_emscripten_bind_btCylinderShape_btCylinderShape_1"]=asm["_emscripten_bind_btCylinderShape_btCylinderShape_1"];var _emscripten_bind_btVector3___destroy___0=Module["_emscripten_bind_btVector3___destroy___0"]=asm["_emscripten_bind_btVector3___destroy___0"];var _emscripten_bind_btRigidBody_setAngularFactor_1=Module["_emscripten_bind_btRigidBody_setAngularFactor_1"]=asm["_emscripten_bind_btRigidBody_setAngularFactor_1"];var _emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2"];var _emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=Module["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"]=asm["_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1"];var _emscripten_bind_btMotionState_getWorldTransform_1=Module["_emscripten_bind_btMotionState_getWorldTransform_1"]=asm["_emscripten_bind_btMotionState_getWorldTransform_1"];var _emscripten_bind_btDynamicsWorld_getBroadphase_0=Module["_emscripten_bind_btDynamicsWorld_getBroadphase_0"]=asm["_emscripten_bind_btDynamicsWorld_getBroadphase_0"];var _emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1=Module["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1"];var _emscripten_bind_btVector3_x_0=Module["_emscripten_bind_btVector3_x_0"]=asm["_emscripten_bind_btVector3_x_0"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"];var _emscripten_bind_btCollisionObject_getCollisionShape_0=Module["_emscripten_bind_btCollisionObject_getCollisionShape_0"]=asm["_emscripten_bind_btCollisionObject_getCollisionShape_0"];var _emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=Module["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"];var _emscripten_bind_btManifoldPoint___destroy___0=Module["_emscripten_bind_btManifoldPoint___destroy___0"]=asm["_emscripten_bind_btManifoldPoint___destroy___0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1"];var _emscripten_bind_btVector4_length_0=Module["_emscripten_bind_btVector4_length_0"]=asm["_emscripten_bind_btVector4_length_0"];var _emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1=Module["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"]=asm["_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1"];var _emscripten_bind_btCylinderShapeZ_setLocalScaling_1=Module["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"]=asm["_emscripten_bind_btCylinderShapeZ_setLocalScaling_1"];var _emscripten_bind_ClosestConvexResultCallback___destroy___0=Module["_emscripten_bind_ClosestConvexResultCallback___destroy___0"]=asm["_emscripten_bind_ClosestConvexResultCallback___destroy___0"];var _emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=Module["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"]=asm["_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0"];var _emscripten_bind_btCollisionObject_setFriction_1=Module["_emscripten_bind_btCollisionObject_setFriction_1"]=asm["_emscripten_bind_btCollisionObject_setFriction_1"];var _emscripten_bind_btDefaultCollisionConfiguration___destroy___0=Module["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"]=asm["_emscripten_bind_btDefaultCollisionConfiguration___destroy___0"];var _emscripten_bind_btRigidBody_setMassProps_2=Module["_emscripten_bind_btRigidBody_setMassProps_2"]=asm["_emscripten_bind_btRigidBody_setMassProps_2"];var _emscripten_bind_btVector3_setValue_3=Module["_emscripten_bind_btVector3_setValue_3"]=asm["_emscripten_bind_btVector3_setValue_3"];var _emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1"];var _emscripten_bind_btGhostObject_getCollisionFlags_0=Module["_emscripten_bind_btGhostObject_getCollisionFlags_0"]=asm["_emscripten_bind_btGhostObject_getCollisionFlags_0"];var _emscripten_bind_btCapsuleShapeX___destroy___0=Module["_emscripten_bind_btCapsuleShapeX___destroy___0"]=asm["_emscripten_bind_btCapsuleShapeX___destroy___0"];var _emscripten_bind_btHingeConstraint_setLimit_4=Module["_emscripten_bind_btHingeConstraint_setLimit_4"]=asm["_emscripten_bind_btHingeConstraint_setLimit_4"];var _emscripten_bind_btHingeConstraint_setLimit_5=Module["_emscripten_bind_btHingeConstraint_setLimit_5"]=asm["_emscripten_bind_btHingeConstraint_setLimit_5"];var _emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1=Module["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"]=asm["_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1"];var _emscripten_bind_btConeShape_setLocalScaling_1=Module["_emscripten_bind_btConeShape_setLocalScaling_1"]=asm["_emscripten_bind_btConeShape_setLocalScaling_1"];var _emscripten_bind_btGhostObject_getNumOverlappingObjects_0=Module["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"]=asm["_emscripten_bind_btGhostObject_getNumOverlappingObjects_0"];var _emscripten_bind_btGhostObject_getCollisionShape_0=Module["_emscripten_bind_btGhostObject_getCollisionShape_0"]=asm["_emscripten_bind_btGhostObject_getCollisionShape_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1"];var _emscripten_bind_btPersistentManifold_getContactPoint_1=Module["_emscripten_bind_btPersistentManifold_getContactPoint_1"]=asm["_emscripten_bind_btPersistentManifold_getContactPoint_1"];var _emscripten_bind_btConeShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShapeX_calculateLocalInertia_2"];var _emscripten_bind_btGhostObject_activate_0=Module["_emscripten_bind_btGhostObject_activate_0"]=asm["_emscripten_bind_btGhostObject_activate_0"];var _emscripten_bind_btGhostObject_activate_1=Module["_emscripten_bind_btGhostObject_activate_1"]=asm["_emscripten_bind_btGhostObject_activate_1"];var _emscripten_bind_btManifoldPoint_getPositionWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0"];var _emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=Module["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0"];var _emscripten_bind_btConeShapeZ_btConeShapeZ_2=Module["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"]=asm["_emscripten_bind_btConeShapeZ_btConeShapeZ_2"];var _emscripten_bind_btSphereShape___destroy___0=Module["_emscripten_bind_btSphereShape___destroy___0"]=asm["_emscripten_bind_btSphereShape___destroy___0"];var _emscripten_bind_btSliderConstraint_setUpperAngLimit_1=Module["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setUpperAngLimit_1"];var _emscripten_bind_btDynamicsWorld_contactPairTest_3=Module["_emscripten_bind_btDynamicsWorld_contactPairTest_3"]=asm["_emscripten_bind_btDynamicsWorld_contactPairTest_3"];var _emscripten_bind_btCollisionWorld_getPairCache_0=Module["_emscripten_bind_btCollisionWorld_getPairCache_0"]=asm["_emscripten_bind_btCollisionWorld_getPairCache_0"];var _emscripten_bind_btConeTwistConstraint_setMotorTarget_1=Module["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMotorTarget_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1"];var _emscripten_bind_btWheelInfo_set_m_rollInfluence_1=Module["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"]=asm["_emscripten_bind_btWheelInfo_set_m_rollInfluence_1"];var _emscripten_bind_btGhostObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btGhostObject_setCcdMotionThreshold_1"];var _emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=Module["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"]=asm["_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"];var _emscripten_bind_btGhostObject_forceActivationState_1=Module["_emscripten_bind_btGhostObject_forceActivationState_1"]=asm["_emscripten_bind_btGhostObject_forceActivationState_1"];var _emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0=Module["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"]=asm["_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0"];var _emscripten_bind_VoidPtr___destroy___0=Module["_emscripten_bind_VoidPtr___destroy___0"]=asm["_emscripten_bind_VoidPtr___destroy___0"];var _emscripten_bind_btSliderConstraint_setLowerAngLimit_1=Module["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setLowerAngLimit_1"];var _emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2=Module["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"]=asm["_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2"];var _emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0"];var _emscripten_bind_btRaycastVehicle_getRigidBody_0=Module["_emscripten_bind_btRaycastVehicle_getRigidBody_0"]=asm["_emscripten_bind_btRaycastVehicle_getRigidBody_0"];var _emscripten_bind_btWheelInfo_get_m_steering_0=Module["_emscripten_bind_btWheelInfo_get_m_steering_0"]=asm["_emscripten_bind_btWheelInfo_get_m_steering_0"];var _emscripten_bind_btConstraintSetting_get_m_tau_0=Module["_emscripten_bind_btConstraintSetting_get_m_tau_0"]=asm["_emscripten_bind_btConstraintSetting_get_m_tau_0"];var _emscripten_bind_btSliderConstraint___destroy___0=Module["_emscripten_bind_btSliderConstraint___destroy___0"]=asm["_emscripten_bind_btSliderConstraint___destroy___0"];var _emscripten_bind_btCollisionShape___destroy___0=Module["_emscripten_bind_btCollisionShape___destroy___0"]=asm["_emscripten_bind_btCollisionShape___destroy___0"];var _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0=Module["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0"];var _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0=Module["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0"];var _emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=Module["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1"];var _emscripten_bind_btKinematicCharacterController_warp_1=Module["_emscripten_bind_btKinematicCharacterController_warp_1"]=asm["_emscripten_bind_btKinematicCharacterController_warp_1"];var _emscripten_bind_btAxisSweep3___destroy___0=Module["_emscripten_bind_btAxisSweep3___destroy___0"]=asm["_emscripten_bind_btAxisSweep3___destroy___0"];var _emscripten_bind_btTriangleMesh___destroy___0=Module["_emscripten_bind_btTriangleMesh___destroy___0"]=asm["_emscripten_bind_btTriangleMesh___destroy___0"];var _emscripten_bind_btKinematicCharacterController_preStep_1=Module["_emscripten_bind_btKinematicCharacterController_preStep_1"]=asm["_emscripten_bind_btKinematicCharacterController_preStep_1"];var _emscripten_bind_btRaycastVehicle_applyEngineForce_2=Module["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"]=asm["_emscripten_bind_btRaycastVehicle_applyEngineForce_2"];var _emscripten_bind_btRaycastVehicle_setBrake_2=Module["_emscripten_bind_btRaycastVehicle_setBrake_2"]=asm["_emscripten_bind_btRaycastVehicle_setBrake_2"];var _emscripten_bind_ConcreteContactResultCallback___destroy___0=Module["_emscripten_bind_ConcreteContactResultCallback___destroy___0"]=asm["_emscripten_bind_ConcreteContactResultCallback___destroy___0"];var _emscripten_bind_btCollisionObject___destroy___0=Module["_emscripten_bind_btCollisionObject___destroy___0"]=asm["_emscripten_bind_btCollisionObject___destroy___0"];var _emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"];var _emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=Module["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"]=asm["_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1"];var _emscripten_bind_btDispatcherInfo_set_m_timeStep_1=Module["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_timeStep_1"];var _emscripten_bind_btVector3_btVector3_3=Module["_emscripten_bind_btVector3_btVector3_3"]=asm["_emscripten_bind_btVector3_btVector3_3"];var _emscripten_bind_btVector3_btVector3_0=Module["_emscripten_bind_btVector3_btVector3_0"]=asm["_emscripten_bind_btVector3_btVector3_0"];var _emscripten_bind_btBoxShape___destroy___0=Module["_emscripten_bind_btBoxShape___destroy___0"]=asm["_emscripten_bind_btBoxShape___destroy___0"];var _emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0"];var _emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0=Module["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0"];var _emscripten_bind_btConeTwistConstraint___destroy___0=Module["_emscripten_bind_btConeTwistConstraint___destroy___0"]=asm["_emscripten_bind_btConeTwistConstraint___destroy___0"];var _emscripten_bind_btQuadWord___destroy___0=Module["_emscripten_bind_btQuadWord___destroy___0"]=asm["_emscripten_bind_btQuadWord___destroy___0"];var _emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1"];var _emscripten_bind_btRigidBody_setCenterOfMassTransform_1=Module["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"]=asm["_emscripten_bind_btRigidBody_setCenterOfMassTransform_1"];var _emscripten_bind_btConstraintSolver___destroy___0=Module["_emscripten_bind_btConstraintSolver___destroy___0"]=asm["_emscripten_bind_btConstraintSolver___destroy___0"];var _emscripten_bind_btDbvtBroadphase___destroy___0=Module["_emscripten_bind_btDbvtBroadphase___destroy___0"]=asm["_emscripten_bind_btDbvtBroadphase___destroy___0"];var _emscripten_bind_btCapsuleShape_btCapsuleShape_2=Module["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"]=asm["_emscripten_bind_btCapsuleShape_btCapsuleShape_2"];var _emscripten_bind_btTypedConstraint_enableFeedback_1=Module["_emscripten_bind_btTypedConstraint_enableFeedback_1"]=asm["_emscripten_bind_btTypedConstraint_enableFeedback_1"];var _emscripten_bind_btQuadWord_setZ_1=Module["_emscripten_bind_btQuadWord_setZ_1"]=asm["_emscripten_bind_btQuadWord_setZ_1"];var _emscripten_bind_btCapsuleShape_setLocalScaling_1=Module["_emscripten_bind_btCapsuleShape_setLocalScaling_1"]=asm["_emscripten_bind_btCapsuleShape_setLocalScaling_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0"];var _emscripten_bind_btTriangleMeshShape_setLocalScaling_1=Module["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"]=asm["_emscripten_bind_btTriangleMeshShape_setLocalScaling_1"];var _emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1=Module["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1"];var _emscripten_bind_btPersistentManifold_btPersistentManifold_0=Module["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"]=asm["_emscripten_bind_btPersistentManifold_btPersistentManifold_0"];var _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0=Module["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"]=asm["_emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0"];var _emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=Module["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"]=asm["_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2"];var _emscripten_bind_btVector4___destroy___0=Module["_emscripten_bind_btVector4___destroy___0"]=asm["_emscripten_bind_btVector4___destroy___0"];var _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=Module["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"]=asm["_emscripten_bind_btPairCachingGhostObject_isKinematicObject_0"];var _emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=Module["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2"];var _emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1=Module["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1"];var _emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=Module["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"]=asm["_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1"];var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"]=asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"];var _emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=Module["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"]=asm["_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"];var _emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=Module["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"]=asm["_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"];var _emscripten_bind_btPoint2PointConstraint_getPivotInB_0=Module["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"]=asm["_emscripten_bind_btPoint2PointConstraint_getPivotInB_0"];var _emscripten_bind_btKinematicCharacterController_playerStep_2=Module["_emscripten_bind_btKinematicCharacterController_playerStep_2"]=asm["_emscripten_bind_btKinematicCharacterController_playerStep_2"];var _emscripten_bind_btDispatcherInfo___destroy___0=Module["_emscripten_bind_btDispatcherInfo___destroy___0"]=asm["_emscripten_bind_btDispatcherInfo___destroy___0"];var _emscripten_bind_btStaticPlaneShape_setLocalScaling_1=Module["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"]=asm["_emscripten_bind_btStaticPlaneShape_setLocalScaling_1"];var _emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2"];var _emscripten_bind_ContactResultCallback_addSingleResult_7=Module["_emscripten_bind_ContactResultCallback_addSingleResult_7"]=asm["_emscripten_bind_ContactResultCallback_addSingleResult_7"];var _emscripten_bind_btGhostObject_getWorldTransform_0=Module["_emscripten_bind_btGhostObject_getWorldTransform_0"]=asm["_emscripten_bind_btGhostObject_getWorldTransform_0"];var _emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=Module["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0"];var _emscripten_bind_LocalConvexResult_set_m_hitFraction_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitFraction_1"];var _emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2"];var _emscripten_bind_btDispatcherInfo_get_m_timeStep_0=Module["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_timeStep_0"];var _emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1=Module["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"]=asm["_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1"];var _emscripten_bind_btDynamicsWorld___destroy___0=Module["_emscripten_bind_btDynamicsWorld___destroy___0"]=asm["_emscripten_bind_btDynamicsWorld___destroy___0"];var _emscripten_bind_btMotionState___destroy___0=Module["_emscripten_bind_btMotionState___destroy___0"]=asm["_emscripten_bind_btMotionState___destroy___0"];var _emscripten_bind_btCollisionObject_setCollisionFlags_1=Module["_emscripten_bind_btCollisionObject_setCollisionFlags_1"]=asm["_emscripten_bind_btCollisionObject_setCollisionFlags_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2"];var _emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3"];var _emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1=Module["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"]=asm["_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1"];var _emscripten_bind_btRaycastVehicle_getNumWheels_0=Module["_emscripten_bind_btRaycastVehicle_getNumWheels_0"]=asm["_emscripten_bind_btRaycastVehicle_getNumWheels_0"];var _emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=Module["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"]=asm["_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1"];var _emscripten_bind_btWheelInfo_set_m_steering_1=Module["_emscripten_bind_btWheelInfo_set_m_steering_1"]=asm["_emscripten_bind_btWheelInfo_set_m_steering_1"];var _emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=Module["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1"];var _emscripten_bind_btConeTwistConstraint_setAngularOnly_1=Module["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"]=asm["_emscripten_bind_btConeTwistConstraint_setAngularOnly_1"];var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"]=asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4"];var _emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=Module["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"]=asm["_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2"];var _emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=Module["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"]=asm["_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1"];var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1=Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1"];var _emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=Module["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"]=asm["_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1"];var _emscripten_bind_btRigidBodyConstructionInfo___destroy___0=Module["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo___destroy___0"];var _emscripten_bind_btRigidBody_getWorldTransform_0=Module["_emscripten_bind_btRigidBody_getWorldTransform_0"]=asm["_emscripten_bind_btRigidBody_getWorldTransform_0"];var _emscripten_bind_btPoint2PointConstraint_setPivotA_1=Module["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"]=asm["_emscripten_bind_btPoint2PointConstraint_setPivotA_1"];var _emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var _emscripten_bind_btCapsuleShape_calculateLocalInertia_2=Module["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btCapsuleShape_calculateLocalInertia_2"];var _emscripten_bind_btVector3_y_0=Module["_emscripten_bind_btVector3_y_0"]=asm["_emscripten_bind_btVector3_y_0"];var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0=Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0"];var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"]=asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"];var _emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=Module["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"]=asm["_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"];var _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=Module["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"]=asm["_emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0"];var _emscripten_bind_btGhostObject_setCollisionShape_1=Module["_emscripten_bind_btGhostObject_setCollisionShape_1"]=asm["_emscripten_bind_btGhostObject_setCollisionShape_1"];var _emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1=Module["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1"];var _emscripten_bind_btQuaternion_setW_1=Module["_emscripten_bind_btQuaternion_setW_1"]=asm["_emscripten_bind_btQuaternion_setW_1"];var _emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1"];var _emscripten_bind_btGhostObject_isActive_0=Module["_emscripten_bind_btGhostObject_isActive_0"]=asm["_emscripten_bind_btGhostObject_isActive_0"];var _emscripten_bind_btVector4_z_0=Module["_emscripten_bind_btVector4_z_0"]=asm["_emscripten_bind_btVector4_z_0"];var _emscripten_bind_btCollisionObject_forceActivationState_1=Module["_emscripten_bind_btCollisionObject_forceActivationState_1"]=asm["_emscripten_bind_btCollisionObject_forceActivationState_1"];var _emscripten_bind_btKinematicCharacterController_onGround_0=Module["_emscripten_bind_btKinematicCharacterController_onGround_0"]=asm["_emscripten_bind_btKinematicCharacterController_onGround_0"];var _emscripten_bind_btRaycastVehicle_getWheelInfo_1=Module["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"]=asm["_emscripten_bind_btRaycastVehicle_getWheelInfo_1"];var _emscripten_bind_btConeTwistConstraint_setLimit_2=Module["_emscripten_bind_btConeTwistConstraint_setLimit_2"]=asm["_emscripten_bind_btConeTwistConstraint_setLimit_2"];var _emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1"];var _emscripten_bind_btRigidBody___destroy___0=Module["_emscripten_bind_btRigidBody___destroy___0"]=asm["_emscripten_bind_btRigidBody___destroy___0"];var _emscripten_bind_btStridingMeshInterface___destroy___0=Module["_emscripten_bind_btStridingMeshInterface___destroy___0"]=asm["_emscripten_bind_btStridingMeshInterface___destroy___0"];var _emscripten_bind_btRigidBody_setSleepingThresholds_2=Module["_emscripten_bind_btRigidBody_setSleepingThresholds_2"]=asm["_emscripten_bind_btRigidBody_setSleepingThresholds_2"];var _emscripten_bind_btCollisionObject_setWorldTransform_1=Module["_emscripten_bind_btCollisionObject_setWorldTransform_1"]=asm["_emscripten_bind_btCollisionObject_setWorldTransform_1"];var _emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0=Module["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"]=asm["_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0"];var _emscripten_bind_btManifoldPoint_get_m_localPointA_0=Module["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_localPointA_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0"];var _emscripten_bind_btCollisionWorld_getBroadphase_0=Module["_emscripten_bind_btCollisionWorld_getBroadphase_0"]=asm["_emscripten_bind_btCollisionWorld_getBroadphase_0"];var _emscripten_bind_btDispatcher_getNumManifolds_0=Module["_emscripten_bind_btDispatcher_getNumManifolds_0"]=asm["_emscripten_bind_btDispatcher_getNumManifolds_0"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"];var _emscripten_bind_btRigidBody_activate_1=Module["_emscripten_bind_btRigidBody_activate_1"]=asm["_emscripten_bind_btRigidBody_activate_1"];var _emscripten_bind_btRigidBody_activate_0=Module["_emscripten_bind_btRigidBody_activate_0"]=asm["_emscripten_bind_btRigidBody_activate_0"];var _emscripten_bind_btRaycastVehicle___destroy___0=Module["_emscripten_bind_btRaycastVehicle___destroy___0"]=asm["_emscripten_bind_btRaycastVehicle___destroy___0"];var _emscripten_bind_btGhostObject_setActivationState_1=Module["_emscripten_bind_btGhostObject_setActivationState_1"]=asm["_emscripten_bind_btGhostObject_setActivationState_1"];var _emscripten_bind_btCollisionWorld_contactPairTest_3=Module["_emscripten_bind_btCollisionWorld_contactPairTest_3"]=asm["_emscripten_bind_btCollisionWorld_contactPairTest_3"];var _emscripten_bind_btCylinderShapeX___destroy___0=Module["_emscripten_bind_btCylinderShapeX___destroy___0"]=asm["_emscripten_bind_btCylinderShapeX___destroy___0"];var _emscripten_bind_btManifoldPoint_getPositionWorldOnA_0=Module["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"]=asm["_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0"];var _emscripten_bind_ContactResultCallback___destroy___0=Module["_emscripten_bind_ContactResultCallback___destroy___0"]=asm["_emscripten_bind_ContactResultCallback___destroy___0"];var _emscripten_bind_btDispatcherInfo_set_m_stepCount_1=Module["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"]=asm["_emscripten_bind_btDispatcherInfo_set_m_stepCount_1"];var _emscripten_bind_btVector4_x_0=Module["_emscripten_bind_btVector4_x_0"]=asm["_emscripten_bind_btVector4_x_0"];var _emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=Module["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"]=asm["_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1"];var _emscripten_bind_btKinematicCharacterController_getGhostObject_0=Module["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"]=asm["_emscripten_bind_btKinematicCharacterController_getGhostObject_0"];var _emscripten_bind_btRigidBody_btRigidBody_1=Module["_emscripten_bind_btRigidBody_btRigidBody_1"]=asm["_emscripten_bind_btRigidBody_btRigidBody_1"];var _emscripten_bind_btTriangleMeshShape___destroy___0=Module["_emscripten_bind_btTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btTriangleMeshShape___destroy___0"];var _emscripten_bind_btKinematicCharacterController_setWalkDirection_1=Module["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"]=asm["_emscripten_bind_btKinematicCharacterController_setWalkDirection_1"];var _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=Module["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0"];var _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0=Module["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0"];var _emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=Module["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1"];var _emscripten_bind_btKinematicCharacterController_getGravity_0=Module["_emscripten_bind_btKinematicCharacterController_getGravity_0"]=asm["_emscripten_bind_btKinematicCharacterController_getGravity_0"];var _emscripten_bind_btDiscreteDynamicsWorld_addAction_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_addAction_1"];var _emscripten_bind_btQuaternion_setY_1=Module["_emscripten_bind_btQuaternion_setY_1"]=asm["_emscripten_bind_btQuaternion_setY_1"];var _emscripten_bind_btConeShape_calculateLocalInertia_2=Module["_emscripten_bind_btConeShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConeShape_calculateLocalInertia_2"];var _emscripten_bind_btCylinderShapeX_calculateLocalInertia_2=Module["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"]=asm["_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2"];var _emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1=Module["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"]=asm["_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1"];var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=asm["_llvm_bswap_i32"];var _emscripten_bind_btSphereShape_setLocalScaling_1=Module["_emscripten_bind_btSphereShape_setLocalScaling_1"]=asm["_emscripten_bind_btSphereShape_setLocalScaling_1"];var _emscripten_bind_btVector4_w_0=Module["_emscripten_bind_btVector4_w_0"]=asm["_emscripten_bind_btVector4_w_0"];var _emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=Module["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0"];var _emscripten_bind_btBvhTriangleMeshShape___destroy___0=Module["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"]=asm["_emscripten_bind_btBvhTriangleMeshShape___destroy___0"];var _emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0"];var _emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1=Module["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"]=asm["_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1"];var _emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=Module["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1"];var _emscripten_bind_btVector4_y_0=Module["_emscripten_bind_btVector4_y_0"]=asm["_emscripten_bind_btVector4_y_0"];var _emscripten_bind_btGeneric6DofConstraint___destroy___0=Module["_emscripten_bind_btGeneric6DofConstraint___destroy___0"]=asm["_emscripten_bind_btGeneric6DofConstraint___destroy___0"];var _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0=Module["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0"];var _emscripten_bind_btConvexHullShape_addPoint_1=Module["_emscripten_bind_btConvexHullShape_addPoint_1"]=asm["_emscripten_bind_btConvexHullShape_addPoint_1"];var _emscripten_bind_btConvexHullShape_addPoint_2=Module["_emscripten_bind_btConvexHullShape_addPoint_2"]=asm["_emscripten_bind_btConvexHullShape_addPoint_2"];var _emscripten_bind_btTransform_getOrigin_0=Module["_emscripten_bind_btTransform_getOrigin_0"]=asm["_emscripten_bind_btTransform_getOrigin_0"];var _emscripten_bind_btHingeConstraint___destroy___0=Module["_emscripten_bind_btHingeConstraint___destroy___0"]=asm["_emscripten_bind_btHingeConstraint___destroy___0"];var _emscripten_bind_btHingeConstraint_enableFeedback_1=Module["_emscripten_bind_btHingeConstraint_enableFeedback_1"]=asm["_emscripten_bind_btHingeConstraint_enableFeedback_1"];var _emscripten_bind_btConvexShape_calculateLocalInertia_2=Module["_emscripten_bind_btConvexShape_calculateLocalInertia_2"]=asm["_emscripten_bind_btConvexShape_calculateLocalInertia_2"];var _memset=Module["_memset"]=asm["_memset"];var _emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_0=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_0"];var _emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=Module["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0"];var _emscripten_bind_btTriangleMesh_btTriangleMesh_2=Module["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"]=asm["_emscripten_bind_btTriangleMesh_btTriangleMesh_2"];var _emscripten_bind_btTransform___destroy___0=Module["_emscripten_bind_btTransform___destroy___0"]=asm["_emscripten_bind_btTransform___destroy___0"];var _emscripten_bind_btWheelInfo_set_m_frictionSlip_1=Module["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"]=asm["_emscripten_bind_btWheelInfo_set_m_frictionSlip_1"];var _emscripten_bind_btRigidBody_getCollisionShape_0=Module["_emscripten_bind_btRigidBody_getCollisionShape_0"]=asm["_emscripten_bind_btRigidBody_getCollisionShape_0"];var _emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=Module["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"]=asm["_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0"];var _emscripten_bind_btManifoldPoint_get_m_localPointB_0=Module["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"]=asm["_emscripten_bind_btManifoldPoint_get_m_localPointB_0"];var _emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3"];var _emscripten_bind_btSliderConstraint_setLowerLinLimit_1=Module["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"]=asm["_emscripten_bind_btSliderConstraint_setLowerLinLimit_1"];var _emscripten_bind_btPoint2PointConstraint_set_m_setting_1=Module["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"]=asm["_emscripten_bind_btPoint2PointConstraint_set_m_setting_1"];var _emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=Module["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"]=asm["_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1"];var _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0=Module["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"]=asm["_emscripten_bind_btWheelInfo_get_m_wheelsRadius_0"];var _emscripten_bind_btRigidBody_setLinearVelocity_1=Module["_emscripten_bind_btRigidBody_setLinearVelocity_1"]=asm["_emscripten_bind_btRigidBody_setLinearVelocity_1"];var _emscripten_bind_btVehicleTuning_btVehicleTuning_0=Module["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"]=asm["_emscripten_bind_btVehicleTuning_btVehicleTuning_0"];var _emscripten_bind_RayResultCallback_set_m_collisionObject_1=Module["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"]=asm["_emscripten_bind_RayResultCallback_set_m_collisionObject_1"];var _emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0"];var _emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1=Module["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"]=asm["_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1"];var _emscripten_bind_btDynamicsWorld_addAction_1=Module["_emscripten_bind_btDynamicsWorld_addAction_1"]=asm["_emscripten_bind_btDynamicsWorld_addAction_1"];var _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=Module["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"]=asm["_emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1"];var _emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=Module["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"]=asm["_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1"];var _emscripten_bind_btKinematicCharacterController_setFallSpeed_1=Module["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"]=asm["_emscripten_bind_btKinematicCharacterController_setFallSpeed_1"];var _emscripten_bind_btRigidBody_setActivationState_1=Module["_emscripten_bind_btRigidBody_setActivationState_1"]=asm["_emscripten_bind_btRigidBody_setActivationState_1"];var _emscripten_bind_ClosestConvexResultCallback_hasHit_0=Module["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"]=asm["_emscripten_bind_ClosestConvexResultCallback_hasHit_0"];var _emscripten_bind_btCapsuleShapeZ___destroy___0=Module["_emscripten_bind_btCapsuleShapeZ___destroy___0"]=asm["_emscripten_bind_btCapsuleShapeZ___destroy___0"];var _emscripten_bind_LocalShapeInfo_set_m_shapePart_1=Module["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"]=asm["_emscripten_bind_LocalShapeInfo_set_m_shapePart_1"];var _emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=Module["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"]=asm["_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0"];var _emscripten_bind_btTriangleMesh_addTriangle_3=Module["_emscripten_bind_btTriangleMesh_addTriangle_3"]=asm["_emscripten_bind_btTriangleMesh_addTriangle_3"];var _emscripten_bind_btGhostObject_getOverlappingObject_1=Module["_emscripten_bind_btGhostObject_getOverlappingObject_1"]=asm["_emscripten_bind_btGhostObject_getOverlappingObject_1"];var _emscripten_bind_btTriangleMesh_addTriangle_4=Module["_emscripten_bind_btTriangleMesh_addTriangle_4"]=asm["_emscripten_bind_btTriangleMesh_addTriangle_4"];var _emscripten_bind_btRigidBody_applyTorqueImpulse_1=Module["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"]=asm["_emscripten_bind_btRigidBody_applyTorqueImpulse_1"];var _emscripten_bind_btRigidBody_setCollisionFlags_1=Module["_emscripten_bind_btRigidBody_setCollisionFlags_1"]=asm["_emscripten_bind_btRigidBody_setCollisionFlags_1"];var _emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1=Module["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"]=asm["_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1"];var _emscripten_bind_btConeShape___destroy___0=Module["_emscripten_bind_btConeShape___destroy___0"]=asm["_emscripten_bind_btConeShape___destroy___0"];var _emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2=Module["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"]=asm["_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2"];var _emscripten_bind_btSliderConstraint_btSliderConstraint_5=Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"]=asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_5"];var _emscripten_bind_btSliderConstraint_btSliderConstraint_3=Module["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"]=asm["_emscripten_bind_btSliderConstraint_btSliderConstraint_3"];var _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0=Module["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0"];var _emscripten_bind_btDynamicsWorld_convexSweepTest_5=Module["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"]=asm["_emscripten_bind_btDynamicsWorld_convexSweepTest_5"];var _emscripten_bind_btRigidBody_forceActivationState_1=Module["_emscripten_bind_btRigidBody_forceActivationState_1"]=asm["_emscripten_bind_btRigidBody_forceActivationState_1"];var _emscripten_bind_btPoint2PointConstraint_setPivotB_1=Module["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"]=asm["_emscripten_bind_btPoint2PointConstraint_setPivotB_1"];var _emscripten_bind_btGhostPairCallback___destroy___0=Module["_emscripten_bind_btGhostPairCallback___destroy___0"]=asm["_emscripten_bind_btGhostPairCallback___destroy___0"];var _emscripten_bind_btKinematicCharacterController_getMaxSlope_0=Module["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"]=asm["_emscripten_bind_btKinematicCharacterController_getMaxSlope_0"];var _emscripten_bind_btSliderConstraint_enableFeedback_1=Module["_emscripten_bind_btSliderConstraint_enableFeedback_1"]=asm["_emscripten_bind_btSliderConstraint_enableFeedback_1"];var _emscripten_bind_btRaycastVehicle_addWheel_7=Module["_emscripten_bind_btRaycastVehicle_addWheel_7"]=asm["_emscripten_bind_btRaycastVehicle_addWheel_7"];var _emscripten_bind_btPairCachingGhostObject_isActive_0=Module["_emscripten_bind_btPairCachingGhostObject_isActive_0"]=asm["_emscripten_bind_btPairCachingGhostObject_isActive_0"];var _emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1=Module["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1"];var _emscripten_bind_btStaticPlaneShape___destroy___0=Module["_emscripten_bind_btStaticPlaneShape___destroy___0"]=asm["_emscripten_bind_btStaticPlaneShape___destroy___0"];var _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0=Module["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0"];var _emscripten_bind_btBoxShape_setLocalScaling_1=Module["_emscripten_bind_btBoxShape_setLocalScaling_1"]=asm["_emscripten_bind_btBoxShape_setLocalScaling_1"];var _emscripten_bind_btConeShapeZ___destroy___0=Module["_emscripten_bind_btConeShapeZ___destroy___0"]=asm["_emscripten_bind_btConeShapeZ___destroy___0"];var _emscripten_bind_btDynamicsWorld_getPairCache_0=Module["_emscripten_bind_btDynamicsWorld_getPairCache_0"]=asm["_emscripten_bind_btDynamicsWorld_getPairCache_0"];var _emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5=Module["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5"];var _emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=Module["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"]=asm["_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2"];var _emscripten_bind_btVector4_btVector4_0=Module["_emscripten_bind_btVector4_btVector4_0"]=asm["_emscripten_bind_btVector4_btVector4_0"];var _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0=Module["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"]=asm["_emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0"];var _emscripten_bind_btVector4_btVector4_4=Module["_emscripten_bind_btVector4_btVector4_4"]=asm["_emscripten_bind_btVector4_btVector4_4"];var _emscripten_bind_btKinematicCharacterController___destroy___0=Module["_emscripten_bind_btKinematicCharacterController___destroy___0"]=asm["_emscripten_bind_btKinematicCharacterController___destroy___0"];var _emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1=Module["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"]=asm["_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1"];var _emscripten_bind_btConstraintSetting_btConstraintSetting_0=Module["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"]=asm["_emscripten_bind_btConstraintSetting_btConstraintSetting_0"];var _emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=Module["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"]=asm["_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3"];var _emscripten_bind_btGhostPairCallback_btGhostPairCallback_0=Module["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"]=asm["_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0"];var _emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=Module["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"]=asm["_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1"];var _emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=Module["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"]=asm["_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1"];var _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0=Module["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"]=asm["_emscripten_bind_btVehicleTuning_get_m_frictionSlip_0"];var __GLOBAL__I_a=Module["__GLOBAL__I_a"]=asm["__GLOBAL__I_a"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_vid=Module["dynCall_vid"]=asm["dynCall_vid"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_viiidii=Module["dynCall_viiidii"]=asm["dynCall_viiidii"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_iiiiiiiiiii=Module["dynCall_iiiiiiiiiii"]=asm["dynCall_iiiiiiiiiii"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_viidi=Module["dynCall_viidi"]=asm["dynCall_viidi"];var dynCall_viddiii=Module["dynCall_viddiii"]=asm["dynCall_viddiii"];var dynCall_vidii=Module["dynCall_vidii"]=asm["dynCall_vidii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_vidi=Module["dynCall_vidi"]=asm["dynCall_vidi"];var dynCall_diiiiiiii=Module["dynCall_diiiiiiii"]=asm["dynCall_diiiiiiii"];var dynCall_viiiiddddiid=Module["dynCall_viiiiddddiid"]=asm["dynCall_viiiiddddiid"];var dynCall_diiiii=Module["dynCall_diiiii"]=asm["dynCall_diiiii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_iiid=Module["dynCall_iiid"]=asm["dynCall_iiid"];var dynCall_di=Module["dynCall_di"]=asm["dynCall_di"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_diiidii=Module["dynCall_diiidii"]=asm["dynCall_diiidii"];var dynCall_viidii=Module["dynCall_viidii"]=asm["dynCall_viidii"];var dynCall_viiiiiii=Module["dynCall_viiiiiii"]=asm["dynCall_viiiiiii"];var dynCall_viiiiiiiii=Module["dynCall_viiiiiiiii"]=asm["dynCall_viiiiiiiii"];var dynCall_viiiiiiiiii=Module["dynCall_viiiiiiiiii"]=asm["dynCall_viiiiiiiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_diii=Module["dynCall_diii"]=asm["dynCall_diii"];var dynCall_diiiiiiiiii=Module["dynCall_diiiiiiiiii"]=asm["dynCall_diiiiiiiiii"];var dynCall_viiiid=Module["dynCall_viiiid"]=asm["dynCall_viiiid"];var dynCall_diiiiiiiii=Module["dynCall_diiiiiiiii"]=asm["dynCall_diiiiiiiii"];var dynCall_did=Module["dynCall_did"]=asm["dynCall_did"];var dynCall_viiiidddddidi=Module["dynCall_viiiidddddidi"]=asm["dynCall_viiiidddddidi"];var dynCall_diidii=Module["dynCall_diidii"]=asm["dynCall_diidii"];var dynCall_diiii=Module["dynCall_diiii"]=asm["dynCall_diiii"];var dynCall_iiiiiiiiii=Module["dynCall_iiiiiiiiii"]=asm["dynCall_iiiiiiiiii"];var dynCall_viiid=Module["dynCall_viiid"]=asm["dynCall_viiid"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_viid=Module["dynCall_viid"]=asm["dynCall_viid"];var dynCall_iidid=Module["dynCall_iidid"]=asm["dynCall_iidid"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];var i64Math=(function(){var goog={math:{}};goog.math.Long=(function(low,high){this.low_=low|0;this.high_=high|0});goog.math.Long.IntCache_={};goog.math.Long.fromInt=(function(value){if(-128<=value&&value<128){var cachedObj=goog.math.Long.IntCache_[value];if(cachedObj){return cachedObj}}var obj=new goog.math.Long(value|0,value<0?-1:0);if(-128<=value&&value<128){goog.math.Long.IntCache_[value]=obj}return obj});goog.math.Long.fromNumber=(function(value){if(isNaN(value)||!isFinite(value)){return goog.math.Long.ZERO}else if(value<=-goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MIN_VALUE}else if(value+1>=goog.math.Long.TWO_PWR_63_DBL_){return goog.math.Long.MAX_VALUE}else if(value<0){return goog.math.Long.fromNumber(-value).negate()}else{return new goog.math.Long(value%goog.math.Long.TWO_PWR_32_DBL_|0,value/goog.math.Long.TWO_PWR_32_DBL_|0)}});goog.math.Long.fromBits=(function(lowBits,highBits){return new goog.math.Long(lowBits,highBits)});goog.math.Long.fromString=(function(str,opt_radix){if(str.length==0){throw Error("number format error: empty string")}var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(str.charAt(0)=="-"){return goog.math.Long.fromString(str.substring(1),radix).negate()}else if(str.indexOf("-")>=0){throw Error('number format error: interior "-" character: '+str)}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,8));var result=goog.math.Long.ZERO;for(var i=0;i<str.length;i+=8){var size=Math.min(8,str.length-i);var value=parseInt(str.substring(i,i+size),radix);if(size<8){var power=goog.math.Long.fromNumber(Math.pow(radix,size));result=result.multiply(power).add(goog.math.Long.fromNumber(value))}else{result=result.multiply(radixToPower);result=result.add(goog.math.Long.fromNumber(value))}}return result});goog.math.Long.TWO_PWR_16_DBL_=1<<16;goog.math.Long.TWO_PWR_24_DBL_=1<<24;goog.math.Long.TWO_PWR_32_DBL_=goog.math.Long.TWO_PWR_16_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_31_DBL_=goog.math.Long.TWO_PWR_32_DBL_/2;goog.math.Long.TWO_PWR_48_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_16_DBL_;goog.math.Long.TWO_PWR_64_DBL_=goog.math.Long.TWO_PWR_32_DBL_*goog.math.Long.TWO_PWR_32_DBL_;goog.math.Long.TWO_PWR_63_DBL_=goog.math.Long.TWO_PWR_64_DBL_/2;goog.math.Long.ZERO=goog.math.Long.fromInt(0);goog.math.Long.ONE=goog.math.Long.fromInt(1);goog.math.Long.NEG_ONE=goog.math.Long.fromInt(-1);goog.math.Long.MAX_VALUE=goog.math.Long.fromBits(4294967295|0,2147483647|0);goog.math.Long.MIN_VALUE=goog.math.Long.fromBits(0,2147483648|0);goog.math.Long.TWO_PWR_24_=goog.math.Long.fromInt(1<<24);goog.math.Long.prototype.toInt=(function(){return this.low_});goog.math.Long.prototype.toNumber=(function(){return this.high_*goog.math.Long.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()});goog.math.Long.prototype.toString=(function(opt_radix){var radix=opt_radix||10;if(radix<2||36<radix){throw Error("radix out of range: "+radix)}if(this.isZero()){return"0"}if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){var radixLong=goog.math.Long.fromNumber(radix);var div=this.div(radixLong);var rem=div.multiply(radixLong).subtract(this);return div.toString(radix)+rem.toInt().toString(radix)}else{return"-"+this.negate().toString(radix)}}var radixToPower=goog.math.Long.fromNumber(Math.pow(radix,6));var rem=this;var result="";while(true){var remDiv=rem.div(radixToPower);var intval=rem.subtract(remDiv.multiply(radixToPower)).toInt();var digits=intval.toString(radix);rem=remDiv;if(rem.isZero()){return digits+result}else{while(digits.length<6){digits="0"+digits}result=""+digits+result}}});goog.math.Long.prototype.getHighBits=(function(){return this.high_});goog.math.Long.prototype.getLowBits=(function(){return this.low_});goog.math.Long.prototype.getLowBitsUnsigned=(function(){return this.low_>=0?this.low_:goog.math.Long.TWO_PWR_32_DBL_+this.low_});goog.math.Long.prototype.getNumBitsAbs=(function(){if(this.isNegative()){if(this.equals(goog.math.Long.MIN_VALUE)){return 64}else{return this.negate().getNumBitsAbs()}}else{var val=this.high_!=0?this.high_:this.low_;for(var bit=31;bit>0;bit--){if((val&1<<bit)!=0){break}}return this.high_!=0?bit+33:bit+1}});goog.math.Long.prototype.isZero=(function(){return this.high_==0&&this.low_==0});goog.math.Long.prototype.isNegative=(function(){return this.high_<0});goog.math.Long.prototype.isOdd=(function(){return(this.low_&1)==1});goog.math.Long.prototype.equals=(function(other){return this.high_==other.high_&&this.low_==other.low_});goog.math.Long.prototype.notEquals=(function(other){return this.high_!=other.high_||this.low_!=other.low_});goog.math.Long.prototype.lessThan=(function(other){return this.compare(other)<0});goog.math.Long.prototype.lessThanOrEqual=(function(other){return this.compare(other)<=0});goog.math.Long.prototype.greaterThan=(function(other){return this.compare(other)>0});goog.math.Long.prototype.greaterThanOrEqual=(function(other){return this.compare(other)>=0});goog.math.Long.prototype.compare=(function(other){if(this.equals(other)){return 0}var thisNeg=this.isNegative();var otherNeg=other.isNegative();if(thisNeg&&!otherNeg){return-1}if(!thisNeg&&otherNeg){return 1}if(this.subtract(other).isNegative()){return-1}else{return 1}});goog.math.Long.prototype.negate=(function(){if(this.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.MIN_VALUE}else{return this.not().add(goog.math.Long.ONE)}});goog.math.Long.prototype.add=(function(other){var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00+b00;c16+=c00>>>16;c00&=65535;c16+=a16+b16;c32+=c16>>>16;c16&=65535;c32+=a32+b32;c48+=c32>>>16;c32&=65535;c48+=a48+b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.subtract=(function(other){return this.add(other.negate())});goog.math.Long.prototype.multiply=(function(other){if(this.isZero()){return goog.math.Long.ZERO}else if(other.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){return other.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}else if(other.equals(goog.math.Long.MIN_VALUE)){return this.isOdd()?goog.math.Long.MIN_VALUE:goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().multiply(other.negate())}else{return this.negate().multiply(other).negate()}}else if(other.isNegative()){return this.multiply(other.negate()).negate()}if(this.lessThan(goog.math.Long.TWO_PWR_24_)&&other.lessThan(goog.math.Long.TWO_PWR_24_)){return goog.math.Long.fromNumber(this.toNumber()*other.toNumber())}var a48=this.high_>>>16;var a32=this.high_&65535;var a16=this.low_>>>16;var a00=this.low_&65535;var b48=other.high_>>>16;var b32=other.high_&65535;var b16=other.low_>>>16;var b00=other.low_&65535;var c48=0,c32=0,c16=0,c00=0;c00+=a00*b00;c16+=c00>>>16;c00&=65535;c16+=a16*b00;c32+=c16>>>16;c16&=65535;c16+=a00*b16;c32+=c16>>>16;c16&=65535;c32+=a32*b00;c48+=c32>>>16;c32&=65535;c32+=a16*b16;c48+=c32>>>16;c32&=65535;c32+=a00*b32;c48+=c32>>>16;c32&=65535;c48+=a48*b00+a32*b16+a16*b32+a00*b48;c48&=65535;return goog.math.Long.fromBits(c16<<16|c00,c48<<16|c32)});goog.math.Long.prototype.div=(function(other){if(other.isZero()){throw Error("division by zero")}else if(this.isZero()){return goog.math.Long.ZERO}if(this.equals(goog.math.Long.MIN_VALUE)){if(other.equals(goog.math.Long.ONE)||other.equals(goog.math.Long.NEG_ONE)){return goog.math.Long.MIN_VALUE}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ONE}else{var halfThis=this.shiftRight(1);var approx=halfThis.div(other).shiftLeft(1);if(approx.equals(goog.math.Long.ZERO)){return other.isNegative()?goog.math.Long.ONE:goog.math.Long.NEG_ONE}else{var rem=this.subtract(other.multiply(approx));var result=approx.add(rem.div(other));return result}}}else if(other.equals(goog.math.Long.MIN_VALUE)){return goog.math.Long.ZERO}if(this.isNegative()){if(other.isNegative()){return this.negate().div(other.negate())}else{return this.negate().div(other).negate()}}else if(other.isNegative()){return this.div(other.negate()).negate()}var res=goog.math.Long.ZERO;var rem=this;while(rem.greaterThanOrEqual(other)){var approx=Math.max(1,Math.floor(rem.toNumber()/other.toNumber()));var log2=Math.ceil(Math.log(approx)/Math.LN2);var delta=log2<=48?1:Math.pow(2,log2-48);var approxRes=goog.math.Long.fromNumber(approx);var approxRem=approxRes.multiply(other);while(approxRem.isNegative()||approxRem.greaterThan(rem)){approx-=delta;approxRes=goog.math.Long.fromNumber(approx);approxRem=approxRes.multiply(other)}if(approxRes.isZero()){approxRes=goog.math.Long.ONE}res=res.add(approxRes);rem=rem.subtract(approxRem)}return res});goog.math.Long.prototype.modulo=(function(other){return this.subtract(this.div(other).multiply(other))});goog.math.Long.prototype.not=(function(){return goog.math.Long.fromBits(~this.low_,~this.high_)});goog.math.Long.prototype.and=(function(other){return goog.math.Long.fromBits(this.low_&other.low_,this.high_&other.high_)});goog.math.Long.prototype.or=(function(other){return goog.math.Long.fromBits(this.low_|other.low_,this.high_|other.high_)});goog.math.Long.prototype.xor=(function(other){return goog.math.Long.fromBits(this.low_^other.low_,this.high_^other.high_)});goog.math.Long.prototype.shiftLeft=(function(numBits){numBits&=63;if(numBits==0){return this}else{var low=this.low_;if(numBits<32){var high=this.high_;return goog.math.Long.fromBits(low<<numBits,high<<numBits|low>>>32-numBits)}else{return goog.math.Long.fromBits(0,low<<numBits-32)}}});goog.math.Long.prototype.shiftRight=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>numBits)}else{return goog.math.Long.fromBits(high>>numBits-32,high>=0?0:-1)}}});goog.math.Long.prototype.shiftRightUnsigned=(function(numBits){numBits&=63;if(numBits==0){return this}else{var high=this.high_;if(numBits<32){var low=this.low_;return goog.math.Long.fromBits(low>>>numBits|high<<32-numBits,high>>>numBits)}else if(numBits==32){return goog.math.Long.fromBits(high,0)}else{return goog.math.Long.fromBits(high>>>numBits-32,0)}}});var navigator={appName:"Modern Browser"};var dbits;var canary=0xdeadbeefcafe;var j_lm=(canary&16777215)==15715070;function BigInteger(a,b,c){if(a!=null)if("number"==typeof a)this.fromNumber(a,b,c);else if(b==null&&"string"!=typeof a)this.fromString(a,256);else this.fromString(a,b)}function nbi(){return new BigInteger(null)}function am1(i,x,w,j,c,n){while(--n>=0){var v=x*this[i++]+w[j]+c;c=Math.floor(v/67108864);w[j++]=v&67108863}return c}function am2(i,x,w,j,c,n){var xl=x&32767,xh=x>>15;while(--n>=0){var l=this[i]&32767;var h=this[i++]>>15;var m=xh*l+h*xl;l=xl*l+((m&32767)<<15)+w[j]+(c&1073741823);c=(l>>>30)+(m>>>15)+xh*h+(c>>>30);w[j++]=l&1073741823}return c}function am3(i,x,w,j,c,n){var xl=x&16383,xh=x>>14;while(--n>=0){var l=this[i]&16383;var h=this[i++]>>14;var m=xh*l+h*xl;l=xl*l+((m&16383)<<14)+w[j]+c;c=(l>>28)+(m>>14)+xh*h;w[j++]=l&268435455}return c}if(j_lm&&navigator.appName=="Microsoft Internet Explorer"){BigInteger.prototype.am=am2;dbits=30}else if(j_lm&&navigator.appName!="Netscape"){BigInteger.prototype.am=am1;dbits=26}else{BigInteger.prototype.am=am3;dbits=28}BigInteger.prototype.DB=dbits;BigInteger.prototype.DM=(1<<dbits)-1;BigInteger.prototype.DV=1<<dbits;var BI_FP=52;BigInteger.prototype.FV=Math.pow(2,BI_FP);BigInteger.prototype.F1=BI_FP-dbits;BigInteger.prototype.F2=2*dbits-BI_FP;var BI_RM="0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC=new Array;var rr,vv;rr="0".charCodeAt(0);for(vv=0;vv<=9;++vv)BI_RC[rr++]=vv;rr="a".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;rr="A".charCodeAt(0);for(vv=10;vv<36;++vv)BI_RC[rr++]=vv;function int2char(n){return BI_RM.charAt(n)}function intAt(s,i){var c=BI_RC[s.charCodeAt(i)];return c==null?-1:c}function bnpCopyTo(r){for(var i=this.t-1;i>=0;--i)r[i]=this[i];r.t=this.t;r.s=this.s}function bnpFromInt(x){this.t=1;this.s=x<0?-1:0;if(x>0)this[0]=x;else if(x<-1)this[0]=x+DV;else this.t=0}function nbv(i){var r=nbi();r.fromInt(i);return r}function bnpFromString(s,b){var k;if(b==16)k=4;else if(b==8)k=3;else if(b==256)k=8;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else{this.fromRadix(s,b);return}this.t=0;this.s=0;var i=s.length,mi=false,sh=0;while(--i>=0){var x=k==8?s[i]&255:intAt(s,i);if(x<0){if(s.charAt(i)=="-")mi=true;continue}mi=false;if(sh==0)this[this.t++]=x;else if(sh+k>this.DB){this[this.t-1]|=(x&(1<<this.DB-sh)-1)<<sh;this[this.t++]=x>>this.DB-sh}else this[this.t-1]|=x<<sh;sh+=k;if(sh>=this.DB)sh-=this.DB}if(k==8&&(s[0]&128)!=0){this.s=-1;if(sh>0)this[this.t-1]|=(1<<this.DB-sh)-1<<sh}this.clamp();if(mi)BigInteger.ZERO.subTo(this,this)}function bnpClamp(){var c=this.s&this.DM;while(this.t>0&&this[this.t-1]==c)--this.t}function bnToString(b){if(this.s<0)return"-"+this.negate().toString(b);var k;if(b==16)k=4;else if(b==8)k=3;else if(b==2)k=1;else if(b==32)k=5;else if(b==4)k=2;else return this.toRadix(b);var km=(1<<k)-1,d,m=false,r="",i=this.t;var p=this.DB-i*this.DB%k;if(i-->0){if(p<this.DB&&(d=this[i]>>p)>0){m=true;r=int2char(d)}while(i>=0){if(p<k){d=(this[i]&(1<<p)-1)<<k-p;d|=this[--i]>>(p+=this.DB-k)}else{d=this[i]>>(p-=k)&km;if(p<=0){p+=this.DB;--i}}if(d>0)m=true;if(m)r+=int2char(d)}}return m?r:"0"}function bnNegate(){var r=nbi();BigInteger.ZERO.subTo(this,r);return r}function bnAbs(){return this.s<0?this.negate():this}function bnCompareTo(a){var r=this.s-a.s;if(r!=0)return r;var i=this.t;r=i-a.t;if(r!=0)return this.s<0?-r:r;while(--i>=0)if((r=this[i]-a[i])!=0)return r;return 0}function nbits(x){var r=1,t;if((t=x>>>16)!=0){x=t;r+=16}if((t=x>>8)!=0){x=t;r+=8}if((t=x>>4)!=0){x=t;r+=4}if((t=x>>2)!=0){x=t;r+=2}if((t=x>>1)!=0){x=t;r+=1}return r}function bnBitLength(){if(this.t<=0)return 0;return this.DB*(this.t-1)+nbits(this[this.t-1]^this.s&this.DM)}function bnpDLShiftTo(n,r){var i;for(i=this.t-1;i>=0;--i)r[i+n]=this[i];for(i=n-1;i>=0;--i)r[i]=0;r.t=this.t+n;r.s=this.s}function bnpDRShiftTo(n,r){for(var i=n;i<this.t;++i)r[i-n]=this[i];r.t=Math.max(this.t-n,0);r.s=this.s}function bnpLShiftTo(n,r){var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<cbs)-1;var ds=Math.floor(n/this.DB),c=this.s<<bs&this.DM,i;for(i=this.t-1;i>=0;--i){r[i+ds+1]=this[i]>>cbs|c;c=(this[i]&bm)<<bs}for(i=ds-1;i>=0;--i)r[i]=0;r[ds]=c;r.t=this.t+ds+1;r.s=this.s;r.clamp()}function bnpRShiftTo(n,r){r.s=this.s;var ds=Math.floor(n/this.DB);if(ds>=this.t){r.t=0;return}var bs=n%this.DB;var cbs=this.DB-bs;var bm=(1<<bs)-1;r[0]=this[ds]>>bs;for(var i=ds+1;i<this.t;++i){r[i-ds-1]|=(this[i]&bm)<<cbs;r[i-ds]=this[i]>>bs}if(bs>0)r[this.t-ds-1]|=(this.s&bm)<<cbs;r.t=this.t-ds;r.clamp()}function bnpSubTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]-a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c-=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c-=a[i];r[i++]=c&this.DM;c>>=this.DB}c-=a.s}r.s=c<0?-1:0;if(c<-1)r[i++]=this.DV+c;else if(c>0)r[i++]=c;r.t=i;r.clamp()}function bnpMultiplyTo(a,r){var x=this.abs(),y=a.abs();var i=x.t;r.t=i+y.t;while(--i>=0)r[i]=0;for(i=0;i<y.t;++i)r[i+x.t]=x.am(0,y[i],r,i,0,x.t);r.s=0;r.clamp();if(this.s!=a.s)BigInteger.ZERO.subTo(r,r)}function bnpSquareTo(r){var x=this.abs();var i=r.t=2*x.t;while(--i>=0)r[i]=0;for(i=0;i<x.t-1;++i){var c=x.am(i,x[i],r,2*i,0,1);if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1))>=x.DV){r[i+x.t]-=x.DV;r[i+x.t+1]=1}}if(r.t>0)r[r.t-1]+=x.am(i,x[i],r,2*i,0,1);r.s=0;r.clamp()}function bnpDivRemTo(m,q,r){var pm=m.abs();if(pm.t<=0)return;var pt=this.abs();if(pt.t<pm.t){if(q!=null)q.fromInt(0);if(r!=null)this.copyTo(r);return}if(r==null)r=nbi();var y=nbi(),ts=this.s,ms=m.s;var nsh=this.DB-nbits(pm[pm.t-1]);if(nsh>0){pm.lShiftTo(nsh,y);pt.lShiftTo(nsh,r)}else{pm.copyTo(y);pt.copyTo(r)}var ys=y.t;var y0=y[ys-1];if(y0==0)return;var yt=y0*(1<<this.F1)+(ys>1?y[ys-2]>>this.F2:0);var d1=this.FV/yt,d2=(1<<this.F1)/yt,e=1<<this.F2;var i=r.t,j=i-ys,t=q==null?nbi():q;y.dlShiftTo(j,t);if(r.compareTo(t)>=0){r[r.t++]=1;r.subTo(t,r)}BigInteger.ONE.dlShiftTo(ys,t);t.subTo(y,y);while(y.t<ys)y[y.t++]=0;while(--j>=0){var qd=r[--i]==y0?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);if((r[i]+=y.am(0,qd,r,j,0,ys))<qd){y.dlShiftTo(j,t);r.subTo(t,r);while(r[i]<--qd)r.subTo(t,r)}}if(q!=null){r.drShiftTo(ys,q);if(ts!=ms)BigInteger.ZERO.subTo(q,q)}r.t=ys;r.clamp();if(nsh>0)r.rShiftTo(nsh,r);if(ts<0)BigInteger.ZERO.subTo(r,r)}function bnMod(a){var r=nbi();this.abs().divRemTo(a,null,r);if(this.s<0&&r.compareTo(BigInteger.ZERO)>0)a.subTo(r,r);return r}function Classic(m){this.m=m}function cConvert(x){if(x.s<0||x.compareTo(this.m)>=0)return x.mod(this.m);else return x}function cRevert(x){return x}function cReduce(x){x.divRemTo(this.m,null,x)}function cMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}function cSqrTo(x,r){x.squareTo(r);this.reduce(r)}Classic.prototype.convert=cConvert;Classic.prototype.revert=cRevert;Classic.prototype.reduce=cReduce;Classic.prototype.mulTo=cMulTo;Classic.prototype.sqrTo=cSqrTo;function bnpInvDigit(){if(this.t<1)return 0;var x=this[0];if((x&1)==0)return 0;var y=x&3;y=y*(2-(x&15)*y)&15;y=y*(2-(x&255)*y)&255;y=y*(2-((x&65535)*y&65535))&65535;y=y*(2-x*y%this.DV)%this.DV;return y>0?this.DV-y:-y}function Montgomery(m){this.m=m;this.mp=m.invDigit();this.mpl=this.mp&32767;this.mph=this.mp>>15;this.um=(1<<m.DB-15)-1;this.mt2=2*m.t}function montConvert(x){var r=nbi();x.abs().dlShiftTo(this.m.t,r);r.divRemTo(this.m,null,r);if(x.s<0&&r.compareTo(BigInteger.ZERO)>0)this.m.subTo(r,r);return r}function montRevert(x){var r=nbi();x.copyTo(r);this.reduce(r);return r}function montReduce(x){while(x.t<=this.mt2)x[x.t++]=0;for(var i=0;i<this.m.t;++i){var j=x[i]&32767;var u0=j*this.mpl+((j*this.mph+(x[i]>>15)*this.mpl&this.um)<<15)&x.DM;j=i+this.m.t;x[j]+=this.m.am(0,u0,x,i,0,this.m.t);while(x[j]>=x.DV){x[j]-=x.DV;x[++j]++}}x.clamp();x.drShiftTo(this.m.t,x);if(x.compareTo(this.m)>=0)x.subTo(this.m,x)}function montSqrTo(x,r){x.squareTo(r);this.reduce(r)}function montMulTo(x,y,r){x.multiplyTo(y,r);this.reduce(r)}Montgomery.prototype.convert=montConvert;Montgomery.prototype.revert=montRevert;Montgomery.prototype.reduce=montReduce;Montgomery.prototype.mulTo=montMulTo;Montgomery.prototype.sqrTo=montSqrTo;function bnpIsEven(){return(this.t>0?this[0]&1:this.s)==0}function bnpExp(e,z){if(e>4294967295||e<1)return BigInteger.ONE;var r=nbi(),r2=nbi(),g=z.convert(this),i=nbits(e)-1;g.copyTo(r);while(--i>=0){z.sqrTo(r,r2);if((e&1<<i)>0)z.mulTo(r2,g,r);else{var t=r;r=r2;r2=t}}return z.revert(r)}function bnModPowInt(e,m){var z;if(e<256||m.isEven())z=new Classic(m);else z=new Montgomery(m);return this.exp(e,z)}BigInteger.prototype.copyTo=bnpCopyTo;BigInteger.prototype.fromInt=bnpFromInt;BigInteger.prototype.fromString=bnpFromString;BigInteger.prototype.clamp=bnpClamp;BigInteger.prototype.dlShiftTo=bnpDLShiftTo;BigInteger.prototype.drShiftTo=bnpDRShiftTo;BigInteger.prototype.lShiftTo=bnpLShiftTo;BigInteger.prototype.rShiftTo=bnpRShiftTo;BigInteger.prototype.subTo=bnpSubTo;BigInteger.prototype.multiplyTo=bnpMultiplyTo;BigInteger.prototype.squareTo=bnpSquareTo;BigInteger.prototype.divRemTo=bnpDivRemTo;BigInteger.prototype.invDigit=bnpInvDigit;BigInteger.prototype.isEven=bnpIsEven;BigInteger.prototype.exp=bnpExp;BigInteger.prototype.toString=bnToString;BigInteger.prototype.negate=bnNegate;BigInteger.prototype.abs=bnAbs;BigInteger.prototype.compareTo=bnCompareTo;BigInteger.prototype.bitLength=bnBitLength;BigInteger.prototype.mod=bnMod;BigInteger.prototype.modPowInt=bnModPowInt;BigInteger.ZERO=nbv(0);BigInteger.ONE=nbv(1);function bnpFromRadix(s,b){this.fromInt(0);if(b==null)b=10;var cs=this.chunkSize(b);var d=Math.pow(b,cs),mi=false,j=0,w=0;for(var i=0;i<s.length;++i){var x=intAt(s,i);if(x<0){if(s.charAt(i)=="-"&&this.signum()==0)mi=true;continue}w=b*w+x;if(++j>=cs){this.dMultiply(d);this.dAddOffset(w,0);j=0;w=0}}if(j>0){this.dMultiply(Math.pow(b,j));this.dAddOffset(w,0)}if(mi)BigInteger.ZERO.subTo(this,this)}function bnpChunkSize(r){return Math.floor(Math.LN2*this.DB/Math.log(r))}function bnSigNum(){if(this.s<0)return-1;else if(this.t<=0||this.t==1&&this[0]<=0)return 0;else return 1}function bnpDMultiply(n){this[this.t]=this.am(0,n-1,this,0,0,this.t);++this.t;this.clamp()}function bnpDAddOffset(n,w){if(n==0)return;while(this.t<=w)this[this.t++]=0;this[w]+=n;while(this[w]>=this.DV){this[w]-=this.DV;if(++w>=this.t)this[this.t++]=0;++this[w]}}function bnpToRadix(b){if(b==null)b=10;if(this.signum()==0||b<2||b>36)return"0";var cs=this.chunkSize(b);var a=Math.pow(b,cs);var d=nbv(a),y=nbi(),z=nbi(),r="";this.divRemTo(d,y,z);while(y.signum()>0){r=(a+z.intValue()).toString(b).substr(1)+r;y.divRemTo(d,y,z)}return z.intValue().toString(b)+r}function bnIntValue(){if(this.s<0){if(this.t==1)return this[0]-this.DV;else if(this.t==0)return-1}else if(this.t==1)return this[0];else if(this.t==0)return 0;return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function bnpAddTo(a,r){var i=0,c=0,m=Math.min(a.t,this.t);while(i<m){c+=this[i]+a[i];r[i++]=c&this.DM;c>>=this.DB}if(a.t<this.t){c+=a.s;while(i<this.t){c+=this[i];r[i++]=c&this.DM;c>>=this.DB}c+=this.s}else{c+=this.s;while(i<a.t){c+=a[i];r[i++]=c&this.DM;c>>=this.DB}c+=a.s}r.s=c<0?-1:0;if(c>0)r[i++]=c;else if(c<-1)r[i++]=this.DV+c;r.t=i;r.clamp()}BigInteger.prototype.fromRadix=bnpFromRadix;BigInteger.prototype.chunkSize=bnpChunkSize;BigInteger.prototype.signum=bnSigNum;BigInteger.prototype.dMultiply=bnpDMultiply;BigInteger.prototype.dAddOffset=bnpDAddOffset;BigInteger.prototype.toRadix=bnpToRadix;BigInteger.prototype.intValue=bnIntValue;BigInteger.prototype.addTo=bnpAddTo;var Wrapper={abs:(function(l,h){var x=new goog.math.Long(l,h);var ret;if(x.isNegative()){ret=x.negate()}else{ret=x}HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_}),ensureTemps:(function(){if(Wrapper.ensuredTemps)return;Wrapper.ensuredTemps=true;Wrapper.two32=new BigInteger;Wrapper.two32.fromString("4294967296",10);Wrapper.two64=new BigInteger;Wrapper.two64.fromString("18446744073709551616",10);Wrapper.temp1=new BigInteger;Wrapper.temp2=new BigInteger}),lh2bignum:(function(l,h){var a=new BigInteger;a.fromString(h.toString(),10);var b=new BigInteger;a.multiplyTo(Wrapper.two32,b);var c=new BigInteger;c.fromString(l.toString(),10);var d=new BigInteger;c.addTo(b,d);return d}),stringify:(function(l,h,unsigned){var ret=(new goog.math.Long(l,h)).toString();if(unsigned&&ret[0]=="-"){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(ret,10);ret=new BigInteger;Wrapper.two64.addTo(bignum,ret);ret=ret.toString(10)}return ret}),fromString:(function(str,base,min,max,unsigned){Wrapper.ensureTemps();var bignum=new BigInteger;bignum.fromString(str,base);var bigmin=new BigInteger;bigmin.fromString(min,10);var bigmax=new BigInteger;bigmax.fromString(max,10);if(unsigned&&bignum.compareTo(BigInteger.ZERO)<0){var temp=new BigInteger;bignum.addTo(Wrapper.two64,temp);bignum=temp}var error=false;if(bignum.compareTo(bigmin)<0){bignum=bigmin;error=true}else if(bignum.compareTo(bigmax)>0){bignum=bigmax;error=true}var ret=goog.math.Long.fromString(bignum.toString());HEAP32[tempDoublePtr>>2]=ret.low_;HEAP32[tempDoublePtr+4>>2]=ret.high_;if(error)throw"range error"})};return Wrapper})();if(memoryInitializer){if(typeof Module["locateFile"]==="function"){memoryInitializer=Module["locateFile"](memoryInitializer)}else if(Module["memoryInitializerPrefixURL"]){memoryInitializer=Module["memoryInitializerPrefixURL"]+memoryInitializer}if(ENVIRONMENT_IS_NODE||ENVIRONMENT_IS_SHELL){var data=Module["readBinary"](memoryInitializer);HEAPU8.set(data,STATIC_BASE)}else{addRunDependency("memory initializer");Browser.asyncLoad(memoryInitializer,(function(data){HEAPU8.set(data,STATIC_BASE);removeRunDependency("memory initializer")}),(function(data){throw"could not load memory initializer "+memoryInitializer}))}}function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"]&&shouldRunNow)run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){assert(runDependencies==0,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");assert(__ATPRERUN__.length==0,"cannot call main when preRun functions remain to be called");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);initialStackTop=STACKTOP;try{var ret=Module["_main"](argc,argv,0);exit(ret)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(ENVIRONMENT_IS_WEB&&preloadStartTime!==null){Module.printErr("pre-main prep time: "+(Date.now()-preloadStartTime)+" ms")}if(Module["_main"]&&shouldRunNow){Module["callMain"](args)}postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status){if(Module["noExitRuntime"]){return}ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(ENVIRONMENT_IS_NODE){process["stdout"]["once"]("drain",(function(){process["exit"](status)}));console.log(" ");setTimeout((function(){process["exit"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;function abort(text){if(text){Module.print(text);Module.printErr(text)}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";throw"abort() at "+stackTrace()+extra}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}Module["noExitRuntime"]=true;run();function WrapperObject(){}WrapperObject.prototype=Object.create(WrapperObject.prototype);WrapperObject.prototype.constructor=WrapperObject;WrapperObject.prototype.__class__=WrapperObject;WrapperObject.__cache__={};Module["WrapperObject"]=WrapperObject;function getCache(__class__){return(__class__||WrapperObject).__cache__}Module["getCache"]=getCache;function wrapPointer(ptr,__class__){var cache=getCache(__class__);var ret=cache[ptr];if(ret)return ret;ret=Object.create((__class__||WrapperObject).prototype);ret.ptr=ptr;return cache[ptr]=ret}Module["wrapPointer"]=wrapPointer;function castObject(obj,__class__){return wrapPointer(obj.ptr,__class__)}Module["castObject"]=castObject;Module["NULL"]=wrapPointer(0);function destroy(obj){if(!obj["__destroy__"])throw"Error: Cannot destroy object. (Did you create it yourself?)";obj["__destroy__"]();delete getCache(obj.__class__)[obj.ptr]}Module["destroy"]=destroy;function compare(obj1,obj2){return obj1.ptr===obj2.ptr}Module["compare"]=compare;function getPointer(obj){return obj.ptr}Module["getPointer"]=getPointer;function getClass(obj){return obj.__class__}Module["getClass"]=getClass;function ensureString(value){if(typeof value=="string")return allocate(intArrayFromString(value),"i8",ALLOC_STACK);return value}function btMatrix3x3(){throw"cannot construct a btMatrix3x3, no constructor in IDL"}btMatrix3x3.prototype=Object.create(WrapperObject.prototype);btMatrix3x3.prototype.constructor=btMatrix3x3;btMatrix3x3.prototype.__class__=btMatrix3x3;btMatrix3x3.__cache__={};Module["btMatrix3x3"]=btMatrix3x3;btMatrix3x3.prototype["setEulerZYX"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btMatrix3x3_setEulerZYX_3(self,arg0,arg1,arg2)});btMatrix3x3.prototype["getRotation"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btMatrix3x3_getRotation_1(self,arg0)});btMatrix3x3.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btMatrix3x3___destroy___0(self)});function ConcreteContactResultCallback(){this.ptr=_emscripten_bind_ConcreteContactResultCallback_ConcreteContactResultCallback_0();getCache(ConcreteContactResultCallback)[this.ptr]=this}ConcreteContactResultCallback.prototype=Object.create(ContactResultCallback.prototype);ConcreteContactResultCallback.prototype.constructor=ConcreteContactResultCallback;ConcreteContactResultCallback.prototype.__class__=ConcreteContactResultCallback;ConcreteContactResultCallback.__cache__={};Module["ConcreteContactResultCallback"]=ConcreteContactResultCallback;ConcreteContactResultCallback.prototype["addSingleResult"]=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg5&&typeof arg5==="object")arg5=arg5.ptr;else arg5=ensureString(arg5);if(arg6&&typeof arg6==="object")arg6=arg6.ptr;else arg6=ensureString(arg6);return _emscripten_bind_ConcreteContactResultCallback_addSingleResult_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6)});ConcreteContactResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_ConcreteContactResultCallback___destroy___0(self)});function btBvhTriangleMeshShape(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg2===undefined){this.ptr=_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(arg0,arg1);getCache(btBvhTriangleMeshShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(arg0,arg1,arg2);getCache(btBvhTriangleMeshShape)[this.ptr]=this}btBvhTriangleMeshShape.prototype=Object.create(btTriangleMeshShape.prototype);btBvhTriangleMeshShape.prototype.constructor=btBvhTriangleMeshShape;btBvhTriangleMeshShape.prototype.__class__=btBvhTriangleMeshShape;btBvhTriangleMeshShape.__cache__={};Module["btBvhTriangleMeshShape"]=btBvhTriangleMeshShape;btBvhTriangleMeshShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1(self,arg0)});btBvhTriangleMeshShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btBvhTriangleMeshShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btBvhTriangleMeshShape___destroy___0(self)});function btDbvtBroadphase(){this.ptr=_emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0();getCache(btDbvtBroadphase)[this.ptr]=this}btDbvtBroadphase.prototype=Object.create(WrapperObject.prototype);btDbvtBroadphase.prototype.constructor=btDbvtBroadphase;btDbvtBroadphase.prototype.__class__=btDbvtBroadphase;btDbvtBroadphase.__cache__={};Module["btDbvtBroadphase"]=btDbvtBroadphase;btDbvtBroadphase.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDbvtBroadphase___destroy___0(self)});function VoidPtr(){throw"cannot construct a VoidPtr, no constructor in IDL"}VoidPtr.prototype=Object.create(WrapperObject.prototype);VoidPtr.prototype.constructor=VoidPtr;VoidPtr.prototype.__class__=VoidPtr;VoidPtr.__cache__={};Module["VoidPtr"]=VoidPtr;VoidPtr.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_VoidPtr___destroy___0(self)});function btSequentialImpulseConstraintSolver(){this.ptr=_emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0();getCache(btSequentialImpulseConstraintSolver)[this.ptr]=this}btSequentialImpulseConstraintSolver.prototype=Object.create(WrapperObject.prototype);btSequentialImpulseConstraintSolver.prototype.constructor=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.prototype.__class__=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.__cache__={};Module["btSequentialImpulseConstraintSolver"]=btSequentialImpulseConstraintSolver;btSequentialImpulseConstraintSolver.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0(self)});function btDispatcherInfo(){throw"cannot construct a btDispatcherInfo, no constructor in IDL"}btDispatcherInfo.prototype=Object.create(WrapperObject.prototype);btDispatcherInfo.prototype.constructor=btDispatcherInfo;btDispatcherInfo.prototype.__class__=btDispatcherInfo;btDispatcherInfo.__cache__={};Module["btDispatcherInfo"]=btDispatcherInfo;btDispatcherInfo.prototype["get_m_timeStep"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_timeStep_0(self)});btDispatcherInfo.prototype["set_m_timeStep"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_timeStep_1(self,arg0)});btDispatcherInfo.prototype["get_m_stepCount"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_stepCount_0(self)});btDispatcherInfo.prototype["set_m_stepCount"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_stepCount_1(self,arg0)});btDispatcherInfo.prototype["get_m_dispatchFunc"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_dispatchFunc_0(self)});btDispatcherInfo.prototype["set_m_dispatchFunc"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_dispatchFunc_1(self,arg0)});btDispatcherInfo.prototype["get_m_timeOfImpact"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_timeOfImpact_0(self)});btDispatcherInfo.prototype["set_m_timeOfImpact"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_timeOfImpact_1(self,arg0)});btDispatcherInfo.prototype["get_m_useContinuous"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_useContinuous_0(self)});btDispatcherInfo.prototype["set_m_useContinuous"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_useContinuous_1(self,arg0)});btDispatcherInfo.prototype["get_m_enableSatConvex"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_enableSatConvex_0(self)});btDispatcherInfo.prototype["set_m_enableSatConvex"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_enableSatConvex_1(self,arg0)});btDispatcherInfo.prototype["get_m_enableSPU"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_enableSPU_0(self)});btDispatcherInfo.prototype["set_m_enableSPU"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_enableSPU_1(self,arg0)});btDispatcherInfo.prototype["get_m_useEpa"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_useEpa_0(self)});btDispatcherInfo.prototype["set_m_useEpa"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_useEpa_1(self,arg0)});btDispatcherInfo.prototype["get_m_allowedCcdPenetration"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_allowedCcdPenetration_0(self)});btDispatcherInfo.prototype["set_m_allowedCcdPenetration"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_allowedCcdPenetration_1(self,arg0)});btDispatcherInfo.prototype["get_m_useConvexConservativeDistanceUtil"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_useConvexConservativeDistanceUtil_0(self)});btDispatcherInfo.prototype["set_m_useConvexConservativeDistanceUtil"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_useConvexConservativeDistanceUtil_1(self,arg0)});btDispatcherInfo.prototype["get_m_convexConservativeDistanceThreshold"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcherInfo_get_m_convexConservativeDistanceThreshold_0(self)});btDispatcherInfo.prototype["set_m_convexConservativeDistanceThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDispatcherInfo_set_m_convexConservativeDistanceThreshold_1(self,arg0)});btDispatcherInfo.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDispatcherInfo___destroy___0(self)});function btCapsuleShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btCapsuleShape_btCapsuleShape_2(arg0,arg1);getCache(btCapsuleShape)[this.ptr]=this}btCapsuleShape.prototype=Object.create(btCollisionShape.prototype);btCapsuleShape.prototype.constructor=btCapsuleShape;btCapsuleShape.prototype.__class__=btCapsuleShape;btCapsuleShape.__cache__={};Module["btCapsuleShape"]=btCapsuleShape;btCapsuleShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCapsuleShape_setLocalScaling_1(self,arg0)});btCapsuleShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCapsuleShape_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShape___destroy___0(self)});function btCollisionConfiguration(){throw"cannot construct a btCollisionConfiguration, no constructor in IDL"}btCollisionConfiguration.prototype=Object.create(WrapperObject.prototype);btCollisionConfiguration.prototype.constructor=btCollisionConfiguration;btCollisionConfiguration.prototype.__class__=btCollisionConfiguration;btCollisionConfiguration.__cache__={};Module["btCollisionConfiguration"]=btCollisionConfiguration;btCollisionConfiguration.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCollisionConfiguration___destroy___0(self)});function btAxisSweep3(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg2===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_2(arg0,arg1);getCache(btAxisSweep3)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_3(arg0,arg1,arg2);getCache(btAxisSweep3)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_4(arg0,arg1,arg2,arg3);getCache(btAxisSweep3)[this.ptr]=this;return}this.ptr=_emscripten_bind_btAxisSweep3_btAxisSweep3_5(arg0,arg1,arg2,arg3,arg4);getCache(btAxisSweep3)[this.ptr]=this}btAxisSweep3.prototype=Object.create(WrapperObject.prototype);btAxisSweep3.prototype.constructor=btAxisSweep3;btAxisSweep3.prototype.__class__=btAxisSweep3;btAxisSweep3.__cache__={};Module["btAxisSweep3"]=btAxisSweep3;btAxisSweep3.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btAxisSweep3___destroy___0(self)});function btPairCachingGhostObject(){this.ptr=_emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0();getCache(btPairCachingGhostObject)[this.ptr]=this}btPairCachingGhostObject.prototype=Object.create(btGhostObject.prototype);btPairCachingGhostObject.prototype.constructor=btPairCachingGhostObject;btPairCachingGhostObject.prototype.__class__=btPairCachingGhostObject;btPairCachingGhostObject.__cache__={};Module["btPairCachingGhostObject"]=btPairCachingGhostObject;btPairCachingGhostObject.prototype["getCollisionShape"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getCollisionShape_0(self),btCollisionShape)});btPairCachingGhostObject.prototype["setContactProcessingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setContactProcessingThreshold_1(self,arg0)});btPairCachingGhostObject.prototype["setActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setActivationState_1(self,arg0)});btPairCachingGhostObject.prototype["forceActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_forceActivationState_1(self,arg0)});btPairCachingGhostObject.prototype["activate"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){_emscripten_bind_btPairCachingGhostObject_activate_0(self);return}_emscripten_bind_btPairCachingGhostObject_activate_1(self,arg0)});btPairCachingGhostObject.prototype["isActive"]=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_isActive_0(self)});btPairCachingGhostObject.prototype["isKinematicObject"]=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_isKinematicObject_0(self)});btPairCachingGhostObject.prototype["setRestitution"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setRestitution_1(self,arg0)});btPairCachingGhostObject.prototype["setFriction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setFriction_1(self,arg0)});btPairCachingGhostObject.prototype["getWorldTransform"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getWorldTransform_0(self),btTransform)});btPairCachingGhostObject.prototype["getCollisionFlags"]=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0(self)});btPairCachingGhostObject.prototype["setCollisionFlags"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1(self,arg0)});btPairCachingGhostObject.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setWorldTransform_1(self,arg0)});btPairCachingGhostObject.prototype["setCollisionShape"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setCollisionShape_1(self,arg0)});btPairCachingGhostObject.prototype["setCcdMotionThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1(self,arg0)});btPairCachingGhostObject.prototype["setCcdSweptSphereRadius"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1(self,arg0)});btPairCachingGhostObject.prototype["getNumOverlappingObjects"]=(function(){var self=this.ptr;return _emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0(self)});btPairCachingGhostObject.prototype["getOverlappingObject"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1(self,arg0),btCollisionObject)});btPairCachingGhostObject.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btPairCachingGhostObject___destroy___0(self)});function btRigidBodyConstructionInfo(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg3===undefined){this.ptr=_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(arg0,arg1,arg2);getCache(btRigidBodyConstructionInfo)[this.ptr]=this;return}this.ptr=_emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(arg0,arg1,arg2,arg3);getCache(btRigidBodyConstructionInfo)[this.ptr]=this}btRigidBodyConstructionInfo.prototype=Object.create(WrapperObject.prototype);btRigidBodyConstructionInfo.prototype.constructor=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.prototype.__class__=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.__cache__={};Module["btRigidBodyConstructionInfo"]=btRigidBodyConstructionInfo;btRigidBodyConstructionInfo.prototype["get_m_linearDamping"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_linearDamping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_angularDamping"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_angularDamping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_friction"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0(self)});btRigidBodyConstructionInfo.prototype["set_m_friction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_rollingFriction"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0(self)});btRigidBodyConstructionInfo.prototype["set_m_rollingFriction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_restitution"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0(self)});btRigidBodyConstructionInfo.prototype["set_m_restitution"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_linearSleepingThreshold"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(self)});btRigidBodyConstructionInfo.prototype["set_m_linearSleepingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_angularSleepingThreshold"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(self)});btRigidBodyConstructionInfo.prototype["set_m_angularSleepingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalDamping"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalDamping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalDampingFactor"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalDampingFactor"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalLinearDampingThresholdSqr"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalLinearDampingThresholdSqr"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingThresholdSqr"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingThresholdSqr"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1(self,arg0)});btRigidBodyConstructionInfo.prototype["get_m_additionalAngularDampingFactor"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0(self)});btRigidBodyConstructionInfo.prototype["set_m_additionalAngularDampingFactor"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1(self,arg0)});btRigidBodyConstructionInfo.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btRigidBodyConstructionInfo___destroy___0(self)});function btManifoldPoint(){throw"cannot construct a btManifoldPoint, no constructor in IDL"}btManifoldPoint.prototype=Object.create(WrapperObject.prototype);btManifoldPoint.prototype.constructor=btManifoldPoint;btManifoldPoint.prototype.__class__=btManifoldPoint;btManifoldPoint.__cache__={};Module["btManifoldPoint"]=btManifoldPoint;btManifoldPoint.prototype["getPositionWorldOnA"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnA_0(self),btVector3)});btManifoldPoint.prototype["getPositionWorldOnB"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_getPositionWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["get_m_localPointA"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointA_0(self),btVector3)});btManifoldPoint.prototype["set_m_localPointA"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btManifoldPoint_set_m_localPointA_1(self,arg0)});btManifoldPoint.prototype["get_m_localPointB"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_localPointB_0(self),btVector3)});btManifoldPoint.prototype["set_m_localPointB"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btManifoldPoint_set_m_localPointB_1(self,arg0)});btManifoldPoint.prototype["get_m_positionWorldOnB"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["set_m_positionWorldOnB"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1(self,arg0)});btManifoldPoint.prototype["get_m_positionWorldOnA"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0(self),btVector3)});btManifoldPoint.prototype["set_m_positionWorldOnA"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1(self,arg0)});btManifoldPoint.prototype["get_m_normalWorldOnB"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0(self),btVector3)});btManifoldPoint.prototype["set_m_normalWorldOnB"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1(self,arg0)});btManifoldPoint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btManifoldPoint___destroy___0(self)});function btGeneric6DofConstraint(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg3===undefined){this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3(arg0,arg1,arg2);getCache(btGeneric6DofConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(arg0,arg1,arg2,arg3);getCache(btGeneric6DofConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btGeneric6DofConstraint)[this.ptr]=this}btGeneric6DofConstraint.prototype=Object.create(WrapperObject.prototype);btGeneric6DofConstraint.prototype.constructor=btGeneric6DofConstraint;btGeneric6DofConstraint.prototype.__class__=btGeneric6DofConstraint;btGeneric6DofConstraint.__cache__={};Module["btGeneric6DofConstraint"]=btGeneric6DofConstraint;btGeneric6DofConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btGeneric6DofConstraint___destroy___0(self)});function btStridingMeshInterface(){throw"cannot construct a btStridingMeshInterface, no constructor in IDL"}btStridingMeshInterface.prototype=Object.create(WrapperObject.prototype);btStridingMeshInterface.prototype.constructor=btStridingMeshInterface;btStridingMeshInterface.prototype.__class__=btStridingMeshInterface;btStridingMeshInterface.__cache__={};Module["btStridingMeshInterface"]=btStridingMeshInterface;btStridingMeshInterface.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btStridingMeshInterface___destroy___0(self)});function btBroadphaseInterface(){throw"cannot construct a btBroadphaseInterface, no constructor in IDL"}btBroadphaseInterface.prototype=Object.create(WrapperObject.prototype);btBroadphaseInterface.prototype.constructor=btBroadphaseInterface;btBroadphaseInterface.prototype.__class__=btBroadphaseInterface;btBroadphaseInterface.__cache__={};Module["btBroadphaseInterface"]=btBroadphaseInterface;btBroadphaseInterface.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btBroadphaseInterface___destroy___0(self)});function btCollisionObject(){throw"cannot construct a btCollisionObject, no constructor in IDL"}btCollisionObject.prototype=Object.create(WrapperObject.prototype);btCollisionObject.prototype.constructor=btCollisionObject;btCollisionObject.prototype.__class__=btCollisionObject;btCollisionObject.__cache__={};Module["btCollisionObject"]=btCollisionObject;btCollisionObject.prototype["getCollisionShape"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionObject_getCollisionShape_0(self),btCollisionShape)});btCollisionObject.prototype["setContactProcessingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setContactProcessingThreshold_1(self,arg0)});btCollisionObject.prototype["setActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setActivationState_1(self,arg0)});btCollisionObject.prototype["forceActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_forceActivationState_1(self,arg0)});btCollisionObject.prototype["activate"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){_emscripten_bind_btCollisionObject_activate_0(self);return}_emscripten_bind_btCollisionObject_activate_1(self,arg0)});btCollisionObject.prototype["isActive"]=(function(){var self=this.ptr;return _emscripten_bind_btCollisionObject_isActive_0(self)});btCollisionObject.prototype["isKinematicObject"]=(function(){var self=this.ptr;return _emscripten_bind_btCollisionObject_isKinematicObject_0(self)});btCollisionObject.prototype["setRestitution"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setRestitution_1(self,arg0)});btCollisionObject.prototype["setFriction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setFriction_1(self,arg0)});btCollisionObject.prototype["getWorldTransform"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionObject_getWorldTransform_0(self),btTransform)});btCollisionObject.prototype["getCollisionFlags"]=(function(){var self=this.ptr;return _emscripten_bind_btCollisionObject_getCollisionFlags_0(self)});btCollisionObject.prototype["setCollisionFlags"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setCollisionFlags_1(self,arg0)});btCollisionObject.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setWorldTransform_1(self,arg0)});btCollisionObject.prototype["setCollisionShape"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setCollisionShape_1(self,arg0)});btCollisionObject.prototype["setCcdMotionThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setCcdMotionThreshold_1(self,arg0)});btCollisionObject.prototype["setCcdSweptSphereRadius"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1(self,arg0)});btCollisionObject.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCollisionObject___destroy___0(self)});function btDiscreteDynamicsWorld(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);this.ptr=_emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(arg0,arg1,arg2,arg3);getCache(btDiscreteDynamicsWorld)[this.ptr]=this}btDiscreteDynamicsWorld.prototype=Object.create(btDynamicsWorld.prototype);btDiscreteDynamicsWorld.prototype.constructor=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.prototype.__class__=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.__cache__={};Module["btDiscreteDynamicsWorld"]=btDiscreteDynamicsWorld;btDiscreteDynamicsWorld.prototype["setGravity"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDiscreteDynamicsWorld_setGravity_1(self,arg0)});btDiscreteDynamicsWorld.prototype["getGravity"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getGravity_0(self),btVector3)});btDiscreteDynamicsWorld.prototype["addRigidBody"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(self,arg0,arg1);return}_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["removeRigidBody"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1(self,arg0)});btDiscreteDynamicsWorld.prototype["addConstraint"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1(self,arg0);return}_emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2(self,arg0,arg1)});btDiscreteDynamicsWorld.prototype["removeConstraint"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1(self,arg0)});btDiscreteDynamicsWorld.prototype["stepSimulation"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg1===undefined){return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1(self,arg0)}if(arg2===undefined){return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2(self,arg0,arg1)}return _emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getDispatcher"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0(self),btDispatcher)});btDiscreteDynamicsWorld.prototype["rayTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btDiscreteDynamicsWorld_rayTest_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getPairCache"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0(self),btOverlappingPairCache)});btDiscreteDynamicsWorld.prototype["getDispatchInfo"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getDispatchInfo_0(self),btDispatcherInfo)});btDiscreteDynamicsWorld.prototype["addCollisionObject"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg1===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["getBroadphase"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDiscreteDynamicsWorld_getBroadphase_0(self),btBroadphaseInterface)});btDiscreteDynamicsWorld.prototype["convexSweepTest"]=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);_emscripten_bind_btDiscreteDynamicsWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btDiscreteDynamicsWorld.prototype["contactPairTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btDiscreteDynamicsWorld_contactPairTest_3(self,arg0,arg1,arg2)});btDiscreteDynamicsWorld.prototype["addAction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDiscreteDynamicsWorld_addAction_1(self,arg0)});btDiscreteDynamicsWorld.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDiscreteDynamicsWorld___destroy___0(self)});function btConvexTriangleMeshShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg1===undefined){this.ptr=_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(arg0);getCache(btConvexTriangleMeshShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(arg0,arg1);getCache(btConvexTriangleMeshShape)[this.ptr]=this}btConvexTriangleMeshShape.prototype=Object.create(btConvexShape.prototype);btConvexTriangleMeshShape.prototype.constructor=btConvexTriangleMeshShape;btConvexTriangleMeshShape.prototype.__class__=btConvexTriangleMeshShape;btConvexTriangleMeshShape.__cache__={};Module["btConvexTriangleMeshShape"]=btConvexTriangleMeshShape;btConvexTriangleMeshShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1(self,arg0)});btConvexTriangleMeshShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexTriangleMeshShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConvexTriangleMeshShape___destroy___0(self)});function ConvexResultCallback(){throw"cannot construct a ConvexResultCallback, no constructor in IDL"}ConvexResultCallback.prototype=Object.create(WrapperObject.prototype);ConvexResultCallback.prototype.constructor=ConvexResultCallback;ConvexResultCallback.prototype.__class__=ConvexResultCallback;ConvexResultCallback.__cache__={};Module["ConvexResultCallback"]=ConvexResultCallback;ConvexResultCallback.prototype["hasHit"]=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_hasHit_0(self)});ConvexResultCallback.prototype["get_m_collisionFilterGroup"]=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterGroup_0(self)});ConvexResultCallback.prototype["set_m_collisionFilterGroup"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ConvexResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ConvexResultCallback.prototype["get_m_collisionFilterMask"]=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_collisionFilterMask_0(self)});ConvexResultCallback.prototype["set_m_collisionFilterMask"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ConvexResultCallback_set_m_collisionFilterMask_1(self,arg0)});ConvexResultCallback.prototype["get_m_closestHitFraction"]=(function(){var self=this.ptr;return _emscripten_bind_ConvexResultCallback_get_m_closestHitFraction_0(self)});ConvexResultCallback.prototype["set_m_closestHitFraction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ConvexResultCallback_set_m_closestHitFraction_1(self,arg0)});ConvexResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_ConvexResultCallback___destroy___0(self)});function btPoint2PointConstraint(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg2===undefined){this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2(arg0,arg1);getCache(btPoint2PointConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(arg0,arg1,arg2);getCache(btPoint2PointConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4(arg0,arg1,arg2,arg3);getCache(btPoint2PointConstraint)[this.ptr]=this}btPoint2PointConstraint.prototype=Object.create(btTypedConstraint.prototype);btPoint2PointConstraint.prototype.constructor=btPoint2PointConstraint;btPoint2PointConstraint.prototype.__class__=btPoint2PointConstraint;btPoint2PointConstraint.__cache__={};Module["btPoint2PointConstraint"]=btPoint2PointConstraint;btPoint2PointConstraint.prototype["setPivotA"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPoint2PointConstraint_setPivotA_1(self,arg0)});btPoint2PointConstraint.prototype["setPivotB"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPoint2PointConstraint_setPivotB_1(self,arg0)});btPoint2PointConstraint.prototype["getPivotInA"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInA_0(self),btVector3)});btPoint2PointConstraint.prototype["getPivotInB"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_getPivotInB_0(self),btVector3)});btPoint2PointConstraint.prototype["enableFeedback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPoint2PointConstraint_enableFeedback_1(self,arg0)});btPoint2PointConstraint.prototype["get_m_setting"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPoint2PointConstraint_get_m_setting_0(self),btConstraintSetting)});btPoint2PointConstraint.prototype["set_m_setting"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btPoint2PointConstraint_set_m_setting_1(self,arg0)});btPoint2PointConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btPoint2PointConstraint___destroy___0(self)});function btMotionState(){throw"cannot construct a btMotionState, no constructor in IDL"}btMotionState.prototype=Object.create(WrapperObject.prototype);btMotionState.prototype.constructor=btMotionState;btMotionState.prototype.__class__=btMotionState;btMotionState.__cache__={};Module["btMotionState"]=btMotionState;btMotionState.prototype["getWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btMotionState_getWorldTransform_1(self,arg0)});btMotionState.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btMotionState_setWorldTransform_1(self,arg0)});btMotionState.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btMotionState___destroy___0(self)});function btSliderConstraint(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg3===undefined){this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_3(arg0,arg1,arg2);getCache(btSliderConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_4(arg0,arg1,arg2,arg3);getCache(btSliderConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btSliderConstraint_btSliderConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btSliderConstraint)[this.ptr]=this}btSliderConstraint.prototype=Object.create(btTypedConstraint.prototype);btSliderConstraint.prototype.constructor=btSliderConstraint;btSliderConstraint.prototype.__class__=btSliderConstraint;btSliderConstraint.__cache__={};Module["btSliderConstraint"]=btSliderConstraint;btSliderConstraint.prototype["setLowerLinLimit"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSliderConstraint_setLowerLinLimit_1(self,arg0)});btSliderConstraint.prototype["setUpperLinLimit"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSliderConstraint_setUpperLinLimit_1(self,arg0)});btSliderConstraint.prototype["setLowerAngLimit"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSliderConstraint_setLowerAngLimit_1(self,arg0)});btSliderConstraint.prototype["setUpperAngLimit"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSliderConstraint_setUpperAngLimit_1(self,arg0)});btSliderConstraint.prototype["enableFeedback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSliderConstraint_enableFeedback_1(self,arg0)});btSliderConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btSliderConstraint___destroy___0(self)});function btConeTwistConstraint(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg2===undefined){this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2(arg0,arg1);getCache(btConeTwistConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(arg0,arg1,arg2);getCache(btConeTwistConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4(arg0,arg1,arg2,arg3);getCache(btConeTwistConstraint)[this.ptr]=this}btConeTwistConstraint.prototype=Object.create(btTypedConstraint.prototype);btConeTwistConstraint.prototype.constructor=btConeTwistConstraint;btConeTwistConstraint.prototype.__class__=btConeTwistConstraint;btConeTwistConstraint.__cache__={};Module["btConeTwistConstraint"]=btConeTwistConstraint;btConeTwistConstraint.prototype["setLimit"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConeTwistConstraint_setLimit_2(self,arg0,arg1)});btConeTwistConstraint.prototype["setAngularOnly"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setAngularOnly_1(self,arg0)});btConeTwistConstraint.prototype["setDamping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setDamping_1(self,arg0)});btConeTwistConstraint.prototype["enableMotor"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_enableMotor_1(self,arg0)});btConeTwistConstraint.prototype["setMaxMotorImpulse"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1(self,arg0)});btConeTwistConstraint.prototype["setMaxMotorImpulseNormalized"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1(self,arg0)});btConeTwistConstraint.prototype["setMotorTarget"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setMotorTarget_1(self,arg0)});btConeTwistConstraint.prototype["setMotorTargetInConstraintSpace"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1(self,arg0)});btConeTwistConstraint.prototype["enableFeedback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeTwistConstraint_enableFeedback_1(self,arg0)});btConeTwistConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConeTwistConstraint___destroy___0(self)});function btConeShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btConeShape_btConeShape_2(arg0,arg1);getCache(btConeShape)[this.ptr]=this}btConeShape.prototype=Object.create(btCollisionShape.prototype);btConeShape.prototype.constructor=btConeShape;btConeShape.prototype.__class__=btConeShape;btConeShape.__cache__={};Module["btConeShape"]=btConeShape;btConeShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeShape_setLocalScaling_1(self,arg0)});btConeShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConeShape_calculateLocalInertia_2(self,arg0,arg1)});btConeShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConeShape___destroy___0(self)});function btConvexShape(){throw"cannot construct a btConvexShape, no constructor in IDL"}btConvexShape.prototype=Object.create(btCollisionShape.prototype);btConvexShape.prototype.constructor=btConvexShape;btConvexShape.prototype.__class__=btConvexShape;btConvexShape.__cache__={};Module["btConvexShape"]=btConvexShape;btConvexShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConvexShape_setLocalScaling_1(self,arg0)});btConvexShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConvexShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConvexShape___destroy___0(self)});function btDefaultCollisionConfiguration(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){this.ptr=_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0();getCache(btDefaultCollisionConfiguration)[this.ptr]=this;return}this.ptr=_emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(arg0);getCache(btDefaultCollisionConfiguration)[this.ptr]=this}btDefaultCollisionConfiguration.prototype=Object.create(WrapperObject.prototype);btDefaultCollisionConfiguration.prototype.constructor=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.prototype.__class__=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.__cache__={};Module["btDefaultCollisionConfiguration"]=btDefaultCollisionConfiguration;btDefaultCollisionConfiguration.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDefaultCollisionConfiguration___destroy___0(self)});function ContactResultCallback(){throw"cannot construct a ContactResultCallback, no constructor in IDL"}ContactResultCallback.prototype=Object.create(WrapperObject.prototype);ContactResultCallback.prototype.constructor=ContactResultCallback;ContactResultCallback.prototype.__class__=ContactResultCallback;ContactResultCallback.__cache__={};Module["ContactResultCallback"]=ContactResultCallback;ContactResultCallback.prototype["addSingleResult"]=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg5&&typeof arg5==="object")arg5=arg5.ptr;else arg5=ensureString(arg5);if(arg6&&typeof arg6==="object")arg6=arg6.ptr;else arg6=ensureString(arg6);return _emscripten_bind_ContactResultCallback_addSingleResult_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6)});ContactResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_ContactResultCallback___destroy___0(self)});function btConeShapeZ(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btConeShapeZ_btConeShapeZ_2(arg0,arg1);getCache(btConeShapeZ)[this.ptr]=this}btConeShapeZ.prototype=Object.create(btConeShape.prototype);btConeShapeZ.prototype.constructor=btConeShapeZ;btConeShapeZ.prototype.__class__=btConeShapeZ;btConeShapeZ.__cache__={};Module["btConeShapeZ"]=btConeShapeZ;btConeShapeZ.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeShapeZ_setLocalScaling_1(self,arg0)});btConeShapeZ.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConeShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btConeShapeZ.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConeShapeZ___destroy___0(self)});function btConeShapeX(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btConeShapeX_btConeShapeX_2(arg0,arg1);getCache(btConeShapeX)[this.ptr]=this}btConeShapeX.prototype=Object.create(btConeShape.prototype);btConeShapeX.prototype.constructor=btConeShapeX;btConeShapeX.prototype.__class__=btConeShapeX;btConeShapeX.__cache__={};Module["btConeShapeX"]=btConeShapeX;btConeShapeX.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConeShapeX_setLocalScaling_1(self,arg0)});btConeShapeX.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConeShapeX_calculateLocalInertia_2(self,arg0,arg1)});btConeShapeX.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConeShapeX___destroy___0(self)});function btTriangleMesh(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg0===undefined){this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_0();getCache(btTriangleMesh)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_1(arg0);getCache(btTriangleMesh)[this.ptr]=this;return}this.ptr=_emscripten_bind_btTriangleMesh_btTriangleMesh_2(arg0,arg1);getCache(btTriangleMesh)[this.ptr]=this}btTriangleMesh.prototype=Object.create(btStridingMeshInterface.prototype);btTriangleMesh.prototype.constructor=btTriangleMesh;btTriangleMesh.prototype.__class__=btTriangleMesh;btTriangleMesh.__cache__={};Module["btTriangleMesh"]=btTriangleMesh;btTriangleMesh.prototype["addTriangle"]=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg3===undefined){_emscripten_bind_btTriangleMesh_addTriangle_3(self,arg0,arg1,arg2);return}_emscripten_bind_btTriangleMesh_addTriangle_4(self,arg0,arg1,arg2,arg3)});btTriangleMesh.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btTriangleMesh___destroy___0(self)});function btConvexHullShape(){this.ptr=_emscripten_bind_btConvexHullShape_btConvexHullShape_0();getCache(btConvexHullShape)[this.ptr]=this}btConvexHullShape.prototype=Object.create(btCollisionShape.prototype);btConvexHullShape.prototype.constructor=btConvexHullShape;btConvexHullShape.prototype.__class__=btConvexHullShape;btConvexHullShape.__cache__={};Module["btConvexHullShape"]=btConvexHullShape;btConvexHullShape.prototype["addPoint"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg1===undefined){_emscripten_bind_btConvexHullShape_addPoint_1(self,arg0);return}_emscripten_bind_btConvexHullShape_addPoint_2(self,arg0,arg1)});btConvexHullShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConvexHullShape_setLocalScaling_1(self,arg0)});btConvexHullShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConvexHullShape_calculateLocalInertia_2(self,arg0,arg1)});btConvexHullShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConvexHullShape___destroy___0(self)});function btPersistentManifold(){this.ptr=_emscripten_bind_btPersistentManifold_btPersistentManifold_0();getCache(btPersistentManifold)[this.ptr]=this}btPersistentManifold.prototype=Object.create(WrapperObject.prototype);btPersistentManifold.prototype.constructor=btPersistentManifold;btPersistentManifold.prototype.__class__=btPersistentManifold;btPersistentManifold.__cache__={};Module["btPersistentManifold"]=btPersistentManifold;btPersistentManifold.prototype["getBody0"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPersistentManifold_getBody0_0(self),btCollisionObject)});btPersistentManifold.prototype["getBody1"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btPersistentManifold_getBody1_0(self),btCollisionObject)});btPersistentManifold.prototype["getNumContacts"]=(function(){var self=this.ptr;return _emscripten_bind_btPersistentManifold_getNumContacts_0(self)});btPersistentManifold.prototype["getContactPoint"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btPersistentManifold_getContactPoint_1(self,arg0),btManifoldPoint)});btPersistentManifold.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btPersistentManifold___destroy___0(self)});function btBoxShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btBoxShape_btBoxShape_1(arg0);getCache(btBoxShape)[this.ptr]=this}btBoxShape.prototype=Object.create(btCollisionShape.prototype);btBoxShape.prototype.constructor=btBoxShape;btBoxShape.prototype.__class__=btBoxShape;btBoxShape.__cache__={};Module["btBoxShape"]=btBoxShape;btBoxShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btBoxShape_setLocalScaling_1(self,arg0)});btBoxShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btBoxShape_calculateLocalInertia_2(self,arg0,arg1)});btBoxShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btBoxShape___destroy___0(self)});function btCollisionDispatcher(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1(arg0);getCache(btCollisionDispatcher)[this.ptr]=this}btCollisionDispatcher.prototype=Object.create(btDispatcher.prototype);btCollisionDispatcher.prototype.constructor=btCollisionDispatcher;btCollisionDispatcher.prototype.__class__=btCollisionDispatcher;btCollisionDispatcher.__cache__={};Module["btCollisionDispatcher"]=btCollisionDispatcher;btCollisionDispatcher.prototype["getNumManifolds"]=(function(){var self=this.ptr;return _emscripten_bind_btCollisionDispatcher_getNumManifolds_0(self)});btCollisionDispatcher.prototype["getManifoldByIndexInternal"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1(self,arg0),btPersistentManifold)});btCollisionDispatcher.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCollisionDispatcher___destroy___0(self)});function btVehicleTuning(){this.ptr=_emscripten_bind_btVehicleTuning_btVehicleTuning_0();getCache(btVehicleTuning)[this.ptr]=this}btVehicleTuning.prototype=Object.create(WrapperObject.prototype);btVehicleTuning.prototype.constructor=btVehicleTuning;btVehicleTuning.prototype.__class__=btVehicleTuning;btVehicleTuning.__cache__={};Module["btVehicleTuning"]=btVehicleTuning;btVehicleTuning.prototype["get_m_suspensionStiffness"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionStiffness_0(self)});btVehicleTuning.prototype["set_m_suspensionStiffness"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_suspensionStiffness_1(self,arg0)});btVehicleTuning.prototype["get_m_suspensionCompression"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionCompression_0(self)});btVehicleTuning.prototype["set_m_suspensionCompression"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_suspensionCompression_1(self,arg0)});btVehicleTuning.prototype["get_m_suspensionDamping"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_suspensionDamping_0(self)});btVehicleTuning.prototype["set_m_suspensionDamping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_suspensionDamping_1(self,arg0)});btVehicleTuning.prototype["get_m_maxSuspensionTravelCm"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionTravelCm_0(self)});btVehicleTuning.prototype["set_m_maxSuspensionTravelCm"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_maxSuspensionTravelCm_1(self,arg0)});btVehicleTuning.prototype["get_m_frictionSlip"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_frictionSlip_0(self)});btVehicleTuning.prototype["set_m_frictionSlip"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_frictionSlip_1(self,arg0)});btVehicleTuning.prototype["get_m_maxSuspensionForce"]=(function(){var self=this.ptr;return _emscripten_bind_btVehicleTuning_get_m_maxSuspensionForce_0(self)});btVehicleTuning.prototype["set_m_maxSuspensionForce"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVehicleTuning_set_m_maxSuspensionForce_1(self,arg0)});function btCompoundShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){this.ptr=_emscripten_bind_btCompoundShape_btCompoundShape_0();getCache(btCompoundShape)[this.ptr]=this;return}this.ptr=_emscripten_bind_btCompoundShape_btCompoundShape_1(arg0);getCache(btCompoundShape)[this.ptr]=this}btCompoundShape.prototype=Object.create(btCollisionShape.prototype);btCompoundShape.prototype.constructor=btCompoundShape;btCompoundShape.prototype.__class__=btCompoundShape;btCompoundShape.__cache__={};Module["btCompoundShape"]=btCompoundShape;btCompoundShape.prototype["addChildShape"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCompoundShape_addChildShape_2(self,arg0,arg1)});btCompoundShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCompoundShape_setLocalScaling_1(self,arg0)});btCompoundShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCompoundShape_calculateLocalInertia_2(self,arg0,arg1)});btCompoundShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCompoundShape___destroy___0(self)});function btCollisionObjectWrapper(){throw"cannot construct a btCollisionObjectWrapper, no constructor in IDL"}btCollisionObjectWrapper.prototype=Object.create(WrapperObject.prototype);btCollisionObjectWrapper.prototype.constructor=btCollisionObjectWrapper;btCollisionObjectWrapper.prototype.__class__=btCollisionObjectWrapper;btCollisionObjectWrapper.__cache__={};Module["btCollisionObjectWrapper"]=btCollisionObjectWrapper;function ClosestConvexResultCallback(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_ClosestConvexResultCallback_ClosestConvexResultCallback_2(arg0,arg1);getCache(ClosestConvexResultCallback)[this.ptr]=this}ClosestConvexResultCallback.prototype=Object.create(ConvexResultCallback.prototype);ClosestConvexResultCallback.prototype.constructor=ClosestConvexResultCallback;ClosestConvexResultCallback.prototype.__class__=ClosestConvexResultCallback;ClosestConvexResultCallback.__cache__={};Module["ClosestConvexResultCallback"]=ClosestConvexResultCallback;ClosestConvexResultCallback.prototype["hasHit"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_hasHit_0(self)});ClosestConvexResultCallback.prototype["get_m_convexFromWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexFromWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_convexFromWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_convexFromWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_convexToWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_convexToWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_convexToWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_convexToWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_hitNormalWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitNormalWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_hitNormalWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_hitNormalWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_hitPointWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestConvexResultCallback_get_m_hitPointWorld_0(self),btVector3)});ClosestConvexResultCallback.prototype["set_m_hitPointWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_hitPointWorld_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_collisionFilterGroup"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterGroup_0(self)});ClosestConvexResultCallback.prototype["set_m_collisionFilterGroup"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_collisionFilterMask"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_collisionFilterMask_0(self)});ClosestConvexResultCallback.prototype["set_m_collisionFilterMask"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_collisionFilterMask_1(self,arg0)});ClosestConvexResultCallback.prototype["get_m_closestHitFraction"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestConvexResultCallback_get_m_closestHitFraction_0(self)});ClosestConvexResultCallback.prototype["set_m_closestHitFraction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestConvexResultCallback_set_m_closestHitFraction_1(self,arg0)});ClosestConvexResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_ClosestConvexResultCallback___destroy___0(self)});function btDefaultMotionState(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg0===undefined){this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_0();getCache(btDefaultMotionState)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_1(arg0);getCache(btDefaultMotionState)[this.ptr]=this;return}this.ptr=_emscripten_bind_btDefaultMotionState_btDefaultMotionState_2(arg0,arg1);getCache(btDefaultMotionState)[this.ptr]=this}btDefaultMotionState.prototype=Object.create(btMotionState.prototype);btDefaultMotionState.prototype.constructor=btDefaultMotionState;btDefaultMotionState.prototype.__class__=btDefaultMotionState;btDefaultMotionState.__cache__={};Module["btDefaultMotionState"]=btDefaultMotionState;btDefaultMotionState.prototype["getWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDefaultMotionState_getWorldTransform_1(self,arg0)});btDefaultMotionState.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDefaultMotionState_setWorldTransform_1(self,arg0)});btDefaultMotionState.prototype["get_m_graphicsWorldTrans"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDefaultMotionState_get_m_graphicsWorldTrans_0(self),btTransform)});btDefaultMotionState.prototype["set_m_graphicsWorldTrans"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDefaultMotionState_set_m_graphicsWorldTrans_1(self,arg0)});btDefaultMotionState.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDefaultMotionState___destroy___0(self)});function btTriangleMeshShape(){throw"cannot construct a btTriangleMeshShape, no constructor in IDL"}btTriangleMeshShape.prototype=Object.create(btConcaveShape.prototype);btTriangleMeshShape.prototype.constructor=btTriangleMeshShape;btTriangleMeshShape.prototype.__class__=btTriangleMeshShape;btTriangleMeshShape.__cache__={};Module["btTriangleMeshShape"]=btTriangleMeshShape;btTriangleMeshShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btTriangleMeshShape_setLocalScaling_1(self,arg0)});btTriangleMeshShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2(self,arg0,arg1)});btTriangleMeshShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btTriangleMeshShape___destroy___0(self)});function btDispatcher(){throw"cannot construct a btDispatcher, no constructor in IDL"}btDispatcher.prototype=Object.create(WrapperObject.prototype);btDispatcher.prototype.constructor=btDispatcher;btDispatcher.prototype.__class__=btDispatcher;btDispatcher.__cache__={};Module["btDispatcher"]=btDispatcher;btDispatcher.prototype["getNumManifolds"]=(function(){var self=this.ptr;return _emscripten_bind_btDispatcher_getNumManifolds_0(self)});btDispatcher.prototype["getManifoldByIndexInternal"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btDispatcher_getManifoldByIndexInternal_1(self,arg0),btPersistentManifold)});btDispatcher.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDispatcher___destroy___0(self)});function ClosestRayResultCallback(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2(arg0,arg1);getCache(ClosestRayResultCallback)[this.ptr]=this}ClosestRayResultCallback.prototype=Object.create(RayResultCallback.prototype);ClosestRayResultCallback.prototype.constructor=ClosestRayResultCallback;ClosestRayResultCallback.prototype.__class__=ClosestRayResultCallback;ClosestRayResultCallback.__cache__={};Module["ClosestRayResultCallback"]=ClosestRayResultCallback;ClosestRayResultCallback.prototype["hasHit"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestRayResultCallback_hasHit_0(self)});ClosestRayResultCallback.prototype["get_m_rayFromWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_rayFromWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_rayToWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_rayToWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_hitNormalWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_hitNormalWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_hitPointWorld"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0(self),btVector3)});ClosestRayResultCallback.prototype["set_m_hitPointWorld"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionFilterGroup"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0(self)});ClosestRayResultCallback.prototype["set_m_collisionFilterGroup"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionFilterMask"]=(function(){var self=this.ptr;return _emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0(self)});ClosestRayResultCallback.prototype["set_m_collisionFilterMask"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1(self,arg0)});ClosestRayResultCallback.prototype["get_m_collisionObject"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0(self),btCollisionObject)});ClosestRayResultCallback.prototype["set_m_collisionObject"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1(self,arg0)});ClosestRayResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_ClosestRayResultCallback___destroy___0(self)});function btDynamicsWorld(){throw"cannot construct a btDynamicsWorld, no constructor in IDL"}btDynamicsWorld.prototype=Object.create(btCollisionWorld.prototype);btDynamicsWorld.prototype.constructor=btDynamicsWorld;btDynamicsWorld.prototype.__class__=btDynamicsWorld;btDynamicsWorld.__cache__={};Module["btDynamicsWorld"]=btDynamicsWorld;btDynamicsWorld.prototype["addAction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btDynamicsWorld_addAction_1(self,arg0)});btDynamicsWorld.prototype["getDispatcher"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatcher_0(self),btDispatcher)});btDynamicsWorld.prototype["rayTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btDynamicsWorld_rayTest_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["getPairCache"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getPairCache_0(self),btOverlappingPairCache)});btDynamicsWorld.prototype["getDispatchInfo"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getDispatchInfo_0(self),btDispatcherInfo)});btDynamicsWorld.prototype["addCollisionObject"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg1===undefined){_emscripten_bind_btDynamicsWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btDynamicsWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btDynamicsWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["getBroadphase"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btDynamicsWorld_getBroadphase_0(self),btBroadphaseInterface)});btDynamicsWorld.prototype["convexSweepTest"]=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);_emscripten_bind_btDynamicsWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btDynamicsWorld.prototype["contactPairTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btDynamicsWorld_contactPairTest_3(self,arg0,arg1,arg2)});btDynamicsWorld.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDynamicsWorld___destroy___0(self)});function btCapsuleShapeX(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btCapsuleShapeX_btCapsuleShapeX_2(arg0,arg1);getCache(btCapsuleShapeX)[this.ptr]=this}btCapsuleShapeX.prototype=Object.create(btCapsuleShape.prototype);btCapsuleShapeX.prototype.constructor=btCapsuleShapeX;btCapsuleShapeX.prototype.__class__=btCapsuleShapeX;btCapsuleShapeX.__cache__={};Module["btCapsuleShapeX"]=btCapsuleShapeX;btCapsuleShapeX.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCapsuleShapeX_setLocalScaling_1(self,arg0)});btCapsuleShapeX.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCapsuleShapeX_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShapeX.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShapeX___destroy___0(self)});function btQuaternion(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);this.ptr=_emscripten_bind_btQuaternion_btQuaternion_4(arg0,arg1,arg2,arg3);getCache(btQuaternion)[this.ptr]=this}btQuaternion.prototype=Object.create(btQuadWord.prototype);btQuaternion.prototype.constructor=btQuaternion;btQuaternion.prototype.__class__=btQuaternion;btQuaternion.__cache__={};Module["btQuaternion"]=btQuaternion;btQuaternion.prototype["setValue"]=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);_emscripten_bind_btQuaternion_setValue_4(self,arg0,arg1,arg2,arg3)});btQuaternion.prototype["x"]=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_x_0(self)});btQuaternion.prototype["y"]=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_y_0(self)});btQuaternion.prototype["z"]=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_z_0(self)});btQuaternion.prototype["w"]=(function(){var self=this.ptr;return _emscripten_bind_btQuaternion_w_0(self)});btQuaternion.prototype["setX"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuaternion_setX_1(self,arg0)});btQuaternion.prototype["setY"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuaternion_setY_1(self,arg0)});btQuaternion.prototype["setZ"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuaternion_setZ_1(self,arg0)});btQuaternion.prototype["setW"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuaternion_setW_1(self,arg0)});btQuaternion.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btQuaternion___destroy___0(self)});function btCapsuleShapeZ(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btCapsuleShapeZ_btCapsuleShapeZ_2(arg0,arg1);getCache(btCapsuleShapeZ)[this.ptr]=this}btCapsuleShapeZ.prototype=Object.create(btCapsuleShape.prototype);btCapsuleShapeZ.prototype.constructor=btCapsuleShapeZ;btCapsuleShapeZ.prototype.__class__=btCapsuleShapeZ;btCapsuleShapeZ.__cache__={};Module["btCapsuleShapeZ"]=btCapsuleShapeZ;btCapsuleShapeZ.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCapsuleShapeZ_setLocalScaling_1(self,arg0)});btCapsuleShapeZ.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCapsuleShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btCapsuleShapeZ.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCapsuleShapeZ___destroy___0(self)});function btDefaultVehicleRaycaster(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btDefaultVehicleRaycaster_btDefaultVehicleRaycaster_1(arg0);getCache(btDefaultVehicleRaycaster)[this.ptr]=this}btDefaultVehicleRaycaster.prototype=Object.create(btVehicleRaycaster.prototype);btDefaultVehicleRaycaster.prototype.constructor=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.prototype.__class__=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.__cache__={};Module["btDefaultVehicleRaycaster"]=btDefaultVehicleRaycaster;btDefaultVehicleRaycaster.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDefaultVehicleRaycaster___destroy___0(self)});function RayResultCallback(){throw"cannot construct a RayResultCallback, no constructor in IDL"}RayResultCallback.prototype=Object.create(WrapperObject.prototype);RayResultCallback.prototype.constructor=RayResultCallback;RayResultCallback.prototype.__class__=RayResultCallback;RayResultCallback.__cache__={};Module["RayResultCallback"]=RayResultCallback;RayResultCallback.prototype["hasHit"]=(function(){var self=this.ptr;return _emscripten_bind_RayResultCallback_hasHit_0(self)});RayResultCallback.prototype["get_m_collisionFilterGroup"]=(function(){var self=this.ptr;return _emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0(self)});RayResultCallback.prototype["set_m_collisionFilterGroup"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1(self,arg0)});RayResultCallback.prototype["get_m_collisionFilterMask"]=(function(){var self=this.ptr;return _emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0(self)});RayResultCallback.prototype["set_m_collisionFilterMask"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1(self,arg0)});RayResultCallback.prototype["get_m_collisionObject"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_RayResultCallback_get_m_collisionObject_0(self),btCollisionObject)});RayResultCallback.prototype["set_m_collisionObject"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_RayResultCallback_set_m_collisionObject_1(self,arg0)});RayResultCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_RayResultCallback___destroy___0(self)});function btWheelInfo(){throw"cannot construct a btWheelInfo, no constructor in IDL"}btWheelInfo.prototype=Object.create(WrapperObject.prototype);btWheelInfo.prototype.constructor=btWheelInfo;btWheelInfo.prototype.__class__=btWheelInfo;btWheelInfo.__cache__={};Module["btWheelInfo"]=btWheelInfo;btWheelInfo.prototype["get_m_suspensionStiffness"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_suspensionStiffness_0(self)});btWheelInfo.prototype["set_m_suspensionStiffness"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_suspensionStiffness_1(self,arg0)});btWheelInfo.prototype["get_m_frictionSlip"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_frictionSlip_0(self)});btWheelInfo.prototype["set_m_frictionSlip"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_frictionSlip_1(self,arg0)});btWheelInfo.prototype["get_m_rollInfluence"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_rollInfluence_0(self)});btWheelInfo.prototype["set_m_rollInfluence"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_rollInfluence_1(self,arg0)});btWheelInfo.prototype["get_m_suspensionRestLength1"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_suspensionRestLength1_0(self)});btWheelInfo.prototype["set_m_suspensionRestLength1"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_suspensionRestLength1_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsRadius"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsRadius_0(self)});btWheelInfo.prototype["set_m_wheelsRadius"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_wheelsRadius_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsDampingCompression"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsDampingCompression_0(self)});btWheelInfo.prototype["set_m_wheelsDampingCompression"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_wheelsDampingCompression_1(self,arg0)});btWheelInfo.prototype["get_m_wheelsDampingRelaxation"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_wheelsDampingRelaxation_0(self)});btWheelInfo.prototype["set_m_wheelsDampingRelaxation"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_wheelsDampingRelaxation_1(self,arg0)});btWheelInfo.prototype["get_m_steering"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_steering_0(self)});btWheelInfo.prototype["set_m_steering"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_steering_1(self,arg0)});btWheelInfo.prototype["get_m_maxSuspensionForce"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_maxSuspensionForce_0(self)});btWheelInfo.prototype["set_m_maxSuspensionForce"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_maxSuspensionForce_1(self,arg0)});btWheelInfo.prototype["get_m_maxSuspensionTravelCm"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_maxSuspensionTravelCm_0(self)});btWheelInfo.prototype["set_m_maxSuspensionTravelCm"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_maxSuspensionTravelCm_1(self,arg0)});btWheelInfo.prototype["get_m_bIsFrontWheel"]=(function(){var self=this.ptr;return _emscripten_bind_btWheelInfo_get_m_bIsFrontWheel_0(self)});btWheelInfo.prototype["set_m_bIsFrontWheel"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btWheelInfo_set_m_bIsFrontWheel_1(self,arg0)});btWheelInfo.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btWheelInfo___destroy___0(self)});function btConcaveShape(){throw"cannot construct a btConcaveShape, no constructor in IDL"}btConcaveShape.prototype=Object.create(btCollisionShape.prototype);btConcaveShape.prototype.constructor=btConcaveShape;btConcaveShape.prototype.__class__=btConcaveShape;btConcaveShape.__cache__={};Module["btConcaveShape"]=btConcaveShape;btConcaveShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConcaveShape_setLocalScaling_1(self,arg0)});btConcaveShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btConcaveShape_calculateLocalInertia_2(self,arg0,arg1)});btConcaveShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConcaveShape___destroy___0(self)});function btVector4(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg0===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_0();getCache(btVector4)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_1(arg0);getCache(btVector4)[this.ptr]=this;return}if(arg2===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_2(arg0,arg1);getCache(btVector4)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btVector4_btVector4_3(arg0,arg1,arg2);getCache(btVector4)[this.ptr]=this;return}this.ptr=_emscripten_bind_btVector4_btVector4_4(arg0,arg1,arg2,arg3);getCache(btVector4)[this.ptr]=this}btVector4.prototype=Object.create(btVector3.prototype);btVector4.prototype.constructor=btVector4;btVector4.prototype.__class__=btVector4;btVector4.__cache__={};Module["btVector4"]=btVector4;btVector4.prototype["w"]=(function(){var self=this.ptr;return _emscripten_bind_btVector4_w_0(self)});btVector4.prototype["setValue"]=(function(arg0,arg1,arg2,arg3){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);_emscripten_bind_btVector4_setValue_4(self,arg0,arg1,arg2,arg3)});btVector4.prototype["length"]=(function(){var self=this.ptr;return _emscripten_bind_btVector4_length_0(self)});btVector4.prototype["x"]=(function(){var self=this.ptr;return _emscripten_bind_btVector4_x_0(self)});btVector4.prototype["y"]=(function(){var self=this.ptr;return _emscripten_bind_btVector4_y_0(self)});btVector4.prototype["z"]=(function(){var self=this.ptr;return _emscripten_bind_btVector4_z_0(self)});btVector4.prototype["setX"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector4_setX_1(self,arg0)});btVector4.prototype["setY"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector4_setY_1(self,arg0)});btVector4.prototype["setZ"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector4_setZ_1(self,arg0)});btVector4.prototype["op_mul"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btVector4_op_mul_1(self,arg0),btVector3)});btVector4.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btVector4___destroy___0(self)});function btKinematicCharacterController(arg0,arg1,arg2,arg3){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg3===undefined){this.ptr=_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3(arg0,arg1,arg2);getCache(btKinematicCharacterController)[this.ptr]=this;return}this.ptr=_emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4(arg0,arg1,arg2,arg3);getCache(btKinematicCharacterController)[this.ptr]=this}btKinematicCharacterController.prototype=Object.create(btActionInterface.prototype);btKinematicCharacterController.prototype.constructor=btKinematicCharacterController;btKinematicCharacterController.prototype.__class__=btKinematicCharacterController;btKinematicCharacterController.__cache__={};Module["btKinematicCharacterController"]=btKinematicCharacterController;btKinematicCharacterController.prototype["setUpAxis"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setUpAxis_1(self,arg0)});btKinematicCharacterController.prototype["setWalkDirection"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setWalkDirection_1(self,arg0)});btKinematicCharacterController.prototype["setVelocityForTimeInterval"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2(self,arg0,arg1)});btKinematicCharacterController.prototype["warp"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_warp_1(self,arg0)});btKinematicCharacterController.prototype["preStep"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_preStep_1(self,arg0)});btKinematicCharacterController.prototype["playerStep"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btKinematicCharacterController_playerStep_2(self,arg0,arg1)});btKinematicCharacterController.prototype["setFallSpeed"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setFallSpeed_1(self,arg0)});btKinematicCharacterController.prototype["setJumpSpeed"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setJumpSpeed_1(self,arg0)});btKinematicCharacterController.prototype["setMaxJumpHeight"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1(self,arg0)});btKinematicCharacterController.prototype["canJump"]=(function(){var self=this.ptr;return _emscripten_bind_btKinematicCharacterController_canJump_0(self)});btKinematicCharacterController.prototype["jump"]=(function(){var self=this.ptr;_emscripten_bind_btKinematicCharacterController_jump_0(self)});btKinematicCharacterController.prototype["setGravity"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setGravity_1(self,arg0)});btKinematicCharacterController.prototype["getGravity"]=(function(){var self=this.ptr;return _emscripten_bind_btKinematicCharacterController_getGravity_0(self)});btKinematicCharacterController.prototype["setMaxSlope"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setMaxSlope_1(self,arg0)});btKinematicCharacterController.prototype["getMaxSlope"]=(function(){var self=this.ptr;return _emscripten_bind_btKinematicCharacterController_getMaxSlope_0(self)});btKinematicCharacterController.prototype["getGhostObject"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btKinematicCharacterController_getGhostObject_0(self),btPairCachingGhostObject)});btKinematicCharacterController.prototype["setUseGhostSweepTest"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1(self,arg0)});btKinematicCharacterController.prototype["onGround"]=(function(){var self=this.ptr;return _emscripten_bind_btKinematicCharacterController_onGround_0(self)});btKinematicCharacterController.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btKinematicCharacterController___destroy___0(self)});function btStaticPlaneShape(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);this.ptr=_emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2(arg0,arg1);getCache(btStaticPlaneShape)[this.ptr]=this}btStaticPlaneShape.prototype=Object.create(btConcaveShape.prototype);btStaticPlaneShape.prototype.constructor=btStaticPlaneShape;btStaticPlaneShape.prototype.__class__=btStaticPlaneShape;btStaticPlaneShape.__cache__={};Module["btStaticPlaneShape"]=btStaticPlaneShape;btStaticPlaneShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btStaticPlaneShape_setLocalScaling_1(self,arg0)});btStaticPlaneShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2(self,arg0,arg1)});btStaticPlaneShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btStaticPlaneShape___destroy___0(self)});function btActionInterface(){throw"cannot construct a btActionInterface, no constructor in IDL"}btActionInterface.prototype=Object.create(WrapperObject.prototype);btActionInterface.prototype.constructor=btActionInterface;btActionInterface.prototype.__class__=btActionInterface;btActionInterface.__cache__={};Module["btActionInterface"]=btActionInterface;btActionInterface.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btActionInterface___destroy___0(self)});function btOverlappingPairCache(){throw"cannot construct a btOverlappingPairCache, no constructor in IDL"}btOverlappingPairCache.prototype=Object.create(WrapperObject.prototype);btOverlappingPairCache.prototype.constructor=btOverlappingPairCache;btOverlappingPairCache.prototype.__class__=btOverlappingPairCache;btOverlappingPairCache.__cache__={};Module["btOverlappingPairCache"]=btOverlappingPairCache;btOverlappingPairCache.prototype["setInternalGhostPairCallback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1(self,arg0)});btOverlappingPairCache.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btOverlappingPairCache___destroy___0(self)});function btVector3(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg0===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_0();getCache(btVector3)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_1(arg0);getCache(btVector3)[this.ptr]=this;return}if(arg2===undefined){this.ptr=_emscripten_bind_btVector3_btVector3_2(arg0,arg1);getCache(btVector3)[this.ptr]=this;return}this.ptr=_emscripten_bind_btVector3_btVector3_3(arg0,arg1,arg2);getCache(btVector3)[this.ptr]=this}btVector3.prototype=Object.create(WrapperObject.prototype);btVector3.prototype.constructor=btVector3;btVector3.prototype.__class__=btVector3;btVector3.__cache__={};Module["btVector3"]=btVector3;btVector3.prototype["length"]=(function(){var self=this.ptr;return _emscripten_bind_btVector3_length_0(self)});btVector3.prototype["x"]=(function(){var self=this.ptr;return _emscripten_bind_btVector3_x_0(self)});btVector3.prototype["y"]=(function(){var self=this.ptr;return _emscripten_bind_btVector3_y_0(self)});btVector3.prototype["z"]=(function(){var self=this.ptr;return _emscripten_bind_btVector3_z_0(self)});btVector3.prototype["setX"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector3_setX_1(self,arg0)});btVector3.prototype["setY"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector3_setY_1(self,arg0)});btVector3.prototype["setZ"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btVector3_setZ_1(self,arg0)});btVector3.prototype["setValue"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btVector3_setValue_3(self,arg0,arg1,arg2)});btVector3.prototype["op_mul"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btVector3_op_mul_1(self,arg0),btVector3)});btVector3.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btVector3___destroy___0(self)});function btVehicleRaycaster(){throw"cannot construct a btVehicleRaycaster, no constructor in IDL"}btVehicleRaycaster.prototype=Object.create(WrapperObject.prototype);btVehicleRaycaster.prototype.constructor=btVehicleRaycaster;btVehicleRaycaster.prototype.__class__=btVehicleRaycaster;btVehicleRaycaster.__cache__={};Module["btVehicleRaycaster"]=btVehicleRaycaster;btVehicleRaycaster.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btVehicleRaycaster___destroy___0(self)});function btSphereShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btSphereShape_btSphereShape_1(arg0);getCache(btSphereShape)[this.ptr]=this}btSphereShape.prototype=Object.create(btCollisionShape.prototype);btSphereShape.prototype.constructor=btSphereShape;btSphereShape.prototype.__class__=btSphereShape;btSphereShape.__cache__={};Module["btSphereShape"]=btSphereShape;btSphereShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btSphereShape_setLocalScaling_1(self,arg0)});btSphereShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btSphereShape_calculateLocalInertia_2(self,arg0,arg1)});btSphereShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btSphereShape___destroy___0(self)});function btDefaultCollisionConstructionInfo(){this.ptr=_emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0();getCache(btDefaultCollisionConstructionInfo)[this.ptr]=this}btDefaultCollisionConstructionInfo.prototype=Object.create(WrapperObject.prototype);btDefaultCollisionConstructionInfo.prototype.constructor=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.prototype.__class__=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.__cache__={};Module["btDefaultCollisionConstructionInfo"]=btDefaultCollisionConstructionInfo;btDefaultCollisionConstructionInfo.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0(self)});function btHingeConstraint(arg0,arg1,arg2,arg3,arg4,arg5,arg6){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg5&&typeof arg5==="object")arg5=arg5.ptr;else arg5=ensureString(arg5);if(arg6&&typeof arg6==="object")arg6=arg6.ptr;else arg6=ensureString(arg6);if(arg2===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_2(arg0,arg1);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg3===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_3(arg0,arg1,arg2);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg4===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_4(arg0,arg1,arg2,arg3);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg5===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_5(arg0,arg1,arg2,arg3,arg4);getCache(btHingeConstraint)[this.ptr]=this;return}if(arg6===undefined){this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_6(arg0,arg1,arg2,arg3,arg4,arg5);getCache(btHingeConstraint)[this.ptr]=this;return}this.ptr=_emscripten_bind_btHingeConstraint_btHingeConstraint_7(arg0,arg1,arg2,arg3,arg4,arg5,arg6);getCache(btHingeConstraint)[this.ptr]=this}btHingeConstraint.prototype=Object.create(btTypedConstraint.prototype);btHingeConstraint.prototype.constructor=btHingeConstraint;btHingeConstraint.prototype.__class__=btHingeConstraint;btHingeConstraint.__cache__={};Module["btHingeConstraint"]=btHingeConstraint;btHingeConstraint.prototype["setLimit"]=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg4===undefined){_emscripten_bind_btHingeConstraint_setLimit_4(self,arg0,arg1,arg2,arg3);return}_emscripten_bind_btHingeConstraint_setLimit_5(self,arg0,arg1,arg2,arg3,arg4)});btHingeConstraint.prototype["enableFeedback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btHingeConstraint_enableFeedback_1(self,arg0)});btHingeConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btHingeConstraint___destroy___0(self)});function btCollisionShape(){throw"cannot construct a btCollisionShape, no constructor in IDL"}btCollisionShape.prototype=Object.create(WrapperObject.prototype);btCollisionShape.prototype.constructor=btCollisionShape;btCollisionShape.prototype.__class__=btCollisionShape;btCollisionShape.__cache__={};Module["btCollisionShape"]=btCollisionShape;btCollisionShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCollisionShape_setLocalScaling_1(self,arg0)});btCollisionShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCollisionShape_calculateLocalInertia_2(self,arg0,arg1)});btCollisionShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCollisionShape___destroy___0(self)});function btConstraintSetting(){this.ptr=_emscripten_bind_btConstraintSetting_btConstraintSetting_0();getCache(btConstraintSetting)[this.ptr]=this}btConstraintSetting.prototype=Object.create(WrapperObject.prototype);btConstraintSetting.prototype.constructor=btConstraintSetting;btConstraintSetting.prototype.__class__=btConstraintSetting;btConstraintSetting.__cache__={};Module["btConstraintSetting"]=btConstraintSetting;btConstraintSetting.prototype["get_m_tau"]=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_tau_0(self)});btConstraintSetting.prototype["set_m_tau"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConstraintSetting_set_m_tau_1(self,arg0)});btConstraintSetting.prototype["get_m_damping"]=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_damping_0(self)});btConstraintSetting.prototype["set_m_damping"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConstraintSetting_set_m_damping_1(self,arg0)});btConstraintSetting.prototype["get_m_impulseClamp"]=(function(){var self=this.ptr;return _emscripten_bind_btConstraintSetting_get_m_impulseClamp_0(self)});btConstraintSetting.prototype["set_m_impulseClamp"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btConstraintSetting_set_m_impulseClamp_1(self,arg0)});btConstraintSetting.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConstraintSetting___destroy___0(self)});function btGhostObject(){this.ptr=_emscripten_bind_btGhostObject_btGhostObject_0();getCache(btGhostObject)[this.ptr]=this}btGhostObject.prototype=Object.create(btCollisionObject.prototype);btGhostObject.prototype.constructor=btGhostObject;btGhostObject.prototype.__class__=btGhostObject;btGhostObject.__cache__={};Module["btGhostObject"]=btGhostObject;btGhostObject.prototype["getNumOverlappingObjects"]=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_getNumOverlappingObjects_0(self)});btGhostObject.prototype["getOverlappingObject"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btGhostObject_getOverlappingObject_1(self,arg0),btCollisionObject)});btGhostObject.prototype["getCollisionShape"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getCollisionShape_0(self),btCollisionShape)});btGhostObject.prototype["setContactProcessingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setContactProcessingThreshold_1(self,arg0)});btGhostObject.prototype["setActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setActivationState_1(self,arg0)});btGhostObject.prototype["forceActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_forceActivationState_1(self,arg0)});btGhostObject.prototype["activate"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){_emscripten_bind_btGhostObject_activate_0(self);return}_emscripten_bind_btGhostObject_activate_1(self,arg0)});btGhostObject.prototype["isActive"]=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_isActive_0(self)});btGhostObject.prototype["isKinematicObject"]=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_isKinematicObject_0(self)});btGhostObject.prototype["setRestitution"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setRestitution_1(self,arg0)});btGhostObject.prototype["setFriction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setFriction_1(self,arg0)});btGhostObject.prototype["getWorldTransform"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btGhostObject_getWorldTransform_0(self),btTransform)});btGhostObject.prototype["getCollisionFlags"]=(function(){var self=this.ptr;return _emscripten_bind_btGhostObject_getCollisionFlags_0(self)});btGhostObject.prototype["setCollisionFlags"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setCollisionFlags_1(self,arg0)});btGhostObject.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setWorldTransform_1(self,arg0)});btGhostObject.prototype["setCollisionShape"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setCollisionShape_1(self,arg0)});btGhostObject.prototype["setCcdMotionThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setCcdMotionThreshold_1(self,arg0)});btGhostObject.prototype["setCcdSweptSphereRadius"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1(self,arg0)});btGhostObject.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btGhostObject___destroy___0(self)});function LocalShapeInfo(){throw"cannot construct a LocalShapeInfo, no constructor in IDL"}LocalShapeInfo.prototype=Object.create(WrapperObject.prototype);LocalShapeInfo.prototype.constructor=LocalShapeInfo;LocalShapeInfo.prototype.__class__=LocalShapeInfo;LocalShapeInfo.__cache__={};Module["LocalShapeInfo"]=LocalShapeInfo;LocalShapeInfo.prototype["get_m_shapePart"]=(function(){var self=this.ptr;return _emscripten_bind_LocalShapeInfo_get_m_shapePart_0(self)});LocalShapeInfo.prototype["set_m_shapePart"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalShapeInfo_set_m_shapePart_1(self,arg0)});LocalShapeInfo.prototype["get_m_triangleIndex"]=(function(){var self=this.ptr;return _emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0(self)});LocalShapeInfo.prototype["set_m_triangleIndex"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1(self,arg0)});LocalShapeInfo.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_LocalShapeInfo___destroy___0(self)});function btConstraintSolver(){throw"cannot construct a btConstraintSolver, no constructor in IDL"}btConstraintSolver.prototype=Object.create(WrapperObject.prototype);btConstraintSolver.prototype.constructor=btConstraintSolver;btConstraintSolver.prototype.__class__=btConstraintSolver;btConstraintSolver.__cache__={};Module["btConstraintSolver"]=btConstraintSolver;btConstraintSolver.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btConstraintSolver___destroy___0(self)});function btRaycastVehicle(arg0,arg1,arg2){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);this.ptr=_emscripten_bind_btRaycastVehicle_btRaycastVehicle_3(arg0,arg1,arg2);getCache(btRaycastVehicle)[this.ptr]=this}btRaycastVehicle.prototype=Object.create(btActionInterface.prototype);btRaycastVehicle.prototype.constructor=btRaycastVehicle;btRaycastVehicle.prototype.__class__=btRaycastVehicle;btRaycastVehicle.__cache__={};Module["btRaycastVehicle"]=btRaycastVehicle;btRaycastVehicle.prototype["applyEngineForce"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRaycastVehicle_applyEngineForce_2(self,arg0,arg1)});btRaycastVehicle.prototype["setSteeringValue"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRaycastVehicle_setSteeringValue_2(self,arg0,arg1)});btRaycastVehicle.prototype["getWheelTransformWS"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelTransformWS_1(self,arg0),btTransform)});btRaycastVehicle.prototype["updateWheelTransform"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRaycastVehicle_updateWheelTransform_2(self,arg0,arg1)});btRaycastVehicle.prototype["addWheel"]=(function(arg0,arg1,arg2,arg3,arg4,arg5,arg6){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);if(arg5&&typeof arg5==="object")arg5=arg5.ptr;else arg5=ensureString(arg5);if(arg6&&typeof arg6==="object")arg6=arg6.ptr;else arg6=ensureString(arg6);return wrapPointer(_emscripten_bind_btRaycastVehicle_addWheel_7(self,arg0,arg1,arg2,arg3,arg4,arg5,arg6),btWheelInfo)});btRaycastVehicle.prototype["getNumWheels"]=(function(){var self=this.ptr;return _emscripten_bind_btRaycastVehicle_getNumWheels_0(self)});btRaycastVehicle.prototype["getRigidBody"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRaycastVehicle_getRigidBody_0(self),btRigidBody)});btRaycastVehicle.prototype["getWheelInfo"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btRaycastVehicle_getWheelInfo_1(self,arg0),btWheelInfo)});btRaycastVehicle.prototype["setBrake"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRaycastVehicle_setBrake_2(self,arg0,arg1)});btRaycastVehicle.prototype["setCoordinateSystem"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btRaycastVehicle_setCoordinateSystem_3(self,arg0,arg1,arg2)});btRaycastVehicle.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btRaycastVehicle___destroy___0(self)});function LocalConvexResult(arg0,arg1,arg2,arg3,arg4){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);this.ptr=_emscripten_bind_LocalConvexResult_LocalConvexResult_5(arg0,arg1,arg2,arg3,arg4);getCache(LocalConvexResult)[this.ptr]=this}LocalConvexResult.prototype=Object.create(WrapperObject.prototype);LocalConvexResult.prototype.constructor=LocalConvexResult;LocalConvexResult.prototype.__class__=LocalConvexResult;LocalConvexResult.__cache__={};Module["LocalConvexResult"]=LocalConvexResult;LocalConvexResult.prototype["get_m_hitCollisionObject"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitCollisionObject_0(self),btCollisionObject)});LocalConvexResult.prototype["set_m_hitCollisionObject"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalConvexResult_set_m_hitCollisionObject_1(self,arg0)});LocalConvexResult.prototype["get_m_localShapeInfo"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_localShapeInfo_0(self),LocalShapeInfo)});LocalConvexResult.prototype["set_m_localShapeInfo"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalConvexResult_set_m_localShapeInfo_1(self,arg0)});LocalConvexResult.prototype["get_m_hitNormalLocal"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitNormalLocal_0(self),btVector3)});LocalConvexResult.prototype["set_m_hitNormalLocal"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalConvexResult_set_m_hitNormalLocal_1(self,arg0)});LocalConvexResult.prototype["get_m_hitPointLocal"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_LocalConvexResult_get_m_hitPointLocal_0(self),btVector3)});LocalConvexResult.prototype["set_m_hitPointLocal"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalConvexResult_set_m_hitPointLocal_1(self,arg0)});LocalConvexResult.prototype["get_m_hitFraction"]=(function(){var self=this.ptr;return _emscripten_bind_LocalConvexResult_get_m_hitFraction_0(self)});LocalConvexResult.prototype["set_m_hitFraction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_LocalConvexResult_set_m_hitFraction_1(self,arg0)});LocalConvexResult.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_LocalConvexResult___destroy___0(self)});function btOverlappingPairCallback(){throw"cannot construct a btOverlappingPairCallback, no constructor in IDL"}btOverlappingPairCallback.prototype=Object.create(WrapperObject.prototype);btOverlappingPairCallback.prototype.constructor=btOverlappingPairCallback;btOverlappingPairCallback.prototype.__class__=btOverlappingPairCallback;btOverlappingPairCallback.__cache__={};Module["btOverlappingPairCallback"]=btOverlappingPairCallback;btOverlappingPairCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btOverlappingPairCallback___destroy___0(self)});function btRigidBody(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btRigidBody_btRigidBody_1(arg0);getCache(btRigidBody)[this.ptr]=this}btRigidBody.prototype=Object.create(btCollisionObject.prototype);btRigidBody.prototype.constructor=btRigidBody;btRigidBody.prototype.__class__=btRigidBody;btRigidBody.__cache__={};Module["btRigidBody"]=btRigidBody;btRigidBody.prototype["getCenterOfMassTransform"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getCenterOfMassTransform_0(self),btTransform)});btRigidBody.prototype["setCenterOfMassTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setCenterOfMassTransform_1(self,arg0)});btRigidBody.prototype["setSleepingThresholds"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRigidBody_setSleepingThresholds_2(self,arg0,arg1)});btRigidBody.prototype["setDamping"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRigidBody_setDamping_2(self,arg0,arg1)});btRigidBody.prototype["setMassProps"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRigidBody_setMassProps_2(self,arg0,arg1)});btRigidBody.prototype["setLinearFactor"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setLinearFactor_1(self,arg0)});btRigidBody.prototype["applyTorque"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_applyTorque_1(self,arg0)});btRigidBody.prototype["applyForce"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRigidBody_applyForce_2(self,arg0,arg1)});btRigidBody.prototype["applyCentralForce"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_applyCentralForce_1(self,arg0)});btRigidBody.prototype["applyTorqueImpulse"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_applyTorqueImpulse_1(self,arg0)});btRigidBody.prototype["applyImpulse"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btRigidBody_applyImpulse_2(self,arg0,arg1)});btRigidBody.prototype["applyCentralImpulse"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_applyCentralImpulse_1(self,arg0)});btRigidBody.prototype["updateInertiaTensor"]=(function(){var self=this.ptr;_emscripten_bind_btRigidBody_updateInertiaTensor_0(self)});btRigidBody.prototype["getLinearVelocity"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getLinearVelocity_0(self),btVector3)});btRigidBody.prototype["getAngularVelocity"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getAngularVelocity_0(self),btVector3)});btRigidBody.prototype["setLinearVelocity"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setLinearVelocity_1(self,arg0)});btRigidBody.prototype["setAngularVelocity"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setAngularVelocity_1(self,arg0)});btRigidBody.prototype["getMotionState"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getMotionState_0(self),btMotionState)});btRigidBody.prototype["setAngularFactor"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setAngularFactor_1(self,arg0)});btRigidBody.prototype["upcast"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);return wrapPointer(_emscripten_bind_btRigidBody_upcast_1(self,arg0),btRigidBody)});btRigidBody.prototype["getCollisionShape"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getCollisionShape_0(self),btCollisionShape)});btRigidBody.prototype["setContactProcessingThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setContactProcessingThreshold_1(self,arg0)});btRigidBody.prototype["setActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setActivationState_1(self,arg0)});btRigidBody.prototype["forceActivationState"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_forceActivationState_1(self,arg0)});btRigidBody.prototype["activate"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg0===undefined){_emscripten_bind_btRigidBody_activate_0(self);return}_emscripten_bind_btRigidBody_activate_1(self,arg0)});btRigidBody.prototype["isActive"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBody_isActive_0(self)});btRigidBody.prototype["isKinematicObject"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBody_isKinematicObject_0(self)});btRigidBody.prototype["setRestitution"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setRestitution_1(self,arg0)});btRigidBody.prototype["setFriction"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setFriction_1(self,arg0)});btRigidBody.prototype["getWorldTransform"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btRigidBody_getWorldTransform_0(self),btTransform)});btRigidBody.prototype["getCollisionFlags"]=(function(){var self=this.ptr;return _emscripten_bind_btRigidBody_getCollisionFlags_0(self)});btRigidBody.prototype["setCollisionFlags"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setCollisionFlags_1(self,arg0)});btRigidBody.prototype["setWorldTransform"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setWorldTransform_1(self,arg0)});btRigidBody.prototype["setCollisionShape"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setCollisionShape_1(self,arg0)});btRigidBody.prototype["setCcdMotionThreshold"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setCcdMotionThreshold_1(self,arg0)});btRigidBody.prototype["setCcdSweptSphereRadius"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1(self,arg0)});btRigidBody.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btRigidBody___destroy___0(self)});function btCylinderShapeX(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btCylinderShapeX_btCylinderShapeX_1(arg0);getCache(btCylinderShapeX)[this.ptr]=this}btCylinderShapeX.prototype=Object.create(btCylinderShape.prototype);btCylinderShapeX.prototype.constructor=btCylinderShapeX;btCylinderShapeX.prototype.__class__=btCylinderShapeX;btCylinderShapeX.__cache__={};Module["btCylinderShapeX"]=btCylinderShapeX;btCylinderShapeX.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCylinderShapeX_setLocalScaling_1(self,arg0)});btCylinderShapeX.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCylinderShapeX_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShapeX.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCylinderShapeX___destroy___0(self)});function btCylinderShapeZ(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btCylinderShapeZ_btCylinderShapeZ_1(arg0);getCache(btCylinderShapeZ)[this.ptr]=this}btCylinderShapeZ.prototype=Object.create(btCylinderShape.prototype);btCylinderShapeZ.prototype.constructor=btCylinderShapeZ;btCylinderShapeZ.prototype.__class__=btCylinderShapeZ;btCylinderShapeZ.__cache__={};Module["btCylinderShapeZ"]=btCylinderShapeZ;btCylinderShapeZ.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCylinderShapeZ_setLocalScaling_1(self,arg0)});btCylinderShapeZ.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCylinderShapeZ_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShapeZ.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCylinderShapeZ___destroy___0(self)});function btTransform(arg0,arg1){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg0===undefined){this.ptr=_emscripten_bind_btTransform_btTransform_0();getCache(btTransform)[this.ptr]=this;return}if(arg1===undefined){this.ptr=_emscripten_bind_btTransform_btTransform_1(arg0);getCache(btTransform)[this.ptr]=this;return}this.ptr=_emscripten_bind_btTransform_btTransform_2(arg0,arg1);getCache(btTransform)[this.ptr]=this}btTransform.prototype=Object.create(WrapperObject.prototype);btTransform.prototype.constructor=btTransform;btTransform.prototype.__class__=btTransform;btTransform.__cache__={};Module["btTransform"]=btTransform;btTransform.prototype["setIdentity"]=(function(){var self=this.ptr;_emscripten_bind_btTransform_setIdentity_0(self)});btTransform.prototype["setOrigin"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btTransform_setOrigin_1(self,arg0)});btTransform.prototype["setRotation"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btTransform_setRotation_1(self,arg0)});btTransform.prototype["getOrigin"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getOrigin_0(self),btVector3)});btTransform.prototype["getRotation"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getRotation_0(self),btQuaternion)});btTransform.prototype["getBasis"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btTransform_getBasis_0(self),btMatrix3x3)});btTransform.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btTransform___destroy___0(self)});function btCollisionWorld(){throw"cannot construct a btCollisionWorld, no constructor in IDL"}btCollisionWorld.prototype=Object.create(WrapperObject.prototype);btCollisionWorld.prototype.constructor=btCollisionWorld;btCollisionWorld.prototype.__class__=btCollisionWorld;btCollisionWorld.__cache__={};Module["btCollisionWorld"]=btCollisionWorld;btCollisionWorld.prototype["getDispatcher"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatcher_0(self),btDispatcher)});btCollisionWorld.prototype["rayTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btCollisionWorld_rayTest_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["getPairCache"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getPairCache_0(self),btOverlappingPairCache)});btCollisionWorld.prototype["getDispatchInfo"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getDispatchInfo_0(self),btDispatcherInfo)});btCollisionWorld.prototype["addCollisionObject"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg1===undefined){_emscripten_bind_btCollisionWorld_addCollisionObject_1(self,arg0);return}if(arg2===undefined){_emscripten_bind_btCollisionWorld_addCollisionObject_2(self,arg0,arg1);return}_emscripten_bind_btCollisionWorld_addCollisionObject_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["getBroadphase"]=(function(){var self=this.ptr;return wrapPointer(_emscripten_bind_btCollisionWorld_getBroadphase_0(self),btBroadphaseInterface)});btCollisionWorld.prototype["convexSweepTest"]=(function(arg0,arg1,arg2,arg3,arg4){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);if(arg3&&typeof arg3==="object")arg3=arg3.ptr;else arg3=ensureString(arg3);if(arg4&&typeof arg4==="object")arg4=arg4.ptr;else arg4=ensureString(arg4);_emscripten_bind_btCollisionWorld_convexSweepTest_5(self,arg0,arg1,arg2,arg3,arg4)});btCollisionWorld.prototype["contactPairTest"]=(function(arg0,arg1,arg2){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);if(arg2&&typeof arg2==="object")arg2=arg2.ptr;else arg2=ensureString(arg2);_emscripten_bind_btCollisionWorld_contactPairTest_3(self,arg0,arg1,arg2)});btCollisionWorld.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCollisionWorld___destroy___0(self)});function btQuadWord(){throw"cannot construct a btQuadWord, no constructor in IDL"}btQuadWord.prototype=Object.create(WrapperObject.prototype);btQuadWord.prototype.constructor=btQuadWord;btQuadWord.prototype.__class__=btQuadWord;btQuadWord.__cache__={};Module["btQuadWord"]=btQuadWord;btQuadWord.prototype["x"]=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_x_0(self)});btQuadWord.prototype["y"]=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_y_0(self)});btQuadWord.prototype["z"]=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_z_0(self)});btQuadWord.prototype["w"]=(function(){var self=this.ptr;return _emscripten_bind_btQuadWord_w_0(self)});btQuadWord.prototype["setX"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuadWord_setX_1(self,arg0)});btQuadWord.prototype["setY"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuadWord_setY_1(self,arg0)});btQuadWord.prototype["setZ"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuadWord_setZ_1(self,arg0)});btQuadWord.prototype["setW"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btQuadWord_setW_1(self,arg0)});btQuadWord.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btQuadWord___destroy___0(self)});function btCylinderShape(arg0){if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);this.ptr=_emscripten_bind_btCylinderShape_btCylinderShape_1(arg0);getCache(btCylinderShape)[this.ptr]=this}btCylinderShape.prototype=Object.create(btCollisionShape.prototype);btCylinderShape.prototype.constructor=btCylinderShape;btCylinderShape.prototype.__class__=btCylinderShape;btCylinderShape.__cache__={};Module["btCylinderShape"]=btCylinderShape;btCylinderShape.prototype["setLocalScaling"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btCylinderShape_setLocalScaling_1(self,arg0)});btCylinderShape.prototype["calculateLocalInertia"]=(function(arg0,arg1){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);if(arg1&&typeof arg1==="object")arg1=arg1.ptr;else arg1=ensureString(arg1);_emscripten_bind_btCylinderShape_calculateLocalInertia_2(self,arg0,arg1)});btCylinderShape.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btCylinderShape___destroy___0(self)});function btGhostPairCallback(){this.ptr=_emscripten_bind_btGhostPairCallback_btGhostPairCallback_0();getCache(btGhostPairCallback)[this.ptr]=this}btGhostPairCallback.prototype=Object.create(WrapperObject.prototype);btGhostPairCallback.prototype.constructor=btGhostPairCallback;btGhostPairCallback.prototype.__class__=btGhostPairCallback;btGhostPairCallback.__cache__={};Module["btGhostPairCallback"]=btGhostPairCallback;btGhostPairCallback.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btGhostPairCallback___destroy___0(self)});function btTypedConstraint(){throw"cannot construct a btTypedConstraint, no constructor in IDL"}btTypedConstraint.prototype=Object.create(WrapperObject.prototype);btTypedConstraint.prototype.constructor=btTypedConstraint;btTypedConstraint.prototype.__class__=btTypedConstraint;btTypedConstraint.__cache__={};Module["btTypedConstraint"]=btTypedConstraint;btTypedConstraint.prototype["enableFeedback"]=(function(arg0){var self=this.ptr;if(arg0&&typeof arg0==="object")arg0=arg0.ptr;else arg0=ensureString(arg0);_emscripten_bind_btTypedConstraint_enableFeedback_1(self,arg0)});btTypedConstraint.prototype["__destroy__"]=(function(){var self=this.ptr;_emscripten_bind_btTypedConstraint___destroy___0(self)});
  
  this["Ammo"]=Module
  window["Ammo"]=Module
  return this;
  }).call({});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js"), "/"))

/***/ }),

/***/ "./node_modules/hypergl/lib/playcanvas/playcanvas-latest.js":
/*!******************************************************************!*\
  !*** ./node_modules/hypergl/lib/playcanvas/playcanvas-latest.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function (root, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }  else {}
}(this, function (_window, _navigator) {
  window = _window || window;
  navigator = _navigator || navigator;

  /*
 PlayCanvas Engine v1.1.0-dev revision f849b9e3
 http://playcanvas.com
 Copyright 2011-2017 PlayCanvas Ltd. All rights reserved.
*/
var pc = {version:"1.1.0-dev", revision:"f849b9e3", config:{}, common:{}, apps:{}, data:{}, unpack:function() {
  console.warn("pc.unpack has been deprecated and will be removed shortly. Please update your code.");
}, makeArray:function(arr) {
  var i, ret = [], length = arr.length;
  for (i = 0; i < length; ++i) {
    ret.push(arr[i]);
  }
  return ret;
}, type:function(obj) {
  if (obj === null) {
    return "null";
  }
  var type = typeof obj;
  if (type == "undefined" || type == "number" || type == "string" || type == "boolean") {
    return type;
  }
  return _typeLookup[Object.prototype.toString.call(obj)];
}, extend:function(target, ex) {
  var prop, copy;
  for (prop in ex) {
    copy = ex[prop];
    if (pc.type(copy) == "object") {
      target[prop] = pc.extend({}, copy);
    } else {
      if (pc.type(copy) == "array") {
        target[prop] = pc.extend([], copy);
      } else {
        target[prop] = copy;
      }
    }
  }
  return target;
}, isDefined:function(o) {
  var a;
  return o !== a;
}};
var _typeLookup = function() {
  var result = {};
  var names = ["Array", "Object", "Function", "Date", "RegExp", "Float32Array"];
  for (var i = 0; i < names.length; i++) {
    result["[object " + names[i] + "]"] = names[i].toLowerCase();
  }
  return result;
}();
if (true) {
  exports.pc = pc;
}
;(function() {
  var lastTime = 0;
  var vendors = ["ms", "moz", "webkit", "o"];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function(callback, element) {
      var currTime = (new Date).getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function(id) {
      clearTimeout(id);
    };
  }
})();
if (!String.prototype.startsWith) {
  Object.defineProperty(String.prototype, "startsWith", {enumerable:false, configurable:true, writable:true, value:function(str) {
    var that = this;
    for (var i = 0, ceil = str.length; i < ceil; i++) {
      if (that[i] !== str[i]) {
        return false;
      }
    }
    return true;
  }});
}
if (!String.prototype.endsWith) {
  Object.defineProperty(String.prototype, "endsWith", {enumerable:false, configurable:true, writable:true, value:function(str) {
    var that = this;
    for (var i = 0, ceil = str.length; i < ceil; i++) {
      if (that[i + that.length - ceil] !== str[i]) {
        return false;
      }
    }
    return true;
  }});
}
if (!String.prototype.includes) {
  String.prototype.includes = function(search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
;(function() {
  if (typeof document === "undefined") {
    return;
  }
  var fullscreenchange = function(event) {
    var e = document.createEvent("CustomEvent");
    e.initCustomEvent("fullscreenchange", true, false, null);
    event.target.dispatchEvent(e);
  };
  var fullscreenerror = function(event) {
    var e = document.createEvent("CustomEvent");
    e.initCustomEvent("fullscreenerror", true, false, null);
    event.target.dispatchEvent(e);
  };
  document.addEventListener("webkitfullscreenchange", fullscreenchange, false);
  document.addEventListener("mozfullscreenchange", fullscreenchange, false);
  document.addEventListener("MSFullscreenChange", fullscreenchange, false);
  document.addEventListener("webkitfullscreenerror", fullscreenerror, false);
  document.addEventListener("mozfullscreenerror", fullscreenerror, false);
  document.addEventListener("MSFullscreenError", fullscreenerror, false);
  if (Element.prototype.mozRequestFullScreen) {
    Element.prototype.requestFullscreen = function() {
      this.mozRequestFullScreen();
    };
  } else {
    Element.prototype.requestFullscreen = Element.prototype.requestFullscreen || Element.prototype.webkitRequestFullscreen || Element.prototype.msRequestFullscreen;
  }
  document.exitFullscreen = document.exitFullscreen || document.webkitExitFullscreen || document.mozCancelFullScreen || document.msExitFullscreen;
  if (!document.hasOwnProperty("fullscreenElement")) {
    Object.defineProperty(document, "fullscreenElement", {enumerable:true, configurable:false, get:function() {
      return document.webkitCurrentFullScreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
    }});
  }
  if (!document.hasOwnProperty("fullscreenEnabled")) {
    Object.defineProperty(document, "fullscreenEnabled", {enumerable:true, configurable:false, get:function() {
      return document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled;
    }});
  }
})();
pc.extend(pc, function() {
  var Color = function(r, g, b, a) {
    this.buffer = new ArrayBuffer(4 * 4);
    this.data = new Float32Array(this.buffer, 0, 4);
    this.data3 = new Float32Array(this.buffer, 0, 3);
    var length = r && r.length;
    if (length === 3 || length === 4) {
      this.data[0] = r[0];
      this.data[1] = r[1];
      this.data[2] = r[2];
      this.data[3] = r[3] !== undefined ? r[3] : 1.0;
    } else {
      this.data[0] = r || 0;
      this.data[1] = g || 0;
      this.data[2] = b || 0;
      this.data[3] = a !== undefined ? a : 1.0;
    }
  };
  Color.prototype = {clone:function() {
    return new pc.Color(this.data[0], this.data[1], this.data[2], this.data[3]);
  }, copy:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] = b[0];
    a[1] = b[1];
    a[2] = b[2];
    a[3] = b[3];
    return this;
  }, set:function(r, g, b, a) {
    var c = this.data;
    c[0] = r;
    c[1] = g;
    c[2] = b;
    c[3] = a === undefined ? 1 : a;
    return this;
  }, fromString:function(hex) {
    var i = parseInt(hex.replace("#", "0x"));
    var bytes;
    if (hex.length > 7) {
      bytes = pc.math.intToBytes32(i);
    } else {
      bytes = pc.math.intToBytes24(i);
      bytes[3] = 255;
    }
    this.set(bytes[0] / 255, bytes[1] / 255, bytes[2] / 255, bytes[3] / 255);
    return this;
  }, toString:function(alpha) {
    var s = "#" + ((1 << 24) + (parseInt(this.r * 255) << 16) + (parseInt(this.g * 255) << 8) + parseInt(this.b * 255)).toString(16).slice(1);
    if (alpha === true) {
      var a = parseInt(this.a * 255).toString(16);
      if (this.a < 16 / 255) {
        s += "0" + a;
      } else {
        s += a;
      }
    }
    return s;
  }};
  Object.defineProperty(Color.prototype, "r", {get:function() {
    return this.data[0];
  }, set:function(value) {
    this.data[0] = value;
  }});
  Object.defineProperty(Color.prototype, "g", {get:function() {
    return this.data[1];
  }, set:function(value) {
    this.data[1] = value;
  }});
  Object.defineProperty(Color.prototype, "b", {get:function() {
    return this.data[2];
  }, set:function(value) {
    this.data[2] = value;
  }});
  Object.defineProperty(Color.prototype, "a", {get:function() {
    return this.data[3];
  }, set:function(value) {
    this.data[3] = value;
  }});
  return {Color:Color};
}());
pc.guid = function() {
  return {create:function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }};
}();
pc.extend(pc, function() {
  var Timer = function Timer() {
    this._isRunning = false;
    this._a = 0;
    this._b = 0;
  };
  Timer.prototype = {start:function() {
    this._isRunning = true;
    this._a = pc.now();
  }, stop:function() {
    this._isRunning = false;
    this._b = pc.now();
  }, getMilliseconds:function() {
    return this._b - this._a;
  }};
  return {Timer:Timer, now:!window.performance || !window.performance.now || !window.performance.timing ? Date.now : function() {
    return window.performance.now();
  }};
}());
pc.extend(pc, function() {
  return {hashCode:function(str) {
    var hash = 0;
    if (str.length === 0) {
      return hash;
    }
    for (var i = 0; i < str.length; i++) {
      var char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return hash;
  }};
}());
pc.extend(pc, function() {
  return {createURI:function(options) {
    var s = "";
    if ((options.authority || options.scheme) && (options.host || options.hostpath)) {
      throw new Error("Can't have 'scheme' or 'authority' and 'host' or 'hostpath' option");
    }
    if (options.host && options.hostpath) {
      throw new Error("Can't have 'host' and 'hostpath' option");
    }
    if (options.path && options.hostpath) {
      throw new Error("Can't have 'path' and 'hostpath' option");
    }
    if (options.scheme) {
      s += options.scheme + ":";
    }
    if (options.authority) {
      s += "//" + options.authority;
    }
    if (options.host) {
      s += options.host;
    }
    if (options.path) {
      s += options.path;
    }
    if (options.hostpath) {
      s += options.hostpath;
    }
    if (options.query) {
      s += "?" + options.query;
    }
    if (options.fragment) {
      s += "#" + options.fragment;
    }
    return s;
  }, URI:function(uri) {
    var re = /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/, result = uri.match(re);
    this.scheme = result[2];
    this.authority = result[4];
    this.path = result[5];
    this.query = result[7];
    this.fragment = result[9];
    this.toString = function() {
      var s = "";
      if (this.scheme) {
        s += this.scheme + ":";
      }
      if (this.authority) {
        s += "//" + this.authority;
      }
      s += this.path;
      if (this.query) {
        s += "?" + this.query;
      }
      if (this.fragment) {
        s += "#" + this.fragment;
      }
      return s;
    };
    this.getQuery = function() {
      var vars;
      var pair;
      var result = {};
      if (this.query) {
        vars = decodeURIComponent(this.query).split("&");
        vars.forEach(function(item, index, arr) {
          pair = item.split("=");
          result[pair[0]] = pair[1];
        }, this);
      }
      return result;
    };
    this.setQuery = function(params) {
      var q = "";
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          if (q !== "") {
            q += "&";
          }
          q += encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
        }
      }
      this.query = q;
    };
  }};
}());
pc.extend(pc, function() {
  var log = {write:function(text) {
    console.log(text);
  }, open:function() {
    pc.log.write("Powered by PlayCanvas " + pc.version + " " + pc.revision);
  }, info:function(text) {
    console.info("INFO:    " + text);
  }, debug:function(text) {
    console.debug("DEBUG:   " + text);
  }, error:function(text) {
    console.error("ERROR:   " + text);
  }, warning:function(text) {
    console.warn("WARNING: " + text);
  }, alert:function(text) {
    pc.log.write("ALERT:   " + text);
    alert(text);
  }, assert:function(condition, text) {
    if (condition === false) {
      pc.log.write("ASSERT:  " + text);
      alert("ASSERT failed: " + text);
    }
  }};
  return {log:log};
}());
var logINFO = pc.log.info;
var logDEBUG = pc.log.debug;
var logWARNING = pc.log.warning;
var logERROR = pc.log.error;
var logALERT = pc.log.alert;
var logASSERT = pc.log.assert;
Function.prototype.extendsFrom = function(Super) {
  var Self, Func;
  var Temp = function() {
  };
  Self = this;
  Func = function() {
    Super.apply(this, arguments);
    Self.apply(this, arguments);
    this.constructor = Self;
  };
  Func._super = Super.prototype;
  Temp.prototype = Super.prototype;
  Func.prototype = new Temp;
  return Func;
};
pc.extend(pc, function() {
  return {inherits:function(Self, Super) {
    var Temp = function() {
    };
    var Func = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      Super.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      Self.call(this, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    };
    Func._super = Super.prototype;
    Temp.prototype = Super.prototype;
    Func.prototype = new Temp;
    return Func;
  }};
}());
pc.path = function() {
  return {delimiter:"/", join:function() {
    var index;
    var num = arguments.length;
    var result = arguments[0];
    for (index = 0; index < num - 1; ++index) {
      var one = arguments[index];
      var two = arguments[index + 1];
      if (!pc.isDefined(one) || !pc.isDefined(two)) {
        throw new Error("undefined argument to pc.path.join");
      }
      if (two[0] === pc.path.delimiter) {
        result = two;
        continue;
      }
      if (one && two && one[one.length - 1] !== pc.path.delimiter && two[0] !== pc.path.delimiter) {
        result += pc.path.delimiter + two;
      } else {
        result += two;
      }
    }
    return result;
  }, split:function(path) {
    var parts = path.split(pc.path.delimiter);
    var tail = parts.slice(parts.length - 1)[0];
    var head = parts.slice(0, parts.length - 1).join(pc.path.delimiter);
    return [head, tail];
  }, getBasename:function(path) {
    return pc.path.split(path)[1];
  }, getDirectory:function(path) {
    var parts = path.split(pc.path.delimiter);
    return parts.slice(0, parts.length - 1).join(pc.path.delimiter);
  }, getExtension:function(path) {
    var ext = path.split("?")[0].split(".").pop();
    if (ext !== path) {
      return "." + ext;
    } else {
      return "";
    }
  }, isRelativePath:function(s) {
    return s.charAt(0) !== "/" && s.match(/:\/\//) === null;
  }, extractPath:function(s) {
    var path = ".", parts = s.split("/"), i = 0;
    if (parts.length > 1) {
      if (pc.path.isRelativePath(s) === false) {
        path = "";
      }
      for (i = 0; i < parts.length - 1; ++i) {
        path += "/" + parts[i];
      }
    }
    return path;
  }};
}();
pc.string = function() {
  return {ASCII_LOWERCASE:"abcdefghijklmnopqrstuvwxyz", ASCII_UPPERCASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZ", ASCII_LETTERS:this.ASCII_LOWERCASE + this.ASCII_UPPERCASE, format:function(s) {
    var i = 0, regexp, args = pc.makeArray(arguments);
    args.shift();
    for (i = 0; i < args.length; i++) {
      regexp = new RegExp("\\{" + i + "\\}", "gi");
      s = s.replace(regexp, args[i]);
    }
    return s;
  }, startsWith:function(s, subs) {
    console.warn("WARNING: startsWith: Function is deprecated. Use String.startsWith instead.");
    return s.startsWith(subs);
  }, endsWith:function(s, subs) {
    console.warn("WARNING: endsWith: Function is deprecated. Use String.endsWith instead.");
    return s.endsWith(subs);
  }, toBool:function(s, strict) {
    if (s === "true") {
      return true;
    }
    if (strict) {
      if (s === "false") {
        return false;
      }
      throw new Error("Not a boolean string");
    }
    return false;
  }};
}();
pc.debug = function() {
  var table = null;
  var row = null;
  var title = null;
  var field = null;
  return {display:function(data) {
    function init() {
      table = document.createElement("table");
      row = document.createElement("tr");
      title = document.createElement("td");
      field = document.createElement("td");
      table.style.cssText = "position:absolute;font-family:sans-serif;font-size:12px;color:#cccccc";
      table.style.top = "0px";
      table.style.left = "0px";
      table.style.border = "thin solid #cccccc";
      document.body.appendChild(table);
    }
    if (!table) {
      init();
    }
    table.innerHTML = "";
    for (var key in data) {
      var r = row.cloneNode();
      var t = title.cloneNode();
      var f = field.cloneNode();
      t.textContent = key;
      f.textContent = data[key];
      r.appendChild(t);
      r.appendChild(f);
      table.appendChild(r);
    }
  }};
}();
pc.events = {attach:function(target) {
  var ev = pc.events;
  target.on = ev.on;
  target.off = ev.off;
  target.fire = ev.fire;
  target.once = ev.once;
  target.hasEvent = ev.hasEvent;
  target._callbackActive = {};
  return target;
}, on:function(name, callback, scope) {
  if (!name || typeof name !== "string" || !callback) {
    return this;
  }
  if (!this._callbacks) {
    this._callbacks = {};
  }
  if (!this._callbacks[name]) {
    this._callbacks[name] = [];
  }
  if (!this._callbackActive) {
    this._callbackActive = {};
  }
  if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) {
    this._callbackActive[name] = this._callbackActive[name].slice();
  }
  this._callbacks[name].push({callback:callback, scope:scope || this});
  return this;
}, off:function(name, callback, scope) {
  if (!this._callbacks) {
    return this;
  }
  if (this._callbackActive) {
    if (name) {
      if (this._callbackActive[name] && this._callbackActive[name] === this._callbacks[name]) {
        this._callbackActive[name] = this._callbackActive[name].slice();
      }
    } else {
      for (var key in this._callbackActive) {
        if (!this._callbacks[key]) {
          continue;
        }
        if (this._callbacks[key] !== this._callbackActive[key]) {
          continue;
        }
        this._callbackActive[key] = this._callbackActive[key].slice();
      }
    }
  }
  if (!name) {
    this._callbacks = null;
  } else {
    if (!callback) {
      if (this._callbacks[name]) {
        delete this._callbacks[name];
      }
    } else {
      var events = this._callbacks[name];
      if (!events) {
        return this;
      }
      var i = events.length;
      while (i--) {
        if (events[i].callback !== callback) {
          continue;
        }
        if (scope && events[i].scope !== scope) {
          continue;
        }
        events.splice(i, 1);
      }
    }
  }
  return this;
}, fire:function(name, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
  if (!name || !this._callbacks || !this._callbacks[name]) {
    return this;
  }
  var callbacks;
  if (!this._callbackActive) {
    this._callbackActive = {};
  }
  if (!this._callbackActive[name]) {
    this._callbackActive[name] = this._callbacks[name];
  } else {
    if (this._callbackActive[name] === this._callbacks[name]) {
      this._callbackActive[name] = this._callbackActive[name].slice();
    }
    callbacks = this._callbacks[name].slice();
  }
  for (var i = 0; (callbacks || this._callbackActive[name]) && i < (callbacks || this._callbackActive[name]).length; i++) {
    var evt = (callbacks || this._callbackActive[name])[i];
    evt.callback.call(evt.scope, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    if (evt.callback.once) {
      var ind = this._callbacks[name].indexOf(evt);
      if (ind !== -1) {
        if (this._callbackActive[name] === this._callbacks[name]) {
          this._callbackActive[name] = this._callbackActive[name].slice();
        }
        this._callbacks[name].splice(ind, 1);
      }
    }
  }
  if (!callbacks) {
    this._callbackActive[name] = null;
  }
  return this;
}, once:function(name, callback, scope) {
  callback.once = true;
  this.on(name, callback, scope);
  return this;
}, hasEvent:function(name) {
  return this._callbacks && this._callbacks[name] && this._callbacks[name].length !== 0 || false;
}};
pc.extend(pc, function() {
  var TagsCache = function(key) {
    this._index = {};
    this._key = key || null;
  };
  TagsCache.prototype = {addItem:function(item) {
    var tags = item.tags._list;
    for (var i = 0; i < tags.length; i++) {
      this.add(tags[i], item);
    }
  }, removeItem:function(item) {
    var tags = item.tags._list;
    for (var i = 0; i < tags.length; i++) {
      this.remove(tags[i], item);
    }
  }, add:function(tag, item) {
    if (this._index[tag] && this._index[tag].list.indexOf(item) !== -1) {
      return;
    }
    if (!this._index[tag]) {
      this._index[tag] = {list:[]};
      if (this._key) {
        this._index[tag].keys = {};
      }
    }
    this._index[tag].list.push(item);
    if (this._key) {
      this._index[tag].keys[item[this._key]] = item;
    }
  }, remove:function(tag, item) {
    if (!this._index[tag]) {
      return;
    }
    if (this._key) {
      if (!this._index[tag].keys[item[this._key]]) {
        return;
      }
    }
    var ind = this._index[tag].indexOf(item);
    if (ind === -1) {
      return;
    }
    this._index[tag].list.splice(ind, 1);
    if (this._key) {
      delete this._index[tag].keys[item[this._key]];
    }
    if (this._index[tag].list.length === 0) {
      delete this._index[tag];
    }
  }, find:function(args) {
    var self = this;
    var index = {};
    var items = [];
    var i, n, t;
    var item, tag, tags, tagsRest, missingIndex;
    var sort = function(a, b) {
      return self._index[a].list.length - self._index[b].list.length;
    };
    for (i = 0; i < args.length; i++) {
      tag = args[i];
      if (tag instanceof Array) {
        if (tag.length === 0) {
          continue;
        }
        if (tag.length === 1) {
          tag = tag[0];
        } else {
          missingIndex = false;
          for (t = 0; t < tag.length; t++) {
            if (!this._index[tag[t]]) {
              missingIndex = true;
              break;
            }
          }
          if (missingIndex) {
            continue;
          }
          tags = tag.slice(0).sort(sort);
          tagsRest = tags.slice(1);
          if (tagsRest.length === 1) {
            tagsRest = tagsRest[0];
          }
          for (n = 0; n < this._index[tags[0]].list.length; n++) {
            item = this._index[tags[0]].list[n];
            if ((this._key ? !index[item[this._key]] : items.indexOf(item) === -1) && item.tags.has(tagsRest)) {
              if (this._key) {
                index[item[this._key]] = true;
              }
              items.push(item);
            }
          }
          continue;
        }
      }
      if (tag && typeof tag === "string" && this._index[tag]) {
        for (n = 0; n < this._index[tag].list.length; n++) {
          item = this._index[tag].list[n];
          if (this._key) {
            if (!index[item[this._key]]) {
              index[item[this._key]] = true;
              items.push(item);
            }
          } else {
            if (items.indexOf(item) === -1) {
              items.push(item);
            }
          }
        }
      }
    }
    return items;
  }};
  var Tags = function(parent) {
    this._index = {};
    this._list = [];
    this._parent = parent;
    pc.events.attach(this);
  };
  Tags.prototype = {add:function() {
    var changed = false;
    var tags = this._processArguments(arguments, true);
    if (!tags.length) {
      return changed;
    }
    for (var i = 0; i < tags.length; i++) {
      if (this._index[tags[i]]) {
        continue;
      }
      changed = true;
      this._index[tags[i]] = true;
      this._list.push(tags[i]);
      this.fire("add", tags[i], this._parent);
    }
    if (changed) {
      this.fire("change", this._parent);
    }
    return changed;
  }, remove:function() {
    var changed = false;
    if (!this._list.length) {
      return changed;
    }
    var tags = this._processArguments(arguments, true);
    if (!tags.length) {
      return changed;
    }
    for (var i = 0; i < tags.length; i++) {
      if (!this._index[tags[i]]) {
        continue;
      }
      changed = true;
      delete this._index[tags[i]];
      this._list.splice(this._list.indexOf(tags[i]), 1);
      this.fire("remove", tags[i], this._parent);
    }
    if (changed) {
      this.fire("change", this._parent);
    }
    return changed;
  }, clear:function() {
    if (!this._list.length) {
      return;
    }
    var tags = this._list.slice(0);
    this._list = [];
    this._index = {};
    for (var i = 0; i < tags.length; i++) {
      this.fire("remove", tags[i], this._parent);
    }
    this.fire("change", this._parent);
  }, has:function() {
    if (!this._list.length) {
      return false;
    }
    return this._has(this._processArguments(arguments));
  }, _has:function(tags) {
    if (!this._list.length || !tags.length) {
      return false;
    }
    for (var i = 0; i < tags.length; i++) {
      if (tags[i].length === 1) {
        if (this._index[tags[i][0]]) {
          return true;
        }
      } else {
        var multiple = true;
        for (var t = 0; t < tags[i].length; t++) {
          if (this._index[tags[i][t]]) {
            continue;
          }
          multiple = false;
          break;
        }
        if (multiple) {
          return true;
        }
      }
    }
    return false;
  }, list:function() {
    return this._list.slice(0);
  }, _processArguments:function(args, flat) {
    var tags = [];
    var tmp = [];
    if (!args || !args.length) {
      return tags;
    }
    for (var i = 0; i < args.length; i++) {
      if (args[i] instanceof Array) {
        if (!flat) {
          tmp = [];
        }
        for (var t = 0; t < args[i].length; t++) {
          if (typeof args[i][t] !== "string") {
            continue;
          }
          if (flat) {
            tags.push(args[i][t]);
          } else {
            tmp.push(args[i][t]);
          }
        }
        if (!flat && tmp.length) {
          tags.push(tmp);
        }
      } else {
        if (typeof args[i] === "string") {
          if (flat) {
            tags.push(args[i]);
          } else {
            tags.push([args[i]]);
          }
        }
      }
    }
    return tags;
  }};
  Object.defineProperty(Tags.prototype, "size", {get:function() {
    return this._list.length;
  }});
  return {TagsCache:TagsCache, Tags:Tags};
}());
pc.extend(pc, function() {
  var AllocatePool = function(constructor, size) {
    this._constructor = constructor;
    this._pool = [];
    this._count = 0;
    this._resize(size);
  };
  AllocatePool.prototype = {_resize:function(size) {
    if (size > this._pool.length) {
      for (var i = this._pool.length; i < size; i++) {
        this._pool[i] = new this._constructor;
      }
    }
  }, allocate:function() {
    if (this._count >= this._pool.length) {
      this._resize(this._pool.length * 2);
    }
    return this._pool[this._count++];
  }, freeAll:function() {
    this._count = 0;
  }};
  return {AllocatePool:AllocatePool};
}());
pc.extend(pc, function() {
  var platform = {desktop:false, mobile:false, ios:false, android:false, windows:false, cocoonjs:false, xbox:false, gamepads:false, touch:false};
  var ua = navigator.userAgent;
  if (/(windows|mac os|linux|cros)/i.test(ua)) {
    platform.desktop = true;
  }
  if (/xbox/i.test(ua)) {
    platform.xbox = true;
  }
  if (/(windows phone|iemobile|wpdesktop)/i.test(ua)) {
    platform.desktop = false;
    platform.mobile = true;
    platform.windows = true;
  } else {
    if (/android/i.test(ua)) {
      platform.desktop = false;
      platform.mobile = true;
      platform.android = true;
    } else {
      if (/ip([ao]d|hone)/i.test(ua)) {
        platform.desktop = false;
        platform.mobile = true;
        platform.ios = true;
      }
    }
  }
  if (navigator.isCocoonJS) {
    platform.cocoonjs = true;
  }
  platform.touch = "ontouchstart" in window;
  platform.gamepads = "getGamepads" in navigator;
  return {platform:platform};
}());
pc.math = {DEG_TO_RAD:Math.PI / 180, RAD_TO_DEG:180 / Math.PI, INV_LOG2:1 / Math.log(2), clamp:function(value, min, max) {
  if (value >= max) {
    return max;
  }
  if (value <= min) {
    return min;
  }
  return value;
}, intToBytes24:function(i) {
  var r, g, b;
  r = i >> 16 & 255;
  g = i >> 8 & 255;
  b = i & 255;
  return [r, g, b];
}, intToBytes32:function(i) {
  var r, g, b, a;
  r = i >> 24 & 255;
  g = i >> 16 & 255;
  b = i >> 8 & 255;
  a = i & 255;
  return [r, g, b, a];
}, bytesToInt24:function(r, g, b) {
  if (r.length) {
    b = r[2];
    g = r[1];
    r = r[0];
  }
  return r << 16 | g << 8 | b;
}, bytesToInt32:function(r, g, b, a) {
  if (r.length) {
    a = r[3];
    b = r[2];
    g = r[1];
    r = r[0];
  }
  return (r << 24 | g << 16 | b << 8 | a) >>> 32;
}, lerp:function(a, b, alpha) {
  return a + (b - a) * pc.math.clamp(alpha, 0, 1);
}, lerpAngle:function(a, b, alpha) {
  if (b - a > 180) {
    b -= 360;
  }
  if (b - a < -180) {
    b += 360;
  }
  return pc.math.lerp(a, b, pc.math.clamp(alpha, 0, 1));
}, powerOfTwo:function(x) {
  return x !== 0 && !(x & x - 1);
}, nextPowerOfTwo:function(val) {
  val--;
  val = val >> 1 | val;
  val = val >> 2 | val;
  val = val >> 4 | val;
  val = val >> 8 | val;
  val = val >> 16 | val;
  val++;
  return val;
}, random:function(min, max) {
  var diff = max - min;
  return Math.random() * diff + min;
}, smoothstep:function(min, max, x) {
  if (x <= min) {
    return 0;
  }
  if (x >= max) {
    return 1;
  }
  x = (x - min) / (max - min);
  return x * x * (3 - 2 * x);
}, smootherstep:function(min, max, x) {
  if (x <= min) {
    return 0;
  }
  if (x >= max) {
    return 1;
  }
  x = (x - min) / (max - min);
  return x * x * x * (x * (x * 6 - 15) + 10);
}};
pc.math.intToBytes = pc.math.intToBytes32;
pc.math.bytesToInt = pc.math.bytesToInt32;
if (!Math.log2) {
  Math.log2 = function(x) {
    return Math.log(x) * pc.math.INV_LOG2;
  };
}
;pc.extend(pc, function() {
  var Vec2 = function(x, y) {
    if (x && x.length === 2) {
      this.data = new Float32Array(x);
      return;
    }
    this.data = new Float32Array(2);
    this.data[0] = x || 0;
    this.data[1] = y || 0;
  };
  Vec2.prototype = {add:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] += b[0];
    a[1] += b[1];
    return this;
  }, add2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    return this;
  }, clone:function() {
    return (new Vec2).copy(this);
  }, copy:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] = b[0];
    a[1] = b[1];
    return this;
  }, dot:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] * b[0] + a[1] * b[1];
  }, equals:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] === b[0] && a[1] === b[1];
  }, length:function() {
    var v = this.data;
    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
  }, lengthSq:function() {
    var v = this.data;
    return v[0] * v[0] + v[1] * v[1];
  }, lerp:function(lhs, rhs, alpha) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + alpha * (b[0] - a[0]);
    r[1] = a[1] + alpha * (b[1] - a[1]);
    return this;
  }, mul:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] *= b[0];
    a[1] *= b[1];
    return this;
  }, mul2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] * b[0];
    r[1] = a[1] * b[1];
    return this;
  }, normalize:function() {
    var v = this.data;
    var lengthSq = v[0] * v[0] + v[1] * v[1];
    if (lengthSq > 0) {
      var invLength = 1 / Math.sqrt(lengthSq);
      v[0] *= invLength;
      v[1] *= invLength;
    }
    return this;
  }, scale:function(scalar) {
    var v = this.data;
    v[0] *= scalar;
    v[1] *= scalar;
    return this;
  }, set:function(x, y) {
    var v = this.data;
    v[0] = x;
    v[1] = y;
    return this;
  }, sub:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] -= b[0];
    a[1] -= b[1];
    return this;
  }, sub2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    return this;
  }, toString:function() {
    return "[" + this.data[0] + ", " + this.data[1] + "]";
  }};
  Object.defineProperty(Vec2.prototype, "x", {get:function() {
    return this.data[0];
  }, set:function(value) {
    this.data[0] = value;
  }});
  Object.defineProperty(Vec2.prototype, "y", {get:function() {
    return this.data[1];
  }, set:function(value) {
    this.data[1] = value;
  }});
  Object.defineProperty(Vec2, "ONE", {get:function() {
    var one = new Vec2(1, 1);
    return function() {
      return one;
    };
  }()});
  Object.defineProperty(Vec2, "RIGHT", {get:function() {
    var right = new Vec2(1, 0);
    return function() {
      return right;
    };
  }()});
  Object.defineProperty(Vec2, "UP", {get:function() {
    var down = new Vec2(0, 1);
    return function() {
      return down;
    };
  }()});
  Object.defineProperty(Vec2, "ZERO", {get:function() {
    var zero = new Vec2(0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Vec2:Vec2};
}());
pc.extend(pc, function() {
  var Vec3 = function(x, y, z) {
    if (x && x.length === 3) {
      this.data = new Float32Array(x);
      return;
    }
    this.data = new Float32Array(3);
    this.data[0] = x || 0;
    this.data[1] = y || 0;
    this.data[2] = z || 0;
  };
  Vec3.prototype = {add:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
    return this;
  }, add2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    return this;
  }, clone:function() {
    return (new Vec3).copy(this);
  }, copy:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] = b[0];
    a[1] = b[1];
    a[2] = b[2];
    return this;
  }, cross:function(lhs, rhs) {
    var a, b, r, ax, ay, az, bx, by, bz;
    a = lhs.data;
    b = rhs.data;
    r = this.data;
    ax = a[0];
    ay = a[1];
    az = a[2];
    bx = b[0];
    by = b[1];
    bz = b[2];
    r[0] = ay * bz - by * az;
    r[1] = az * bx - bz * ax;
    r[2] = ax * by - bx * ay;
    return this;
  }, dot:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }, equals:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }, length:function() {
    var v = this.data;
    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  }, lengthSq:function() {
    var v = this.data;
    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
  }, lerp:function(lhs, rhs, alpha) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + alpha * (b[0] - a[0]);
    r[1] = a[1] + alpha * (b[1] - a[1]);
    r[2] = a[2] + alpha * (b[2] - a[2]);
    return this;
  }, mul:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] *= b[0];
    a[1] *= b[1];
    a[2] *= b[2];
    return this;
  }, mul2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] * b[0];
    r[1] = a[1] * b[1];
    r[2] = a[2] * b[2];
    return this;
  }, normalize:function() {
    var v = this.data;
    var lengthSq = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
    if (lengthSq > 0) {
      var invLength = 1 / Math.sqrt(lengthSq);
      v[0] *= invLength;
      v[1] *= invLength;
      v[2] *= invLength;
    }
    return this;
  }, project:function(rhs) {
    var a = this.data;
    var b = rhs.data;
    var a_dot_b = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    var b_dot_b = b[0] * b[0] + b[1] * b[1] + b[2] * b[2];
    var s = a_dot_b / b_dot_b;
    a[0] = b[0] * s;
    a[1] = b[1] * s;
    a[2] = b[2] * s;
    return this;
  }, scale:function(scalar) {
    var v = this.data;
    v[0] *= scalar;
    v[1] *= scalar;
    v[2] *= scalar;
    return this;
  }, set:function(x, y, z) {
    var v = this.data;
    v[0] = x;
    v[1] = y;
    v[2] = z;
    return this;
  }, sub:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] -= b[0];
    a[1] -= b[1];
    a[2] -= b[2];
    return this;
  }, sub2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    return this;
  }, toString:function() {
    return "[" + this.data[0] + ", " + this.data[1] + ", " + this.data[2] + "]";
  }};
  Object.defineProperty(Vec3.prototype, "x", {get:function() {
    return this.data[0];
  }, set:function(value) {
    this.data[0] = value;
  }});
  Object.defineProperty(Vec3.prototype, "y", {get:function() {
    return this.data[1];
  }, set:function(value) {
    this.data[1] = value;
  }});
  Object.defineProperty(Vec3.prototype, "z", {get:function() {
    return this.data[2];
  }, set:function(value) {
    this.data[2] = value;
  }});
  Object.defineProperty(Vec3, "BACK", {get:function() {
    var back = new Vec3(0, 0, 1);
    return function() {
      return back;
    };
  }()});
  Object.defineProperty(Vec3, "DOWN", {get:function() {
    var down = new Vec3(0, -1, 0);
    return function() {
      return down;
    };
  }()});
  Object.defineProperty(Vec3, "FORWARD", {get:function() {
    var forward = new Vec3(0, 0, -1);
    return function() {
      return forward;
    };
  }()});
  Object.defineProperty(Vec3, "LEFT", {get:function() {
    var left = new Vec3(-1, 0, 0);
    return function() {
      return left;
    };
  }()});
  Object.defineProperty(Vec3, "ONE", {get:function() {
    var one = new Vec3(1, 1, 1);
    return function() {
      return one;
    };
  }()});
  Object.defineProperty(Vec3, "RIGHT", {get:function() {
    var right = new Vec3(1, 0, 0);
    return function() {
      return right;
    };
  }()});
  Object.defineProperty(Vec3, "UP", {get:function() {
    var down = new Vec3(0, 1, 0);
    return function() {
      return down;
    };
  }()});
  Object.defineProperty(Vec3, "ZERO", {get:function() {
    var zero = new Vec3(0, 0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Vec3:Vec3};
}());
pc.extend(pc, function() {
  var Vec4 = function(x, y, z, w) {
    if (x && x.length === 4) {
      this.data = new Float32Array(x);
      return;
    }
    this.data = new Float32Array(4);
    this.data[0] = x || 0;
    this.data[1] = y || 0;
    this.data[2] = z || 0;
    this.data[3] = w || 0;
  };
  Vec4.prototype = {add:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
    a[3] += b[3];
    return this;
  }, add2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    return this;
  }, clone:function() {
    return (new Vec4).copy(this);
  }, copy:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] = b[0];
    a[1] = b[1];
    a[2] = b[2];
    a[3] = b[3];
    return this;
  }, dot:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }, equals:function(rhs) {
    var a = this.data, b = rhs.data;
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }, length:function() {
    var v = this.data;
    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3]);
  }, lengthSq:function() {
    var v = this.data;
    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3];
  }, lerp:function(lhs, rhs, alpha) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + alpha * (b[0] - a[0]);
    r[1] = a[1] + alpha * (b[1] - a[1]);
    r[2] = a[2] + alpha * (b[2] - a[2]);
    r[3] = a[3] + alpha * (b[3] - a[3]);
    return this;
  }, mul:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] *= b[0];
    a[1] *= b[1];
    a[2] *= b[2];
    a[3] *= b[3];
    return this;
  }, mul2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] * b[0];
    r[1] = a[1] * b[1];
    r[2] = a[2] * b[2];
    r[3] = a[3] * b[3];
    return this;
  }, normalize:function() {
    var v = this.data;
    var lengthSq = v[0] * v[0] + v[1] * v[1] + v[2] * v[2] + v[3] * v[3];
    if (lengthSq > 0) {
      var invLength = 1 / Math.sqrt(lengthSq);
      v[0] *= invLength;
      v[1] *= invLength;
      v[2] *= invLength;
      v[3] *= invLength;
    }
    return this;
  }, scale:function(scalar) {
    var v = this.data;
    v[0] *= scalar;
    v[1] *= scalar;
    v[2] *= scalar;
    v[3] *= scalar;
    return this;
  }, set:function(x, y, z, w) {
    var v = this.data;
    v[0] = x;
    v[1] = y;
    v[2] = z;
    v[3] = w;
    return this;
  }, sub:function(rhs) {
    var a = this.data, b = rhs.data;
    a[0] -= b[0];
    a[1] -= b[1];
    a[2] -= b[2];
    a[3] -= b[3];
    return this;
  }, sub2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] - b[0];
    r[1] = a[1] - b[1];
    r[2] = a[2] - b[2];
    r[3] = a[3] - b[3];
    return this;
  }, toString:function() {
    return "[" + this.data[0] + ", " + this.data[1] + ", " + this.data[2] + ", " + this.data[3] + "]";
  }};
  Object.defineProperty(Vec4.prototype, "x", {get:function() {
    return this.data[0];
  }, set:function(value) {
    this.data[0] = value;
  }});
  Object.defineProperty(Vec4.prototype, "y", {get:function() {
    return this.data[1];
  }, set:function(value) {
    this.data[1] = value;
  }});
  Object.defineProperty(Vec4.prototype, "z", {get:function() {
    return this.data[2];
  }, set:function(value) {
    this.data[2] = value;
  }});
  Object.defineProperty(Vec4.prototype, "w", {get:function() {
    return this.data[3];
  }, set:function(value) {
    this.data[3] = value;
  }});
  Object.defineProperty(Vec4, "ONE", {get:function() {
    var one = new Vec4(1, 1, 1, 1);
    return function() {
      return one;
    };
  }()});
  Object.defineProperty(Vec4, "ZERO", {get:function() {
    var zero = new Vec4(0, 0, 0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Vec4:Vec4};
}());
pc.extend(pc, function() {
  var typeNumber = "number";
  var Mat3 = function(v0, v1, v2, v3, v4, v5, v6, v7, v8) {
    if (v0 && v0.length === 9) {
      this.data = new Float32Array(v0);
      return;
    }
    this.data = new Float32Array(9);
    if (typeof v0 === typeNumber) {
      this.data[0] = v0;
      this.data[1] = v1;
      this.data[2] = v2;
      this.data[3] = v3;
      this.data[4] = v4;
      this.data[5] = v5;
      this.data[6] = v6;
      this.data[7] = v7;
      this.data[8] = v8;
    } else {
      this.setIdentity();
    }
  };
  Mat3.prototype = {clone:function() {
    return (new pc.Mat3).copy(this);
  }, copy:function(rhs) {
    var src = rhs.data;
    var dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    return this;
  }, equals:function(rhs) {
    var l = this.data;
    var r = rhs.data;
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8];
  }, isIdentity:function() {
    var m = this.data;
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 1 && m[5] === 0 && m[6] === 0 && m[7] === 0 && m[8] === 1;
  }, setIdentity:function() {
    var m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 1;
    m[5] = 0;
    m[6] = 0;
    m[7] = 0;
    m[8] = 1;
    return this;
  }, toString:function() {
    var t = "[";
    for (var i = 0; i < 9; i++) {
      t += this.data[i];
      t += i !== 9 ? ", " : "";
    }
    t += "]";
    return t;
  }, transpose:function() {
    var m = this.data;
    var tmp;
    tmp = m[1];
    m[1] = m[3];
    m[3] = tmp;
    tmp = m[2];
    m[2] = m[6];
    m[6] = tmp;
    tmp = m[5];
    m[5] = m[7];
    m[7] = tmp;
    return this;
  }};
  Object.defineProperty(Mat3, "IDENTITY", {get:function() {
    var identity = new Mat3;
    return function() {
      return identity;
    };
  }()});
  Object.defineProperty(Mat3, "ZERO", {get:function() {
    var zero = new Mat3(0, 0, 0, 0, 0, 0, 0, 0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Mat3:Mat3};
}());
pc.extend(pc, function() {
  var typeNumber = "number";
  var Mat4 = function(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {
    if (v0 && v0.length === 16) {
      this.data = new Float32Array(v0);
      return;
    }
    this.data = new Float32Array(16);
    if (typeof v0 === typeNumber) {
      this.data[0] = v0;
      this.data[1] = v1;
      this.data[2] = v2;
      this.data[3] = v3;
      this.data[4] = v4;
      this.data[5] = v5;
      this.data[6] = v6;
      this.data[7] = v7;
      this.data[8] = v8;
      this.data[9] = v9;
      this.data[10] = v10;
      this.data[11] = v11;
      this.data[12] = v12;
      this.data[13] = v13;
      this.data[14] = v14;
      this.data[15] = v15;
    } else {
      this.setIdentity();
    }
  };
  Mat4.prototype = {add2:function(lhs, rhs) {
    var a = lhs.data, b = rhs.data, r = this.data;
    r[0] = a[0] + b[0];
    r[1] = a[1] + b[1];
    r[2] = a[2] + b[2];
    r[3] = a[3] + b[3];
    r[4] = a[4] + b[4];
    r[5] = a[5] + b[5];
    r[6] = a[6] + b[6];
    r[7] = a[7] + b[7];
    r[8] = a[8] + b[8];
    r[9] = a[9] + b[9];
    r[10] = a[10] + b[10];
    r[11] = a[11] + b[11];
    r[12] = a[12] + b[12];
    r[13] = a[13] + b[13];
    r[14] = a[14] + b[14];
    r[15] = a[15] + b[15];
    return this;
  }, add:function(rhs) {
    return this.add2(this, rhs);
  }, clone:function() {
    return (new pc.Mat4).copy(this);
  }, copy:function(rhs) {
    var src = rhs.data, dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    dst[9] = src[9];
    dst[10] = src[10];
    dst[11] = src[11];
    dst[12] = src[12];
    dst[13] = src[13];
    dst[14] = src[14];
    dst[15] = src[15];
    return this;
  }, equals:function(rhs) {
    var l = this.data, r = rhs.data;
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8] && l[9] === r[9] && l[10] === r[10] && l[11] === r[11] && l[12] === r[12] && l[13] === r[13] && l[14] === r[14] && l[15] === r[15];
  }, isIdentity:function() {
    var m = this.data;
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 0 && m[5] === 1 && m[6] === 0 && m[7] === 0 && m[8] === 0 && m[9] === 0 && m[10] === 1 && m[11] === 0 && m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1;
  }, mul2:function(lhs, rhs) {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b0, b1, b2, b3, a = lhs.data, b = rhs.data, r = this.data;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    a30 = a[12];
    a31 = a[13];
    a32 = a[14];
    a33 = a[15];
    b0 = b[0];
    b1 = b[1];
    b2 = b[2];
    b3 = b[3];
    r[0] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[1] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[2] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[3] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    r[4] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[5] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[6] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[7] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    r[8] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[9] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[10] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[11] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    r[12] = a00 * b0 + a10 * b1 + a20 * b2 + a30 * b3;
    r[13] = a01 * b0 + a11 * b1 + a21 * b2 + a31 * b3;
    r[14] = a02 * b0 + a12 * b1 + a22 * b2 + a32 * b3;
    r[15] = a03 * b0 + a13 * b1 + a23 * b2 + a33 * b3;
    return this;
  }, mul:function(rhs) {
    return this.mul2(this, rhs);
  }, transformPoint:function(vec, res) {
    var x, y, z, m = this.data, v = vec.data;
    res = res === undefined ? new pc.Vec3 : res;
    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8] + m[12];
    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9] + m[13];
    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10] + m[14];
    return res.set(x, y, z);
  }, transformVector:function(vec, res) {
    var x, y, z, m = this.data, v = vec.data;
    res = res === undefined ? new pc.Vec3 : res;
    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];
    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];
    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];
    return res.set(x, y, z);
  }, transformVec4:function(vec, res) {
    var x, y, z, w, m = this.data, v = vec.data;
    res = res === undefined ? new pc.Vec4 : res;
    x = v[0] * m[0] + v[1] * m[4] + v[2] * m[8] + v[3] * m[12];
    y = v[0] * m[1] + v[1] * m[5] + v[2] * m[9] + v[3] * m[13];
    z = v[0] * m[2] + v[1] * m[6] + v[2] * m[10] + v[3] * m[14];
    w = v[0] * m[3] + v[1] * m[7] + v[2] * m[11] + v[3] * m[15];
    return res.set(x, y, z, w);
  }, setLookAt:function() {
    var x, y, z;
    x = new pc.Vec3;
    y = new pc.Vec3;
    z = new pc.Vec3;
    return function(position, target, up) {
      z.sub2(position, target).normalize();
      y.copy(up).normalize();
      x.cross(y, z).normalize();
      y.cross(z, x);
      var r = this.data;
      r[0] = x.x;
      r[1] = x.y;
      r[2] = x.z;
      r[3] = 0;
      r[4] = y.x;
      r[5] = y.y;
      r[6] = y.z;
      r[7] = 0;
      r[8] = z.x;
      r[9] = z.y;
      r[10] = z.z;
      r[11] = 0;
      r[12] = position.x;
      r[13] = position.y;
      r[14] = position.z;
      r[15] = 1;
      return this;
    };
  }(), setFrustum:function(left, right, bottom, top, znear, zfar) {
    var temp1, temp2, temp3, temp4, r;
    temp1 = 2 * znear;
    temp2 = right - left;
    temp3 = top - bottom;
    temp4 = zfar - znear;
    r = this.data;
    r[0] = temp1 / temp2;
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = temp1 / temp3;
    r[6] = 0;
    r[7] = 0;
    r[8] = (right + left) / temp2;
    r[9] = (top + bottom) / temp3;
    r[10] = (-zfar - znear) / temp4;
    r[11] = -1;
    r[12] = 0;
    r[13] = 0;
    r[14] = -temp1 * zfar / temp4;
    r[15] = 0;
    return this;
  }, setPerspective:function(fovy, aspect, znear, zfar, fovIsHorizontal) {
    var xmax, ymax;
    if (!fovIsHorizontal) {
      ymax = znear * Math.tan(fovy * Math.PI / 360);
      xmax = ymax * aspect;
    } else {
      xmax = znear * Math.tan(fovy * Math.PI / 360);
      ymax = xmax / aspect;
    }
    return this.setFrustum(-xmax, xmax, -ymax, ymax, znear, zfar);
  }, setOrtho:function(left, right, bottom, top, near, far) {
    var r = this.data;
    r[0] = 2 / (right - left);
    r[1] = 0;
    r[2] = 0;
    r[3] = 0;
    r[4] = 0;
    r[5] = 2 / (top - bottom);
    r[6] = 0;
    r[7] = 0;
    r[8] = 0;
    r[9] = 0;
    r[10] = -2 / (far - near);
    r[11] = 0;
    r[12] = -(right + left) / (right - left);
    r[13] = -(top + bottom) / (top - bottom);
    r[14] = -(far + near) / (far - near);
    r[15] = 1;
    return this;
  }, setFromAxisAngle:function(axis, angle) {
    var x, y, z, c, s, t, tx, ty, m;
    angle *= pc.math.DEG_TO_RAD;
    x = axis.x;
    y = axis.y;
    z = axis.z;
    c = Math.cos(angle);
    s = Math.sin(angle);
    t = 1 - c;
    tx = t * x;
    ty = t * y;
    m = this.data;
    m[0] = tx * x + c;
    m[1] = tx * y + s * z;
    m[2] = tx * z - s * y;
    m[3] = 0;
    m[4] = tx * y - s * z;
    m[5] = ty * y + c;
    m[6] = ty * z + s * x;
    m[7] = 0;
    m[8] = tx * z + s * y;
    m[9] = ty * z - x * s;
    m[10] = t * z * z + c;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }, setTranslate:function(x, y, z) {
    var m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = 1;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = 1;
    m[11] = 0;
    m[12] = x;
    m[13] = y;
    m[14] = z;
    m[15] = 1;
    return this;
  }, setScale:function(x, y, z) {
    var m = this.data;
    m[0] = x;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = y;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = z;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }, invert:function() {
    var a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, m;
    m = this.data;
    a00 = m[0];
    a01 = m[1];
    a02 = m[2];
    a03 = m[3];
    a10 = m[4];
    a11 = m[5];
    a12 = m[6];
    a13 = m[7];
    a20 = m[8];
    a21 = m[9];
    a22 = m[10];
    a23 = m[11];
    a30 = m[12];
    a31 = m[13];
    a32 = m[14];
    a33 = m[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (det === 0) {
      this.setIdentity();
    } else {
      invDet = 1 / det;
      m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    }
    return this;
  }, set:function(src) {
    var dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    dst[9] = src[9];
    dst[10] = src[10];
    dst[11] = src[11];
    dst[12] = src[12];
    dst[13] = src[13];
    dst[14] = src[14];
    dst[15] = src[15];
    return this;
  }, setIdentity:function() {
    var m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 0;
    m[5] = 1;
    m[6] = 0;
    m[7] = 0;
    m[8] = 0;
    m[9] = 0;
    m[10] = 1;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }, setTRS:function(t, r, s) {
    var tx, ty, tz, qx, qy, qz, qw, sx, sy, sz, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz, m;
    tx = t.x;
    ty = t.y;
    tz = t.z;
    qx = r.x;
    qy = r.y;
    qz = r.z;
    qw = r.w;
    sx = s.x;
    sy = s.y;
    sz = s.z;
    x2 = qx + qx;
    y2 = qy + qy;
    z2 = qz + qz;
    xx = qx * x2;
    xy = qx * y2;
    xz = qx * z2;
    yy = qy * y2;
    yz = qy * z2;
    zz = qz * z2;
    wx = qw * x2;
    wy = qw * y2;
    wz = qw * z2;
    m = this.data;
    m[0] = (1 - (yy + zz)) * sx;
    m[1] = (xy + wz) * sx;
    m[2] = (xz - wy) * sx;
    m[3] = 0;
    m[4] = (xy - wz) * sy;
    m[5] = (1 - (xx + zz)) * sy;
    m[6] = (yz + wx) * sy;
    m[7] = 0;
    m[8] = (xz + wy) * sz;
    m[9] = (yz - wx) * sz;
    m[10] = (1 - (xx + yy)) * sz;
    m[11] = 0;
    m[12] = tx;
    m[13] = ty;
    m[14] = tz;
    m[15] = 1;
    return this;
  }, transpose:function() {
    var tmp, m = this.data;
    tmp = m[1];
    m[1] = m[4];
    m[4] = tmp;
    tmp = m[2];
    m[2] = m[8];
    m[8] = tmp;
    tmp = m[3];
    m[3] = m[12];
    m[12] = tmp;
    tmp = m[6];
    m[6] = m[9];
    m[9] = tmp;
    tmp = m[7];
    m[7] = m[13];
    m[13] = tmp;
    tmp = m[11];
    m[11] = m[14];
    m[14] = tmp;
    return this;
  }, invertTo3x3:function(res) {
    var a11, a21, a31, a12, a22, a32, a13, a23, a33, m, r, det, idet;
    m = this.data;
    r = res.data;
    var m0 = m[0];
    var m1 = m[1];
    var m2 = m[2];
    var m4 = m[4];
    var m5 = m[5];
    var m6 = m[6];
    var m8 = m[8];
    var m9 = m[9];
    var m10 = m[10];
    a11 = m10 * m5 - m6 * m9;
    a21 = -m10 * m1 + m2 * m9;
    a31 = m6 * m1 - m2 * m5;
    a12 = -m10 * m4 + m6 * m8;
    a22 = m10 * m0 - m2 * m8;
    a32 = -m6 * m0 + m2 * m4;
    a13 = m9 * m4 - m5 * m8;
    a23 = -m9 * m0 + m1 * m8;
    a33 = m5 * m0 - m1 * m4;
    det = m0 * a11 + m1 * a12 + m2 * a13;
    if (det === 0) {
      return this;
    }
    idet = 1 / det;
    r[0] = idet * a11;
    r[1] = idet * a21;
    r[2] = idet * a31;
    r[3] = idet * a12;
    r[4] = idet * a22;
    r[5] = idet * a32;
    r[6] = idet * a13;
    r[7] = idet * a23;
    r[8] = idet * a33;
    return this;
  }, getTranslation:function(t) {
    t = t === undefined ? new pc.Vec3 : t;
    return t.set(this.data[12], this.data[13], this.data[14]);
  }, getX:function(x) {
    x = x === undefined ? new pc.Vec3 : x;
    return x.set(this.data[0], this.data[1], this.data[2]);
  }, getY:function(y) {
    y = y === undefined ? new pc.Vec3 : y;
    return y.set(this.data[4], this.data[5], this.data[6]);
  }, getZ:function(z) {
    z = z === undefined ? new pc.Vec3 : z;
    return z.set(this.data[8], this.data[9], this.data[10]);
  }, getScale:function() {
    var x, y, z;
    x = new pc.Vec3;
    y = new pc.Vec3;
    z = new pc.Vec3;
    return function(scale) {
      scale = scale === undefined ? new pc.Vec3 : scale;
      this.getX(x);
      this.getY(y);
      this.getZ(z);
      scale.set(x.length(), y.length(), z.length());
      return scale;
    };
  }(), setFromEulerAngles:function(ex, ey, ez) {
    var s1, c1, s2, c2, s3, c3, m;
    ex *= pc.math.DEG_TO_RAD;
    ey *= pc.math.DEG_TO_RAD;
    ez *= pc.math.DEG_TO_RAD;
    s1 = Math.sin(-ex);
    c1 = Math.cos(-ex);
    s2 = Math.sin(-ey);
    c2 = Math.cos(-ey);
    s3 = Math.sin(-ez);
    c3 = Math.cos(-ez);
    m = this.data;
    m[0] = c2 * c3;
    m[1] = -c2 * s3;
    m[2] = s2;
    m[3] = 0;
    m[4] = c1 * s3 + c3 * s1 * s2;
    m[5] = c1 * c3 - s1 * s2 * s3;
    m[6] = -c2 * s1;
    m[7] = 0;
    m[8] = s1 * s3 - c1 * c3 * s2;
    m[9] = c3 * s1 + c1 * s2 * s3;
    m[10] = c1 * c2;
    m[11] = 0;
    m[12] = 0;
    m[13] = 0;
    m[14] = 0;
    m[15] = 1;
    return this;
  }, getEulerAngles:function() {
    var scale = new pc.Vec3;
    return function(eulers) {
      var x, y, z, sx, sy, sz, m, halfPi;
      eulers = eulers === undefined ? new pc.Vec3 : eulers;
      this.getScale(scale);
      sx = scale.x;
      sy = scale.y;
      sz = scale.z;
      m = this.data;
      y = Math.asin(-m[2] / sx);
      halfPi = Math.PI * 0.5;
      if (y < halfPi) {
        if (y > -halfPi) {
          x = Math.atan2(m[6] / sy, m[10] / sz);
          z = Math.atan2(m[1] / sx, m[0] / sx);
        } else {
          z = 0;
          x = -Math.atan2(m[4] / sy, m[5] / sy);
        }
      } else {
        z = 0;
        x = Math.atan2(m[4] / sy, m[5] / sy);
      }
      return eulers.set(x, y, z).scale(pc.math.RAD_TO_DEG);
    };
  }(), toString:function() {
    var i, t;
    t = "[";
    for (i = 0; i < 16; i += 1) {
      t += this.data[i];
      t += i !== 15 ? ", " : "";
    }
    t += "]";
    return t;
  }};
  Object.defineProperty(Mat4, "IDENTITY", {get:function() {
    var identity = new Mat4;
    return function() {
      return identity;
    };
  }()});
  Object.defineProperty(Mat4, "ZERO", {get:function() {
    var zero = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Mat4:Mat4};
}());
pc.extend(pc, function() {
  var Quat = function(x, y, z, w) {
    if (x && x.length === 4) {
      this.x = x[0];
      this.y = x[1];
      this.z = x[2];
      this.w = x[3];
    } else {
      this.x = x === undefined ? 0 : x;
      this.y = y === undefined ? 0 : y;
      this.z = z === undefined ? 0 : z;
      this.w = w === undefined ? 1 : w;
    }
  };
  Quat.prototype = {clone:function() {
    return new pc.Quat(this.x, this.y, this.z, this.w);
  }, conjugate:function() {
    this.x *= -1;
    this.y *= -1;
    this.z *= -1;
    return this;
  }, copy:function(rhs) {
    this.x = rhs.x;
    this.y = rhs.y;
    this.z = rhs.z;
    this.w = rhs.w;
    return this;
  }, equals:function(rhs) {
    return this.x === rhs.x && this.y === rhs.y && this.z === rhs.z && this.w === rhs.w;
  }, getAxisAngle:function(axis) {
    var rad = Math.acos(this.w) * 2;
    var s = Math.sin(rad / 2);
    if (s !== 0) {
      axis.x = this.x / s;
      axis.y = this.y / s;
      axis.z = this.z / s;
      if (axis.x < 0 || axis.y < 0 || axis.z < 0) {
        axis.x *= -1;
        axis.y *= -1;
        axis.z *= -1;
        rad *= -1;
      }
    } else {
      axis.x = 1;
      axis.y = 0;
      axis.z = 0;
    }
    return rad * pc.math.RAD_TO_DEG;
  }, getEulerAngles:function(eulers) {
    var x, y, z, qx, qy, qz, qw, a2;
    eulers = eulers === undefined ? new pc.Vec3 : eulers;
    qx = this.x;
    qy = this.y;
    qz = this.z;
    qw = this.w;
    a2 = 2 * (qw * qy - qx * qz);
    if (a2 <= -0.99999) {
      x = 2 * Math.atan2(qx, qw);
      y = -Math.PI / 2;
      z = 0;
    } else {
      if (a2 >= 0.99999) {
        x = 2 * Math.atan2(qx, qw);
        y = Math.PI / 2;
        z = 0;
      } else {
        x = Math.atan2(2 * (qw * qx + qy * qz), 1 - 2 * (qx * qx + qy * qy));
        y = Math.asin(a2);
        z = Math.atan2(2 * (qw * qz + qx * qy), 1 - 2 * (qy * qy + qz * qz));
      }
    }
    return eulers.set(x, y, z).scale(pc.math.RAD_TO_DEG);
  }, invert:function() {
    return this.conjugate().normalize();
  }, length:function() {
    var x, y, z, w;
    x = this.x;
    y = this.y;
    z = this.z;
    w = this.w;
    return Math.sqrt(x * x + y * y + z * z + w * w);
  }, lengthSq:function() {
    var x, y, z, w;
    return x * x + y * y + z * z + w * w;
  }, mul:function(rhs) {
    var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w;
    q1x = this.x;
    q1y = this.y;
    q1z = this.z;
    q1w = this.w;
    q2x = rhs.x;
    q2y = rhs.y;
    q2z = rhs.z;
    q2w = rhs.w;
    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
    return this;
  }, mul2:function(lhs, rhs) {
    var q1x, q1y, q1z, q1w, q2x, q2y, q2z, q2w;
    q1x = lhs.x;
    q1y = lhs.y;
    q1z = lhs.z;
    q1w = lhs.w;
    q2x = rhs.x;
    q2y = rhs.y;
    q2z = rhs.z;
    q2w = rhs.w;
    this.x = q1w * q2x + q1x * q2w + q1y * q2z - q1z * q2y;
    this.y = q1w * q2y + q1y * q2w + q1z * q2x - q1x * q2z;
    this.z = q1w * q2z + q1z * q2w + q1x * q2y - q1y * q2x;
    this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
    return this;
  }, normalize:function() {
    var len = this.length();
    if (len === 0) {
      this.x = this.y = this.z = 0;
      this.w = 1;
    } else {
      len = 1 / len;
      this.x *= len;
      this.y *= len;
      this.z *= len;
      this.w *= len;
    }
    return this;
  }, set:function(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }, setFromAxisAngle:function(axis, angle) {
    var sa, ca;
    angle *= 0.5 * pc.math.DEG_TO_RAD;
    sa = Math.sin(angle);
    ca = Math.cos(angle);
    this.x = sa * axis.x;
    this.y = sa * axis.y;
    this.z = sa * axis.z;
    this.w = ca;
    return this;
  }, setFromEulerAngles:function(ex, ey, ez) {
    var sx, cx, sy, cy, sz, cz, halfToRad;
    halfToRad = 0.5 * pc.math.DEG_TO_RAD;
    ex *= halfToRad;
    ey *= halfToRad;
    ez *= halfToRad;
    sx = Math.sin(ex);
    cx = Math.cos(ex);
    sy = Math.sin(ey);
    cy = Math.cos(ey);
    sz = Math.sin(ez);
    cz = Math.cos(ez);
    this.x = sx * cy * cz - cx * sy * sz;
    this.y = cx * sy * cz + sx * cy * sz;
    this.z = cx * cy * sz - sx * sy * cz;
    this.w = cx * cy * cz + sx * sy * sz;
    return this;
  }, setFromMat4:function(m) {
    var m00, m01, m02, m10, m11, m12, m20, m21, m22, tr, s, rs, lx, ly, lz;
    m = m.data;
    m00 = m[0];
    m01 = m[1];
    m02 = m[2];
    m10 = m[4];
    m11 = m[5];
    m12 = m[6];
    m20 = m[8];
    m21 = m[9];
    m22 = m[10];
    lx = 1 / Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
    ly = 1 / Math.sqrt(m10 * m10 + m11 * m11 + m12 * m12);
    lz = 1 / Math.sqrt(m20 * m20 + m21 * m21 + m22 * m22);
    m00 *= lx;
    m01 *= lx;
    m02 *= lx;
    m10 *= ly;
    m11 *= ly;
    m12 *= ly;
    m20 *= lz;
    m21 *= lz;
    m22 *= lz;
    tr = m00 + m11 + m22;
    if (tr >= 0) {
      s = Math.sqrt(tr + 1);
      this.w = s * 0.5;
      s = 0.5 / s;
      this.x = (m12 - m21) * s;
      this.y = (m20 - m02) * s;
      this.z = (m01 - m10) * s;
    } else {
      if (m00 > m11) {
        if (m00 > m22) {
          rs = m00 - (m11 + m22) + 1;
          rs = Math.sqrt(rs);
          this.x = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m12 - m21) * rs;
          this.y = (m01 + m10) * rs;
          this.z = (m02 + m20) * rs;
        } else {
          rs = m22 - (m00 + m11) + 1;
          rs = Math.sqrt(rs);
          this.z = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m01 - m10) * rs;
          this.x = (m20 + m02) * rs;
          this.y = (m21 + m12) * rs;
        }
      } else {
        if (m11 > m22) {
          rs = m11 - (m22 + m00) + 1;
          rs = Math.sqrt(rs);
          this.y = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m20 - m02) * rs;
          this.z = (m12 + m21) * rs;
          this.x = (m10 + m01) * rs;
        } else {
          rs = m22 - (m00 + m11) + 1;
          rs = Math.sqrt(rs);
          this.z = rs * 0.5;
          rs = 0.5 / rs;
          this.w = (m01 - m10) * rs;
          this.x = (m20 + m02) * rs;
          this.y = (m21 + m12) * rs;
        }
      }
    }
    return this;
  }, slerp:function(lhs, rhs, alpha) {
    var lx, ly, lz, lw, rx, ry, rz, rw;
    lx = lhs.x;
    ly = lhs.y;
    lz = lhs.z;
    lw = lhs.w;
    rx = rhs.x;
    ry = rhs.y;
    rz = rhs.z;
    rw = rhs.w;
    var cosHalfTheta = lw * rw + lx * rx + ly * ry + lz * rz;
    if (cosHalfTheta < 0) {
      rw = -rw;
      rx = -rx;
      ry = -ry;
      rz = -rz;
      cosHalfTheta = -cosHalfTheta;
    }
    if (Math.abs(cosHalfTheta) >= 1) {
      this.w = lw;
      this.x = lx;
      this.y = ly;
      this.z = lz;
      return this;
    }
    var halfTheta = Math.acos(cosHalfTheta);
    var sinHalfTheta = Math.sqrt(1 - cosHalfTheta * cosHalfTheta);
    if (Math.abs(sinHalfTheta) < 0.001) {
      this.w = lw * 0.5 + rw * 0.5;
      this.x = lx * 0.5 + rx * 0.5;
      this.y = ly * 0.5 + ry * 0.5;
      this.z = lz * 0.5 + rz * 0.5;
      return this;
    }
    var ratioA = Math.sin((1 - alpha) * halfTheta) / sinHalfTheta;
    var ratioB = Math.sin(alpha * halfTheta) / sinHalfTheta;
    this.w = lw * ratioA + rw * ratioB;
    this.x = lx * ratioA + rx * ratioB;
    this.y = ly * ratioA + ry * ratioB;
    this.z = lz * ratioA + rz * ratioB;
    return this;
  }, transformVector:function(vec, res) {
    if (res === undefined) {
      res = new pc.Vec3;
    }
    var x = vec.x, y = vec.y, z = vec.z;
    var qx = this.x, qy = this.y, qz = this.z, qw = this.w;
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;
    res.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    res.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    res.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return res;
  }, toString:function() {
    return "[" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + "]";
  }};
  Object.defineProperty(Quat, "IDENTITY", {get:function() {
    var identity = new Quat;
    return function() {
      return identity;
    };
  }()});
  Object.defineProperty(Quat, "ZERO", {get:function() {
    var zero = new Quat(0, 0, 0, 0);
    return function() {
      return zero;
    };
  }()});
  return {Quat:Quat};
}());
pc.extend(pc, function() {
  var CURVE_LINEAR = 0;
  var CURVE_SMOOTHSTEP = 1;
  var CURVE_CATMULL = 2;
  var CURVE_CARDINAL = 3;
  var Curve = function(data) {
    this.keys = [];
    this.type = CURVE_SMOOTHSTEP;
    this.tension = 0.5;
    if (data) {
      for (var i = 0; i < data.length - 1; i += 2) {
        this.keys.push([data[i], data[i + 1]]);
      }
    }
    this.sort();
  };
  Curve.prototype = {add:function(time, value) {
    var keys = this.keys;
    var len = keys.length;
    var i = 0;
    for (; i < len; i++) {
      if (keys[i][0] > time) {
        break;
      }
    }
    var key = [time, value];
    this.keys.splice(i, 0, key);
    return key;
  }, get:function(index) {
    return this.keys[index];
  }, sort:function() {
    this.keys.sort(function(a, b) {
      return a[0] - b[0];
    });
  }, value:function(time) {
    var keys = this.keys;
    if (!keys.length) {
      return 0;
    }
    if (time < keys[0][0]) {
      return keys[0][1];
    } else {
      if (time > keys[keys.length - 1][0]) {
        return keys[keys.length - 1][1];
      }
    }
    var leftTime = 0;
    var leftValue = keys.length ? keys[0][1] : 0;
    var rightTime = 1;
    var rightValue = 0;
    for (var i = 0, len = keys.length; i < len; i++) {
      if (keys[i][0] === time) {
        return keys[i][1];
      }
      rightValue = keys[i][1];
      if (time < keys[i][0]) {
        rightTime = keys[i][0];
        break;
      }
      leftTime = keys[i][0];
      leftValue = keys[i][1];
    }
    var div = rightTime - leftTime;
    var interpolation = div === 0 ? 0 : (time - leftTime) / div;
    if (this.type === CURVE_SMOOTHSTEP) {
      interpolation *= interpolation * (3 - 2 * interpolation);
    } else {
      if (this.type === CURVE_CATMULL || this.type === CURVE_CARDINAL) {
        var p1 = leftValue;
        var p2 = rightValue;
        var p0 = p1 + (p1 - p2);
        var p3 = p2 + (p2 - p1);
        var dt1 = rightTime - leftTime;
        var dt0 = dt1;
        var dt2 = dt1;
        if (i > 0) {
          i = i - 1;
        }
        if (i > 0) {
          p0 = keys[i - 1][1];
          dt0 = keys[i][0] - keys[i - 1][0];
        }
        if (keys.length > i + 1) {
          dt1 = keys[i + 1][0] - keys[i][0];
        }
        if (keys.length > i + 2) {
          dt2 = keys[i + 2][0] - keys[i + 1][0];
          p3 = keys[i + 2][1];
        }
        p0 = p1 + (p0 - p1) * dt1 / dt0;
        p3 = p2 + (p3 - p2) * dt1 / dt2;
        if (this.type === CURVE_CATMULL) {
          return this._interpolateCatmullRom(p0, p1, p2, p3, interpolation);
        } else {
          return this._interpolateCardinal(p0, p1, p2, p3, interpolation, this.tension);
        }
      }
    }
    return pc.math.lerp(leftValue, rightValue, interpolation);
  }, _interpolateHermite:function(p0, p1, t0, t1, s) {
    var s2 = s * s;
    var s3 = s * s * s;
    var h0 = 2 * s3 - 3 * s2 + 1;
    var h1 = -2 * s3 + 3 * s2;
    var h2 = s3 - 2 * s2 + s;
    var h3 = s3 - s2;
    return p0 * h0 + p1 * h1 + t0 * h2 + t1 * h3;
  }, _interpolateCardinal:function(p0, p1, p2, p3, s, t) {
    var t0 = t * (p2 - p0);
    var t1 = t * (p3 - p1);
    return this._interpolateHermite(p1, p2, t0, t1, s);
  }, _interpolateCatmullRom:function(p0, p1, p2, p3, s) {
    return this._interpolateCardinal(p0, p1, p2, p3, s, 0.5);
  }, closest:function(time) {
    var keys = this.keys;
    var length = keys.length;
    var min = 2;
    var result = null;
    for (var i = 0; i < length; i++) {
      var diff = Math.abs(time - keys[i][0]);
      if (min >= diff) {
        min = diff;
        result = keys[i];
      } else {
        break;
      }
    }
    return result;
  }, clone:function() {
    var result = new pc.Curve;
    result.keys = pc.extend(result.keys, this.keys);
    result.type = this.type;
    return result;
  }, quantize:function(precision) {
    precision = Math.max(precision, 2);
    var values = new Float32Array(precision);
    var step = 1.0 / (precision - 1);
    for (var i = 0; i < precision; i++) {
      var value = this.value(step * i);
      values[i] = value;
    }
    return values;
  }};
  Object.defineProperty(Curve.prototype, "length", {get:function() {
    return this.keys.length;
  }});
  return {Curve:Curve, CURVE_LINEAR:CURVE_LINEAR, CURVE_SMOOTHSTEP:CURVE_SMOOTHSTEP, CURVE_CATMULL:CURVE_CATMULL, CURVE_CARDINAL:CURVE_CARDINAL};
}());
pc.extend(pc, function() {
  var CurveSet = function() {
    var i;
    this.curves = [];
    this._type = pc.CURVE_SMOOTHSTEP;
    if (arguments.length > 1) {
      for (i = 0; i < arguments.length; i++) {
        this.curves.push(new pc.Curve(arguments[i]));
      }
    } else {
      if (arguments.length === 0) {
        this.curves.push(new pc.Curve);
      } else {
        var arg = arguments[0];
        if (pc.type(arg) === "number") {
          for (i = 0; i < arg; i++) {
            this.curves.push(new pc.Curve);
          }
        } else {
          for (i = 0; i < arg.length; i++) {
            this.curves.push(new pc.Curve(arg[i]));
          }
        }
      }
    }
  };
  CurveSet.prototype = {get:function(index) {
    return this.curves[index];
  }, value:function(time, result) {
    var length = this.curves.length;
    result = result || [];
    result.length = length;
    for (var i = 0; i < length; i++) {
      result[i] = this.curves[i].value(time);
    }
    return result;
  }, clone:function() {
    var result = new pc.CurveSet;
    result.curves = [];
    for (var i = 0; i < this.curves.length; i++) {
      result.curves.push(this.curves[i].clone());
    }
    result._type = this._type;
    return result;
  }, quantize:function(precision) {
    precision = Math.max(precision, 2);
    var numCurves = this.curves.length;
    var values = new Float32Array(precision * numCurves);
    var step = 1.0 / (precision - 1);
    var temp = [];
    for (var i = 0; i < precision; i++) {
      var value = this.value(step * i, temp);
      if (numCurves == 1) {
        values[i] = value[0];
      } else {
        for (var j = 0; j < numCurves; j++) {
          values[i * numCurves + j] = value[j];
        }
      }
    }
    return values;
  }};
  Object.defineProperty(CurveSet.prototype, "length", {get:function() {
    return this.curves.length;
  }});
  Object.defineProperty(CurveSet.prototype, "type", {get:function() {
    return this._type;
  }, set:function(value) {
    this._type = value;
    for (var i = 0; i < this.curves.length; i++) {
      this.curves[i].type = value;
    }
  }});
  return {CurveSet:CurveSet};
}());
pc.extend(pc, function() {
  var tmpVecA = new pc.Vec3;
  var tmpVecB = new pc.Vec3;
  var tmpVecC = new pc.Vec3;
  var tmpVecD = new pc.Vec3;
  var tmpVecE = new pc.Vec3;
  var BoundingBox = function BoundingBox(center, halfExtents) {
    this.center = center || new pc.Vec3(0, 0, 0);
    this.halfExtents = halfExtents || new pc.Vec3(0.5, 0.5, 0.5);
    this._min = new pc.Vec3;
    this._max = new pc.Vec3;
  };
  BoundingBox.prototype = {add:function(other) {
    var tc = this.center.data;
    var tcx = tc[0];
    var tcy = tc[1];
    var tcz = tc[2];
    var th = this.halfExtents.data;
    var thx = th[0];
    var thy = th[1];
    var thz = th[2];
    var tminx = tcx - thx;
    var tmaxx = tcx + thx;
    var tminy = tcy - thy;
    var tmaxy = tcy + thy;
    var tminz = tcz - thz;
    var tmaxz = tcz + thz;
    var oc = other.center.data;
    var ocx = oc[0];
    var ocy = oc[1];
    var ocz = oc[2];
    var oh = other.halfExtents.data;
    var ohx = oh[0];
    var ohy = oh[1];
    var ohz = oh[2];
    var ominx = ocx - ohx;
    var omaxx = ocx + ohx;
    var ominy = ocy - ohy;
    var omaxy = ocy + ohy;
    var ominz = ocz - ohz;
    var omaxz = ocz + ohz;
    if (ominx < tminx) {
      tminx = ominx;
    }
    if (omaxx > tmaxx) {
      tmaxx = omaxx;
    }
    if (ominy < tminy) {
      tminy = ominy;
    }
    if (omaxy > tmaxy) {
      tmaxy = omaxy;
    }
    if (ominz < tminz) {
      tminz = ominz;
    }
    if (omaxz > tmaxz) {
      tmaxz = omaxz;
    }
    tc[0] = (tminx + tmaxx) * 0.5;
    tc[1] = (tminy + tmaxy) * 0.5;
    tc[2] = (tminz + tmaxz) * 0.5;
    th[0] = (tmaxx - tminx) * 0.5;
    th[1] = (tmaxy - tminy) * 0.5;
    th[2] = (tmaxz - tminz) * 0.5;
  }, copy:function(src) {
    this.center.copy(src.center);
    this.halfExtents.copy(src.halfExtents);
    this.type = src.type;
  }, clone:function() {
    return new pc.BoundingBox(this.center.clone(), this.halfExtents.clone());
  }, intersects:function(other) {
    var aMax = this.getMax();
    var aMin = this.getMin();
    var bMax = other.getMax();
    var bMin = other.getMin();
    return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
  }, _intersectsRay:function(ray, point) {
    var tMin = tmpVecA.copy(this.getMin()).sub(ray.origin).data;
    var tMax = tmpVecB.copy(this.getMax()).sub(ray.origin).data;
    var dir = ray.direction.data;
    for (var i = 0; i < 3; i++) {
      if (dir[i] === 0) {
        tMin[i] = tMin[i] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
        tMax[i] = tMax[i] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;
      } else {
        tMin[i] /= dir[i];
        tMax[i] /= dir[i];
      }
    }
    var realMin = tmpVecC.set(Math.min(tMin[0], tMax[0]), Math.min(tMin[1], tMax[1]), Math.min(tMin[2], tMax[2])).data;
    var realMax = tmpVecD.set(Math.max(tMin[0], tMax[0]), Math.max(tMin[1], tMax[1]), Math.max(tMin[2], tMax[2])).data;
    var minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);
    var maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);
    var intersects = minMax >= maxMin && maxMin >= 0;
    if (intersects) {
      point.copy(ray.direction).scale(maxMin).add(ray.origin);
    }
    return intersects;
  }, _fastIntersectsRay:function(ray) {
    var diff = tmpVecA;
    var cross = tmpVecB;
    var prod = tmpVecC;
    var absDiff = tmpVecD;
    var absDir = tmpVecE;
    var rayDir = ray.direction;
    diff.sub2(ray.origin, this.center);
    absDiff.set(Math.abs(diff.x), Math.abs(diff.y), Math.abs(diff.z));
    prod.mul2(diff, rayDir);
    if (absDiff.x > this.halfExtents.x && prod.x >= 0) {
      return false;
    }
    if (absDiff.y > this.halfExtents.y && prod.y >= 0) {
      return false;
    }
    if (absDiff.z > this.halfExtents.z && prod.z >= 0) {
      return false;
    }
    absDir.set(Math.abs(rayDir.x), Math.abs(rayDir.y), Math.abs(rayDir.z));
    cross.cross(rayDir, diff);
    cross.set(Math.abs(cross.x), Math.abs(cross.y), Math.abs(cross.z));
    if (cross.x > this.halfExtents.y * absDir.z + this.halfExtents.z * absDir.y) {
      return false;
    }
    if (cross.y > this.halfExtents.x * absDir.z + this.halfExtents.z * absDir.x) {
      return false;
    }
    if (cross.z > this.halfExtents.x * absDir.y + this.halfExtents.y * absDir.x) {
      return false;
    }
    return true;
  }, intersectsRay:function(ray, point) {
    if (point) {
      return this._intersectsRay(ray, point);
    } else {
      return this._fastIntersectsRay(ray);
    }
  }, setMinMax:function(min, max) {
    this.center.add2(max, min).scale(0.5);
    this.halfExtents.sub2(max, min).scale(0.5);
  }, getMin:function() {
    return this._min.copy(this.center).sub(this.halfExtents);
  }, getMax:function() {
    return this._max.copy(this.center).add(this.halfExtents);
  }, containsPoint:function(point) {
    var min = this.getMin();
    var max = this.getMax();
    var i;
    for (i = 0; i < 3; ++i) {
      if (point.data[i] < min.data[i] || point.data[i] > max.data[i]) {
        return false;
      }
    }
    return true;
  }, setFromTransformedAabb:function(aabb, m) {
    var bc = this.center;
    var br = this.halfExtents;
    var ac = aabb.center.data;
    var ar = aabb.halfExtents.data;
    m = m.data;
    var mx0 = m[0];
    var mx1 = m[4];
    var mx2 = m[8];
    var my0 = m[1];
    var my1 = m[5];
    var my2 = m[9];
    var mz0 = m[2];
    var mz1 = m[6];
    var mz2 = m[10];
    var mx0a = Math.abs(mx0);
    var mx1a = Math.abs(mx1);
    var mx2a = Math.abs(mx2);
    var my0a = Math.abs(my0);
    var my1a = Math.abs(my1);
    var my2a = Math.abs(my2);
    var mz0a = Math.abs(mz0);
    var mz1a = Math.abs(mz1);
    var mz2a = Math.abs(mz2);
    bc.set(m[12] + mx0 * ac[0] + mx1 * ac[1] + mx2 * ac[2], m[13] + my0 * ac[0] + my1 * ac[1] + my2 * ac[2], m[14] + mz0 * ac[0] + mz1 * ac[1] + mz2 * ac[2]);
    br.set(mx0a * ar[0] + mx1a * ar[1] + mx2a * ar[2], my0a * ar[0] + my1a * ar[1] + my2a * ar[2], mz0a * ar[0] + mz1a * ar[1] + mz2a * ar[2]);
  }, compute:function(vertices) {
    var min = tmpVecA.set(vertices[0], vertices[1], vertices[2]);
    var max = tmpVecB.set(vertices[0], vertices[1], vertices[2]);
    var numVerts = vertices.length / 3;
    for (var i = 1; i < numVerts; i++) {
      var x = vertices[i * 3 + 0];
      var y = vertices[i * 3 + 1];
      var z = vertices[i * 3 + 2];
      if (x < min.x) {
        min.x = x;
      }
      if (y < min.y) {
        min.y = y;
      }
      if (z < min.z) {
        min.z = z;
      }
      if (x > max.x) {
        max.x = x;
      }
      if (y > max.y) {
        max.y = y;
      }
      if (z > max.z) {
        max.z = z;
      }
    }
    this.setMinMax(min, max);
  }, intersectsBoundingSphere:function(sphere) {
    var sq = this._distanceToBoundingSphereSq(sphere);
    if (sq <= sphere.radius * sphere.radius) {
      return true;
    }
    return false;
  }, _distanceToBoundingSphereSq:function(sphere) {
    var boxMin = this.getMin();
    var boxMax = this.getMax();
    var sq = 0;
    for (var i = 0; i < 3; ++i) {
      var out = 0;
      var pn = sphere.center.data[i];
      var bMin = boxMin.data[i];
      var bMax = boxMax.data[i];
      var val = 0;
      if (pn < bMin) {
        val = bMin - pn;
        out += val * val;
      }
      if (pn > bMax) {
        val = pn - bMax;
        out += val * val;
      }
      sq += out;
    }
    return sq;
  }};
  return {BoundingBox:BoundingBox};
}());
pc.extend(pc, function() {
  var tmpVecA = new pc.Vec3;
  var tmpVecB = new pc.Vec3;
  var tmpVecC = new pc.Vec3;
  var tmpVecD = new pc.Vec3;
  function BoundingSphere(center, radius) {
    this.center = center || new pc.Vec3(0, 0, 0);
    this.radius = radius === undefined ? 0.5 : radius;
  }
  BoundingSphere.prototype = {containsPoint:function(point) {
    var lenSq = tmpVecA.sub2(point, this.center).lengthSq();
    var r = this.radius;
    return lenSq < r * r;
  }, compute:function(vertices) {
    var i;
    var numVerts = vertices.length / 3;
    var vertex = tmpVecA;
    var avgVertex = tmpVecB;
    var sum = tmpVecC;
    for (i = 0; i < numVerts; i++) {
      vertex.set(vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2]);
      sum.addSelf(vertex);
      if (i % 100 === 0) {
        sum.scale(1 / numVerts);
        avgVertex.add(sum);
        sum.set(0, 0, 0);
      }
    }
    sum.scale(1 / numVerts);
    avgVertex.add(sum);
    this.center.copy(avgVertex);
    var maxDistSq = 0;
    var centerToVert = tmpVecD;
    for (i = 0; i < numVerts; i++) {
      vertex.set(vertices[i * 3], vertices[i * 3 + 1], vertices[i * 3 + 2]);
      centerToVert.sub2(vertex, this.center);
      maxDistSq = Math.max(centerToVert.lengthSq(), maxDistSq);
    }
    this.radius = Math.sqrt(maxDistSq);
  }, intersectsRay:function(ray, point) {
    var m = tmpVecA.copy(ray.origin).sub(this.center);
    var b = m.dot(tmpVecB.copy(ray.direction).normalize());
    var c = m.dot(m) - this.radius * this.radius;
    if (c > 0 && b > 0) {
      return null;
    }
    var discr = b * b - c;
    if (discr < 0) {
      return false;
    }
    var t = Math.abs(-b - Math.sqrt(discr));
    if (point) {
      point.copy(ray.direction).scale(t).add(ray.origin);
    }
    return true;
  }, intersectsBoundingSphere:function(sphere) {
    tmpVecA.sub2(sphere.center, this.center);
    var totalRadius = sphere.radius + this.radius;
    if (tmpVecA.lengthSq() <= totalRadius * totalRadius) {
      return true;
    }
    return false;
  }};
  return {BoundingSphere:BoundingSphere};
}());
pc.extend(pc, function() {
  var viewProj = new pc.Mat4;
  var Frustum = function Frustum(projectionMatrix, viewMatrix) {
    projectionMatrix = projectionMatrix || (new pc.Mat4).setPerspective(90, 16 / 9, 0.1, 1000);
    viewMatrix = viewMatrix || new pc.Mat4;
    this.planes = [];
    for (var i = 0; i < 6; i++) {
      this.planes[i] = [];
    }
    this.update(projectionMatrix, viewMatrix);
  };
  Frustum.prototype = {update:function(projectionMatrix, viewMatrix) {
    viewProj.mul2(projectionMatrix, viewMatrix);
    var vpm = viewProj.data;
    this.planes[0][0] = vpm[3] - vpm[0];
    this.planes[0][1] = vpm[7] - vpm[4];
    this.planes[0][2] = vpm[11] - vpm[8];
    this.planes[0][3] = vpm[15] - vpm[12];
    var t = Math.sqrt(this.planes[0][0] * this.planes[0][0] + this.planes[0][1] * this.planes[0][1] + this.planes[0][2] * this.planes[0][2]);
    this.planes[0][0] /= t;
    this.planes[0][1] /= t;
    this.planes[0][2] /= t;
    this.planes[0][3] /= t;
    this.planes[1][0] = vpm[3] + vpm[0];
    this.planes[1][1] = vpm[7] + vpm[4];
    this.planes[1][2] = vpm[11] + vpm[8];
    this.planes[1][3] = vpm[15] + vpm[12];
    t = Math.sqrt(this.planes[1][0] * this.planes[1][0] + this.planes[1][1] * this.planes[1][1] + this.planes[1][2] * this.planes[1][2]);
    this.planes[1][0] /= t;
    this.planes[1][1] /= t;
    this.planes[1][2] /= t;
    this.planes[1][3] /= t;
    this.planes[2][0] = vpm[3] + vpm[1];
    this.planes[2][1] = vpm[7] + vpm[5];
    this.planes[2][2] = vpm[11] + vpm[9];
    this.planes[2][3] = vpm[15] + vpm[13];
    t = Math.sqrt(this.planes[2][0] * this.planes[2][0] + this.planes[2][1] * this.planes[2][1] + this.planes[2][2] * this.planes[2][2]);
    this.planes[2][0] /= t;
    this.planes[2][1] /= t;
    this.planes[2][2] /= t;
    this.planes[2][3] /= t;
    this.planes[3][0] = vpm[3] - vpm[1];
    this.planes[3][1] = vpm[7] - vpm[5];
    this.planes[3][2] = vpm[11] - vpm[9];
    this.planes[3][3] = vpm[15] - vpm[13];
    t = Math.sqrt(this.planes[3][0] * this.planes[3][0] + this.planes[3][1] * this.planes[3][1] + this.planes[3][2] * this.planes[3][2]);
    this.planes[3][0] /= t;
    this.planes[3][1] /= t;
    this.planes[3][2] /= t;
    this.planes[3][3] /= t;
    this.planes[4][0] = vpm[3] - vpm[2];
    this.planes[4][1] = vpm[7] - vpm[6];
    this.planes[4][2] = vpm[11] - vpm[10];
    this.planes[4][3] = vpm[15] - vpm[14];
    t = Math.sqrt(this.planes[4][0] * this.planes[4][0] + this.planes[4][1] * this.planes[4][1] + this.planes[4][2] * this.planes[4][2]);
    this.planes[4][0] /= t;
    this.planes[4][1] /= t;
    this.planes[4][2] /= t;
    this.planes[4][3] /= t;
    this.planes[5][0] = vpm[3] + vpm[2];
    this.planes[5][1] = vpm[7] + vpm[6];
    this.planes[5][2] = vpm[11] + vpm[10];
    this.planes[5][3] = vpm[15] + vpm[14];
    t = Math.sqrt(this.planes[5][0] * this.planes[5][0] + this.planes[5][1] * this.planes[5][1] + this.planes[5][2] * this.planes[5][2]);
    this.planes[5][0] /= t;
    this.planes[5][1] /= t;
    this.planes[5][2] /= t;
    this.planes[5][3] /= t;
  }, containsPoint:function(point) {
    for (var p = 0; p < 6; p++) {
      if (this.planes[p][0] * point.x + this.planes[p][1] * point.y + this.planes[p][2] * point.z + this.planes[p][3] <= 0) {
        return false;
      }
    }
    return true;
  }, containsSphere:function(sphere) {
    var c = 0;
    var d;
    var p;
    var sr = sphere.radius;
    var sc = sphere.center.data;
    var scx = sc[0];
    var scy = sc[1];
    var scz = sc[2];
    var planes = this.planes;
    var plane;
    for (p = 0; p < 6; p++) {
      plane = planes[p];
      d = plane[0] * scx + plane[1] * scy + plane[2] * scz + plane[3];
      if (d <= -sr) {
        return 0;
      }
      if (d > sr) {
        c++;
      }
    }
    return c === 6 ? 2 : 1;
  }};
  return {Frustum:Frustum};
}());
pc.extend(pc, function() {
  var tmpVecA = new pc.Vec3;
  var Plane = function Plane(point, normal) {
    this.normal = normal || new pc.Vec3(0, 0, 1);
    this.point = point || new pc.Vec3(0, 0, 0);
  };
  Plane.prototype = {intersectsLine:function(start, end, point) {
    var d = -this.normal.dot(this.point);
    var d0 = this.normal.dot(start) + d;
    var d1 = this.normal.dot(end) + d;
    var t = d0 / (d0 - d1);
    var intersects = t >= 0 && t <= 1;
    if (intersects && point) {
      point.lerp(start, end, t);
    }
    return intersects;
  }, intersectsRay:function(ray, point) {
    var pointToOrigin = tmpVecA.sub2(this.point, ray.origin);
    var t = this.normal.dot(pointToOrigin) / this.normal.dot(ray.direction);
    var intersects = t >= 0;
    if (intersects && point) {
      point.copy(ray.direction).scale(t).add(ray.origin);
    }
    return intersects;
  }};
  return {Plane:Plane};
}());
pc.extend(pc, function() {
  var Ray = function Ray(origin, direction) {
    this.origin = origin || new pc.Vec3(0, 0, 0);
    this.direction = direction || new pc.Vec3(0, 0, -1);
  };
  return {Ray:Ray};
}());
pc.extend(pc, function() {
  var tmpRay = new pc.Ray;
  var tmpVec3 = new pc.Vec3;
  var tmpSphere = new pc.BoundingSphere;
  var tmpMat4 = new pc.Mat4;
  var OrientedBox = function OrientedBox(worldTransform, halfExtents) {
    this.halfExtents = halfExtents || new pc.Vec3(0.5, 0.5, 0.5);
    worldTransform = worldTransform || tmpMat4.setIdentity();
    this._modelTransform = worldTransform.clone().invert();
    this._aabb = new pc.BoundingBox(new pc.Vec3, this.halfExtents);
  };
  OrientedBox.prototype = {intersectsRay:function(ray, point) {
    this._modelTransform.transformPoint(ray.origin, tmpRay.origin);
    this._modelTransform.transformVector(ray.direction, tmpRay.direction);
    if (point) {
      var result = this._aabb._intersectsRay(tmpRay, point);
      tmpMat4.copy(this._modelTransform).invert().transformPoint(point, point);
      return result;
    } else {
      return this._aabb._fastIntersectsRay(tmpRay);
    }
  }, containsPoint:function(point) {
    this._modelTransform.transformPoint(point, tmpVec3);
    return this._aabb.containsPoint(tmpVec3);
  }, intersectsBoundingSphere:function(sphere) {
    this._modelTransform.transformPoint(sphere.center, tmpSphere.center);
    tmpSphere.radius = sphere.radius;
    if (this._aabb.intersectsBoundingSphere(tmpSphere)) {
      return true;
    }
    return false;
  }};
  Object.defineProperty(OrientedBox.prototype, "worldTransform", {set:function(value) {
    this._modelTransform.copy(value).invert();
  }});
  return {OrientedBox:OrientedBox};
}());
(function() {
  var enums = {ADDRESS_REPEAT:0, ADDRESS_CLAMP_TO_EDGE:1, ADDRESS_MIRRORED_REPEAT:2, BLENDMODE_ZERO:0, BLENDMODE_ONE:1, BLENDMODE_SRC_COLOR:2, BLENDMODE_ONE_MINUS_SRC_COLOR:3, BLENDMODE_DST_COLOR:4, BLENDMODE_ONE_MINUS_DST_COLOR:5, BLENDMODE_SRC_ALPHA:6, BLENDMODE_SRC_ALPHA_SATURATE:7, BLENDMODE_ONE_MINUS_SRC_ALPHA:8, BLENDMODE_DST_ALPHA:9, BLENDMODE_ONE_MINUS_DST_ALPHA:10, BLENDEQUATION_ADD:0, BLENDEQUATION_SUBTRACT:1, BLENDEQUATION_REVERSE_SUBTRACT:2, BLENDEQUATION_MIN:3, BLENDEQUATION_MAX:4, BUFFER_STATIC:0, 
  BUFFER_DYNAMIC:1, BUFFER_STREAM:2, BUFFER_GPUDYNAMIC:3, CLEARFLAG_COLOR:1, CLEARFLAG_DEPTH:2, CLEARFLAG_STENCIL:4, CUBEFACE_POSX:0, CUBEFACE_NEGX:1, CUBEFACE_POSY:2, CUBEFACE_NEGY:3, CUBEFACE_POSZ:4, CUBEFACE_NEGZ:5, CULLFACE_NONE:0, CULLFACE_BACK:1, CULLFACE_FRONT:2, CULLFACE_FRONTANDBACK:3, TYPE_INT8:0, TYPE_UINT8:1, TYPE_INT16:2, TYPE_UINT16:3, TYPE_INT32:4, TYPE_UINT32:5, TYPE_FLOAT32:6, FILTER_NEAREST:0, FILTER_LINEAR:1, FILTER_NEAREST_MIPMAP_NEAREST:2, FILTER_NEAREST_MIPMAP_LINEAR:3, FILTER_LINEAR_MIPMAP_NEAREST:4, 
  FILTER_LINEAR_MIPMAP_LINEAR:5, FUNC_NEVER:0, FUNC_LESS:1, FUNC_EQUAL:2, FUNC_LESSEQUAL:3, FUNC_GREATER:4, FUNC_NOTEQUAL:5, FUNC_GREATEREQUAL:6, FUNC_ALWAYS:7, INDEXFORMAT_UINT8:0, INDEXFORMAT_UINT16:1, INDEXFORMAT_UINT32:2, PIXELFORMAT_A8:0, PIXELFORMAT_L8:1, PIXELFORMAT_L8_A8:2, PIXELFORMAT_R5_G6_B5:3, PIXELFORMAT_R5_G5_B5_A1:4, PIXELFORMAT_R4_G4_B4_A4:5, PIXELFORMAT_R8_G8_B8:6, PIXELFORMAT_R8_G8_B8_A8:7, PIXELFORMAT_DXT1:8, PIXELFORMAT_DXT3:9, PIXELFORMAT_DXT5:10, PIXELFORMAT_RGB16F:11, PIXELFORMAT_RGBA16F:12, 
  PIXELFORMAT_RGB32F:13, PIXELFORMAT_RGBA32F:14, PIXELFORMAT_R32F:15, PIXELFORMAT_DEPTH:16, PIXELFORMAT_DEPTHSTENCIL:17, PIXELFORMAT_111110F:18, PIXELFORMAT_SRGB:19, PIXELFORMAT_SRGBA:20, PIXELFORMAT_ETC1:21, PIXELFORMAT_PVRTC_2BPP_RGB_1:22, PIXELFORMAT_PVRTC_2BPP_RGBA_1:23, PIXELFORMAT_PVRTC_4BPP_RGB_1:24, PIXELFORMAT_PVRTC_4BPP_RGBA_1:25, PRIMITIVE_POINTS:0, PRIMITIVE_LINES:1, PRIMITIVE_LINELOOP:2, PRIMITIVE_LINESTRIP:3, PRIMITIVE_TRIANGLES:4, PRIMITIVE_TRISTRIP:5, PRIMITIVE_TRIFAN:6, SEMANTIC_POSITION:"POSITION", 
  SEMANTIC_NORMAL:"NORMAL", SEMANTIC_TANGENT:"TANGENT", SEMANTIC_BLENDWEIGHT:"BLENDWEIGHT", SEMANTIC_BLENDINDICES:"BLENDINDICES", SEMANTIC_COLOR:"COLOR", SEMANTIC_TEXCOORD0:"TEXCOORD0", SEMANTIC_TEXCOORD1:"TEXCOORD1", SEMANTIC_TEXCOORD2:"TEXCOORD2", SEMANTIC_TEXCOORD3:"TEXCOORD3", SEMANTIC_TEXCOORD4:"TEXCOORD4", SEMANTIC_TEXCOORD5:"TEXCOORD5", SEMANTIC_TEXCOORD6:"TEXCOORD6", SEMANTIC_TEXCOORD7:"TEXCOORD7", SEMANTIC_ATTR0:"ATTR0", SEMANTIC_ATTR1:"ATTR1", SEMANTIC_ATTR2:"ATTR2", SEMANTIC_ATTR3:"ATTR3", 
  SEMANTIC_ATTR4:"ATTR4", SEMANTIC_ATTR5:"ATTR5", SEMANTIC_ATTR6:"ATTR6", SEMANTIC_ATTR7:"ATTR7", SEMANTIC_ATTR8:"ATTR8", SEMANTIC_ATTR9:"ATTR9", SEMANTIC_ATTR10:"ATTR10", SEMANTIC_ATTR11:"ATTR11", SEMANTIC_ATTR12:"ATTR12", SEMANTIC_ATTR13:"ATTR13", SEMANTIC_ATTR14:"ATTR14", SEMANTIC_ATTR15:"ATTR15", SHADERTAG_MATERIAL:1, STENCILOP_KEEP:0, STENCILOP_ZERO:1, STENCILOP_REPLACE:2, STENCILOP_INCREMENT:3, STENCILOP_INCREMENTWRAP:4, STENCILOP_DECREMENT:5, STENCILOP_DECREMENTWRAP:6, STENCILOP_INVERT:7, 
  TEXTURELOCK_READ:1, TEXTURELOCK_WRITE:2, TEXHINT_NONE:0, TEXHINT_SHADOWMAP:1, TEXHINT_ASSET:2, TEXHINT_LIGHTMAP:3, UNIFORMTYPE_BOOL:0, UNIFORMTYPE_INT:1, UNIFORMTYPE_FLOAT:2, UNIFORMTYPE_VEC2:3, UNIFORMTYPE_VEC3:4, UNIFORMTYPE_VEC4:5, UNIFORMTYPE_IVEC2:6, UNIFORMTYPE_IVEC3:7, UNIFORMTYPE_IVEC4:8, UNIFORMTYPE_BVEC2:9, UNIFORMTYPE_BVEC3:10, UNIFORMTYPE_BVEC4:11, UNIFORMTYPE_MAT2:12, UNIFORMTYPE_MAT3:13, UNIFORMTYPE_MAT4:14, UNIFORMTYPE_TEXTURE2D:15, UNIFORMTYPE_TEXTURECUBE:16, UNIFORMTYPE_FLOATARRAY:17, 
  UNIFORMTYPE_TEXTURE2D_SHADOW:18, UNIFORMTYPE_TEXTURECUBE_SHADOW:19, UNIFORMTYPE_TEXTURE3D:20};
  pc.extend(pc, enums);
  pc.gfx = {};
  pc.extend(pc.gfx, enums);
})();
pc.extend(pc, function() {
  var ScopeId = function(name) {
    this.name = name;
    this.value = null;
    this.versionObject = new pc.VersionedObject;
  };
  ScopeId.prototype = {setValue:function(value) {
    this.value = value;
    this.versionObject.increment();
  }, getValue:function(value) {
    return this.value;
  }};
  return {ScopeId:ScopeId};
}());
pc.extend(pc, function() {
  var ScopeSpace = function(name) {
    this.name = name;
    this.variables = {};
    this.namespaces = {};
  };
  ScopeSpace.prototype = {resolve:function(name) {
    if (this.variables.hasOwnProperty(name) === false) {
      this.variables[name] = new pc.ScopeId(name);
    }
    return this.variables[name];
  }, getSubSpace:function(name) {
    if (this.namespaces.hasOwnProperty(name) === false) {
      this.namespaces[name] = new pc.ScopeSpace(name);
      logDEBUG("Added ScopeSpace: " + name);
    }
    return this.namespaces[name];
  }};
  return {ScopeSpace:ScopeSpace};
}());
pc.extend(pc, function() {
  var Version = function() {
    this.globalId = 0;
    this.revision = 0;
  };
  Version.prototype = {equals:function(other) {
    return this.globalId === other.globalId && this.revision === other.revision;
  }, notequals:function(other) {
    return this.globalId !== other.globalId || this.revision !== other.revision;
  }, copy:function(other) {
    this.globalId = other.globalId;
    this.revision = other.revision;
  }, reset:function() {
    this.globalId = 0;
    this.revision = 0;
  }};
  return {Version:Version};
}());
pc.extend(pc, function() {
  var idCounter = 0;
  var VersionedObject = function() {
    idCounter++;
    this.version = new pc.Version;
    this.version.globalId = idCounter;
  };
  VersionedObject.prototype = {increment:function() {
    this.version.revision++;
  }};
  return {VersionedObject:VersionedObject};
}());
pc.extend(pc, function() {
  function VertexIteratorSetter(buffer, vertexElement) {
    this.index = 0;
    switch(vertexElement.dataType) {
      case pc.TYPE_INT8:
        this.array = new Int8Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_UINT8:
        this.array = new Uint8Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_INT16:
        this.array = new Int16Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_UINT16:
        this.array = new Uint16Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_INT32:
        this.array = new Int32Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_UINT32:
        this.array = new Uint32Array(buffer, vertexElement.offset);
        break;
      case pc.TYPE_FLOAT32:
        this.array = new Float32Array(buffer, vertexElement.offset);
        break;
    }
    switch(vertexElement.numComponents) {
      case 1:
        this.set = VertexIteratorSetter_set1;
        break;
      case 2:
        this.set = VertexIteratorSetter_set2;
        break;
      case 3:
        this.set = VertexIteratorSetter_set3;
        break;
      case 4:
        this.set = VertexIteratorSetter_set4;
        break;
    }
  }
  function VertexIteratorSetter_set1(a) {
    this.array[this.index] = a;
  }
  function VertexIteratorSetter_set2(a, b) {
    this.array[this.index] = a;
    this.array[this.index + 1] = b;
  }
  function VertexIteratorSetter_set3(a, b, c) {
    this.array[this.index] = a;
    this.array[this.index + 1] = b;
    this.array[this.index + 2] = c;
  }
  function VertexIteratorSetter_set4(a, b, c, d) {
    this.array[this.index] = a;
    this.array[this.index + 1] = b;
    this.array[this.index + 2] = c;
    this.array[this.index + 3] = d;
  }
  function VertexIterator(vertexBuffer) {
    this.vertexBuffer = vertexBuffer;
    this.buffer = this.vertexBuffer.lock();
    this.setters = [];
    this.element = {};
    var vertexFormat = this.vertexBuffer.getFormat();
    for (var i = 0; i < vertexFormat.elements.length; i++) {
      var vertexElement = vertexFormat.elements[i];
      this.setters[i] = new VertexIteratorSetter(this.buffer, vertexElement);
      this.element[vertexElement.name] = this.setters[i];
    }
  }
  VertexIterator.prototype = {next:function() {
    var i = 0;
    var setters = this.setters;
    var numSetters = this.setters.length;
    var vertexFormat = this.vertexBuffer.getFormat();
    while (i < numSetters) {
      var setter = setters[i++];
      setter.index += vertexFormat.size / setter.array.constructor.BYTES_PER_ELEMENT;
    }
  }, end:function() {
    this.vertexBuffer.unlock();
  }};
  return {VertexIterator:VertexIterator};
}());
pc.extend(pc, function() {
  var _typeSize = [];
  _typeSize[pc.TYPE_INT8] = 1;
  _typeSize[pc.TYPE_UINT8] = 1;
  _typeSize[pc.TYPE_INT16] = 2;
  _typeSize[pc.TYPE_UINT16] = 2;
  _typeSize[pc.TYPE_INT32] = 4;
  _typeSize[pc.TYPE_UINT32] = 4;
  _typeSize[pc.TYPE_FLOAT32] = 4;
  var VertexFormat = function(graphicsDevice, description) {
    var i, len, element;
    this.elements = [];
    this.hasUv0 = false;
    this.hasUv1 = false;
    this.hasColor = false;
    this.size = 0;
    for (i = 0, len = description.length; i < len; i++) {
      var elementDesc = description[i];
      element = {name:elementDesc.semantic, offset:0, stride:0, stream:-1, scopeId:graphicsDevice.scope.resolve(elementDesc.semantic), dataType:elementDesc.type, numComponents:elementDesc.components, normalize:elementDesc.normalize === undefined ? false : elementDesc.normalize, size:elementDesc.components * _typeSize[elementDesc.type]};
      this.elements.push(element);
      this.size += Math.ceil(element.size / 4) * 4;
      if (elementDesc.semantic === pc.SEMANTIC_TEXCOORD0) {
        this.hasUv0 = true;
      } else {
        if (elementDesc.semantic === pc.SEMANTIC_TEXCOORD1) {
          this.hasUv1 = true;
        } else {
          if (elementDesc.semantic === pc.SEMANTIC_COLOR) {
            this.hasColor = true;
          }
        }
      }
    }
    var offset = 0;
    for (i = 0, len = this.elements.length; i < len; i++) {
      element = this.elements[i];
      element.offset = offset;
      element.stride = this.size;
      offset += element.size;
    }
  };
  return {VertexFormat:VertexFormat};
}());
pc.extend(pc, function() {
  var VertexBuffer = function(graphicsDevice, format, numVertices, usage, initialData) {
    this.usage = usage || pc.BUFFER_STATIC;
    this.format = format;
    this.numVertices = numVertices;
    this.numBytes = format.size * numVertices;
    graphicsDevice._vram.vb += this.numBytes;
    this.device = graphicsDevice;
    if (initialData) {
      this.setData(initialData);
    } else {
      this.storage = new ArrayBuffer(this.numBytes);
    }
    this.device.buffers.push(this);
  };
  VertexBuffer.prototype = {destroy:function() {
    var device = this.device;
    var idx = device.buffers.indexOf(this);
    if (idx !== -1) {
      device.buffers.splice(idx, 1);
    }
    if (this.bufferId) {
      var gl = device.gl;
      gl.deleteBuffer(this.bufferId);
      device._vram.vb -= this.storage.byteLength;
      this.bufferId = null;
      device.boundBuffer = null;
      device.vertexBuffers.length = 0;
      device.vbOffsets.length = 0;
      device.attributesInvalidated = true;
      for (var loc in device.enabledAttributes) {
        gl.disableVertexAttribArray(loc);
      }
      device.enabledAttributes = {};
    }
  }, getFormat:function() {
    return this.format;
  }, getUsage:function() {
    return this.usage;
  }, getNumVertices:function() {
    return this.numVertices;
  }, lock:function() {
    return this.storage;
  }, unlock:function() {
    var gl = this.device.gl;
    if (!this.bufferId) {
      this.bufferId = gl.createBuffer();
    }
    var glUsage;
    switch(this.usage) {
      case pc.BUFFER_STATIC:
        glUsage = gl.STATIC_DRAW;
        break;
      case pc.BUFFER_DYNAMIC:
        glUsage = gl.DYNAMIC_DRAW;
        break;
      case pc.BUFFER_STREAM:
        glUsage = gl.STREAM_DRAW;
        break;
      case pc.BUFFER_GPUDYNAMIC:
        if (this.device.webgl2) {
          glUsage = gl.DYNAMIC_COPY;
        } else {
          glUsage = gl.STATIC_DRAW;
        }
        break;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, this.bufferId);
    gl.bufferData(gl.ARRAY_BUFFER, this.storage, glUsage);
  }, setData:function(data) {
    if (data.byteLength !== this.numBytes) {
      console.error("VertexBuffer: wrong initial data size: expected " + this.numBytes + ", got " + data.byteLength);
      return false;
    }
    this.storage = data;
    this.unlock();
    return true;
  }};
  return {VertexBuffer:VertexBuffer};
}());
pc.extend(pc, function() {
  var IndexBuffer = function(graphicsDevice, format, numIndices, usage, initialData) {
    this.usage = usage || pc.BUFFER_STATIC;
    this.format = format;
    this.numIndices = numIndices;
    this.device = graphicsDevice;
    var gl = this.device.gl;
    var bytesPerIndex;
    if (format === pc.INDEXFORMAT_UINT8) {
      bytesPerIndex = 1;
      this.glFormat = gl.UNSIGNED_BYTE;
    } else {
      if (format === pc.INDEXFORMAT_UINT16) {
        bytesPerIndex = 2;
        this.glFormat = gl.UNSIGNED_SHORT;
      } else {
        if (format === pc.INDEXFORMAT_UINT32) {
          bytesPerIndex = 4;
          this.glFormat = gl.UNSIGNED_INT;
        }
      }
    }
    this.bytesPerIndex = bytesPerIndex;
    this.numBytes = this.numIndices * bytesPerIndex;
    if (initialData) {
      this.setData(initialData);
    } else {
      this.storage = new ArrayBuffer(this.numBytes);
    }
    graphicsDevice._vram.ib += this.numBytes;
    this.device.buffers.push(this);
  };
  IndexBuffer.prototype = {destroy:function() {
    var device = this.device;
    var idx = device.buffers.indexOf(this);
    if (idx !== -1) {
      device.buffers.splice(idx, 1);
    }
    if (this.bufferId) {
      var gl = this.device.gl;
      gl.deleteBuffer(this.bufferId);
      this.device._vram.ib -= this.storage.byteLength;
      this.bufferId = null;
      if (this.device.indexBuffer === this) {
        this.device.indexBuffer = null;
      }
    }
  }, getFormat:function() {
    return this.format;
  }, getNumIndices:function() {
    return this.numIndices;
  }, lock:function() {
    return this.storage;
  }, unlock:function() {
    var gl = this.device.gl;
    if (!this.bufferId) {
      this.bufferId = gl.createBuffer();
    }
    var glUsage;
    switch(this.usage) {
      case pc.BUFFER_STATIC:
        glUsage = gl.STATIC_DRAW;
        break;
      case pc.BUFFER_DYNAMIC:
        glUsage = gl.DYNAMIC_DRAW;
        break;
      case pc.BUFFER_STREAM:
        glUsage = gl.STREAM_DRAW;
        break;
      case pc.BUFFER_GPUDYNAMIC:
        if (this.device.webgl2) {
          glUsage = gl.DYNAMIC_COPY;
        } else {
          glUsage = gl.STATIC_DRAW;
        }
        break;
    }
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufferId);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.storage, glUsage);
  }, setData:function(data) {
    if (data.byteLength !== this.numBytes) {
      console.error("IndexBuffer: wrong initial data size: expected " + this.numBytes + ", got " + data.byteLength);
      return false;
    }
    this.storage = data;
    this.unlock();
    return true;
  }};
  return {IndexBuffer:IndexBuffer};
}());
pc.extend(pc, function() {
  var TransformFeedback = function(inputBuffer, usage) {
    usage = usage || pc.BUFFER_GPUDYNAMIC;
    this.device = inputBuffer.device;
    var gl = this.device.gl;
    this._inputBuffer = inputBuffer;
    if (usage === pc.BUFFER_GPUDYNAMIC && inputBuffer.usage !== usage) {
      gl.bindBuffer(gl.ARRAY_BUFFER, inputBuffer.bufferId);
      gl.bufferData(gl.ARRAY_BUFFER, inputBuffer.storage, gl.DYNAMIC_COPY);
    }
    this._outputBuffer = new pc.VertexBuffer(inputBuffer.device, inputBuffer.format, inputBuffer.numVertices, usage, inputBuffer.storage);
  };
  TransformFeedback.createShader = function(graphicsDevice, vsCode, name) {
    return pc.shaderChunks.createShaderFromCode(graphicsDevice, vsCode, null, name, true);
  };
  TransformFeedback.prototype = {destroy:function() {
    this._outputBuffer.destroy();
  }, process:function(shader, swap) {
    if (swap === undefined) {
      swap = true;
    }
    var device = this.device;
    device.setRenderTarget(null);
    device.updateBegin();
    device.setVertexBuffer(this._inputBuffer, 0);
    device.setRaster(false);
    device.setTransformFeedbackBuffer(this._outputBuffer);
    device.setShader(shader);
    device.draw({type:pc.PRIMITIVE_POINTS, base:0, count:this._inputBuffer.numVertices, indexed:false});
    device.setTransformFeedbackBuffer(null);
    device.setRaster(true);
    device.updateEnd();
    if (swap) {
      var tmp = this._inputBuffer.bufferId;
      this._inputBuffer.bufferId = this._outputBuffer.bufferId;
      this._outputBuffer.bufferId = tmp;
    }
  }};
  Object.defineProperty(TransformFeedback.prototype, "inputBuffer", {get:function() {
    return this._inputBuffer;
  }});
  Object.defineProperty(TransformFeedback.prototype, "outputBuffer", {get:function() {
    return this._outputBuffer;
  }});
  return {TransformFeedback:TransformFeedback};
}());
pc.extend(pc, function() {
  var Texture = function(graphicsDevice, options) {
    this.device = graphicsDevice;
    this.name = null;
    this._width = 4;
    this._height = 4;
    this._depth = 1;
    this._pot = true;
    this._format = pc.PIXELFORMAT_R8_G8_B8_A8;
    this.rgbm = false;
    this._cubemap = false;
    this._volume = false;
    this.fixCubemapSeams = false;
    this._flipY = true;
    this._mipmaps = true;
    this._minFilter = pc.FILTER_LINEAR_MIPMAP_LINEAR;
    this._magFilter = pc.FILTER_LINEAR;
    this._anisotropy = 1;
    this._addressU = pc.ADDRESS_REPEAT;
    this._addressV = pc.ADDRESS_REPEAT;
    this._addressW = pc.ADDRESS_REPEAT;
    this._compareOnRead = false;
    this._compareFunc = pc.FUNC_LESS;
    if (options !== undefined) {
      this._width = options.width !== undefined ? options.width : this._width;
      this._height = options.height !== undefined ? options.height : this._height;
      this._pot = pc.math.powerOfTwo(this._width) && pc.math.powerOfTwo(this._height);
      this._format = options.format !== undefined ? options.format : this._format;
      this.rgbm = options.rgbm !== undefined ? options.rgbm : this.rgbm;
      if (options.mipmaps !== undefined) {
        this._mipmaps = options.mipmaps;
      } else {
        this._mipmaps = options.autoMipmap !== undefined ? options.autoMipmap : this._mipmaps;
      }
      this._cubemap = options.cubemap !== undefined ? options.cubemap : this._cubemap;
      this.fixCubemapSeams = options.fixCubemapSeams !== undefined ? options.fixCubemapSeams : this.fixCubemapSeams;
      this._minFilter = options.minFilter !== undefined ? options.minFilter : this._minFilter;
      this._magFilter = options.magFilter !== undefined ? options.magFilter : this._magFilter;
      this._anisotropy = options.anisotropy !== undefined ? options.anisotropy : this._anisotropy;
      this._addressU = options.addressU !== undefined ? options.addressU : this._addressU;
      this._addressV = options.addressV !== undefined ? options.addressV : this._addressV;
      this._compareOnRead = options.compareOnRead !== undefined ? options.compareOnRead : this._compareOnRead;
      this._compareFunc = options._compareFunc !== undefined ? options._compareFunc : this._compareFunc;
      this._flipY = options.flipY !== undefined ? options.flipY : this._flipY;
      if (graphicsDevice.webgl2) {
        this._depth = options.depth !== undefined ? options.depth : this._depth;
        this._volume = options.volume !== undefined ? options.volume : this._volume;
        this._addressW = options.addressW !== undefined ? options.addressW : this._addressW;
      }
    }
    this._compressed = this._format === pc.PIXELFORMAT_DXT1 || this._format === pc.PIXELFORMAT_DXT3 || this._format === pc.PIXELFORMAT_DXT5 || this._format >= pc.PIXELFORMAT_ETC1;
    this._invalid = false;
    this._lockedLevel = -1;
    this._levels = this._cubemap ? [[null, null, null, null, null, null]] : [null];
    this.dirtyAll();
    this._gpuSize = 0;
    this.device.textures.push(this);
  };
  Object.defineProperty(Texture.prototype, "minFilter", {get:function() {
    return this._minFilter;
  }, set:function(v) {
    if (this._minFilter !== v) {
      this._minFilter = v;
      this._minFilterDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "magFilter", {get:function() {
    return this._magFilter;
  }, set:function(v) {
    if (this._magFilter !== v) {
      this._magFilter = v;
      this._magFilterDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "addressU", {get:function() {
    return this._addressU;
  }, set:function(v) {
    if (this._addressU !== v) {
      this._addressU = v;
      this._addressUDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "addressV", {get:function() {
    return this._addressV;
  }, set:function(v) {
    if (this._addressV !== v) {
      this._addressV = v;
      this._addressVDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "addressW", {get:function() {
    return this._addressW;
  }, set:function(addressW) {
    if (!this.device.webgl2) {
      return;
    }
    if (!this._volume) {
      logWARNING("Can't set W addressing mode for a non-3D texture.");
      return;
    }
    if (addressW !== this._addressW) {
      this._addressW = addressW;
      this._addressWDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "compareOnRead", {get:function() {
    return this._compareOnRead;
  }, set:function(v) {
    if (this._compareOnRead !== v) {
      this._compareOnRead = v;
      this._compareModeDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "compareFunc", {get:function() {
    return this._compareFunc;
  }, set:function(v) {
    if (this._compareFunc !== v) {
      this._compareFunc = v;
      this._compareModeDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "autoMipmap", {get:function() {
    return this._mipmaps;
  }, set:function(v) {
    this._mipmaps = v;
  }});
  Object.defineProperty(Texture.prototype, "mipmaps", {get:function() {
    return this._mipmaps;
  }, set:function(v) {
    if (this._mipmaps !== v) {
      this._mipmaps = v;
      this._minFilterDirty = true;
      if (v) {
        this._needsMipmapsUpload = true;
      }
    }
  }});
  Object.defineProperty(Texture.prototype, "anisotropy", {get:function() {
    return this._anisotropy;
  }, set:function(v) {
    if (this._anisotropy !== v) {
      this._anisotropy = v;
      this._anisotropyDirty = true;
    }
  }});
  Object.defineProperty(Texture.prototype, "width", {get:function() {
    return this._width;
  }});
  Object.defineProperty(Texture.prototype, "height", {get:function() {
    return this._height;
  }});
  Object.defineProperty(Texture.prototype, "depth", {get:function() {
    return this._depth;
  }});
  Object.defineProperty(Texture.prototype, "format", {get:function() {
    return this._format;
  }});
  Object.defineProperty(Texture.prototype, "cubemap", {get:function() {
    return this._cubemap;
  }});
  Object.defineProperty(Texture.prototype, "volume", {get:function() {
    return this._volume;
  }});
  Object.defineProperty(Texture.prototype, "flipY", {get:function() {
    return this._flipY;
  }, set:function(flipY) {
    if (this._flipY !== flipY) {
      this._flipY = flipY;
      this._needsUpload = true;
    }
  }});
  pc.extend(Texture.prototype, {destroy:function() {
    var device = this.device;
    var idx = device.textures.indexOf(this);
    if (idx !== -1) {
      device.textures.splice(idx, 1);
    }
    if (this._glTextureId) {
      var gl = this.device.gl;
      gl.deleteTexture(this._glTextureId);
      this.device._vram.tex -= this._gpuSize;
      this._glTextureId = null;
    }
  }, dirtyAll:function() {
    this._glTextureId = undefined;
    this._levelsUpdated = this._cubemap ? [[true, true, true, true, true, true]] : [true];
    this._needsUpload = true;
    this._needsMipmapsUpload = this._mipmaps;
    this._mipmapsUploaded = false;
    this._minFilterDirty = true;
    this._magFilterDirty = true;
    this._addressUDirty = true;
    this._addressVDirty = true;
    this._addressWDirty = this._volume;
    this._anisotropyDirty = true;
    this._compareModeDirty = true;
  }, lock:function(options) {
    options = options || {level:0, face:0, mode:pc.TEXTURELOCK_WRITE};
    if (options.level === undefined) {
      options.level = 0;
    }
    if (options.face === undefined) {
      options.face = 0;
    }
    if (options.mode === undefined) {
      options.mode = pc.TEXTURELOCK_WRITE;
    }
    this._lockedLevel = options.level;
    if (this._levels[options.level] === null) {
      switch(this._format) {
        case pc.PIXELFORMAT_A8:
        case pc.PIXELFORMAT_L8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth);
          break;
        case pc.PIXELFORMAT_L8_A8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 2);
          break;
        case pc.PIXELFORMAT_R5_G6_B5:
        case pc.PIXELFORMAT_R5_G5_B5_A1:
        case pc.PIXELFORMAT_R4_G4_B4_A4:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth);
          break;
        case pc.PIXELFORMAT_R8_G8_B8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 3);
          break;
        case pc.PIXELFORMAT_R8_G8_B8_A8:
          this._levels[options.level] = new Uint8Array(this._width * this._height * this._depth * 4);
          break;
        case pc.PIXELFORMAT_DXT1:
          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 8 * this._depth);
          break;
        case pc.PIXELFORMAT_DXT3:
        case pc.PIXELFORMAT_DXT5:
          this._levels[options.level] = new Uint8Array(Math.floor((this._width + 3) / 4) * Math.floor((this._height + 3) / 4) * 16 * this._depth);
          break;
        case pc.PIXELFORMAT_RGB16F:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 3);
          break;
        case pc.PIXELFORMAT_RGB32F:
          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 3);
          break;
        case pc.PIXELFORMAT_RGBA16F:
          this._levels[options.level] = new Uint16Array(this._width * this._height * this._depth * 4);
          break;
        case pc.PIXELFORMAT_RGBA32F:
          this._levels[options.level] = new Float32Array(this._width * this._height * this._depth * 4);
          break;
      }
    }
    return this._levels[options.level];
  }, setSource:function(source) {
    var i;
    var invalid = false;
    var width, height;
    if (this._cubemap) {
      if (source[0]) {
        width = source[0].width || 0;
        height = source[0].height || 0;
        for (i = 0; i < 6; i++) {
          if (!source[i] || source[i].width !== width || source[i].height !== height || !(source[i] instanceof HTMLImageElement) && !(source[i] instanceof HTMLCanvasElement) && !(source[i] instanceof HTMLVideoElement)) {
            invalid = true;
            break;
          }
        }
      } else {
        invalid = true;
      }
      if (!invalid) {
        for (i = 0; i < 6; i++) {
          if (this._levels[0][i] !== source[i]) {
            this._levelsUpdated[0][i] = true;
          }
        }
      }
    } else {
      if (!(source instanceof HTMLImageElement) && !(source instanceof HTMLCanvasElement) && !(source instanceof HTMLVideoElement)) {
        invalid = true;
      }
      if (!invalid) {
        if (source !== this._levels[0]) {
          this._levelsUpdated[0] = true;
        }
        width = source.width;
        height = source.height;
      }
    }
    if (invalid) {
      this._width = 4;
      this._height = 4;
      this._pot = true;
      if (this._cubemap) {
        for (i = 0; i < 6; i++) {
          this._levels[0][i] = null;
          this._levelsUpdated[0][i] = true;
        }
      } else {
        this._levels[0] = null;
        this._levelsUpdated[0] = true;
      }
    } else {
      this._width = width;
      this._height = height;
      this._pot = pc.math.powerOfTwo(this._width) && pc.math.powerOfTwo(this._height);
      this._levels[0] = source;
    }
    if (this._invalid !== invalid || !invalid) {
      this._invalid = invalid;
      this.upload();
    }
  }, getSource:function() {
    return this._levels[0];
  }, unlock:function() {
    logASSERT(this._lockedLevel !== -1, "Attempting to unlock a texture that is not locked");
    this.upload();
    this._lockedLevel = -1;
  }, upload:function() {
    this._needsUpload = true;
    this._needsMipmapsUpload = this._mipmaps;
  }, getDds:function() {
    if (this.format !== pc.PIXELFORMAT_R8_G8_B8_A8) {
      console.error("This format is not implemented yet");
    }
    var fsize = 128;
    var i = 0;
    var j;
    var face;
    while (this._levels[i]) {
      var mipSize;
      if (!this.cubemap) {
        mipSize = this._levels[i].length;
        if (!mipSize) {
          console.error("No byte array for mip " + i);
          return;
        }
        fsize += mipSize;
      } else {
        for (face = 0; face < 6; face++) {
          if (!this._levels[i][face]) {
            console.error("No level data for mip " + i + ", face " + face);
            return;
          }
          mipSize = this._levels[i][face].length;
          if (!mipSize) {
            console.error("No byte array for mip " + i + ", face " + face);
            return;
          }
          fsize += mipSize;
        }
      }
      fsize += this._levels[i].length;
      i++;
    }
    var buff = new ArrayBuffer(fsize);
    var header = new Uint32Array(buff, 0, 128 / 4);
    var DDS_MAGIC = 542327876;
    var DDS_HEADER_SIZE = 124;
    var DDS_FLAGS_REQUIRED = 1 | 2 | 4 | 4096 | 524288;
    var DDS_FLAGS_MIPMAP = 131072;
    var DDS_PIXELFORMAT_SIZE = 32;
    var DDS_PIXELFLAGS_RGBA8 = 1 | 64;
    var DDS_CAPS_REQUIRED = 4096;
    var DDS_CAPS_MIPMAP = 4194304;
    var DDS_CAPS_COMPLEX = 8;
    var DDS_CAPS2_CUBEMAP = 512 | 1024 | 2048 | 4096 | 8192 | 16384 | 32768;
    var flags = DDS_FLAGS_REQUIRED;
    if (this._levels.length > 1) {
      flags |= DDS_FLAGS_MIPMAP;
    }
    var caps = DDS_CAPS_REQUIRED;
    if (this._levels.length > 1) {
      caps |= DDS_CAPS_MIPMAP;
    }
    if (this._levels.length > 1 || this.cubemap) {
      caps |= DDS_CAPS_COMPLEX;
    }
    var caps2 = this.cubemap ? DDS_CAPS2_CUBEMAP : 0;
    header[0] = DDS_MAGIC;
    header[1] = DDS_HEADER_SIZE;
    header[2] = flags;
    header[3] = this.height;
    header[4] = this.width;
    header[5] = this.width * this.height * 4;
    header[6] = 0;
    header[7] = this._levels.length;
    for (i = 0; i < 11; i++) {
      header[8 + i] = 0;
    }
    header[19] = DDS_PIXELFORMAT_SIZE;
    header[20] = DDS_PIXELFLAGS_RGBA8;
    header[21] = 0;
    header[22] = 32;
    header[23] = 16711680;
    header[24] = 65280;
    header[25] = 255;
    header[26] = 4278190080;
    header[27] = caps;
    header[28] = caps2;
    header[29] = 0;
    header[30] = 0;
    header[31] = 0;
    var offset = 128;
    var level, mip;
    if (!this.cubemap) {
      for (i = 0; i < this._levels.length; i++) {
        level = this._levels[i];
        mip = new Uint8Array(buff, offset, level.length);
        for (j = 0; j < level.length; j++) {
          mip[j] = level[j];
        }
        offset += level.length;
      }
    } else {
      for (face = 0; face < 6; face++) {
        for (i = 0; i < this._levels.length; i++) {
          level = this._levels[i][face];
          mip = new Uint8Array(buff, offset, level.length);
          for (j = 0; j < level.length; j++) {
            mip[j] = level[j];
          }
          offset += level.length;
        }
      }
    }
    return buff;
  }});
  return {Texture:Texture};
}());
pc.extend(pc, function() {
  var defaultOptions = {depth:true, face:0};
  var RenderTarget = function(options, _arg2, _arg3) {
    if (options instanceof pc.GraphicsDevice) {
      this._colorBuffer = _arg2;
      options = _arg3;
    } else {
      this._colorBuffer = options.colorBuffer;
    }
    this._glFrameBuffer = null;
    this._glDepthBuffer = null;
    options = options !== undefined ? options : defaultOptions;
    this._depthBuffer = options.depthBuffer;
    this._face = options.face !== undefined ? options.face : 0;
    if (this._depthBuffer) {
      var format = this._depthBuffer._format;
      if (format === pc.PIXELFORMAT_DEPTH) {
        this._depth = true;
        this._stencil = false;
      } else {
        if (format === pc.PIXELFORMAT_DEPTHSTENCIL) {
          this._depth = true;
          this._stencil = true;
        } else {
          this._depth = false;
          this._stencil = false;
        }
      }
    } else {
      this._depth = options.depth !== undefined ? options.depth : true;
      this._stencil = options.stencil !== undefined ? options.stencil : false;
    }
    this._samples = options.samples !== undefined ? options.samples : 1;
    this.autoResolve = options.autoResolve !== undefined ? options.autoResolve : true;
    this._glResolveFrameBuffer = null;
    this._glMsaaColorBuffer = null;
    this._glMsaaDepthBuffer = null;
  };
  RenderTarget.prototype = {destroy:function() {
    if (!this._device) {
      return;
    }
    var device = this._device;
    var idx = device.targets.indexOf(this);
    if (idx !== -1) {
      device.targets.splice(idx, 1);
    }
    var gl = device.gl;
    if (this._glFrameBuffer) {
      gl.deleteFramebuffer(this._glFrameBuffer);
      this._glFrameBuffer = null;
    }
    if (this._glDepthBuffer) {
      gl.deleteRenderbuffer(this._glDepthBuffer);
      this._glDepthBuffer = null;
    }
    if (this._glResolveFrameBuffer) {
      gl.deleteFramebuffer(this._glResolveFrameBuffer);
      this._glResolveFrameBuffer = null;
    }
    if (this._glMsaaColorBuffer) {
      gl.deleteRenderbuffer(this._glMsaaColorBuffer);
      this._glMsaaColorBuffer = null;
    }
    if (this._glMsaaDepthBuffer) {
      gl.deleteRenderbuffer(this._glMsaaDepthBuffer);
      this._glMsaaDepthBuffer = null;
    }
  }, resolve:function(color, depth) {
    if (!this._device) {
      return;
    }
    if (!this._device.webgl2) {
      return;
    }
    var gl = this._device.gl;
    if (color === undefined) {
      color = true;
    }
    if (depth === undefined && this._depthBuffer) {
      depth = true;
    }
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this._glFrameBuffer);
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this._glResolveFrameBuffer);
    gl.blitFramebuffer(0, 0, this.width, this.height, 0, 0, this.width, this.height, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._glFrameBuffer);
  }, copy:function(source, color, depth) {
    if (!this._device) {
      if (source._device) {
        this._device = source._device;
      } else {
        return false;
      }
    }
    return this._device.copyRenderTarget(source, this, color, depth);
  }};
  Object.defineProperty(RenderTarget.prototype, "colorBuffer", {get:function() {
    return this._colorBuffer;
  }});
  Object.defineProperty(RenderTarget.prototype, "depthBuffer", {get:function() {
    return this._depthBuffer;
  }});
  Object.defineProperty(RenderTarget.prototype, "face", {get:function() {
    return this._face;
  }});
  Object.defineProperty(RenderTarget.prototype, "width", {get:function() {
    if (this._colorBuffer) {
      return this._colorBuffer.width;
    } else {
      return this._depthBuffer.width;
    }
  }});
  Object.defineProperty(RenderTarget.prototype, "height", {get:function() {
    if (this._colorBuffer) {
      return this._colorBuffer.height;
    } else {
      return this._depthBuffer.height;
    }
  }});
  return {RenderTarget:RenderTarget};
}());
pc.extend(pc, function() {
  var ShaderInput = function(graphicsDevice, name, type, locationId) {
    this.locationId = locationId;
    this.scopeId = graphicsDevice.scope.resolve(name);
    this.version = new pc.Version;
    if (type === pc.UNIFORMTYPE_FLOAT) {
      if (name.substr(name.length - 3) === "[0]") {
        type = pc.UNIFORMTYPE_FLOATARRAY;
      }
    }
    this.dataType = type;
    this.value = [null, null, null, null];
    this.array = [];
  };
  return {ShaderInput:ShaderInput};
}());
pc.extend(pc, function() {
  function addLineNumbers(src) {
    var chunks = src.split("\n");
    for (var i = 0, len = chunks.length; i < len; i++) {
      chunks[i] = i + 1 + ":\t" + chunks[i];
    }
    return chunks.join("\n");
  }
  function createShader(gl, type, src) {
    var shader = gl.createShader(type);
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    return shader;
  }
  function createProgram(gl, vertexShader, fragmentShader) {
    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    return program;
  }
  var Shader = function(graphicsDevice, definition) {
    this.device = graphicsDevice;
    this.definition = definition;
    this._refCount = 0;
    this.compile();
    this.device.shaders.push(this);
  };
  Shader.prototype = {compile:function() {
    this.ready = false;
    var gl = this.device.gl;
    this.vshader = createShader(gl, gl.VERTEX_SHADER, this.definition.vshader);
    this.fshader = createShader(gl, gl.FRAGMENT_SHADER, this.definition.fshader);
    this.program = createProgram(gl, this.vshader, this.fshader);
    this.device._shaderStats.vsCompiled++;
    this.device._shaderStats.fsCompiled++;
    this.device._shaderStats.linked++;
    if (this.definition.tag === pc.SHADERTAG_MATERIAL) {
      this.device._shaderStats.materialShaders++;
    }
  }, link:function() {
    var gl = this.device.gl;
    var retValue = true;
    if (this.device.webgl2 && this.definition.useTransformFeedback) {
      var attrs = this.definition.attributes;
      var outNames = [];
      for (var attr in attrs) {
        if (attrs.hasOwnProperty(attr)) {
          outNames.push("out_" + attr);
        }
      }
      gl.transformFeedbackVaryings(this.program, outNames, gl.INTERLEAVED_ATTRIBS);
    }
    gl.linkProgram(this.program);
    if (!gl.getShaderParameter(this.vshader, gl.COMPILE_STATUS)) {
      logERROR("Failed to compile vertex shader:\n\n" + addLineNumbers(this.definition.vshader) + "\n\n" + gl.getShaderInfoLog(this.vshader));
      retValue = false;
    }
    if (!gl.getShaderParameter(this.fshader, gl.COMPILE_STATUS)) {
      logERROR("Failed to compile fragment shader:\n\n" + addLineNumbers(this.definition.fshader) + "\n\n" + gl.getShaderInfoLog(this.fshader));
      retValue = false;
    }
    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {
      logERROR("Failed to link shader program. Error: " + gl.getProgramInfoLog(this.program));
      retValue = false;
    }
    gl.deleteShader(this.vshader);
    gl.deleteShader(this.fshader);
    this.attributes = [];
    this.uniforms = [];
    this.samplers = [];
    var i = 0;
    var info, location;
    var _typeToPc = {};
    _typeToPc[gl.BOOL] = pc.UNIFORMTYPE_BOOL;
    _typeToPc[gl.INT] = pc.UNIFORMTYPE_INT;
    _typeToPc[gl.FLOAT] = pc.UNIFORMTYPE_FLOAT;
    _typeToPc[gl.FLOAT_VEC2] = pc.UNIFORMTYPE_VEC2;
    _typeToPc[gl.FLOAT_VEC3] = pc.UNIFORMTYPE_VEC3;
    _typeToPc[gl.FLOAT_VEC4] = pc.UNIFORMTYPE_VEC4;
    _typeToPc[gl.INT_VEC2] = pc.UNIFORMTYPE_IVEC2;
    _typeToPc[gl.INT_VEC3] = pc.UNIFORMTYPE_IVEC3;
    _typeToPc[gl.INT_VEC4] = pc.UNIFORMTYPE_IVEC4;
    _typeToPc[gl.BOOL_VEC2] = pc.UNIFORMTYPE_BVEC2;
    _typeToPc[gl.BOOL_VEC3] = pc.UNIFORMTYPE_BVEC3;
    _typeToPc[gl.BOOL_VEC4] = pc.UNIFORMTYPE_BVEC4;
    _typeToPc[gl.FLOAT_MAT2] = pc.UNIFORMTYPE_MAT2;
    _typeToPc[gl.FLOAT_MAT3] = pc.UNIFORMTYPE_MAT3;
    _typeToPc[gl.FLOAT_MAT4] = pc.UNIFORMTYPE_MAT4;
    _typeToPc[gl.SAMPLER_2D] = pc.UNIFORMTYPE_TEXTURE2D;
    _typeToPc[gl.SAMPLER_CUBE] = pc.UNIFORMTYPE_TEXTURECUBE;
    if (this.device.webgl2) {
      _typeToPc[gl.SAMPLER_2D_SHADOW] = pc.UNIFORMTYPE_TEXTURE2D_SHADOW;
      _typeToPc[gl.SAMPLER_CUBE_SHADOW] = pc.UNIFORMTYPE_TEXTURECUBE_SHADOW;
      _typeToPc[gl.SAMPLER_3D] = pc.UNIFORMTYPE_TEXTURE3D;
    }
    var numAttributes = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);
    while (i < numAttributes) {
      info = gl.getActiveAttrib(this.program, i++);
      location = gl.getAttribLocation(this.program, info.name);
      if (this.definition.attributes[info.name] === undefined) {
        console.error('Vertex shader attribute "' + info.name + '" is not mapped to a semantic in shader definition.');
      }
      this.attributes.push(new pc.ShaderInput(this.device, this.definition.attributes[info.name], _typeToPc[info.type], location));
    }
    i = 0;
    var numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);
    while (i < numUniforms) {
      info = gl.getActiveUniform(this.program, i++);
      location = gl.getUniformLocation(this.program, info.name);
      if (info.type === gl.SAMPLER_2D || info.type === gl.SAMPLER_CUBE || this.device.webgl2 && (info.type === gl.SAMPLER_2D_SHADOW || info.type === gl.SAMPLER_CUBE_SHADOW || info.type === gl.SAMPLER_3D)) {
        this.samplers.push(new pc.ShaderInput(this.device, info.name, _typeToPc[info.type], location));
      } else {
        this.uniforms.push(new pc.ShaderInput(this.device, info.name, _typeToPc[info.type], location));
      }
    }
    this.ready = true;
    return retValue;
  }, destroy:function() {
    var device = this.device;
    var idx = device.shaders.indexOf(this);
    if (idx !== -1) {
      device.shaders.splice(idx, 1);
    }
    if (this.program) {
      var gl = device.gl;
      gl.deleteProgram(this.program);
      this.program = null;
      this.device.removeShaderFromCache(this);
    }
  }};
  return {Shader:Shader};
}());
pc.extend(pc, function() {
  var ProgramLibrary = function(device) {
    this._device = device;
    this._cache = {};
    this._generators = {};
    this._isClearingCache = false;
  };
  ProgramLibrary.prototype.register = function(name, generator) {
    if (!this.isRegistered(name)) {
      this._generators[name] = generator;
    }
  };
  ProgramLibrary.prototype.unregister = function(name) {
    if (this.isRegistered(name)) {
      delete this._generators[name];
    }
  };
  ProgramLibrary.prototype.isRegistered = function(name) {
    var generator = this._generators[name];
    return generator !== undefined;
  };
  ProgramLibrary.prototype.getProgram = function(name, options) {
    var generator = this._generators[name];
    if (generator === undefined) {
      logERROR("No program library functions registered for: " + name);
      return null;
    }
    var gd = this._device;
    var key = generator.generateKey(gd, options);
    var shader = this._cache[key];
    if (!shader) {
      var shaderDefinition = generator.createShaderDefinition(gd, options);
      shader = this._cache[key] = new pc.Shader(gd, shaderDefinition);
    }
    return shader;
  };
  ProgramLibrary.prototype.clearCache = function() {
    var cache = this._cache;
    this._isClearingCache = true;
    for (var key in cache) {
      if (cache.hasOwnProperty(key)) {
        cache[key].destroy();
      }
    }
    this._cache = {};
    this._isClearingCache = false;
  };
  ProgramLibrary.prototype.removeFromCache = function(shader) {
    if (this._isClearingCache) {
      return;
    }
    var cache = this._cache;
    for (var key in cache) {
      if (cache.hasOwnProperty(key)) {
        if (cache[key] === shader) {
          delete cache[key];
          break;
        }
      }
    }
  };
  return {ProgramLibrary:ProgramLibrary};
}());
pc.extend(pc, function() {
  var EVENT_RESIZE = "resizecanvas";
  function UnsupportedBrowserError(message) {
    this.name = "UnsupportedBrowserError";
    this.message = message || "";
  }
  UnsupportedBrowserError.prototype = Error.prototype;
  function ContextCreationError(message) {
    this.name = "ContextCreationError";
    this.message = message || "";
  }
  ContextCreationError.prototype = Error.prototype;
  var _downsampleImage = function(image, size) {
    var srcW = image.width;
    var srcH = image.height;
    if (srcW > size || srcH > size) {
      var scale = size / Math.max(srcW, srcH);
      var dstW = Math.floor(srcW * scale);
      var dstH = Math.floor(srcH * scale);
      console.warn("Image dimensions larger than max supported texture size of " + size + ". " + "Resizing from " + srcW + ", " + srcH + " to " + dstW + ", " + dstH + ".");
      var canvas = document.createElement("canvas");
      canvas.width = dstW;
      canvas.height = dstH;
      var context = canvas.getContext("2d");
      context.drawImage(image, 0, 0, srcW, srcH, 0, 0, dstW, dstH);
      return canvas;
    }
    return image;
  };
  function _isIE() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");
    var trident = navigator.userAgent.match(/Trident.*rv:11\./);
    return msie > 0 || !!trident;
  }
  var _pixelFormat2Size = null;
  function gpuTexSize(gl, tex) {
    if (!_pixelFormat2Size) {
      _pixelFormat2Size = {};
      _pixelFormat2Size[pc.PIXELFORMAT_A8] = 1;
      _pixelFormat2Size[pc.PIXELFORMAT_L8] = 1;
      _pixelFormat2Size[pc.PIXELFORMAT_L8_A8] = 1;
      _pixelFormat2Size[pc.PIXELFORMAT_R5_G6_B5] = 2;
      _pixelFormat2Size[pc.PIXELFORMAT_R5_G5_B5_A1] = 2;
      _pixelFormat2Size[pc.PIXELFORMAT_R4_G4_B4_A4] = 2;
      _pixelFormat2Size[pc.PIXELFORMAT_R8_G8_B8] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_R8_G8_B8_A8] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_RGB16F] = 8;
      _pixelFormat2Size[pc.PIXELFORMAT_RGBA16F] = 8;
      _pixelFormat2Size[pc.PIXELFORMAT_RGB32F] = 16;
      _pixelFormat2Size[pc.PIXELFORMAT_RGBA32F] = 16;
      _pixelFormat2Size[pc.PIXELFORMAT_R32F] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_DEPTH] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_DEPTHSTENCIL] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_111110F] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_SRGB] = 4;
      _pixelFormat2Size[pc.PIXELFORMAT_SRGBA] = 4;
    }
    var mips = 1;
    if (tex._pot && (tex._mipmaps || tex._minFilter === pc.FILTER_NEAREST_MIPMAP_NEAREST || tex._minFilter === pc.FILTER_NEAREST_MIPMAP_LINEAR || tex._minFilter === pc.FILTER_LINEAR_MIPMAP_NEAREST || tex._minFilter === pc.FILTER_LINEAR_MIPMAP_LINEAR) && !(tex._compressed && tex._levels.length === 1)) {
      mips = Math.round(Math.log2(Math.max(tex._width, tex._height)) + 1);
    }
    var mipWidth = tex._width;
    var mipHeight = tex._height;
    var mipDepth = tex._depth;
    var size = 0;
    for (var i = 0; i < mips; i++) {
      if (!tex._compressed) {
        size += mipWidth * mipHeight * mipDepth * _pixelFormat2Size[tex._format];
      } else {
        if (tex._format === pc.PIXELFORMAT_ETC1) {
          size += Math.floor((mipWidth + 3) / 4) * Math.floor((mipHeight + 3) / 4) * 8 * mipDepth;
        } else {
          if (tex._format === pc.PIXELFORMAT_PVRTC_2BPP_RGB_1 || tex._format === pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1) {
            size += Math.max(mipWidth, 16) * Math.max(mipHeight, 8) / 4 * mipDepth;
          } else {
            if (tex._format === pc.PIXELFORMAT_PVRTC_4BPP_RGB_1 || tex._format === pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1) {
              size += Math.max(mipWidth, 8) * Math.max(mipHeight, 8) / 2 * mipDepth;
            } else {
              var DXT_BLOCK_WIDTH = 4;
              var DXT_BLOCK_HEIGHT = 4;
              var blockSize = tex._format === pc.PIXELFORMAT_DXT1 ? 8 : 16;
              var numBlocksAcross = Math.floor((mipWidth + DXT_BLOCK_WIDTH - 1) / DXT_BLOCK_WIDTH);
              var numBlocksDown = Math.floor((mipHeight + DXT_BLOCK_HEIGHT - 1) / DXT_BLOCK_HEIGHT);
              var numBlocks = numBlocksAcross * numBlocksDown;
              size += numBlocks * blockSize * mipDepth;
            }
          }
        }
      }
      mipWidth = Math.max(mipWidth * 0.5, 1);
      mipHeight = Math.max(mipHeight * 0.5, 1);
      mipDepth = Math.max(mipDepth * 0.5, 1);
    }
    if (tex._cubemap) {
      size *= 6;
    }
    return size;
  }
  function testRenderable(gl, pixelFormat) {
    var __texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, __texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    var __width = 2;
    var __height = 2;
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, __width, __height, 0, gl.RGBA, pixelFormat, null);
    var __fbo = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, __fbo);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, __texture, 0);
    gl.bindTexture(gl.TEXTURE_2D, null);
    if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {
      gl.deleteTexture(__texture);
      return false;
    }
    gl.deleteTexture(__texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    return true;
  }
  function testUnsignedByteAttribute(gl) {
    var storage = new ArrayBuffer(16);
    var bufferId = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);
    gl.bufferData(gl.ARRAY_BUFFER, storage, gl.STATIC_DRAW);
    gl.getError();
    gl.vertexAttribPointer(0, 4, gl.UNSIGNED_BYTE, false, 4, 0);
    var supported = gl.getError() === 0;
    gl.deleteBuffer(bufferId);
    return supported;
  }
  var GraphicsDevice = function(canvas, options) {
    var i;
    this.canvas = canvas;
    this.shader = null;
    this.indexBuffer = null;
    this.vertexBuffers = [];
    this.vbOffsets = [];
    this._enableAutoInstancing = false;
    this.autoInstancingMaxObjects = 16384;
    this.attributesInvalidated = true;
    this.boundBuffer = null;
    this.instancedAttribs = {};
    this.enabledAttributes = {};
    this.transformFeedbackBuffer = null;
    this.activeFramebuffer = null;
    this.activeTexture = 0;
    this.textureUnits = [];
    this._maxPixelRatio = 1;
    this.renderTarget = null;
    this.feedback = null;
    this._width = 0;
    this._height = 0;
    this.updateClientRect();
    if (!window.WebGLRenderingContext) {
      throw new pc.UnsupportedBrowserError;
    }
    this.shaders = [];
    this.buffers = [];
    this.textures = [];
    this.targets = [];
    this.contextLost = false;
    canvas.addEventListener("webglcontextlost", function(event) {
      event.preventDefault();
      this.contextLost = true;
      this.fire("devicelost");
    }.bind(this), false);
    canvas.addEventListener("webglcontextrestored", function() {
      this.initializeContext();
      this.contextLost = false;
      this.fire("devicerestored");
    }.bind(this), false);
    var preferWebGl2 = options && options.preferWebGl2 !== undefined ? options.preferWebGl2 : true;
    var names = preferWebGl2 ? ["webgl2", "experimental-webgl2", "webgl", "experimental-webgl"] : ["webgl", "experimental-webgl"];
    var gl = null;
    options = options || {};
    options.stencil = true;
    for (i = 0; i < names.length; i++) {
      try {
        gl = canvas.getContext(names[i], options);
      } catch (e) {
      }
      if (gl) {
        this.webgl2 = preferWebGl2 && i < 2;
        break;
      }
    }
    if (!gl) {
      throw new pc.ContextCreationError;
    }
    this.gl = gl;
    this.initializeExtensions();
    this.initializeCapabilities();
    this.initializeRenderState();
    (function() {
      this.defaultClearOptions = {color:[0, 0, 0, 1], depth:1, stencil:0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};
      this.glAddress = [gl.REPEAT, gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT];
      this.glBlendEquation = [gl.FUNC_ADD, gl.FUNC_SUBTRACT, gl.FUNC_REVERSE_SUBTRACT, this.webgl2 ? gl.MIN : this.extBlendMinmax ? this.extBlendMinmax.MIN_EXT : gl.FUNC_ADD, this.webgl2 ? gl.MAX : this.extBlendMinmax ? this.extBlendMinmax.MAX_EXT : gl.FUNC_ADD];
      this.glBlendFunction = [gl.ZERO, gl.ONE, gl.SRC_COLOR, gl.ONE_MINUS_SRC_COLOR, gl.DST_COLOR, gl.ONE_MINUS_DST_COLOR, gl.SRC_ALPHA, gl.SRC_ALPHA_SATURATE, gl.ONE_MINUS_SRC_ALPHA, gl.DST_ALPHA, gl.ONE_MINUS_DST_ALPHA];
      this.glComparison = [gl.NEVER, gl.LESS, gl.EQUAL, gl.LEQUAL, gl.GREATER, gl.NOTEQUAL, gl.GEQUAL, gl.ALWAYS];
      this.glStencilOp = [gl.KEEP, gl.ZERO, gl.REPLACE, gl.INCR, gl.INCR_WRAP, gl.DECR, gl.DECR_WRAP, gl.INVERT];
      this.glClearFlag = [0, gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT, gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, gl.STENCIL_BUFFER_BIT | gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT];
      this.glCull = [0, gl.BACK, gl.FRONT, gl.FRONT_AND_BACK];
      this.glFilter = [gl.NEAREST, gl.LINEAR, gl.NEAREST_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR, gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_LINEAR];
      this.glPrimitive = [gl.POINTS, gl.LINES, gl.LINE_LOOP, gl.LINE_STRIP, gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN];
      this.glType = [gl.BYTE, gl.UNSIGNED_BYTE, gl.SHORT, gl.UNSIGNED_SHORT, gl.INT, gl.UNSIGNED_INT, gl.FLOAT];
      var scopeX, scopeY, scopeZ, scopeW;
      var uniformValue;
      this.commitFunction = [];
      this.commitFunction[pc.UNIFORMTYPE_BOOL] = function(uniform, value) {
        if (uniform.value !== value) {
          gl.uniform1i(uniform.locationId, value);
          uniform.value = value;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_INT] = this.commitFunction[pc.UNIFORMTYPE_BOOL];
      this.commitFunction[pc.UNIFORMTYPE_FLOAT] = function(uniform, value) {
        if (uniform.value !== value) {
          gl.uniform1f(uniform.locationId, value);
          uniform.value = value;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_VEC2] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {
          gl.uniform2fv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_VEC3] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        scopeZ = value[2];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {
          gl.uniform3fv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
          uniformValue[2] = scopeZ;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_VEC4] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        scopeZ = value[2];
        scopeW = value[3];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {
          gl.uniform4fv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
          uniformValue[2] = scopeZ;
          uniformValue[3] = scopeW;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_IVEC2] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY) {
          gl.uniform2iv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_BVEC2] = this.commitFunction[pc.UNIFORMTYPE_IVEC2];
      this.commitFunction[pc.UNIFORMTYPE_IVEC3] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        scopeZ = value[2];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ) {
          gl.uniform3iv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
          uniformValue[2] = scopeZ;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_BVEC3] = this.commitFunction[pc.UNIFORMTYPE_IVEC3];
      this.commitFunction[pc.UNIFORMTYPE_IVEC4] = function(uniform, value) {
        uniformValue = uniform.value;
        scopeX = value[0];
        scopeY = value[1];
        scopeZ = value[2];
        scopeW = value[3];
        if (uniformValue[0] !== scopeX || uniformValue[1] !== scopeY || uniformValue[2] !== scopeZ || uniformValue[3] !== scopeW) {
          gl.uniform4iv(uniform.locationId, value);
          uniformValue[0] = scopeX;
          uniformValue[1] = scopeY;
          uniformValue[2] = scopeZ;
          uniformValue[3] = scopeW;
        }
      };
      this.commitFunction[pc.UNIFORMTYPE_BVEC4] = this.commitFunction[pc.UNIFORMTYPE_IVEC4];
      this.commitFunction[pc.UNIFORMTYPE_MAT2] = function(uniform, value) {
        gl.uniformMatrix2fv(uniform.locationId, false, value);
      };
      this.commitFunction[pc.UNIFORMTYPE_MAT3] = function(uniform, value) {
        gl.uniformMatrix3fv(uniform.locationId, false, value);
      };
      this.commitFunction[pc.UNIFORMTYPE_MAT4] = function(uniform, value) {
        gl.uniformMatrix4fv(uniform.locationId, false, value);
      };
      this.commitFunction[pc.UNIFORMTYPE_FLOATARRAY] = function(uniform, value) {
        gl.uniform1fv(uniform.locationId, value);
      };
      this.scope = new pc.ScopeSpace("Device");
      this.programLib = new pc.ProgramLibrary(this);
      for (var generator in pc.programlib) {
        this.programLib.register(generator, pc.programlib[generator]);
      }
      pc.events.attach(this);
      this.supportsBoneTextures = this.extTextureFloat && this.maxVertexTextures > 0;
      this.useTexCubeLod = this.extTextureLod && this.samplerCount < 16;
      var numUniforms = this.vertexUniformsCount;
      numUniforms -= 4 * 4;
      numUniforms -= 8;
      numUniforms -= 1;
      numUniforms -= 4 * 4;
      this.boneLimit = Math.floor(numUniforms / 4);
      this.boneLimit = Math.min(this.boneLimit, 128);
      if (this.unmaskedRenderer === "Mali-450 MP") {
        this.boneLimit = 34;
      }
      if (this.unmaskedRenderer === "Apple A8 GPU") {
        this.forceCpuParticles = true;
      }
      this._drawCallsPerFrame = 0;
      this._shaderSwitchesPerFrame = 0;
      this._primsPerFrame = [];
      for (i = pc.PRIMITIVE_POINTS; i <= pc.PRIMITIVE_TRIFAN; i++) {
        this._primsPerFrame[i] = 0;
      }
      this._renderTargetCreationTime = 0;
      this._vram = {tex:0, vb:0, ib:0};
      this._shaderStats = {vsCompiled:0, fsCompiled:0, linked:0, materialShaders:0, compileTime:0};
      this.supportsUnsignedByte = testUnsignedByteAttribute(gl);
      this.constantTexSource = this.scope.resolve("source");
      if (!pc._benchmarked) {
        if (this.extTextureFloat) {
          if (this.webgl2) {
            this.extTextureFloatRenderable = this.extColorBufferFloat;
          } else {
            this.extTextureFloatRenderable = testRenderable(gl, gl.FLOAT);
          }
        }
        if (this.extTextureHalfFloat) {
          if (this.webgl2) {
            this.extTextureHalfFloatRenderable = this.extColorBufferFloat;
          } else {
            this.extTextureHalfFloatRenderable = testRenderable(gl, this.extTextureHalfFloat.HALF_FLOAT_OES);
          }
        }
        if (this.extTextureFloatRenderable) {
          var device = this;
          var chunks = pc.shaderChunks;
          var test1 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.precisionTestPS, "ptest1");
          var test2 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.precisionTest2PS, "ptest2");
          var size = 1;
          var tex = new pc.Texture(device, {format:pc.PIXELFORMAT_RGBA32F, width:size, height:size, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
          var targ = new pc.RenderTarget(device, tex, {depth:false});
          pc.drawQuadWithShader(device, targ, test1);
          var tex2 = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
          var targ2 = new pc.RenderTarget(device, tex2, {depth:false});
          this.constantTexSource.setValue(tex);
          pc.drawQuadWithShader(device, targ2, test2);
          var pixels = new Uint8Array(size * size * 4);
          gl.bindFramebuffer(gl.FRAMEBUFFER, targ2._glFrameBuffer);
          gl.readPixels(0, 0, size, size, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
          var x = pixels[0] / 255.0;
          var y = pixels[1] / 255.0;
          var z = pixels[2] / 255.0;
          var w = pixels[3] / 255.0;
          var f = x / (256.0 * 256.0 * 256.0) + y / (256.0 * 256.0) + z / 256.0 + w;
          this.extTextureFloatHighPrecision = f === 0.0;
          tex.destroy();
          targ.destroy();
          tex2.destroy();
          targ2.destroy();
          pc.destroyPostEffectQuad();
          gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
        pc.extTextureFloatRenderable = this.extTextureFloatRenderable;
        pc.extTextureHalfFloatRenderable = this.extTextureHalfFloatRenderable;
        pc.extTextureFloatHighPrecision = this.extTextureFloatHighPrecision;
        pc._benchmarked = true;
      } else {
        this.extTextureFloatRenderable = pc.extTextureFloatRenderable;
        this.extTextureHalfFloatRenderable = pc.extTextureHalfFloatRenderable;
        this.extTextureFloatHighPrecision = pc.extTextureFloatHighPrecision;
      }
    }).call(this);
  };
  GraphicsDevice.prototype = {getPrecision:function() {
    var gl = this.gl;
    var precision = "highp";
    if (gl.getShaderPrecisionFormat) {
      var vertexShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
      var vertexShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
      var fragmentShaderPrecisionHighpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
      var fragmentShaderPrecisionMediumpFloat = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
      var highpAvailable = vertexShaderPrecisionHighpFloat.precision > 0 && fragmentShaderPrecisionHighpFloat.precision > 0;
      var mediumpAvailable = vertexShaderPrecisionMediumpFloat.precision > 0 && fragmentShaderPrecisionMediumpFloat.precision > 0;
      if (!highpAvailable) {
        if (mediumpAvailable) {
          precision = "mediump";
        } else {
          precision = "lowp";
        }
      }
    }
    return precision;
  }, initializeExtensions:function() {
    var gl = this.gl;
    if (this.webgl2) {
      this.extBlendMinmax = true;
      this.extDrawBuffers = true;
      this.extInstancing = true;
      this.extStandardDerivatives = true;
      this.extTextureFloat = true;
      this.extTextureHalfFloat = true;
      this.extTextureHalfFloatLinear = true;
      this.extTextureLod = true;
      this.extUintElement = true;
    } else {
      this.extBlendMinmax = gl.getExtension("EXT_blend_minmax");
      this.extDrawBuffers = gl.getExtension("EXT_draw_buffers");
      this.extInstancing = gl.getExtension("ANGLE_instanced_arrays");
      this.extStandardDerivatives = gl.getExtension("OES_standard_derivatives");
      this.extTextureFloat = gl.getExtension("OES_texture_float");
      this.extTextureHalfFloat = gl.getExtension("OES_texture_half_float");
      this.extTextureHalfFloatLinear = gl.getExtension("OES_texture_half_float_linear");
      this.extTextureLod = gl.getExtension("EXT_shader_texture_lod");
      this.extUintElement = gl.getExtension("OES_element_index_uint");
    }
    this.extRendererInfo = gl.getExtension("WEBGL_debug_renderer_info");
    this.extTextureFloatLinear = gl.getExtension("OES_texture_float_linear");
    this.extColorBufferFloat = gl.getExtension("EXT_color_buffer_float");
    this.extTextureFilterAnisotropic = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
    this.extCompressedTextureETC1 = gl.getExtension("WEBGL_compressed_texture_etc1");
    this.extCompressedTexturePVRTC = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
    this.extCompressedTextureS3TC = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
    if (this.extCompressedTextureS3TC && _isIE()) {
      this.extCompressedTextureS3TC = null;
    }
  }, initializeCapabilities:function() {
    var gl = this.gl;
    this.maxPrecision = this.precision = this.getPrecision();
    var contextAttribs = gl.getContextAttributes();
    this.supportsMsaa = contextAttribs.antialias;
    this.supportsStencil = contextAttribs.stencil;
    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
    this.maxCubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
    this.maxRenderBufferSize = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);
    this.samplerCount = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
    this.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
    this.vertexUniformsCount = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
    this.fragmentUniformsCount = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
    this.unmaskedRenderer = this.extRendererInfo ? gl.getParameter(this.extRendererInfo.UNMASKED_RENDERER_WEBGL) : "";
    this.unmaskedVendor = this.extRendererInfo ? gl.getParameter(this.extRendererInfo.UNMASKED_VENDOR_WEBGL) : "";
    if (this.webgl2) {
      this.maxDrawBuffers = gl.getParameter(gl.MAX_DRAW_BUFFERS);
      this.maxColorAttachments = gl.getParameter(gl.MAX_COLOR_ATTACHMENTS);
      this.maxVolumeSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);
    } else {
      this.maxDrawBuffers = this.extDrawBuffers ? gl.getParameter(this.extDrawBuffers.MAX_DRAW_BUFFERS_EXT) : 1;
      this.maxColorAttachments = this.extDrawBuffers ? gl.getParameter(this.extDrawBuffers.MAX_COLOR_ATTACHMENTS_EXT) : 1;
      this.maxVolumeSize = 1;
    }
  }, initializeRenderState:function() {
    var gl = this.gl;
    this.blending = false;
    gl.disable(gl.BLEND);
    this.blendSrc = pc.BLENDMODE_ONE;
    this.blendDst = pc.BLENDMODE_ZERO;
    this.blendSrcAlpha = pc.BLENDMODE_ONE;
    this.blendDstAlpha = pc.BLENDMODE_ZERO;
    this.separateAlphaBlend = false;
    this.blendEquation = pc.BLENDEQUATION_ADD;
    this.blendAlphaEquation = pc.BLENDEQUATION_ADD;
    this.separateAlphaEquation = false;
    gl.blendFunc(gl.ONE, gl.ZERO);
    gl.blendEquation(gl.FUNC_ADD);
    this.writeRed = true;
    this.writeGreen = true;
    this.writeBlue = true;
    this.writeAlpha = true;
    gl.colorMask(true, true, true, true);
    this.cullMode = pc.CULLFACE_BACK;
    gl.enable(gl.CULL_FACE);
    gl.cullFace(gl.BACK);
    this.depthTest = true;
    gl.enable(gl.DEPTH_TEST);
    this.depthFunc = pc.FUNC_LESSEQUAL;
    gl.depthFunc(gl.LEQUAL);
    this.depthWrite = true;
    gl.depthMask(true);
    this.stencil = false;
    gl.disable(gl.STENCIL_TEST);
    this.stencilFuncFront = this.stencilFuncBack = pc.FUNC_ALWAYS;
    this.stencilRefFront = this.stencilRefBack = 0;
    this.stencilMaskFront = this.stencilMaskBack = 255;
    gl.stencilFunc(gl.ALWAYS, 0, 255);
    this.stencilFailFront = this.stencilFailBack = pc.STENCILOP_KEEP;
    this.stencilZfailFront = this.stencilZfailBack = pc.STENCILOP_KEEP;
    this.stencilZpassFront = this.stencilZpassBack = pc.STENCILOP_KEEP;
    this.stencilWriteMaskFront = 255;
    this.stencilWriteMaskBack = 255;
    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    gl.stencilMask(255);
    this.alphaToCoverage = false;
    if (this.webgl2) {
      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
      gl.disable(gl.RASTERIZER_DISCARD);
    }
    this.raster = true;
    this.depthBiasEnabled = false;
    gl.disable(gl.POLYGON_OFFSET_FILL);
    this.clearDepth = 1;
    gl.clearDepth(1);
    this.clearRed = 0;
    this.clearBlue = 0;
    this.clearGreen = 0;
    this.clearAlpha = 0;
    gl.clearColor(0, 0, 0, 0);
    this.clearStencil = 0;
    gl.clearStencil(0);
    this.vx = this.vy = this.vw = this.vh = 0;
    this.sx = this.sy = this.sw = this.sh = 0;
    if (this.webgl2) {
      gl.hint(gl.FRAGMENT_SHADER_DERIVATIVE_HINT, gl.NICEST);
    } else {
      if (this.extStandardDerivatives) {
        gl.hint(this.extStandardDerivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, gl.NICEST);
      }
    }
    gl.enable(gl.SCISSOR_TEST);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
  }, initializeContext:function() {
    this.initializeExtensions();
    this.initializeCapabilities();
    this.initializeRenderState();
    var i, len;
    for (i = 0, len = this.shaders.length; i < len; i++) {
      this.shaders[i].compile();
    }
    this.shader = null;
    for (i = 0, len = this.buffers.length; i < len; i++) {
      this.buffers[i].bufferId = undefined;
      this.buffers[i].unlock();
    }
    this.boundBuffer = null;
    this.indexBuffer = null;
    this.attributesInvalidated = true;
    this.enabledAttributes = {};
    this.vertexBuffers = [];
    for (i = 0, len = this.textures.length; i < len; i++) {
      var texture = this.textures[i];
      texture.dirtyAll();
    }
    this.activeTexture = 0;
    this.textureUnits = [];
    for (i = 0, len = this.targets.length; i < len; i++) {
      this.targets[i]._glFrameBuffer = undefined;
      this.targets[i]._glDepthBuffer = undefined;
      this.targets[i]._glResolveFrameBuffer = undefined;
      this.targets[i]._glMsaaColorBuffer = undefined;
      this.targets[i]._glMsaaDepthBuffer = undefined;
    }
    this.renderTarget = null;
    this.activeFramebuffer = null;
    this.feedback = null;
    this.transformFeedbackBuffer = null;
  }, updateClientRect:function() {
    this.clientRect = this.canvas.getBoundingClientRect();
  }, setViewport:function(x, y, w, h) {
    if (this.vx !== x || this.vy !== y || this.vw !== w || this.vh !== h) {
      this.gl.viewport(x, y, w, h);
      this.vx = x;
      this.vy = y;
      this.vw = w;
      this.vh = h;
    }
  }, setScissor:function(x, y, w, h) {
    if (this.sx !== x || this.sy !== y || this.sw !== w || this.sh !== h) {
      this.gl.scissor(x, y, w, h);
      this.sx = x;
      this.sy = y;
      this.sw = w;
      this.sh = h;
    }
  }, getProgramLibrary:function() {
    return this.programLib;
  }, setProgramLibrary:function(programLib) {
    this.programLib = programLib;
  }, setFramebuffer:function(fb) {
    if (this.activeFramebuffer !== fb) {
      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, fb);
      this.activeFramebuffer = fb;
    }
  }, _checkFbo:function() {
    var gl = this.gl;
    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
    switch(status) {
      case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
        break;
      case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
        break;
      case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        console.error("ERROR: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
        break;
      case gl.FRAMEBUFFER_UNSUPPORTED:
        console.error("ERROR: FRAMEBUFFER_UNSUPPORTED");
        break;
      case gl.FRAMEBUFFER_COMPLETE:
        break;
      default:
        break;
    }
  }, copyRenderTarget:function(source, dest, color, depth) {
    var gl = this.gl;
    if (!this.webgl2 && depth) {
      return false;
    }
    if (color) {
      if (!dest) {
        if (!source._colorBuffer) {
          return false;
        }
      } else {
        if (!source._colorBuffer || !dest._colorBuffer) {
          return false;
        }
        if (source._colorBuffer._format !== dest._colorBuffer._format) {
          return false;
        }
      }
    }
    if (depth) {
      if (!source._depthBuffer || !dest._depthBuffer) {
        return false;
      }
      if (source._depthBuffer._format !== dest._depthBuffer._format) {
        return false;
      }
    }
    if (this.webgl2 && dest) {
      var prevRt = this.renderTarget;
      this.renderTarget = dest;
      this.updateBegin();
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, source ? source._glFrameBuffer : null);
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dest._glFrameBuffer);
      var w = source ? source.width : dest.width;
      var h = source ? source.height : dest.height;
      gl.blitFramebuffer(0, 0, w, h, 0, 0, w, h, (color ? gl.COLOR_BUFFER_BIT : 0) | (depth ? gl.DEPTH_BUFFER_BIT : 0), gl.NEAREST);
      this.renderTarget = prevRt;
      gl.bindFramebuffer(gl.FRAMEBUFFER, prevRt ? prevRt._glFrameBuffer : null);
    } else {
      if (!this._copyShader) {
        var chunks = pc.shaderChunks;
        this._copyShader = chunks.createShaderFromCode(this, chunks.fullscreenQuadVS, chunks.outputTex2DPS, "outputTex2D");
      }
      this.constantTexSource.setValue(source._colorBuffer);
      pc.drawQuadWithShader(this, dest, this._copyShader);
    }
    return true;
  }, updateBegin:function() {
    var gl = this.gl;
    this.boundBuffer = null;
    this.indexBuffer = null;
    var target = this.renderTarget;
    if (target) {
      if (!target._glFrameBuffer) {
        target._device = this;
        target._glFrameBuffer = gl.createFramebuffer();
        this.setFramebuffer(target._glFrameBuffer);
        var colorBuffer = target._colorBuffer;
        if (colorBuffer) {
          if (!colorBuffer._glTextureId) {
            colorBuffer._width = Math.min(colorBuffer.width, this.maxRenderBufferSize);
            colorBuffer._height = Math.min(colorBuffer.height, this.maxRenderBufferSize);
            this.setTexture(colorBuffer, 0);
          }
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, colorBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, colorBuffer._glTextureId, 0);
        }
        var depthBuffer = target._depthBuffer;
        if (depthBuffer && this.webgl2) {
          if (!depthBuffer._glTextureId) {
            depthBuffer._width = Math.min(depthBuffer.width, this.maxRenderBufferSize);
            depthBuffer._height = Math.min(depthBuffer.height, this.maxRenderBufferSize);
            this.setTexture(depthBuffer, 0);
          }
          if (target._stencil) {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer._glTextureId, 0);
          } else {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, depthBuffer._cubemap ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + target._face : gl.TEXTURE_2D, target._depthBuffer._glTextureId, 0);
          }
        } else {
          if (target._depth) {
            var willRenderMsaa = target._samples > 1 && this.webgl2;
            if (!willRenderMsaa) {
              if (!target._glDepthBuffer) {
                target._glDepthBuffer = gl.createRenderbuffer();
              }
              gl.bindRenderbuffer(gl.RENDERBUFFER, target._glDepthBuffer);
              if (target._stencil) {
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, target.width, target.height);
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, target._glDepthBuffer);
              } else {
                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, target.width, target.height);
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target._glDepthBuffer);
              }
              gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            }
          }
        }
        if (this.webgl2 && target._samples > 1) {
          target._glResolveFrameBuffer = target._glFrameBuffer;
          target._glFrameBuffer = gl.createFramebuffer();
          this.setFramebuffer(target._glFrameBuffer);
          if (colorBuffer) {
            if (!target._glMsaaColorBuffer) {
              target._glMsaaColorBuffer = gl.createRenderbuffer();
            }
            gl.bindRenderbuffer(gl.RENDERBUFFER, target._glMsaaColorBuffer);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, colorBuffer._glInternalFormat, target.width, target.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, target._glMsaaColorBuffer);
          }
          if (target._depth) {
            if (!target._glMsaaDepthBuffer) {
              target._glMsaaDepthBuffer = gl.createRenderbuffer();
            }
            gl.bindRenderbuffer(gl.RENDERBUFFER, target._glMsaaDepthBuffer);
            if (target._stencil) {
              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH24_STENCIL8, target.width, target.height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, target._glMsaaDepthBuffer);
            } else {
              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, target._samples, gl.DEPTH_COMPONENT32F, target.width, target.height);
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, target._glMsaaDepthBuffer);
            }
          }
        }
        this.targets.push(target);
      } else {
        this.setFramebuffer(target._glFrameBuffer);
      }
    } else {
      this.setFramebuffer(null);
    }
    for (var i = 0; i < 16; i++) {
      this.textureUnits[i] = null;
    }
  }, updateEnd:function() {
    var gl = this.gl;
    var target = this.renderTarget;
    if (target) {
      var colorBuffer = target._colorBuffer;
      if (colorBuffer && colorBuffer._glTextureId && colorBuffer.mipmaps && colorBuffer._pot) {
        gl.bindTexture(colorBuffer._glTarget, colorBuffer._glTextureId);
        gl.generateMipmap(colorBuffer._glTarget);
      }
      if (this.webgl2 && target._samples > 1 && target.autoResolve) {
        target.resolve();
      }
    }
  }, initializeTexture:function(texture) {
    var gl = this.gl;
    var ext;
    texture._glTextureId = gl.createTexture();
    texture._glTarget = texture._cubemap ? gl.TEXTURE_CUBE_MAP : texture._volume ? gl.TEXTURE_3D : gl.TEXTURE_2D;
    switch(texture._format) {
      case pc.PIXELFORMAT_A8:
        texture._glFormat = gl.ALPHA;
        texture._glInternalFormat = gl.ALPHA;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_L8:
        texture._glFormat = gl.LUMINANCE;
        texture._glInternalFormat = gl.LUMINANCE;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_L8_A8:
        texture._glFormat = gl.LUMINANCE_ALPHA;
        texture._glInternalFormat = gl.LUMINANCE_ALPHA;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_R5_G6_B5:
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = gl.RGB;
        texture._glPixelType = gl.UNSIGNED_SHORT_5_6_5;
        break;
      case pc.PIXELFORMAT_R5_G5_B5_A1:
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = gl.RGBA;
        texture._glPixelType = gl.UNSIGNED_SHORT_5_5_5_1;
        break;
      case pc.PIXELFORMAT_R4_G4_B4_A4:
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = gl.RGBA;
        texture._glPixelType = gl.UNSIGNED_SHORT_4_4_4_4;
        break;
      case pc.PIXELFORMAT_R8_G8_B8:
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = this.webgl2 ? gl.RGB8 : gl.RGB;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_R8_G8_B8_A8:
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = this.webgl2 ? gl.RGBA8 : gl.RGBA;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_DXT1:
        ext = this.extCompressedTextureS3TC;
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;
        break;
      case pc.PIXELFORMAT_DXT3:
        ext = this.extCompressedTextureS3TC;
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = ext.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        break;
      case pc.PIXELFORMAT_DXT5:
        ext = this.extCompressedTextureS3TC;
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = ext.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        break;
      case pc.PIXELFORMAT_ETC1:
        ext = this.extCompressedTextureETC1;
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = ext.COMPRESSED_RGB_ETC1_WEBGL;
        break;
      case pc.PIXELFORMAT_PVRTC_2BPP_RGB_1:
        ext = this.extCompressedTexturePVRTC;
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = ext.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        break;
      case pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1:
        ext = this.extCompressedTexturePVRTC;
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = ext.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
        break;
      case pc.PIXELFORMAT_PVRTC_4BPP_RGB_1:
        ext = this.extCompressedTexturePVRTC;
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = ext.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        break;
      case pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1:
        ext = this.extCompressedTexturePVRTC;
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = ext.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        break;
      case pc.PIXELFORMAT_RGB16F:
        ext = this.extTextureHalfFloat;
        texture._glFormat = gl.RGB;
        if (this.webgl2) {
          texture._glInternalFormat = gl.RGB16F;
          texture._glPixelType = gl.HALF_FLOAT;
        } else {
          texture._glInternalFormat = gl.RGB;
          texture._glPixelType = ext.HALF_FLOAT_OES;
        }
        break;
      case pc.PIXELFORMAT_RGBA16F:
        ext = this.extTextureHalfFloat;
        texture._glFormat = gl.RGBA;
        if (this.webgl2) {
          texture._glInternalFormat = gl.RGBA16F;
          texture._glPixelType = gl.HALF_FLOAT;
        } else {
          texture._glInternalFormat = gl.RGBA;
          texture._glPixelType = ext.HALF_FLOAT_OES;
        }
        break;
      case pc.PIXELFORMAT_RGB32F:
        texture._glFormat = gl.RGB;
        if (this.webgl2) {
          texture._glInternalFormat = gl.RGB32F;
        } else {
          texture._glInternalFormat = gl.RGB;
        }
        texture._glPixelType = gl.FLOAT;
        break;
      case pc.PIXELFORMAT_RGBA32F:
        texture._glFormat = gl.RGBA;
        if (this.webgl2) {
          texture._glInternalFormat = gl.RGBA32F;
        } else {
          texture._glInternalFormat = gl.RGBA;
        }
        texture._glPixelType = gl.FLOAT;
        break;
      case pc.PIXELFORMAT_R32F:
        texture._glFormat = gl.RED;
        texture._glInternalFormat = gl.R32F;
        texture._glPixelType = gl.FLOAT;
        break;
      case pc.PIXELFORMAT_DEPTH:
        if (this.webgl2) {
          texture._glFormat = gl.DEPTH_COMPONENT;
          texture._glInternalFormat = gl.DEPTH_COMPONENT32F;
          texture._glPixelType = gl.FLOAT;
        } else {
          texture._glFormat = gl.DEPTH_COMPONENT;
          texture._glInternalFormat = gl.DEPTH_COMPONENT;
          texture._glPixelType = gl.UNSIGNED_SHORT;
        }
        break;
      case pc.PIXELFORMAT_DEPTHSTENCIL:
        texture._glFormat = gl.DEPTH_STENCIL;
        texture._glInternalFormat = gl.DEPTH24_STENCIL8;
        texture._glPixelType = gl.UNSIGNED_INT_24_8;
        break;
      case pc.PIXELFORMAT_111110F:
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = gl.R11F_G11F_B10F;
        texture._glPixelType = gl.FLOAT;
        break;
      case pc.PIXELFORMAT_SRGB:
        texture._glFormat = gl.RGB;
        texture._glInternalFormat = gl.SRGB8;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
      case pc.PIXELFORMAT_SRGBA:
        texture._glFormat = gl.RGBA;
        texture._glInternalFormat = gl.SRGB8_ALPHA8;
        texture._glPixelType = gl.UNSIGNED_BYTE;
        break;
    }
  }, uploadTexture:function(texture) {
    var gl = this.gl;
    if (!texture._needsUpload && (texture._needsMipmapsUpload && texture._mipmapsUploaded || !texture._pot)) {
      return;
    }
    var mipLevel = 0;
    var mipObject;
    var resMult;
    while (texture._levels[mipLevel] || mipLevel === 0) {
      if (!texture._needsUpload && mipLevel === 0) {
        mipLevel++;
        continue;
      } else {
        if (mipLevel && (!texture._needsMipmapsUpload || !texture._mipmaps)) {
          break;
        }
      }
      mipObject = texture._levels[mipLevel];
      if (mipLevel == 1 && !texture._compressed) {
        gl.generateMipmap(texture._glTarget);
        texture._mipmapsUploaded = true;
      }
      if (texture._cubemap) {
        var face;
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        if (mipObject[0] instanceof HTMLCanvasElement || mipObject[0] instanceof HTMLImageElement || mipObject[0] instanceof HTMLVideoElement) {
          for (face = 0; face < 6; face++) {
            if (!texture._levelsUpdated[0][face]) {
              continue;
            }
            var src = mipObject[face];
            if (src instanceof HTMLImageElement) {
              if (src.width > this.maxCubeMapSize || src.height > this.maxCubeMapSize) {
                src = _downsampleImage(src, this.maxCubeMapSize);
                if (mipLevel === 0) {
                  texture.width = src.width;
                  texture.height = src.height;
                }
              }
            }
            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, texture._glFormat, texture._glPixelType, src);
          }
        } else {
          resMult = 1 / Math.pow(2, mipLevel);
          for (face = 0; face < 6; face++) {
            if (!texture._levelsUpdated[0][face]) {
              continue;
            }
            var texData = mipObject[face];
            if (texture._compressed) {
              gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texData);
            } else {
              gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texture._glFormat, texture._glPixelType, texData);
            }
          }
        }
      } else {
        if (texture._volume) {
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
          resMult = 1 / Math.pow(2, mipLevel);
          if (texture._compressed) {
            gl.compressedTexImage3D(gl.TEXTURE_3D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, mipObject);
          } else {
            gl.texImage3D(gl.TEXTURE_3D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), Math.max(texture._depth * resMult, 1), 0, texture._glFormat, texture._glPixelType, mipObject);
          }
        } else {
          if (mipObject instanceof HTMLCanvasElement || mipObject instanceof HTMLImageElement || mipObject instanceof HTMLVideoElement) {
            if (mipObject instanceof HTMLImageElement) {
              if (mipObject.width > this.maxTextureSize || mipObject.height > this.maxTextureSize) {
                mipObject = _downsampleImage(mipObject, this.maxTextureSize);
                if (mipLevel === 0) {
                  texture.width = mipObject.width;
                  texture.height = mipObject.height;
                }
              }
            }
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture._flipY);
            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, texture._glFormat, texture._glPixelType, mipObject);
          } else {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            resMult = 1 / Math.pow(2, mipLevel);
            if (texture._compressed) {
              gl.compressedTexImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, mipObject);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, mipLevel, texture._glInternalFormat, Math.max(texture._width * resMult, 1), Math.max(texture._height * resMult, 1), 0, texture._glFormat, texture._glPixelType, mipObject);
            }
          }
          if (mipLevel === 0) {
            texture._mipmapsUploaded = false;
          } else {
            texture._mipmapsUploaded = true;
          }
        }
      }
      mipLevel++;
    }
    if (texture._needsUpload) {
      if (texture._cubemap) {
        for (var i = 0; i < 6; i++) {
          texture._levelsUpdated[0][i] = false;
        }
      } else {
        texture._levelsUpdated[0] = false;
      }
    }
    if (!texture._compressed && texture._mipmaps && texture._needsMipmapsUpload && texture._pot && texture._levels.length === 1) {
      gl.generateMipmap(texture._glTarget);
      texture._mipmapsUploaded = true;
    }
    if (texture._gpuSize) {
      this._vram.tex -= texture._gpuSize;
    }
    texture._gpuSize = gpuTexSize(gl, texture);
    this._vram.tex += texture._gpuSize;
  }, setTexture:function(texture, textureUnit) {
    var gl = this.gl;
    if (!texture._glTextureId) {
      this.initializeTexture(texture);
    }
    var paramDirty = texture._minFilterDirty || texture._magFilterDirty || texture._addressUDirty || texture._addressVDirty || texture._addressWDirty || texture._anisotropyDirty || texture._compareModeDirty;
    if (this.textureUnits[textureUnit] !== texture || paramDirty) {
      if (this.activeTexture !== textureUnit) {
        gl.activeTexture(gl.TEXTURE0 + textureUnit);
        this.activeTexture = textureUnit;
      }
      gl.bindTexture(texture._glTarget, texture._glTextureId);
      this.textureUnits[textureUnit] = texture;
    }
    if (paramDirty) {
      if (texture._minFilterDirty) {
        var filter = texture._minFilter;
        if (!texture._pot || !texture._mipmaps || texture._compressed && texture._levels.length === 1) {
          if (filter === pc.FILTER_NEAREST_MIPMAP_NEAREST || filter === pc.FILTER_NEAREST_MIPMAP_LINEAR) {
            filter = pc.FILTER_NEAREST;
          } else {
            if (filter === pc.FILTER_LINEAR_MIPMAP_NEAREST || filter === pc.FILTER_LINEAR_MIPMAP_LINEAR) {
              filter = pc.FILTER_LINEAR;
            }
          }
        }
        gl.texParameteri(texture._glTarget, gl.TEXTURE_MIN_FILTER, this.glFilter[filter]);
        texture._minFilterDirty = false;
      }
      if (texture._magFilterDirty) {
        gl.texParameteri(texture._glTarget, gl.TEXTURE_MAG_FILTER, this.glFilter[texture._magFilter]);
        texture._magFilterDirty = false;
      }
      if (texture._addressUDirty) {
        if (this.webgl2) {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_S, this.glAddress[texture._addressU]);
        } else {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_S, this.glAddress[texture._pot ? texture._addressU : pc.ADDRESS_CLAMP_TO_EDGE]);
        }
        texture._addressUDirty = false;
      }
      if (texture._addressVDirty) {
        if (this.webgl2) {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_T, this.glAddress[texture._addressV]);
        } else {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_T, this.glAddress[texture._pot ? texture._addressV : pc.ADDRESS_CLAMP_TO_EDGE]);
        }
        texture._addressVDirty = false;
      }
      if (this.webgl2) {
        if (texture._addressWDirty) {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_WRAP_R, this.glAddress[texture._addressW]);
          texture._addressWDirty = false;
        }
        if (texture._compareModeDirty) {
          gl.texParameteri(texture._glTarget, gl.TEXTURE_COMPARE_MODE, texture._compareOnRead ? gl.COMPARE_REF_TO_TEXTURE : gl.NONE);
          gl.texParameteri(texture._glTarget, gl.TEXTURE_COMPARE_FUNC, this.glComparison[texture._compareFunc]);
          texture._compareModeDirty = false;
        }
      }
      if (texture._anisotropyDirty) {
        var ext = this.extTextureFilterAnisotropic;
        if (ext) {
          gl.texParameterf(texture._glTarget, ext.TEXTURE_MAX_ANISOTROPY_EXT, Math.max(1, Math.min(Math.round(texture._anisotropy), this.maxAnisotropy)));
        }
        texture._anisotropyDirty = false;
      }
    }
    if (texture._needsUpload || texture._needsMipmapsUpload) {
      this.uploadTexture(texture);
      texture._needsUpload = false;
      texture._needsMipmapsUpload = false;
    }
  }, draw:function(primitive, numInstances) {
    var gl = this.gl;
    var i, j, len;
    var sampler, samplerValue, texture, numTextures;
    var uniform, scopeId, uniformVersion, programVersion, locationId;
    var shader = this.shader;
    var samplers = shader.samplers;
    var uniforms = shader.uniforms;
    if (numInstances > 1) {
      this.boundBuffer = null;
      this.attributesInvalidated = true;
    }
    if (this.attributesInvalidated) {
      var attribute, element, vertexBuffer, vbOffset, bufferId;
      var attributes = shader.attributes;
      for (i = 0, len = attributes.length; i < len; i++) {
        attribute = attributes[i];
        element = attribute.scopeId.value;
        if (element !== null) {
          vertexBuffer = this.vertexBuffers[element.stream];
          vbOffset = this.vbOffsets[element.stream] || 0;
          bufferId = vertexBuffer.bufferId;
          if (this.boundBuffer !== bufferId) {
            gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);
            this.boundBuffer = bufferId;
          }
          locationId = attribute.locationId;
          if (!this.enabledAttributes[locationId]) {
            gl.enableVertexAttribArray(locationId);
            this.enabledAttributes[locationId] = true;
          }
          gl.vertexAttribPointer(locationId, element.numComponents, this.glType[element.dataType], element.normalize, element.stride, element.offset + vbOffset);
          if (element.stream === 1 && numInstances > 1) {
            if (!this.instancedAttribs[locationId]) {
              this.extInstancing.vertexAttribDivisorANGLE(locationId, 1);
              this.instancedAttribs[locationId] = true;
            }
          } else {
            if (this.instancedAttribs[locationId]) {
              this.extInstancing.vertexAttribDivisorANGLE(locationId, 0);
              this.instancedAttribs[locationId] = false;
            }
          }
        }
      }
      this.attributesInvalidated = false;
    }
    var textureUnit = 0;
    for (i = 0, len = samplers.length; i < len; i++) {
      sampler = samplers[i];
      samplerValue = sampler.scopeId.value;
      if (!samplerValue) {
        continue;
      }
      if (samplerValue instanceof pc.Texture) {
        texture = samplerValue;
        this.setTexture(texture, textureUnit);
        if (sampler.slot !== textureUnit) {
          gl.uniform1i(sampler.locationId, textureUnit);
          sampler.slot = textureUnit;
        }
        textureUnit++;
      } else {
        sampler.array.length = 0;
        numTextures = samplerValue.length;
        for (j = 0; j < numTextures; j++) {
          texture = samplerValue[j];
          this.setTexture(texture, textureUnit);
          sampler.array[j] = textureUnit;
          textureUnit++;
        }
        gl.uniform1iv(sampler.locationId, sampler.array);
      }
    }
    for (i = 0, len = uniforms.length; i < len; i++) {
      uniform = uniforms[i];
      scopeId = uniform.scopeId;
      uniformVersion = uniform.version;
      programVersion = scopeId.versionObject.version;
      if (uniformVersion.globalId !== programVersion.globalId || uniformVersion.revision !== programVersion.revision) {
        uniformVersion.globalId = programVersion.globalId;
        uniformVersion.revision = programVersion.revision;
        if (scopeId.value !== null) {
          this.commitFunction[uniform.dataType](uniform, scopeId.value);
        }
      }
    }
    this._drawCallsPerFrame++;
    this._primsPerFrame[primitive.type] += primitive.count * (numInstances > 1 ? numInstances : 1);
    if (this.webgl2 && this.transformFeedbackBuffer) {
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.transformFeedbackBuffer.bufferId);
      gl.beginTransformFeedback(gl.POINTS);
    }
    if (primitive.indexed) {
      if (numInstances > 1) {
        this.extInstancing.drawElementsInstancedANGLE(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * 2, numInstances);
        this.boundBuffer = null;
        this.attributesInvalidated = true;
      } else {
        gl.drawElements(this.glPrimitive[primitive.type], primitive.count, this.indexBuffer.glFormat, primitive.base * this.indexBuffer.bytesPerIndex);
      }
    } else {
      if (numInstances > 1) {
        this.extInstancing.drawArraysInstancedANGLE(this.glPrimitive[primitive.type], primitive.base, primitive.count, numInstances);
        this.boundBuffer = null;
        this.attributesInvalidated = true;
      } else {
        gl.drawArrays(this.glPrimitive[primitive.type], primitive.base, primitive.count);
      }
    }
    if (this.webgl2 && this.transformFeedbackBuffer) {
      gl.endTransformFeedback();
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);
    }
  }, clear:function(options) {
    var defaultOptions = this.defaultClearOptions;
    options = options || defaultOptions;
    var flags = options.flags == undefined ? defaultOptions.flags : options.flags;
    if (flags !== 0) {
      var gl = this.gl;
      if (flags & pc.CLEARFLAG_COLOR) {
        var color = options.color == undefined ? defaultOptions.color : options.color;
        this.setClearColor(color[0], color[1], color[2], color[3]);
      }
      if (flags & pc.CLEARFLAG_DEPTH) {
        var depth = options.depth == undefined ? defaultOptions.depth : options.depth;
        this.setClearDepth(depth);
        if (!this.depthWrite) {
          gl.depthMask(true);
        }
      }
      if (flags & pc.CLEARFLAG_STENCIL) {
        var stencil = options.stencil == undefined ? defaultOptions.stencil : options.stencil;
        this.setClearStencil(stencil);
      }
      gl.clear(this.glClearFlag[flags]);
      if (flags & pc.CLEARFLAG_DEPTH) {
        if (!this.depthWrite) {
          gl.depthMask(false);
        }
      }
    }
  }, readPixels:function(x, y, w, h, pixels) {
    var gl = this.gl;
    gl.readPixels(x, y, w, h, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }, setClearDepth:function(depth) {
    if (depth !== this.clearDepth) {
      this.gl.clearDepth(depth);
      this.clearDepth = depth;
    }
  }, setClearColor:function(r, g, b, a) {
    if (r !== this.clearRed || g !== this.clearGreen || b !== this.clearBlue || a !== this.clearAlpha) {
      this.gl.clearColor(r, g, b, a);
      this.clearRed = r;
      this.clearGreen = g;
      this.clearBlue = b;
      this.clearAlpha = a;
    }
  }, setClearStencil:function(value) {
    if (value !== this.clearStencil) {
      this.gl.clearStencil(value);
      this.clearStencil = value;
    }
  }, setRenderTarget:function(renderTarget) {
    this.renderTarget = renderTarget;
  }, getRenderTarget:function() {
    return this.renderTarget;
  }, getDepthTest:function() {
    return this.depthTest;
  }, setDepthTest:function(depthTest) {
    if (this.depthTest !== depthTest) {
      var gl = this.gl;
      if (depthTest) {
        gl.enable(gl.DEPTH_TEST);
      } else {
        gl.disable(gl.DEPTH_TEST);
      }
      this.depthTest = depthTest;
    }
  }, setDepthFunc:function(func) {
    if (this.depthFunc === func) {
      return;
    }
    this.gl.depthFunc(this.glComparison[func]);
    this.depthFunc = func;
  }, getDepthWrite:function() {
    return this.depthWrite;
  }, setDepthWrite:function(writeDepth) {
    if (this.depthWrite !== writeDepth) {
      this.gl.depthMask(writeDepth);
      this.depthWrite = writeDepth;
    }
  }, setColorWrite:function(writeRed, writeGreen, writeBlue, writeAlpha) {
    if (this.writeRed !== writeRed || this.writeGreen !== writeGreen || this.writeBlue !== writeBlue || this.writeAlpha !== writeAlpha) {
      this.gl.colorMask(writeRed, writeGreen, writeBlue, writeAlpha);
      this.writeRed = writeRed;
      this.writeGreen = writeGreen;
      this.writeBlue = writeBlue;
      this.writeAlpha = writeAlpha;
    }
  }, setAlphaToCoverage:function(state) {
    if (!this.webgl2) {
      return;
    }
    if (this.alphaToCoverage === state) {
      return;
    }
    this.alphaToCoverage = state;
    if (state) {
      this.gl.enable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);
    } else {
      this.gl.disable(this.gl.SAMPLE_ALPHA_TO_COVERAGE);
    }
  }, setTransformFeedbackBuffer:function(tf) {
    if (this.transformFeedbackBuffer === tf) {
      return;
    }
    this.transformFeedbackBuffer = tf;
    if (this.webgl2) {
      var gl = this.gl;
      if (tf) {
        if (!this.feedback) {
          this.feedback = gl.createTransformFeedback();
        }
        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.feedback);
      } else {
        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
      }
    }
  }, setRaster:function(on) {
    if (this.raster === on) {
      return;
    }
    this.raster = on;
    if (this.webgl2) {
      if (on) {
        this.gl.disable(this.gl.RASTERIZER_DISCARD);
      } else {
        this.gl.enable(this.gl.RASTERIZER_DISCARD);
      }
    }
  }, setDepthBias:function(on) {
    if (this.depthBiasEnabled === on) {
      return;
    }
    this.depthBiasEnabled = on;
    if (on) {
      this.gl.enable(this.gl.POLYGON_OFFSET_FILL);
    } else {
      this.gl.disable(this.gl.POLYGON_OFFSET_FILL);
    }
  }, setDepthBiasValues:function(constBias, slopeBias) {
    this.gl.polygonOffset(slopeBias, constBias);
  }, getBlending:function() {
    return this.blending;
  }, setBlending:function(blending) {
    if (this.blending !== blending) {
      var gl = this.gl;
      if (blending) {
        gl.enable(gl.BLEND);
      } else {
        gl.disable(gl.BLEND);
      }
      this.blending = blending;
    }
  }, setStencilTest:function(enable) {
    if (this.stencil !== enable) {
      var gl = this.gl;
      if (enable) {
        gl.enable(gl.STENCIL_TEST);
      } else {
        gl.disable(gl.STENCIL_TEST);
      }
      this.stencil = enable;
    }
  }, setStencilFunc:function(func, ref, mask) {
    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask || this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {
      var gl = this.gl;
      gl.stencilFunc(this.glComparison[func], ref, mask);
      this.stencilFuncFront = this.stencilFuncBack = func;
      this.stencilRefFront = this.stencilRefBack = ref;
      this.stencilMaskFront = this.stencilMaskBack = mask;
    }
  }, setStencilFuncFront:function(func, ref, mask) {
    if (this.stencilFuncFront !== func || this.stencilRefFront !== ref || this.stencilMaskFront !== mask) {
      var gl = this.gl;
      gl.stencilFuncSeparate(gl.FRONT, this.glComparison[func], ref, mask);
      this.stencilFuncFront = func;
      this.stencilRefFront = ref;
      this.stencilMaskFront = mask;
    }
  }, setStencilFuncBack:function(func, ref, mask) {
    if (this.stencilFuncBack !== func || this.stencilRefBack !== ref || this.stencilMaskBack !== mask) {
      var gl = this.gl;
      gl.stencilFuncSeparate(gl.BACK, this.glComparison[func], ref, mask);
      this.stencilFuncBack = func;
      this.stencilRefBack = ref;
      this.stencilMaskBack = mask;
    }
  }, setStencilOperation:function(fail, zfail, zpass, writeMask) {
    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass || this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {
      this.gl.stencilOp(this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailFront = this.stencilFailBack = fail;
      this.stencilZfailFront = this.stencilZfailBack = zfail;
      this.stencilZpassFront = this.stencilZpassBack = zpass;
    }
    if (this.stencilWriteMaskFront !== writeMask || this.stencilWriteMaskBack !== writeMask) {
      this.gl.stencilMask(writeMask);
      this.stencilWriteMaskFront = writeMask;
      this.stencilWriteMaskBack = writeMask;
    }
  }, setStencilOperationFront:function(fail, zfail, zpass, writeMask) {
    if (this.stencilFailFront !== fail || this.stencilZfailFront !== zfail || this.stencilZpassFront !== zpass) {
      this.gl.stencilOpSeparate(this.gl.FRONT, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailFront = fail;
      this.stencilZfailFront = zfail;
      this.stencilZpassFront = zpass;
    }
    if (this.stencilWriteMaskFront !== writeMask) {
      this.gl.stencilMaskSeparate(this.gl.FRONT, writeMask);
      this.stencilWriteMaskFront = writeMask;
    }
  }, setStencilOperationBack:function(fail, zfail, zpass, writeMask) {
    if (this.stencilFailBack !== fail || this.stencilZfailBack !== zfail || this.stencilZpassBack !== zpass) {
      this.gl.stencilOpSeparate(this.gl.BACK, this.glStencilOp[fail], this.glStencilOp[zfail], this.glStencilOp[zpass]);
      this.stencilFailBack = fail;
      this.stencilZfailBack = zfail;
      this.stencilZpassBack = zpass;
    }
    if (this.stencilWriteMaskBack !== writeMask) {
      this.gl.stencilMaskSeparate(this.gl.BACK, writeMask);
      this.stencilWriteMaskBack = writeMask;
    }
  }, setBlendFunction:function(blendSrc, blendDst) {
    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.separateAlphaBlend) {
      this.gl.blendFunc(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst]);
      this.blendSrc = blendSrc;
      this.blendDst = blendDst;
      this.separateAlphaBlend = false;
    }
  }, setBlendFunctionSeparate:function(blendSrc, blendDst, blendSrcAlpha, blendDstAlpha) {
    if (this.blendSrc !== blendSrc || this.blendDst !== blendDst || this.blendSrcAlpha !== blendSrcAlpha || this.blendDstAlpha !== blendDstAlpha || !this.separateAlphaBlend) {
      this.gl.blendFuncSeparate(this.glBlendFunction[blendSrc], this.glBlendFunction[blendDst], this.glBlendFunction[blendSrcAlpha], this.glBlendFunction[blendDstAlpha]);
      this.blendSrc = blendSrc;
      this.blendDst = blendDst;
      this.blendSrcAlpha = blendSrcAlpha;
      this.blendDstAlpha = blendDstAlpha;
      this.separateAlphaBlend = true;
    }
  }, setBlendEquation:function(blendEquation) {
    if (this.blendEquation !== blendEquation || this.separateAlphaEquation) {
      this.gl.blendEquation(this.glBlendEquation[blendEquation]);
      this.blendEquation = blendEquation;
      this.separateAlphaEquation = false;
    }
  }, setBlendEquationSeparate:function(blendEquation, blendAlphaEquation) {
    if (this.blendEquation !== blendEquation || this.blendAlphaEquation !== blendAlphaEquation || !this.separateAlphaEquation) {
      this.gl.blendEquationSeparate(this.glBlendEquation[blendEquation], this.glBlendEquation[blendAlphaEquation]);
      this.blendEquation = blendEquation;
      this.blendAlphaEquation = blendAlphaEquation;
      this.separateAlphaEquation = true;
    }
  }, setCullMode:function(cullMode) {
    if (this.cullMode !== cullMode) {
      if (cullMode === pc.CULLFACE_NONE) {
        this.gl.disable(this.gl.CULL_FACE);
      } else {
        if (this.cullMode === pc.CULLFACE_NONE) {
          this.gl.enable(this.gl.CULL_FACE);
        }
        var mode = this.glCull[cullMode];
        if (this.cullFace !== mode) {
          this.gl.cullFace(mode);
          this.cullFace = mode;
        }
      }
      this.cullMode = cullMode;
    }
  }, getCullMode:function() {
    return this.cullMode;
  }, setIndexBuffer:function(indexBuffer) {
    if (this.indexBuffer !== indexBuffer) {
      this.indexBuffer = indexBuffer;
      var gl = this.gl;
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer ? indexBuffer.bufferId : null);
    }
  }, setVertexBuffer:function(vertexBuffer, stream, vbOffset) {
    if (this.vertexBuffers[stream] !== vertexBuffer || this.vbOffsets[stream] !== vbOffset) {
      this.vertexBuffers[stream] = vertexBuffer;
      this.vbOffsets[stream] = vbOffset;
      var vertexFormat = vertexBuffer.getFormat();
      var i = 0;
      var elements = vertexFormat.elements;
      var numElements = elements.length;
      while (i < numElements) {
        var vertexElement = elements[i++];
        vertexElement.stream = stream;
        vertexElement.scopeId.setValue(vertexElement);
      }
      this.attributesInvalidated = true;
    }
  }, setShader:function(shader) {
    if (shader !== this.shader) {
      this.shader = shader;
      if (!shader.ready) {
        if (!shader.link()) {
          return false;
        }
      }
      this._shaderSwitchesPerFrame++;
      this.gl.useProgram(shader.program);
      this.attributesInvalidated = true;
    }
    return true;
  }, getHdrFormat:function() {
    if (this.extTextureHalfFloatRenderable) {
      return pc.PIXELFORMAT_RGB16F;
    } else {
      if (this.extTextureFloatRenderable) {
        return pc.PIXELFORMAT_RGB32F;
      }
    }
    return pc.PIXELFORMAT_R8_G8_B8_A8;
  }, getBoneLimit:function() {
    return this.boneLimit;
  }, setBoneLimit:function(maxBones) {
    this.boneLimit = maxBones;
  }, enableValidation:function(enable) {
    console.warn("enableValidation: This function is deprecated and will be removed shortly.");
  }, validate:function() {
    console.warn("validate: This function is deprecated and will be removed shortly.");
  }, resizeCanvas:function(width, height) {
    this._width = width;
    this._height = height;
    var ratio = Math.min(this._maxPixelRatio, window.devicePixelRatio);
    width *= ratio;
    height *= ratio;
    this.canvas.width = width;
    this.canvas.height = height;
    this.fire(EVENT_RESIZE, width, height);
  }, setResolution:function(width, height) {
    this._width = width;
    this._height = height;
    this.canvas.width = width;
    this.canvas.height = height;
    this.fire(EVENT_RESIZE, width, height);
  }, clearShaderCache:function() {
    this.programLib.clearCache();
  }, removeShaderFromCache:function(shader) {
    this.programLib.removeFromCache(shader);
  }, destroy:function() {
    if (this.webgl2 && this.feedback) {
      this.gl.deleteTransformFeedback(this.feedback);
    }
  }};
  Object.defineProperty(GraphicsDevice.prototype, "width", {get:function() {
    return this.gl.drawingBufferWidth || this.canvas.width;
  }});
  Object.defineProperty(GraphicsDevice.prototype, "height", {get:function() {
    return this.gl.drawingBufferHeight || this.canvas.height;
  }});
  Object.defineProperty(GraphicsDevice.prototype, "fullscreen", {get:function() {
    return !!document.fullscreenElement;
  }, set:function(fullscreen) {
    if (fullscreen) {
      var canvas = this.gl.canvas;
      canvas.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  }});
  Object.defineProperty(GraphicsDevice.prototype, "enableAutoInstancing", {get:function() {
    return this._enableAutoInstancing;
  }, set:function(value) {
    this._enableAutoInstancing = value && this.extInstancing;
  }});
  Object.defineProperty(GraphicsDevice.prototype, "maxAnisotropy", {get:function() {
    var maxAniso;
    return function() {
      if (maxAniso === undefined) {
        maxAniso = 1;
        var gl = this.gl;
        var glExt = this.extTextureFilterAnisotropic;
        if (glExt) {
          maxAniso = gl.getParameter(glExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        }
      }
      return maxAniso;
    };
  }()});
  Object.defineProperty(GraphicsDevice.prototype, "maxPixelRatio", {get:function() {
    return this._maxPixelRatio;
  }, set:function(ratio) {
    this._maxPixelRatio = ratio;
    this.resizeCanvas(this._width, this._height);
  }});
  return {UnsupportedBrowserError:UnsupportedBrowserError, ContextCreationError:ContextCreationError, GraphicsDevice:GraphicsDevice, precalculatedTangents:true};
}());
pc.extend(pc, function() {
  var shaderChunks = {};
  var attrib2Semantic = {vertex_position:pc.SEMANTIC_POSITION, vertex_normal:pc.SEMANTIC_NORMAL, vertex_tangent:pc.SEMANTIC_TANGENT, vertex_texCoord0:pc.SEMANTIC_TEXCOORD0, vertex_texCoord1:pc.SEMANTIC_TEXCOORD1, vertex_texCoord2:pc.SEMANTIC_TEXCOORD2, vertex_texCoord3:pc.SEMANTIC_TEXCOORD3, vertex_texCoord4:pc.SEMANTIC_TEXCOORD4, vertex_texCoord5:pc.SEMANTIC_TEXCOORD5, vertex_texCoord6:pc.SEMANTIC_TEXCOORD6, vertex_texCoord7:pc.SEMANTIC_TEXCOORD7, vertex_color:pc.SEMANTIC_COLOR, vertex_boneIndices:pc.SEMANTIC_BLENDINDICES, 
  vertex_boneWeights:pc.SEMANTIC_BLENDWEIGHT};
  shaderChunks.collectAttribs = function(vsCode) {
    var attribs = {};
    var attrs = 0;
    var found = vsCode.indexOf("attribute");
    while (found >= 0) {
      if (found > 0 && vsCode[found - 1] === "/") {
        break;
      }
      var endOfLine = vsCode.indexOf(";", found);
      var startOfAttribName = vsCode.lastIndexOf(" ", endOfLine);
      var attribName = vsCode.substr(startOfAttribName + 1, endOfLine - (startOfAttribName + 1));
      var semantic = attrib2Semantic[attribName];
      if (semantic !== undefined) {
        attribs[attribName] = semantic;
      } else {
        attribs[attribName] = "ATTR" + attrs;
        attrs++;
      }
      found = vsCode.indexOf("attribute", found + 1);
    }
    return attribs;
  };
  shaderChunks.createShader = function(device, vsName, psName, useTransformFeedback) {
    var vsCode = shaderChunks[vsName];
    var psCode = pc.programlib.precisionCode(device) + "\n" + shaderChunks[psName];
    var attribs = this.collectAttribs(vsCode);
    if (device.webgl2) {
      vsCode = pc.programlib.versionCode(device) + this.gles3VS + vsCode;
      psCode = pc.programlib.versionCode(device) + this.gles3PS + psCode;
    }
    return new pc.Shader(device, {attributes:attribs, vshader:vsCode, fshader:psCode, useTransformFeedback:useTransformFeedback});
  };
  shaderChunks.createShaderFromCode = function(device, vsCode, psCode, uName, useTransformFeedback) {
    var shaderCache = device.programLib._cache;
    var cached = shaderCache[uName];
    if (cached !== undefined) {
      return cached;
    }
    psCode = pc.programlib.precisionCode(device) + "\n" + (psCode || pc.programlib.dummyFragmentCode());
    var attribs = this.collectAttribs(vsCode);
    if (device.webgl2) {
      vsCode = pc.programlib.versionCode(device) + this.gles3VS + vsCode;
      psCode = pc.programlib.versionCode(device) + this.gles3PS + psCode;
    }
    shaderCache[uName] = new pc.Shader(device, {attributes:attribs, vshader:vsCode, fshader:psCode, useTransformFeedback:useTransformFeedback});
    return shaderCache[uName];
  };
  return {shaderChunks:shaderChunks};
}());
pc.extend(pc, function() {
  var _postEffectQuadVB = null;
  var _postEffectQuadDraw = {type:pc.PRIMITIVE_TRISTRIP, base:0, count:4, indexed:false};
  function drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend) {
    if (_postEffectQuadVB === null) {
      var vertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:2, type:pc.TYPE_FLOAT32}]);
      _postEffectQuadVB = new pc.VertexBuffer(device, vertexFormat, 4);
      var iterator = new pc.VertexIterator(_postEffectQuadVB);
      iterator.element[pc.SEMANTIC_POSITION].set(-1.0, -1.0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(1.0, -1.0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(-1.0, 1.0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(1.0, 1.0);
      iterator.end();
    }
    var oldRt = device.renderTarget;
    device.setRenderTarget(target);
    device.updateBegin();
    var x, y, w, h;
    var sx, sy, sw, sh;
    if (!rect) {
      w = target ? target.width : device.width;
      h = target ? target.height : device.height;
      x = 0;
      y = 0;
    } else {
      x = rect.x;
      y = rect.y;
      w = rect.z;
      h = rect.w;
    }
    if (!scissorRect) {
      sx = x;
      sy = y;
      sw = w;
      sh = h;
    } else {
      sx = scissorRect.x;
      sy = scissorRect.y;
      sw = scissorRect.z;
      sh = scissorRect.w;
    }
    device.setViewport(x, y, w, h);
    device.setScissor(sx, sy, sw, sh);
    var oldDepthTest = device.getDepthTest();
    var oldDepthWrite = device.getDepthWrite();
    var oldCull = device.getCullMode();
    device.setDepthTest(false);
    device.setDepthWrite(false);
    device.setCullMode(pc.CULLFACE_NONE);
    if (!useBlend) {
      device.setBlending(false);
    }
    device.setVertexBuffer(_postEffectQuadVB, 0);
    device.setShader(shader);
    device.draw(_postEffectQuadDraw);
    device.setDepthTest(oldDepthTest);
    device.setDepthWrite(oldDepthWrite);
    device.setCullMode(oldCull);
    device.updateEnd();
    device.setRenderTarget(oldRt);
    device.updateBegin();
  }
  function destroyPostEffectQuad() {
    _postEffectQuadVB = null;
  }
  return {drawQuadWithShader:drawQuadWithShader, destroyPostEffectQuad:destroyPostEffectQuad};
}());
pc.extend(pc, function() {
  function fixChrome() {
    var endTime = Date.now() + 10;
    while (Date.now() < endTime) {
    }
  }
  function syncToCpu(device, targ, face) {
    var tex = targ._colorBuffer;
    if (tex.format != pc.PIXELFORMAT_R8_G8_B8_A8) {
      return;
    }
    var pixels = new Uint8Array(tex.width * tex.height * 4);
    var gl = device.gl;
    device.setFramebuffer(targ._glFrameBuffer);
    gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
    if (!tex._levels) {
      tex._levels = [];
    }
    if (!tex._levels[0]) {
      tex._levels[0] = [];
    }
    tex._levels[0][face] = pixels;
  }
  function prefilterCubemap(options) {
    var device = options.device;
    var sourceCubemap = options.sourceCubemap;
    var method = options.method;
    var samples = options.samples;
    var cpuSync = options.cpuSync;
    var chromeFix = options.chromeFix;
    if (cpuSync && !sourceCubemap._levels[0]) {
      console.error("ERROR: prefilter: cubemap must have _levels");
      return;
    }
    var chunks = pc.shaderChunks;
    var rgbmSource = sourceCubemap.rgbm;
    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.rgbmPS + chunks.prefilterCubemapPS.replace(/\$METHOD/g, method === 0 ? "cos" : "phong").replace(/\$NUMSAMPLES/g, samples).replace(/\$textureCube/g, rgbmSource ? "textureCubeRGBM" : "textureCube"), "prefilter" + method + "" + samples + "" + rgbmSource);
    var shader2 = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.outputCubemapPS, "outputCubemap");
    var constantTexSource = device.scope.resolve("source");
    var constantParams = device.scope.resolve("params");
    var params = new pc.Vec4;
    var size = sourceCubemap.width;
    var format = sourceCubemap.format;
    var cmapsList = [[], options.filteredFixed, options.filteredRgbm, options.filteredFixedRgbm];
    var gloss = method === 0 ? [0.9, 0.85, 0.7, 0.4, 0.25] : [512, 128, 32, 8, 2];
    var mipSize = [64, 32, 16, 8, 4];
    var numMips = 5;
    var targ;
    var i, face, pass;
    var rgbFormat = format === pc.PIXELFORMAT_R8_G8_B8;
    var isImg = false;
    var nextCubemap, cubemap;
    if (cpuSync) {
      isImg = sourceCubemap._levels[0][0] instanceof HTMLImageElement;
    }
    if ((rgbFormat || isImg) && cpuSync) {
      format = pc.PIXELFORMAT_R8_G8_B8_A8;
      nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, format:format, width:size, height:size, mipmaps:false});
      for (face = 0; face < 6; face++) {
        targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});
        params.x = face;
        params.y = 0;
        constantTexSource.setValue(sourceCubemap);
        constantParams.setValue(params.data);
        if (chromeFix) {
          fixChrome();
        }
        pc.drawQuadWithShader(device, targ, shader2);
        syncToCpu(device, targ, face);
      }
      sourceCubemap = nextCubemap;
    }
    if (size > 128) {
      var log128 = Math.round(Math.log2(128));
      var logSize = Math.round(Math.log2(size));
      var steps = logSize - log128;
      for (i = 0; i < steps; i++) {
        size = sourceCubemap.width * 0.5;
        var sampleGloss = method === 0 ? 1 : Math.pow(2, Math.round(Math.log2(gloss[0]) + (steps - i) * 2));
        nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, format:format, width:size, height:size, mipmaps:false});
        for (face = 0; face < 6; face++) {
          targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});
          params.x = face;
          params.y = sampleGloss;
          params.z = size;
          params.w = rgbmSource ? 3 : 0;
          constantTexSource.setValue(sourceCubemap);
          constantParams.setValue(params.data);
          if (chromeFix) {
            fixChrome();
          }
          pc.drawQuadWithShader(device, targ, shader2);
          if (i === steps - 1 && cpuSync) {
            syncToCpu(device, targ, face);
          }
        }
        sourceCubemap = nextCubemap;
      }
    }
    options.sourceCubemap = sourceCubemap;
    var sourceCubemapRgbm = null;
    if (!rgbmSource && options.filteredFixedRgbm) {
      nextCubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:true, format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, mipmaps:false});
      for (face = 0; face < 6; face++) {
        targ = new pc.RenderTarget(device, nextCubemap, {face:face, depth:false});
        params.x = face;
        params.w = 2;
        constantTexSource.setValue(sourceCubemap);
        constantParams.setValue(params.data);
        if (chromeFix) {
          fixChrome();
        }
        pc.drawQuadWithShader(device, targ, shader2);
        syncToCpu(device, targ, face);
      }
      sourceCubemapRgbm = nextCubemap;
    }
    var unblurredGloss = method === 0 ? 1 : 2048;
    var startPass = method === 0 ? 0 : -1;
    cmapsList[startPass] = [];
    for (i = 0; i < numMips; i++) {
      for (pass = startPass; pass < cmapsList.length; pass++) {
        if (cmapsList[pass] != null) {
          cmapsList[pass][i] = new pc.gfx.Texture(device, {cubemap:true, rgbm:pass < 2 ? rgbmSource : true, format:pass < 2 ? format : pc.PIXELFORMAT_R8_G8_B8_A8, fixCubemapSeams:pass === 1 || pass === 3, width:mipSize[i], height:mipSize[i], mipmaps:false});
        }
      }
    }
    for (pass = startPass; pass < cmapsList.length; pass++) {
      if (cmapsList[pass] != null) {
        if (pass > 1 && rgbmSource) {
          cmapsList[pass] = cmapsList[pass - 2];
          continue;
        }
        for (i = 0; i < numMips; i++) {
          for (face = 0; face < 6; face++) {
            targ = new pc.RenderTarget(device, cmapsList[pass][i], {face:face, depth:false});
            params.x = face;
            params.y = pass < 0 ? unblurredGloss : gloss[i];
            params.z = mipSize[i];
            params.w = rgbmSource ? 3 : pass;
            constantTexSource.setValue(i === 0 ? sourceCubemap : method === 0 ? cmapsList[0][i - 1] : cmapsList[-1][i - 1]);
            constantParams.setValue(params.data);
            if (chromeFix) {
              fixChrome();
            }
            pc.drawQuadWithShader(device, targ, shader);
            if (cpuSync) {
              syncToCpu(device, targ, face);
            }
          }
        }
      }
    }
    options.filtered = cmapsList[0];
    var mips;
    if (cpuSync && options.singleFilteredFixed) {
      mips = [sourceCubemap, options.filteredFixed[0], options.filteredFixed[1], options.filteredFixed[2], options.filteredFixed[3], options.filteredFixed[4], options.filteredFixed[5]];
      cubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:rgbmSource, fixCubemapSeams:true, format:format, width:128, height:128, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});
      for (i = 0; i < 6; i++) {
        cubemap._levels[i] = mips[i]._levels[0];
      }
      cubemap.upload();
      cubemap._prefilteredMips = true;
      options.singleFilteredFixed = cubemap;
    }
    if (cpuSync && options.singleFilteredFixedRgbm && options.filteredFixedRgbm) {
      mips = [sourceCubemapRgbm, options.filteredFixedRgbm[0], options.filteredFixedRgbm[1], options.filteredFixedRgbm[2], options.filteredFixedRgbm[3], options.filteredFixedRgbm[4], options.filteredFixedRgbm[5]];
      cubemap = new pc.gfx.Texture(device, {cubemap:true, rgbm:true, fixCubemapSeams:true, format:pc.PIXELFORMAT_R8_G8_B8_A8, width:128, height:128, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});
      for (i = 0; i < 6; i++) {
        cubemap._levels[i] = mips[i]._levels[0];
      }
      cubemap.upload();
      cubemap._prefilteredMips = true;
      options.singleFilteredFixedRgbm = cubemap;
    }
  }
  function areaElement(x, y) {
    return Math.atan2(x * y, Math.sqrt(x * x + y * y + 1));
  }
  function texelCoordSolidAngle(u, v, size) {
    var _u = 2.0 * (u + 0.5) / size - 1.0;
    var _v = 2.0 * (v + 0.5) / size - 1.0;
    _u *= 1.0 - 1.0 / size;
    _v *= 1.0 - 1.0 / size;
    var invResolution = 1.0 / size;
    var x0 = _u - invResolution;
    var y0 = _v - invResolution;
    var x1 = _u + invResolution;
    var y1 = _v + invResolution;
    var solidAngle = areaElement(x0, y0) - areaElement(x0, y1) - areaElement(x1, y0) + areaElement(x1, y1);
    if (u === 0 && v === 0 || u === size - 1 && v === 0 || u === 0 && v === size - 1 || u === size - 1 && v === size - 1) {
      solidAngle /= 3;
    } else {
      if (u === 0 || v === 0 || u === size - 1 || v === size - 1) {
        solidAngle *= 0.5;
      }
    }
    return solidAngle;
  }
  function shFromCubemap(source, dontFlipX) {
    var face;
    var cubeSize = source.width;
    var x, y;
    if (source.format != pc.PIXELFORMAT_R8_G8_B8_A8) {
      console.error("ERROR: SH: cubemap must be RGBA8");
      return;
    }
    if (!source._levels[0]) {
      console.error("ERROR: SH: cubemap must be synced to CPU");
      return;
    }
    if (!source._levels[0][0].length) {
      if (source._levels[0][0] instanceof HTMLImageElement) {
        var device = pc.Application.getApplication().graphicsDevice;
        var gl = device.gl;
        var chunks = pc.shaderChunks;
        var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.fullscreenQuadPS, "fsQuadSimple");
        var constantTexSource = device.scope.resolve("source");
        for (face = 0; face < 6; face++) {
          var img = source._levels[0][face];
          var tex = new pc.Texture(device, {cubemap:false, rgbm:false, format:source.format, width:cubeSize, height:cubeSize, mipmaps:false});
          tex._levels[0] = img;
          tex.upload();
          var tex2 = new pc.Texture(device, {cubemap:false, rgbm:false, format:source.format, width:cubeSize, height:cubeSize, mipmaps:false});
          var targ = new pc.RenderTarget(device, tex2, {depth:false});
          constantTexSource.setValue(tex);
          pc.drawQuadWithShader(device, targ, shader);
          var pixels = new Uint8Array(cubeSize * cubeSize * 4);
          gl.bindFramebuffer(gl.FRAMEBUFFER, targ._glFrameBuffer);
          gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
          source._levels[0][face] = pixels;
        }
      } else {
        console.error("ERROR: SH: cubemap must be composed of arrays or images");
        return;
      }
    }
    var dirs = [];
    for (y = 0; y < cubeSize; y++) {
      for (x = 0; x < cubeSize; x++) {
        var u = x / (cubeSize - 1) * 2 - 1;
        var v = y / (cubeSize - 1) * 2 - 1;
        dirs[y * cubeSize + x] = (new pc.Vec3(u, v, 1.0)).normalize();
      }
    }
    var sh = new Float32Array(9 * 3);
    var coef1 = 0;
    var coef2 = 1 * 3;
    var coef3 = 2 * 3;
    var coef4 = 3 * 3;
    var coef5 = 4 * 3;
    var coef6 = 5 * 3;
    var coef7 = 6 * 3;
    var coef8 = 7 * 3;
    var coef9 = 8 * 3;
    var nx = 0;
    var px = 1;
    var ny = 2;
    var py = 3;
    var nz = 4;
    var pz = 5;
    var addr, c, a, value, weight, dir, dx, dy, dz;
    var weight1, weight2, weight3, weight4, weight5;
    var accum = 0;
    for (face = 0; face < 6; face++) {
      for (y = 0; y < cubeSize; y++) {
        for (x = 0; x < cubeSize; x++) {
          addr = y * cubeSize + x;
          weight = texelCoordSolidAngle(x, y, cubeSize);
          weight1 = weight * 4 / 17;
          weight2 = weight * 8 / 17;
          weight3 = weight * 15 / 17;
          weight4 = weight * 5 / 68;
          weight5 = weight * 15 / 68;
          dir = dirs[addr];
          if (face == nx) {
            dx = dir.z;
            dy = -dir.y;
            dz = -dir.x;
          } else {
            if (face == px) {
              dx = -dir.z;
              dy = -dir.y;
              dz = dir.x;
            } else {
              if (face == ny) {
                dx = dir.x;
                dy = dir.z;
                dz = dir.y;
              } else {
                if (face == py) {
                  dx = dir.x;
                  dy = -dir.z;
                  dz = -dir.y;
                } else {
                  if (face == nz) {
                    dx = dir.x;
                    dy = -dir.y;
                    dz = dir.z;
                  } else {
                    if (face == pz) {
                      dx = -dir.x;
                      dy = -dir.y;
                      dz = -dir.z;
                    }
                  }
                }
              }
            }
          }
          if (!dontFlipX) {
            dx = -dx;
          }
          a = source._levels[0][face][addr * 4 + 3] / 255.0;
          for (c = 0; c < 3; c++) {
            value = source._levels[0][face][addr * 4 + c] / 255.0;
            if (source.rgbm) {
              value *= a * 8.0;
              value *= value;
            } else {
              value = Math.pow(value, 2.2);
            }
            sh[coef1 + c] += value * weight1;
            sh[coef2 + c] += value * weight2 * dx;
            sh[coef3 + c] += value * weight2 * dy;
            sh[coef4 + c] += value * weight2 * dz;
            sh[coef5 + c] += value * weight3 * dx * dz;
            sh[coef6 + c] += value * weight3 * dz * dy;
            sh[coef7 + c] += value * weight3 * dy * dx;
            sh[coef8 + c] += value * weight4 * (3.0 * dz * dz - 1.0);
            sh[coef9 + c] += value * weight5 * (dx * dx - dy * dy);
            accum += weight;
          }
        }
      }
    }
    for (c = 0; c < sh.length; c++) {
      sh[c] *= 4 * Math.PI / accum;
    }
    return sh;
  }
  return {prefilterCubemap:prefilterCubemap, shFromCubemap:shFromCubemap};
}());
pc.extend(pc, function() {
  var dpMult = 2.0;
  function paraboloidFromCubemap(device, sourceCubemap, fixSeamsAmount, dontFlipX) {
    var chunks = pc.shaderChunks;
    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, (sourceCubemap.fixCubemapSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS) + chunks.genParaboloidPS, "genParaboloid");
    var constantTexSource = device.scope.resolve("source");
    var constantParams = device.scope.resolve("params");
    var params = new pc.Vec4;
    var size = sourceCubemap.width;
    var rgbmSource = sourceCubemap.rgbm;
    var format = sourceCubemap.format;
    size = Math.max(size, 8) * dpMult;
    var tex = new pc.gfx.Texture(device, {rgbm:rgbmSource, format:format, width:size * 2, height:size, mipmaps:false});
    var targ = new pc.RenderTarget(device, tex, {depth:false});
    params.x = fixSeamsAmount;
    params.y = dontFlipX ? -1.0 : 1.0;
    constantTexSource.setValue(sourceCubemap);
    constantParams.setValue(params.data);
    pc.drawQuadWithShader(device, targ, shader);
    return tex;
  }
  function getDpAtlasRect(rect, mip) {
    rect.x = pc.math.clamp(mip - 2.0, 0, 1) * 0.5;
    var t = mip - rect.x * 6.0;
    var i = 1.0 - rect.x;
    rect.y = Math.min(t * 0.5, 0.75) * i + rect.x;
    rect.z = (1.0 - pc.math.clamp(t, 0, 1) * 0.5) * i;
    rect.w = rect.z * 0.5;
    return 1.0 / rect.z;
  }
  function generateDpAtlas(device, sixCubemaps, dontFlipX) {
    var dp, rect;
    rect = new pc.Vec4;
    var params = new pc.Vec4;
    var size = sixCubemaps[0].width * 2 * dpMult;
    var chunks = pc.shaderChunks;
    var shader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, chunks.dpAtlasQuadPS, "dpAtlasQuad");
    var constantTexSource = device.scope.resolve("source");
    var constantParams = device.scope.resolve("params");
    var tex = new pc.gfx.Texture(device, {rgbm:sixCubemaps[0].rgbm, format:sixCubemaps[0].format, width:size, height:size, mipmaps:false});
    var targ = new pc.RenderTarget(device, tex, {depth:false});
    var borderSize = 2;
    var mip0Width = size;
    var scaleFactor = (mip0Width + borderSize) / mip0Width - 1;
    var scaleAmount;
    for (var i = 0; i < 6; i++) {
      dp = pc.paraboloidFromCubemap(device, sixCubemaps[i], i, dontFlipX);
      constantTexSource.setValue(dp);
      scaleAmount = getDpAtlasRect(rect, i);
      params.x = scaleAmount * scaleFactor;
      params.y = params.x * 2;
      params.x += 1;
      params.y += 1;
      constantParams.setValue(params.data);
      rect.x *= size;
      rect.y *= size;
      rect.z *= size;
      rect.w *= size;
      pc.drawQuadWithShader(device, targ, shader, rect);
    }
    return tex;
  }
  return {paraboloidFromCubemap:paraboloidFromCubemap, generateDpAtlas:generateDpAtlas};
}());
pc.shaderChunks.alphaTestPS = "uniform float alpha_ref;\nvoid alphaTest(float a) {\n    if (a < alpha_ref) discard;\n}\n";
pc.shaderChunks.ambientConstantPS = "\nvoid addAmbient() {\n    dDiffuseLight += light_globalAmbient;\n}\n";
pc.shaderChunks.ambientPrefilteredCubePS = "#ifndef PMREM4\n#define PMREM4\nuniform samplerCube texture_prefilteredCubeMap4;\n#endif\nvoid addAmbient() {\n    vec3 fixedReflDir = fixSeamsStatic(dNormalW, 1.0 - 1.0 / 4.0);\n    fixedReflDir.x *= -1.0;\n    dDiffuseLight += processEnvironment($DECODE(textureCube(texture_prefilteredCubeMap4, fixedReflDir)).rgb);\n}\n";
pc.shaderChunks.ambientPrefilteredCubeLodPS = "#ifndef PMREM4\n#define PMREM4\n#extension GL_EXT_shader_texture_lod : enable\nuniform samplerCube texture_prefilteredCubeMap128;\n#endif\nvoid addAmbient() {\n    vec3 fixedReflDir = fixSeamsStatic(dNormalW, 1.0 - 1.0 / 4.0);\n    fixedReflDir.x *= -1.0;\n    dDiffuseLight += processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, 5.0) ).rgb);\n}\n";
pc.shaderChunks.ambientSHPS = "uniform vec3 ambientSH[9];\nvoid addAmbient() {\n    vec3 n = dNormalW;\n    vec3 color =\n                        ambientSH[0] +\n                        ambientSH[1] * n.x +\n                        ambientSH[2] * n.y +\n                        ambientSH[3] * n.z +\n                        ambientSH[4] * n.x * n.z +\n                        ambientSH[5] * n.z * n.y +\n                        ambientSH[6] * n.y * n.x +\n                        ambientSH[7] * (3.0 * n.z * n.z - 1.0) +\n                        ambientSH[8] * (n.x * n.x - n.y * n.y);\n    dDiffuseLight += processEnvironment(max(color, vec3(0.0)));\n}\n";
pc.shaderChunks.aoPS = "#ifdef MAPTEXTURE\nuniform sampler2D texture_aoMap;\n#endif\nvoid applyAO() {\n    dAo = 1.0;\n    #ifdef MAPTEXTURE\n        dAo *= texture2D(texture_aoMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        dAo *= saturate(vVertexColor.$VC);\n    #endif\n    dDiffuseLight *= dAo;\n}\n";
pc.shaderChunks.aoSpecOccPS = "uniform float material_occludeSpecularIntensity;\nvoid occludeSpecular() {\n    // approximated specular occlusion from AO\n    float specPow = exp2(dGlossiness * 11.0);\n    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx\n    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\n    specOcc = mix(1.0, specOcc, material_occludeSpecularIntensity);\n    dSpecularLight *= specOcc;\n    dReflection *= specOcc;\n}\n";
pc.shaderChunks.aoSpecOccConstPS = "void occludeSpecular() {\n    // approximated specular occlusion from AO\n    float specPow = exp2(dGlossiness * 11.0);\n    // http://research.tri-ace.com/Data/cedec2011_RealtimePBR_Implementation_e.pptx\n    float specOcc = saturate(pow(dot(dNormalW, dViewDirW) + dAo, 0.01*specPow) - 1.0 + dAo);\n    dSpecularLight *= specOcc;\n    dReflection *= specOcc;\n}\n";
pc.shaderChunks.aoSpecOccConstSimplePS = "void occludeSpecular() {\n    float specOcc = dAo;\n    dSpecularLight *= specOcc;\n    dReflection *= specOcc;\n}\n";
pc.shaderChunks.aoSpecOccSimplePS = "uniform float material_occludeSpecularIntensity;\nvoid occludeSpecular() {\n    float specOcc = mix(1.0, dAo, material_occludeSpecularIntensity);\n    dSpecularLight *= specOcc;\n    dReflection *= specOcc;\n}\n";
pc.shaderChunks.bakeDirLmEndPS = "\n    vec4 dirLm = texture2D(texture_dirLightMap, vUv1);\n    if (bakeDir > 0.5) {\n        if (dAtten > 0.00001) {\n            dirLm.xyz = dirLm.xyz * 2.0 - vec3(1.0);\n            dAtten = saturate(dAtten);\n            gl_FragColor.rgb = normalize(dLightDirNormW.xyz*dAtten + dirLm.xyz*dirLm.w) * 0.5 + vec3(0.5);\n            gl_FragColor.a = dirLm.w + dAtten;\n            gl_FragColor.a = max(gl_FragColor.a, 1.0 / 255.0);\n        } else {\n            gl_FragColor = dirLm;\n        }\n    } else {\n        gl_FragColor.rgb = dirLm.xyz;\n        gl_FragColor.a = max(dirLm.w, dAtten > 0.00001? (1.0/255.0) : 0.0);\n    }\n";
pc.shaderChunks.bakeLmEndPS = "\ngl_FragColor.rgb = dDiffuseLight;\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(0.5));\ngl_FragColor.rgb /= 8.0;\ngl_FragColor.a = clamp( max( max( gl_FragColor.r, gl_FragColor.g ), max( gl_FragColor.b, 1.0 / 255.0 ) ), 0.0,1.0 );\ngl_FragColor.a = ceil(gl_FragColor.a * 255.0) / 255.0;\ngl_FragColor.rgb /= gl_FragColor.a;\n";
pc.shaderChunks.basePS = "\nuniform vec3 view_position;\nuniform vec3 light_globalAmbient;\nfloat square(float x) {\n    return x*x;\n}\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\nvec3 saturate(vec3 x) {\n    return clamp(x, vec3(0.0), vec3(1.0));\n}\n";
pc.shaderChunks.baseVS = "\nattribute vec3 vertex_position;\nattribute vec3 vertex_normal;\nattribute vec4 vertex_tangent;\nattribute vec2 vertex_texCoord0;\nattribute vec2 vertex_texCoord1;\nattribute vec4 vertex_color;\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\nuniform mat3 matrix_normal;\nvec3 dPositionW;\nmat4 dModelMatrix;\nmat3 dNormalMatrix;\nvec3 dLightPosW;\nvec3 dLightDirNormW;\nvec3 dNormalW;\n";
pc.shaderChunks.biasConstPS = "#define SHADOWBIAS\nfloat getShadowBias(float resolution, float maxBias) {\n    return maxBias;\n}\n";
pc.shaderChunks.blurVSMPS = "\nvarying vec2 vUv0;\nuniform sampler2D source;\nuniform vec2 pixelOffset;\n#ifdef GAUSS\nuniform float weight[SAMPLES];\n#endif\n#ifdef PACKED\nfloat decodeFloatRG(vec2 rg) {\n    return rg.y*(1.0/255.0) + rg.x;\n}\nvec2 encodeFloatRG( float v ) {\n  vec2 enc = vec2(1.0, 255.0) * v;\n  enc = fract(enc);\n  enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n  return enc;\n}\n#endif\nvoid main(void) {\n    vec3 moments = vec3(0.0);\n    vec2 uv = vUv0 - pixelOffset * (float(SAMPLES) * 0.5);\n    for(int i=0; i<SAMPLES; i++) {\n        vec4 c = texture2D(source, uv + pixelOffset * float(i));\n        #ifdef PACKED\n        c.xy = vec2(decodeFloatRG(c.xy), decodeFloatRG(c.zw));\n        #endif\n        #ifdef GAUSS\n        moments += c.xyz * weight[i];\n        #else\n        moments += c.xyz;\n        #endif\n    }\n    #ifndef GAUSS\n    moments /= float(SAMPLES);\n    #endif\n    #ifdef PACKED\n    gl_FragColor = vec4(encodeFloatRG(moments.x), encodeFloatRG(moments.y));\n    #else\n    gl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);\n    #endif\n}\n";
pc.shaderChunks.combineDiffusePS = "vec3 combineColor() {\n    return dAlbedo * dDiffuseLight;\n}\n";
pc.shaderChunks.combineDiffuseSpecularPS = "vec3 combineColor() {\n    return mix(dAlbedo * dDiffuseLight, dSpecularLight + dReflection.rgb * dReflection.a, dSpecularity);\n}\n";
pc.shaderChunks.combineDiffuseSpecularNoConservePS = "vec3 combineColor() {\n    return dAlbedo * dDiffuseLight + (dSpecularLight + dReflection.rgb * dReflection.a) * dSpecularity;\n}\n";
pc.shaderChunks.combineDiffuseSpecularNoReflPS = "vec3 combineColor() {\n    return dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity;\n}\n";
pc.shaderChunks.combineDiffuseSpecularNoReflSeparateAmbientPS = "uniform vec3 material_ambient;\nvec3 combineColor() {\n    return (dDiffuseLight - light_globalAmbient) * dAlbedo + dSpecularLight * dSpecularity + material_ambient * light_globalAmbient;\n}\n";
pc.shaderChunks.combineDiffuseSpecularOldPS = "vec3 combineColor() {\n    return mix(dAlbedo * dDiffuseLight + dSpecularLight * dSpecularity, dReflection.rgb, dReflection.a);\n}\n";
pc.shaderChunks.cookiePS = "vec4 getCookie2D(sampler2D tex, mat4 transform, float intensity) {\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\n    projPos.xy /= projPos.w;\n    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\n}\nvec4 getCookie2DClip(sampler2D tex, mat4 transform, float intensity) {\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\n    projPos.xy /= projPos.w;\n    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\n    return mix(vec4(1.0), texture2D(tex, projPos.xy), intensity);\n}\nvec4 getCookie2DXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\n    projPos.xy /= projPos.w;\n    projPos.xy += cookieOffset;\n    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\n    return mix(vec4(1.0), texture2D(tex, uv), intensity);\n}\nvec4 getCookie2DClipXform(sampler2D tex, mat4 transform, float intensity, vec4 cookieMatrix, vec2 cookieOffset) {\n    vec4 projPos = transform * vec4(vPositionW, 1.0);\n    projPos.xy /= projPos.w;\n    projPos.xy += cookieOffset;\n    if (projPos.x < 0.0 || projPos.x > 1.0 || projPos.y < 0.0 || projPos.y > 1.0 || projPos.z < 0.0) return vec4(0.0);\n    vec2 uv = mat2(cookieMatrix) * (projPos.xy-vec2(0.5)) + vec2(0.5);\n    return mix(vec4(1.0), texture2D(tex, uv), intensity);\n}\nvec4 getCookieCube(samplerCube tex, mat4 transform, float intensity) {\n    return mix(vec4(1.0), textureCube(tex, dLightDirNormW * mat3(transform)), intensity);\n}\n";
pc.shaderChunks.cubeMapProjectBoxPS = "uniform vec3 envBoxMin, envBoxMax;\nvec3 cubeMapProject(vec3 nrdir) {\n    vec3 rbmax = (envBoxMax - vPositionW) / nrdir;\n    vec3 rbmin = (envBoxMin - vPositionW) / nrdir;\n    vec3 rbminmax;\n    rbminmax.x = nrdir.x>0.0? rbmax.x : rbmin.x;\n    rbminmax.y = nrdir.y>0.0? rbmax.y : rbmin.y;\n    rbminmax.z = nrdir.z>0.0? rbmax.z : rbmin.z;\n    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\n    vec3 posonbox = vPositionW + nrdir * fa;\n    vec3 envBoxPos = (envBoxMin + envBoxMax) * 0.5;\n    return posonbox - envBoxPos;\n}\n";
pc.shaderChunks.cubeMapProjectNonePS = "vec3 cubeMapProject(vec3 dir) {\n    return dir;\n}\n";
pc.shaderChunks.diffusePS = "#ifdef MAPCOLOR\nuniform vec3 material_diffuse;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_diffuseMap;\n#endif\nvoid getAlbedo() {\n    dAlbedo = vec3(1.0);\n    #ifdef MAPCOLOR\n        dAlbedo *= material_diffuse.rgb;\n    #endif\n    #ifdef MAPTEXTURE\n        dAlbedo *= texture2DSRGB(texture_diffuseMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        dAlbedo *= gammaCorrectInput(saturate(vVertexColor.$VC));\n    #endif\n}\n";
pc.shaderChunks.dilatePS = "varying vec2 vUv0;\nuniform sampler2D source;\nuniform vec2 pixelOffset;\nvoid main(void) {\n    vec4 c = texture2D(source, vUv0);\n    c = c.a>0.0? c : texture2D(source, vUv0 - pixelOffset);\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, -pixelOffset.y));\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, -pixelOffset.y));\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, 0));\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(pixelOffset.x, 0));\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(-pixelOffset.x, pixelOffset.y));\n    c = c.a>0.0? c : texture2D(source, vUv0 + vec2(0, pixelOffset.y));\n    c = c.a>0.0? c : texture2D(source, vUv0 + pixelOffset);\n    gl_FragColor = c;\n}\n";
pc.shaderChunks.dpAtlasQuadPS = "varying vec2 vUv0;\nuniform sampler2D source;\nuniform vec4 params;\nvoid main(void) {\n    vec2 uv = vUv0;\n    uv = uv * 2.0 - vec2(1.0);\n    uv *= params.xy;\n    uv = uv * 0.5 + 0.5;\n    gl_FragColor = texture2D(source, uv);\n}\n";
pc.shaderChunks.emissivePS = "#ifdef MAPCOLOR\nuniform vec3 material_emissive;\n#endif\n#ifdef MAPFLOAT\nuniform float material_emissiveIntensity;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_emissiveMap;\n#endif\nvec3 getEmission() {\n    vec3 emission = vec3(1.0);\n    #ifdef MAPFLOAT\n        emission *= material_emissiveIntensity;\n    #endif\n    #ifdef MAPCOLOR\n        emission *= material_emissive;\n    #endif\n    #ifdef MAPTEXTURE\n        emission *= $texture2DSAMPLE(texture_emissiveMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        emission *= gammaCorrectInput(saturate(vVertexColor.$VC));\n    #endif\n    return emission;\n}\n";
pc.shaderChunks.endPS = "   gl_FragColor.rgb = combineColor();\n   gl_FragColor.rgb += getEmission();\n   gl_FragColor.rgb = addFog(gl_FragColor.rgb);\n   #ifndef HDR\n    gl_FragColor.rgb = toneMap(gl_FragColor.rgb);\n    gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);\n   #endif\n";
pc.shaderChunks.envConstPS = "vec3 processEnvironment(vec3 color) {\n    return color;\n}\n";
pc.shaderChunks.envMultiplyPS = "uniform float skyboxIntensity;\nvec3 processEnvironment(vec3 color) {\n    return color * skyboxIntensity;\n}\n";
pc.shaderChunks.extensionPS = "";
pc.shaderChunks.extensionVS = "\n";
pc.shaderChunks.falloffInvSquaredPS = "float getFalloffInvSquared(float lightRadius) {\n    float sqrDist = dot(dLightDirW, dLightDirW);\n    float falloff = 1.0 / (sqrDist + 1.0);\n    float invRadius = 1.0 / lightRadius;\n    falloff *= 16.0;\n    falloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\n    return falloff;\n}\n";
pc.shaderChunks.falloffLinearPS = "float getFalloffLinear(float lightRadius) {\n    float d = length(dLightDirW);\n    return max(((lightRadius - d) / lightRadius), 0.0);\n}\n";
pc.shaderChunks.fixCubemapSeamsNonePS = "vec3 fixSeams(vec3 vec, float mipmapIndex) {\n    return vec;\n}\nvec3 fixSeams(vec3 vec) {\n    return vec;\n}\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\n    return vec;\n}\n";
pc.shaderChunks.fixCubemapSeamsStretchPS = "vec3 fixSeams(vec3 vec, float mipmapIndex) {\n    float scale = 1.0 - exp2(mipmapIndex) / 128.0;\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n    if (abs(vec.x) != M) vec.x *= scale;\n    if (abs(vec.y) != M) vec.y *= scale;\n    if (abs(vec.z) != M) vec.z *= scale;\n    return vec;\n}\nvec3 fixSeams(vec3 vec) {\n    float scale = 1.0 - 1.0 / 128.0;\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n    if (abs(vec.x) != M) vec.x *= scale;\n    if (abs(vec.y) != M) vec.y *= scale;\n    if (abs(vec.z) != M) vec.z *= scale;\n    return vec;\n}\nvec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {\n    float scale = invRecMipSize;\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n    if (abs(vec.x) != M) vec.x *= scale;\n    if (abs(vec.y) != M) vec.y *= scale;\n    if (abs(vec.z) != M) vec.z *= scale;\n    return vec;\n}\n";
pc.shaderChunks.fogExpPS = "uniform vec3 fog_color;\nuniform float fog_density;\nvec3 addFog(vec3 color) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = exp(-depth * fog_density);\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\n    return mix(fog_color, color, fogFactor);\n}\n";
pc.shaderChunks.fogExp2PS = "uniform vec3 fog_color;\nuniform float fog_density;\nvec3 addFog(vec3 color) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = exp(-depth * depth * fog_density * fog_density);\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\n    return mix(fog_color, color, fogFactor);\n}\n";
pc.shaderChunks.fogLinearPS = "uniform vec3 fog_color;\nuniform float fog_start;\nuniform float fog_end;\nvec3 addFog(vec3 color) {\n    float depth = gl_FragCoord.z / gl_FragCoord.w;\n    float fogFactor = (fog_end - depth) / (fog_end - fog_start);\n    fogFactor = clamp(fogFactor, 0.0, 1.0);\n    fogFactor = gammaCorrectInput(fogFactor);\n    return mix(fog_color, color, fogFactor);\n}\n";
pc.shaderChunks.fogNonePS = "vec3 addFog(vec3 color) {\n    return color;\n}\n";
pc.shaderChunks.fresnelSchlickPS = "// Schlick's approximation\nuniform float material_fresnelFactor; // unused\nvoid getFresnel() {\n    float fresnel = 1.0 - max(dot(dNormalW, dViewDirW), 0.0);\n    float fresnel2 = fresnel * fresnel;\n    fresnel *= fresnel2 * fresnel2;\n    fresnel *= dGlossiness * dGlossiness;\n    dSpecularity = dSpecularity + (1.0 - dSpecularity) * fresnel;\n}\n";
pc.shaderChunks.fullscreenQuadPS = "varying vec2 vUv0;\nuniform sampler2D source;\nvoid main(void) {\n    gl_FragColor = texture2D(source, vUv0);\n}\n";
pc.shaderChunks.fullscreenQuadVS = "attribute vec2 vertex_position;\nvarying vec2 vUv0;\nvoid main(void)\n{\n    gl_Position = vec4(vertex_position, 0.5, 1.0);\n    vUv0 = vertex_position.xy*0.5+0.5;\n}\n";
pc.shaderChunks.gamma1_0PS = "vec4 texture2DSRGB(sampler2D tex, vec2 uv) {\n    return texture2D(tex, uv);\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\n    return texture2D(tex, uv, bias);\n}\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\n    return textureCube(tex, uvw);\n}\nvec3 gammaCorrectOutput(vec3 color) {\n    return color;\n}\nvec3 gammaCorrectInput(vec3 color) {\n    return color;\n}\nfloat gammaCorrectInput(float color) {\n    return color;\n}\nvec4 gammaCorrectInput(vec4 color) {\n    return color;\n}\n";
pc.shaderChunks.gamma2_2PS = "vec3 gammaCorrectInput(vec3 color) {\n    return pow(color, vec3(2.2));\n}\nfloat gammaCorrectInput(float color) {\n    return pow(color, 2.2);\n}\nvec4 gammaCorrectInput(vec4 color) {\n    return vec4(pow(color.rgb, vec3(2.2)), color.a);\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv) {\n    vec4 rgba = texture2D(tex, uv);\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\n    return rgba;\n}\nvec4 texture2DSRGB(sampler2D tex, vec2 uv, float bias) {\n    vec4 rgba = texture2D(tex, uv, bias);\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\n    return rgba;\n}\nvec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {\n    vec4 rgba = textureCube(tex, uvw);\n    rgba.rgb = gammaCorrectInput(rgba.rgb);\n    return rgba;\n}\nvec3 gammaCorrectOutput(vec3 color) {\n#ifdef HDR\n    return color;\n#else\n    color += vec3(0.0000001);\n    return pow(color, vec3(0.45));\n#endif\n}\n";
pc.shaderChunks.genParaboloidPS = "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params; // x = mip\nvoid main(void) {\n    vec2 uv = vUv0;\n    float side = uv.x < 0.5? 1.0 : -1.0;\n    vec2 tc;\n    tc.x = fract(uv.x * 2.0) * 2.0 - 1.0;\n    tc.y = uv.y * 2.0 - 1.0;\n    // scale projection a bit to have a little overlap for filtering\n    const float scale = 1.1;\n    tc *= scale;\n    vec3 dir;\n    dir.y = (dot(tc, tc) - 1.0) * side; // from 1.0 center to 0.0 borders quadratically\n    dir.xz = tc * -2.0;\n    dir.x *= -side * params.y; // flip original cubemap x instead of doing it at runtime\n    dir = fixSeams(dir, params.x);\n    vec4 color = textureCube(source, dir, -100.0);\n    gl_FragColor = color;\n}\n";
pc.shaderChunks.gles3PS = "#define varying in\nout highp vec4 pc_fragColor;\n#define gl_FragColor pc_fragColor\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad\n#define GL2\n";
pc.shaderChunks.gles3VS = "#define attribute in\n#define varying out\n#define texture2D texture\n#define GL2\n#define VERTEXSHADER\n";
pc.shaderChunks.glossPS = "#ifdef MAPFLOAT\nuniform float material_shininess;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_glossMap;\n#endif\nvoid getGlossiness() {\n    dGlossiness = 1.0;\n    #ifdef MAPFLOAT\n        dGlossiness *= material_shininess;\n    #endif\n    #ifdef MAPTEXTURE\n        dGlossiness *= texture2D(texture_glossMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        dGlossiness *= saturate(vVertexColor.$VC);\n    #endif\n    dGlossiness += 0.0000001;\n}\n";
pc.shaderChunks.instancingVS = "\nattribute vec4 instance_line1;\nattribute vec4 instance_line2;\nattribute vec4 instance_line3;\nattribute vec4 instance_line4;\n";
pc.shaderChunks.lightDiffuseLambertPS = "float getLightDiffuse() {\n    return max(dot(dNormalW, -dLightDirNormW), 0.0);\n}\n";
pc.shaderChunks.lightDirPointPS = "void getLightDirPoint(vec3 lightPosW) {\n    dLightDirW = vPositionW - lightPosW;\n    dLightDirNormW = normalize(dLightDirW);\n    dLightPosW = lightPosW;\n}\n";
pc.shaderChunks.lightmapDirPS = "uniform sampler2D texture_lightMap;\nuniform sampler2D texture_dirLightMap;\nvoid addLightMap() {\n    vec3 color = $texture2DSAMPLE(texture_lightMap, $UV).$CH;\n    vec4 dir = texture2D(texture_dirLightMap, $UV);\n    if (dot(dir.xyz,vec3(1.0)) < 0.00001) {\n        dDiffuseLight += color;\n        return;\n    }\n    dLightDirNormW = normalize(dir.xyz * 2.0 - vec3(1.0));\n    float vlight = saturate(dot(dLightDirNormW, -dVertexNormalW));\n    float flight = saturate(dot(dLightDirNormW, -dNormalW));\n    float nlight = (flight / max(vlight,0.01)) * 0.5;\n    dDiffuseLight += color * nlight * 2.0;\n}\nvoid addDirLightMap() {\n    vec4 dir = texture2D(texture_dirLightMap, $UV);\n    if (dot(dir.xyz,vec3(1.0)) < 0.00001) return;\n    vec3 color = $texture2DSAMPLE(texture_lightMap, $UV).$CH;\n    dLightDirNormW = normalize(dir.xyz * 2.0 - vec3(1.0));\n    dSpecularLight += vec3(getLightSpecular()) * color;\n}\n";
pc.shaderChunks.lightmapSinglePS = "#ifdef MAPTEXTURE\nuniform sampler2D texture_lightMap;\n#endif\nvoid addLightMap() {\n    vec3 lm = vec3(1.0);\n    #ifdef MAPTEXTURE\n        lm *= $texture2DSAMPLE(texture_lightMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        lm *= saturate(vVertexColor.$VC);\n    #endif\n    \n    dDiffuseLight += lm;\n}\n";
pc.shaderChunks.lightmapSingleVertPS = "void addLightMap() {\n    dDiffuseLight += saturate(vVertexColor.$CH);\n}\n";
pc.shaderChunks.lightSpecularBlinnPS = "// Energy-conserving (hopefully) Blinn-Phong\nfloat getLightSpecular() {\n    vec3 h = normalize( -dLightDirNormW + dViewDirW );\n    float nh = max( dot( h, dNormalW ), 0.0 );\n    float specPow = exp2(dGlossiness * 11.0); // glossiness is linear, power is not; 0 - 2048\n    specPow = antiAliasGlossiness(specPow);\n    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little\n    specPow = max(specPow, 0.0001);\n    return pow(nh, specPow) * (specPow + 2.0) / 8.0;\n}\n";
pc.shaderChunks.lightSpecularPhongPS = "float getLightSpecular() {\n    float specPow = dGlossiness;\n    specPow = antiAliasGlossiness(specPow);\n    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little\n    return pow(max(dot(dReflDirW, -dLightDirNormW), 0.0), specPow + 0.0001);\n}\n";
pc.shaderChunks.metalnessPS = "void processMetalness(float metalness) {\n    const float dielectricF0 = 0.04;\n    dSpecularity = mix(vec3(dielectricF0), dAlbedo, metalness);\n    dAlbedo *= 1.0 - metalness;\n}\n#ifdef MAPFLOAT\nuniform float material_metalness;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_metalnessMap;\n#endif\nvoid getSpecularity() {\n    float metalness = 1.0;\n    #ifdef MAPFLOAT\n        metalness *= material_metalness;\n    #endif\n    #ifdef MAPTEXTURE\n        metalness *= texture2D(texture_metalnessMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        metalness *= saturate(vVertexColor.$VC);\n    #endif\n    processMetalness(metalness);\n}\n";
pc.shaderChunks.msdfPS = "uniform sampler2D texture_msdfMap;\n#ifdef GL_OES_standard_derivatives\n#define USE_FWIDTH\n#endif\n#ifdef GL2\n#define USE_FWIDTH\n#endif\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\nfloat map (float min, float max, float v) {\n    return (v - min) / (max - min);\n}\n// msdf way\n// vec4 applyMsdf(vec4 color) {\n//     vec3 tsample = texture(texture_msdfMap, vUv0).rgb;\n   \n//     // separate\n//     vec2 msdfUnit = 4.0 / vec2(512.0, 256.0);\n//     float sigDist = median(tsample.r, tsample.g, tsample.b) - 0.5;\n//     sigDist *= dot(msdfUnit, 0.5/fwidth(vUv0));\n//     float distance = clamp(sigDist + 0.5, 0.0, 1.0);\n//     return mix(vec4(0.0), color, distance);\n// }\nuniform float font_sdfIntensity; // intensity is used to boost the value read from the SDF, 0 is no boost, 1.0 is max boost\nuniform float font_pxrange;      // the number of pixels between inside and outside the font in SDF\nuniform float font_textureWidth; // the width of the texture atlas\nvec4 applyMsdf(vec4 color) {\n    float font_size = 16.0; // TODO fix this\n    // sample the field\n    vec3 tsample = texture2D(texture_msdfMap, vUv0).rgb;\n    // get the signed distance value\n    float sigDist = median(tsample.r, tsample.g, tsample.b);\n    #ifdef USE_FWIDTH\n        // smoothing depends on size of texture on screen\n        vec2 w = fwidth(vUv0);\n        float smoothing = clamp(map(0.0, 2.0 * font_pxrange / font_textureWidth, w.x), 0.0, 0.5);\n    #else\n        // smoothing gets smaller as the font size gets bigger\n        // don't have fwidth we can approximate from font size, this doesn't account for scaling\n        // so a big font scaled down will be wrong...\n        float smoothing = clamp(2.0 * font_pxrange / font_size, 0.0, 0.5);\n        // for small fonts we remap the distance field to intensify it\n        // float mapMin = 0.05;\n        // float mapMax = clamp(((font_size * 0.4 / 40.0) + 0.52), mapMin, 1.0);\n    #endif\n    float mapMin = 0.05;\n    float mapMax = clamp(1.0 - font_sdfIntensity, mapMin, 1.0);\n    \n    // remap to a smaller range (used on smaller font sizes)\n    sigDist = map(mapMin, mapMax, sigDist);\n    float center = 0.5;\n    // calculate smoothing and use to generate opacity\n    // float smoothing = clamp(font_smoothing * (1.0-roy), 0.0, center);\n    float opacity = smoothstep(center-smoothing, center+smoothing, sigDist);\n    // return final color\n    return mix(vec4(0.0), color, opacity);\n}";
pc.shaderChunks.normalVS = "vec3 getNormal() {\n    #ifdef SKIN\n        dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\n    #elif defined(INSTANCING)\n        dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\n    #else\n        dNormalMatrix = matrix_normal;\n    #endif\n    return normalize(dNormalMatrix * vertex_normal);\n}\n";
pc.shaderChunks.normalInstancedVS = "vec3 getNormal() {\n    dNormalMatrix = mat3(instance_line1.xyz, instance_line2.xyz, instance_line3.xyz);\n    return normalize(dNormalMatrix * vertex_normal);\n}\n";
pc.shaderChunks.normalMapPS = "uniform sampler2D texture_normalMap;\nuniform float material_bumpiness;\nvoid getNormal() {\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\n    dNormalMap = normalMap;\n    dNormalW = dTBN * normalMap;\n}\n";
pc.shaderChunks.normalMapFloatPS = "uniform sampler2D texture_normalMap;\nuniform float material_bumpiness;\nvoid getNormal() {\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\n    dNormalMap = normalMap;\n    normalMap = normalize(mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness));\n    dNormalW = dTBN * normalMap;\n}\n";
pc.shaderChunks.normalMapFloatTBNfastPS = "uniform sampler2D texture_normalMap;\nuniform float material_bumpiness;\nvoid getNormal() {\n    vec3 normalMap = unpackNormal(texture2D(texture_normalMap, $UV));\n    dNormalMap = normalMap;\n    normalMap = mix(vec3(0.0, 0.0, 1.0), normalMap, material_bumpiness);\n    dNormalW = normalize(dTBN * normalMap);\n}\n";
pc.shaderChunks.normalSkinnedVS = "vec3 getNormal() {\n    dNormalMatrix = mat3(dModelMatrix[0].xyz, dModelMatrix[1].xyz, dModelMatrix[2].xyz);\n    return normalize(dNormalMatrix * vertex_normal);\n}\n";
pc.shaderChunks.normalVertexPS = "void getNormal() {\n    dNormalW = normalize(dVertexNormalW);\n}\n";
pc.shaderChunks.normalXYPS = "vec3 unpackNormal(vec4 nmap) {\n    vec3 normal;\n    normal.xy = nmap.wy * 2.0 - 1.0;\n    normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));\n    return normal;\n}\n";
pc.shaderChunks.normalXYZPS = "vec3 unpackNormal(vec4 nmap) {\n    return nmap.xyz * 2.0 - 1.0;\n}\n";
pc.shaderChunks.opacityPS = "#ifdef MAPFLOAT\nuniform float material_opacity;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_opacityMap;\n#endif\nvoid getOpacity() {\n    dAlpha = 1.0;\n    #ifdef MAPFLOAT\n        dAlpha *= material_opacity;\n    #endif\n    #ifdef MAPTEXTURE\n        dAlpha *= texture2D(texture_opacityMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        dAlpha *= saturate(vVertexColor.$VC);\n    #endif\n}\n";
pc.shaderChunks.outputAlphaPS = "gl_FragColor.a = dAlpha;\n";
pc.shaderChunks.outputAlphaOpaquePS = "gl_FragColor.a = 1.0;\n";
pc.shaderChunks.outputAlphaPremulPS = "gl_FragColor.rgb *= dAlpha;\ngl_FragColor.a = dAlpha;\n";
pc.shaderChunks.outputCubemapPS = "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params;\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\nvec4 encodeRGBM(vec4 color) { // modified RGBM\n    color.rgb = pow(color.rgb, vec3(0.5));\n    color.rgb *= 1.0 / 8.0;\n    color.a = saturate( max( max( color.r, color.g ), max( color.b, 1.0 / 255.0 ) ) );\n    color.a = ceil(color.a * 255.0) / 255.0;\n    color.rgb /= color.a;\n    return color;\n}\nvoid main(void) {\n    vec2 st = vUv0 * 2.0 - 1.0;\n    float face = params.x;\n    vec3 vec;\n    if (face==0.0) {\n        vec = vec3(1, -st.y, -st.x);\n    } else if (face==1.0) {\n        vec = vec3(-1, -st.y, st.x);\n    } else if (face==2.0) {\n        vec = vec3(st.x, 1, st.y);\n    } else if (face==3.0) {\n        vec = vec3(st.x, -1, -st.y);\n    } else if (face==4.0) {\n        vec = vec3(st.x, -st.y, 1);\n    } else {\n        vec = vec3(-st.x, -st.y, -1);\n    }\n    gl_FragColor = textureCube(source, vec);\n    if (params.w >= 2.0) gl_FragColor = encodeRGBM(gl_FragColor);\n}\n";
pc.shaderChunks.outputTex2DPS = "varying vec2 vUv0;\nuniform sampler2D source;\nvoid main(void) {\n    gl_FragColor = texture2D(source, vUv0);\n}\n";
pc.shaderChunks.packDepthPS = "// Packing a float in GLSL with multiplication and mod\n// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement\nvec4 packFloat(float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n    return res;\n}\n";
pc.shaderChunks.packDepthMaskPS = "vec4 packFloat(float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res.x = 0.0;\n    res -= res.xxyz * bit_mask;\n    return res;\n}\n";
pc.shaderChunks.parallaxPS = "uniform sampler2D texture_heightMap;\nuniform float material_heightMapFactor;\nvoid getParallax() {\n    float parallaxScale = material_heightMapFactor;\n    float height = texture2D(texture_heightMap, $UV).$CH;\n    height = height * parallaxScale - parallaxScale*0.5;\n    vec3 viewDirT = dViewDirW * dTBN;\n    viewDirT.z += 0.42;\n    dUvOffset = height * (viewDirT.xy / viewDirT.z);\n}\n";
pc.shaderChunks.particlePS = "varying vec4 texCoordsAlphaLife;\nuniform sampler2D colorMap;\nuniform sampler2D internalTex3;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params;\n#endif\nuniform float softening;\nuniform float colorMult;\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    float depth = dot(rgbaDepth, bitShift);\n    return depth;\n}\n#endif\nvoid main(void) {\n    vec4 tex         = texture2DSRGB(colorMap, texCoordsAlphaLife.xy);\n    vec4 ramp     = texture2DSRGB(internalTex3, vec2(texCoordsAlphaLife.w, 0.0));\n    ramp.rgb *= colorMult;\n    ramp.a += texCoordsAlphaLife.z;\n    vec3 rgb =     tex.rgb * ramp.rgb;\n    float a =         tex.a * ramp.a;\n";
pc.shaderChunks.particleVS = "\nvec3 unpack3NFloats(float src) {\n    float r = fract(src);\n    float g = fract(src * 256.0);\n    float b = fract(src * 65536.0);\n    return vec3(r, g, b);\n}\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\nvec4 tex1Dlod_lerp(sampler2D tex, vec2 tc) {\n    return mix( texture2D(tex,tc), texture2D(tex,tc + graphSampleSize), fract(tc.x*graphNumSamples) );\n}\nvec4 tex1Dlod_lerp(sampler2D tex, vec2 tc, out vec3 w) {\n    vec4 a = texture2D(tex,tc);\n    vec4 b = texture2D(tex,tc + graphSampleSize);\n    float c = fract(tc.x*graphNumSamples);\n    vec3 unpackedA = unpack3NFloats(a.w);\n    vec3 unpackedB = unpack3NFloats(b.w);\n    w = mix(unpackedA, unpackedB, c);\n    return mix(a, b, c);\n}\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix) {\n    float c = cos(pRotation);\n    float s = sin(pRotation);\n    mat2 m = mat2(c, -s, s, c);\n    rotMatrix = m;\n    return m * quadXY;\n}\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY) {\n    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\n    return pos;\n}\nvoid main(void) {\n    vec3 meshLocalPos = particle_vertexData.xyz;\n    float id = floor(particle_vertexData.w);\n    float rndFactor = fract(sin(id + 1.0 + seed));\n    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));\n    float uv = id / numParticlesPot;\n    readInput(uv);\n    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used\n    float particleLifetime = lifetime;\n    if (inLife <= 0.0 || inLife > particleLifetime || !inShow) meshLocalPos = vec3(0.0);\n    vec2 quadXY = meshLocalPos.xy;\n    float nlife = clamp(inLife / particleLifetime, 0.0, 1.0);\n    vec3 paramDiv;\n    vec4 params = tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\n    float scale = params.y;\n    float scaleDiv = paramDiv.x;\n    float alphaDiv = paramDiv.z;\n    scale += (scaleDiv * 2.0 - 1.0) * scaleDivMult * fract(rndFactor*10000.0);\n    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5,    (alphaDiv * 2.0 - 1.0) * alphaDivMult * fract(rndFactor*1000.0),    nlife);\n    vec3 particlePos = inPos;\n    vec3 particlePosMoved = vec3(0.0);\n    mat2 rotMatrix;\n";
pc.shaderChunks.particleAnimFrameClampVS = "\n    float animFrame = min(floor(texCoordsAlphaLife.w * animTexParams.z), animTexParams.w);\n";
pc.shaderChunks.particleAnimFrameLoopVS = "\n    float animFrame = floor(texCoordsAlphaLife.w * animTexParams.z);\n";
pc.shaderChunks.particleAnimTexVS = "\n    float atlasX = animFrame * animTexParams.x;\n    float atlasY = floor(atlasX) * animTexParams.y;\n    atlasX = fract(atlasX);\n    texCoordsAlphaLife.xy *= animTexParams.xy;\n    texCoordsAlphaLife.xy += vec2(atlasX, atlasY);\n    texCoordsAlphaLife.y = 1.0 - texCoordsAlphaLife.y;\n";
pc.shaderChunks.particleInputFloatPS = "void readInput(float uv) {\n    vec4 tex = texture2D(particleTexIN, vec2(uv, 0.25));\n    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.75));\n    inPos = tex.xyz;\n    inVel = tex2.xyz;\n    inAngle = (tex.w < 0.0? -tex.w : tex.w) - 1000.0;\n    inShow = tex.w >= 0.0;\n    inLife = tex2.w;\n}\n";
pc.shaderChunks.particleInputRgba8PS = "//RG=X, BA=Y\n//RG=Z, BA=A\n//RGB=V, A=visMode\n//RGBA=life\n#define PI2 6.283185307179586\nuniform vec3 inBoundsSize;\nuniform vec3 inBoundsCenter;\nuniform float maxVel;\nfloat decodeFloatRG(vec2 rg) {\n    return rg.y*(1.0/255.0) + rg.x;\n}\nfloat decodeFloatRGBA( vec4 rgba ) {\n  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\nvoid readInput(float uv) {\n    vec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));\n    vec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));\n    vec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));\n    vec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));\n    inPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));\n    inPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;\n    inVel = tex2.xyz;\n    inVel = (inVel - vec3(0.5)) * maxVel;\n    inAngle = decodeFloatRG(tex1.ba) * PI2;\n    inShow = tex2.a > 0.5;\n    inLife = decodeFloatRGBA(tex3);\n    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n    float maxPosLife = lifetime+1.0;\n    inLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;\n}\n";
pc.shaderChunks.particleOutputFloatPS = "void writeOutput() {\n    if (gl_FragCoord.y<1.0) {\n        gl_FragColor = vec4(outPos, (outAngle + 1000.0) * visMode);\n    } else {\n        gl_FragColor = vec4(outVel, outLife);\n    }\n}\n";
pc.shaderChunks.particleOutputRgba8PS = "uniform vec3 outBoundsMul;\nuniform vec3 outBoundsAdd;\nvec2 encodeFloatRG( float v ) {\n  vec2 enc = vec2(1.0, 255.0) * v;\n  enc = fract(enc);\n  enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n  return enc;\n}\nvec4 encodeFloatRGBA( float v ) {\n  vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\n  return enc;\n}\nvoid writeOutput() {\n    //outPos = (outPos - outBoundsCenter) / outBoundsSize + vec3(0.5);\n    outPos = outPos * outBoundsMul + outBoundsAdd;\n    outAngle = fract(outAngle / PI2);\n    outVel = (outVel / maxVel) + vec3(0.5); // TODO: mul\n    float maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n    float maxPosLife = lifetime+1.0;\n    outLife = (outLife + maxNegLife) / (maxNegLife + maxPosLife);\n    if (gl_FragCoord.y < 1.0) {\n        gl_FragColor = vec4(encodeFloatRG(outPos.x), encodeFloatRG(outPos.y));\n    } else if (gl_FragCoord.y < 2.0) {\n        gl_FragColor = vec4(encodeFloatRG(outPos.z), encodeFloatRG(outAngle));\n    } else if (gl_FragCoord.y < 3.0) {\n        gl_FragColor = vec4(outVel, visMode*0.5+0.5);\n    } else {\n        gl_FragColor = encodeFloatRGBA(outLife);\n    }\n}\n";
pc.shaderChunks.particleUpdaterAABBPS = "uniform mat3 spawnBounds;\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\n    return emitterPos + spawnBounds * (inBounds - vec3(0.5));\n}\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\n    localVelocity -= vec3(0, 0, initialVelocity);\n}\n";
pc.shaderChunks.particleUpdaterEndPS = "\n    writeOutput();\n}\n";
pc.shaderChunks.particleUpdaterInitPS = "varying vec2 vUv0;\nuniform sampler2D particleTexIN;\nuniform sampler2D internalTex0;\nuniform sampler2D internalTex1;\nuniform sampler2D internalTex2;\nuniform mat3 emitterMatrix;\nuniform vec3 emitterScale;\nuniform vec3 emitterPos, frameRandom, localVelocityDivMult, velocityDivMult;\nuniform float delta, rate, rateDiv, lifetime, numParticles, rotSpeedDivMult, seed;\nuniform float startAngle, startAngle2;\nuniform float initialVelocity;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\nvec3 inPos;\nvec3 inVel;\nfloat inAngle;\nbool inShow;\nfloat inLife;\nfloat visMode;\nvec3 outPos;\nvec3 outVel;\nfloat outAngle;\nbool outShow;\nfloat outLife;\n";
pc.shaderChunks.particleUpdaterNoRespawnPS = "    if (outLife >= lifetime) {\n        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);\n        visMode = -1.0;\n    }\n";
pc.shaderChunks.particleUpdaterOnStopPS = "    visMode = outLife < 0.0? -1.0: visMode;\n";
pc.shaderChunks.particleUpdaterRespawnPS = "    if (outLife >= lifetime) {\n        outLife -= max(lifetime, (numParticles - 1.0) * particleRate);\n        visMode = 1.0;\n    }\n    visMode = outLife < 0.0? 1.0: visMode;\n";
pc.shaderChunks.particleUpdaterSpherePS = "uniform float spawnBoundsSphere;\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\n    float rnd4 = fract(rndFactor * 1000.0);\n    return emitterPos + normalize(inBounds.xyz - vec3(0.5)) * rnd4 * spawnBoundsSphere;\n}\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\n    localVelocity += normalize(inBounds - vec3(0.5)) * initialVelocity;\n}\n";
pc.shaderChunks.particleUpdaterStartPS = "float saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\nvec3 unpack3NFloats(float src) {\n    float r = fract(src);\n    float g = fract(src * 256.0);\n    float b = fract(src * 65536.0);\n    return vec3(r, g, b);\n}\nvec3 tex1Dlod_lerp(sampler2D tex, vec2 tc, out vec3 w) {\n    vec4 a = texture2D(tex, tc);\n    vec4 b = texture2D(tex, tc + graphSampleSize);\n    float c = fract(tc.x * graphNumSamples);\n    vec3 unpackedA = unpack3NFloats(a.w);\n    vec3 unpackedB = unpack3NFloats(b.w);\n    w = mix(unpackedA, unpackedB, c);\n    return mix(a.xyz, b.xyz, c);\n}\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\nvec4 hash41(float p) {\n    vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\n}\nvoid main(void)\n{\n    if (gl_FragCoord.x > numParticles) discard;\n    readInput(vUv0.x);\n    visMode = inShow? 1.0 : -1.0;\n    vec4 rndFactor = hash41(gl_FragCoord.x + seed);\n    float particleRate = rate + rateDiv * rndFactor.x;\n    outLife = inLife + delta;\n    float nlife = clamp(outLife / lifetime, 0.0, 1.0);\n    vec3 localVelocityDiv;\n    vec3 velocityDiv;\n    vec3 paramDiv;\n    vec3 localVelocity = tex1Dlod_lerp(internalTex0, vec2(nlife, 0), localVelocityDiv);\n    vec3 velocity =      tex1Dlod_lerp(internalTex1, vec2(nlife, 0), velocityDiv);\n    vec3 params =        tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\n    float rotSpeed = params.x;\n    float rotSpeedDiv = paramDiv.y;\n    localVelocity +=    (localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;\n    velocity +=         (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;\n    rotSpeed +=         (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;\n    addInitialVelocity(localVelocity, rndFactor.xyz);\n    outVel = emitterMatrix * localVelocity.xyz + velocity.xyz * emitterScale;\n    outPos = inPos + outVel * delta;\n    outAngle = inAngle + rotSpeed * delta;\n    bool respawn = outLife <= 0.0 || outLife >= lifetime;\n    outPos = respawn? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : outPos;\n    outAngle = respawn? mix(startAngle, startAngle2, rndFactor.x) : outAngle;\n    outVel = respawn? vec3(0.0) : outVel;\n";
pc.shaderChunks.particle_billboardVS = "\n    quadXY = rotate(quadXY, inAngle, rotMatrix);\n    vec3 localPos = billboard(particlePos, quadXY);\n";
pc.shaderChunks.particle_blendAddPS = "\n    rgb *= saturate(gammaCorrectInput(a));\n    if ((rgb.r + rgb.g + rgb.b) < 0.000001) discard;\n";
pc.shaderChunks.particle_blendMultiplyPS = "\n    rgb = mix(vec3(1.0), rgb, vec3(a));\n    if (rgb.r + rgb.g + rgb.b > 2.99) discard;\n";
pc.shaderChunks.particle_blendNormalPS = "\n    if (a < 0.01) discard;\n";
pc.shaderChunks.particle_cpuVS = "attribute vec4 particle_vertexData;     // XYZ = world pos, W = life\nattribute vec4 particle_vertexData2;     // X = angle, Y = scale, Z = alpha, W = velocity.x\nattribute vec4 particle_vertexData3;     // XYZ = particle local pos, W = velocity.y\nattribute vec2 particle_vertexData4;     // X = velocity.z, W = particle ID\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform mat3 matrix_normal;\nuniform mat4 matrix_viewInverse;\nuniform float numParticles;\nuniform float lifetime;\nuniform float stretch;\n//uniform float graphSampleSize;\n//uniform float graphNumSamples;\nuniform vec3 wrapBounds, emitterScale;\nuniform sampler2D texLifeAndSourcePosOUT;\nuniform sampler2D internalTex0;\nuniform sampler2D internalTex1;\nuniform sampler2D internalTex2;\nuniform vec3 emitterPos;\nvarying vec4 texCoordsAlphaLife;\nvec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)\n{\n    float c = cos(pRotation);\n    float s = sin(pRotation);\n    //vec4 rotationMatrix = vec4(c, -s, s, c);\n    mat2 m = mat2(c, -s, s, c);\n    rotMatrix = m;\n    return m * quadXY;\n}\nvec3 billboard(vec3 InstanceCoords, vec2 quadXY)\n{\n    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;\n    return pos;\n}\nvoid main(void)\n{\n    vec3 particlePos = particle_vertexData.xyz;\n    vec3 inPos = particlePos;\n    vec3 vertPos = particle_vertexData3.xyz;\n    vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData4.x);\n    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used\n    vec2 quadXY = vertPos.xy;\n    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);\n    mat2 rotMatrix;\n    float inAngle = particle_vertexData2.x;\n    vec3 particlePosMoved = vec3(0.0);\n    vec3 meshLocalPos = particle_vertexData3.xyz;\n";
pc.shaderChunks.particle_cpu_endVS = "\n    localPos *= particle_vertexData2.y * emitterScale;\n    localPos += particlePos;\n    gl_Position = matrix_viewProjection * vec4(localPos, 1.0);\n";
pc.shaderChunks.particle_endPS = "    rgb = addFog(rgb);\n    rgb = toneMap(rgb);\n    rgb = gammaCorrectOutput(rgb);\n    gl_FragColor = vec4(rgb, a);\n}\n";
pc.shaderChunks.particle_endVS = "\n    localPos *= scale * emitterScale;\n    localPos += particlePos;\n    gl_Position = matrix_viewProjection * vec4(localPos.xyz, 1.0);\n";
pc.shaderChunks.particle_halflambertPS = "\n    vec3 negNormal = normal*0.5+0.5;\n    vec3 posNormal = -normal*0.5+0.5;\n    negNormal *= negNormal;\n    posNormal *= posNormal;\n";
pc.shaderChunks.particle_initVS = "attribute vec4 particle_vertexData; // XYZ = particle position, W = particle ID + random factor\nuniform mat4 matrix_viewProjection;\nuniform mat4 matrix_model;\nuniform mat3 matrix_normal;\nuniform mat4 matrix_viewInverse;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform float numParticles, numParticlesPot;\nuniform float graphSampleSize;\nuniform float graphNumSamples;\nuniform float stretch;\nuniform vec3 wrapBounds;\nuniform vec3 emitterScale, emitterPos;\nuniform float rate, rateDiv, lifetime, deltaRandomnessStatic, scaleDivMult, alphaDivMult, seed, delta;\nuniform sampler2D particleTexOUT, particleTexIN;\nuniform sampler2D internalTex0;\nuniform sampler2D internalTex1;\nuniform sampler2D internalTex2;\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params;\n#endif\nvarying vec4 texCoordsAlphaLife;\nvec3 inPos;\nvec3 inVel;\nfloat inAngle;\nbool inShow;\nfloat inLife;\n";
pc.shaderChunks.particle_lambertPS = "\n    vec3 negNormal = max(normal, vec3(0.0));\n    vec3 posNormal = max(-normal, vec3(0.0));\n";
pc.shaderChunks.particle_lightingPS = "\n    vec3 light = negNormal.x*lightCube[0] + posNormal.x*lightCube[1] +\n                        negNormal.y*lightCube[2] + posNormal.y*lightCube[3] +\n                        negNormal.z*lightCube[4] + posNormal.z*lightCube[5];\n    rgb *= light;\n";
pc.shaderChunks.particle_localShiftVS = "    particlePos += emitterPos;\n";
pc.shaderChunks.particle_meshVS = "\n    vec3 localPos = meshLocalPos;\n    localPos.xy = rotate(localPos.xy, inAngle, rotMatrix);\n    localPos.yz = rotate(localPos.yz, inAngle, rotMatrix);\n    billboard(particlePos, quadXY);\n";
pc.shaderChunks.particle_normalVS = "\n    Normal = normalize(localPos + matrix_viewInverse[2].xyz);\n";
pc.shaderChunks.particle_normalMapPS = "\n    vec3 normalMap         = normalize( texture2D(normalMap, texCoordsAlphaLife.xy).xyz * 2.0 - 1.0 );\n    vec3 normal = ParticleMat * normalMap;\n";
pc.shaderChunks.particle_pointAlongVS = "    inAngle = atan(velocityV.x, velocityV.y); // not the fastest way, but easier to plug in; TODO: create rot matrix right from vectors\n";
pc.shaderChunks.particle_softPS = "\n    float depth = getLinearScreenDepth();\n    float particleDepth = vDepth;\n    float depthDiff = saturate(abs(particleDepth - depth) * softening);\n    a *= depthDiff;\n";
pc.shaderChunks.particle_softVS = "\n    vDepth = getLinearDepth(localPos);\n";
pc.shaderChunks.particle_stretchVS = "    vec3 moveDir = inVel * stretch;\n    vec3 posPrev = inPos - moveDir;\n    posPrev += particlePosMoved;\n    vec2 centerToVertexV = normalize((mat3(matrix_view) * localPos).xy);\n    float interpolation = dot(-velocityV, centerToVertexV) * 0.5 + 0.5;\n    particlePos = mix(particlePos, posPrev, interpolation);\n";
pc.shaderChunks.particle_TBNVS = "\n    mat3 rot3 = mat3(rotMatrix[0][0], rotMatrix[0][1], 0.0,        rotMatrix[1][0], rotMatrix[1][1], 0.0,        0.0, 0.0, 1.0);\n    ParticleMat = mat3(-matrix_viewInverse[0].xyz, -matrix_viewInverse[1].xyz, matrix_viewInverse[2].xyz) * rot3;\n";
pc.shaderChunks.particle_wrapVS = "\n    vec3 origParticlePos = particlePos;\n    particlePos -= matrix_model[3].xyz;\n    particlePos = mod(particlePos, wrapBounds) - wrapBounds * 0.5;\n    particlePos += matrix_model[3].xyz;\n    particlePosMoved = particlePos - origParticlePos;\n";
pc.shaderChunks.precisionTestPS = "void main(void) {\n    gl_FragColor = vec4(2147483648.0);\n}\n";
pc.shaderChunks.precisionTest2PS = "uniform sampler2D source;\nvec4 packFloat(float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n    return res;\n}\nvoid main(void) {\n    float c = texture2D(source, vec2(0.0)).r;\n    float diff = abs(c - 2147483648.0) / 2147483648.0;\n    gl_FragColor = packFloat(diff);\n}\n";
pc.shaderChunks.prefilterCubemapPS = "varying vec2 vUv0;\nuniform samplerCube source;\nuniform vec4 params;\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\nfloat rnd(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898, 78.233) * 2.0)) * 43758.5453);\n}\nconst float PI = 3.14159265358979;\nvec3 hemisphereSample_cos(vec2 uv, mat3 vecSpace, vec3 cubeDir, float gloss) { // cos + lerped cone size (better than just lerped)\n    float phi = uv.y * 2.0 * PI;\n    float cosTheta = sqrt(1.0 - uv.x);\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n    vec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n    return normalize(mix(vecSpace * sampleDir, cubeDir, params.y));\n}\nvec3 hemisphereSample_phong(vec2 uv, mat3 vecSpace, vec3 cubeDir, float specPow) {\n    float phi = uv.y * 2.0 * PI;\n    float cosTheta = pow(1.0 - uv.x, 1.0 / (specPow + 1.0));\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n    vec3 sampleDir = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n    return vecSpace * sampleDir;\n}\nmat3 matrixFromVector(vec3 n) { // frisvad\n    float a = 1.0 / (1.0 + n.z);\n    float b = -n.x * n.y * a;\n    vec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\n    vec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\n    return mat3(b1, b2, n);\n}\nvec4 encodeRGBM(vec3 color) { // modified RGBM\n    vec4 encoded;\n    encoded.rgb = pow(color.rgb, vec3(0.5));\n    encoded.rgb *= 1.0 / 8.0;\n    encoded.a = saturate( max( max( encoded.r, encoded.g ), max( encoded.b, 1.0 / 255.0 ) ) );\n    encoded.a = ceil(encoded.a * 255.0) / 255.0;\n    encoded.rgb /= encoded.a;\n    return encoded;\n}\nvoid main(void) {\n    vec2 st = vUv0 * 2.0 - 1.0;\n    if (params.w==1.0 || params.w==3.0) {\n        st = 2.0 * floor(gl_FragCoord.xy) / (params.z - 1.0) - 1.0;\n    }\n    float face = params.x;\n    vec3 vec;\n    if (face==0.0) {\n        vec = vec3(1, -st.y, -st.x);\n    } else if (face==1.0) {\n        vec = vec3(-1, -st.y, st.x);\n    } else if (face==2.0) {\n        vec = vec3(st.x, 1, st.y);\n    } else if (face==3.0) {\n        vec = vec3(st.x, -1, -st.y);\n    } else if (face==4.0) {\n        vec = vec3(st.x, -st.y, 1);\n    } else {\n        vec = vec3(-st.x, -st.y, -1);\n    }\n    mat3 vecSpace = matrixFromVector(normalize(vec));\n    vec3 color = vec3(0.0);\n    const int samples = $NUMSAMPLES;\n    vec3 vect;\n    for(int i=0; i<samples; i++) {\n        float sini = sin(float(i));\n        float cosi = cos(float(i));\n        float rand = rnd(vec2(sini, cosi));\n        vect = hemisphereSample_$METHOD(vec2(float(i) / float(samples), rand), vecSpace, vec, params.y);\n        color += $textureCube(source, vect).rgb;\n    }\n    color /= float(samples);\n    gl_FragColor = params.w < 2.0? vec4(color, 1.0) : encodeRGBM(color);\n}\n";
pc.shaderChunks.reflDirPS = "void getReflDir() {\n    dReflDirW = normalize(-reflect(dViewDirW, dNormalW));\n}\n";
pc.shaderChunks.reflectionCubePS = "uniform samplerCube texture_cubeMap;\nuniform float material_reflectivity;\nvoid addReflection() {\n    vec3 lookupVec = fixSeams(cubeMapProject(dReflDirW));\n    lookupVec.x *= -1.0;\n    dReflection += vec4($textureCubeSAMPLE(texture_cubeMap, lookupVec).rgb, material_reflectivity);\n}\n";
pc.shaderChunks.reflectionDpAtlasPS = "uniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvec2 getDpAtlasUv(vec2 uv, float mip) {\n    vec4 rect;\n    float sx = saturate(mip - 2.0);\n    rect.x = sx * 0.5;\n    float t = mip - rect.x * 6.0;\n    float i = 1.0 - rect.x;\n    rect.y = min(t * 0.5, 0.75) * i + rect.x;\n    float st = saturate(t);\n    rect.z = (1.0 - st * 0.5) * i;\n    rect.w = rect.z * 0.5;\n    float rcRectZ = 1.0 / rect.z;\n    float scaleFactor = 0.00390625 * rcRectZ; // 0.0078125 = (256 + 2) / 256 - 1, 0.00390625 same for 512\n    vec2 scale = vec2(scaleFactor, scaleFactor * 2.0);\n    uv = uv * (vec2(1.0) - scale) + scale * 0.5;\n    uv = uv * rect.zw + rect.xy;\n    return uv;\n}\nvoid addReflection() {\n    vec3 reflDir = normalize(cubeMapProject(dReflDirW));\n    // Convert vector to DP coords\n    bool up = reflDir.y > 0.0;\n    float scale = 0.90909090909090909090909090909091;// 1.0 / 1.1;\n    vec3 reflDirWarp = reflDir.xzx * vec3(-0.25, 0.5, 0.25);\n    float reflDirVer = abs(reflDir.y) + 1.0;\n    reflDirWarp /= reflDirVer;\n    reflDirWarp *= scale;\n    reflDirWarp = vec3(0.75, 0.5, 0.25) - reflDirWarp;\n    vec2 tc = up? reflDirWarp.xy : reflDirWarp.zy;\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\n    float mip = floor(bias);\n    vec3 tex1 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\n    mip = min(mip + 1.0, 5.0);\n    vec3 tex2 = $texture2DSAMPLE(texture_sphereMap, getDpAtlasUv(tc, mip)).rgb;\n    tex1 = mix(tex1, tex2, fract(bias));\n    tex1 = processEnvironment(tex1);\n    dReflection += vec4(tex1, material_reflectivity);\n}\n";
pc.shaderChunks.reflectionPrefilteredCubePS = "uniform samplerCube texture_prefilteredCubeMap128;\nuniform samplerCube texture_prefilteredCubeMap64;\nuniform samplerCube texture_prefilteredCubeMap32;\nuniform samplerCube texture_prefilteredCubeMap16;\nuniform samplerCube texture_prefilteredCubeMap8;\n#ifndef PMREM4\n#define PMREM4\nuniform samplerCube texture_prefilteredCubeMap4;\n#endif\nuniform float material_reflectivity;\nvoid addReflection() {\n    // Unfortunately, WebGL doesn't allow us using textureCubeLod. Therefore bunch of nasty workarounds is required.\n    // We fix mip0 to 128x128, so code is rather static.\n    // Mips smaller than 4x4 aren't great even for diffuse. Don't forget that we don't have bilinear filtering between different faces.\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\n    int index1 = int(bias);\n    int index2 = int(min(bias + 1.0, 7.0));\n    vec3 fixedReflDir = fixSeams(cubeMapProject(dReflDirW), bias);\n    fixedReflDir.x *= -1.0;\n    vec4 cubes[6];\n    cubes[0] = textureCube(texture_prefilteredCubeMap128, fixedReflDir);\n    cubes[1] = textureCube(texture_prefilteredCubeMap64, fixedReflDir);\n    cubes[2] = textureCube(texture_prefilteredCubeMap32, fixedReflDir);\n    cubes[3] = textureCube(texture_prefilteredCubeMap16, fixedReflDir);\n    cubes[4] = textureCube(texture_prefilteredCubeMap8, fixedReflDir);\n    cubes[5] = textureCube(texture_prefilteredCubeMap4, fixedReflDir);\n    // Also we don't have dynamic indexing in PS, so...\n    vec4 cube[2];\n    for(int i = 0; i < 6; i++) {\n        if (i == index1) {\n            cube[0] = cubes[i];\n        }\n        if (i == index2) {\n            cube[1] = cubes[i];\n        }\n    }\n    // another variant\n    /*if (index1==0){ cube[0]=cubes[0];\n    }else if (index1==1){ cube[0]=cubes[1];\n    }else if (index1==2){ cube[0]=cubes[2];\n    }else if (index1==3){ cube[0]=cubes[3];\n    }else if (index1==4){ cube[0]=cubes[4];\n    }else if (index1==5){ cube[0]=cubes[5];}\n    if (index2==0){ cube[1]=cubes[0];\n    }else if (index2==1){ cube[1]=cubes[1];\n    }else if (index2==2){ cube[1]=cubes[2];\n    }else if (index2==3){ cube[1]=cubes[3];\n    }else if (index2==4){ cube[1]=cubes[4];\n    }else if (index2==5){ cube[1]=cubes[5];}*/\n    vec4 cubeFinal = mix(cube[0], cube[1], fract(bias));\n    vec3 refl = processEnvironment($DECODE(cubeFinal).rgb);\n    dReflection += vec4(refl, material_reflectivity);\n}\n";
pc.shaderChunks.reflectionPrefilteredCubeLodPS = "\n#ifndef PMREM4\n#define PMREM4\n#extension GL_EXT_shader_texture_lod : enable\nuniform samplerCube texture_prefilteredCubeMap128;\n#endif\nuniform float material_reflectivity;\nvoid addReflection() {\n    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level\n    vec3 fixedReflDir = fixSeams(cubeMapProject(dReflDirW), bias);\n    fixedReflDir.x *= -1.0;\n    vec3 refl = processEnvironment($DECODE( textureCubeLodEXT(texture_prefilteredCubeMap128, fixedReflDir, bias) ).rgb);\n    dReflection += vec4(refl, material_reflectivity);\n}\n";
pc.shaderChunks.reflectionSpherePS = "#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvoid addReflection() {\n    vec3 reflDirV = (mat3(matrix_view) * dReflDirW).xyz;\n    float m = 2.0 * sqrt( dot(reflDirV.xy, reflDirV.xy) + (reflDirV.z+1.0)*(reflDirV.z+1.0) );\n    vec2 sphereMapUv = reflDirV.xy / m + 0.5;\n    dReflection += vec4($texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb, material_reflectivity);\n}\n";
pc.shaderChunks.reflectionSphereLowPS = "uniform sampler2D texture_sphereMap;\nuniform float material_reflectivity;\nvoid addReflection() {\n    vec3 reflDirV = vNormalV;\n    vec2 sphereMapUv = reflDirV.xy * 0.5 + 0.5;\n    dReflection += vec4($texture2DSAMPLE(texture_sphereMap, sphereMapUv).rgb, material_reflectivity);\n}\n";
pc.shaderChunks.refractionPS = "uniform float material_refraction, material_refractionIndex;\nvec3 refract2(vec3 viewVec, vec3 Normal, float IOR) {\n    float vn = dot(viewVec, Normal);\n    float k = 1.0 - IOR * IOR * (1.0 - vn * vn);\n    vec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * Normal;\n    return refrVec;\n}\nvoid addRefraction() {\n    // use same reflection code with refraction vector\n    vec3 tmp = dReflDirW;\n    vec4 tmp2 = dReflection;\n    dReflection = vec4(0.0);\n    dReflDirW = refract2(-dViewDirW, dNormalW, material_refractionIndex);\n    addReflection();\n    dDiffuseLight = mix(dDiffuseLight, dReflection.rgb * dAlbedo, material_refraction);\n    dReflDirW = tmp;\n    dReflection = tmp2;\n}\n";
pc.shaderChunks.rgbmPS = "vec3 decodeRGBM(vec4 rgbm) {\n    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;\n    return color * color;\n}\nvec3 texture2DRGBM(sampler2D tex, vec2 uv) {\n    return decodeRGBM(texture2D(tex, uv));\n}\nvec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {\n    return decodeRGBM(textureCube(tex, uvw));\n}\n";
pc.shaderChunks.screenDepthPS = "uniform sampler2D uDepthMap;\n#ifndef SCREENSIZE\n#define SCREENSIZE\nuniform vec4 uScreenSize;\n#endif\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\n#ifndef CAMERAPLANES\n#define CAMERAPLANES\nuniform vec4 camera_params; // 1 / camera_far,      camera_far,     (1 - f / n) / 2,        (1 + f / n) / 2\n#endif\n#ifdef GL2\n    float linearizeDepth(float z) {\n        z = z * 2.0 - 1.0;\n        return 1.0 / (camera_params.z * z + camera_params.w);\n    }\n#else\n    #ifndef UNPACKFLOAT\n    #define UNPACKFLOAT\n    float unpackFloat(vec4 rgbaDepth) {\n        const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n        return dot(rgbaDepth, bitShift);\n    }\n    #endif\n#endif\n// Retrieves rendered linear camera depth by UV\nfloat getLinearScreenDepth(vec2 uv) {\n    #ifdef GL2\n        return linearizeDepth(texture2D(uDepthMap, uv).r) * camera_params.y;\n    #else\n        return unpackFloat(texture2D(uDepthMap, uv)) * camera_params.y;\n    #endif\n}\n#ifndef VERTEXSHADER\n// Retrieves rendered linear camera depth under the current pixel\nfloat getLinearScreenDepth() {\n    vec2 uv = gl_FragCoord.xy * uScreenSize.zw;\n    return getLinearScreenDepth(uv);\n}\n#endif\n// Generates linear camera depth for the given world position\nfloat getLinearDepth(vec3 pos) {\n    return -(matrix_view * vec4(pos, 1.0)).z;\n}\n";
pc.shaderChunks.shadowCommonPS = "void normalOffsetPointShadow(vec4 shadowParams) {\n    float distScale = length(dLightDirW);\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale; //0.02\n    vec3 dir = wPos - dLightPosW;\n    dLightDirW = dir;\n}\n";
pc.shaderChunks.shadowCoordPS = "void _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\n    dShadowCoord = (shadowMatrix * vec4(wPos, 1.0)).xyz;\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;\n    #ifdef SHADOWBIAS\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\n    #endif\n}\nvoid _getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n    projPos.xy /= projPos.w;\n    dShadowCoord.xy = projPos.xy;\n    dShadowCoord.z = length(dLightDirW) * shadowParams.w;\n    #ifdef SHADOWBIAS\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\n    #endif\n}\nvoid getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams) {\n    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);\n}\nvoid getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0); //0.08\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);\n}\n";
pc.shaderChunks.shadowCoordVS = "void getLightDirPoint(vec3 lightPosW) {\n    vec3 lightDirW = vPositionW - lightPosW;\n    dLightDirNormW = normalize(lightDirW);\n    dLightPosW = lightPosW;\n}\nvoid _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n    vMainShadowUv = projPos;\n}\nvoid _getShadowCoordPersp(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n    vMainShadowUv = projPos;\n}\nvoid getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPersp(mat4 shadowMatrix, vec3 shadowParams) {\n    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);\n}\nvoid getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\n    vec3 wPos = vPositionW + dNormalW * shadowParams.y * clamp(1.0 - dot(dNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);\n}\nvoid getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {\n    vec3 wPos = vPositionW + dNormalW * shadowParams.y * clamp(1.0 - dot(dNormalW, -dLightDirNormW), 0.0, 1.0); //0.08\n    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);\n}\n";
pc.shaderChunks.shadowCoordPerspZbufferPS = "void _getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {\n    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);\n    projPos.xyz /= projPos.w;\n    dShadowCoord = projPos.xyz;\n    // depth bias is already applied on render\n}\nvoid getShadowCoordPerspZbufferNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {\n    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?\n    vec3 wPos = vPositionW + dVertexNormalW * shadowParams.y * clamp(1.0 - dot(dVertexNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;\n    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, wPos);\n}\nvoid getShadowCoordPerspZbuffer(mat4 shadowMatrix, vec4 shadowParams) {\n    _getShadowCoordPerspZbuffer(shadowMatrix, shadowParams, vPositionW);\n}\n";
pc.shaderChunks.shadowEVSMPS = "float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n    vec3 moments = texture2D(tex, texCoords).xyz;\n    return calculateEVSM(moments, Z, vsmBias, exponent);\n}\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\n}\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\n}\n";
pc.shaderChunks.shadowEVSMnPS = "float VSM$(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n    float pixelSize = 1.0 / resolution;\n    texCoords -= vec2(pixelSize);\n    vec3 s00 = texture2D(tex, texCoords).xyz;\n    vec3 s10 = texture2D(tex, texCoords + vec2(pixelSize, 0)).xyz;\n    vec3 s01 = texture2D(tex, texCoords + vec2(0, pixelSize)).xyz;\n    vec3 s11 = texture2D(tex, texCoords + vec2(pixelSize)).xyz;\n    vec2 fr = fract(texCoords * resolution);\n    vec3 h0 = mix(s00, s10, fr.x);\n    vec3 h1 = mix(s01, s11, fr.x);\n    vec3 moments = mix(h0, h1, fr.y);\n    return calculateEVSM(moments, Z, vsmBias, exponent);\n}\nfloat getShadowVSM$(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\n}\nfloat getShadowSpotVSM$(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n    return VSM$(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, exponent);\n}\n";
pc.shaderChunks.shadowStandardPS = "vec3 lessThan2(vec3 a, vec3 b) {\n    return clamp((b - a)*1000.0, 0.0, 1.0); // softer version\n}\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    return dot(rgbaDepth, bitShift);\n}\n#endif\n// ----- Direct/Spot Sampling -----\n#ifdef GL2\n    float _getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\n        float z = dShadowCoord.z;\n        vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel\n        float shadowMapSizeInv = 1.0 / shadowParams.x;\n        vec2 base_uv = floor(uv + 0.5);\n        float s = (uv.x + 0.5 - base_uv.x);\n        float t = (uv.y + 0.5 - base_uv.y);\n        base_uv -= vec2(0.5);\n        base_uv *= shadowMapSizeInv;\n        float sum = 0.0;\n        float uw0 = (3.0 - 2.0 * s);\n        float uw1 = (1.0 + 2.0 * s);\n        float u0 = (2.0 - s) / uw0 - 1.0;\n        float u1 = s / uw1 + 1.0;\n        float vw0 = (3.0 - 2.0 * t);\n        float vw1 = (1.0 + 2.0 * t);\n        float v0 = (2.0 - t) / vw0 - 1.0;\n        float v1 = t / vw1 + 1.0;\n        u0 = u0 * shadowMapSizeInv + base_uv.x;\n        v0 = v0 * shadowMapSizeInv + base_uv.y;\n        u1 = u1 * shadowMapSizeInv + base_uv.x;\n        v1 = v1 * shadowMapSizeInv + base_uv.y;\n        sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\n        sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\n        sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\n        sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\n        sum *= 1.0f / 16.0;\n        return sum;\n    }\n    float getShadowPCF3x3(sampler2DShadow shadowMap, vec3 shadowParams) {\n        return _getShadowPCF3x3(shadowMap, shadowParams);\n    }\n    float getShadowSpotPCF3x3(sampler2DShadow shadowMap, vec4 shadowParams) {\n        return _getShadowPCF3x3(shadowMap, shadowParams.xyz);\n    }\n#else\n    float _xgetShadowPCF3x3(mat3 depthKernel, sampler2D shadowMap, vec3 shadowParams) {\n        mat3 shadowKernel;\n        vec3 shadowCoord = dShadowCoord;\n        vec3 shadowZ = vec3(shadowCoord.z);\n        shadowKernel[0] = vec3(greaterThan(depthKernel[0], shadowZ));\n        shadowKernel[1] = vec3(greaterThan(depthKernel[1], shadowZ));\n        shadowKernel[2] = vec3(greaterThan(depthKernel[2], shadowZ));\n        vec2 fractionalCoord = fract( shadowCoord.xy * shadowParams.x );\n        shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n        shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n        vec4 shadowValues;\n        shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n        shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n        shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n        shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n        return dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n    }\n    float _getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\n        vec3 shadowCoord = dShadowCoord;\n        float xoffset = 1.0 / shadowParams.x; // 1/shadow map width\n        float dx0 = -xoffset;\n        float dx1 = xoffset;\n        mat3 depthKernel;\n        depthKernel[0][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx0)));\n        depthKernel[0][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, 0.0)));\n        depthKernel[0][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx0, dx1)));\n        depthKernel[1][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx0)));\n        depthKernel[1][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy));\n        depthKernel[1][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(0.0, dx1)));\n        depthKernel[2][0] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx0)));\n        depthKernel[2][1] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, 0.0)));\n        depthKernel[2][2] = unpackFloat(texture2D(shadowMap, shadowCoord.xy + vec2(dx1, dx1)));\n        return _xgetShadowPCF3x3(depthKernel, shadowMap, shadowParams);\n    }\n    float getShadowPCF3x3(sampler2D shadowMap, vec3 shadowParams) {\n        return _getShadowPCF3x3(shadowMap, shadowParams);\n    }\n    float getShadowSpotPCF3x3(sampler2D shadowMap, vec4 shadowParams) {\n        return _getShadowPCF3x3(shadowMap, shadowParams.xyz);\n    }\n#endif\n// ----- Point Sampling -----\nfloat _getShadowPoint(samplerCube shadowMap, vec4 shadowParams, vec3 dir) {\n    vec3 tc = normalize(dir);\n    vec3 tcAbs = abs(tc);\n    vec4 dirX = vec4(1,0,0, tc.x);\n    vec4 dirY = vec4(0,1,0, tc.y);\n    float majorAxisLength = tc.z;\n    if ((tcAbs.x > tcAbs.y) && (tcAbs.x > tcAbs.z)) {\n        dirX = vec4(0,0,1, tc.z);\n        dirY = vec4(0,1,0, tc.y);\n        majorAxisLength = tc.x;\n    } else if ((tcAbs.y > tcAbs.x) && (tcAbs.y > tcAbs.z)) {\n        dirX = vec4(1,0,0, tc.x);\n        dirY = vec4(0,0,1, tc.z);\n        majorAxisLength = tc.y;\n    }\n    float shadowParamsInFaceSpace = ((1.0/shadowParams.x) * 2.0) * abs(majorAxisLength);\n    vec3 xoffset = (dirX.xyz * shadowParamsInFaceSpace);\n    vec3 yoffset = (dirY.xyz * shadowParamsInFaceSpace);\n    vec3 dx0 = -xoffset;\n    vec3 dy0 = -yoffset;\n    vec3 dx1 = xoffset;\n    vec3 dy1 = yoffset;\n    mat3 shadowKernel;\n    mat3 depthKernel;\n    depthKernel[0][0] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy0));\n    depthKernel[0][1] = unpackFloat(textureCube(shadowMap, tc + dx0));\n    depthKernel[0][2] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy1));\n    depthKernel[1][0] = unpackFloat(textureCube(shadowMap, tc + dy0));\n    depthKernel[1][1] = unpackFloat(textureCube(shadowMap, tc));\n    depthKernel[1][2] = unpackFloat(textureCube(shadowMap, tc + dy1));\n    depthKernel[2][0] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy0));\n    depthKernel[2][1] = unpackFloat(textureCube(shadowMap, tc + dx1));\n    depthKernel[2][2] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy1));\n    vec3 shadowZ = vec3(length(dir) * shadowParams.w + shadowParams.z);\n    shadowKernel[0] = vec3(lessThan2(depthKernel[0], shadowZ));\n    shadowKernel[1] = vec3(lessThan2(depthKernel[1], shadowZ));\n    shadowKernel[2] = vec3(lessThan2(depthKernel[2], shadowZ));\n    vec2 uv = (vec2(dirX.w, dirY.w) / abs(majorAxisLength)) * 0.5;\n    vec2 fractionalCoord = fract( uv * shadowParams.x );\n    shadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n    shadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n    vec4 shadowValues;\n    shadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n    shadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n    shadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n    shadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n    return 1.0 - dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n}\nfloat getShadowPointPCF3x3(samplerCube shadowMap, vec4 shadowParams) {\n    return _getShadowPoint(shadowMap, shadowParams, dLightDirW);\n}\n";
pc.shaderChunks.shadowStandardGL2PS = "float _getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\n    // http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/\n    float z = dShadowCoord.z;\n    vec2 uv = dShadowCoord.xy * shadowParams.x; // 1 unit - 1 texel\n    float shadowMapSizeInv = 1.0 / shadowParams.x;\n    vec2 base_uv = floor(uv + 0.5);\n    float s = (uv.x + 0.5 - base_uv.x);\n    float t = (uv.y + 0.5 - base_uv.y);\n    base_uv -= vec2(0.5);\n    base_uv *= shadowMapSizeInv;\n    float uw0 = (4.0 - 3.0 * s);\n    float uw1 = 7.0;\n    float uw2 = (1.0 + 3.0 * s);\n    float u0 = (3.0 - 2.0 * s) / uw0 - 2.0;\n    float u1 = (3.0 + s) / uw1;\n    float u2 = s / uw2 + 2.0;\n    float vw0 = (4.0 - 3.0 * t);\n    float vw1 = 7.0;\n    float vw2 = (1.0 + 3.0 * t);\n    float v0 = (3.0 - 2.0 * t) / vw0 - 2.0;\n    float v1 = (3.0 + t) / vw1;\n    float v2 = t / vw2 + 2.0;\n    float sum = 0.0;\n    u0 = u0 * shadowMapSizeInv + base_uv.x;\n    v0 = v0 * shadowMapSizeInv + base_uv.y;\n    u1 = u1 * shadowMapSizeInv + base_uv.x;\n    v1 = v1 * shadowMapSizeInv + base_uv.y;\n    u2 = u2 * shadowMapSizeInv + base_uv.x;\n    v2 = v2 * shadowMapSizeInv + base_uv.y;\n    sum += uw0 * vw0 * texture(shadowMap, vec3(u0, v0, z));\n    sum += uw1 * vw0 * texture(shadowMap, vec3(u1, v0, z));\n    sum += uw2 * vw0 * texture(shadowMap, vec3(u2, v0, z));\n    sum += uw0 * vw1 * texture(shadowMap, vec3(u0, v1, z));\n    sum += uw1 * vw1 * texture(shadowMap, vec3(u1, v1, z));\n    sum += uw2 * vw1 * texture(shadowMap, vec3(u2, v1, z));\n    sum += uw0 * vw2 * texture(shadowMap, vec3(u0, v2, z));\n    sum += uw1 * vw2 * texture(shadowMap, vec3(u1, v2, z));\n    sum += uw2 * vw2 * texture(shadowMap, vec3(u2, v2, z));\n    sum *= 1.0f / 144.0;\n    sum = gammaCorrectInput(sum); // gives softer gradient\n    sum = saturate(sum);\n    return sum;\n}\nfloat getShadowPCF5x5(sampler2DShadow shadowMap, vec3 shadowParams) {\n    return _getShadowPCF5x5(shadowMap, shadowParams);\n}\nfloat getShadowSpotPCF5x5(sampler2DShadow shadowMap, vec4 shadowParams) {\n    return _getShadowPCF5x5(shadowMap, shadowParams.xyz);\n}\n";
pc.shaderChunks.shadowStandardGL2VSPS = "float getShadowPCF5x5VS(sampler2DShadow shadowMap, vec3 shadowParams) {\n    dShadowCoord = vMainShadowUv.xyz;\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001; // prevent going to dark after the far plane\n    return _getShadowPCF5x5(shadowMap, shadowParams);\n}\n";
pc.shaderChunks.shadowStandardVSPS = "#ifdef GL2\n#define SHADOW_SAMPLERVS sampler2DShadow\n#else\n#define SHADOW_SAMPLERVS sampler2D\n#endif\nfloat getShadowPCF3x3VS(SHADOW_SAMPLERVS shadowMap, vec3 shadowParams) {\n    dShadowCoord = vMainShadowUv.xyz;\n    dShadowCoord.z = saturate(dShadowCoord.z) - 0.0001;\n    #ifdef SHADOWBIAS\n        dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);\n    #endif\n    return _getShadowPCF3x3(shadowMap, shadowParams);\n}\n";
pc.shaderChunks.shadowVSM8PS = "float calculateVSM8(vec3 moments, float Z, float vsmBias) {\n    float VSMBias = vsmBias;//0.01 * 0.25;\n    float depthScale = VSMBias * Z;\n    float minVariance1 = depthScale * depthScale;\n    return chebyshevUpperBound(moments.xy, Z, minVariance1, 0.1);\n}\nfloat decodeFloatRG(vec2 rg) {\n    return rg.y*(1.0/255.0) + rg.x;\n}\nfloat VSM8(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {\n    vec4 c = texture2D(tex, texCoords);\n    vec3 moments = vec3(decodeFloatRG(c.xy), decodeFloatRG(c.zw), 0.0);\n    return calculateVSM8(moments, Z, vsmBias);\n}\nfloat getShadowVSM8(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, 0.0);\n}\nfloat getShadowSpotVSM8(sampler2D shadowMap, vec4 shadowParams, float exponent) {\n    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, 0.0);\n}\n";
pc.shaderChunks.shadowVSMVSPS = "float getShadowVSM$VS(sampler2D shadowMap, vec3 shadowParams, float exponent) {\n    dShadowCoord = vMainShadowUv.xyz;\n    dShadowCoord.z += shadowParams.z;\n    dShadowCoord.xyz /= vMainShadowUv.w;\n    dShadowCoord.z = min(dShadowCoord.z, 1.0);\n    return $VSM(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, exponent);\n}\n";
pc.shaderChunks.shadowVSM_commonPS = "float linstep(float a, float b, float v) {\n    return saturate((v - a) / (b - a));\n}\nfloat reduceLightBleeding(float pMax, float amount) {\n  // Remove the [0, amount] tail and linearly rescale (amount, 1].\n   return linstep(amount, 1.0, pMax);\n}\nfloat chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {\n    // Compute variance\n    float variance = moments.y - (moments.x * moments.x);\n    variance = max(variance, minVariance);\n    // Compute probabilistic upper bound\n    float d = mean - moments.x;\n    float pMax = variance / (variance + (d * d));\n    pMax = reduceLightBleeding(pMax, lightBleedingReduction);\n    // One-tailed Chebyshev\n    return (mean <= moments.x ? 1.0 : pMax);\n}\nfloat calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {\n    Z = 2.0 * Z - 1.0;\n    float warpedDepth = exp(exponent * Z);\n    moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);\n    float VSMBias = vsmBias;//0.01 * 0.25;\n    float depthScale = VSMBias * exponent * warpedDepth;\n    float minVariance1 = depthScale * depthScale;\n    return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);\n}\n";
pc.shaderChunks.skinBatchConstVS = "attribute float vertex_boneIndices;\nuniform mat4 matrix_pose[BONE_LIMIT];\nmat4 getBoneMatrix(const in float i) {\n    mat4 bone = matrix_pose[int(i)];\n    return bone;\n}\n";
pc.shaderChunks.skinBatchTexVS = "attribute float vertex_boneIndices;\nuniform sampler2D texture_poseMap;\nuniform vec2 texture_poseMapSize;\nmat4 getBoneMatrix(const in float i) {\n    float j = i * 4.0;\n    float x = mod(j, float(texture_poseMapSize.x));\n    float y = floor(j / float(texture_poseMapSize.x));\n    float dx = 1.0 / float(texture_poseMapSize.x);\n    float dy = 1.0 / float(texture_poseMapSize.y);\n    y = dy * (y + 0.5);\n    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\n    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\n    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\n    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));\n    mat4 bone = mat4(v1, v2, v3, v4);\n    return bone;\n}\n";
pc.shaderChunks.skinConstVS = "attribute vec4 vertex_boneWeights;\nattribute vec4 vertex_boneIndices;\nuniform mat4 matrix_pose[BONE_LIMIT];\nmat4 getBoneMatrix(const in float i)\n{\n    mat4 bone = matrix_pose[int(i)];\n    return bone;\n}\n";
pc.shaderChunks.skinTexVS = "attribute vec4 vertex_boneWeights;\nattribute vec4 vertex_boneIndices;\nuniform sampler2D texture_poseMap;\nuniform vec2 texture_poseMapSize;\nmat4 getBoneMatrix(const in float i)\n{\n    float j = i * 4.0;\n    float x = mod(j, float(texture_poseMapSize.x));\n    float y = floor(j / float(texture_poseMapSize.x));\n    float dx = 1.0 / float(texture_poseMapSize.x);\n    float dy = 1.0 / float(texture_poseMapSize.y);\n    y = dy * (y + 0.5);\n    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));\n    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));\n    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));\n    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));\n    mat4 bone = mat4(v1, v2, v3, v4);\n    return bone;\n}\n";
pc.shaderChunks.skyboxPS = "varying vec3 vViewDir;\nuniform samplerCube texture_cubeMap;\nvoid main(void) {\n    gl_FragColor = textureCube(texture_cubeMap, fixSeams(vViewDir));\n}\n";
pc.shaderChunks.skyboxVS = "attribute vec3 aPosition;\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nuniform mat4 matrix_projection;\nvarying vec3 vViewDir;\nvoid main(void)\n{\n    mat4 view = matrix_view;\n    view[3][0] = view[3][1] = view[3][2] = 0.0;\n    gl_Position = matrix_projection * view * vec4(aPosition, 1.0);\n    // Force skybox to far Z, regardless of the clip planes on the camera\n    // Subtract a tiny fudge factor to ensure floating point errors don't\n    // still push pixels beyond far Z. See:\n    // http://www.opengl.org/discussion_boards/showthread.php/171867-skybox-problem\n    gl_Position.z = gl_Position.w - 0.00001;\n    vViewDir = aPosition;\n    vViewDir.x *= -1.0;\n}\n";
pc.shaderChunks.skyboxHDRPS = "varying vec3 vViewDir;\nuniform samplerCube texture_cubeMap;\nvoid main(void) {\n    vec3 color = processEnvironment($textureCubeSAMPLE(texture_cubeMap, fixSeamsStatic(vViewDir, $FIXCONST)).rgb);\n    color = toneMap(color);\n    color = gammaCorrectOutput(color);\n    gl_FragColor = vec4(color, 1.0);\n}\n";
pc.shaderChunks.skyboxPrefilteredCubePS = "varying vec3 vViewDir;\nuniform samplerCube texture_cubeMap;\nvec3 fixSeamsStretch(vec3 vec, float mipmapIndex, float cubemapSize) {\n    float scale = 1.0 - exp2(mipmapIndex) / cubemapSize;\n    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));\n    if (abs(vec.x) != M) vec.x *= scale;\n    if (abs(vec.y) != M) vec.y *= scale;\n    if (abs(vec.z) != M) vec.z *= scale;\n    return vec;\n}\nvoid main(void) {\n    vec3 color = textureCubeRGBM(texture_cubeMap, fixSeamsStretch(vViewDir, 0.0, 128.0));\n    color = toneMap(color);\n    color = gammaCorrectOutput(color);\n    gl_FragColor = vec4(color, 1.0);\n}\n";
pc.shaderChunks.specularPS = "#ifdef MAPCOLOR\nuniform vec3 material_specular;\n#endif\n#ifdef MAPTEXTURE\nuniform sampler2D texture_specularMap;\n#endif\nvoid getSpecularity() {\n    dSpecularity = vec3(1.0);\n    #ifdef MAPCOLOR\n        dSpecularity *= material_specular;\n    #endif\n    #ifdef MAPTEXTURE\n        dSpecularity *= texture2D(texture_specularMap, $UV).$CH;\n    #endif\n    #ifdef MAPVERTEX\n        dSpecularity *= saturate(vVertexColor.$VC);\n    #endif\n}\n";
pc.shaderChunks.specularAaNonePS = "float antiAliasGlossiness(float power) {\n    return power;\n}\n";
pc.shaderChunks.specularAaToksvigPS = "float antiAliasGlossiness(float power) {\n    float rlen = 1.0 / saturate(length(dNormalMap));\n    float toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\n    return power * toksvig;\n}\n";
pc.shaderChunks.specularAaToksvigFloatPS = "float antiAliasGlossiness(float power) {\n    float rlen = 1.0 / saturate(length(dNormalMap));\n    float toksvig = 1.0 / (1.0 + power * (rlen - 1.0));\n    return power * mix(1.0, toksvig, material_bumpiness);\n}\n";
pc.shaderChunks.spotPS = "float getSpotEffect(vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {\n    float cosAngle = dot(dLightDirNormW, lightSpotDirW);\n    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);\n}\n";
pc.shaderChunks.startPS = "\nvoid main(void) {\n    dDiffuseLight = vec3(0);\n    dSpecularLight = vec3(0);\n    dReflection = vec4(0);\n    dSpecularity = vec3(0);\n";
pc.shaderChunks.startVS = "\nvoid main(void) {\n    gl_Position = getPosition();\n";
pc.shaderChunks.storeEVSMPS = "float exponent = VSM_EXPONENT;\ndepth = 2.0 * depth - 1.0;\ndepth =  exp(exponent * depth);\ngl_FragColor = vec4(depth, depth*depth, 1.0, 1.0);\n";
pc.shaderChunks.tangentBinormalVS = "\nvec3 getTangent() {\n    return normalize(dNormalMatrix * vertex_tangent.xyz);\n}\nvec3 getBinormal() {\n    return cross(vNormalW, vTangentW) * vertex_tangent.w;\n}\n";
pc.shaderChunks.TBNPS = "void getTBN() {\n    dTBN = mat3(normalize(dTangentW), normalize(dBinormalW), normalize(dVertexNormalW));\n}\n";
pc.shaderChunks.TBNfastPS = "void getTBN() {\n    dTBN = mat3(dTangentW, dBinormalW, dVertexNormalW);\n}\n";
pc.shaderChunks.tonemappingAcesPS = "uniform float exposure;\nvec3 toneMap(vec3 color) {\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    vec3 x = color * exposure;\n    return (x*(tA*x+tB))/(x*(tC*x+tD)+tE);\n}\n";
pc.shaderChunks.tonemappingAces2PS = "uniform float exposure;\n// ACES approximation by Stephen Hill\n// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\nvec3 RRTAndODTFit(vec3 v) {\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\nvec3 toneMap(vec3 color) {\n    color *= exposure;\n    color = color * ACESInputMat;\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n    color = color * ACESOutputMat;\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n    return color;\n}\n";
pc.shaderChunks.tonemappingFilmicPS = "const float A =  0.15;\nconst float B =  0.50;\nconst float C =  0.10;\nconst float D =  0.20;\nconst float E =  0.02;\nconst float F =  0.30;\nconst float W =  11.2;\nuniform float exposure;\nvec3 uncharted2Tonemap(vec3 x) {\n   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\nvec3 toneMap(vec3 color) {\n    color = uncharted2Tonemap(color * exposure);\n    vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));\n    color = color * whiteScale;\n    return color;\n}\n";
pc.shaderChunks.tonemappingHejlPS = "uniform float exposure;\nvec3 toneMap(vec3 color) {\n    color *= exposure;\n    const float  A = 0.22, B = 0.3, C = .1, D = 0.2, E = .01, F = 0.3;\n    const float Scl = 1.25;\n    vec3 h = max( vec3(0.0), color - vec3(0.004) );\n    return (h*((Scl*A)*h+Scl*vec3(C*B,C*B,C*B))+Scl*vec3(D*E,D*E,D*E)) / (h*(A*h+vec3(B,B,B))+vec3(D*F,D*F,D*F)) - Scl*vec3(E/F,E/F,E/F);\n}\n";
pc.shaderChunks.tonemappingLinearPS = "uniform float exposure;\nvec3 toneMap(vec3 color) {\n    return color * exposure;\n}\n";
pc.shaderChunks.tonemappingNonePS = "vec3 toneMap(vec3 color) {\n    return color;\n}\n";
pc.shaderChunks.transformVS = "#ifdef PIXELSNAP\n    uniform vec4 uScreenSize;\n#endif\n#ifdef NINESLICED\n    #ifndef NINESLICE\n    #define NINESLICE\n    uniform vec4 innerOffset;\n    uniform vec2 outerScale;\n    uniform vec4 atlasRect;\n    varying vec2 vTiledUv;\n    #endif\n#endif\nmat4 getModelMatrix() {\n    #ifdef DYNAMICBATCH\n        return getBoneMatrix(vertex_boneIndices);\n    #elif defined(SKIN)\n        return matrix_model * (getBoneMatrix(vertex_boneIndices.x) * vertex_boneWeights.x +\n               getBoneMatrix(vertex_boneIndices.y) * vertex_boneWeights.y +\n               getBoneMatrix(vertex_boneIndices.z) * vertex_boneWeights.z +\n               getBoneMatrix(vertex_boneIndices.w) * vertex_boneWeights.w);\n    #elif defined(INSTANCING)\n        return mat4(instance_line1, instance_line2, instance_line3, instance_line4);\n    #else\n        return matrix_model;\n    #endif\n}\nvec4 getPosition() {\n    dModelMatrix = getModelMatrix();\n    vec3 localPos = vertex_position;\n    #ifdef NINESLICED\n        // outer and inner vertices are at the same position, scale both\n        localPos.xz *= outerScale;\n        // offset inner vertices inside\n        // (original vertices must be in [-1;1] range)\n        vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\n        vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\n        localPos.xz += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\n        vTiledUv = (localPos.xz - outerScale + innerOffset.xy) * -0.5 + 1.0; // uv = local pos - inner corner\n        localPos.xz *= -0.5; // move from -1;1 to -0.5;0.5\n        localPos = localPos.xzy;\n    #endif\n    vec4 posW = dModelMatrix * vec4(localPos, 1.0);\n    #ifdef SCREENSPACE\n        posW.zw = vec2(0.0, 1.0);\n    #endif\n    dPositionW = posW.xyz;\n    vec4 screenPos;\n    #ifdef UV1LAYOUT\n        screenPos = vec4(vertex_texCoord1.xy * 2.0 - 1.0, 0.5, 1);\n    #else\n        #ifdef SCREENSPACE\n            screenPos = posW;\n        #else\n            screenPos = matrix_viewProjection * posW;\n        #endif\n        #ifdef PIXELSNAP\n            // snap vertex to a pixel boundary\n            screenPos.xy = (screenPos.xy * 0.5) + 0.5;\n            screenPos.xy *= uScreenSize.xy;\n            screenPos.xy = floor(screenPos.xy);\n            screenPos.xy *= uScreenSize.zw;\n            screenPos.xy = (screenPos.xy * 2.0) - 1.0;\n        #endif\n    #endif\n    return screenPos;\n}\nvec3 getWorldPosition() {\n    return dPositionW;\n}\n";
pc.shaderChunks.transformDeclVS = "attribute vec3 vertex_position;\nuniform mat4 matrix_model;\nuniform mat4 matrix_viewProjection;\nvec3 dPositionW;\nmat4 dModelMatrix;\n";
pc.shaderChunks.uv0VS = "\nvec2 getUv0() {\n    return vertex_texCoord0;\n}\n";
pc.shaderChunks.uv1VS = "\nvec2 getUv1() {\n    return vertex_texCoord1;\n}\n";
pc.shaderChunks.uv9SliceVS = "#ifndef NINESLICE\n#define NINESLICE\nuniform vec4 innerOffset;\nuniform vec2 outerScale;\nuniform vec4 atlasRect;\nvarying vec2 vTiledUv;\n#endif\nvarying vec2 vMask;\nvec2 getUv0() {\n    vec2 uv = vertex_position.xz;\n    // offset inner vertices inside\n    // (original vertices must be in [-1;1] range)\n    vec2 positiveUnitOffset = clamp(vertex_position.xz, vec2(0.0), vec2(1.0));\n    vec2 negativeUnitOffset = clamp(-vertex_position.xz, vec2(0.0), vec2(1.0));\n    uv += (-positiveUnitOffset * innerOffset.xy + negativeUnitOffset * innerOffset.zw) * vertex_texCoord0.xy;\n    uv = uv * -0.5 + 0.5;\n    uv = uv * atlasRect.zw + atlasRect.xy;\n    vMask = vertex_texCoord0.xy;\n    return uv;\n}\n";
pc.shaderChunks.viewDirPS = "void getViewDir() {\n    dViewDirW = normalize(view_position - vPositionW);\n}\n";
pc.shaderChunks.viewNormalVS = "\n#ifndef VIEWMATRIX\n#define VIEWMATRIX\nuniform mat4 matrix_view;\n#endif\nvec3 getViewNormal() {\n    return mat3(matrix_view) * vNormalW;\n}\n";
pc.programlib = {gammaCode:function(value) {
  if (value === pc.GAMMA_SRGB || value === pc.GAMMA_SRGBFAST) {
    return pc.shaderChunks.gamma2_2PS;
  } else {
    if (value === pc.GAMMA_SRGBHDR) {
      return "#define HDR\n" + pc.shaderChunks.gamma2_2PS;
    }
  }
  return pc.shaderChunks.gamma1_0PS;
}, tonemapCode:function(value) {
  if (value === pc.TONEMAP_FILMIC) {
    return pc.shaderChunks.tonemappingFilmicPS;
  } else {
    if (value === pc.TONEMAP_LINEAR) {
      return pc.shaderChunks.tonemappingLinearPS;
    } else {
      if (value === pc.TONEMAP_HEJL) {
        return pc.shaderChunks.tonemappingHejlPS;
      } else {
        if (value === pc.TONEMAP_ACES) {
          return pc.shaderChunks.tonemappingAcesPS;
        } else {
          if (value === pc.TONEMAP_ACES2) {
            return pc.shaderChunks.tonemappingAces2PS;
          }
        }
      }
    }
  }
  return pc.shaderChunks.tonemappingNonePS;
}, fogCode:function(value) {
  if (value === "linear") {
    return pc.shaderChunks.fogLinearPS;
  } else {
    if (value === "exp") {
      return pc.shaderChunks.fogExpPS;
    } else {
      if (value === "exp2") {
        return pc.shaderChunks.fogExp2PS;
      } else {
        return pc.shaderChunks.fogNonePS;
      }
    }
  }
}, skinCode:function(device, chunks) {
  if (!chunks) {
    chunks = pc.shaderChunks;
  }
  if (device.supportsBoneTextures) {
    return chunks.skinTexVS;
  } else {
    return "#define BONE_LIMIT " + device.getBoneLimit() + "\n" + chunks.skinConstVS;
  }
}, precisionCode:function(device) {
  var pcode = "precision " + device.precision + " float;\n";
  if (device.webgl2) {
    pcode += "#ifdef GL2\nprecision " + device.precision + " sampler2DShadow;\n#endif\n";
  }
  return pcode;
}, versionCode:function(device) {
  return device.webgl2 ? "#version 300 es\n" : "";
}, dummyFragmentCode:function() {
  return "void main(void) {gl_FragColor = vec4(0.0);}";
}, begin:function() {
  return "void main(void)\n{\n";
}, end:function() {
  return "}\n";
}};
pc.programlib.basic = {generateKey:function(device, options) {
  var key = "basic";
  if (options.fog) {
    key += "_fog";
  }
  if (options.alphaTest) {
    key += "_atst";
  }
  if (options.vertexColors) {
    key += "_vcol";
  }
  if (options.diffuseMap) {
    key += "_diff";
  }
  key += "_" + options.pass;
  return key;
}, createShaderDefinition:function(device, options) {
  var attributes = {vertex_position:pc.SEMANTIC_POSITION};
  if (options.skin) {
    attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;
    attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;
  }
  if (options.vertexColors) {
    attributes.vertex_color = pc.SEMANTIC_COLOR;
  }
  if (options.diffuseMap) {
    attributes.vertex_texCoord0 = pc.SEMANTIC_TEXCOORD0;
  }
  var chunks = pc.shaderChunks;
  var code = "";
  code += chunks.transformDeclVS;
  if (options.skin) {
    code += pc.programlib.skinCode(device);
    code += chunks.transformSkinnedVS;
  } else {
    code += chunks.transformVS;
  }
  if (options.vertexColors) {
    code += "attribute vec4 vertex_color;\n";
    code += "varying vec4 vColor;\n";
  }
  if (options.diffuseMap) {
    code += "attribute vec2 vertex_texCoord0;\n";
    code += "varying vec2 vUv0;\n";
  }
  if (options.pass === pc.SHADER_DEPTH) {
    code += "varying float vDepth;\n";
    code += "#ifndef VIEWMATRIX\n";
    code += "#define VIEWMATRIX\n";
    code += "uniform mat4 matrix_view;\n";
    code += "#endif\n";
    code += "#ifndef CAMERAPLANES\n";
    code += "#define CAMERAPLANES\n";
    code += "uniform vec4 camera_params;\n\n";
    code += "#endif\n";
  }
  code += pc.programlib.begin();
  code += "   gl_Position = getPosition();\n";
  if (options.pass === pc.SHADER_DEPTH) {
    code += "    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z * camera_params.x;\n";
  }
  if (options.vertexColors) {
    code += "    vColor = vertex_color;\n";
  }
  if (options.diffuseMap) {
    code += "    vUv0 = vertex_texCoord0;\n";
  }
  code += pc.programlib.end();
  var vshader = code;
  code = pc.programlib.precisionCode(device);
  if (options.vertexColors) {
    code += "varying vec4 vColor;\n";
  } else {
    code += "uniform vec4 uColor;\n";
  }
  if (options.diffuseMap) {
    code += "varying vec2 vUv0;\n";
    code += "uniform sampler2D texture_diffuseMap;\n";
  }
  if (options.fog) {
    code += pc.programlib.fogCode(options.fog);
  }
  if (options.alphatest) {
    code += chunks.alphaTestPS;
  }
  if (options.pass === pc.SHADER_DEPTH) {
    code += "varying float vDepth;\n";
    code += chunks.packDepthPS;
  }
  code += pc.programlib.begin();
  if (options.vertexColors) {
    code += "    gl_FragColor = vColor;\n";
  } else {
    code += "    gl_FragColor = uColor;\n";
  }
  if (options.diffuseMap) {
    code += "    gl_FragColor *= texture2D(texture_diffuseMap, vUv0);\n";
  }
  if (options.alphatest) {
    code += "   alphaTest(gl_FragColor.a);\n";
  }
  if (options.pass === pc.SHADER_PICK) {
  } else {
    if (options.pass === pc.SHADER_DEPTH) {
      code += "    gl_FragColor = packFloat(vDepth);\n";
    } else {
      if (options.fog) {
        code += "   glFragColor.rgb = addFog(gl_FragColor.rgb);\n";
      }
    }
  }
  code += pc.programlib.end();
  var fshader = code;
  return {attributes:attributes, vshader:vshader, fshader:fshader};
}};
pc.programlib.particle = {generateKey:function(device, options) {
  var key = "particle";
  for (var prop in options) {
    if (options.hasOwnProperty(prop)) {
      key += options[prop];
    }
  }
  return key;
}, _animTex:function(options, chunk) {
  var vshader = "";
  vshader += options.animTexLoop ? chunk.particleAnimFrameLoopVS : chunk.particleAnimFrameClampVS;
  vshader += chunk.particleAnimTexVS;
  return vshader;
}, createShaderDefinition:function(device, options) {
  var chunk = pc.shaderChunks;
  var vshader = "";
  var fshader = pc.programlib.precisionCode(device) + "\n";
  if (device.webgl2) {
    vshader += "#define GL2\n";
    fshader += "#define GL2\n";
  }
  vshader += "#define VERTEXSHADER\n";
  if (options.animTex) {
    vshader += "\nuniform vec4 animTexParams;\n";
  }
  if (options.normal == 2) {
    vshader += "\nvarying mat3 ParticleMat;\n";
  }
  if (options.normal == 1) {
    vshader += "\nvarying vec3 Normal;\n";
  }
  if (options.soft) {
    vshader += "\nvarying float vDepth;\n";
  }
  if (!options.useCpu) {
    vshader += chunk.particle_initVS;
    vshader += options.pack8 ? chunk.particleInputRgba8PS : chunk.particleInputFloatPS;
    if (options.soft > 0) {
      vshader += chunk.screenDepthPS;
    }
    vshader += chunk.particleVS;
    if (options.localSpace) {
      vshader += chunk.particle_localShiftVS;
    }
    if (options.animTex) {
      vshader += this._animTex(options, chunk);
    }
    if (options.wrap) {
      vshader += chunk.particle_wrapVS;
    }
    if (options.alignToMotion) {
      vshader += chunk.particle_pointAlongVS;
    }
    vshader += options.mesh ? chunk.particle_meshVS : chunk.particle_billboardVS;
    if (options.normal == 1) {
      vshader += chunk.particle_normalVS;
    }
    if (options.normal == 2) {
      vshader += chunk.particle_TBNVS;
    }
    if (options.stretch > 0.0) {
      vshader += chunk.particle_stretchVS;
    }
    vshader += chunk.particle_endVS;
    if (options.soft > 0) {
      vshader += chunk.particle_softVS;
    }
  } else {
    if (options.soft > 0) {
      vshader += chunk.screenDepthPS;
    }
    vshader += chunk.particle_cpuVS;
    if (options.localSpace) {
      vshader += chunk.particle_localShiftVS;
    }
    if (options.animTex) {
      vshader += this._animTex(options, chunk);
    }
    if (options.alignToMotion) {
      vshader += chunk.particle_pointAlongVS;
    }
    vshader += options.mesh ? chunk.particle_meshVS : chunk.particle_billboardVS;
    if (options.normal == 1) {
      vshader += chunk.particle_normalVS;
    }
    if (options.normal == 2) {
      vshader += chunk.particle_TBNVS;
    }
    if (options.stretch > 0.0) {
      vshader += chunk.particle_stretchVS;
    }
    vshader += chunk.particle_cpu_endVS;
    if (options.soft > 0) {
      vshader += chunk.particle_softVS;
    }
  }
  vshader += "}\n";
  if (options.normal > 0) {
    if (options.normal == 1) {
      fshader += "\nvarying vec3 Normal;\n";
    } else {
      if (options.normal == 2) {
        fshader += "\nvarying mat3 ParticleMat;\n";
      }
    }
    fshader += "\nuniform vec3 lightCube[6];\n";
  }
  if (options.soft) {
    fshader += "\nvarying float vDepth;\n";
  }
  if (options.normal === 0 && options.fog === "none") {
    options.srgb = false;
  }
  fshader += pc.programlib.gammaCode(options.gamma);
  fshader += pc.programlib.tonemapCode(options.toneMap);
  if (options.fog === "linear") {
    fshader += chunk.fogLinearPS;
  } else {
    if (options.fog === "exp") {
      fshader += chunk.fogExpPS;
    } else {
      if (options.fog === "exp2") {
        fshader += chunk.fogExp2PS;
      } else {
        fshader += chunk.fogNonePS;
      }
    }
  }
  if (options.normal == 2) {
    fshader += "\nuniform sampler2D normalMap;\n";
  }
  if (options.soft > 0) {
    fshader += chunk.screenDepthPS;
  }
  fshader += chunk.particlePS;
  if (options.soft > 0) {
    fshader += chunk.particle_softPS;
  }
  if (options.normal == 1) {
    fshader += "\nvec3 normal = Normal;\n";
  }
  if (options.normal == 2) {
    fshader += chunk.particle_normalMapPS;
  }
  if (options.normal > 0) {
    fshader += options.halflambert ? chunk.particle_halflambertPS : chunk.particle_lambertPS;
  }
  if (options.normal > 0) {
    fshader += chunk.particle_lightingPS;
  }
  if (options.blend == pc.BLEND_NORMAL) {
    fshader += chunk.particle_blendNormalPS;
  } else {
    if (options.blend == pc.BLEND_ADDITIVE) {
      fshader += chunk.particle_blendAddPS;
    } else {
      if (options.blend == pc.BLEND_MULTIPLICATIVE) {
        fshader += chunk.particle_blendMultiplyPS;
      }
    }
  }
  fshader += chunk.particle_endPS;
  var attributes = pc.shaderChunks.collectAttribs(vshader);
  return {attributes:attributes, vshader:vshader, fshader:fshader};
}};
var _oldChunkWarn = function(oldName, newName) {
};
var _oldChunkFloat = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef MAPFLOAT\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkColor = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef MAPCOLOR\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTex = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef MAPTEXTURE\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTexColor = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "#undef MAPTEXTURECOLOR\n#ifdef MAPTEXTURE\n#ifdef MAPCOLOR\n#define MAPTEXTURECOLOR\n#endif\n#endif\n" + "#ifdef MAPTEXTURECOLOR\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTexFloat = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "#undef MAPTEXTUREFLOAT\n#ifdef MAPTEXTURE\n#ifdef MAPFLOAT\n#define MAPTEXTUREFLOAT\n#endif\n#endif\n" + "#ifdef MAPTEXTUREFLOAT\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkVert = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef MAPVERTEX\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkVertColor = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "#undef MAPVERTEXCOLOR\n#ifdef MAPVERTEX\n#ifdef MAPCOLOR\n#define MAPVERTEXCOLOR\n#endif\n#endif\n" + "#ifdef MAPVERTEXCOLOR\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkVertFloat = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "#undef MAPVERTEXFLOAT\n#ifdef MAPVERTEX\n#ifdef MAPFLOAT\n#define MAPVERTEXFLOAT\n#endif\n#endif\n" + "#ifdef MAPVERTEXFLOAT\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformSkin = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef SKIN\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformDynbatch = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef DYNAMICBATCH\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformInstanced = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef INSTANCING\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformPixelSnap = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef PIXELSNAP\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformScreenSpace = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef SCREENSPACE\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformScreenSpaceBatch = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "#undef SCREENSPACEBATCH\n#ifdef SCREENSPACE\n#ifdef BATCH\n#define SCREENSPACEBATCH\n#endif\n#endif\n" + "#ifdef SCREENSPACEBATCH\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
var _oldChunkTransformUv1 = function(s, o, p) {
  _oldChunkWarn(p, o);
  return "\n#ifdef UV1LAYOUT\n" + s + "\n#else\n" + pc.shaderChunks[o] + "\n#endif\n";
};
pc.programlib.standard = {_oldChunkToNew:{aoTexPS:{n:"aoPS", f:_oldChunkTex}, aoVertPS:{n:"aoPS", f:_oldChunkVert}, diffuseConstPS:{n:"diffusePS", f:_oldChunkColor}, diffuseTexPS:{n:"diffusePS", f:_oldChunkTex}, diffuseTexConstPS:{n:"diffusePS", f:_oldChunkTexColor}, diffuseVertPS:{n:"diffusePS", f:_oldChunkVert}, diffuseVertConstPS:{n:"diffusePS", f:_oldChunkVertColor}, emissiveConstPS:{n:"emissivePS", f:_oldChunkColor}, emissiveTexPS:{n:"emissivePS", f:_oldChunkTex}, emissiveTexConstPS:{n:"emissivePS", 
f:_oldChunkTexColor}, emissiveTexConstFloatPS:{n:"emissivePS", f:_oldChunkTexFloat}, emissiveVertPS:{n:"emissivePS", f:_oldChunkVert}, emissiveVertConstPS:{n:"emissivePS", f:_oldChunkVertColor}, emissiveVertConstFloatPS:{n:"emissivePS", f:_oldChunkVertFloat}, glossConstPS:{n:"glossPS", f:_oldChunkFloat}, glossTexPS:{n:"glossPS", f:_oldChunkTex}, glossTexConstPS:{n:"glossPS", f:_oldChunkTexFloat}, glossVertPS:{n:"glossPS", f:_oldChunkVert}, glossVertConstPS:{n:"glossPS", f:_oldChunkVertFloat}, metalnessConstPS:{n:"metalnessPS", 
f:_oldChunkFloat}, metalnessTexPS:{n:"metalnessPS", f:_oldChunkTex}, metalnessTexConstPS:{n:"metalnessPS", f:_oldChunkTexFloat}, metalnessVertPS:{n:"metalnessPS", f:_oldChunkVert}, metalnessVertConstPS:{n:"metalnessPS", f:_oldChunkVertFloat}, opacityConstPS:{n:"opacityPS", f:_oldChunkFloat}, opacityTexPS:{n:"opacityPS", f:_oldChunkTex}, opacityTexConstPS:{n:"opacityPS", f:_oldChunkTexFloat}, opacityVertPS:{n:"opacityPS", f:_oldChunkVert}, opacityVertConstPS:{n:"opacityPS", f:_oldChunkVertFloat}, 
specularConstPS:{n:"specularPS", f:_oldChunkColor}, specularTexPS:{n:"specularPS", f:_oldChunkTex}, specularTexConstPS:{n:"specularPS", f:_oldChunkTexColor}, specularVertPS:{n:"specularPS", f:_oldChunkVert}, specularVertConstPS:{n:"specularPS", f:_oldChunkVertColor}, transformBatchSkinnedVS:{n:"transformVS", f:_oldChunkTransformDynbatch}, transformInstancedVS:{n:"transformVS", f:_oldChunkTransformInstanced}, transformPixelSnapVS:{n:"transformVS", f:_oldChunkTransformPixelSnap}, transformScreenSpaceVS:{n:"transformVS", 
f:_oldChunkTransformScreenSpace}, transformScreenSpaceBatchSkinned:{n:"transformVS", f:_oldChunkTransformScreenSpaceBatch}, transformSkinned:{n:"transformVS", f:_oldChunkTransformSkin}, transformUv1:{n:"transformVS", f:_oldChunkTransformUv1}}, generateKey:function(device, options) {
  var props = [];
  var key = "standard";
  var light;
  for (var prop in options) {
    if (options.hasOwnProperty(prop)) {
      if (prop === "chunks") {
        for (var p in options[prop]) {
          if (options[prop].hasOwnProperty(p)) {
            props.push(p + options.chunks[p]);
          }
        }
      } else {
        if (options[prop]) {
          props.push(prop);
        }
      }
    }
  }
  props.sort();
  for (prop in props) {
    if (props.hasOwnProperty(prop)) {
      key += props[prop] + options[props[prop]];
    }
  }
  if (options.lights) {
    for (var i = 0; i < options.lights.length; i++) {
      light = options.lights[i];
      key += light.key;
    }
  }
  return pc.hashCode(key);
}, _correctChannel:function(p, chan) {
  if (pc._matTex2D[p] > 0) {
    if (pc._matTex2D[p] < chan.length) {
      return chan.substring(0, pc._matTex2D[p]);
    } else {
      if (pc._matTex2D[p] > chan.length) {
        var str = chan;
        var chr = str.charAt(str.length - 1);
        var addLen = pc._matTex2D[p] - str.length;
        for (var i = 0; i < addLen; i++) {
          str += chr;
        }
        return str;
      }
    }
    return chan;
  }
}, _setMapTransform:function(codes, name, id, uv) {
  codes[0] += "uniform vec4 texture_" + name + "MapTransform;\n";
  var checkId = id + uv * 100;
  if (!codes[3][checkId]) {
    codes[1] += "varying vec2 vUV" + uv + "_" + id + ";\n";
    codes[2] += "   vUV" + uv + "_" + id + " = uv" + uv + " * texture_" + name + "MapTransform.xy + texture_" + name + "MapTransform.zw;\n";
    codes[3][checkId] = true;
  }
  return codes;
}, _uvSource:function(id, uv) {
  return id === 0 ? "vUv" + uv : "vUV" + uv + "_" + id;
}, _addMapDef:function(name, enabled) {
  var s = "\n#undef " + name + "\n";
  if (enabled) {
    s += " #define " + name + "\n";
  }
  return s;
}, _addMapDefs:function(float, color, vertex, map) {
  var s = "";
  s += this._addMapDef("MAPFLOAT", float);
  s += this._addMapDef("MAPCOLOR", color);
  s += this._addMapDef("MAPVERTEX", vertex);
  s += this._addMapDef("MAPTEXTURE", map);
  return s;
}, _addMap:function(p, options, chunks, uvOffset, subCode, format) {
  var mname = p + "Map";
  var tint = options[p + "Tint"];
  var vert = options[p + "VertexColor"];
  var tex = options[mname];
  if (!subCode) {
    subCode = chunks[p + "PS"];
  }
  if (tex) {
    var uname = mname + "Uv";
    var tname = mname + "Transform";
    var cname = mname + "Channel";
    var uv = this._uvSource(options[tname], options[uname]) + uvOffset;
    subCode = subCode.replace(/\$UV/g, uv).replace(/\$CH/g, options[cname]);
    if (format !== undefined) {
      var fmt = format === 0 ? "texture2DSRGB" : format === 1 ? "texture2DRGBM" : "texture2D";
      subCode = subCode.replace(/\$texture2DSAMPLE/g, fmt);
    }
  }
  if (vert) {
    var vcname = p + "VertexColorChannel";
    subCode = subCode.replace(/\$VC/g, options[vcname]);
  }
  subCode = this._addMapDefs(tint === 1, tint === 3, vert, tex) + subCode;
  return subCode.replace(/\$/g, "");
}, _nonPointShadowMapProjection:function(device, light, shadowCoordArgs) {
  if (!light._normalOffsetBias || light._isVsm) {
    if (light._type === pc.LIGHTTYPE_SPOT) {
      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {
        return "       getShadowCoordPerspZbuffer" + shadowCoordArgs;
      } else {
        return "       getShadowCoordPersp" + shadowCoordArgs;
      }
    } else {
      return "       getShadowCoordOrtho" + shadowCoordArgs;
    }
  } else {
    if (light._type === pc.LIGHTTYPE_SPOT) {
      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives)) {
        return "       getShadowCoordPerspZbufferNormalOffset" + shadowCoordArgs;
      } else {
        return "       getShadowCoordPerspNormalOffset" + shadowCoordArgs;
      }
    } else {
      return "       getShadowCoordOrthoNormalOffset" + shadowCoordArgs;
    }
  }
}, _addVaryingIfNeeded:function(code, type, name) {
  return code.indexOf(name) >= 0 ? "varying " + type + " " + name + ";\n" : "";
}, createShaderDefinition:function(device, options) {
  var i, p;
  var lighting = options.lights.length > 0;
  if (options.dirLightMap) {
    lighting = true;
    options.useSpecular = true;
  }
  if (options.shadingModel === pc.SPECULAR_PHONG) {
    options.fresnelModel = 0;
    options.specularAntialias = false;
    options.prefilteredCubemap = false;
    options.dpAtlas = false;
    options.ambientSH = false;
  } else {
    options.fresnelModel = options.fresnelModel === 0 ? pc.FRESNEL_SCHLICK : options.fresnelModel;
  }
  var cubemapReflection = options.cubeMap || options.prefilteredCubemap && options.useSpecular && (!options.sphereMap && !options.dpAtlas);
  var reflections = options.sphereMap || cubemapReflection || options.dpAtlas;
  var useTangents = pc.precalculatedTangents;
  var useTexCubeLod = options.useTexCubeLod;
  if (options.cubeMap) {
    options.sphereMap = null;
  }
  if (options.dpAtlas) {
    options.prefilteredCubemap = null;
  }
  if (!options.useSpecular) {
    options.specularMap = options.glossMap = null;
  }
  var needsNormal = lighting || reflections || options.ambientSH || options.prefilteredCubemap || options.heightMap;
  var shadowPass = options.pass >= pc.SHADER_SHADOW && options.pass <= 17;
  this.options = options;
  var code = "";
  var codeBody = "";
  var varyings = "";
  var chunks = pc.shaderChunks;
  var lightType;
  var shadowCoordArgs;
  var chunk;
  var attributes = {vertex_position:pc.SEMANTIC_POSITION};
  if (options.chunks) {
    var customChunks = {};
    var newP;
    for (p in chunks) {
      if (chunks.hasOwnProperty(p)) {
        if (!options.chunks[p]) {
          customChunks[p] = chunks[p];
        } else {
          chunk = options.chunks[p];
          if (chunk.indexOf("vertex_normal") >= 0) {
            attributes.vertex_normal = pc.SEMANTIC_NORMAL;
          }
          if (chunk.indexOf("vertex_tangent") >= 0) {
            attributes.vertex_tangent = pc.SEMANTIC_TANGENT;
          }
          if (chunk.indexOf("vertex_texCoord0") >= 0) {
            attributes.vertex_texCoord0 = pc.SEMANTIC_TEXCOORD0;
          }
          if (chunk.indexOf("vertex_texCoord1") >= 0) {
            attributes.vertex_texCoord1 = pc.SEMANTIC_TEXCOORD1;
          }
          if (chunk.indexOf("vertex_color") >= 0) {
            attributes.vertex_color = pc.SEMANTIC_COLOR;
          }
          if (chunk.indexOf("vertex_boneWeights") >= 0) {
            attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;
          }
          if (chunk.indexOf("vertex_boneIndices") >= 0) {
            attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;
          }
          customChunks[p] = chunk;
        }
      }
    }
    for (p in options.chunks) {
      newP = this._oldChunkToNew[p];
      if (newP) {
        customChunks[newP.n] = newP.f(options.chunks[p], newP.n, p);
      }
    }
    chunks = customChunks;
  }
  code += chunks.baseVS;
  var mainShadowLight = -1;
  if (!options.noShadow && !options.twoSidedLighting) {
    for (i = 0; i < options.lights.length; i++) {
      lightType = options.lights[i]._type;
      if (options.lights[i].castShadows) {
        if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {
          code += "uniform mat4 light" + i + "_shadowMatrixVS;\n";
          code += "uniform vec3 light" + i + "_shadowParamsVS;\n";
          code += "uniform vec3 light" + i + (lightType === pc.LIGHTTYPE_DIRECTIONAL ? "_directionVS" : "_positionVS") + ";\n";
          mainShadowLight = i;
          break;
        }
      }
    }
    if (mainShadowLight >= 0) {
      code += chunks.shadowCoordVS;
    }
  }
  codeBody += "   vPositionW    = getWorldPosition();\n";
  if (options.pass === pc.SHADER_DEPTH) {
    code += "varying float vDepth;\n";
    code += "#ifndef VIEWMATRIX\n";
    code += "#define VIEWMATRIX\n";
    code += "uniform mat4 matrix_view;\n";
    code += "#endif\n";
    code += "#ifndef CAMERAPLANES\n";
    code += "#define CAMERAPLANES\n";
    code += "uniform vec4 camera_params;\n\n";
    code += "#endif\n";
    codeBody += "    vDepth = -(matrix_view * vec4(vPositionW,1.0)).z * camera_params.x;\n";
  }
  if (options.useInstancing) {
    attributes.instance_line1 = pc.SEMANTIC_TEXCOORD2;
    attributes.instance_line2 = pc.SEMANTIC_TEXCOORD3;
    attributes.instance_line3 = pc.SEMANTIC_TEXCOORD4;
    attributes.instance_line4 = pc.SEMANTIC_TEXCOORD5;
    code += chunks.instancingVS;
  }
  if (needsNormal) {
    attributes.vertex_normal = pc.SEMANTIC_NORMAL;
    codeBody += "   vNormalW    = dNormalW = getNormal();\n";
    if (options.sphereMap && device.fragmentUniformsCount <= 16) {
      code += chunks.viewNormalVS;
      codeBody += "   vNormalV    = getViewNormal();\n";
    }
    if ((options.heightMap || options.normalMap) && useTangents) {
      attributes.vertex_tangent = pc.SEMANTIC_TANGENT;
      code += chunks.tangentBinormalVS;
      codeBody += "   vTangentW   = getTangent();\n";
      codeBody += "   vBinormalW  = getBinormal();\n";
    }
    if (mainShadowLight >= 0) {
      lightType = options.lights[mainShadowLight]._type;
      if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {
        codeBody += "   dLightDirNormW = light" + mainShadowLight + "_directionVS;\n";
      } else {
        codeBody += "   getLightDirPoint(light" + mainShadowLight + "_positionVS);\n";
      }
      shadowCoordArgs = "(light" + mainShadowLight + "_shadowMatrixVS, light" + mainShadowLight + "_shadowParamsVS);\n";
      codeBody += this._nonPointShadowMapProjection(device, options.lights[mainShadowLight], shadowCoordArgs);
    }
  }
  var useUv = [];
  var useUnmodifiedUv = [];
  var maxUvSets = 2;
  var cname, mname, tname, uname;
  for (p in pc._matTex2D) {
    mname = p + "Map";
    if (options[p + "VertexColor"]) {
      cname = p + "VertexColorChannel";
      options[cname] = this._correctChannel(p, options[cname]);
    }
    if (options[mname]) {
      cname = mname + "Channel";
      tname = mname + "Transform";
      uname = mname + "Uv";
      options[uname] = Math.min(options[uname], maxUvSets - 1);
      options[cname] = this._correctChannel(p, options[cname]);
      var uvSet = options[uname];
      useUv[uvSet] = true;
      useUnmodifiedUv[uvSet] = useUnmodifiedUv[uvSet] || options[mname] && !options[tname];
    }
  }
  if (options.forceUv1) {
    useUv[1] = true;
  }
  for (i = 0; i < maxUvSets; i++) {
    if (useUv[i]) {
      attributes["vertex_texCoord" + i] = pc["SEMANTIC_TEXCOORD" + i];
      code += chunks["uv" + i + "VS"];
      codeBody += "   vec2 uv" + i + " = getUv" + i + "();\n";
    }
    if (useUnmodifiedUv[i]) {
      codeBody += "   vUv" + i + " = uv" + i + ";\n";
    }
  }
  var codes = [code, varyings, codeBody, []];
  for (p in pc._matTex2D) {
    mname = p + "Map";
    if (options[mname]) {
      tname = mname + "Transform";
      if (options[tname]) {
        uname = mname + "Uv";
        this._setMapTransform(codes, p, options[tname], options[uname]);
      }
    }
  }
  code = codes[0];
  varyings = codes[1];
  codeBody = codes[2];
  if (options.vertexColors) {
    attributes.vertex_color = pc.SEMANTIC_COLOR;
    codeBody += "   vVertexColor = vertex_color;\n";
  }
  if (options.skin) {
    attributes.vertex_boneWeights = pc.SEMANTIC_BLENDWEIGHT;
    attributes.vertex_boneIndices = pc.SEMANTIC_BLENDINDICES;
    code += pc.programlib.skinCode(device, chunks);
    code += "#define SKIN\n";
  } else {
    if (options.useInstancing) {
      code += "#define INSTANCING\n";
    }
  }
  if (options.screenSpace) {
    code += "#define SCREENSPACE\n";
  }
  if (options.pixelSnap) {
    code += "#define PIXELSNAP\n";
  }
  code += chunks.transformVS;
  if (needsNormal) {
    code += chunks.normalVS;
  }
  code += "\n";
  code += chunks.startVS;
  code += codeBody;
  code += "}";
  var vshader = code;
  var oldVars = varyings;
  varyings = "";
  varyings += this._addVaryingIfNeeded(code, "vec4", "vMainShadowUv");
  varyings += this._addVaryingIfNeeded(code, "vec4", "vVertexColor");
  varyings += this._addVaryingIfNeeded(code, "vec3", "vPositionW");
  varyings += this._addVaryingIfNeeded(code, "vec3", "vNormalV");
  varyings += this._addVaryingIfNeeded(code, "vec3", "vNormalW");
  varyings += this._addVaryingIfNeeded(code, "vec3", "vTangentW");
  varyings += this._addVaryingIfNeeded(code, "vec3", "vBinormalW");
  varyings += this._addVaryingIfNeeded(code, "vec2", "vUv0");
  varyings += this._addVaryingIfNeeded(code, "vec2", "vUv1");
  varyings += oldVars;
  vshader = varyings + vshader;
  var startCode = "";
  if (device.webgl2) {
    startCode = pc.programlib.versionCode(device);
    if (chunks.extensionVS) {
      startCode += chunks.extensionVS + "\n";
    }
    vshader = startCode + chunks.gles3VS + vshader;
  } else {
    if (chunks.extensionVS) {
      startCode = chunks.extensionVS + "\n";
    }
    vshader = startCode + vshader;
  }
  if (options.forceFragmentPrecision && options.forceFragmentPrecision != "highp" && options.forceFragmentPrecision !== "mediump" && options.forceFragmentPrecision !== "lowp") {
    options.forceFragmentPrecision = null;
  }
  if (options.forceFragmentPrecision) {
    if (options.forceFragmentPrecision === "highp" && device.maxPrecision !== "highp") {
      options.forceFragmentPrecision = "mediump";
    }
    if (options.forceFragmentPrecision === "mediump" && device.maxPrecision === "lowp") {
      options.forceFragmentPrecision = "lowp";
    }
  }
  var fshader;
  code = "";
  if (device.webgl2) {
    code += pc.programlib.versionCode(device);
  }
  if (device.extStandardDerivatives && !device.webgl2) {
    code += "#extension GL_OES_standard_derivatives : enable\n\n";
  }
  if (chunks.extensionPS) {
    code += chunks.extensionPS + "\n";
  }
  if (device.webgl2) {
    code += chunks.gles3PS;
  }
  code += options.forceFragmentPrecision ? "precision " + options.forceFragmentPrecision + " float;\n\n" : pc.programlib.precisionCode(device);
  if (options.pass === pc.SHADER_PICK) {
    code += "uniform vec4 uColor;";
    code += varyings;
    if (options.alphaTest) {
      code += "float dAlpha;\n";
      code += this._addMap("opacity", options, chunks, "");
      code += chunks.alphaTestPS;
    }
    code += pc.programlib.begin();
    if (options.alphaTest) {
      code += "   getOpacity();\n";
      code += "   alphaTest(dAlpha);\n";
    }
    code += "    gl_FragColor = uColor;\n";
    code += pc.programlib.end();
    return {attributes:attributes, vshader:vshader, fshader:code};
  } else {
    if (options.pass === pc.SHADER_DEPTH) {
      code += "varying float vDepth;\n";
      code += varyings;
      code += chunks.packDepthPS;
      if (options.alphaTest) {
        code += "float dAlpha;\n";
        code += this._addMap("opacity", options, chunks, "");
        code += chunks.alphaTestPS;
      }
      code += pc.programlib.begin();
      if (options.alphaTest) {
        code += "   getOpacity();\n";
        code += "   alphaTest(dAlpha);\n";
      }
      code += "    gl_FragColor = packFloat(vDepth);\n";
      code += pc.programlib.end();
      return {attributes:attributes, vshader:vshader, fshader:code};
    } else {
      if (shadowPass) {
        var smode = options.pass - pc.SHADER_SHADOW;
        var numShadowModes = 5;
        lightType = Math.floor(smode / numShadowModes);
        var shadowType = smode - lightType * numShadowModes;
        if (device.extStandardDerivatives && !device.webgl2) {
          code += "uniform vec2 polygonOffset;\n";
        }
        if (shadowType === pc.SHADOW_VSM32) {
          if (device.extTextureFloatHighPrecision) {
            code += "#define VSM_EXPONENT 15.0\n\n";
          } else {
            code += "#define VSM_EXPONENT 5.54\n\n";
          }
        } else {
          if (shadowType === pc.SHADOW_VSM16) {
            code += "#define VSM_EXPONENT 5.54\n\n";
          }
        }
        if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {
          code += "uniform vec3 view_position;\n";
          code += "uniform float light_radius;\n";
        }
        code += varyings;
        if (options.alphaTest) {
          code += "float dAlpha;\n";
          code += this._addMap("opacity", options, chunks, "");
          code += chunks.alphaTestPS;
        }
        if (shadowType === pc.SHADOW_PCF3 && (!device.webgl2 || lightType === pc.LIGHTTYPE_POINT)) {
          code += chunks.packDepthPS;
        } else {
          if (shadowType === pc.SHADOW_VSM8) {
            code += "vec2 encodeFloatRG( float v ) {\n";
            code += "    vec2 enc = vec2(1.0, 255.0) * v;\n";
            code += "    enc = fract(enc);\n";
            code += "    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n";
            code += "    return enc;\n";
            code += "}\n\n";
          }
        }
        code += pc.programlib.begin();
        if (options.alphaTest) {
          code += "   getOpacity();\n";
          code += "   alphaTest(dAlpha);\n";
        }
        var isVsm = shadowType === pc.SHADOW_VSM8 || shadowType === pc.SHADOW_VSM16 || shadowType === pc.SHADOW_VSM32;
        if (lightType === pc.LIGHTTYPE_POINT || isVsm && lightType !== pc.LIGHTTYPE_DIRECTIONAL) {
          code += "   float depth = min(distance(view_position, vPositionW) / light_radius, 0.99999);\n";
        } else {
          code += "   float depth = gl_FragCoord.z;\n";
        }
        if (shadowType === pc.SHADOW_PCF3 && (!device.webgl2 || lightType === pc.LIGHTTYPE_POINT)) {
          if (device.extStandardDerivatives && !device.webgl2) {
            code += "   float minValue = 2.3374370500153186e-10; //(1.0 / 255.0) / (256.0 * 256.0 * 256.0);\n";
            code += "   depth += polygonOffset.x * max(abs(dFdx(depth)), abs(dFdy(depth))) + minValue * polygonOffset.y;\n";
            code += "   gl_FragColor = packFloat(depth);\n";
          } else {
            code += "   gl_FragColor = packFloat(depth);\n";
          }
        } else {
          if (shadowType === pc.SHADOW_PCF3 || shadowType === pc.SHADOW_PCF5) {
            code += "   gl_FragColor = vec4(1.0);\n";
          } else {
            if (shadowType === pc.SHADOW_VSM8) {
              code += "   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));\n";
            } else {
              code += chunks.storeEVSMPS;
            }
          }
        }
        code += pc.programlib.end();
        return {attributes:attributes, vshader:vshader, fshader:code};
      }
    }
  }
  if (options.customFragmentShader) {
    fshader = code + options.customFragmentShader;
    return {attributes:attributes, vshader:vshader, fshader:fshader, tag:pc.SHADERTAG_MATERIAL};
  }
  code += varyings;
  code += chunks.basePS;
  var codeBegin = code;
  code = "";
  var numShadowLights = 0;
  var shadowTypeUsed = [];
  var useVsm = false;
  var usePerspZbufferShadow = false;
  var light;
  for (i = 0; i < options.lights.length; i++) {
    light = options.lights[i];
    lightType = light._type;
    code += "uniform vec3 light" + i + "_color;\n";
    if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {
      code += "uniform vec3 light" + i + "_direction;\n";
    } else {
      code += "uniform vec3 light" + i + "_position;\n";
      code += "uniform float light" + i + "_radius;\n";
      if (lightType === pc.LIGHTTYPE_SPOT) {
        code += "uniform vec3 light" + i + "_direction;\n";
        code += "uniform float light" + i + "_innerConeAngle;\n";
        code += "uniform float light" + i + "_outerConeAngle;\n";
      }
    }
    if (light.castShadows && !options.noShadow) {
      code += "uniform mat4 light" + i + "_shadowMatrix;\n";
      if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {
        code += "uniform vec4 light" + i + "_shadowParams;\n";
      } else {
        code += "uniform vec3 light" + i + "_shadowParams;\n";
      }
      if (lightType === pc.LIGHTTYPE_POINT) {
        code += "uniform samplerCube light" + i + "_shadowMap;\n";
      } else {
        if (light._isPcf && device.webgl2) {
          code += "uniform sampler2DShadow light" + i + "_shadowMap;\n";
        } else {
          code += "uniform sampler2D light" + i + "_shadowMap;\n";
        }
      }
      numShadowLights++;
      shadowTypeUsed[light._shadowType] = true;
      if (light._isVsm) {
        useVsm = true;
      }
      if (light._isPcf && (device.webgl2 || device.extStandardDerivatives) && lightType === pc.LIGHTTYPE_SPOT) {
        usePerspZbufferShadow = true;
      }
    }
    if (light._cookie) {
      if (light._cookie._cubemap) {
        if (lightType === pc.LIGHTTYPE_POINT) {
          code += "uniform samplerCube light" + i + "_cookie;\n";
          code += "uniform float light" + i + "_cookieIntensity;\n";
          if (!light.castShadows || options.noShadow) {
            code += "uniform mat4 light" + i + "_shadowMatrix;\n";
          }
        }
      } else {
        if (lightType === pc.LIGHTTYPE_SPOT) {
          code += "uniform sampler2D light" + i + "_cookie;\n";
          code += "uniform float light" + i + "_cookieIntensity;\n";
          if (!light.castShadows || options.noShadow) {
            code += "uniform mat4 light" + i + "_shadowMatrix;\n";
          }
          if (light._cookieTransform) {
            code += "uniform vec4 light" + i + "_cookieMatrix;\n";
            code += "uniform vec2 light" + i + "_cookieOffset;\n";
          }
        }
      }
    }
  }
  code += "\n";
  var uvOffset = options.heightMap ? " + dUvOffset" : "";
  var tbn = options.fastTbn ? chunks.TBNfastPS : chunks.TBNPS;
  if (needsNormal) {
    if (options.normalMap && useTangents) {
      code += options.packedNormal ? chunks.normalXYPS : chunks.normalXYZPS;
      var uv = this._uvSource(options.normalMapTransform, options.normalMapUv) + uvOffset;
      if (options.needsNormalFloat) {
        code += (options.fastTbn ? chunks.normalMapFloatTBNfastPS : chunks.normalMapFloatPS).replace(/\$UV/g, uv);
      } else {
        code += chunks.normalMapPS.replace(/\$UV/g, uv);
      }
      code += tbn;
    } else {
      code += chunks.normalVertexPS;
    }
  }
  code += pc.programlib.gammaCode(options.gamma);
  code += pc.programlib.tonemapCode(options.toneMap);
  code += pc.programlib.fogCode(options.fog);
  if (options.useRgbm) {
    code += chunks.rgbmPS;
  }
  if (cubemapReflection || options.prefilteredCubemap) {
    code += options.fixSeams ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS;
  }
  if (needsNormal) {
    code += options.cubeMapProjection > 0 ? chunks.cubeMapProjectBoxPS : chunks.cubeMapProjectNonePS;
    code += options.skyboxIntensity ? chunks.envMultiplyPS : chunks.envConstPS;
  }
  code += this._addMap("diffuse", options, chunks, uvOffset);
  if (options.blendType !== pc.BLEND_NONE || options.alphaTest || options.alphaToCoverage) {
    code += this._addMap("opacity", options, chunks, uvOffset);
  }
  code += this._addMap("emissive", options, chunks, uvOffset, null, options.emissiveFormat);
  if (options.useSpecular && (lighting || reflections)) {
    if (options.specularAntialias && options.normalMap) {
      if (options.needsNormalFloat && needsNormal) {
        code += chunks.specularAaToksvigFloatPS;
      } else {
        code += chunks.specularAaToksvigPS;
      }
    } else {
      code += chunks.specularAaNonePS;
    }
    code += this._addMap(options.useMetalness ? "metalness" : "specular", options, chunks, uvOffset);
    code += this._addMap("gloss", options, chunks, uvOffset);
    if (options.fresnelModel > 0) {
      if (options.fresnelModel === pc.FRESNEL_SIMPLE) {
        code += chunks.fresnelSimplePS;
      } else {
        if (options.fresnelModel === pc.FRESNEL_SCHLICK) {
          code += chunks.fresnelSchlickPS;
        } else {
          if (options.fresnelModel === pc.FRESNEL_COMPLEX) {
            code += chunks.fresnelComplexPS;
          }
        }
      }
    }
  }
  if (options.heightMap) {
    if (!options.normalMap) {
      code += tbn;
    }
    code += this._addMap("height", options, chunks, "", chunks.parallaxPS);
  }
  var useAo = options.aoMap || options.aoVertexColor;
  if (useAo) {
    code += this._addMap("ao", options, chunks, uvOffset, options.aoVertexColor ? chunks.aoVertPS : chunks.aoTexPS);
    if (options.occludeSpecular) {
      if (options.occludeSpecular === pc.SPECOCC_AO) {
        code += options.occludeSpecularFloat ? chunks.aoSpecOccSimplePS : chunks.aoSpecOccConstSimplePS;
      } else {
        code += options.occludeSpecularFloat ? chunks.aoSpecOccPS : chunks.aoSpecOccConstPS;
      }
    }
  }
  var reflectionDecode = options.rgbmReflection ? "decodeRGBM" : options.hdrReflection ? "" : "gammaCorrectInput";
  if (cubemapReflection) {
    if (options.prefilteredCubemap) {
      if (useTexCubeLod) {
        code += chunks.reflectionPrefilteredCubeLodPS.replace(/\$DECODE/g, reflectionDecode);
      } else {
        code += chunks.reflectionPrefilteredCubePS.replace(/\$DECODE/g, reflectionDecode);
      }
    } else {
      code += chunks.reflectionCubePS.replace(/\$textureCubeSAMPLE/g, options.rgbmReflection ? "textureCubeRGBM" : options.hdrReflection ? "textureCube" : "textureCubeSRGB");
    }
  }
  if (options.sphereMap) {
    var scode = device.fragmentUniformsCount > 16 ? chunks.reflectionSpherePS : chunks.reflectionSphereLowPS;
    scode = scode.replace(/\$texture2DSAMPLE/g, options.rgbmReflection ? "texture2DRGBM" : options.hdrReflection ? "texture2D" : "texture2DSRGB");
    code += scode;
  }
  if (options.dpAtlas) {
    code += chunks.reflectionDpAtlasPS.replace(/\$texture2DSAMPLE/g, options.rgbmReflection ? "texture2DRGBM" : options.hdrReflection ? "texture2D" : "texture2DSRGB");
  }
  if ((cubemapReflection || options.sphereMap || options.dpAtlas) && options.refraction) {
    code += chunks.refractionPS;
  }
  if (numShadowLights > 0) {
    if (shadowTypeUsed[pc.SHADOW_PCF3]) {
      code += chunks.shadowStandardPS;
    }
    if (shadowTypeUsed[pc.SHADOW_PCF5]) {
      code += chunks.shadowStandardGL2PS;
    }
    if (useVsm) {
      code += chunks.shadowVSM_commonPS;
      if (shadowTypeUsed[pc.SHADOW_VSM8]) {
        code += chunks.shadowVSM8PS;
      }
      if (shadowTypeUsed[pc.SHADOW_VSM16]) {
        code += device.extTextureHalfFloatLinear ? chunks.shadowEVSMPS.replace(/\$/g, "16") : chunks.shadowEVSMnPS.replace(/\$/g, "16");
      }
      if (shadowTypeUsed[pc.SHADOW_VSM32]) {
        code += device.extTextureFloatLinear ? chunks.shadowEVSMPS.replace(/\$/g, "32") : chunks.shadowEVSMnPS.replace(/\$/g, "32");
      }
    }
    if (device.webgl2 || device.extStandardDerivatives) {
    } else {
      code += chunks.biasConstPS;
    }
    code += chunks.shadowCoordPS + chunks.shadowCommonPS;
    if (usePerspZbufferShadow) {
      code += chunks.shadowCoordPerspZbufferPS;
    }
    if (mainShadowLight >= 0) {
      if (shadowTypeUsed[pc.SHADOW_PCF3]) {
        code += chunks.shadowStandardVSPS;
      }
      if (shadowTypeUsed[pc.SHADOW_PCF5]) {
        code += chunks.shadowStandardGL2VSPS;
      }
      if (useVsm) {
        if (shadowTypeUsed[pc.SHADOW_VSM8]) {
          code += chunks.shadowVSMVSPS.replace(/\$VSM/g, "VSM8").replace(/\$/g, "8");
        }
        if (shadowTypeUsed[pc.SHADOW_VSM16]) {
          code += chunks.shadowVSMVSPS.replace(/\$VSM/g, "VSM16").replace(/\$/g, "16");
        }
        if (shadowTypeUsed[pc.SHADOW_VSM32]) {
          code += chunks.shadowVSMVSPS.replace(/\$VSM/g, "VSM32").replace(/\$/g, "32");
        }
      }
    }
  }
  if (lighting) {
    code += chunks.lightDiffuseLambertPS;
  }
  var useOldAmbient = false;
  if (options.useSpecular) {
    if (lighting) {
      code += options.shadingModel === pc.SPECULAR_PHONG ? chunks.lightSpecularPhongPS : chunks.lightSpecularBlinnPS;
    }
    if (options.sphereMap || cubemapReflection || options.dpAtlas || options.fresnelModel > 0) {
      if (options.fresnelModel > 0) {
        if (options.conserveEnergy) {
          code += chunks.combineDiffuseSpecularPS;
        } else {
          code += chunks.combineDiffuseSpecularNoConservePS;
        }
      } else {
        code += chunks.combineDiffuseSpecularOldPS;
      }
    } else {
      if (options.diffuseMap) {
        code += chunks.combineDiffuseSpecularNoReflPS;
      } else {
        code += chunks.combineDiffuseSpecularNoReflSeparateAmbientPS;
        useOldAmbient = true;
      }
    }
  } else {
    code += chunks.combineDiffusePS;
  }
  var addAmbient = true;
  if (options.lightMap || options.lightVertexColor) {
    code += this._addMap("light", options, chunks, uvOffset, options.dirLightMap ? chunks.lightmapDirPS : chunks.lightmapSinglePS, options.lightMapFormat);
    addAmbient = options.lightMapWithoutAmbient;
  }
  if (addAmbient) {
    var ambientDecode = options.rgbmAmbient ? "decodeRGBM" : options.hdrAmbient ? "" : "gammaCorrectInput";
    if (options.ambientSH) {
      code += chunks.ambientSHPS;
    } else {
      if (options.prefilteredCubemap) {
        if (useTexCubeLod) {
          code += chunks.ambientPrefilteredCubeLodPS.replace(/\$DECODE/g, ambientDecode);
        } else {
          code += chunks.ambientPrefilteredCubePS.replace(/\$DECODE/g, ambientDecode);
        }
      } else {
        code += chunks.ambientConstantPS;
      }
    }
  }
  if (options.ambientTint && !useOldAmbient) {
    code += "uniform vec3 material_ambient;\n";
  }
  if (options.alphaTest) {
    code += chunks.alphaTestPS;
  }
  if (options.msdf) {
    code += chunks.msdfPS;
  }
  if (needsNormal) {
    code += chunks.viewDirPS;
    if (options.useSpecular) {
      code += chunks.reflDirPS;
    }
  }
  var hasPointLights = false;
  var usesLinearFalloff = false;
  var usesInvSquaredFalloff = false;
  var usesSpot = false;
  var usesCookie = false;
  var usesCookieNow;
  code += chunks.startPS;
  if (needsNormal) {
    if (options.twoSidedLighting) {
      code += "   dVertexNormalW = gl_FrontFacing ? vNormalW : -vNormalW;\n";
    } else {
      code += "   dVertexNormalW = vNormalW;\n";
    }
    if (options.heightMap || options.normalMap) {
      if (options.twoSidedLighting) {
        code += "   dTangentW = gl_FrontFacing ? vTangentW : -vTangentW;\n";
        code += "   dBinormalW = gl_FrontFacing ? vBinormalW : -vBinormalW;\n";
      } else {
        code += "   dTangentW = vTangentW;\n";
        code += "   dBinormalW = vBinormalW;\n";
      }
    }
  }
  var opacityParallax = false;
  if (options.blendType === pc.BLEND_NONE && !options.alphaTest && !options.alphaToCoverage) {
    code += "   dAlpha = 1.0;\n";
  } else {
    if (options.heightMap && options.opacityMap) {
      opacityParallax = true;
    } else {
      code += "   getOpacity();\n";
      if (options.alphaTest) {
        code += "   alphaTest(dAlpha);\n";
      }
    }
  }
  if (needsNormal) {
    code += "   getViewDir();\n";
    if (options.heightMap || options.normalMap) {
      code += "   getTBN();\n";
    }
    if (options.heightMap) {
      code += "   getParallax();\n";
    }
    if (opacityParallax) {
      code += "   getOpacity();\n";
      if (options.alphaTest) {
        code += "   alphaTest(dAlpha);\n";
      }
    }
    code += "   getNormal();\n";
    if (options.useSpecular) {
      code += "   getReflDir();\n";
    }
  }
  code += "   getAlbedo();\n";
  if (lighting && options.useSpecular || reflections) {
    code += "   getSpecularity();\n";
    code += "   getGlossiness();\n";
    if (options.fresnelModel > 0) {
      code += "   getFresnel();\n";
    }
  }
  if (addAmbient) {
    code += "   addAmbient();\n";
  }
  if (options.ambientTint && !useOldAmbient) {
    code += "   dDiffuseLight *= material_ambient;\n";
  }
  if (useAo && !options.occludeDirect) {
    code += "    applyAO();\n";
  }
  if (options.lightMap || options.lightVertexColor) {
    code += "   addLightMap();\n";
  }
  if (lighting || reflections) {
    if (cubemapReflection || options.sphereMap || options.dpAtlas) {
      code += "   addReflection();\n";
    }
    if (options.dirLightMap) {
      code += "   addDirLightMap();\n";
    }
    for (i = 0; i < options.lights.length; i++) {
      light = options.lights[i];
      lightType = light._type;
      usesCookieNow = false;
      if (lightType === pc.LIGHTTYPE_DIRECTIONAL) {
        code += "   dLightDirNormW = light" + i + "_direction;\n";
        code += "   dAtten = 1.0;\n";
      } else {
        if (light._cookie) {
          if (lightType === pc.LIGHTTYPE_SPOT && !light._cookie._cubemap) {
            usesCookie = true;
            usesCookieNow = true;
          } else {
            if (lightType === pc.LIGHTTYPE_POINT && light._cookie._cubemap) {
              usesCookie = true;
              usesCookieNow = true;
            }
          }
        }
        code += "   getLightDirPoint(light" + i + "_position);\n";
        hasPointLights = true;
        if (usesCookieNow) {
          if (lightType === pc.LIGHTTYPE_SPOT) {
            code += "   dAtten3 = getCookie2D" + (light._cookieFalloff ? "" : "Clip") + (light._cookieTransform ? "Xform" : "") + "(light" + i + "_cookie, light" + i + "_shadowMatrix, light" + i + "_cookieIntensity" + (light._cookieTransform ? ", light" + i + "_cookieMatrix, light" + i + "_cookieOffset" : "") + ")." + light._cookieChannel + ";\n";
          } else {
            code += "   dAtten3 = getCookieCube(light" + i + "_cookie, light" + i + "_shadowMatrix, light" + i + "_cookieIntensity)." + light._cookieChannel + ";\n";
          }
        }
        if (light._falloffMode === pc.LIGHTFALLOFF_LINEAR) {
          code += "   dAtten = getFalloffLinear(light" + i + "_radius);\n";
          usesLinearFalloff = true;
        } else {
          code += "   dAtten = getFalloffInvSquared(light" + i + "_radius);\n";
          usesInvSquaredFalloff = true;
        }
        code += "   if (dAtten > 0.00001) {\n";
        if (lightType === pc.LIGHTTYPE_SPOT) {
          if (!(usesCookieNow && !light._cookieFalloff)) {
            code += "       dAtten *= getSpotEffect(light" + i + "_direction, light" + i + "_innerConeAngle, light" + i + "_outerConeAngle);\n";
            usesSpot = true;
          }
        }
      }
      code += "       dAtten *= getLightDiffuse();\n";
      if (light.castShadows && !options.noShadow) {
        var shadowReadMode = null;
        var evsmExp;
        if (light._shadowType === pc.SHADOW_VSM8) {
          shadowReadMode = "VSM8";
          evsmExp = "0.0";
        } else {
          if (light._shadowType === pc.SHADOW_VSM16) {
            shadowReadMode = "VSM16";
            evsmExp = "5.54";
          } else {
            if (light._shadowType === pc.SHADOW_VSM32) {
              shadowReadMode = "VSM32";
              if (device.extTextureFloatHighPrecision) {
                evsmExp = "15.0";
              } else {
                evsmExp = "5.54";
              }
            } else {
              if (light._shadowType === pc.SHADOW_PCF5) {
                shadowReadMode = "PCF5x5";
              } else {
                shadowReadMode = "PCF3x3";
              }
            }
          }
        }
        if (shadowReadMode !== null) {
          if (lightType === pc.LIGHTTYPE_POINT) {
            shadowCoordArgs = "(light" + i + "_shadowMap, light" + i + "_shadowParams);\n";
            if (light._normalOffsetBias) {
              code += "       normalOffsetPointShadow(light" + i + "_shadowParams);\n";
            }
            code += "       dAtten *= getShadowPoint" + shadowReadMode + shadowCoordArgs;
          } else {
            if (mainShadowLight === i) {
              shadowReadMode += "VS";
            } else {
              shadowCoordArgs = "(light" + i + "_shadowMatrix, light" + i + "_shadowParams);\n";
              code += this._nonPointShadowMapProjection(device, options.lights[i], shadowCoordArgs);
            }
            if (lightType === pc.LIGHTTYPE_SPOT) {
              shadowReadMode = "Spot" + shadowReadMode;
            }
            code += "       dAtten *= getShadow" + shadowReadMode + "(light" + i + "_shadowMap, light" + i + "_shadowParams" + (light._isVsm ? ", " + evsmExp : "") + ");\n";
          }
        }
      }
      code += "       dDiffuseLight += dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
      if (options.useSpecular) {
        code += "       dAtten *= getLightSpecular();\n";
        code += "       dSpecularLight += dAtten * light" + i + "_color" + (usesCookieNow ? " * dAtten3" : "") + ";\n";
      }
      if (lightType !== pc.LIGHTTYPE_DIRECTIONAL) {
        code += "   }\n";
      }
      code += "\n";
    }
    if ((cubemapReflection || options.sphereMap || options.dpAtlas) && options.refraction) {
      code += "   addRefraction();\n";
    }
  }
  code += "\n";
  if (useAo) {
    if (options.occludeDirect) {
      code += "    applyAO();\n";
    }
    if (options.occludeSpecular) {
      code += "    occludeSpecular();\n";
    }
  }
  code += chunks.endPS;
  if (options.blendType === pc.BLEND_NORMAL || options.blendType === pc.BLEND_ADDITIVEALPHA || options.alphaToCoverage) {
    code += chunks.outputAlphaPS;
  } else {
    if (options.blendType === pc.BLEND_PREMULTIPLIED) {
      code += chunks.outputAlphaPremulPS;
    } else {
      code += chunks.outputAlphaOpaquePS;
    }
  }
  if (options.msdf) {
    code += "   gl_FragColor = applyMsdf(gl_FragColor);\n";
  }
  code += "\n";
  code += pc.programlib.end();
  if (hasPointLights) {
    code = chunks.lightDirPointPS + code;
  }
  if (usesLinearFalloff) {
    code = chunks.falloffLinearPS + code;
  }
  if (usesInvSquaredFalloff) {
    code = chunks.falloffInvSquaredPS + code;
  }
  if (usesSpot) {
    code = chunks.spotPS + code;
  }
  if (usesCookie) {
    code = chunks.cookiePS + code;
  }
  var structCode = "";
  if (code.includes("dReflection")) {
    structCode += "vec4 dReflection;\n";
  }
  if (code.includes("dTBN")) {
    structCode += "mat3 dTBN;\n";
  }
  if (code.includes("dAlbedo")) {
    structCode += "vec3 dAlbedo;\n";
  }
  if (code.includes("dEmission")) {
    structCode += "vec3 dEmission;\n";
  }
  if (code.includes("dNormalW")) {
    structCode += "vec3 dNormalW;\n";
  }
  if (code.includes("dVertexNormalW")) {
    structCode += "vec3 dVertexNormalW;\n";
  }
  if (code.includes("dTangentW")) {
    structCode += "vec3 dTangentW;\n";
  }
  if (code.includes("dBinormalW")) {
    structCode += "vec3 dBinormalW;\n";
  }
  if (code.includes("dViewDirW")) {
    structCode += "vec3 dViewDirW;\n";
  }
  if (code.includes("dReflDirW")) {
    structCode += "vec3 dReflDirW;\n";
  }
  if (code.includes("dDiffuseLight")) {
    structCode += "vec3 dDiffuseLight;\n";
  }
  if (code.includes("dSpecularLight")) {
    structCode += "vec3 dSpecularLight;\n";
  }
  if (code.includes("dLightDirNormW")) {
    structCode += "vec3 dLightDirNormW;\n";
  }
  if (code.includes("dLightDirW")) {
    structCode += "vec3 dLightDirW;\n";
  }
  if (code.includes("dLightPosW")) {
    structCode += "vec3 dLightPosW;\n";
  }
  if (code.includes("dShadowCoord")) {
    structCode += "vec3 dShadowCoord;\n";
  }
  if (code.includes("dNormalMap")) {
    structCode += "vec3 dNormalMap;\n";
  }
  if (code.includes("dSpecularity")) {
    structCode += "vec3 dSpecularity;\n";
  }
  if (code.includes("dUvOffset")) {
    structCode += "vec2 dUvOffset;\n";
  }
  if (code.includes("dGlossiness")) {
    structCode += "float dGlossiness;\n";
  }
  if (code.includes("dAlpha")) {
    structCode += "float dAlpha;\n";
  }
  if (code.includes("dAtten")) {
    structCode += "float dAtten;\n";
  }
  if (code.includes("dAtten3")) {
    structCode += "vec3 dAtten3;\n";
  }
  if (code.includes("dAo")) {
    structCode += "float dAo;\n";
  }
  if (code.includes("dMsdf")) {
    structCode += "vec4 dMsdf;\n";
  }
  code = codeBegin + structCode + code;
  fshader = code;
  return {attributes:attributes, vshader:vshader, fshader:fshader, tag:pc.SHADERTAG_MATERIAL};
}};
pc.programlib.skybox = {generateKey:function(device, options) {
  var key = "skybox" + options.rgbm + " " + options.hdr + " " + options.fixSeams + "" + options.toneMapping + "" + options.gamma + "" + options.useIntensity + "" + options.mip;
  return key;
}, createShaderDefinition:function(device, options) {
  var chunks = pc.shaderChunks;
  var mip2size = [128, 64, 16, 8, 4, 2];
  return {attributes:{aPosition:pc.SEMANTIC_POSITION}, vshader:chunks.skyboxVS, fshader:pc.programlib.precisionCode(device) + (options.mip ? chunks.fixCubemapSeamsStretchPS : chunks.fixCubemapSeamsNonePS) + (options.useIntensity ? chunks.envMultiplyPS : chunks.envConstPS) + pc.programlib.gammaCode(options.gamma) + pc.programlib.tonemapCode(options.toneMapping) + chunks.rgbmPS + chunks.skyboxHDRPS.replace(/\$textureCubeSAMPLE/g, options.rgbm ? "textureCubeRGBM" : options.hdr ? "textureCube" : "textureCubeSRGB").replace(/\$FIXCONST/g, 
  1.0 - 1.0 / mip2size[options.mip] + "")};
}};
pc.extend(pc, function() {
  var primitive = {type:pc.PRIMITIVE_TRISTRIP, base:0, count:4, indexed:false};
  var PostEffect = function(graphicsDevice) {
    this.device = graphicsDevice;
    this.shader = null;
    this.depthMap = null;
    this.vertexBuffer = pc.createFullscreenQuad(graphicsDevice);
    this.needsDepthBuffer = false;
  };
  PostEffect.prototype = {render:function(inputTarget, outputTarget, rect) {
  }};
  function createFullscreenQuad(device) {
    var vertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:2, type:pc.TYPE_FLOAT32}]);
    var vertexBuffer = new pc.VertexBuffer(device, vertexFormat, 4);
    var iterator = new pc.VertexIterator(vertexBuffer);
    iterator.element[pc.SEMANTIC_POSITION].set(-1.0, -1.0);
    iterator.next();
    iterator.element[pc.SEMANTIC_POSITION].set(1.0, -1.0);
    iterator.next();
    iterator.element[pc.SEMANTIC_POSITION].set(-1.0, 1.0);
    iterator.next();
    iterator.element[pc.SEMANTIC_POSITION].set(1.0, 1.0);
    iterator.end();
    return vertexBuffer;
  }
  function drawFullscreenQuad(device, target, vertexBuffer, shader, rect) {
    device.setRenderTarget(target);
    device.updateBegin();
    var w = target !== null ? target.width : device.width;
    var h = target !== null ? target.height : device.height;
    var x = 0;
    var y = 0;
    if (rect) {
      x = rect.x * w;
      y = rect.y * h;
      w *= rect.z;
      h *= rect.w;
    }
    device.setViewport(x, y, w, h);
    device.setScissor(x, y, w, h);
    var oldBlending = device.getBlending();
    var oldDepthTest = device.getDepthTest();
    var oldDepthWrite = device.getDepthWrite();
    var oldCullMode = device.getCullMode();
    var oldWR = device.writeRed;
    var oldWG = device.writeGreen;
    var oldWB = device.writeBlue;
    var oldWA = device.writeAlpha;
    device.setBlending(false);
    device.setDepthTest(false);
    device.setDepthWrite(false);
    device.setCullMode(pc.CULLFACE_BACK);
    device.setColorWrite(true, true, true, true);
    device.setVertexBuffer(vertexBuffer, 0);
    device.setShader(shader);
    device.draw(primitive);
    device.setBlending(oldBlending);
    device.setDepthTest(oldDepthTest);
    device.setDepthWrite(oldDepthWrite);
    device.setCullMode(oldCullMode);
    device.setColorWrite(oldWR, oldWG, oldWB, oldWA);
    device.updateEnd();
  }
  return {PostEffect:PostEffect, createFullscreenQuad:createFullscreenQuad, drawFullscreenQuad:drawFullscreenQuad};
}());
(function() {
  var enums = {BLEND_SUBTRACTIVE:0, BLEND_ADDITIVE:1, BLEND_NORMAL:2, BLEND_NONE:3, BLEND_PREMULTIPLIED:4, BLEND_MULTIPLICATIVE:5, BLEND_ADDITIVEALPHA:6, BLEND_MULTIPLICATIVE2X:7, BLEND_SCREEN:8, BLEND_MIN:9, BLEND_MAX:10, FOG_NONE:"none", FOG_LINEAR:"linear", FOG_EXP:"exp", FOG_EXP2:"exp2", FRESNEL_NONE:0, FRESNEL_SCHLICK:2, LAYER_HUD:0, LAYER_GIZMO:1, LAYER_FX:2, LAYER_WORLD:15, LAYERID_WORLD:0, LAYERID_DEPTH:1, LAYERID_SKYBOX:2, LAYERID_IMMEDIATE:3, LAYERID_UI:4, LIGHTTYPE_DIRECTIONAL:0, LIGHTTYPE_POINT:1, 
  LIGHTTYPE_SPOT:2, LIGHTFALLOFF_LINEAR:0, LIGHTFALLOFF_INVERSESQUARED:1, SHADOW_PCF3:0, SHADOW_DEPTH:0, SHADOW_VSM8:1, SHADOW_VSM16:2, SHADOW_VSM32:3, SHADOW_PCF5:4, BLUR_BOX:0, BLUR_GAUSSIAN:1, PARTICLESORT_NONE:0, PARTICLESORT_DISTANCE:1, PARTICLESORT_NEWER_FIRST:2, PARTICLESORT_OLDER_FIRST:3, PARTICLEMODE_GPU:0, PARTICLEMODE_CPU:1, EMITTERSHAPE_BOX:0, EMITTERSHAPE_SPHERE:1, PROJECTION_PERSPECTIVE:0, PROJECTION_ORTHOGRAPHIC:1, RENDERSTYLE_SOLID:0, RENDERSTYLE_WIREFRAME:1, RENDERSTYLE_POINTS:2, 
  CUBEPROJ_NONE:0, CUBEPROJ_BOX:1, SPECULAR_PHONG:0, SPECULAR_BLINN:1, GAMMA_NONE:0, GAMMA_SRGB:1, GAMMA_SRGBFAST:2, GAMMA_SRGBHDR:3, TONEMAP_LINEAR:0, TONEMAP_FILMIC:1, TONEMAP_HEJL:2, TONEMAP_ACES:3, TONEMAP_ACES2:4, SPECOCC_NONE:0, SPECOCC_AO:1, SPECOCC_GLOSSDEPENDENT:2, SHADERDEF_NOSHADOW:1, SHADERDEF_SKIN:2, SHADERDEF_UV0:4, SHADERDEF_UV1:8, SHADERDEF_VCOLOR:16, SHADERDEF_INSTANCING:32, SHADERDEF_LM:64, SHADERDEF_DIRLM:128, SHADERDEF_SCREENSPACE:256, LINEBATCH_WORLD:0, LINEBATCH_OVERLAY:1, LINEBATCH_GIZMO:2, 
  SHADOWUPDATE_NONE:0, SHADOWUPDATE_THISFRAME:1, SHADOWUPDATE_REALTIME:2, SORTKEY_FORWARD:0, SORTKEY_DEPTH:1, MASK_DYNAMIC:1, MASK_BAKED:2, MASK_LIGHTMAP:4, SHADER_FORWARD:0, SHADER_FORWARDHDR:1, SHADER_DEPTH:2, SHADER_SHADOW:3, SHADER_PICK:18, BAKE_COLOR:0, BAKE_COLORDIR:1, VIEW_CENTER:0, VIEW_LEFT:1, VIEW_RIGHT:2, SORTMODE_NONE:0, SORTMODE_MANUAL:1, SORTMODE_MATERIALMESH:2, SORTMODE_BACK2FRONT:3, SORTMODE_FRONT2BACK:4, COMPUPDATED_INSTANCES:1, COMPUPDATED_LIGHTS:2, COMPUPDATED_CAMERAS:4, COMPUPDATED_BLEND:8, 
  ASPECT_AUTO:0, ASPECT_MANUAL:1};
  pc.extend(pc, enums);
  pc.scene = {};
  pc.extend(pc.scene, enums);
})();
pc.extend(pc, function() {
  var Scene = function Scene() {
    this.root = null;
    this._gravity = new pc.Vec3(0, -9.8, 0);
    this._layers = null;
    this._fog = pc.FOG_NONE;
    this.fogColor = new pc.Color(0, 0, 0);
    this.fogStart = 1;
    this.fogEnd = 1000;
    this.fogDensity = 0;
    this.ambientLight = new pc.Color(0, 0, 0);
    this._gammaCorrection = pc.GAMMA_NONE;
    this._toneMapping = 0;
    this.exposure = 1.0;
    this._skyboxPrefiltered = [null, null, null, null, null, null];
    this._skyboxCubeMap = null;
    this.skyboxModel = null;
    this._skyboxIntensity = 1;
    this._skyboxMip = 0;
    this.lightmapSizeMultiplier = 1;
    this.lightmapMaxResolution = 2048;
    this.lightmapMode = pc.BAKE_COLORDIR;
    this._stats = {meshInstances:0, lights:0, dynamicLights:0, bakedLights:0, lastStaticPrepareFullTime:0, lastStaticPrepareSearchTime:0, lastStaticPrepareWriteTime:0, lastStaticPrepareTriAabbTime:0, lastStaticPrepareCombineTime:0, updateShadersTime:0};
    this.updateShaders = true;
    this.updateSkybox = true;
    this._shaderVersion = 0;
    this._statsUpdated = false;
    this._models = [];
    pc.events.attach(this);
  };
  Object.defineProperty(Scene.prototype, "fog", {get:function() {
    return this._fog;
  }, set:function(type) {
    if (type !== this._fog) {
      this._fog = type;
      this.updateShaders = true;
    }
  }});
  Object.defineProperty(Scene.prototype, "gammaCorrection", {get:function() {
    return this._gammaCorrection;
  }, set:function(value) {
    if (value !== this._gammaCorrection) {
      this._gammaCorrection = value;
      this.updateShaders = true;
    }
  }});
  Object.defineProperty(Scene.prototype, "toneMapping", {get:function() {
    return this._toneMapping;
  }, set:function(value) {
    if (value !== this._toneMapping) {
      this._toneMapping = value;
      this.updateShaders = true;
    }
  }});
  Object.defineProperty(Scene.prototype, "skybox", {get:function() {
    return this._skyboxCubeMap;
  }, set:function(value) {
    this._skyboxCubeMap = value;
    this._resetSkyboxModel();
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxIntensity", {get:function() {
    return this._skyboxIntensity;
  }, set:function(value) {
    this._skyboxIntensity = value;
    this._resetSkyboxModel();
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxMip", {get:function() {
    return this._skyboxMip;
  }, set:function(value) {
    this._skyboxMip = value;
    this._resetSkyboxModel();
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered128", {get:function() {
    return this._skyboxPrefiltered[0];
  }, set:function(value) {
    if (this._skyboxPrefiltered[0] === value) {
      return;
    }
    this._skyboxPrefiltered[0] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered64", {get:function() {
    return this._skyboxPrefiltered[1];
  }, set:function(value) {
    if (this._skyboxPrefiltered[1] === value) {
      return;
    }
    this._skyboxPrefiltered[1] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered32", {get:function() {
    return this._skyboxPrefiltered[2];
  }, set:function(value) {
    if (this._skyboxPrefiltered[2] === value) {
      return;
    }
    this._skyboxPrefiltered[2] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered16", {get:function() {
    return this._skyboxPrefiltered[3];
  }, set:function(value) {
    if (this._skyboxPrefiltered[3] === value) {
      return;
    }
    this._skyboxPrefiltered[3] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered8", {get:function() {
    return this._skyboxPrefiltered[4];
  }, set:function(value) {
    if (this._skyboxPrefiltered[4] === value) {
      return;
    }
    this._skyboxPrefiltered[4] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "skyboxPrefiltered4", {get:function() {
    return this._skyboxPrefiltered[5];
  }, set:function(value) {
    if (this._skyboxPrefiltered[5] === value) {
      return;
    }
    this._skyboxPrefiltered[5] = value;
    this.updateShaders = true;
  }});
  Object.defineProperty(Scene.prototype, "drawCalls", {get:function() {
    var drawCalls = this.layers._meshInstances;
    if (!drawCalls.length) {
      this.layers._update();
      drawCalls = this.layers._meshInstances;
    }
    return drawCalls;
  }, set:function(value) {
  }});
  Object.defineProperty(Scene.prototype, "layers", {get:function() {
    return this._layers;
  }, set:function(layers) {
    var prev = this._layers;
    this._layers = layers;
    this.fire("set:layers", prev, layers);
  }});
  Scene.prototype.applySettings = function(settings) {
    this._gravity.set(settings.physics.gravity[0], settings.physics.gravity[1], settings.physics.gravity[2]);
    this.ambientLight.set(settings.render.global_ambient[0], settings.render.global_ambient[1], settings.render.global_ambient[2]);
    this._fog = settings.render.fog;
    this.fogColor.set(settings.render.fog_color[0], settings.render.fog_color[1], settings.render.fog_color[2]);
    this.fogStart = settings.render.fog_start;
    this.fogEnd = settings.render.fog_end;
    this.fogDensity = settings.render.fog_density;
    this._gammaCorrection = settings.render.gamma_correction;
    this._toneMapping = settings.render.tonemapping;
    this.lightmapSizeMultiplier = settings.render.lightmapSizeMultiplier;
    this.lightmapMaxResolution = settings.render.lightmapMaxResolution;
    this.lightmapMode = settings.render.lightmapMode;
    this.exposure = settings.render.exposure;
    this._skyboxIntensity = settings.render.skyboxIntensity === undefined ? 1 : settings.render.skyboxIntensity;
    this._skyboxMip = settings.render.skyboxMip === undefined ? 0 : settings.render.skyboxMip;
    this._resetSkyboxModel();
    this.updateShaders = true;
  };
  Scene.prototype._updateSkybox = function(device) {
    var i;
    if (this._skyboxCubeMap && !this.skyboxModel) {
      var material = new pc.Material;
      var scene = this;
      material.updateShader = function(dev, sc, defs, staticLightList, pass) {
        var library = device.getProgramLibrary();
        var shader = library.getProgram("skybox", {rgbm:scene._skyboxCubeMap.rgbm, hdr:scene._skyboxCubeMap.rgbm || scene._skyboxCubeMap.format === pc.PIXELFORMAT_RGBA32F, useIntensity:scene.skyboxIntensity !== 1, mip:scene._skyboxCubeMap.fixCubemapSeams ? scene.skyboxMip : 0, fixSeams:scene._skyboxCubeMap.fixCubemapSeams, gamma:pass === pc.SHADER_FORWARDHDR ? scene.gammaCorrection ? pc.GAMMA_SRGBHDR : pc.GAMMA_NONE : scene.gammaCorrection, toneMapping:pass === pc.SHADER_FORWARDHDR ? pc.TONEMAP_LINEAR : 
        scene.toneMapping});
        this.setShader(shader);
      };
      material.updateShader();
      var usedTex;
      if (!this._skyboxCubeMap.fixCubemapSeams || !scene._skyboxMip) {
        usedTex = this._skyboxCubeMap;
      } else {
        var mip2tex = [null, "64", "16", "8", "4"];
        var mipTex = this["skyboxPrefiltered" + mip2tex[scene._skyboxMip]];
        if (mipTex) {
          usedTex = mipTex;
        }
      }
      material.setParameter("texture_cubeMap", usedTex);
      material.cull = pc.CULLFACE_NONE;
      var skyLayer = this.layers.getLayerById(pc.LAYERID_SKYBOX);
      if (skyLayer) {
        var node = new pc.GraphNode;
        var mesh = pc.createBox(device);
        var meshInstance = new pc.MeshInstance(node, mesh, material);
        meshInstance.cull = false;
        meshInstance._noDepthDrawGl1 = true;
        var model = new pc.Model;
        model.graph = node;
        model.meshInstances = [meshInstance];
        this.skyboxModel = model;
        skyLayer.addMeshInstances(model.meshInstances);
        skyLayer.enabled = true;
        this.skyLayer = skyLayer;
        this.fire("set:skybox", usedTex);
      }
    }
  };
  Scene.prototype._resetSkyboxModel = function() {
    if (this.skyboxModel) {
      this.skyLayer.removeMeshInstances(this.skyboxModel.meshInstances);
      this.skyLayer.enabled = false;
    }
    this.skyboxModel = null;
    this.updateSkybox = true;
  };
  Scene.prototype.setSkybox = function(cubemaps) {
    var i;
    if (!cubemaps) {
      cubemaps = [null, null, null, null, null, null, null];
    }
    var different = false;
    if (this._skyboxCubeMap !== cubemaps[0]) {
      different = true;
    }
    if (!different) {
      for (i = 0; i < 6 && !different; i++) {
        if (this._skyboxPrefiltered[i] !== cubemaps[i + 1]) {
          different = true;
        }
      }
    }
    if (!different) {
      return;
    }
    for (i = 0; i < 6; i++) {
      this._skyboxPrefiltered[i] = cubemaps[i + 1];
    }
    this.skybox = cubemaps[0];
  };
  Scene.prototype.destroy = function() {
    this.skybox = null;
  };
  Scene.prototype.addModel = function(model) {
    if (this.containsModel(model)) {
      return;
    }
    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);
    if (!layer) {
      return;
    }
    layer.addMeshInstances(model.meshInstances);
    this._models.push(model);
  };
  Scene.prototype.addShadowCaster = function(model) {
    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);
    if (!layer) {
      return;
    }
    layer.addShadowCasters(model.meshInstances);
  };
  Scene.prototype.removeModel = function(model) {
    var index = this._models.indexOf(model);
    if (index !== -1) {
      var layer = this.layers.getLayerById(pc.LAYERID_WORLD);
      if (!layer) {
        return;
      }
      layer.removeMeshInstances(model.meshInstances);
      this._models.splice(index, 1);
    }
  };
  Scene.prototype.removeShadowCasters = function(model) {
    var layer = this.layers.getLayerById(pc.LAYERID_WORLD);
    if (!layer) {
      return;
    }
    layer.removeShadowCasters(model.meshInstances);
  };
  Scene.prototype.containsModel = function(model) {
    return this._models.indexOf(model) >= 0;
  };
  Scene.prototype.getModels = function(model) {
    return this._models;
  };
  return {Scene:Scene};
}());
pc.extend(pc, function() {
  var scaleShift = (new pc.Mat4).mul2((new pc.Mat4).setTranslate(0.5, 0.5, 0.5), (new pc.Mat4).setScale(0.5, 0.5, 0.5));
  var opChanId = {r:1, g:2, b:3, a:4};
  var pointLightRotations = [(new pc.Quat).setFromEulerAngles(0, 90, 180), (new pc.Quat).setFromEulerAngles(0, -90, 180), (new pc.Quat).setFromEulerAngles(90, 0, 0), (new pc.Quat).setFromEulerAngles(-90, 0, 0), (new pc.Quat).setFromEulerAngles(0, 180, 180), (new pc.Quat).setFromEulerAngles(0, 0, 180)];
  var numShadowModes = 5;
  var shadowMapCache = [{}, {}, {}, {}, {}];
  var directionalShadowEpsilon = 0.01;
  var pixelOffset = new pc.Vec2;
  var blurScissorRect = {x:1, y:1, z:0, w:0};
  var shadowCamView = new pc.Mat4;
  var shadowCamViewProj = new pc.Mat4;
  var c2sc = new pc.Mat4;
  var viewInvMat = new pc.Mat4;
  var viewMat = new pc.Mat4;
  var viewMat3 = new pc.Mat3;
  var viewProjMat = new pc.Mat4;
  var projMat;
  var viewInvL = new pc.Mat4;
  var viewInvR = new pc.Mat4;
  var viewL = new pc.Mat4;
  var viewR = new pc.Mat4;
  var viewPosL = new pc.Vec3;
  var viewPosR = new pc.Vec3;
  var projL, projR;
  var viewMat3L = new pc.Mat4;
  var viewMat3R = new pc.Mat4;
  var viewProjMatL = new pc.Mat4;
  var viewProjMatR = new pc.Mat4;
  var frustumDiagonal = new pc.Vec3;
  var tempSphere = {center:null, radius:0};
  var meshPos;
  var visibleSceneAabb = new pc.BoundingBox;
  var lightBounds = new pc.BoundingBox;
  var boneTextureSize = [0, 0];
  var boneTexture, instancingData, modelMatrix, normalMatrix;
  var shadowMapCubeCache = {};
  var maxBlurSize = 25;
  var keyA, keyB;
  var frustumPoints = [];
  for (var i = 0; i < 8; i++) {
    frustumPoints.push(new pc.Vec3);
  }
  function _getFrustumPoints(camera, farClip, points) {
    var nearClip = camera._nearClip;
    var fov = camera._fov * Math.PI / 180.0;
    var aspect = camera._aspect;
    var projection = camera._projection;
    var x, y;
    if (projection === pc.PROJECTION_PERSPECTIVE) {
      y = Math.tan(fov / 2.0) * nearClip;
    } else {
      y = camera._orthoHeight;
    }
    x = y * aspect;
    points[0].x = x;
    points[0].y = -y;
    points[0].z = -nearClip;
    points[1].x = x;
    points[1].y = y;
    points[1].z = -nearClip;
    points[2].x = -x;
    points[2].y = y;
    points[2].z = -nearClip;
    points[3].x = -x;
    points[3].y = -y;
    points[3].z = -nearClip;
    if (projection === pc.PROJECTION_PERSPECTIVE) {
      y = Math.tan(fov / 2.0) * farClip;
      x = y * aspect;
    }
    points[4].x = x;
    points[4].y = -y;
    points[4].z = -farClip;
    points[5].x = x;
    points[5].y = y;
    points[5].z = -farClip;
    points[6].x = -x;
    points[6].y = y;
    points[6].z = -farClip;
    points[7].x = -x;
    points[7].y = -y;
    points[7].z = -farClip;
    return points;
  }
  function StaticArray(size) {
    var data = new Array(size);
    var obj = function(idx) {
      return data[idx];
    };
    obj.size = 0;
    obj.push = function(v) {
      data[this.size] = v;
      ++this.size;
    };
    obj.data = data;
    return obj;
  }
  var intersectCache = {temp:[new pc.Vec3, new pc.Vec3, new pc.Vec3], vertices:new Array(3), negative:new StaticArray(3), positive:new StaticArray(3), intersections:new StaticArray(3), zCollection:new StaticArray(36)};
  function _groupVertices(coord, face, smallerIsNegative) {
    var intersections = intersectCache.intersections;
    var small, large;
    if (smallerIsNegative) {
      small = intersectCache.negative;
      large = intersectCache.positive;
    } else {
      small = intersectCache.positive;
      large = intersectCache.negative;
    }
    intersections.size = 0;
    small.size = 0;
    large.size = 0;
    var intersectCount = 0;
    var v;
    for (var j = 0; j < 3; ++j) {
      v = intersectCache.vertices[j];
      if (v[coord] < face) {
        small.push(v);
      } else {
        if (v[coord] === face) {
          intersections.push(intersectCache.temp[intersections.size].copy(v));
        } else {
          large.push(v);
        }
      }
    }
  }
  function _triXFace(zs, x, y, faceTest, yMin, yMax) {
    var negative = intersectCache.negative;
    var positive = intersectCache.positive;
    var intersections = intersectCache.intersections;
    if (negative.size === 3) {
      return false;
    }
    if (negative.size && positive.size) {
      intersections.push(intersectCache.temp[intersections.size].lerp(negative(0), positive(0), (faceTest - negative(0)[x]) / (positive(0)[x] - negative(0)[x])));
      if (negative.size === 2) {
        intersections.push(intersectCache.temp[intersections.size].lerp(negative(1), positive(0), (faceTest - negative(1)[x]) / (positive(0)[x] - negative(1)[x])));
      } else {
        if (positive.size === 2) {
          intersections.push(intersectCache.temp[intersections.size].lerp(negative(0), positive(1), (faceTest - negative(0)[x]) / (positive(1)[x] - negative(0)[x])));
        }
      }
    }
    if (intersections.size === 0) {
      return true;
    }
    if (intersections.size === 1) {
      if (yMin <= intersections(0)[y] && intersections(0)[y] <= yMax) {
        zs.push(intersections(0).z);
      }
      return true;
    }
    if (intersections(1)[y] === intersections(0)[y]) {
      if (yMin <= intersections(0)[y] && intersections(0)[y] <= yMax) {
        zs.push(intersections(0).z);
        zs.push(intersections(1).z);
      }
    } else {
      var delta = (intersections(1).z - intersections(0).z) / (intersections(1)[y] - intersections(0)[y]);
      if (intersections(0)[y] > yMax) {
        zs.push(intersections(0).z + delta * (yMax - intersections(0)[y]));
      } else {
        if (intersections(0)[y] < yMin) {
          zs.push(intersections(0).z + delta * (yMin - intersections(0)[y]));
        } else {
          zs.push(intersections(0).z);
        }
      }
      if (intersections(1)[y] > yMax) {
        zs.push(intersections(1).z + delta * (yMax - intersections(1)[y]));
      } else {
        if (intersections(1)[y] < yMin) {
          zs.push(intersections(1).z + delta * (yMin - intersections(1)[y]));
        } else {
          zs.push(intersections(1).z);
        }
      }
    }
    return true;
  }
  var _sceneAABB_LS = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];
  var iAABBTriIndexes = [0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 0, 2, 4, 2, 4, 6, 1, 3, 5, 3, 5, 7, 0, 1, 4, 1, 4, 5, 2, 3, 6, 3, 6, 7];
  function _getZFromAABB(w2sc, aabbMin, aabbMax, lcamMinX, lcamMaxX, lcamMinY, lcamMaxY) {
    _sceneAABB_LS[0].x = _sceneAABB_LS[1].x = _sceneAABB_LS[2].x = _sceneAABB_LS[3].x = aabbMin.x;
    _sceneAABB_LS[1].y = _sceneAABB_LS[3].y = _sceneAABB_LS[7].y = _sceneAABB_LS[5].y = aabbMin.y;
    _sceneAABB_LS[2].z = _sceneAABB_LS[3].z = _sceneAABB_LS[6].z = _sceneAABB_LS[7].z = aabbMin.z;
    _sceneAABB_LS[4].x = _sceneAABB_LS[5].x = _sceneAABB_LS[6].x = _sceneAABB_LS[7].x = aabbMax.x;
    _sceneAABB_LS[0].y = _sceneAABB_LS[2].y = _sceneAABB_LS[4].y = _sceneAABB_LS[6].y = aabbMax.y;
    _sceneAABB_LS[0].z = _sceneAABB_LS[1].z = _sceneAABB_LS[4].z = _sceneAABB_LS[5].z = aabbMax.z;
    for (var i = 0; i < 8; ++i) {
      w2sc.transformPoint(_sceneAABB_LS[i], _sceneAABB_LS[i]);
    }
    var minz = 9999999999;
    var maxz = -9999999999;
    var vertices = intersectCache.vertices;
    var positive = intersectCache.positive;
    var zs = intersectCache.zCollection;
    zs.size = 0;
    for (var AABBTriIter = 0; AABBTriIter < 12; ++AABBTriIter) {
      vertices[0] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 0]];
      vertices[1] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 1]];
      vertices[2] = _sceneAABB_LS[iAABBTriIndexes[AABBTriIter * 3 + 2]];
      var verticesWithinBound = 0;
      _groupVertices("x", lcamMinX, true);
      if (!_triXFace(zs, "x", "y", lcamMinX, lcamMinY, lcamMaxY)) {
        continue;
      }
      verticesWithinBound += positive.size;
      _groupVertices("x", lcamMaxX, false);
      if (!_triXFace(zs, "x", "y", lcamMaxX, lcamMinY, lcamMaxY)) {
        continue;
      }
      verticesWithinBound += positive.size;
      _groupVertices("y", lcamMinY, true);
      if (!_triXFace(zs, "y", "x", lcamMinY, lcamMinX, lcamMaxX)) {
        continue;
      }
      verticesWithinBound += positive.size;
      _groupVertices("y", lcamMaxY, false);
      _triXFace(zs, "y", "x", lcamMaxY, lcamMinX, lcamMaxX);
      if (verticesWithinBound + positive.size == 12) {
        zs.push(vertices[0].z);
        zs.push(vertices[1].z);
        zs.push(vertices[2].z);
      }
    }
    var z;
    for (var j = 0, len = zs.size; j < len; j++) {
      z = zs(j);
      if (z < minz) {
        minz = z;
      }
      if (z > maxz) {
        maxz = z;
      }
    }
    return {min:minz, max:maxz};
  }
  function _getZFromAABBSimple(w2sc, aabbMin, aabbMax, lcamMinX, lcamMaxX, lcamMinY, lcamMaxY) {
    _sceneAABB_LS[0].x = _sceneAABB_LS[1].x = _sceneAABB_LS[2].x = _sceneAABB_LS[3].x = aabbMin.x;
    _sceneAABB_LS[1].y = _sceneAABB_LS[3].y = _sceneAABB_LS[7].y = _sceneAABB_LS[5].y = aabbMin.y;
    _sceneAABB_LS[2].z = _sceneAABB_LS[3].z = _sceneAABB_LS[6].z = _sceneAABB_LS[7].z = aabbMin.z;
    _sceneAABB_LS[4].x = _sceneAABB_LS[5].x = _sceneAABB_LS[6].x = _sceneAABB_LS[7].x = aabbMax.x;
    _sceneAABB_LS[0].y = _sceneAABB_LS[2].y = _sceneAABB_LS[4].y = _sceneAABB_LS[6].y = aabbMax.y;
    _sceneAABB_LS[0].z = _sceneAABB_LS[1].z = _sceneAABB_LS[4].z = _sceneAABB_LS[5].z = aabbMax.z;
    var minz = 9999999999;
    var maxz = -9999999999;
    var z;
    for (var i = 0; i < 8; ++i) {
      w2sc.transformPoint(_sceneAABB_LS[i], _sceneAABB_LS[i]);
      z = _sceneAABB_LS[i].z;
      if (z < minz) {
        minz = z;
      }
      if (z > maxz) {
        maxz = z;
      }
    }
    return {min:minz, max:maxz};
  }
  function getShadowFormat(device, shadowType) {
    if (shadowType === pc.SHADOW_VSM32) {
      return pc.PIXELFORMAT_RGBA32F;
    } else {
      if (shadowType === pc.SHADOW_VSM16) {
        return pc.PIXELFORMAT_RGBA16F;
      } else {
        if (shadowType === pc.SHADOW_PCF5) {
          return pc.PIXELFORMAT_DEPTH;
        } else {
          if (shadowType === pc.SHADOW_PCF3 && device.webgl2) {
            return pc.PIXELFORMAT_DEPTH;
          }
        }
      }
    }
    return pc.PIXELFORMAT_R8_G8_B8_A8;
  }
  function getShadowFiltering(device, shadowType) {
    if (shadowType === pc.SHADOW_PCF3 && !device.webgl2) {
      return pc.FILTER_NEAREST;
    } else {
      if (shadowType === pc.SHADOW_VSM32) {
        return device.extTextureFloatLinear ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;
      } else {
        if (shadowType === pc.SHADOW_VSM16) {
          return device.extTextureHalfFloatLinear ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;
        }
      }
    }
    return pc.FILTER_LINEAR;
  }
  function createShadowMap(device, width, height, shadowType) {
    var format = getShadowFormat(device, shadowType);
    var filter = getShadowFiltering(device, shadowType);
    var shadowMap = new pc.Texture(device, {format:format, width:width, height:height, mipmaps:false, minFilter:filter, magFilter:filter, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});
    if (shadowType === pc.SHADOW_PCF5 || shadowType === pc.SHADOW_PCF3 && device.webgl2) {
      shadowMap.compareOnRead = true;
      shadowMap.compareFunc = pc.FUNC_LESS;
      return new pc.RenderTarget({depthBuffer:shadowMap});
    }
    return new pc.RenderTarget({colorBuffer:shadowMap, depth:true});
  }
  function createShadowCubeMap(device, size) {
    var cubemap = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:size, height:size, cubemap:true, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});
    var targets = [];
    var target;
    for (var i = 0; i < 6; i++) {
      target = new pc.RenderTarget({colorBuffer:cubemap, face:i, depth:true});
      targets.push(target);
    }
    return targets;
  }
  function gauss(x, sigma) {
    return Math.exp(-(x * x) / (2.0 * sigma * sigma));
  }
  function gaussWeights(kernelSize) {
    if (kernelSize > maxBlurSize) {
      kernelSize = maxBlurSize;
    }
    var sigma = (kernelSize - 1) / (2 * 3);
    var i, values, sum, halfWidth;
    halfWidth = (kernelSize - 1) * 0.5;
    values = new Array(kernelSize);
    sum = 0.0;
    for (i = 0; i < kernelSize; ++i) {
      values[i] = gauss(i - halfWidth, sigma);
      sum += values[i];
    }
    for (i = 0; i < kernelSize; ++i) {
      values[i] /= sum;
    }
    return values;
  }
  function createShadowCamera(device, shadowType, type) {
    var flags = pc.CLEARFLAG_DEPTH;
    var hwPcf = shadowType === pc.SHADOW_PCF5 || shadowType === pc.SHADOW_PCF3 && device.webgl2;
    if (type === pc.LIGHTTYPE_POINT) {
      hwPcf = false;
    }
    if (!hwPcf) {
      flags |= pc.CLEARFLAG_COLOR;
    }
    var shadowCam = new pc.Camera;
    if (shadowType >= pc.SHADOW_VSM8 && shadowType <= pc.SHADOW_VSM32) {
      shadowCam.clearColor[0] = 0;
      shadowCam.clearColor[1] = 0;
      shadowCam.clearColor[2] = 0;
      shadowCam.clearColor[3] = 0;
    } else {
      shadowCam.clearColor[0] = 1;
      shadowCam.clearColor[1] = 1;
      shadowCam.clearColor[2] = 1;
      shadowCam.clearColor[3] = 1;
    }
    shadowCam.clearDepth = 1;
    shadowCam.clearFlags = flags;
    shadowCam.clearStencil = null;
    shadowCam._node = new pc.GraphNode;
    return shadowCam;
  }
  function getShadowMapFromCache(device, res, mode, layer) {
    if (!layer) {
      layer = 0;
    }
    var id = layer * 10000 + res;
    var shadowBuffer = shadowMapCache[mode][id];
    if (!shadowBuffer) {
      shadowBuffer = createShadowMap(device, res, res, mode ? mode : pc.SHADOW_PCF3);
      shadowMapCache[mode][id] = shadowBuffer;
    }
    return shadowBuffer;
  }
  function createShadowBuffer(device, light) {
    var shadowBuffer;
    if (light._type === pc.LIGHTTYPE_POINT) {
      if (light._shadowType > pc.SHADOW_PCF3) {
        light._shadowType = pc.SHADOW_PCF3;
      }
      if (light._cacheShadowMap) {
        shadowBuffer = shadowMapCubeCache[light._shadowResolution];
        if (!shadowBuffer) {
          shadowBuffer = createShadowCubeMap(device, light._shadowResolution);
          shadowMapCubeCache[light._shadowResolution] = shadowBuffer;
        }
      } else {
        shadowBuffer = createShadowCubeMap(device, light._shadowResolution);
      }
      light._shadowCamera.renderTarget = shadowBuffer[0];
      light._shadowCubeMap = shadowBuffer;
    } else {
      if (light._cacheShadowMap) {
        shadowBuffer = getShadowMapFromCache(device, light._shadowResolution, light._shadowType);
      } else {
        shadowBuffer = createShadowMap(device, light._shadowResolution, light._shadowResolution, light._shadowType);
      }
      light._shadowCamera.renderTarget = shadowBuffer;
    }
    light._isCachedShadowMap = light._cacheShadowMap;
  }
  function getDepthKey(meshInstance) {
    var material = meshInstance.material;
    var x = meshInstance.skinInstance ? 10 : 0;
    var y = 0;
    if (material.opacityMap) {
      var opChan = material.opacityMapChannel;
      if (opChan) {
        y = opChanId[opChan];
      }
    }
    return x + y;
  }
  function ForwardRenderer(graphicsDevice) {
    this.device = graphicsDevice;
    var device = this.device;
    this._shadowDrawCalls = 0;
    this._forwardDrawCalls = 0;
    this._skinDrawCalls = 0;
    this._camerasRendered = 0;
    this._materialSwitches = 0;
    this._shadowMapUpdates = 0;
    this._shadowMapTime = 0;
    this._depthMapTime = 0;
    this._forwardTime = 0;
    this._cullTime = 0;
    this._sortTime = 0;
    this._skinTime = 0;
    this._morphTime = 0;
    this._instancingTime = 0;
    var library = device.getProgramLibrary();
    this.library = library;
    this.frontToBack = false;
    var scope = device.scope;
    this.projId = scope.resolve("matrix_projection");
    this.viewId = scope.resolve("matrix_view");
    this.viewId3 = scope.resolve("matrix_view3");
    this.viewInvId = scope.resolve("matrix_viewInverse");
    this.viewProjId = scope.resolve("matrix_viewProjection");
    this.viewPosId = scope.resolve("view_position");
    this.nearClipId = scope.resolve("camera_near");
    this.farClipId = scope.resolve("camera_far");
    this.cameraParamsId = scope.resolve("camera_params");
    this.shadowMapLightRadiusId = scope.resolve("light_radius");
    this.fogColorId = scope.resolve("fog_color");
    this.fogStartId = scope.resolve("fog_start");
    this.fogEndId = scope.resolve("fog_end");
    this.fogDensityId = scope.resolve("fog_density");
    this.modelMatrixId = scope.resolve("matrix_model");
    this.normalMatrixId = scope.resolve("matrix_normal");
    this.poseMatrixId = scope.resolve("matrix_pose[0]");
    this.boneTextureId = scope.resolve("texture_poseMap");
    this.boneTextureSizeId = scope.resolve("texture_poseMapSize");
    this.alphaTestId = scope.resolve("alpha_ref");
    this.opacityMapId = scope.resolve("texture_opacityMap");
    this.ambientId = scope.resolve("light_globalAmbient");
    this.exposureId = scope.resolve("exposure");
    this.skyboxIntensityId = scope.resolve("skyboxIntensity");
    this.lightColorId = [];
    this.lightDirId = [];
    this.lightShadowMapId = [];
    this.lightShadowMatrixId = [];
    this.lightShadowParamsId = [];
    this.lightShadowMatrixVsId = [];
    this.lightShadowParamsVsId = [];
    this.lightDirVsId = [];
    this.lightRadiusId = [];
    this.lightPosId = [];
    this.lightInAngleId = [];
    this.lightOutAngleId = [];
    this.lightPosVsId = [];
    this.lightCookieId = [];
    this.lightCookieIntId = [];
    this.lightCookieMatrixId = [];
    this.lightCookieOffsetId = [];
    this.depthMapId = scope.resolve("uDepthMap");
    this.screenSizeId = scope.resolve("uScreenSize");
    this._screenSize = new pc.Vec4;
    this.sourceId = scope.resolve("source");
    this.pixelOffsetId = scope.resolve("pixelOffset");
    this.weightId = scope.resolve("weight[0]");
    var chunks = pc.shaderChunks;
    this.blurVsmShaderCode = [chunks.blurVSMPS, "#define GAUSS\n" + chunks.blurVSMPS];
    var packed = "#define PACKED\n";
    this.blurPackedVsmShaderCode = [packed + this.blurVsmShaderCode[0], packed + this.blurVsmShaderCode[1]];
    this.blurVsmShader = [{}, {}];
    this.blurPackedVsmShader = [{}, {}];
    this.blurVsmWeights = {};
    this.polygonOffsetId = scope.resolve("polygonOffset");
    this.polygonOffset = new Float32Array(2);
    this.fogColor = new Float32Array(3);
    this.ambientColor = new Float32Array(3);
  }
  function mat3FromMat4(m3, m4) {
    m3.data[0] = m4.data[0];
    m3.data[1] = m4.data[1];
    m3.data[2] = m4.data[2];
    m3.data[3] = m4.data[4];
    m3.data[4] = m4.data[5];
    m3.data[5] = m4.data[6];
    m3.data[6] = m4.data[8];
    m3.data[7] = m4.data[9];
    m3.data[8] = m4.data[10];
  }
  pc.extend(ForwardRenderer.prototype, {sortCompare:function(drawCallA, drawCallB) {
    if (drawCallA.layer === drawCallB.layer) {
      if (drawCallA.drawOrder && drawCallB.drawOrder) {
        return drawCallA.drawOrder - drawCallB.drawOrder;
      } else {
        if (drawCallA.zdist && drawCallB.zdist) {
          return drawCallB.zdist - drawCallA.zdist;
        } else {
          if (drawCallA.zdist2 && drawCallB.zdist2) {
            return drawCallA.zdist2 - drawCallB.zdist2;
          }
        }
      }
    }
    return drawCallB._key[pc.SORTKEY_FORWARD] - drawCallA._key[pc.SORTKEY_FORWARD];
  }, sortCompareMesh:function(drawCallA, drawCallB) {
    if (drawCallA.layer === drawCallB.layer) {
      if (drawCallA.drawOrder && drawCallB.drawOrder) {
        return drawCallA.drawOrder - drawCallB.drawOrder;
      } else {
        if (drawCallA.zdist && drawCallB.zdist) {
          return drawCallB.zdist - drawCallA.zdist;
        }
      }
    }
    keyA = drawCallA._key[pc.SORTKEY_FORWARD];
    keyB = drawCallB._key[pc.SORTKEY_FORWARD];
    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {
      return drawCallB.mesh.id - drawCallA.mesh.id;
    }
    return keyB - keyA;
  }, depthSortCompare:function(drawCallA, drawCallB) {
    keyA = drawCallA._key[pc.SORTKEY_DEPTH];
    keyB = drawCallB._key[pc.SORTKEY_DEPTH];
    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {
      return drawCallB.mesh.id - drawCallA.mesh.id;
    }
    return keyB - keyA;
  }, lightCompare:function(lightA, lightB) {
    return lightA.key - lightB.key;
  }, _isVisible:function(camera, meshInstance) {
    if (!meshInstance.visible) {
      return false;
    }
    meshPos = meshInstance.aabb.center;
    if (meshInstance._aabb._radiusVer !== meshInstance._aabbVer) {
      meshInstance._aabb._radius = meshInstance._aabb.halfExtents.length();
      meshInstance._aabb._radiusVer = meshInstance._aabbVer;
    }
    tempSphere.radius = meshInstance._aabb._radius;
    tempSphere.center = meshPos;
    return camera.frustum.containsSphere(tempSphere);
  }, getShadowCamera:function(device, light) {
    var shadowCam = light._shadowCamera;
    var shadowBuffer;
    if (shadowCam === null) {
      shadowCam = light._shadowCamera = createShadowCamera(device, light._shadowType, light._type);
      createShadowBuffer(device, light);
    } else {
      shadowBuffer = shadowCam.renderTarget;
      if (shadowBuffer.width !== light._shadowResolution || shadowBuffer.height !== light._shadowResolution) {
        createShadowBuffer(device, light);
      }
    }
    return shadowCam;
  }, updateCameraFrustum:function(camera) {
    if (camera.vrDisplay && camera.vrDisplay.presenting) {
      projMat = camera.vrDisplay.combinedProj;
      var parent = camera._node.getParent();
      if (parent) {
        viewMat.copy(parent.getWorldTransform()).mul(camera.vrDisplay.combinedViewInv).invert();
      } else {
        viewMat.copy(camera.vrDisplay.combinedView);
      }
      viewInvMat.copy(viewMat).invert();
      this.viewInvId.setValue(viewInvMat.data);
      camera.frustum.update(projMat, viewMat);
      return;
    }
    projMat = camera.getProjectionMatrix();
    if (camera.overrideCalculateProjection) {
      camera.calculateProjection(projMat, pc.VIEW_CENTER);
    }
    if (camera.overrideCalculateTransform) {
      camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);
    } else {
      var pos = camera._node.getPosition();
      var rot = camera._node.getRotation();
      viewInvMat.setTRS(pos, rot, pc.Vec3.ONE);
      this.viewInvId.setValue(viewInvMat.data);
    }
    viewMat.copy(viewInvMat).invert();
    camera.frustum.update(projMat, viewMat);
  }, setCamera:function(camera, target, clear, cullBorder) {
    var vrDisplay = camera.vrDisplay;
    if (!vrDisplay || !vrDisplay.presenting) {
      projMat = camera.getProjectionMatrix();
      if (camera.overrideCalculateProjection) {
        camera.calculateProjection(projMat, pc.VIEW_CENTER);
      }
      this.projId.setValue(projMat.data);
      if (camera.overrideCalculateTransform) {
        camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);
      } else {
        var pos = camera._node.getPosition();
        var rot = camera._node.getRotation();
        viewInvMat.setTRS(pos, rot, pc.Vec3.ONE);
      }
      this.viewInvId.setValue(viewInvMat.data);
      viewMat.copy(viewInvMat).invert();
      this.viewId.setValue(viewMat.data);
      mat3FromMat4(viewMat3, viewMat);
      this.viewId3.setValue(viewMat3.data);
      viewProjMat.mul2(projMat, viewMat);
      this.viewProjId.setValue(viewProjMat.data);
      this.viewPosId.setValue(camera._node.getPosition().data);
      camera.frustum.update(projMat, viewMat);
    } else {
      projL = vrDisplay.leftProj;
      projR = vrDisplay.rightProj;
      projMat = vrDisplay.combinedProj;
      if (camera.overrideCalculateProjection) {
        camera.calculateProjection(projL, pc.VIEW_LEFT);
        camera.calculateProjection(projR, pc.VIEW_RIGHT);
        camera.calculateProjection(projMat, pc.VIEW_CENTER);
      }
      if (camera.overrideCalculateTransform) {
        camera.calculateTransform(viewInvL, pc.VIEW_LEFT);
        camera.calculateTransform(viewInvR, pc.VIEW_RIGHT);
        camera.calculateTransform(viewInvMat, pc.VIEW_CENTER);
        viewL.copy(viewInvL).invert();
        viewR.copy(viewInvR).invert();
        viewMat.copy(viewInvMat).invert();
      } else {
        var parent = camera._node.getParent();
        if (parent) {
          var transform = parent.getWorldTransform();
          viewInvL.mul2(transform, vrDisplay.leftViewInv);
          viewInvR.mul2(transform, vrDisplay.rightViewInv);
          viewL.copy(viewInvL).invert();
          viewR.copy(viewInvR).invert();
          viewMat.copy(parent.getWorldTransform()).mul(vrDisplay.combinedViewInv).invert();
        } else {
          viewInvL.copy(vrDisplay.leftViewInv);
          viewInvR.copy(vrDisplay.rightViewInv);
          viewL.copy(vrDisplay.leftView);
          viewR.copy(vrDisplay.rightView);
          viewMat.copy(vrDisplay.combinedView);
        }
      }
      mat3FromMat4(viewMat3L, viewL);
      mat3FromMat4(viewMat3R, viewR);
      viewProjMatL.mul2(projL, viewL);
      viewProjMatR.mul2(projR, viewR);
      viewPosL.data[0] = viewInvL.data[12];
      viewPosL.data[1] = viewInvL.data[13];
      viewPosL.data[2] = viewInvL.data[14];
      viewPosR.data[0] = viewInvR.data[12];
      viewPosR.data[1] = viewInvR.data[13];
      viewPosR.data[2] = viewInvR.data[14];
      camera.frustum.update(projMat, viewMat);
    }
    this.nearClipId.setValue(camera._nearClip);
    this.farClipId.setValue(camera._farClip);
    this.cameraParamsId.setValue(camera._shaderParams.data);
    var device = this.device;
    device.setRenderTarget(target);
    device.updateBegin();
    var rect = camera.getRect();
    var pixelWidth = target ? target.width : device.width;
    var pixelHeight = target ? target.height : device.height;
    var x = Math.floor(rect.x * pixelWidth);
    var y = Math.floor(rect.y * pixelHeight);
    var w = Math.floor(rect.width * pixelWidth);
    var h = Math.floor(rect.height * pixelHeight);
    device.setViewport(x, y, w, h);
    device.setScissor(x, y, w, h);
    if (clear) {
      device.clear(camera._clearOptions);
    }
    rect = camera._scissorRect;
    x = Math.floor(rect.x * pixelWidth);
    y = Math.floor(rect.y * pixelHeight);
    w = Math.floor(rect.width * pixelWidth);
    h = Math.floor(rect.height * pixelHeight);
    device.setScissor(x, y, w, h);
    if (cullBorder) {
      device.setScissor(1, 1, pixelWidth - 2, pixelHeight - 2);
    }
  }, dispatchGlobalLights:function(scene) {
    var i;
    this.mainLight = -1;
    var scope = this.device.scope;
    this.ambientColor[0] = scene.ambientLight.data[0];
    this.ambientColor[1] = scene.ambientLight.data[1];
    this.ambientColor[2] = scene.ambientLight.data[2];
    if (scene.gammaCorrection) {
      for (i = 0; i < 3; i++) {
        this.ambientColor[i] = Math.pow(this.ambientColor[i], 2.2);
      }
    }
    this.ambientId.setValue(this.ambientColor);
    this.exposureId.setValue(scene.exposure);
    if (scene.skyboxModel) {
      this.skyboxIntensityId.setValue(scene.skyboxIntensity);
    }
  }, _resolveLight:function(scope, i) {
    var light = "light" + i;
    this.lightColorId[i] = scope.resolve(light + "_color");
    this.lightDirId[i] = scope.resolve(light + "_direction");
    this.lightShadowMapId[i] = scope.resolve(light + "_shadowMap");
    this.lightShadowMatrixId[i] = scope.resolve(light + "_shadowMatrix");
    this.lightShadowParamsId[i] = scope.resolve(light + "_shadowParams");
    this.lightShadowMatrixVsId[i] = scope.resolve(light + "_shadowMatrixVS");
    this.lightShadowParamsVsId[i] = scope.resolve(light + "_shadowParamsVS");
    this.lightDirVsId[i] = scope.resolve(light + "_directionVS");
    this.lightRadiusId[i] = scope.resolve(light + "_radius");
    this.lightPosId[i] = scope.resolve(light + "_position");
    this.lightInAngleId[i] = scope.resolve(light + "_innerConeAngle");
    this.lightOutAngleId[i] = scope.resolve(light + "_outerConeAngle");
    this.lightPosVsId[i] = scope.resolve(light + "_positionVS");
    this.lightCookieId[i] = scope.resolve(light + "_cookie");
    this.lightCookieIntId[i] = scope.resolve(light + "_cookieIntensity");
    this.lightCookieMatrixId[i] = scope.resolve(light + "_cookieMatrix");
    this.lightCookieOffsetId[i] = scope.resolve(light + "_cookieOffset");
  }, dispatchDirectLights:function(dirs, scene, mask) {
    var numDirs = dirs.length;
    var i;
    var directional, wtm;
    var cnt = 0;
    this.mainLight = -1;
    var scope = this.device.scope;
    for (i = 0; i < numDirs; i++) {
      if (!(dirs[i]._mask & mask)) {
        continue;
      }
      directional = dirs[i];
      wtm = directional._node.getWorldTransform();
      if (!this.lightColorId[cnt]) {
        this._resolveLight(scope, cnt);
      }
      this.lightColorId[cnt].setValue(scene.gammaCorrection ? directional._linearFinalColor.data : directional._finalColor.data);
      wtm.getY(directional._direction).scale(-1);
      this.lightDirId[cnt].setValue(directional._direction.normalize().data);
      if (directional.castShadows) {
        var shadowMap = directional._isPcf && this.device.webgl2 ? directional._shadowCamera.renderTarget.depthBuffer : directional._shadowCamera.renderTarget.colorBuffer;
        var bias;
        if (directional._isVsm) {
          bias = -0.00001 * 20;
        } else {
          bias = directional.shadowBias / directional._shadowCamera._farClip * 100;
          if (!this.device.webgl2 && this.device.extStandardDerivatives) {
            bias *= -100;
          }
        }
        var normalBias = directional._isVsm ? directional.vsmBias / (directional._shadowCamera._farClip / 7.0) : directional._normalOffsetBias;
        this.lightShadowMapId[cnt].setValue(shadowMap);
        this.lightShadowMatrixId[cnt].setValue(directional._shadowMatrix.data);
        var params = directional._rendererParams;
        if (params.length !== 3) {
          params.length = 3;
        }
        params[0] = directional._shadowResolution;
        params[1] = normalBias;
        params[2] = bias;
        this.lightShadowParamsId[cnt].setValue(params);
        if (this.mainLight < 0) {
          this.lightShadowMatrixVsId[cnt].setValue(directional._shadowMatrix.data);
          this.lightShadowParamsVsId[cnt].setValue(params);
          this.lightDirVsId[cnt].setValue(directional._direction.normalize().data);
          this.mainLight = i;
        }
      }
      cnt++;
    }
    return cnt;
  }, dispatchPointLight:function(scene, scope, point, cnt) {
    var wtm = point._node.getWorldTransform();
    if (!this.lightColorId[cnt]) {
      this._resolveLight(scope, cnt);
    }
    this.lightRadiusId[cnt].setValue(point.attenuationEnd);
    this.lightColorId[cnt].setValue(scene.gammaCorrection ? point._linearFinalColor.data : point._finalColor.data);
    wtm.getTranslation(point._position);
    this.lightPosId[cnt].setValue(point._position.data);
    if (point.castShadows) {
      var shadowMap = point._shadowCamera.renderTarget.colorBuffer;
      this.lightShadowMapId[cnt].setValue(shadowMap);
      var params = point._rendererParams;
      if (params.length !== 4) {
        params.length = 4;
      }
      params[0] = point._shadowResolution;
      params[1] = point._normalOffsetBias;
      params[2] = point.shadowBias;
      params[3] = 1.0 / point.attenuationEnd;
      this.lightShadowParamsId[cnt].setValue(params);
    }
    if (point._cookie) {
      this.lightCookieId[cnt].setValue(point._cookie);
      this.lightShadowMatrixId[cnt].setValue(wtm.data);
      this.lightCookieIntId[cnt].setValue(point.cookieIntensity);
    }
  }, dispatchSpotLight:function(scene, scope, spot, cnt) {
    var wtm = spot._node.getWorldTransform();
    if (!this.lightColorId[cnt]) {
      this._resolveLight(scope, cnt);
    }
    this.lightInAngleId[cnt].setValue(spot._innerConeAngleCos);
    this.lightOutAngleId[cnt].setValue(spot._outerConeAngleCos);
    this.lightRadiusId[cnt].setValue(spot.attenuationEnd);
    this.lightColorId[cnt].setValue(scene.gammaCorrection ? spot._linearFinalColor.data : spot._finalColor.data);
    wtm.getTranslation(spot._position);
    this.lightPosId[cnt].setValue(spot._position.data);
    wtm.getY(spot._direction).scale(-1);
    this.lightDirId[cnt].setValue(spot._direction.normalize().data);
    if (spot.castShadows) {
      var bias;
      if (spot._isVsm) {
        bias = -0.00001 * 20;
      } else {
        bias = spot.shadowBias * 20;
        if (!this.device.webgl2 && this.device.extStandardDerivatives) {
          bias *= -100;
        }
      }
      var normalBias = spot._isVsm ? spot.vsmBias / (spot.attenuationEnd / 7.0) : spot._normalOffsetBias;
      var shadowMap = spot._isPcf && this.device.webgl2 ? spot._shadowCamera.renderTarget.depthBuffer : spot._shadowCamera.renderTarget.colorBuffer;
      this.lightShadowMapId[cnt].setValue(shadowMap);
      this.lightShadowMatrixId[cnt].setValue(spot._shadowMatrix.data);
      var params = spot._rendererParams;
      if (params.length !== 4) {
        params.length = 4;
      }
      params[0] = spot._shadowResolution;
      params[1] = normalBias;
      params[2] = bias;
      params[3] = 1.0 / spot.attenuationEnd;
      this.lightShadowParamsId[cnt].setValue(params);
      if (this.mainLight < 0) {
        this.lightShadowMatrixVsId[cnt].setValue(spot._shadowMatrix.data);
        this.lightShadowParamsVsId[cnt].setValue(params);
        this.lightPosVsId[cnt].setValue(spot._position.data);
        this.mainLight = i;
      }
    }
    if (spot._cookie) {
      this.lightCookieId[cnt].setValue(spot._cookie);
      if (!spot.castShadows) {
        var shadowCam = this.getShadowCamera(this.device, spot);
        var shadowCamNode = shadowCam._node;
        shadowCamNode.setPosition(spot._node.getPosition());
        shadowCamNode.setRotation(spot._node.getRotation());
        shadowCamNode.rotateLocal(-90, 0, 0);
        shadowCam.projection = pc.PROJECTION_PERSPECTIVE;
        shadowCam.aspectRatio = 1;
        shadowCam.fov = spot._outerConeAngle * 2;
        shadowCamView.setTRS(shadowCamNode.getPosition(), shadowCamNode.getRotation(), pc.Vec3.ONE).invert();
        shadowCamViewProj.mul2(shadowCam.getProjectionMatrix(), shadowCamView);
        spot._shadowMatrix.mul2(scaleShift, shadowCamViewProj);
      }
      this.lightShadowMatrixId[cnt].setValue(spot._shadowMatrix.data);
      this.lightCookieIntId[cnt].setValue(spot.cookieIntensity);
      if (spot._cookieTransform) {
        this.lightCookieMatrixId[cnt].setValue(spot._cookieTransform.data);
        this.lightCookieOffsetId[cnt].setValue(spot._cookieOffset.data);
      }
    }
  }, dispatchLocalLights:function(sortedLights, scene, mask, usedDirLights, staticLightList) {
    var i;
    var point, spot;
    var pnts = sortedLights[pc.LIGHTTYPE_POINT];
    var spts = sortedLights[pc.LIGHTTYPE_SPOT];
    var numDirs = usedDirLights;
    var numPnts = pnts.length;
    var numSpts = spts.length;
    var cnt = numDirs;
    var scope = this.device.scope;
    for (i = 0; i < numPnts; i++) {
      point = pnts[i];
      if (!(point._mask & mask)) {
        continue;
      }
      if (point.isStatic) {
        continue;
      }
      this.dispatchPointLight(scene, scope, point, cnt);
      cnt++;
    }
    var staticId = 0;
    if (staticLightList) {
      point = staticLightList[staticId];
      while (point && point._type === pc.LIGHTTYPE_POINT) {
        this.dispatchPointLight(scene, scope, point, cnt);
        cnt++;
        staticId++;
        point = staticLightList[staticId];
      }
    }
    for (i = 0; i < numSpts; i++) {
      spot = spts[i];
      if (!(spot._mask & mask)) {
        continue;
      }
      if (spot.isStatic) {
        continue;
      }
      this.dispatchSpotLight(scene, scope, spot, cnt);
      cnt++;
    }
    if (staticLightList) {
      spot = staticLightList[staticId];
      while (spot && spot._type === pc.LIGHTTYPE_SPOT) {
        this.dispatchSpotLight(scene, scope, spot, cnt);
        cnt++;
        staticId++;
        spot = staticLightList[staticId];
      }
    }
  }, cull:function(camera, drawCalls, visibleList) {
    var visibleLength = 0;
    var i, drawCall, visible;
    var drawCallsCount = drawCalls.length;
    var cullingMask = camera.cullingMask || 4294967295;
    if (!camera.frustumCulling) {
      for (i = 0; i < drawCallsCount; i++) {
        drawCall = drawCalls[i];
        if (!drawCall.visible && !drawCall.command) {
          continue;
        }
        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) {
          continue;
        }
        visibleList[visibleLength] = drawCall;
        visibleLength++;
        drawCall.visibleThisFrame = true;
      }
      return visibleLength;
    }
    for (i = 0; i < drawCallsCount; i++) {
      drawCall = drawCalls[i];
      if (!drawCall.command) {
        if (!drawCall.visible) {
          continue;
        }
        visible = true;
        if (drawCall.mask && (drawCall.mask & cullingMask) === 0) {
          continue;
        }
        if (drawCall.cull) {
          visible = this._isVisible(camera, drawCall);
        }
        if (visible) {
          visibleList[visibleLength] = drawCall;
          visibleLength++;
          drawCall.visibleThisFrame = true;
        }
      } else {
        visibleList[visibleLength] = drawCall;
        visibleLength++;
        drawCall.visibleThisFrame = true;
      }
    }
    return visibleLength;
  }, cullLights:function(camera, lights) {
    var i, light, type;
    for (i = 0; i < lights.length; i++) {
      light = lights[i];
      type = light._type;
      if (light.castShadows && light._enabled && light.shadowUpdateMode !== pc.SHADOWUPDATE_NONE) {
        if (type !== pc.LIGHTTYPE_DIRECTIONAL) {
          light.getBoundingSphere(tempSphere);
          if (!camera.frustum.containsSphere(tempSphere)) {
            continue;
          }
          light.visibleThisFrame = true;
        }
      }
    }
  }, updateCpuSkinMatrices:function(drawCalls) {
    var drawCallsCount = drawCalls.length;
    if (drawCallsCount === 0) {
      return;
    }
    var i, skin;
    for (i = 0; i < drawCallsCount; i++) {
      skin = drawCalls[i].skinInstance;
      if (skin) {
        skin.updateMatrices(drawCalls[i].node);
        skin._dirty = true;
      }
    }
  }, updateGpuSkinMatrices:function(drawCalls) {
    var i, skin;
    var drawCallsCount = drawCalls.length;
    for (i = 0; i < drawCallsCount; i++) {
      if (!drawCalls[i].visibleThisFrame) {
        continue;
      }
      skin = drawCalls[i].skinInstance;
      if (skin) {
        if (skin._dirty) {
          skin.updateMatrixPalette();
          skin._dirty = false;
        }
      }
    }
  }, updateMorphedBounds:function(drawCalls) {
    var i, morph;
    var drawCallsCount = drawCalls.length;
    for (i = 0; i < drawCallsCount; i++) {
      morph = drawCalls[i].morphInstance;
      if (morph && morph._dirty) {
        morph.updateBounds(drawCalls[i].mesh);
      }
    }
  }, updateMorphing:function(drawCalls) {
    var i, morph;
    var drawCallsCount = drawCalls.length;
    for (i = 0; i < drawCallsCount; i++) {
      if (!drawCalls[i].visibleThisFrame) {
        continue;
      }
      morph = drawCalls[i].morphInstance;
      if (morph && morph._dirty) {
        morph.update(drawCalls[i].mesh);
        morph._dirty = false;
      }
    }
  }, setBaseConstants:function(device, material) {
    device.setCullMode(material.cull);
    if (material.opacityMap) {
      this.opacityMapId.setValue(material.opacityMap);
      this.alphaTestId.setValue(material.alphaTest);
    }
  }, setSkinning:function(device, meshInstance, material) {
    if (meshInstance.skinInstance) {
      this._skinDrawCalls++;
      if (device.supportsBoneTextures) {
        boneTexture = meshInstance.skinInstance.boneTexture;
        this.boneTextureId.setValue(boneTexture);
        boneTextureSize[0] = boneTexture.width;
        boneTextureSize[1] = boneTexture.height;
        this.boneTextureSizeId.setValue(boneTextureSize);
      } else {
        this.poseMatrixId.setValue(meshInstance.skinInstance.matrixPalette);
      }
    }
  }, drawInstance:function(device, meshInstance, mesh, style, normal) {
    instancingData = meshInstance.instancingData;
    if (instancingData) {
      this._instancedDrawCalls++;
      this._removedByInstancing += instancingData.count;
      device.setVertexBuffer(instancingData._buffer, 1, instancingData.offset);
      device.draw(mesh.primitive[style], instancingData.count);
      if (instancingData._buffer === pc._autoInstanceBuffer) {
        meshInstance.instancingData = null;
        return instancingData.count - 1;
      }
    } else {
      modelMatrix = meshInstance.node.worldTransform;
      this.modelMatrixId.setValue(modelMatrix.data);
      if (normal) {
        normalMatrix = meshInstance.node.normalMatrix;
        if (meshInstance.node._dirtyNormal) {
          modelMatrix.invertTo3x3(normalMatrix);
          normalMatrix.transpose();
          meshInstance.node._dirtyNormal = false;
        }
        this.normalMatrixId.setValue(normalMatrix.data);
      }
      device.draw(mesh.primitive[style]);
      return 0;
    }
  }, drawInstance2:function(device, meshInstance, mesh, style) {
    instancingData = meshInstance.instancingData;
    if (instancingData) {
      this._instancedDrawCalls++;
      this._removedByInstancing += instancingData.count;
      device.setVertexBuffer(instancingData._buffer, 1, instancingData.offset);
      device.draw(mesh.primitive[style], instancingData.count);
      if (instancingData._buffer === pc._autoInstanceBuffer) {
        meshInstance.instancingData = null;
        return instancingData.count - 1;
      }
    } else {
      device.draw(mesh.primitive[style]);
      return 0;
    }
  }, renderShadows:function(lights, cameraPass) {
    var device = this.device;
    var i, j, light, shadowShader, type, shadowCam, shadowCamNode, lightNode, pass, passes, frustumSize, shadowType, smode;
    var unitPerTexel, delta, p;
    var minx, miny, minz, maxx, maxy, maxz, centerx, centery;
    var opChan;
    var visible, cullTime, numInstances;
    var meshInstance, mesh, material;
    var style;
    var emptyAabb;
    var drawCallAabb;
    var settings;
    var visibleList, visibleLength;
    var passFlag = 1 << pc.SHADER_SHADOW;
    var paramName, parameter, parameters;
    for (i = 0; i < lights.length; i++) {
      light = lights[i];
      type = light._type;
      if (!light.castShadows || !light._enabled) {
        continue;
      }
      if (!light._shadowCamera) {
        this.getShadowCamera(device, light);
      }
      if (light.shadowUpdateMode !== pc.SHADOWUPDATE_NONE && light.visibleThisFrame) {
        shadowCam = this.getShadowCamera(device, light);
        shadowCamNode = shadowCam._node;
        lightNode = light._node;
        pass = 0;
        passes = 1;
        if (type === pc.LIGHTTYPE_DIRECTIONAL) {
          if (light._visibleLength[cameraPass] < 0) {
            continue;
          }
          settings = light._visibleCameraSettings[cameraPass];
          shadowCamNode.setPosition(settings.x, settings.y, settings.z);
          shadowCam.orthoHeight = settings.orthoHeight;
          shadowCam.farClip = settings.farClip;
          pass = cameraPass;
        } else {
          if (type === pc.LIGHTTYPE_SPOT) {
            this.viewPosId.setValue(shadowCamNode.getPosition().data);
            this.shadowMapLightRadiusId.setValue(light.attenuationEnd);
          } else {
            if (type === pc.LIGHTTYPE_POINT) {
              this.viewPosId.setValue(shadowCamNode.getPosition().data);
              this.shadowMapLightRadiusId.setValue(light.attenuationEnd);
              passes = 6;
            }
          }
        }
        if (type !== pc.LIGHTTYPE_POINT) {
          shadowCamView.setTRS(shadowCamNode.getPosition(), shadowCamNode.getRotation(), pc.Vec3.ONE).invert();
          shadowCamViewProj.mul2(shadowCam.getProjectionMatrix(), shadowCamView);
          light._shadowMatrix.mul2(scaleShift, shadowCamViewProj);
        }
        if (device.webgl2) {
          if (type === pc.LIGHTTYPE_POINT) {
            device.setDepthBias(false);
          } else {
            device.setDepthBias(true);
            device.setDepthBiasValues(light.shadowBias * -1000.0, light.shadowBias * -1000.0);
          }
        } else {
          if (device.extStandardDerivatives) {
            if (type === pc.LIGHTTYPE_POINT) {
              this.polygonOffset[0] = 0;
              this.polygonOffset[1] = 0;
              this.polygonOffsetId.setValue(this.polygonOffset);
            } else {
              this.polygonOffset[0] = light.shadowBias * -1000.0;
              this.polygonOffset[1] = light.shadowBias * -1000.0;
              this.polygonOffsetId.setValue(this.polygonOffset);
            }
          }
        }
        if (light.shadowUpdateMode === pc.SHADOWUPDATE_THISFRAME) {
          light.shadowUpdateMode = pc.SHADOWUPDATE_NONE;
        }
        this._shadowMapUpdates += passes;
        device.setBlending(false);
        device.setDepthWrite(true);
        device.setDepthTest(true);
        if (light._isPcf && device.webgl2 && type !== pc.LIGHTTYPE_POINT) {
          device.setColorWrite(false, false, false, false);
        } else {
          device.setColorWrite(true, true, true, true);
        }
        if (pass) {
          passes = pass + 1;
        } else {
          pass = 0;
        }
        while (pass < passes) {
          if (type === pc.LIGHTTYPE_POINT) {
            shadowCamNode.setRotation(pointLightRotations[pass]);
            shadowCam.renderTarget = light._shadowCubeMap[pass];
          }
          this.setCamera(shadowCam, shadowCam.renderTarget, true, type !== pc.LIGHTTYPE_POINT);
          visibleList = light._visibleList[pass];
          visibleLength = light._visibleLength[pass];
          shadowType = light._shadowType;
          smode = shadowType + type * numShadowModes;
          for (j = 0, numInstances = visibleLength; j < numInstances; j++) {
            meshInstance = visibleList[j];
            mesh = meshInstance.mesh;
            material = meshInstance.material;
            this.setBaseConstants(device, material);
            this.setSkinning(device, meshInstance, material);
            if (material.chunks) {
              parameters = material.parameters;
              for (paramName in parameters) {
                parameter = parameters[paramName];
                if (parameter.passFlags & passFlag) {
                  if (!parameter.scopeId) {
                    parameter.scopeId = device.scope.resolve(paramName);
                  }
                  parameter.scopeId.setValue(parameter.data);
                }
              }
              parameters = meshInstance.parameters;
              for (paramName in parameters) {
                parameter = parameters[paramName];
                if (parameter.passFlags & passFlag) {
                  if (!parameter.scopeId) {
                    parameter.scopeId = device.scope.resolve(paramName);
                  }
                  parameter.scopeId.setValue(parameter.data);
                }
              }
            }
            shadowShader = meshInstance._shader[pc.SHADER_SHADOW + smode];
            if (!shadowShader) {
              this.updateShader(meshInstance, meshInstance._shaderDefs, null, pc.SHADER_SHADOW + smode);
              shadowShader = meshInstance._shader[pc.SHADER_SHADOW + smode];
              meshInstance._key[pc.SORTKEY_DEPTH] = getDepthKey(meshInstance);
            }
            device.setShader(shadowShader);
            style = meshInstance.renderStyle;
            device.setVertexBuffer(meshInstance.morphInstance && meshInstance.morphInstance._vertexBuffer ? meshInstance.morphInstance._vertexBuffer : mesh.vertexBuffer, 0);
            device.setIndexBuffer(mesh.indexBuffer[style]);
            j += this.drawInstance(device, meshInstance, mesh, style);
            this._shadowDrawCalls++;
          }
          pass++;
          if (type === pc.LIGHTTYPE_DIRECTIONAL) {
            light._visibleLength[cameraPass] = -1;
          }
        }
        if (light._isVsm) {
          var filterSize = light._vsmBlurSize;
          if (filterSize > 1) {
            var origShadowMap = shadowCam.renderTarget;
            var tempRt = getShadowMapFromCache(device, light._shadowResolution, light._shadowType, 1);
            var blurMode = light.vsmBlurMode;
            var blurShader = (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShader : this.blurVsmShader)[blurMode][filterSize];
            if (!blurShader) {
              this.blurVsmWeights[filterSize] = gaussWeights(filterSize);
              var chunks = pc.shaderChunks;
              (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShader : this.blurVsmShader)[blurMode][filterSize] = blurShader = chunks.createShaderFromCode(this.device, chunks.fullscreenQuadVS, "#define SAMPLES " + filterSize + "\n" + (light._shadowType === pc.SHADOW_VSM8 ? this.blurPackedVsmShaderCode : this.blurVsmShaderCode)[blurMode], "blurVsm" + blurMode + "" + filterSize + "" + (light._shadowType === pc.SHADOW_VSM8));
            }
            blurScissorRect.z = light._shadowResolution - 2;
            blurScissorRect.w = blurScissorRect.z;
            this.sourceId.setValue(origShadowMap.colorBuffer);
            pixelOffset.x = 1.0 / light._shadowResolution;
            pixelOffset.y = 0.0;
            this.pixelOffsetId.setValue(pixelOffset.data);
            if (blurMode === pc.BLUR_GAUSSIAN) {
              this.weightId.setValue(this.blurVsmWeights[filterSize]);
            }
            pc.drawQuadWithShader(device, tempRt, blurShader, null, blurScissorRect);
            this.sourceId.setValue(tempRt.colorBuffer);
            pixelOffset.y = pixelOffset.x;
            pixelOffset.x = 0.0;
            this.pixelOffsetId.setValue(pixelOffset.data);
            pc.drawQuadWithShader(device, origShadowMap, blurShader, null, blurScissorRect);
          }
        }
      }
    }
    if (device.webgl2) {
      device.setDepthBias(false);
    } else {
      if (device.extStandardDerivatives) {
        this.polygonOffset[0] = 0;
        this.polygonOffset[1] = 0;
        this.polygonOffsetId.setValue(this.polygonOffset);
      }
    }
  }, updateShader:function(meshInstance, objDefs, staticLightList, pass, sortedLights) {
    meshInstance.material._scene = this.scene;
    meshInstance.material.updateShader(this.device, this.scene, objDefs, staticLightList, pass, sortedLights);
    meshInstance._shader[pass] = meshInstance.material.shader;
  }, renderForward:function(camera, drawCalls, drawCallsCount, sortedLights, pass, cullingMask, drawCallback, layer) {
    var device = this.device;
    var scene = this.scene;
    var vrDisplay = camera.vrDisplay;
    var passFlag = 1 << pass;
    var lightHash = layer ? layer._lightHash : 0;
    var i, drawCall, mesh, material, objDefs, variantKey, lightMask, style, usedDirLights;
    var prevMeshInstance = null, prevMaterial = null, prevObjDefs, prevLightMask, prevStatic;
    var paramName, parameter, parameters;
    var stencilFront, stencilBack;
    var halfWidth = device.width * 0.5;
    for (i = 0; i < drawCallsCount; i++) {
      drawCall = drawCalls[i];
      if (cullingMask && drawCall.mask && !(cullingMask & drawCall.mask)) {
        continue;
      }
      if (drawCall.command) {
        drawCall.command();
      } else {
        mesh = drawCall.mesh;
        material = drawCall.material;
        objDefs = drawCall._shaderDefs;
        lightMask = drawCall.mask;
        this.setSkinning(device, drawCall, material);
        if (material && material === prevMaterial && objDefs !== prevObjDefs) {
          prevMaterial = null;
        }
        if (drawCall.isStatic || prevStatic) {
          prevMaterial = null;
        }
        if (material !== prevMaterial) {
          this._materialSwitches++;
          if (!drawCall._shader[pass] || drawCall._shaderDefs !== objDefs || drawCall._lightHash !== lightHash) {
            if (!drawCall.isStatic) {
              variantKey = pass + "_" + objDefs + "_" + lightHash;
              drawCall._shader[pass] = material.variants[variantKey];
              if (!drawCall._shader[pass]) {
                this.updateShader(drawCall, objDefs, null, pass, sortedLights);
                material.variants[variantKey] = drawCall._shader[pass];
              }
            } else {
              this.updateShader(drawCall, objDefs, drawCall._staticLightList, pass, sortedLights);
            }
            drawCall._shaderDefs = objDefs;
            drawCall._lightHash = lightHash;
          }
          device.setShader(drawCall._shader[pass]);
          parameters = material.parameters;
          for (paramName in parameters) {
            parameter = parameters[paramName];
            if (parameter.passFlags & passFlag) {
              if (!parameter.scopeId) {
                parameter.scopeId = device.scope.resolve(paramName);
              }
              parameter.scopeId.setValue(parameter.data);
            }
          }
          if (!prevMaterial || lightMask !== prevLightMask) {
            usedDirLights = this.dispatchDirectLights(sortedLights[pc.LIGHTTYPE_DIRECTIONAL], scene, lightMask);
            this.dispatchLocalLights(sortedLights, scene, lightMask, usedDirLights, drawCall._staticLightList);
          }
          this.alphaTestId.setValue(material.alphaTest);
          device.setBlending(material.blend);
          if (material.blend) {
            if (material.separateAlphaBlend) {
              device.setBlendFunctionSeparate(material.blendSrc, material.blendDst, material.blendSrcAlpha, material.blendDstAlpha);
              device.setBlendEquationSeparate(material.blendEquation, material.blendAlphaEquation);
            } else {
              device.setBlendFunction(material.blendSrc, material.blendDst);
              device.setBlendEquation(material.blendEquation);
            }
          }
          device.setColorWrite(material.redWrite, material.greenWrite, material.blueWrite, material.alphaWrite);
          if (camera._cullFaces) {
            if (camera._flipFaces) {
              device.setCullMode(material.cull > 0 ? material.cull === pc.CULLFACE_FRONT ? pc.CULLFACE_BACK : pc.CULLFACE_FRONT : 0);
            } else {
              device.setCullMode(material.cull);
            }
          } else {
            device.setCullMode(pc.CULLFACE_NONE);
          }
          device.setDepthWrite(material.depthWrite);
          device.setDepthTest(material.depthTest);
          device.setAlphaToCoverage(material.alphaToCoverage);
          if (material.depthBias || material.slopeDepthBias) {
            device.setDepthBias(true);
            device.setDepthBiasValues(material.depthBias, material.slopeDepthBias);
          } else {
            device.setDepthBias(false);
          }
        }
        stencilFront = drawCall.stencilFront || material.stencilFront;
        stencilBack = drawCall.stencilBack || material.stencilBack;
        if (stencilFront || stencilBack) {
          device.setStencilTest(true);
          if (stencilFront === stencilBack) {
            device.setStencilFunc(stencilFront.func, stencilFront.ref, stencilFront.readMask);
            device.setStencilOperation(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);
          } else {
            if (stencilFront) {
              device.setStencilFuncFront(stencilFront.func, stencilFront.ref, stencilFront.readMask);
              device.setStencilOperationFront(stencilFront.fail, stencilFront.zfail, stencilFront.zpass, stencilFront.writeMask);
            } else {
              device.setStencilFuncFront(pc.FUNC_ALWAYS, 0, 255);
              device.setStencilOperationFront(pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, pc.STENCILOP_KEEPP, 255);
            }
            if (stencilBack) {
              device.setStencilFuncBack(stencilBack.func, stencilBack.ref, stencilBack.readMask);
              device.setStencilOperationBack(stencilBack.fail, stencilBack.zfail, stencilBack.zpass, stencilBack.writeMask);
            } else {
              device.setStencilFuncBack(pc.FUNC_ALWAYS, 0, 255);
              device.setStencilOperationBack(pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, pc.STENCILOP_KEEP, 255);
            }
          }
        } else {
          device.setStencilTest(false);
        }
        parameters = drawCall.parameters;
        for (paramName in parameters) {
          parameter = parameters[paramName];
          if (parameter.passFlags & passFlag) {
            if (!parameter.scopeId) {
              parameter.scopeId = device.scope.resolve(paramName);
            }
            parameter.scopeId.setValue(parameter.data);
          }
        }
        device.setVertexBuffer(drawCall.morphInstance && drawCall.morphInstance._vertexBuffer ? drawCall.morphInstance._vertexBuffer : mesh.vertexBuffer, 0);
        style = drawCall.renderStyle;
        device.setIndexBuffer(mesh.indexBuffer[style]);
        if (drawCallback) {
          drawCallback(drawCall, i);
        }
        if (vrDisplay && vrDisplay.presenting) {
          device.setViewport(0, 0, halfWidth, device.height);
          this.projId.setValue(projL.data);
          this.viewInvId.setValue(viewInvL.data);
          this.viewId.setValue(viewL.data);
          this.viewId3.setValue(viewMat3L.data);
          this.viewProjId.setValue(viewProjMatL.data);
          this.viewPosId.setValue(viewPosL.data);
          i += this.drawInstance(device, drawCall, mesh, style, true);
          this._forwardDrawCalls++;
          device.setViewport(halfWidth, 0, halfWidth, device.height);
          this.projId.setValue(projR.data);
          this.viewInvId.setValue(viewInvR.data);
          this.viewId.setValue(viewR.data);
          this.viewId3.setValue(viewMat3R.data);
          this.viewProjId.setValue(viewProjMatR.data);
          this.viewPosId.setValue(viewPosR.data);
          i += this.drawInstance2(device, drawCall, mesh, style);
          this._forwardDrawCalls++;
        } else {
          i += this.drawInstance(device, drawCall, mesh, style, true);
          this._forwardDrawCalls++;
        }
        if (i < drawCallsCount - 1 && drawCalls[i + 1].material === material) {
          for (paramName in parameters) {
            parameter = material.parameters[paramName];
            if (parameter) {
              if (!parameter.scopeId) {
                parameter.scopeId = device.scope.resolve(paramName);
              }
              parameter.scopeId.setValue(parameter.data);
            }
          }
        }
        prevMaterial = material;
        prevMeshInstance = drawCall;
        prevObjDefs = objDefs;
        prevLightMask = lightMask;
        prevStatic = drawCall.isStatic;
      }
    }
    device.updateEnd();
  }, setupInstancing:function(device) {
    if (!pc._instanceVertexFormat) {
      var formatDesc = [{semantic:pc.SEMANTIC_TEXCOORD2, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD3, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD4, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_TEXCOORD5, components:4, type:pc.TYPE_FLOAT32}];
      pc._instanceVertexFormat = new pc.VertexFormat(device, formatDesc);
    }
    if (device.enableAutoInstancing) {
      if (!pc._autoInstanceBuffer) {
        pc._autoInstanceBuffer = new pc.VertexBuffer(device, pc._instanceVertexFormat, device.autoInstancingMaxObjects, pc.BUFFER_DYNAMIC);
        pc._autoInstanceBufferData = new Float32Array(pc._autoInstanceBuffer.lock());
      }
    }
  }, revertStaticMeshes:function(meshInstances) {
    var drawCalls = meshInstances;
    var drawCallsCount = drawCalls.length;
    var drawCall;
    var newDrawCalls = [];
    var prevStaticSource;
    for (var i = 0; i < drawCallsCount; i++) {
      drawCall = drawCalls[i];
      if (drawCall._staticSource) {
        if (drawCall._staticSource !== prevStaticSource) {
          newDrawCalls.push(drawCall._staticSource);
          prevStaticSource = drawCall._staticSource;
        }
      } else {
        newDrawCalls.push(drawCall);
      }
    }
    meshInstances.length = newDrawCalls.length;
    for (i = 0; i < newDrawCalls.length; i++) {
      meshInstances[i] = newDrawCalls[i];
    }
  }, prepareStaticMeshes:function(meshInstances, lights) {
    var i, j, k, v, s, index;
    var device = this.device;
    var scene = this.scene;
    var drawCalls = meshInstances;
    var drawCallsCount = drawCalls.length;
    var drawCall, light;
    var newDrawCalls = [];
    var mesh;
    var indices, verts, numTris, elems, vertSize, offsetP, baseIndex;
    var _x, _y, _z;
    var minx, miny, minz, maxx, maxy, maxz;
    var minv, maxv;
    var minVec = new pc.Vec3;
    var maxVec = new pc.Vec3;
    var triAabb = new pc.BoundingBox;
    var localLightBounds = new pc.BoundingBox;
    var invMatrix = new pc.Mat4;
    var triLightComb = [];
    var triLightCombUsed;
    var indexBuffer, vertexBuffer;
    var combIndices, combIbName, combIb;
    var lightTypePass;
    var lightAabb = [];
    var aabb;
    var triBounds = [];
    var staticLights = [];
    var bit;
    var lht;
    for (i = 0; i < drawCallsCount; i++) {
      drawCall = drawCalls[i];
      if (!drawCall.isStatic) {
        newDrawCalls.push(drawCall);
      } else {
        aabb = drawCall.aabb;
        staticLights.length = 0;
        for (lightTypePass = pc.LIGHTTYPE_POINT; lightTypePass <= pc.LIGHTTYPE_SPOT; lightTypePass++) {
          for (j = 0; j < lights.length; j++) {
            light = lights[j];
            if (light._type !== lightTypePass) {
              continue;
            }
            if (light._enabled) {
              if (light._mask & drawCall.mask) {
                if (light.isStatic) {
                  if (!lightAabb[j]) {
                    lightAabb[j] = new pc.BoundingBox;
                    light._node.getWorldTransform();
                    light.getBoundingSphere(tempSphere);
                    lightAabb[j].center.copy(tempSphere.center);
                    lightAabb[j].halfExtents.x = tempSphere.radius;
                    lightAabb[j].halfExtents.y = tempSphere.radius;
                    lightAabb[j].halfExtents.z = tempSphere.radius;
                  }
                  if (!lightAabb[j].intersects(aabb)) {
                    continue;
                  }
                  staticLights.push(j);
                }
              }
            }
          }
        }
        if (staticLights.length === 0) {
          newDrawCalls.push(drawCall);
          continue;
        }
        mesh = drawCall.mesh;
        vertexBuffer = mesh.vertexBuffer;
        indexBuffer = mesh.indexBuffer[drawCall.renderStyle];
        indices = indexBuffer.bytesPerIndex === 2 ? new Uint16Array(indexBuffer.lock()) : new Uint32Array(indexBuffer.lock());
        numTris = mesh.primitive[drawCall.renderStyle].count / 3;
        baseIndex = mesh.primitive[drawCall.renderStyle].base;
        elems = vertexBuffer.format.elements;
        vertSize = vertexBuffer.format.size / 4;
        verts = new Float32Array(vertexBuffer.storage);
        for (k = 0; k < elems.length; k++) {
          if (elems[k].name === pc.SEMANTIC_POSITION) {
            offsetP = elems[k].offset / 4;
          }
        }
        triLightComb.length = numTris;
        for (k = 0; k < numTris; k++) {
          triLightComb[k] = 0;
        }
        triLightCombUsed = false;
        triBounds.length = numTris * 6;
        for (k = 0; k < numTris; k++) {
          minx = Number.MAX_VALUE;
          miny = Number.MAX_VALUE;
          minz = Number.MAX_VALUE;
          maxx = -Number.MAX_VALUE;
          maxy = -Number.MAX_VALUE;
          maxz = -Number.MAX_VALUE;
          for (v = 0; v < 3; v++) {
            index = indices[k * 3 + v + baseIndex];
            index = index * vertSize + offsetP;
            _x = verts[index];
            _y = verts[index + 1];
            _z = verts[index + 2];
            if (_x < minx) {
              minx = _x;
            }
            if (_y < miny) {
              miny = _y;
            }
            if (_z < minz) {
              minz = _z;
            }
            if (_x > maxx) {
              maxx = _x;
            }
            if (_y > maxy) {
              maxy = _y;
            }
            if (_z > maxz) {
              maxz = _z;
            }
          }
          index = k * 6;
          triBounds[index] = minx;
          triBounds[index + 1] = miny;
          triBounds[index + 2] = minz;
          triBounds[index + 3] = maxx;
          triBounds[index + 4] = maxy;
          triBounds[index + 5] = maxz;
        }
        for (s = 0; s < staticLights.length; s++) {
          j = staticLights[s];
          light = lights[j];
          invMatrix.copy(drawCall.node.worldTransform).invert();
          localLightBounds.setFromTransformedAabb(lightAabb[j], invMatrix);
          minv = localLightBounds.getMin().data;
          maxv = localLightBounds.getMax().data;
          bit = 1 << s;
          for (k = 0; k < numTris; k++) {
            index = k * 6;
            if (triBounds[index] <= maxv[0] && triBounds[index + 3] >= minv[0] && triBounds[index + 1] <= maxv[1] && triBounds[index + 4] >= minv[1] && triBounds[index + 2] <= maxv[2] && triBounds[index + 5] >= minv[2]) {
              triLightComb[k] |= bit;
              triLightCombUsed = true;
            }
          }
        }
        if (triLightCombUsed) {
          combIndices = {};
          for (k = 0; k < numTris; k++) {
            j = k * 3 + baseIndex;
            combIbName = triLightComb[k];
            if (!combIndices[combIbName]) {
              combIndices[combIbName] = [];
            }
            combIb = combIndices[combIbName];
            combIb.push(indices[j]);
            combIb.push(indices[j + 1]);
            combIb.push(indices[j + 2]);
          }
          for (combIbName in combIndices) {
            combIb = combIndices[combIbName];
            var ib = new pc.IndexBuffer(device, indexBuffer.format, combIb.length, indexBuffer.usage);
            var ib2 = ib.bytesPerIndex === 2 ? new Uint16Array(ib.lock()) : new Uint32Array(ib.lock());
            ib2.set(combIb);
            ib.unlock();
            minx = Number.MAX_VALUE;
            miny = Number.MAX_VALUE;
            minz = Number.MAX_VALUE;
            maxx = -Number.MAX_VALUE;
            maxy = -Number.MAX_VALUE;
            maxz = -Number.MAX_VALUE;
            for (k = 0; k < combIb.length; k++) {
              index = combIb[k];
              _x = verts[index * vertSize + offsetP];
              _y = verts[index * vertSize + offsetP + 1];
              _z = verts[index * vertSize + offsetP + 2];
              if (_x < minx) {
                minx = _x;
              }
              if (_y < miny) {
                miny = _y;
              }
              if (_z < minz) {
                minz = _z;
              }
              if (_x > maxx) {
                maxx = _x;
              }
              if (_y > maxy) {
                maxy = _y;
              }
              if (_z > maxz) {
                maxz = _z;
              }
            }
            minVec.set(minx, miny, minz);
            maxVec.set(maxx, maxy, maxz);
            var chunkAabb = new pc.BoundingBox;
            chunkAabb.setMinMax(minVec, maxVec);
            var mesh2 = new pc.Mesh;
            mesh2.vertexBuffer = vertexBuffer;
            mesh2.indexBuffer[0] = ib;
            mesh2.primitive[0].type = pc.PRIMITIVE_TRIANGLES;
            mesh2.primitive[0].base = 0;
            mesh2.primitive[0].count = combIb.length;
            mesh2.primitive[0].indexed = true;
            mesh2.aabb = chunkAabb;
            var instance = new pc.MeshInstance(drawCall.node, mesh2, drawCall.material);
            instance.isStatic = drawCall.isStatic;
            instance.visible = drawCall.visible;
            instance.layer = drawCall.layer;
            instance.castShadow = drawCall.castShadow;
            instance._receiveShadow = drawCall._receiveShadow;
            instance.cull = drawCall.cull;
            instance.pick = drawCall.pick;
            instance.mask = drawCall.mask;
            instance.parameters = drawCall.parameters;
            instance._shaderDefs = drawCall._shaderDefs;
            instance._staticSource = drawCall;
            if (drawCall._staticLightList) {
              instance._staticLightList = drawCall._staticLightList;
            } else {
              instance._staticLightList = [];
            }
            for (k = 0; k < staticLights.length; k++) {
              bit = 1 << k;
              if (combIbName & bit) {
                lht = lights[staticLights[k]];
                if (instance._staticLightList.indexOf(lht) < 0) {
                  instance._staticLightList.push(lht);
                }
              }
            }
            instance._staticLightList.sort(this.lightCompare);
            newDrawCalls.push(instance);
          }
        } else {
          newDrawCalls.push(drawCall);
        }
      }
    }
    meshInstances.length = newDrawCalls.length;
    for (i = 0; i < newDrawCalls.length; i++) {
      meshInstances[i] = newDrawCalls[i];
    }
  }, updateShaders:function(drawCalls) {
    var i;
    var materials = [];
    for (i = 0; i < drawCalls.length; i++) {
      var drawCall = drawCalls[i];
      if (drawCall.material !== undefined) {
        if (materials.indexOf(drawCall.material) === -1) {
          materials.push(drawCall.material);
        }
      }
    }
    for (i = 0; i < materials.length; i++) {
      var mat = materials[i];
      if (mat.updateShader !== pc.Material.prototype.updateShader) {
        mat.clearVariants();
        mat.shader = null;
      }
    }
  }, beginFrame:function(comp) {
    var device = this.device;
    var scene = this.scene;
    var meshInstances = comp._meshInstances;
    var lights = comp._lights;
    if (scene.updateSkybox) {
      scene._updateSkybox(device);
      scene.updateSkybox = false;
    }
    if (scene.updateShaders) {
      this.updateShaders(meshInstances);
      scene.updateShaders = false;
      scene._shaderVersion++;
    }
    this.updateCpuSkinMatrices(meshInstances);
    this.updateMorphedBounds(meshInstances);
    var i;
    var len = meshInstances.length;
    for (i = 0; i < len; i++) {
      meshInstances[i].visibleThisFrame = false;
    }
    len = lights.length;
    for (i = 0; i < len; i++) {
      lights[i].visibleThisFrame = lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL;
    }
  }, beginLayers:function(comp) {
    var scene = this.scene;
    var len = comp.layerList.length;
    var layer;
    var i, j;
    var shaderVersion = this.scene._shaderVersion;
    for (i = 0; i < len; i++) {
      comp.layerList[i]._postRenderCounter = 0;
    }
    var transparent;
    for (i = 0; i < len; i++) {
      layer = comp.layerList[i];
      layer._shaderVersion = shaderVersion;
      layer._preRenderCalledForCameras = 0;
      layer._postRenderCalledForCameras = 0;
      transparent = comp.subLayerList[i];
      if (transparent) {
        layer._postRenderCounter |= 2;
      } else {
        layer._postRenderCounter |= 1;
      }
      layer._postRenderCounterMax = layer._postRenderCounter;
      for (j = 0; j < layer.cameras.length; j++) {
        if (!layer.instances.visibleOpaque[j]) {
          layer.instances.visibleOpaque[j] = new pc.VisibleInstanceList;
        }
        if (!layer.instances.visibleTransparent[j]) {
          layer.instances.visibleTransparent[j] = new pc.VisibleInstanceList;
        }
        layer.instances.visibleOpaque[j].done = false;
        layer.instances.visibleTransparent[j].done = false;
      }
      if (layer._needsStaticPrepare && layer._staticLightHash) {
        if (layer._staticPrepareDone) {
          this.revertStaticMeshes(layer.opaqueMeshInstances);
          this.revertStaticMeshes(layer.transparentMeshInstances);
        }
        this.prepareStaticMeshes(layer.opaqueMeshInstances, layer._lights);
        this.prepareStaticMeshes(layer.transparentMeshInstances, layer._lights);
        comp._dirty = true;
        scene.updateShaders = true;
        layer._needsStaticPrepare = false;
        layer._staticPrepareDone = true;
      }
    }
  }, cullLocalShadowmap:function(light, drawCalls) {
    var i, type, shadowCam, shadowCamNode, passes, pass, j, numInstances, meshInstance, visibleList, vlen, visible;
    var lightNode;
    type = light._type;
    if (type === pc.LIGHTTYPE_DIRECTIONAL) {
      return;
    }
    light.visibleThisFrame = true;
    shadowCam = this.getShadowCamera(this.device, light);
    shadowCam.projection = pc.PROJECTION_PERSPECTIVE;
    shadowCam.nearClip = light.attenuationEnd / 1000;
    shadowCam.farClip = light.attenuationEnd;
    shadowCam.aspectRatio = 1;
    if (type === pc.LIGHTTYPE_SPOT) {
      shadowCam.fov = light._outerConeAngle * 2;
      passes = 1;
    } else {
      shadowCam.fov = 90;
      passes = 6;
    }
    shadowCamNode = shadowCam._node;
    lightNode = light._node;
    shadowCamNode.setPosition(lightNode.getPosition());
    if (type === pc.LIGHTTYPE_SPOT) {
      shadowCamNode.setRotation(lightNode.getRotation());
      shadowCamNode.rotateLocal(-90, 0, 0);
    }
    for (pass = 0; pass < passes; pass++) {
      if (type === pc.LIGHTTYPE_POINT) {
        shadowCamNode.setRotation(pointLightRotations[pass]);
        shadowCam.renderTarget = light._shadowCubeMap[pass];
      }
      this.updateCameraFrustum(shadowCam);
      visibleList = light._visibleList[pass];
      if (!visibleList) {
        visibleList = light._visibleList[pass] = [];
      }
      light._visibleLength[pass] = 0;
      vlen = 0;
      for (j = 0, numInstances = drawCalls.length; j < numInstances; j++) {
        meshInstance = drawCalls[j];
        visible = true;
        if (meshInstance.cull) {
          visible = this._isVisible(shadowCam, meshInstance);
        }
        if (visible) {
          visibleList[vlen] = meshInstance;
          vlen++;
          meshInstance.visibleThisFrame = true;
        }
      }
      light._visibleLength[pass] = vlen;
      if (visibleList.length !== vlen) {
        visibleList.length = vlen;
      }
      visibleList.sort(this.depthSortCompare);
    }
  }, cullDirectionalShadowmap:function(light, drawCalls, camera, pass) {
    var i, j, shadowShader, type, shadowCam, shadowCamNode, lightNode, passes, frustumSize, shadowType, smode, vlen, visibleList;
    var unitPerTexel, delta, p;
    var minx, miny, minz, maxx, maxy, maxz, centerx, centery;
    var opChan;
    var visible, cullTime, numInstances;
    var meshInstance, mesh, material;
    var style;
    var emptyAabb;
    var drawCallAabb;
    var device = this.device;
    light.visibleThisFrame = true;
    shadowCam = this.getShadowCamera(device, light);
    shadowCamNode = shadowCam._node;
    lightNode = light._node;
    shadowCamNode.setPosition(lightNode.getPosition());
    shadowCamNode.setRotation(lightNode.getRotation());
    shadowCamNode.rotateLocal(-90, 0, 0);
    _getFrustumPoints(camera, light.shadowDistance || camera._farClip, frustumPoints);
    frustumSize = frustumDiagonal.sub2(frustumPoints[0], frustumPoints[6]).length();
    frustumSize = Math.max(frustumSize, frustumDiagonal.sub2(frustumPoints[4], frustumPoints[6]).length());
    shadowCamView.copy(shadowCamNode.getWorldTransform()).invert();
    c2sc.copy(shadowCamView).mul(camera._node.worldTransform);
    for (j = 0; j < 8; j++) {
      c2sc.transformPoint(frustumPoints[j], frustumPoints[j]);
    }
    minx = miny = minz = 1000000;
    maxx = maxy = maxz = -1000000;
    for (j = 0; j < 8; j++) {
      p = frustumPoints[j];
      if (p.x < minx) {
        minx = p.x;
      }
      if (p.x > maxx) {
        maxx = p.x;
      }
      if (p.y < miny) {
        miny = p.y;
      }
      if (p.y > maxy) {
        maxy = p.y;
      }
      if (p.z < minz) {
        minz = p.z;
      }
      if (p.z > maxz) {
        maxz = p.z;
      }
    }
    unitPerTexel = frustumSize / light._shadowResolution;
    delta = (frustumSize - (maxx - minx)) * 0.5;
    minx = Math.floor((minx - delta) / unitPerTexel) * unitPerTexel;
    delta = (frustumSize - (maxy - miny)) * 0.5;
    miny = Math.floor((miny - delta) / unitPerTexel) * unitPerTexel;
    maxx = minx + frustumSize;
    maxy = miny + frustumSize;
    centerx = (maxx + minx) * 0.5;
    centery = (maxy + miny) * 0.5;
    shadowCamNode.translateLocal(centerx, centery, 100000);
    shadowCam.projection = pc.PROJECTION_ORTHOGRAPHIC;
    shadowCam.nearClip = 0;
    shadowCam.farClip = 200000;
    shadowCam.aspectRatio = 1;
    shadowCam.orthoHeight = frustumSize * 0.5;
    this.updateCameraFrustum(shadowCam);
    emptyAabb = true;
    visibleList = light._visibleList[pass];
    if (!visibleList) {
      visibleList = light._visibleList[pass] = [];
    }
    vlen = light._visibleLength[pass] = 0;
    for (j = 0, numInstances = drawCalls.length; j < numInstances; j++) {
      meshInstance = drawCalls[j];
      visible = true;
      if (meshInstance.cull) {
        visible = this._isVisible(shadowCam, meshInstance);
      }
      if (visible) {
        visibleList[vlen] = meshInstance;
        vlen++;
        meshInstance.visibleThisFrame = true;
        drawCallAabb = meshInstance.aabb;
        if (emptyAabb) {
          visibleSceneAabb.copy(drawCallAabb);
          emptyAabb = false;
        } else {
          visibleSceneAabb.add(drawCallAabb);
        }
      }
    }
    light._visibleLength[pass] = vlen;
    if (visibleList.length !== vlen) {
      visibleList.length = vlen;
    }
    visibleList.sort(this.depthSortCompare);
    var z = _getZFromAABBSimple(shadowCamView, visibleSceneAabb.getMin(), visibleSceneAabb.getMax(), minx, maxx, miny, maxy);
    maxz = z.max;
    if (z.min > minz) {
      minz = z.min;
    }
    shadowCamNode.setPosition(lightNode.getPosition());
    shadowCamNode.translateLocal(centerx, centery, maxz + directionalShadowEpsilon);
    shadowCam.farClip = maxz - minz;
    var settings = light._visibleCameraSettings[pass];
    if (!settings) {
      settings = light._visibleCameraSettings[pass] = {};
    }
    var lpos = shadowCamNode.getPosition().data;
    settings.x = lpos[0];
    settings.y = lpos[1];
    settings.z = lpos[2];
    settings.orthoHeight = shadowCam.orthoHeight;
    settings.farClip = shadowCam.farClip;
  }, gpuUpdate:function(drawCalls) {
    this.updateGpuSkinMatrices(drawCalls);
    this.updateMorphing(drawCalls);
  }, clearView:function(camera, target, options) {
    camera = camera.camera;
    var device = this.device;
    device.setRenderTarget(target);
    device.updateBegin();
    device.setColorWrite(true, true, true, true);
    device.setDepthWrite(true);
    var rect = camera.getRect();
    var pixelWidth = target ? target.width : device.width;
    var pixelHeight = target ? target.height : device.height;
    var x = Math.floor(rect.x * pixelWidth);
    var y = Math.floor(rect.y * pixelHeight);
    var w = Math.floor(rect.width * pixelWidth);
    var h = Math.floor(rect.height * pixelHeight);
    device.setViewport(x, y, w, h);
    device.setScissor(x, y, w, h);
    device.clear(options ? options : camera._clearOptions);
  }, setSceneConstants:function() {
    var device = this.device;
    var scene = this.scene;
    this.dispatchGlobalLights(scene);
    if (scene.fog !== pc.FOG_NONE) {
      this.fogColor[0] = scene.fogColor.data[0];
      this.fogColor[1] = scene.fogColor.data[1];
      this.fogColor[2] = scene.fogColor.data[2];
      if (scene.gammaCorrection) {
        for (i = 0; i < 3; i++) {
          this.fogColor[i] = Math.pow(this.fogColor[i], 2.2);
        }
      }
      this.fogColorId.setValue(this.fogColor);
      if (scene.fog === pc.FOG_LINEAR) {
        this.fogStartId.setValue(scene.fogStart);
        this.fogEndId.setValue(scene.fogEnd);
      } else {
        this.fogDensityId.setValue(scene.fogDensity);
      }
    }
    this._screenSize.x = device.width;
    this._screenSize.y = device.height;
    this._screenSize.z = 1.0 / device.width;
    this._screenSize.w = 1.0 / device.height;
    this.screenSizeId.setValue(this._screenSize.data);
  }, renderComposition:function(comp) {
    var device = this.device;
    var camera;
    var renderedRt = comp._renderedRt;
    var renderedByCam = comp._renderedByCam;
    var renderedLayer = comp._renderedLayer;
    var i, layer, transparent, cameras, j, rt, k, processedThisCamera, processedThisCameraAndLayer, processedThisCameraAndRt, visibleLength;
    this.beginLayers(comp);
    var updated = comp._update();
    if (updated & pc.COMPUPDATED_LIGHTS) {
      this.scene.updateShaders = true;
    }
    this.beginFrame(comp);
    this.setSceneConstants();
    var renderedLength = 0;
    var objects, drawCalls, visible;
    for (i = 0; i < comp.layerList.length; i++) {
      layer = comp.layerList[i];
      if (!layer.enabled || !comp.subLayerEnabled[i]) {
        continue;
      }
      transparent = comp.subLayerList[i];
      objects = layer.instances;
      cameras = layer.cameras;
      for (j = 0; j < cameras.length; j++) {
        camera = cameras[j];
        if (!camera) {
          continue;
        }
        camera.frameBegin(layer.renderTarget);
        drawCalls = transparent ? layer.transparentMeshInstances : layer.opaqueMeshInstances;
        processedThisCamera = false;
        processedThisCameraAndLayer = false;
        for (k = 0; k < renderedLength; k++) {
          if (renderedByCam[k] === camera) {
            processedThisCamera = true;
            if (renderedLayer[k] === layer) {
              processedThisCameraAndLayer = true;
              break;
            }
          }
        }
        if (!processedThisCamera) {
          this.updateCameraFrustum(camera.camera);
          this._camerasRendered++;
        }
        if (!processedThisCameraAndLayer) {
          this.cullLights(camera.camera, layer._lights);
        }
        if (!processedThisCamera || !processedThisCameraAndLayer) {
          renderedByCam[renderedLength] = camera;
          renderedLayer[renderedLength] = layer;
          renderedLength++;
        }
        visible = transparent ? objects.visibleTransparent[j] : objects.visibleOpaque[j];
        if (!visible.done) {
          if (layer.onPreCull) {
            layer.onPreCull(j);
          }
          visible.length = this.cull(camera.camera, drawCalls, visible.list);
          visible.done = true;
          if (layer.onPostCull) {
            layer.onPostCull(j);
          }
        }
        camera.frameEnd();
      }
    }
    var light, casters;
    for (i = 0; i < comp._lights.length; i++) {
      light = comp._lights[i];
      if (!light.visibleThisFrame) {
        continue;
      }
      if (light._type === pc.LIGHTTYPE_DIRECTIONAL) {
        continue;
      }
      if (!light.castShadows || !light._enabled || light.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {
        continue;
      }
      casters = comp._lightShadowCasters[i];
      this.cullLocalShadowmap(light, casters);
    }
    renderedLength = 0;
    var globalLightCounter = -1;
    for (i = 0; i < comp._lights.length; i++) {
      light = comp._lights[i];
      if (light._type !== pc.LIGHTTYPE_DIRECTIONAL) {
        continue;
      }
      globalLightCounter++;
      if (!light.castShadows || !light._enabled || light.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {
        continue;
      }
      casters = comp._lightShadowCasters[i];
      cameras = comp._globalLightCameras[globalLightCounter];
      for (j = 0; j < cameras.length; j++) {
        this.cullDirectionalShadowmap(light, casters, cameras[j].camera, comp._globalLightCameraIds[globalLightCounter][j]);
      }
    }
    this.gpuUpdate(comp._meshInstances);
    this.renderShadows(comp._sortedLights[pc.LIGHTTYPE_SPOT]);
    this.renderShadows(comp._sortedLights[pc.LIGHTTYPE_POINT]);
    renderedLength = 0;
    var cameraPass;
    var sortTime, draws, drawTime;
    for (i = 0; i < comp._renderList.length; i++) {
      layer = comp.layerList[comp._renderList[i]];
      if (!layer.enabled || !comp.subLayerEnabled[comp._renderList[i]]) {
        continue;
      }
      objects = layer.instances;
      transparent = comp.subLayerList[comp._renderList[i]];
      cameraPass = comp._renderListCamera[i];
      camera = layer.cameras[cameraPass];
      if (camera) {
        camera.frameBegin(layer.renderTarget);
      }
      if (!transparent && layer.onPreRenderOpaque) {
        layer.onPreRenderOpaque(cameraPass);
      } else {
        if (transparent && layer.onPreRenderTransparent) {
          layer.onPreRenderTransparent(cameraPass);
        }
      }
      if (!(layer._preRenderCalledForCameras & 1 << cameraPass)) {
        if (layer.onPreRender) {
          layer.onPreRender(cameraPass);
        }
        layer._preRenderCalledForCameras |= 1 << cameraPass;
        if (layer.overrideClear) {
          this.clearView(camera, layer.renderTarget, layer._clearOptions);
        }
      }
      if (camera) {
        rt = layer.renderTarget;
        processedThisCameraAndRt = false;
        for (k = 0; k < renderedLength; k++) {
          if (renderedRt[k] === rt && renderedByCam[k] === camera) {
            processedThisCameraAndRt = true;
            break;
          }
        }
        if (!processedThisCameraAndRt) {
          if (!layer.overrideClear) {
            this.clearView(camera, layer.renderTarget);
          }
          renderedRt[renderedLength] = rt;
          renderedByCam[renderedLength] = camera;
          renderedLength++;
        }
        this.renderShadows(layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL], cameraPass);
        layer._sortVisible(transparent, camera.node, cameraPass);
        visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];
        this.scene._activeCamera = camera.camera;
        this.setCamera(camera.camera, layer.renderTarget);
        this.renderForward(camera.camera, visible.list, visible.length, layer._sortedLights, layer.shaderPass, layer.cullingMask, layer.onDrawCall, layer);
        device.setColorWrite(true, true, true, true);
        device.setStencilTest(false);
        device.setAlphaToCoverage(false);
        device.setDepthBias(false);
        camera.frameEnd();
      }
      if (!transparent && layer.onPostRenderOpaque) {
        layer.onPostRenderOpaque(cameraPass);
      } else {
        if (transparent && layer.onPostRenderTransparent) {
          layer.onPostRenderTransparent(cameraPass);
        }
      }
      if (layer.onPostRender && !(layer._postRenderCalledForCameras & 1 << cameraPass)) {
        layer._postRenderCounter &= ~(transparent ? 2 : 1);
        if (layer._postRenderCounter === 0) {
          layer.onPostRender(cameraPass);
          layer._postRenderCalledForCameras |= 1 << cameraPass;
          layer._postRenderCounter = layer._postRenderCounterMax;
        }
      }
    }
  }});
  return {ForwardRenderer:ForwardRenderer, gaussWeights:gaussWeights};
}());
pc.extend(pc, function() {
  var scaleCompensatePosTransform = new pc.Mat4;
  var scaleCompensatePos = new pc.Vec3;
  var scaleCompensateRot = new pc.Quat;
  var scaleCompensateRot2 = new pc.Quat;
  var scaleCompensateScale = new pc.Vec3;
  var scaleCompensateScaleForParent = new pc.Vec3;
  var GraphNode = function GraphNode(name) {
    this.name = typeof name === "string" ? name : "Untitled";
    this.tags = new pc.Tags(this);
    this._labels = {};
    this.localPosition = new pc.Vec3(0, 0, 0);
    this.localRotation = new pc.Quat(0, 0, 0, 1);
    this.localScale = new pc.Vec3(1, 1, 1);
    this.localEulerAngles = new pc.Vec3(0, 0, 0);
    this.position = new pc.Vec3(0, 0, 0);
    this.rotation = new pc.Quat(0, 0, 0, 1);
    this.eulerAngles = new pc.Vec3(0, 0, 0);
    this.localTransform = new pc.Mat4;
    this._dirtyLocal = false;
    this._aabbVer = 0;
    this.worldTransform = new pc.Mat4;
    this._dirtyWorld = false;
    this.normalMatrix = new pc.Mat3;
    this._dirtyNormal = true;
    this._right = new pc.Vec3;
    this._up = new pc.Vec3;
    this._forward = new pc.Vec3;
    this._parent = null;
    this._children = [];
    this._enabled = true;
    this._enabledInHierarchy = false;
    this.scaleCompensation = false;
  };
  Object.defineProperty(GraphNode.prototype, "right", {get:function() {
    return this.getWorldTransform().getX(this._right).normalize();
  }});
  Object.defineProperty(GraphNode.prototype, "up", {get:function() {
    return this.getWorldTransform().getY(this._up).normalize();
  }});
  Object.defineProperty(GraphNode.prototype, "forward", {get:function() {
    return this.getWorldTransform().getZ(this._forward).normalize().scale(-1);
  }});
  Object.defineProperty(GraphNode.prototype, "enabled", {get:function() {
    return this._enabled && this._enabledInHierarchy;
  }, set:function(enabled) {
    if (this._enabled !== enabled) {
      this._enabled = enabled;
      if (!this._parent || this._parent.enabled) {
        this._notifyHierarchyStateChanged(this, enabled);
      }
    }
  }});
  Object.defineProperty(GraphNode.prototype, "parent", {get:function() {
    return this._parent;
  }});
  Object.defineProperty(GraphNode.prototype, "root", {get:function() {
    var parent = this._parent;
    if (!parent) {
      return this;
    }
    while (parent._parent) {
      parent = parent._parent;
    }
    return parent;
  }});
  Object.defineProperty(GraphNode.prototype, "children", {get:function() {
    return this._children;
  }});
  pc.extend(GraphNode.prototype, {_notifyHierarchyStateChanged:function(node, enabled) {
    node._onHierarchyStateChanged(enabled);
    var c = node._children;
    for (var i = 0, len = c.length; i < len; i++) {
      if (c[i]._enabled) {
        this._notifyHierarchyStateChanged(c[i], enabled);
      }
    }
  }, _onHierarchyStateChanged:function(enabled) {
    this._enabledInHierarchy = enabled;
  }, _cloneInternal:function(clone) {
    clone.name = this.name;
    var tags = this.tags._list;
    for (var i = 0; i < tags.length; i++) {
      clone.tags.add(tags[i]);
    }
    clone._labels = pc.extend(this._labels, {});
    clone.localPosition.copy(this.localPosition);
    clone.localRotation.copy(this.localRotation);
    clone.localScale.copy(this.localScale);
    clone.localEulerAngles.copy(this.localEulerAngles);
    clone.position.copy(this.position);
    clone.rotation.copy(this.rotation);
    clone.eulerAngles.copy(this.eulerAngles);
    clone.localTransform.copy(this.localTransform);
    clone._dirtyLocal = this._dirtyLocal;
    clone.worldTransform.copy(this.worldTransform);
    clone._dirtyWorld = this._dirtyWorld;
    clone._dirtyNormal = this._dirtyNormal;
    clone._aabbVer = this._aabbVer + 1;
    clone._enabled = this._enabled;
    clone.scaleCompensation = this.scaleCompensation;
    clone._enabledInHierarchy = false;
  }, clone:function() {
    var clone = new pc.GraphNode;
    this._cloneInternal(clone);
    return clone;
  }, find:function(attr, value) {
    var results = [];
    var len = this._children.length;
    var i, descendants;
    if (attr instanceof Function) {
      var fn = attr;
      for (i = 0; i < len; i++) {
        if (fn(this._children[i])) {
          results.push(this._children[i]);
        }
        descendants = this._children[i].find(fn);
        if (descendants.length) {
          results = results.concat(descendants);
        }
      }
    } else {
      var testValue;
      if (this[attr]) {
        if (this[attr] instanceof Function) {
          testValue = this[attr]();
        } else {
          testValue = this[attr];
        }
        if (testValue === value) {
          results.push(this);
        }
      }
      for (i = 0; i < len; ++i) {
        descendants = this._children[i].find(attr, value);
        if (descendants.length) {
          results = results.concat(descendants);
        }
      }
    }
    return results;
  }, findOne:function(attr, value) {
    var i;
    var len = this._children.length;
    var result = null;
    if (attr instanceof Function) {
      var fn = attr;
      result = fn(this);
      if (result) {
        return this;
      }
      for (i = 0; i < len; i++) {
        result = this._children[i].findOne(fn);
        if (result) {
          return this._children[i];
        }
      }
    } else {
      var testValue;
      if (this[attr]) {
        if (this[attr] instanceof Function) {
          testValue = this[attr]();
        } else {
          testValue = this[attr];
        }
        if (testValue === value) {
          return this;
        }
      }
      for (i = 0; i < len; i++) {
        result = this._children[i].findOne(attr, value);
        if (result !== null) {
          return result;
        }
      }
    }
    return null;
  }, findByTag:function() {
    var tags = this.tags._processArguments(arguments);
    return this._findByTag(tags);
  }, _findByTag:function(tags) {
    var result = [];
    var i, len = this._children.length;
    var descendants;
    for (i = 0; i < len; i++) {
      if (this._children[i].tags._has(tags)) {
        result.push(this._children[i]);
      }
      descendants = this._children[i]._findByTag(tags);
      if (descendants.length) {
        result = result.concat(descendants);
      }
    }
    return result;
  }, findByName:function(name) {
    if (this.name === name) {
      return this;
    }
    for (var i = 0; i < this._children.length; i++) {
      var found = this._children[i].findByName(name);
      if (found !== null) {
        return found;
      }
    }
    return null;
  }, findByPath:function(path) {
    var parts = path.split("/");
    var currentParent = this;
    var result = null;
    for (var i = 0, imax = parts.length; i < imax && currentParent; i++) {
      var part = parts[i];
      result = null;
      var children = currentParent._children;
      for (var j = 0, jmax = children.length; j < jmax; j++) {
        if (children[j].name == part) {
          result = children[j];
          break;
        }
      }
      currentParent = result;
    }
    return result;
  }, getPath:function() {
    var parent = this._parent;
    if (parent) {
      var path = this.name;
      var format = "{0}/{1}";
      while (parent && parent._parent) {
        path = pc.string.format(format, parent.name, path);
        parent = parent._parent;
      }
      return path;
    } else {
      return "";
    }
  }, getRoot:function() {
    var parent = this._parent;
    if (!parent) {
      return this;
    }
    while (parent._parent) {
      parent = parent._parent;
    }
    return parent;
  }, getParent:function() {
    return this._parent;
  }, isDescendantOf:function(node) {
    var parent = this._parent;
    while (parent) {
      if (parent === node) {
        return true;
      }
      parent = parent._parent;
    }
    return false;
  }, isAncestorOf:function(node) {
    return node.isDescendantOf(this);
  }, getChildren:function() {
    return this._children;
  }, getEulerAngles:function() {
    this.getWorldTransform().getEulerAngles(this.eulerAngles);
    return this.eulerAngles;
  }, getLocalEulerAngles:function() {
    this.localRotation.getEulerAngles(this.localEulerAngles);
    return this.localEulerAngles;
  }, getLocalPosition:function() {
    return this.localPosition;
  }, getLocalRotation:function() {
    return this.localRotation;
  }, getLocalScale:function() {
    return this.localScale;
  }, getLocalTransform:function() {
    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      this._dirtyLocal = false;
    }
    return this.localTransform;
  }, getName:function() {
    return this.name;
  }, getPosition:function() {
    this.getWorldTransform().getTranslation(this.position);
    return this.position;
  }, getRotation:function() {
    this.rotation.setFromMat4(this.getWorldTransform());
    return this.rotation;
  }, getWorldTransform:function() {
    if (!this._dirtyLocal && !this._dirtyWorld) {
      return this.worldTransform;
    }
    if (this._parent) {
      this._parent.getWorldTransform();
    }
    this._sync();
    return this.worldTransform;
  }, reparent:function(parent, index) {
    var current = this._parent;
    if (current) {
      current.removeChild(this);
    }
    if (parent) {
      if (index >= 0) {
        parent.insertChild(this, index);
      } else {
        parent.addChild(this);
      }
    }
  }, setLocalEulerAngles:function(x, y, z) {
    if (x instanceof pc.Vec3) {
      this.localRotation.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);
    } else {
      this.localRotation.setFromEulerAngles(x, y, z);
    }
    if (!this._dirtyLocal) {
      this._dirtify(true);
    }
  }, setLocalPosition:function(x, y, z) {
    if (x instanceof pc.Vec3) {
      this.localPosition.copy(x);
    } else {
      this.localPosition.set(x, y, z);
    }
    if (!this._dirtyLocal) {
      this._dirtify(true);
    }
  }, setLocalRotation:function(x, y, z, w) {
    if (x instanceof pc.Quat) {
      this.localRotation.copy(x);
    } else {
      this.localRotation.set(x, y, z, w);
    }
    if (!this._dirtyLocal) {
      this._dirtify(true);
    }
  }, setLocalScale:function(x, y, z) {
    if (x instanceof pc.Vec3) {
      this.localScale.copy(x);
    } else {
      this.localScale.set(x, y, z);
    }
    if (!this._dirtyLocal) {
      this._dirtify(true);
    }
  }, setName:function(name) {
    this.name = name;
  }, _dirtify:function(local) {
    if ((!local || local && this._dirtyLocal) && this._dirtyWorld) {
      return;
    }
    if (local) {
      this._dirtyLocal = true;
    }
    if (!this._dirtyWorld) {
      this._dirtyWorld = true;
      var i = this._children.length;
      while (i--) {
        if (this._children[i]._dirtyWorld) {
          continue;
        }
        this._children[i]._dirtify();
      }
    }
    this._dirtyNormal = true;
    this._aabbVer++;
  }, setPosition:function() {
    var position = new pc.Vec3;
    var invParentWtm = new pc.Mat4;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        position.copy(x);
      } else {
        position.set(x, y, z);
      }
      if (this._parent === null) {
        this.localPosition.copy(position);
      } else {
        invParentWtm.copy(this._parent.getWorldTransform()).invert();
        invParentWtm.transformPoint(position, this.localPosition);
      }
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), setRotation:function() {
    var rotation = new pc.Quat;
    var invParentRot = new pc.Quat;
    return function(x, y, z, w) {
      if (x instanceof pc.Quat) {
        rotation.copy(x);
      } else {
        rotation.set(x, y, z, w);
      }
      if (this._parent === null) {
        this.localRotation.copy(rotation);
      } else {
        var parentRot = this._parent.getRotation();
        invParentRot.copy(parentRot).invert();
        this.localRotation.copy(invParentRot).mul(rotation);
      }
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), setEulerAngles:function() {
    var invParentRot = new pc.Quat;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        this.localRotation.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);
      } else {
        this.localRotation.setFromEulerAngles(x, y, z);
      }
      if (this._parent !== null) {
        var parentRot = this._parent.getRotation();
        invParentRot.copy(parentRot).invert();
        this.localRotation.mul2(invParentRot, this.localRotation);
      }
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), addChild:function(node) {
    if (node._parent !== null) {
      throw new Error("GraphNode is already parented");
    }
    this._children.push(node);
    this._onInsertChild(node);
  }, addChildAndSaveTransform:function(node) {
    var wPos = node.getPosition();
    var wRot = node.getRotation();
    var current = node._parent;
    if (current) {
      current.removeChild(node);
    }
    if (this.tmpMat4 === undefined) {
      this.tmpMat4 = new pc.Mat4;
      this.tmpQuat = new pc.Quat;
    }
    node.setPosition(this.tmpMat4.copy(this.worldTransform).invert().transformPoint(wPos));
    node.setRotation(this.tmpQuat.copy(this.getRotation()).invert().mul(wRot));
    this._children.push(node);
    this._onInsertChild(node);
  }, insertChild:function(node, index) {
    if (node._parent !== null) {
      throw new Error("GraphNode is already parented");
    }
    this._children.splice(index, 0, node);
    this._onInsertChild(node);
  }, _onInsertChild:function(node) {
    node._parent = this;
    var enabledInHierarchy = node._enabled && this.enabled;
    if (node._enabledInHierarchy !== enabledInHierarchy) {
      node._enabledInHierarchy = enabledInHierarchy;
      node._notifyHierarchyStateChanged(node, enabledInHierarchy);
    }
    node._dirtify();
    if (node.fire) {
      node.fire("insert", this);
    }
  }, removeChild:function(child) {
    var i;
    var length = this._children.length;
    for (i = 0; i < length; ++i) {
      if (this._children[i] === child) {
        this._children.splice(i, 1);
        child._parent = null;
        return;
      }
    }
  }, addLabel:function(label) {
    this._labels[label] = true;
  }, getLabels:function() {
    return Object.keys(this._labels);
  }, hasLabel:function(label) {
    return !!this._labels[label];
  }, removeLabel:function(label) {
    delete this._labels[label];
  }, findByLabel:function(label, results) {
    var i, length = this._children.length;
    results = results || [];
    if (this.hasLabel(label)) {
      results.push(this);
    }
    for (i = 0; i < length; ++i) {
      results = this._children[i].findByLabel(label, results);
    }
    return results;
  }, _sync:function() {
    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      this._dirtyLocal = false;
    }
    if (this._dirtyWorld) {
      if (this._parent === null) {
        this.worldTransform.copy(this.localTransform);
      } else {
        if (this.scaleCompensation) {
          var parentWorldScale;
          var parent = this._parent;
          var scale = this.localScale;
          var parentToUseScaleFrom = parent;
          if (parentToUseScaleFrom) {
            while (parentToUseScaleFrom && parentToUseScaleFrom.scaleCompensation) {
              parentToUseScaleFrom = parentToUseScaleFrom._parent;
            }
            if (parentToUseScaleFrom) {
              parentToUseScaleFrom = parentToUseScaleFrom._parent;
              if (parentToUseScaleFrom) {
                parentWorldScale = parentToUseScaleFrom.worldTransform.getScale();
                scaleCompensateScale.mul2(parentWorldScale, this.localScale);
                scale = scaleCompensateScale;
              }
            }
          }
          scaleCompensateRot2.setFromMat4(parent.worldTransform);
          scaleCompensateRot.mul2(scaleCompensateRot2, this.localRotation);
          var tmatrix = parent.worldTransform;
          if (parent.scaleCompensation) {
            scaleCompensateScaleForParent.mul2(parentWorldScale, parent.getLocalScale());
            scaleCompensatePosTransform.setTRS(parent.worldTransform.getTranslation(scaleCompensatePos), scaleCompensateRot2, scaleCompensateScaleForParent);
            tmatrix = scaleCompensatePosTransform;
          }
          tmatrix.transformPoint(this.localPosition, scaleCompensatePos);
          this.worldTransform.setTRS(scaleCompensatePos, scaleCompensateRot, scale);
        } else {
          this.worldTransform.mul2(this._parent.worldTransform, this.localTransform);
        }
      }
      this._dirtyWorld = false;
    }
  }, syncHierarchy:function() {
    if (!this._enabled) {
      return;
    }
    if (this._dirtyLocal || this._dirtyWorld) {
      this._sync();
    }
    for (var i = 0; i < this._children.length; i++) {
      this._children[i].syncHierarchy();
    }
  }, lookAt:function() {
    var matrix = new pc.Mat4;
    var target = new pc.Vec3;
    var up = new pc.Vec3;
    var rotation = new pc.Quat;
    return function(tx, ty, tz, ux, uy, uz) {
      if (tx instanceof pc.Vec3) {
        target.copy(tx);
        if (ty instanceof pc.Vec3) {
          up.copy(ty);
        } else {
          up.copy(pc.Vec3.UP);
        }
      } else {
        if (tz === undefined) {
          return;
        } else {
          target.set(tx, ty, tz);
          if (ux !== undefined) {
            up.set(ux, uy, uz);
          } else {
            up.copy(pc.Vec3.UP);
          }
        }
      }
      matrix.setLookAt(this.getPosition(), target, up);
      rotation.setFromMat4(matrix);
      this.setRotation(rotation);
    };
  }(), translate:function() {
    var translation = new pc.Vec3;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        translation.copy(x);
      } else {
        translation.set(x, y, z);
      }
      translation.add(this.getPosition());
      this.setPosition(translation);
    };
  }(), translateLocal:function() {
    var translation = new pc.Vec3;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        translation.copy(x);
      } else {
        translation.set(x, y, z);
      }
      this.localRotation.transformVector(translation, translation);
      this.localPosition.add(translation);
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), rotate:function() {
    var quaternion = new pc.Quat;
    var invParentRot = new pc.Quat;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        quaternion.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);
      } else {
        quaternion.setFromEulerAngles(x, y, z);
      }
      if (this._parent === null) {
        this.localRotation.mul2(quaternion, this.localRotation);
      } else {
        var rot = this.getRotation();
        var parentRot = this._parent.getRotation();
        invParentRot.copy(parentRot).invert();
        quaternion.mul2(invParentRot, quaternion);
        this.localRotation.mul2(quaternion, rot);
      }
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), rotateLocal:function() {
    var quaternion = new pc.Quat;
    return function(x, y, z) {
      if (x instanceof pc.Vec3) {
        quaternion.setFromEulerAngles(x.data[0], x.data[1], x.data[2]);
      } else {
        quaternion.setFromEulerAngles(x, y, z);
      }
      this.localRotation.mul(quaternion);
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }()});
  return {GraphNode:GraphNode};
}());
pc.extend(pc, function() {
  var _deviceCoord = new pc.Vec3;
  var _far = new pc.Vec3;
  var _farW = new pc.Vec3;
  var _invViewProjMat = new pc.Mat4;
  var Camera = function() {
    this._projection = pc.PROJECTION_PERSPECTIVE;
    this._nearClip = 0.1;
    this._farClip = 10000;
    this._shaderParams = new pc.Vec4;
    this._fov = 45;
    this._orthoHeight = 10;
    this._aspect = 16 / 9;
    this._aspectRatioMode = pc.ASPECT_AUTO;
    this._horizontalFov = false;
    this.frustumCulling = false;
    this.cullingMask = 4294967295;
    this._renderDepthRequests = 0;
    this._projMatDirty = true;
    this._projMat = new pc.Mat4;
    this._viewMat = new pc.Mat4;
    this._viewProjMat = new pc.Mat4;
    this.vrDisplay = null;
    this._rect = {x:0, y:0, width:1, height:1};
    this._scissorRect = {x:0, y:0, width:1, height:1};
    this.frustum = new pc.Frustum(this._projMat, this._viewMat);
    this.renderTarget = null;
    this._depthTarget = null;
    this._clearOptions = {color:[0.5, 0.5, 0.5, 1.0], depth:1.0, stencil:0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH | pc.CLEARFLAG_STENCIL};
    this._node = null;
    this.calculateTransform = null;
    this.overrideCalculateTransform = false;
    this.calculateProjection = null;
    this.overrideCalculateProjection = false;
    this._cullFaces = true;
    this._flipFaces = false;
    this._component = null;
  };
  Camera.prototype = {clone:function() {
    var clone = new pc.Camera;
    clone.projection = this._projection;
    clone.nearClip = this._nearClip;
    clone.farClip = this._farClip;
    clone._shaderParams = this._shaderParams.clone();
    clone.fov = this._fov;
    clone.aspectRatio = this._aspect;
    clone._aspectRatioMode = this._aspectRatioMode;
    clone.renderTarget = this.renderTarget;
    clone.setClearOptions(this.getClearOptions());
    clone.frustumCulling = this.frustumCulling;
    clone.cullingMask = this.cullingMask;
    return clone;
  }, worldToScreen:function(worldCoord, cw, ch, screenCoord) {
    if (screenCoord === undefined) {
      screenCoord = new pc.Vec3;
    }
    var projMat = this.getProjectionMatrix();
    var wtm = this._node.getWorldTransform();
    this._viewMat.copy(wtm).invert();
    this._viewProjMat.mul2(projMat, this._viewMat);
    this._viewProjMat.transformPoint(worldCoord, screenCoord);
    var wp = worldCoord.data;
    var vpm = this._viewProjMat.data;
    var w = wp[0] * vpm[3] + wp[1] * vpm[7] + wp[2] * vpm[11] + 1 * vpm[15];
    screenCoord.x = (screenCoord.x / w + 1) * 0.5 * cw;
    screenCoord.y = (1 - screenCoord.y / w) * 0.5 * ch;
    return screenCoord;
  }, screenToWorld:function(x, y, z, cw, ch, worldCoord) {
    if (worldCoord === undefined) {
      worldCoord = new pc.Vec3;
    }
    var projMat = this.getProjectionMatrix();
    var wtm = this._node.getWorldTransform();
    this._viewMat.copy(wtm).invert();
    this._viewProjMat.mul2(projMat, this._viewMat);
    _invViewProjMat.copy(this._viewProjMat).invert();
    if (this._projection === pc.PROJECTION_PERSPECTIVE) {
      _far.set(x / cw * 2 - 1, (ch - y) / ch * 2 - 1, 1);
      _invViewProjMat.transformPoint(_far, _farW);
      var w = _far.x * _invViewProjMat.data[3] + _far.y * _invViewProjMat.data[7] + _far.z * _invViewProjMat.data[11] + _invViewProjMat.data[15];
      _farW.scale(1 / w);
      var alpha = z / this._farClip;
      worldCoord.lerp(this._node.getPosition(), _farW, alpha);
    } else {
      var range = this._farClip - this._nearClip;
      _deviceCoord.set(x / cw, (ch - y) / ch, z / range);
      _deviceCoord.scale(2);
      _deviceCoord.sub(pc.Vec3.ONE);
      _invViewProjMat.transformPoint(_deviceCoord, worldCoord);
    }
    return worldCoord;
  }, getClearOptions:function() {
    return this._clearOptions;
  }, getProjectionMatrix:function() {
    if (this._projMatDirty) {
      if (this._projection === pc.PROJECTION_PERSPECTIVE) {
        this._projMat.setPerspective(this._fov, this._aspect, this._nearClip, this._farClip, this._horizontalFov);
      } else {
        var y = this._orthoHeight;
        var x = y * this._aspect;
        this._projMat.setOrtho(-x, x, -y, y, this._nearClip, this._farClip);
      }
      var n = this._nearClip;
      var f = this._farClip;
      this._shaderParams.x = 1 / f;
      this._shaderParams.y = f;
      this._shaderParams.z = (1 - f / n) / 2;
      this._shaderParams.w = (1 + f / n) / 2;
      this._projMatDirty = false;
    }
    return this._projMat;
  }, getRect:function() {
    return this._rect;
  }, setClearOptions:function(options) {
    this._clearOptions.color[0] = options.color[0];
    this._clearOptions.color[1] = options.color[1];
    this._clearOptions.color[2] = options.color[2];
    this._clearOptions.color[3] = options.color[3];
    this._clearOptions.depth = options.depth;
    this._clearOptions.stencil = options.stencil;
    this._clearOptions.flags = options.flags;
  }, setRect:function(x, y, width, height) {
    this._rect.x = x;
    this._rect.y = y;
    this._rect.width = width;
    this._rect.height = height;
  }, setScissorRect:function(x, y, width, height) {
    this._scissorRect.x = x;
    this._scissorRect.y = y;
    this._scissorRect.width = width;
    this._scissorRect.height = height;
  }, requestDepthMap:function() {
    this._renderDepthRequests++;
  }, releaseDepthMap:function() {
    this._renderDepthRequests--;
  }};
  Object.defineProperty(Camera.prototype, "aspectRatio", {get:function() {
    return this._aspect;
  }, set:function(v) {
    if (this._aspect !== v) {
      this._aspect = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "projection", {get:function() {
    return this._projection;
  }, set:function(v) {
    if (this._projection !== v) {
      this._projection = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "nearClip", {get:function() {
    return this._nearClip;
  }, set:function(v) {
    if (this._nearClip !== v) {
      this._nearClip = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "farClip", {get:function() {
    return this._farClip;
  }, set:function(v) {
    if (this._farClip !== v) {
      this._farClip = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "fov", {get:function() {
    return this._fov;
  }, set:function(v) {
    if (this._fov !== v) {
      this._fov = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "horizontalFov", {get:function() {
    return this._horizontalFov;
  }, set:function(v) {
    if (this._horizontalFov !== v) {
      this._horizontalFov = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "orthoHeight", {get:function() {
    return this._orthoHeight;
  }, set:function(v) {
    if (this._orthoHeight !== v) {
      this._orthoHeight = v;
      this._projMatDirty = true;
    }
  }});
  Object.defineProperty(Camera.prototype, "clearColor", {get:function() {
    return this._clearOptions.color;
  }, set:function(v) {
    this._clearOptions.color[0] = v[0];
    this._clearOptions.color[1] = v[1];
    this._clearOptions.color[2] = v[2];
    this._clearOptions.color[3] = v[3];
  }});
  Object.defineProperty(Camera.prototype, "clearDepth", {get:function() {
    return this._clearOptions.depth;
  }, set:function(v) {
    this._clearOptions.depth = v;
  }});
  Object.defineProperty(Camera.prototype, "clearStencil", {get:function() {
    return this._clearOptions.stencil;
  }, set:function(v) {
    this._clearOptions.stencil = v;
  }});
  Object.defineProperty(Camera.prototype, "clearFlags", {get:function() {
    return this._clearOptions.flags;
  }, set:function(v) {
    this._clearOptions.flags = v;
  }});
  return {Camera:Camera};
}());
pc.extend(pc, function() {
  var spotCenter = new pc.Vec3;
  var spotEndPoint = new pc.Vec3;
  var tmpVec = new pc.Vec3;
  var chanId = {r:0, g:1, b:2, a:3};
  var Light = function Light() {
    this._type = pc.LIGHTTYPE_DIRECTIONAL;
    this._color = new pc.Color(0.8, 0.8, 0.8);
    this._intensity = 1;
    this._castShadows = false;
    this._enabled = false;
    this._mask = 1;
    this.isStatic = false;
    this.key = 0;
    this.bakeDir = true;
    this.attenuationStart = 10;
    this.attenuationEnd = 10;
    this._falloffMode = 0;
    this._shadowType = pc.SHADOW_PCF3;
    this._vsmBlurSize = 11;
    this.vsmBlurMode = pc.BLUR_GAUSSIAN;
    this.vsmBias = 0.01 * 0.25;
    this._cookie = null;
    this.cookieIntensity = 1;
    this._cookieFalloff = true;
    this._cookieChannel = "rgb";
    this._cookieTransform = null;
    this._cookieOffset = null;
    this._cookieTransformSet = false;
    this._cookieOffsetSet = false;
    this._innerConeAngle = 40;
    this._outerConeAngle = 45;
    this._finalColor = new pc.Vec3(0.8, 0.8, 0.8);
    var c = Math.pow(this._finalColor.data[0], 2.2);
    this._linearFinalColor = new pc.Vec3(c, c, c);
    this._position = new pc.Vec3(0, 0, 0);
    this._direction = new pc.Vec3(0, 0, 0);
    this._innerConeAngleCos = Math.cos(this._innerConeAngle * Math.PI / 180);
    this._outerConeAngleCos = Math.cos(this._outerConeAngle * Math.PI / 180);
    this._shadowCamera = null;
    this._shadowMatrix = new pc.Mat4;
    this.shadowDistance = 40;
    this._shadowResolution = 1024;
    this.shadowBias = -0.0005;
    this._normalOffsetBias = 0.0;
    this.shadowUpdateMode = pc.SHADOWUPDATE_REALTIME;
    this._scene = null;
    this._node = null;
    this._rendererParams = [];
    this._isVsm = false;
    this._isPcf = true;
    this._cacheShadowMap = false;
    this._isCachedShadowMap = false;
    this._visibleLength = [0];
    this._visibleList = [[]];
    this._visibleCameraSettings = [];
  };
  Light.prototype = {clone:function() {
    var clone = new pc.Light;
    clone.type = this._type;
    clone.setColor(this._color);
    clone.intensity = this._intensity;
    clone.castShadows = this.castShadows;
    clone.enabled = this._enabled;
    clone.attenuationStart = this.attenuationStart;
    clone.attenuationEnd = this.attenuationEnd;
    clone.falloffMode = this._falloffMode;
    clone.shadowType = this._shadowType;
    clone.vsmBlurSize = this._vsmBlurSize;
    clone.vsmBlurMode = this.vsmBlurMode;
    clone.vsmBias = this.vsmBias;
    clone.shadowUpdateMode = this.shadowUpdateMode;
    clone.mask = this._mask;
    clone.innerConeAngle = this._innerConeAngle;
    clone.outerConeAngle = this._outerConeAngle;
    clone.shadowBias = this.shadowBias;
    clone.normalOffsetBias = this._normalOffsetBias;
    clone.shadowResolution = this._shadowResolution;
    clone.shadowDistance = this.shadowDistance;
    return clone;
  }, getColor:function() {
    return this._color;
  }, getBoundingSphere:function(sphere) {
    if (this._type === pc.LIGHTTYPE_SPOT) {
      var range = this.attenuationEnd;
      var angle = this._outerConeAngle;
      var f = Math.cos(angle * pc.math.DEG_TO_RAD);
      var node = this._node;
      spotCenter.copy(node.up);
      spotCenter.scale(-range * 0.5 * f);
      spotCenter.add(node.getPosition());
      sphere.center = spotCenter;
      spotEndPoint.copy(node.up);
      spotEndPoint.scale(-range);
      tmpVec.copy(node.right);
      tmpVec.scale(Math.sin(angle * pc.math.DEG_TO_RAD) * range);
      spotEndPoint.add(tmpVec);
      sphere.radius = spotEndPoint.length() * 0.5;
    } else {
      if (this._type === pc.LIGHTTYPE_POINT) {
        sphere.center = this._node.getPosition();
        sphere.radius = this.attenuationEnd;
      }
    }
  }, getBoundingBox:function(box) {
    if (this._type === pc.LIGHTTYPE_SPOT) {
      var range = this.attenuationEnd;
      var angle = this._outerConeAngle;
      var node = this._node;
      var scl = Math.abs(Math.sin(angle * pc.math.DEG_TO_RAD) * range);
      box.center.set(0, -range * 0.5, 0);
      box.halfExtents.set(scl, range * 0.5, scl);
      box.setFromTransformedAabb(box, node.getWorldTransform());
    } else {
      if (this._type === pc.LIGHTTYPE_POINT) {
        box.center.copy(this._node.getPosition());
        box.halfExtents.set(this.attenuationEnd, this.attenuationEnd, this.attenuationEnd);
      }
    }
  }, setColor:function() {
    var r, g, b;
    if (arguments.length === 1) {
      r = arguments[0].r;
      g = arguments[0].g;
      b = arguments[0].b;
    } else {
      if (arguments.length === 3) {
        r = arguments[0];
        g = arguments[1];
        b = arguments[2];
      }
    }
    this._color.set(r, g, b);
    var i = this._intensity;
    this._finalColor.set(r * i, g * i, b * i);
    for (var c = 0; c < 3; c++) {
      if (i >= 1) {
        this._linearFinalColor.data[c] = Math.pow(this._finalColor.data[c] / i, 2.2) * i;
      } else {
        this._linearFinalColor.data[c] = Math.pow(this._finalColor.data[c], 2.2);
      }
    }
  }, _destroyShadowMap:function() {
    if (this._shadowCamera) {
      if (!this._isCachedShadowMap) {
        var rt = this._shadowCamera.renderTarget;
        var i;
        if (rt) {
          if (rt.length) {
            for (i = 0; i < rt.length; i++) {
              if (rt[i].colorBuffer) {
                rt[i].colorBuffer.destroy();
              }
              rt[i].destroy();
            }
          } else {
            if (rt.colorBuffer) {
              rt.colorBuffer.destroy();
            }
            rt.destroy();
          }
        }
      }
      this._shadowCamera.renderTarget = null;
      this._shadowCamera = null;
      this._shadowCubeMap = null;
      if (this.shadowUpdateMode === pc.SHADOWUPDATE_NONE) {
        this.shadowUpdateMode = pc.SHADOWUPDATE_THISFRAME;
      }
    }
  }, updateShadow:function() {
    if (this.shadowUpdateMode !== pc.SHADOWUPDATE_REALTIME) {
      this.shadowUpdateMode = pc.SHADOWUPDATE_THISFRAME;
    }
  }, updateKey:function() {
    var key = this._type << 29 | (this._castShadows ? 1 : 0) << 28 | this._shadowType << 25 | this._falloffMode << 23 | (this._normalOffsetBias !== 0.0 ? 1 : 0) << 22 | (this._cookie ? 1 : 0) << 21 | (this._cookieFalloff ? 1 : 0) << 20 | chanId[this._cookieChannel.charAt(0)] << 18 | (this._cookieTransform ? 1 : 0) << 12;
    if (this._cookieChannel.length === 3) {
      key |= chanId[this._cookieChannel.charAt(1)] << 16;
      key |= chanId[this._cookieChannel.charAt(2)] << 14;
    }
    this.key = key;
  }};
  Object.defineProperty(Light.prototype, "enabled", {get:function() {
    return this._type;
  }, set:function(value) {
    if (this._type === value) {
      return;
    }
    this._enabled = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
  }});
  Object.defineProperty(Light.prototype, "type", {get:function() {
    return this._type;
  }, set:function(value) {
    if (this._type === value) {
      return;
    }
    this._type = value;
    this._destroyShadowMap();
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
    var stype = this._shadowType;
    this._shadowType = null;
    this.shadowType = stype;
    if (this._scene !== null) {
      this._scene.layers._dirtyLights = true;
    }
  }});
  Object.defineProperty(Light.prototype, "mask", {get:function() {
    return this._mask;
  }, set:function(value) {
    if (this._mask === value) {
      return;
    }
    this._mask = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
  }});
  Object.defineProperty(Light.prototype, "shadowType", {get:function() {
    return this._shadowType;
  }, set:function(value) {
    if (this._shadowType === value) {
      return;
    }
    var device = pc.Application.getApplication().graphicsDevice;
    if (this._type === pc.LIGHTTYPE_POINT) {
      value = pc.SHADOW_PCF3;
    }
    if (value === pc.SHADOW_PCF5 && !device.webgl2) {
      value = pc.SHADOW_PCF3;
    }
    if (value === pc.SHADOW_VSM32 && !device.extTextureFloatRenderable) {
      value = pc.SHADOW_VSM16;
    }
    if (value === pc.SHADOW_VSM16 && !device.extTextureHalfFloatRenderable) {
      value = pc.SHADOW_VSM8;
    }
    this._isVsm = value >= pc.SHADOW_VSM8 && value <= pc.SHADOW_VSM32;
    this._isPcf = value === pc.SHADOW_PCF5 || value === pc.SHADOW_PCF3;
    this._shadowType = value;
    this._destroyShadowMap();
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "castShadows", {get:function() {
    return this._castShadows && this._mask !== pc.MASK_LIGHTMAP && this._mask !== 0;
  }, set:function(value) {
    if (this._castShadows === value) {
      return;
    }
    this._castShadows = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "shadowResolution", {get:function() {
    return this._shadowResolution;
  }, set:function(value) {
    if (this._shadowResolution === value) {
      return;
    }
    var device = pc.Application.getApplication().graphicsDevice;
    if (this._type === pc.LIGHTTYPE_POINT) {
      value = Math.min(value, device.maxCubeMapSize);
    } else {
      value = Math.min(value, device.maxTextureSize);
    }
    this._shadowResolution = value;
  }});
  Object.defineProperty(Light.prototype, "vsmBlurSize", {get:function() {
    return this._vsmBlurSize;
  }, set:function(value) {
    if (this._vsmBlurSize === value) {
      return;
    }
    if (value % 2 === 0) {
      value++;
    }
    this._vsmBlurSize = value;
  }});
  Object.defineProperty(Light.prototype, "normalOffsetBias", {get:function() {
    return this._normalOffsetBias;
  }, set:function(value) {
    if (this._normalOffsetBias === value) {
      return;
    }
    if (!this._normalOffsetBias && value || this._normalOffsetBias && !value) {
      if (this._scene !== null) {
        this._scene.updateShaders = true;
      }
      this.updateKey();
    }
    this._normalOffsetBias = value;
  }});
  Object.defineProperty(Light.prototype, "falloffMode", {get:function() {
    return this._falloffMode;
  }, set:function(value) {
    if (this._falloffMode === value) {
      return;
    }
    this._falloffMode = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "innerConeAngle", {get:function() {
    return this._innerConeAngle;
  }, set:function(value) {
    if (this._innerConeAngle === value) {
      return;
    }
    this._innerConeAngle = value;
    this._innerConeAngleCos = Math.cos(value * Math.PI / 180);
  }});
  Object.defineProperty(Light.prototype, "outerConeAngle", {get:function() {
    return this._outerConeAngle;
  }, set:function(value) {
    if (this._outerConeAngle === value) {
      return;
    }
    this._outerConeAngle = value;
    this._outerConeAngleCos = Math.cos(value * Math.PI / 180);
  }});
  Object.defineProperty(Light.prototype, "intensity", {get:function() {
    return this._intensity;
  }, set:function(value) {
    if (this._intensity === value) {
      return;
    }
    this._intensity = value;
    var c = this._color.data;
    var r = c[0];
    var g = c[1];
    var b = c[2];
    var i = this._intensity;
    this._finalColor.set(r * i, g * i, b * i);
    for (var j = 0; j < 3; j++) {
      if (i >= 1) {
        this._linearFinalColor.data[j] = Math.pow(this._finalColor.data[j] / i, 2.2) * i;
      } else {
        this._linearFinalColor.data[j] = Math.pow(this._finalColor.data[j], 2.2);
      }
    }
  }});
  Object.defineProperty(Light.prototype, "cookie", {get:function() {
    return this._cookie;
  }, set:function(value) {
    if (this._cookie === value) {
      return;
    }
    this._cookie = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "cookieFalloff", {get:function() {
    return this._cookieFalloff;
  }, set:function(value) {
    if (this._cookieFalloff === value) {
      return;
    }
    this._cookieFalloff = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "cookieChannel", {get:function() {
    return this._cookieChannel;
  }, set:function(value) {
    if (this._cookieChannel === value) {
      return;
    }
    if (value.length < 3) {
      var chr = value.charAt(value.length - 1);
      var addLen = 3 - value.length;
      for (var i = 0; i < addLen; i++) {
        value += chr;
      }
    }
    this._cookieChannel = value;
    if (this._scene !== null) {
      this._scene.updateShaders = true;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "cookieTransform", {get:function() {
    return this._cookieTransform;
  }, set:function(value) {
    if (this._cookieTransform === value) {
      return;
    }
    var xformOld = !!(this._cookieTransformSet || this._cookieOffsetSet);
    var xformNew = !!(value || this._cookieOffsetSet);
    if (xformOld !== xformNew) {
      if (this._scene !== null) {
        this._scene.updateShaders = true;
      }
    }
    this._cookieTransform = value;
    this._cookieTransformSet = !!value;
    if (value && !this._cookieOffset) {
      this.cookieOffset = new pc.Vec2;
      this._cookieOffsetSet = false;
    }
    this.updateKey();
  }});
  Object.defineProperty(Light.prototype, "cookieOffset", {get:function() {
    return this._cookieOffset;
  }, set:function(value) {
    if (this._cookieOffset === value) {
      return;
    }
    var xformOld = !!(this._cookieTransformSet || this._cookieOffsetSet);
    var xformNew = !!(this._cookieTransformSet || value);
    if (xformOld !== xformNew) {
      if (this._scene !== null) {
        this._scene.updateShaders = true;
      }
    }
    if (xformNew && !value && this._cookieOffset) {
      this._cookieOffset.set(0, 0);
    } else {
      this._cookieOffset = value;
    }
    this._cookieOffsetSet = !!value;
    if (value && !this._cookieTransform) {
      this.cookieTransform = new pc.Vec4(1, 1, 0, 0);
      this._cookieTransformSet = false;
    }
    this.updateKey();
  }});
  return {Light:Light};
}());
pc.extend(pc, function() {
  var id = 0;
  var Material = function Material() {
    this.name = "Untitled";
    this.id = id++;
    this._shader = null;
    this.variants = {};
    this.parameters = {};
    this.alphaTest = 0;
    this.alphaToCoverage = false;
    this.blend = false;
    this.blendSrc = pc.BLENDMODE_ONE;
    this.blendDst = pc.BLENDMODE_ZERO;
    this.blendEquation = pc.BLENDEQUATION_ADD;
    this.separateAlphaBlend = false;
    this.blendSrcAlpha = pc.BLENDMODE_ONE;
    this.blendDstAlpha = pc.BLENDMODE_ZERO;
    this.blendAlphaEquation = pc.BLENDEQUATION_ADD;
    this.cull = pc.CULLFACE_BACK;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilFront = null;
    this.stencilBack = null;
    this.depthBias = 0;
    this.slopeDepthBias = 0;
    this.redWrite = true;
    this.greenWrite = true;
    this.blueWrite = true;
    this.alphaWrite = true;
    this.meshInstances = [];
    this._shaderVersion = 0;
    this._scene = null;
    this._dirtyBlend = false;
  };
  Object.defineProperty(Material.prototype, "shader", {get:function() {
    return this._shader;
  }, set:function(shader) {
    this.setShader(shader);
  }});
  Object.defineProperty(Material.prototype, "blendType", {get:function() {
    if (!this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ZERO && this.blendEquation === pc.BLENDEQUATION_ADD) {
      return pc.BLEND_NONE;
    } else {
      if (this.blend && this.blendSrc === pc.BLENDMODE_SRC_ALPHA && this.blendDst === pc.BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === pc.BLENDEQUATION_ADD) {
        return pc.BLEND_NORMAL;
      } else {
        if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {
          return pc.BLEND_ADDITIVE;
        } else {
          if (this.blend && this.blendSrc === pc.BLENDMODE_SRC_ALPHA && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {
            return pc.BLEND_ADDITIVEALPHA;
          } else {
            if (this.blend && this.blendSrc === pc.BLENDMODE_DST_COLOR && this.blendDst === pc.BLENDMODE_SRC_COLOR && this.blendEquation === pc.BLENDEQUATION_ADD) {
              return pc.BLEND_MULTIPLICATIVE2X;
            } else {
              if (this.blend && this.blendSrc === pc.BLENDMODE_ONE_MINUS_DST_COLOR && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_ADD) {
                return pc.BLEND_SCREEN;
              } else {
                if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_MIN) {
                  return pc.BLEND_MIN;
                } else {
                  if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE && this.blendEquation === pc.BLENDEQUATION_MAX) {
                    return pc.BLEND_MAX;
                  } else {
                    if (this.blend && this.blendSrc === pc.BLENDMODE_DST_COLOR && this.blendDst === pc.BLENDMODE_ZERO && this.blendEquation === pc.BLENDEQUATION_ADD) {
                      return pc.BLEND_MULTIPLICATIVE;
                    } else {
                      if (this.blend && this.blendSrc === pc.BLENDMODE_ONE && this.blendDst === pc.BLENDMODE_ONE_MINUS_SRC_ALPHA && this.blendEquation === pc.BLENDEQUATION_ADD) {
                        return pc.BLEND_PREMULTIPLIED;
                      } else {
                        return pc.BLEND_NORMAL;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }, set:function(type) {
    var prevBlend = this.blend !== pc.BLEND_NONE;
    switch(type) {
      case pc.BLEND_NONE:
        this.blend = false;
        this.blendSrc = pc.BLENDMODE_ONE;
        this.blendDst = pc.BLENDMODE_ZERO;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_NORMAL:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_SRC_ALPHA;
        this.blendDst = pc.BLENDMODE_ONE_MINUS_SRC_ALPHA;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_PREMULTIPLIED:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_ONE;
        this.blendDst = pc.BLENDMODE_ONE_MINUS_SRC_ALPHA;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_ADDITIVE:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_ONE;
        this.blendDst = pc.BLENDMODE_ONE;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_ADDITIVEALPHA:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_SRC_ALPHA;
        this.blendDst = pc.BLENDMODE_ONE;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_MULTIPLICATIVE2X:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_DST_COLOR;
        this.blendDst = pc.BLENDMODE_SRC_COLOR;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_SCREEN:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_ONE_MINUS_DST_COLOR;
        this.blendDst = pc.BLENDMODE_ONE;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_MULTIPLICATIVE:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_DST_COLOR;
        this.blendDst = pc.BLENDMODE_ZERO;
        this.blendEquation = pc.BLENDEQUATION_ADD;
        break;
      case pc.BLEND_MIN:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_ONE;
        this.blendDst = pc.BLENDMODE_ONE;
        this.blendEquation = pc.BLENDEQUATION_MIN;
        break;
      case pc.BLEND_MAX:
        this.blend = true;
        this.blendSrc = pc.BLENDMODE_ONE;
        this.blendDst = pc.BLENDMODE_ONE;
        this.blendEquation = pc.BLENDEQUATION_MAX;
        break;
    }
    if (prevBlend !== (this.blend !== pc.BLEND_NONE)) {
      if (this._scene) {
        this._scene.layers._dirtyBlend = true;
      } else {
        this._dirtyBlend = true;
      }
    }
    this._updateMeshInstanceKeys();
  }});
  Material.prototype._cloneInternal = function(clone) {
    clone.name = this.name;
    clone.id = id++;
    clone.variants = {};
    clone.shader = this.shader;
    clone.parameters = {};
    for (var parameterName in this.parameters) {
      if (this.parameters.hasOwnProperty(parameterName)) {
        clone.parameters[parameterName] = {scopeId:null, data:this.parameters[parameterName].data, passFlags:this.parameters[parameterName].passFlags};
      }
    }
    clone.alphaTest = this.alphaTest;
    clone.alphaToCoverage = this.alphaToCoverage;
    clone.blend = this.blend;
    clone.blendSrc = this.blendSrc;
    clone.blendDst = this.blendDst;
    clone.blendEquation = this.blendEquation;
    clone.separateAlphaBlend = this.separateAlphaBlend;
    clone.blendSrcAlpha = this.blendSrcAlpha;
    clone.blendDstAlpha = this.blendDstAlpha;
    clone.blendAlphaEquation = this.blendAlphaEquation;
    clone.cull = this.cull;
    clone.depthTest = this.depthTest;
    clone.depthWrite = this.depthWrite;
    clone.depthBias = this.depthBias;
    clone.slopeDepthBias = this.slopeDepthBias;
    if (this.stencilFront) {
      clone.stencilFront = this.stencilFront.clone();
    }
    if (this.stencilBack) {
      if (this.stencilFront === this.stencilBack) {
        clone.stencilBack = clone.stencilFront;
      } else {
        clone.stencilBack = this.stencilBack.clone();
      }
    }
    clone.redWrite = this.redWrite;
    clone.greenWrite = this.greenWrite;
    clone.blueWrite = this.blueWrite;
    clone.alphaWrite = this.alphaWrite;
    clone.meshInstances = [];
  };
  Material.prototype.clone = function() {
    var clone = new pc.Material;
    this._cloneInternal(clone);
    return clone;
  };
  Material.prototype._updateMeshInstanceKeys = function() {
    var i, meshInstances = this.meshInstances;
    for (i = 0; i < meshInstances.length; i++) {
      meshInstances[i].updateKey();
    }
  };
  Material.prototype.updateShader = function(device, scene, objDefs) {
  };
  Material.prototype.clearParameters = function() {
    this.parameters = {};
  };
  Material.prototype.getParameters = function() {
    return this.parameters;
  };
  Material.prototype.clearVariants = function() {
    var meshInstance;
    for (var s in this.variants) {
      if (this.variants.hasOwnProperty(s)) {
        this.variants[s]._refCount--;
      }
    }
    this.variants = {};
    var j;
    for (var i = 0; i < this.meshInstances.length; i++) {
      meshInstance = this.meshInstances[i];
      for (j = 0; j < meshInstance._shader.length; j++) {
        meshInstance._shader[j] = null;
      }
    }
  };
  Material.prototype.getParameter = function(name) {
    return this.parameters[name];
  };
  Material.prototype.setParameter = function(arg, data, passFlags) {
    if (passFlags === undefined) {
      passFlags = -524285;
    }
    var name;
    if (data === undefined && typeof arg === "object") {
      var uniformObject = arg;
      if (uniformObject.length) {
        for (var i = 0; i < uniformObject.length; i++) {
          this.setParameter(uniformObject[i]);
        }
        return;
      } else {
        name = uniformObject.name;
        data = uniformObject.value;
      }
    } else {
      name = arg;
    }
    var param = this.parameters[name];
    if (param) {
      param.data = data;
      param.passFlags = passFlags;
    } else {
      this.parameters[name] = {scopeId:null, data:data, passFlags:passFlags};
    }
  };
  Material.prototype.deleteParameter = function(name) {
    if (this.parameters[name]) {
      delete this.parameters[name];
    }
  };
  Material.prototype.setParameters = function() {
    for (var paramName in this.parameters) {
      var parameter = this.parameters[paramName];
      parameter.scopeId.setValue(parameter.data);
    }
  };
  Material.prototype.update = function() {
    throw Error("Not Implemented in base class");
  };
  Material.prototype.init = function(data) {
    throw Error("Not Implemented in base class");
  };
  Material.prototype.getName = function() {
    return this.name;
  };
  Material.prototype.setName = function(name) {
    this.name = name;
  };
  Material.prototype.getShader = function() {
    return this.shader;
  };
  Material.prototype.setShader = function(shader) {
    if (this._shader) {
      this._shader._refCount--;
    }
    this._shader = shader;
    if (shader) {
      shader._refCount++;
    }
  };
  Material.prototype.destroy = function() {
    if (this.shader) {
      this.shader._refCount--;
      if (this.shader._refCount < 1) {
        this.shader.destroy();
      }
    }
    var variant;
    for (var s in this.variants) {
      if (this.variants.hasOwnProperty(s)) {
        variant = this.variants[s];
        if (variant === this.shader) {
          continue;
        }
        variant._refCount--;
        if (variant._refCount < 1) {
          variant.destroy();
        }
      }
    }
    this.variants = {};
    this.shader = null;
    var meshInstance, j;
    for (var i = 0; i < this.meshInstances.length; i++) {
      meshInstance = this.meshInstances[i];
      for (j = 0; j < meshInstance._shader.length; j++) {
        meshInstance._shader[j] = null;
      }
      meshInstance._material = null;
      if (this !== pc.Scene.defaultMaterial) {
        meshInstance.material = pc.Scene.defaultMaterial;
      }
    }
  };
  return {Material:Material};
}());
pc.extend(pc, function() {
  var BasicMaterial = function() {
    this.color = new pc.Color(1, 1, 1, 1);
    this.colorMap = null;
    this.vertexColors = false;
    this.update();
  };
  BasicMaterial = pc.inherits(BasicMaterial, pc.Material);
  pc.extend(BasicMaterial.prototype, {clone:function() {
    var clone = new pc.BasicMaterial;
    pc.Material.prototype._cloneInternal.call(this, clone);
    clone.color.copy(this.color);
    clone.colorMap = this.colorMap;
    clone.vertexColors = this.vertexColors;
    clone.update();
    return clone;
  }, update:function() {
    this.clearParameters();
    this.setParameter("uColor", this.color.data);
    if (this.colorMap) {
      this.setParameter("texture_diffuseMap", this.colorMap);
    }
  }, updateShader:function(device, scene, objDefs, staticLightList, pass, sortedLights) {
    var options = {skin:!!this.meshInstances[0].skinInstance, vertexColors:this.vertexColors, diffuseMap:this.colorMap, pass:pass};
    var library = device.getProgramLibrary();
    this.shader = library.getProgram("basic", options);
  }});
  return {BasicMaterial:BasicMaterial};
}());
pc.extend(pc, function() {
  var DepthMaterial = function() {
  };
  DepthMaterial = pc.inherits(DepthMaterial, pc.Material);
  pc.extend(DepthMaterial.prototype, {clone:function() {
    var clone = new pc.DepthMaterial;
    pc.Material.prototype._cloneInternal.call(this, clone);
    clone.update();
    return clone;
  }, update:function() {
  }, updateShader:function(device) {
    var options = {skin:!!this.meshInstances[0].skinInstance};
    var library = device.getProgramLibrary();
    this.shader = library.getProgram("depth", options);
  }});
  return {DepthMaterial:DepthMaterial};
}());
pc.extend(pc, function() {
  var StandardMaterial = function() {
    this.reset();
    this.update();
  };
  var _createTexture = function(param) {
    if (param.data) {
      if (param.data instanceof pc.Texture) {
        return param.data;
      } else {
        return null;
      }
    } else {
      return null;
    }
  };
  var _createCubemap = function(param) {
    if (param.data) {
      if (param.data instanceof pc.Texture) {
        return param.data;
      }
    }
    return null;
  };
  var _createVec2 = function(param) {
    return new pc.Vec2(param.data[0], param.data[1]);
  };
  var _createBoundingBox = function(param) {
    var center, halfExtents;
    if (param.data && param.data.center) {
      center = new pc.Vec3(param.data.center[0], param.data.center[1], param.data.center[2]);
    } else {
      center = new pc.Vec3(0, 0, 0);
    }
    if (param.data && param.data.halfExtents) {
      halfExtents = new pc.Vec3(param.data.halfExtents[0], param.data.halfExtents[1], param.data.halfExtents[2]);
    } else {
      halfExtents = new pc.Vec3(0.5, 0.5, 0.5);
    }
    return new pc.BoundingBox(center, halfExtents);
  };
  var _createRgb = function(param) {
    return new pc.Color(param.data[0], param.data[1], param.data[2]);
  };
  var _propsSerial = [];
  var _propsSerialDefaultVal = [];
  var _propsInternalNull = [];
  var _propsInternalVec3 = [];
  var _prop2Uniform = {};
  var _defineTex2D = function(obj, name, uv, channels, defChannel) {
    var privMap = "_" + name + "Map";
    var privMapTiling = privMap + "Tiling";
    var privMapOffset = privMap + "Offset";
    var mapTransform = privMap.substring(1) + "Transform";
    var privMapUv = privMap + "Uv";
    var privMapChannel = privMap + "Channel";
    var privMapVertexColor = "_" + name + "VertexColor";
    var privMapVertexColorChannel = "_" + name + "VertexColorChannel";
    obj[privMap] = null;
    obj[privMapTiling] = new pc.Vec2(1, 1);
    obj[privMapOffset] = new pc.Vec2(0, 0);
    obj[mapTransform] = null;
    obj[privMapUv] = uv;
    if (channels > 0) {
      var channel = defChannel ? defChannel : channels > 1 ? "rgb" : "g";
      obj[privMapChannel] = channel;
      obj[privMapVertexColorChannel] = channel;
    }
    obj[privMapVertexColor] = false;
    if (!pc._matTex2D) {
      pc._matTex2D = [];
    }
    pc._matTex2D[name] = channels;
    Object.defineProperty(StandardMaterial.prototype, privMap.substring(1), {get:function() {
      return this[privMap];
    }, set:function(value) {
      var oldVal = this[privMap];
      if (!!oldVal ^ !!value) {
        this.dirtyShader = true;
      }
      if (oldVal && value) {
        if (oldVal.rgbm !== value.rgbm || oldVal.fixCubemapSeams !== value.fixCubemapSeams || oldVal.format !== value.format) {
          this.dirtyShader = true;
        }
      }
      this[privMap] = value;
    }});
    var mapTiling = privMapTiling.substring(1);
    var mapOffset = privMapOffset.substring(1);
    Object.defineProperty(StandardMaterial.prototype, mapTiling, {get:function() {
      return this[privMapTiling];
    }, set:function(value) {
      this.dirtyShader = true;
      this[privMapTiling] = value;
    }});
    _prop2Uniform[mapTiling] = function(mat, val, changeMat) {
      var tform = mat._updateMapTransform(changeMat ? mat[mapTransform] : null, val, mat[privMapOffset]);
      return {name:"texture_" + mapTransform, value:tform.data};
    };
    Object.defineProperty(StandardMaterial.prototype, mapOffset, {get:function() {
      return this[privMapOffset];
    }, set:function(value) {
      this.dirtyShader = true;
      this[privMapOffset] = value;
    }});
    _prop2Uniform[mapOffset] = function(mat, val, changeMat) {
      var tform = mat._updateMapTransform(changeMat ? mat[mapTransform] : null, mat[privMapTiling], val);
      return {name:"texture_" + mapTransform, value:tform.data};
    };
    Object.defineProperty(StandardMaterial.prototype, privMapUv.substring(1), {get:function() {
      return this[privMapUv];
    }, set:function(value) {
      if (this[privMapUv] !== value) {
        this.dirtyShader = true;
      }
      this[privMapUv] = value;
    }});
    Object.defineProperty(StandardMaterial.prototype, privMapChannel.substring(1), {get:function() {
      return this[privMapChannel];
    }, set:function(value) {
      if (this[privMapChannel] !== value) {
        this.dirtyShader = true;
      }
      this[privMapChannel] = value;
    }});
    Object.defineProperty(StandardMaterial.prototype, privMapVertexColor.substring(1), {get:function() {
      return this[privMapVertexColor];
    }, set:function(value) {
      this.dirtyShader = true;
      this[privMapVertexColor] = value;
    }});
    Object.defineProperty(StandardMaterial.prototype, privMapVertexColorChannel.substring(1), {get:function() {
      return this[privMapVertexColorChannel];
    }, set:function(value) {
      if (this[privMapVertexColorChannel] !== value) {
        this.dirtyShader = true;
      }
      this[privMapVertexColorChannel] = value;
    }});
    _propsSerial.push(privMap.substring(1));
    _propsSerial.push(privMapTiling.substring(1));
    _propsSerial.push(privMapOffset.substring(1));
    _propsSerial.push(privMapUv.substring(1));
    _propsSerial.push(privMapChannel.substring(1));
    _propsSerial.push(privMapVertexColor.substring(1));
    _propsSerial.push(privMapVertexColorChannel.substring(1));
    _propsInternalNull.push(mapTransform);
  };
  var _propsColor = [];
  var _defineColor = function(obj, name, defaultValue, hasMultiplier) {
    var priv = "_" + name;
    var uform = name + "Uniform";
    var mult = name + "Intensity";
    var pmult = "_" + mult;
    obj[priv] = defaultValue;
    obj[uform] = new Float32Array(3);
    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {
      this.dirtyColor = true;
      this.dirtyShader = true;
      return this[priv];
    }, set:function(value) {
      var oldVal = this[priv];
      var wasBw = oldVal.data[0] === 0 && oldVal.data[1] === 0 && oldVal.data[2] === 0 || oldVal.data[0] === 1 && oldVal.data[1] === 1 && oldVal.data[2] === 1;
      var isBw = value.data[0] === 0 && value.data[1] === 0 && value.data[2] === 0 || value.data[0] === 1 && value.data[1] === 1 && value.data[2] === 1;
      if (wasBw ^ isBw) {
        this.dirtyShader = true;
      }
      this.dirtyColor = true;
      this[priv] = value;
    }});
    _propsSerial.push(name);
    _propsInternalVec3.push(uform);
    _propsColor.push(name);
    _prop2Uniform[name] = function(mat, val, changeMat) {
      var arr = changeMat ? mat[uform] : new Float32Array(3);
      var gammaCorrection = false;
      if (mat.useGammaTonemap) {
        var scene = mat._scene || pc.Application.getApplication().scene;
        gammaCorrection = scene.gammaCorrection;
      }
      for (var c = 0; c < 3; c++) {
        if (gammaCorrection) {
          arr[c] = Math.pow(val.data[c], 2.2);
        } else {
          arr[c] = val.data[c];
        }
        if (hasMultiplier) {
          arr[c] *= mat[pmult];
        }
      }
      return {name:"material_" + name, value:arr};
    };
    if (hasMultiplier) {
      obj[pmult] = 1;
      Object.defineProperty(StandardMaterial.prototype, mult, {get:function() {
        return this[pmult];
      }, set:function(value) {
        var oldVal = this[pmult];
        var wasBw = oldVal === 0 || oldVal === 1;
        var isBw = value === 0 || value === 1;
        if (wasBw ^ isBw) {
          this.dirtyShader = true;
        }
        this.dirtyColor = true;
        this[pmult] = value;
      }});
      _propsSerial.push(mult);
      _prop2Uniform[mult] = function(mat, val, changeMat) {
        var arr = changeMat ? mat[uform] : new Float32Array(3);
        var gammaCorrection = false;
        if (mat.useGammaTonemap) {
          var scene = mat._scene || pc.Application.getApplication().scene;
          gammaCorrection = scene.gammaCorrection;
        }
        for (var c = 0; c < 3; c++) {
          if (gammaCorrection) {
            arr[c] = Math.pow(mat[priv].data[c], 2.2);
          } else {
            arr[c] = mat[priv].data[c];
          }
          arr[c] *= mat[pmult];
        }
        return {name:"material_" + name, value:arr};
      };
    }
  };
  var _defineFloat = function(obj, name, defaultValue, func) {
    var priv = "_" + name;
    obj[priv] = defaultValue;
    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {
      return this[priv];
    }, set:function(value) {
      var oldVal = this[priv];
      var wasBw = oldVal === 0 || oldVal === 1;
      var isBw = value === 0 || value === 1;
      if (wasBw ^ isBw) {
        this.dirtyShader = true;
      }
      this[priv] = value;
    }});
    _propsSerial.push(name);
    _prop2Uniform[name] = func !== undefined ? func : function(mat, val, changeMat) {
      return {name:"material_" + name, value:val};
    };
  };
  var _defineObject = function(obj, name, func) {
    var priv = "_" + name;
    obj[priv] = null;
    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {
      return this[priv];
    }, set:function(value) {
      var oldVal = this[priv];
      if (!!oldVal ^ !!value) {
        this.dirtyShader = true;
      }
      this[priv] = value;
    }});
    _propsSerial.push(name);
    _prop2Uniform[name] = func;
  };
  var _defineAlias = function(obj, newName, oldName) {
    Object.defineProperty(StandardMaterial.prototype, oldName, {get:function() {
      return this[newName];
    }, set:function(value) {
      this[newName] = value;
    }});
  };
  var _defineChunks = function(obj) {
    this._chunks = null;
    Object.defineProperty(StandardMaterial.prototype, "chunks", {get:function() {
      this.dirtyShader = true;
      return this._chunks;
    }, set:function(value) {
      this.dirtyShader = true;
      this._chunks = value;
    }});
    _propsSerial.push("chunks");
  };
  var _defineFlag = function(obj, name, defaultValue) {
    var priv = "_" + name;
    obj[priv] = defaultValue;
    Object.defineProperty(StandardMaterial.prototype, name, {get:function() {
      return this[priv];
    }, set:function(value) {
      if (this[priv] !== value) {
        this.dirtyShader = true;
      }
      this[priv] = value;
    }});
    _propsSerial.push(name);
  };
  var Chunks = function() {
  };
  Chunks.prototype.copy = function(from) {
    for (var p in from) {
      if (from.hasOwnProperty(p) && p !== "copy") {
        this[p] = from[p];
      }
    }
  };
  StandardMaterial = pc.inherits(StandardMaterial, pc.Material);
  pc.extend(StandardMaterial.prototype, {reset:function() {
    this.blendType = pc.BLEND_NONE;
    var i;
    for (i = 0; i < _propsSerial.length; i++) {
      var defVal = _propsSerialDefaultVal[i];
      this[_propsSerial[i]] = defVal ? defVal.clone ? defVal.clone() : defVal : defVal;
    }
    for (i = 0; i < _propsInternalNull.length; i++) {
      this[_propsInternalNull[i]] = null;
    }
    for (i = 0; i < _propsInternalVec3.length; i++) {
      this[_propsInternalVec3[i]] = new Float32Array(3);
    }
    this._chunks = new Chunks;
    this.cubeMapMinUniform = new Float32Array(3);
    this.cubeMapMaxUniform = new Float32Array(3);
  }, clone:function() {
    var clone = new pc.StandardMaterial;
    pc.Material.prototype._cloneInternal.call(this, clone);
    var pname;
    for (var i = 0; i < _propsSerial.length; i++) {
      pname = _propsSerial[i];
      if (this[pname] !== undefined) {
        if (this[pname] && this[pname].copy) {
          if (clone[pname]) {
            clone[pname].copy(this[pname]);
          } else {
            clone[pname] = this[pname].clone();
          }
        } else {
          clone[pname] = this[pname];
        }
      }
    }
    if (!clone.shader) {
      clone.update();
    }
    return clone;
  }, init:function(data) {
    this.reset();
    this.name = data.name;
    if (data.chunks) {
      this.chunks.copy(data.chunks);
    }
    for (var i = 0; i < data.parameters.length; i++) {
      var param = data.parameters[i];
      if (param.type === "vec3") {
        this[param.name] = _createRgb(param);
      } else {
        if (param.type === "vec2") {
          this[param.name] = _createVec2(param);
        } else {
          if (param.type === "texture") {
            this[param.name] = _createTexture(param);
          } else {
            if (param.type === "cubemap") {
              this[param.name] = _createCubemap(param);
            } else {
              if (param.name === "bumpMapFactor") {
                this.bumpiness = param.data;
              } else {
                if (param.type === "boundingbox") {
                  this[param.name] = _createBoundingBox(param);
                } else {
                  this[param.name] = param.data;
                }
              }
            }
          }
        }
      }
    }
    this.update();
  }, _updateMapTransform:function(transform, tiling, offset) {
    transform = transform || new pc.Vec4;
    transform.set(tiling.x, tiling.y, offset.x, offset.y);
    if (transform.x === 1 && transform.y === 1 && transform.z === 0 && transform.w === 0) {
      return null;
    }
    return transform;
  }, _collectLights:function(lType, lights, lightsFiltered, mask, staticLightList) {
    var light;
    var i;
    for (i = 0; i < lights.length; i++) {
      light = lights[i];
      if (light._enabled) {
        if (light._mask & mask) {
          if (lType !== pc.LIGHTTYPE_DIRECTIONAL) {
            if (light.isStatic) {
              continue;
            }
          }
          lightsFiltered.push(light);
        }
      }
    }
    if (staticLightList) {
      for (i = 0; i < staticLightList.length; i++) {
        light = staticLightList[i];
        if (light._type === lType) {
          lightsFiltered.push(light);
        }
      }
    }
  }, _setParameter:function(name, value) {
    this.setParameter(name, value);
    this._propsSet.push(name);
  }, _clearParameters:function() {
    var props = this._propsSet;
    for (var i = 0; i < props.length; i++) {
      delete this.parameters[props[i]];
    }
    this._propsSet = [];
  }, _updateMap:function(p) {
    var mname = p + "Map";
    if (this[mname]) {
      this._setParameter("texture_" + mname, this[mname]);
      var tname = mname + "Transform";
      this[tname] = this._updateMapTransform(this[tname], this[mname + "Tiling"], this[mname + "Offset"]);
      if (this[tname]) {
        this._setParameter("texture_" + tname, this[tname].data);
      }
    }
  }, getUniform:function(varName, value, changeMat) {
    var func = _prop2Uniform[varName];
    if (func) {
      return func(this, value, changeMat);
    }
    return null;
  }, update:function() {
    this._clearParameters();
    this._setParameter("material_ambient", this.ambientUniform);
    if (!this.diffuseMap || this.diffuseTint) {
      this._setParameter("material_diffuse", this.diffuseUniform);
    }
    if (!this.useMetalness) {
      if (!this.specularMap || this.specularTint) {
        this._setParameter("material_specular", this.specularUniform);
      }
    } else {
      if (!this.metalnessMap || this.metalness < 1) {
        this._setParameter("material_metalness", this.metalness);
      }
    }
    this._setParameter(this.getUniform("shininess", this.shininess, true));
    if (!this.emissiveMap || this.emissiveTint) {
      this._setParameter("material_emissive", this.emissiveUniform);
    }
    if (this.emissiveMap) {
      this._setParameter("material_emissiveIntensity", this.emissiveIntensity);
    }
    if (this.refraction > 0) {
      this._setParameter("material_refraction", this.refraction);
      this._setParameter("material_refractionIndex", this.refractionIndex);
    }
    this._setParameter("material_opacity", this.opacity);
    if (this.occludeSpecular) {
      this._setParameter("material_occludeSpecularIntensity", this.occludeSpecularIntensity);
    }
    if (this.cubeMapProjection === pc.CUBEPROJ_BOX) {
      this._setParameter(this.getUniform("cubeMapProjectionBox", this.cubeMapProjectionBox, true));
    }
    for (var p in pc._matTex2D) {
      this._updateMap(p);
    }
    if (this.ambientSH) {
      this._setParameter("ambientSH[0]", this.ambientSH);
    }
    if (this.normalMap) {
      this._setParameter("material_bumpiness", this.bumpiness);
    }
    if (this.heightMap) {
      this._setParameter(this.getUniform("heightMapFactor", this.heightMapFactor, true));
    }
    if (this.cubeMap) {
      this._setParameter("texture_cubeMap", this.cubeMap);
    }
    if (this.prefilteredCubeMap128) {
      this._setParameter("texture_prefilteredCubeMap128", this.prefilteredCubeMap128);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[0]) {
        this._setParameter("texture_prefilteredCubeMap128", this._scene._skyboxPrefiltered[0]);
      }
    }
    if (this.prefilteredCubeMap64) {
      this._setParameter("texture_prefilteredCubeMap64", this.prefilteredCubeMap64);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[1]) {
        this._setParameter("texture_prefilteredCubeMap64", this._scene._skyboxPrefiltered[1]);
      }
    }
    if (this.prefilteredCubeMap32) {
      this._setParameter("texture_prefilteredCubeMap32", this.prefilteredCubeMap32);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[2]) {
        this._setParameter("texture_prefilteredCubeMap32", this._scene._skyboxPrefiltered[2]);
      }
    }
    if (this.prefilteredCubeMap16) {
      this._setParameter("texture_prefilteredCubeMap16", this.prefilteredCubeMap16);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[3]) {
        this._setParameter("texture_prefilteredCubeMap16", this._scene._skyboxPrefiltered[3]);
      }
    }
    if (this.prefilteredCubeMap8) {
      this._setParameter("texture_prefilteredCubeMap8", this.prefilteredCubeMap8);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[4]) {
        this._setParameter("texture_prefilteredCubeMap8", this._scene._skyboxPrefiltered[4]);
      }
    }
    if (this.prefilteredCubeMap4) {
      this._setParameter("texture_prefilteredCubeMap4", this.prefilteredCubeMap4);
    } else {
      if (this._scene && this._scene._skyboxPrefiltered[5]) {
        this._setParameter("texture_prefilteredCubeMap4", this._scene._skyboxPrefiltered[5]);
      }
    }
    if (this.sphereMap) {
      this._setParameter("texture_sphereMap", this.sphereMap);
    }
    if (this.dpAtlas) {
      this._setParameter("texture_sphereMap", this.dpAtlas);
    }
    this._setParameter("material_reflectivity", this.reflectivity);
    if (this.dirtyShader || !this._scene) {
      this.shader = null;
      this.clearVariants();
    }
    this._processColor();
  }, _processColor:function() {
    var c, i;
    if (!this.dirtyColor) {
      return;
    }
    if (!this._scene && this.useGammaTonemap) {
      return;
    }
    var gammaCorrection = false;
    if (this.useGammaTonemap) {
      gammaCorrection = this._scene.gammaCorrection;
    }
    for (i = 0; i < _propsColor.length; i++) {
      var clr = this["_" + _propsColor[i]];
      var arr = this[_propsColor[i] + "Uniform"];
      for (c = 0; c < 3; c++) {
        if (gammaCorrection) {
          arr[c] = Math.pow(clr.data[c], 2.2);
        } else {
          arr[c] = clr.data[c];
        }
      }
    }
    for (c = 0; c < 3; c++) {
      this.emissiveUniform[c] *= this.emissiveIntensity;
    }
    this.dirtyColor = false;
  }, _getMapTransformID:function(xform, uv) {
    if (!xform) {
      return 0;
    }
    if (!this._mapXForms[uv]) {
      this._mapXForms[uv] = [];
    }
    var i, j, same;
    for (i = 0; i < this._mapXForms[uv].length; i++) {
      same = true;
      for (j = 0; j < xform.data.length; j++) {
        if (this._mapXForms[uv][i][j] != xform.data[j]) {
          same = false;
          break;
        }
      }
      if (same) {
        return i + 1;
      }
    }
    var newID = this._mapXForms[uv].length;
    this._mapXForms[uv][newID] = [];
    for (j = 0; j < xform.data.length; j++) {
      this._mapXForms[uv][newID][j] = xform.data[j];
    }
    return newID + 1;
  }, updateShader:function(device, scene, objDefs, staticLightList, pass, sortedLights) {
    if (!this._colorProcessed && this._scene) {
      this._colorProcessed = true;
      this._processColor();
    }
    this._mapXForms = [];
    var useTexCubeLod = device.useTexCubeLod;
    var useDp = !device.extTextureLod;
    var globalSky128, globalSky64, globalSky32, globalSky16, globalSky8, globalSky4;
    if (this.useSkybox) {
      globalSky128 = scene._skyboxPrefiltered[0];
      globalSky64 = scene._skyboxPrefiltered[1];
      globalSky32 = scene._skyboxPrefiltered[2];
      globalSky16 = scene._skyboxPrefiltered[3];
      globalSky8 = scene._skyboxPrefiltered[4];
      globalSky4 = scene._skyboxPrefiltered[5];
    }
    var prefilteredCubeMap128 = this.prefilteredCubeMap128 || globalSky128;
    var prefilteredCubeMap64 = this.prefilteredCubeMap64 || globalSky64;
    var prefilteredCubeMap32 = this.prefilteredCubeMap32 || globalSky32;
    var prefilteredCubeMap16 = this.prefilteredCubeMap16 || globalSky16;
    var prefilteredCubeMap8 = this.prefilteredCubeMap8 || globalSky8;
    var prefilteredCubeMap4 = this.prefilteredCubeMap4 || globalSky4;
    if (prefilteredCubeMap128) {
      var allMips = prefilteredCubeMap128 && prefilteredCubeMap64 && prefilteredCubeMap32 && prefilteredCubeMap16 && prefilteredCubeMap8 && prefilteredCubeMap4;
      if (useDp && allMips) {
        if (!prefilteredCubeMap128.dpAtlas) {
          prefilteredCubeMap128.dpAtlas = pc.generateDpAtlas(device, [prefilteredCubeMap128, prefilteredCubeMap64, prefilteredCubeMap32, prefilteredCubeMap16, prefilteredCubeMap8, prefilteredCubeMap4]);
          prefilteredCubeMap128.sh = pc.shFromCubemap(prefilteredCubeMap16);
        }
        this.dpAtlas = prefilteredCubeMap128.dpAtlas;
        this.ambientSH = prefilteredCubeMap128.sh;
        this._setParameter("ambientSH[0]", this.ambientSH);
        this._setParameter("texture_sphereMap", this.dpAtlas);
      } else {
        if (useTexCubeLod) {
          if (prefilteredCubeMap128._levels.length < 6) {
            if (allMips) {
              this._setParameter("texture_prefilteredCubeMap128", prefilteredCubeMap128);
            } else {
              console.log("Can't use prefiltered cubemap: " + allMips + ", " + useTexCubeLod + ", " + prefilteredCubeMap128._levels);
            }
          } else {
            this._setParameter("texture_prefilteredCubeMap128", prefilteredCubeMap128);
          }
        } else {
          if (allMips) {
            this._setParameter("texture_prefilteredCubeMap128", prefilteredCubeMap128);
            this._setParameter("texture_prefilteredCubeMap64", prefilteredCubeMap64);
            this._setParameter("texture_prefilteredCubeMap32", prefilteredCubeMap32);
            this._setParameter("texture_prefilteredCubeMap16", prefilteredCubeMap16);
            this._setParameter("texture_prefilteredCubeMap8", prefilteredCubeMap8);
            this._setParameter("texture_prefilteredCubeMap4", prefilteredCubeMap4);
          } else {
            console.log("Can't use prefiltered cubemap: " + allMips + ", " + useTexCubeLod + ", " + prefilteredCubeMap128._levels);
          }
        }
      }
    }
    var diffuseTint = (this.diffuse.data[0] !== 1 || this.diffuse.data[1] !== 1 || this.diffuse.data[2] !== 1) && (this.diffuseTint || !this.diffuseMap && !this.diffuseVertexColor) ? 3 : 0;
    var specularTint = false;
    var useSpecular = (this.useMetalness ? true : !!this.specularMap) || !!this.sphereMap || !!this.cubeMap || !!this.dpAtlas;
    useSpecular = useSpecular || (this.useMetalness ? true : !(this.specular.data[0] === 0 && this.specular.data[1] === 0 && this.specular.data[2] === 0));
    if (useSpecular) {
      if ((this.specularTint || !this.specularMap && !this.specularVertexColor) && !this.useMetalness) {
        specularTint = this.specular.data[0] !== 1 || this.specular.data[1] !== 1 || this.specular.data[2] !== 1;
      }
    }
    var rgbmAmbient = (prefilteredCubeMap128 ? prefilteredCubeMap128.rgbm : false) || (this.cubeMap ? this.cubeMap.rgbm : false) || (this.dpAtlas ? this.dpAtlas.rgbm : false);
    var hdrAmbient = (prefilteredCubeMap128 ? prefilteredCubeMap128.rgbm || prefilteredCubeMap128.format === pc.PIXELFORMAT_RGBA32F : false) || (this.cubeMap ? this.cubeMap.rgbm || this.cubeMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.dpAtlas ? this.dpAtlas.rgbm || this.dpAtlas.format === pc.PIXELFORMAT_RGBA32F : false);
    var rgbmReflection = (prefilteredCubeMap128 && !this.cubeMap && !this.sphereMap && !this.dpAtlas ? prefilteredCubeMap128.rgbm : false) || (this.cubeMap ? this.cubeMap.rgbm : false) || (this.sphereMap ? this.sphereMap.rgbm : false) || (this.dpAtlas ? this.dpAtlas.rgbm : false);
    var hdrReflection = (prefilteredCubeMap128 && !this.cubeMap && !this.sphereMap && !this.dpAtlas ? prefilteredCubeMap128.rgbm || prefilteredCubeMap128.format === pc.PIXELFORMAT_RGBA32F : false) || (this.cubeMap ? this.cubeMap.rgbm || this.cubeMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.sphereMap ? this.sphereMap.rgbm || this.sphereMap.format === pc.PIXELFORMAT_RGBA32F : false) || (this.dpAtlas ? this.dpAtlas.rgbm || this.dpAtlas.format === pc.PIXELFORMAT_RGBA32F : false);
    var emissiveTint = this.emissiveMap ? 0 : 3;
    if (!emissiveTint) {
      emissiveTint = (this.emissive.data[0] !== 1 || this.emissive.data[1] !== 1 || this.emissive.data[2] !== 1 || this.emissiveIntensity !== 1) && this.emissiveTint;
      emissiveTint = emissiveTint ? 3 : this.emissiveIntensity !== 1 ? 1 : 0;
    }
    var options;
    var minimalOptions = pass > pc.SHADER_FORWARDHDR && pass <= pc.SHADER_PICK;
    if (minimalOptions) {
      options = {opacityTint:this.opacity !== 1 && this.blendType !== pc.BLEND_NONE, alphaTest:this.alphaTest > 0, forceFragmentPrecision:this.forceFragmentPrecision, chunks:this.chunks, blendType:this.blendType, forceUv1:this.forceUv1, pass:pass};
    } else {
      options = {fog:this.useFog ? scene.fog : "none", gamma:this.useGammaTonemap ? scene.gammaCorrection : pc.GAMMA_NONE, toneMap:this.useGammaTonemap ? scene.toneMapping : -1, blendMapsWithColors:true, ambientTint:this.ambientTint, diffuseTint:diffuseTint, specularTint:specularTint ? 3 : 0, metalnessTint:this.useMetalness && this.metalness < 1 ? 1 : 0, glossTint:1, emissiveTint:emissiveTint, opacityTint:this.opacity !== 1 && this.blendType !== pc.BLEND_NONE ? 1 : 0, alphaTest:this.alphaTest > 0, 
      alphaToCoverage:this.alphaToCoverage, needsNormalFloat:this.normalizeNormalMap, sphereMap:!!this.sphereMap, cubeMap:!!this.cubeMap, dpAtlas:!!this.dpAtlas, ambientSH:!!this.ambientSH, useSpecular:useSpecular, rgbmAmbient:rgbmAmbient, rgbmReflection:rgbmReflection, hdrAmbient:hdrAmbient, hdrReflection:hdrReflection, fixSeams:prefilteredCubeMap128 ? prefilteredCubeMap128.fixCubemapSeams : this.cubeMap ? this.cubeMap.fixCubemapSeams : false, prefilteredCubemap:!!prefilteredCubeMap128, emissiveFormat:this.emissiveMap ? 
      this.emissiveMap.rgbm ? 1 : this.emissiveMap.format === pc.PIXELFORMAT_RGBA32F ? 2 : 0 : null, lightMapFormat:this.lightMap ? this.lightMap.rgbm ? 1 : this.lightMap.format === pc.PIXELFORMAT_RGBA32F ? 2 : 0 : null, useRgbm:rgbmReflection || rgbmAmbient || (this.emissiveMap ? this.emissiveMap.rgbm : 0) || (this.lightMap ? this.lightMap.rgbm : 0), specularAntialias:this.specularAntialias, conserveEnergy:this.conserveEnergy, occludeSpecular:this.occludeSpecular, occludeSpecularFloat:this.occludeSpecularIntensity !== 
      1.0, occludeDirect:this.occludeDirect, shadingModel:this.shadingModel, fresnelModel:this.fresnelModel, packedNormal:this.normalMap ? this.normalMap.format === pc.PIXELFORMAT_DXT5 : false, forceFragmentPrecision:this.forceFragmentPrecision, fastTbn:this.fastTbn, cubeMapProjection:this.cubeMapProjection, chunks:this.chunks, customFragmentShader:this.customFragmentShader, refraction:!!this.refraction, useMetalness:this.useMetalness, blendType:this.blendType, skyboxIntensity:prefilteredCubeMap128 === 
      globalSky128 && prefilteredCubeMap128 && scene.skyboxIntensity !== 1, forceUv1:this.forceUv1, useTexCubeLod:useTexCubeLod, msdf:!!this.msdfMap, twoSidedLighting:this.twoSidedLighting, pixelSnap:this.pixelSnap, pass:pass};
      if (pass === pc.SHADER_FORWARDHDR) {
        if (options.gamma) {
          options.gamma = pc.GAMMA_SRGBHDR;
        }
        options.toneMap = pc.TONEMAP_LINEAR;
      }
    }
    var hasUv0 = false;
    var hasUv1 = false;
    var hasVcolor = false;
    if (objDefs) {
      if (!minimalOptions) {
        options.noShadow = (objDefs & pc.SHADERDEF_NOSHADOW) !== 0;
        if ((objDefs & pc.SHADERDEF_LM) !== 0) {
          options.lightMapFormat = 1;
          options.lightMap = true;
          options.lightMapChannel = "rgb";
          options.lightMapUv = 1;
          options.lightMapTransform = 0;
          options.lightMapWithoutAmbient = !this.lightMap;
          options.useRgbm = true;
          if ((objDefs & pc.SHADERDEF_DIRLM) !== 0) {
            options.dirLightMap = true;
          }
        }
      }
      options.screenSpace = (objDefs & pc.SHADERDEF_SCREENSPACE) !== 0;
      options.skin = (objDefs & pc.SHADERDEF_SKIN) !== 0;
      options.useInstancing = (objDefs & pc.SHADERDEF_INSTANCING) !== 0;
      hasUv0 = (objDefs & pc.SHADERDEF_UV0) !== 0;
      hasUv1 = (objDefs & pc.SHADERDEF_UV1) !== 0;
      hasVcolor = (objDefs & pc.SHADERDEF_VCOLOR) !== 0;
    }
    var isOpacity;
    for (var p in pc._matTex2D) {
      isOpacity = p === "opacity";
      if (isOpacity && this.blendType === pc.BLEND_NONE && this.alphaTest === 0.0 && !this.alphaToCoverage) {
        continue;
      }
      if (minimalOptions && !isOpacity) {
        continue;
      }
      var cname;
      var mname = p + "Map";
      var vname = p + "VertexColor";
      if (p !== "height" && this[vname]) {
        if (hasVcolor) {
          cname = p + "VertexColorChannel";
          options[vname] = this[vname];
          options[cname] = this[cname];
          options.vertexColors = true;
        }
      }
      if (this[mname]) {
        var uname = mname + "Uv";
        var allow = true;
        if (this[uname] === 0 && !hasUv0) {
          allow = false;
        }
        if (this[uname] === 1 && !hasUv1) {
          allow = false;
        }
        if (allow) {
          options[mname] = !!this[mname];
          var tname = mname + "Transform";
          cname = mname + "Channel";
          options[tname] = this._getMapTransformID(this[tname], this[uname]);
          options[cname] = this[cname];
          options[uname] = this[uname];
        }
      }
    }
    this._mapXForms = null;
    if (this.useLighting && !minimalOptions) {
      var lightsFiltered = [];
      var mask = objDefs ? objDefs >> 16 : 1;
      if (sortedLights) {
        this._collectLights(pc.LIGHTTYPE_DIRECTIONAL, sortedLights[pc.LIGHTTYPE_DIRECTIONAL], lightsFiltered, mask);
        this._collectLights(pc.LIGHTTYPE_POINT, sortedLights[pc.LIGHTTYPE_POINT], lightsFiltered, mask, staticLightList);
        this._collectLights(pc.LIGHTTYPE_SPOT, sortedLights[pc.LIGHTTYPE_SPOT], lightsFiltered, mask, staticLightList);
      }
      options.lights = lightsFiltered;
    } else {
      options.lights = [];
    }
    if (!minimalOptions) {
      options.aoMapUv = options.aoMapUv || this.aoUvSet;
      if (options.lights.length === 0) {
        options.noShadow = false;
      }
    }
    if (this.onUpdateShader) {
      options = this.onUpdateShader(options);
    }
    var library = device.getProgramLibrary();
    this.shader = library.getProgram("standard", options);
    if (!objDefs) {
      this.clearVariants();
      this.variants[0] = this.shader;
    }
    this.dirtyShader = false;
  }});
  var _defineMaterialProps = function(obj) {
    obj.dirtyShader = true;
    obj.dirtyColor = true;
    obj._scene = null;
    obj._colorProcessed = false;
    _defineColor(obj, "ambient", new pc.Color(0.7, 0.7, 0.7));
    _defineColor(obj, "diffuse", new pc.Color(1, 1, 1));
    _defineColor(obj, "specular", new pc.Color(0, 0, 0));
    _defineColor(obj, "emissive", new pc.Color(0, 0, 0), true);
    _defineFloat(obj, "shininess", 25, function(mat, shininess) {
      var value;
      if (mat.shadingModel === pc.SPECULAR_PHONG) {
        value = Math.pow(2, shininess * 0.01 * 11);
      } else {
        value = shininess * 0.01;
      }
      return {name:"material_shininess", value:value};
    });
    _defineFloat(obj, "heightMapFactor", 1, function(mat, height) {
      return {name:"material_heightMapFactor", value:height * 0.025};
    });
    _defineFloat(obj, "opacity", 1);
    _defineFloat(obj, "alphaTest", 0);
    _defineFloat(obj, "bumpiness", 1);
    _defineFloat(obj, "reflectivity", 1);
    _defineFloat(obj, "occludeSpecularIntensity", 1);
    _defineFloat(obj, "refraction", 0);
    _defineFloat(obj, "refractionIndex", 1.0 / 1.5);
    _defineFloat(obj, "metalness", 1);
    _defineFloat(obj, "aoUvSet", 0, null);
    _defineObject(obj, "ambientSH", function(mat, val, changeMat) {
      return {name:"ambientSH[0]", value:val};
    });
    _defineObject(obj, "cubeMapProjectionBox", function(mat, val, changeMat) {
      var bmin = changeMat ? mat.cubeMapMinUniform : new Float32Array(3);
      var bmax = changeMat ? mat.cubeMapMaxUniform : new Float32Array(3);
      bmin[0] = val.center.x - val.halfExtents.x;
      bmin[1] = val.center.y - val.halfExtents.y;
      bmin[2] = val.center.z - val.halfExtents.z;
      bmax[0] = val.center.x + val.halfExtents.x;
      bmax[1] = val.center.y + val.halfExtents.y;
      bmax[2] = val.center.z + val.halfExtents.z;
      return [{name:"envBoxMin", value:bmin}, {name:"envBoxMax", value:bmax}];
    });
    _defineChunks(obj);
    _defineFlag(obj, "ambientTint", false);
    _defineFlag(obj, "diffuseTint", false);
    _defineFlag(obj, "specularTint", false);
    _defineFlag(obj, "emissiveTint", false);
    _defineFlag(obj, "fastTbn", false);
    _defineFlag(obj, "specularAntialias", false);
    _defineFlag(obj, "useMetalness", false);
    _defineFlag(obj, "occludeDirect", false);
    _defineFlag(obj, "normalizeNormalMap", true);
    _defineFlag(obj, "conserveEnergy", true);
    _defineFlag(obj, "occludeSpecular", pc.SPECOCC_AO);
    _defineFlag(obj, "shadingModel", pc.SPECULAR_BLINN);
    _defineFlag(obj, "fresnelModel", pc.FRESNEL_NONE);
    _defineFlag(obj, "cubeMapProjection", pc.CUBEPROJ_NONE);
    _defineFlag(obj, "customFragmentShader", null);
    _defineFlag(obj, "forceFragmentPrecision", null);
    _defineFlag(obj, "useFog", true);
    _defineFlag(obj, "useLighting", true);
    _defineFlag(obj, "useGammaTonemap", true);
    _defineFlag(obj, "useSkybox", true);
    _defineFlag(obj, "forceUv1", false);
    _defineFlag(obj, "pixelSnap", false);
    _defineFlag(obj, "twoSidedLighting", false);
    _defineTex2D(obj, "diffuse", 0, 3);
    _defineTex2D(obj, "specular", 0, 3);
    _defineTex2D(obj, "emissive", 0, 3);
    _defineTex2D(obj, "normal", 0, -1);
    _defineTex2D(obj, "metalness", 0, 1);
    _defineTex2D(obj, "gloss", 0, 1);
    _defineTex2D(obj, "opacity", 0, 1, "a");
    _defineTex2D(obj, "height", 0, 1);
    _defineTex2D(obj, "ao", 0, 1);
    _defineTex2D(obj, "light", 1, 3);
    _defineTex2D(obj, "msdf", 0, 3);
    _defineObject(obj, "cubeMap");
    _defineObject(obj, "sphereMap");
    _defineObject(obj, "dpAtlas");
    _defineObject(obj, "prefilteredCubeMap128");
    _defineObject(obj, "prefilteredCubeMap64");
    _defineObject(obj, "prefilteredCubeMap32");
    _defineObject(obj, "prefilteredCubeMap16");
    _defineObject(obj, "prefilteredCubeMap8");
    _defineObject(obj, "prefilteredCubeMap4");
    _defineAlias(obj, "diffuseTint", "diffuseMapTint");
    _defineAlias(obj, "specularTint", "specularMapTint");
    _defineAlias(obj, "emissiveTint", "emissiveMapTint");
    _defineAlias(obj, "aoVertexColor", "aoMapVertexColor");
    _defineAlias(obj, "diffuseVertexColor", "diffuseMapVertexColor");
    _defineAlias(obj, "specularVertexColor", "specularMapVertexColor");
    _defineAlias(obj, "emissiveVertexColor", "emissiveMapVertexColor");
    _defineAlias(obj, "metalnessVertexColor", "metalnessMapVertexColor");
    _defineAlias(obj, "glossVertexColor", "glossMapVertexColor");
    _defineAlias(obj, "opacityVertexColor", "opacityMapVertexColor");
    _defineAlias(obj, "lightVertexColor", "lightMapVertexColor");
    for (var i = 0; i < _propsSerial.length; i++) {
      _propsSerialDefaultVal[i] = obj[_propsSerial[i]];
    }
    obj._propsSet = [];
  };
  _defineMaterialProps(StandardMaterial.prototype);
  return {StandardMaterial:StandardMaterial};
}());
pc.extend(pc, function() {
  var id = 0;
  var _tmpAabb = new pc.BoundingBox;
  var Mesh = function() {
    this._refCount = 0;
    this.id = id++;
    this.vertexBuffer = null;
    this.indexBuffer = [null];
    this.primitive = [{type:0, base:0, count:0}];
    this.skin = null;
    this.morph = null;
    this._aabb = new pc.BoundingBox;
    this.boneAabb = null;
  };
  Object.defineProperty(Mesh.prototype, "aabb", {get:function() {
    return this.morph ? this.morph.aabb : this._aabb;
  }, set:function(aabb) {
    if (this.morph) {
      this._aabb = this.morph._baseAabb = aabb;
      this.morph._calculateAabb();
    } else {
      this._aabb = aabb;
    }
  }});
  var MeshInstance = function MeshInstance(node, mesh, material) {
    this._key = [0, 0];
    this._shader = [null, null, null];
    this.isStatic = false;
    this._staticLightList = null;
    this._staticSource = null;
    this.node = node;
    this._mesh = mesh;
    mesh._refCount++;
    this.material = material;
    this._shaderDefs = pc.MASK_DYNAMIC << 16;
    this._shaderDefs |= mesh.vertexBuffer.format.hasUv0 ? pc.SHADERDEF_UV0 : 0;
    this._shaderDefs |= mesh.vertexBuffer.format.hasUv1 ? pc.SHADERDEF_UV1 : 0;
    this._shaderDefs |= mesh.vertexBuffer.format.hasColor ? pc.SHADERDEF_VCOLOR : 0;
    this._lightHash = 0;
    this.visible = true;
    this.layer = pc.LAYER_WORLD;
    this.renderStyle = pc.RENDERSTYLE_SOLID;
    this.castShadow = false;
    this._receiveShadow = true;
    this._screenSpace = false;
    this._noDepthDrawGl1 = false;
    this.cull = true;
    this.pick = true;
    this._updateAabb = true;
    this._updateAabbFunc = null;
    this.updateKey();
    this._skinInstance = null;
    this.morphInstance = null;
    this.instancingData = null;
    this.aabb = new pc.BoundingBox;
    this._boneAabb = null;
    this._aabbVer = -1;
    this.drawOrder = 0;
    this.visibleThisFrame = 0;
    this.parameters = {};
    this.stencilFront = null;
    this.stencilBack = null;
  };
  Object.defineProperty(MeshInstance.prototype, "mesh", {get:function() {
    return this._mesh;
  }, set:function(mesh) {
    if (this._mesh) {
      this._mesh._refCount--;
    }
    this._mesh = mesh;
    if (mesh) {
      mesh._refCount++;
    }
  }});
  Object.defineProperty(MeshInstance.prototype, "aabb", {get:function() {
    var aabb;
    if (!this._updateAabb) {
      return this._aabb;
    }
    if (this._updateAabbFunc) {
      return this._updateAabbFunc(this._aabb);
    }
    if (this.skinInstance) {
      var numBones = this.mesh.skin.boneNames.length;
      var boneUsed, i;
      if (!this.mesh.boneAabb) {
        this.mesh.boneAabb = [];
        this.mesh.boneUsed = [];
        var elems = this.mesh.vertexBuffer.format.elements;
        var numVerts = this.mesh.vertexBuffer.numVertices;
        var vertSize = this.mesh.vertexBuffer.format.size;
        var index;
        var offsetP, offsetI, offsetW;
        var j, k, l;
        for (i = 0; i < elems.length; i++) {
          if (elems[i].name === pc.SEMANTIC_POSITION) {
            offsetP = elems[i].offset;
          } else {
            if (elems[i].name === pc.SEMANTIC_BLENDINDICES) {
              offsetI = elems[i].offset;
            } else {
              if (elems[i].name === pc.SEMANTIC_BLENDWEIGHT) {
                offsetW = elems[i].offset;
              }
            }
          }
        }
        var data8 = new Uint8Array(this.mesh.vertexBuffer.storage);
        var dataF = new Float32Array(this.mesh.vertexBuffer.storage);
        var offsetPF = offsetP / 4;
        var offsetWF = offsetW / 4;
        var vertSizeF = vertSize / 4;
        var bMax, bMin;
        var x, y, z;
        var boneMin = [];
        var boneMax = [];
        boneUsed = this.mesh.boneUsed;
        for (i = 0; i < numBones; i++) {
          boneMin[i] = new pc.Vec3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
          boneMax[i] = new pc.Vec3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
        }
        for (j = 0; j < numVerts; j++) {
          for (k = 0; k < 4; k++) {
            if (dataF[j * vertSizeF + offsetWF + k] > 0) {
              index = data8[j * vertSize + offsetI + k];
              x = dataF[j * vertSizeF + offsetPF];
              y = dataF[j * vertSizeF + offsetPF + 1];
              z = dataF[j * vertSizeF + offsetPF + 2];
              bMax = boneMax[index];
              bMin = boneMin[index];
              if (bMin.x > x) {
                bMin.x = x;
              }
              if (bMin.y > y) {
                bMin.y = y;
              }
              if (bMin.z > z) {
                bMin.z = z;
              }
              if (bMax.x < x) {
                bMax.x = x;
              }
              if (bMax.y < y) {
                bMax.y = y;
              }
              if (bMax.z < z) {
                bMax.z = z;
              }
              boneUsed[index] = true;
            }
          }
        }
        if (this.morphInstance) {
          var vertIndex;
          var targets = this.morphInstance.morph._targets;
          var minMorphedPos = new Float32Array(numVerts * 3);
          var maxMorphedPos = new Float32Array(numVerts * 3);
          var m, dx, dy, dz;
          var target, mtIndices, mtIndicesLength, deltaPos;
          for (j = 0; j < numVerts; j++) {
            minMorphedPos[j * 3] = maxMorphedPos[j * 3] = dataF[j * vertSizeF + offsetPF];
            minMorphedPos[j * 3 + 1] = maxMorphedPos[j * 3 + 1] = dataF[j * vertSizeF + offsetPF + 1];
            minMorphedPos[j * 3 + 2] = maxMorphedPos[j * 3 + 2] = dataF[j * vertSizeF + offsetPF + 2];
          }
          for (l = 0; l < targets.length; l++) {
            target = targets[l];
            mtIndices = target.indices;
            mtIndicesLength = mtIndices.length;
            deltaPos = target.deltaPositions;
            for (k = 0; k < mtIndicesLength; k++) {
              vertIndex = mtIndices[k];
              dx = deltaPos[k * 3];
              dy = deltaPos[k * 3 + 1];
              dz = deltaPos[k * 3 + 2];
              if (dx < 0) {
                minMorphedPos[vertIndex * 3] += dx;
              } else {
                maxMorphedPos[vertIndex * 3] += dx;
              }
              if (dy < 0) {
                minMorphedPos[vertIndex * 3 + 1] += dy;
              } else {
                maxMorphedPos[vertIndex * 3 + 1] += dy;
              }
              if (dz < 0) {
                minMorphedPos[vertIndex * 3 + 2] += dz;
              } else {
                maxMorphedPos[vertIndex * 3 + 2] += dz;
              }
            }
          }
          for (l = 0; l < targets.length; l++) {
            target = targets[l];
            mtIndices = target.indices;
            mtIndicesLength = mtIndices.length;
            deltaPos = target.deltaPositions;
            for (k = 0; k < mtIndicesLength; k++) {
              vertIndex = mtIndices[k];
              for (m = 0; m < 4; m++) {
                if (dataF[vertIndex * vertSizeF + offsetWF + m] > 0) {
                  index = data8[vertIndex * vertSize + offsetI + m];
                  bMax = boneMax[index];
                  bMin = boneMin[index];
                  x = minMorphedPos[vertIndex * 3];
                  y = minMorphedPos[vertIndex * 3 + 1];
                  z = minMorphedPos[vertIndex * 3 + 2];
                  if (bMin.x > x) {
                    bMin.x = x;
                  }
                  if (bMin.y > y) {
                    bMin.y = y;
                  }
                  if (bMin.z > z) {
                    bMin.z = z;
                  }
                  x = maxMorphedPos[vertIndex * 3];
                  y = maxMorphedPos[vertIndex * 3 + 1];
                  z = maxMorphedPos[vertIndex * 3 + 2];
                  if (bMax.x < x) {
                    bMax.x = x;
                  }
                  if (bMax.y < y) {
                    bMax.y = y;
                  }
                  if (bMax.z < z) {
                    bMax.z = z;
                  }
                }
              }
            }
          }
        }
        for (i = 0; i < numBones; i++) {
          aabb = new pc.BoundingBox;
          aabb.setMinMax(boneMin[i], boneMax[i]);
          this.mesh.boneAabb.push(aabb);
        }
      }
      if (!this._boneAabb) {
        this._boneAabb = [];
        for (i = 0; i < this.mesh.boneAabb.length; i++) {
          this._boneAabb[i] = new pc.BoundingBox;
        }
      }
      boneUsed = this.mesh.boneUsed;
      for (i = 0; i < this.mesh.boneAabb.length; i++) {
        if (!boneUsed[i]) {
          continue;
        }
        this._boneAabb[i].setFromTransformedAabb(this.mesh.boneAabb[i], this.skinInstance.matrices[i]);
      }
      var rootNodeTransform = this.node.getWorldTransform();
      var first = true;
      for (i = 0; i < this.mesh.boneAabb.length; i++) {
        if (!boneUsed[i]) {
          continue;
        }
        if (first) {
          _tmpAabb.center.copy(this._boneAabb[i].center);
          _tmpAabb.halfExtents.copy(this._boneAabb[i].halfExtents);
          first = false;
        } else {
          _tmpAabb.add(this._boneAabb[i]);
        }
      }
      this._aabb.setFromTransformedAabb(_tmpAabb, rootNodeTransform);
    } else {
      if (this.node._aabbVer !== this._aabbVer) {
        aabb = this.mesh ? this.mesh.aabb : this._aabb;
        if (!this.mesh) {
          aabb.center.set(0, 0, 0);
          aabb.halfExtents.set(0, 0, 0);
        }
        this._aabb.setFromTransformedAabb(aabb, this.node.getWorldTransform());
        this._aabbVer = this.node._aabbVer;
      }
    }
    return this._aabb;
  }, set:function(aabb) {
    this._aabb = aabb;
  }});
  Object.defineProperty(MeshInstance.prototype, "material", {get:function() {
    return this._material;
  }, set:function(material) {
    var i;
    for (i = 0; i < this._shader.length; i++) {
      this._shader[i] = null;
    }
    if (this._material) {
      var meshInstances = this._material.meshInstances;
      i = meshInstances.indexOf(this);
      if (i !== -1) {
        meshInstances.splice(i, 1);
      }
    }
    var prevBlend = this._material ? this._material.blendType !== pc.BLEND_NONE : false;
    var prevMat = this._material;
    this._material = material;
    if (this._material) {
      this._material.meshInstances.push(this);
      this.updateKey();
    }
    if (material) {
      if (material.blendType !== pc.BLEND_NONE !== prevBlend) {
        var scene = material._scene;
        if (!scene && prevMat && prevMat._scene) {
          scene = prevMat._scene;
        }
        if (scene) {
          scene.layers._dirtyBlend = true;
        } else {
          material._dirtyBlend = true;
        }
      }
    }
  }});
  Object.defineProperty(MeshInstance.prototype, "layer", {get:function() {
    return this._layer;
  }, set:function(layer) {
    this._layer = layer;
    this.updateKey();
  }});
  Object.defineProperty(MeshInstance.prototype, "receiveShadow", {get:function() {
    return this._receiveShadow;
  }, set:function(val) {
    this._receiveShadow = val;
    this._shaderDefs = val ? this._shaderDefs & ~pc.SHADERDEF_NOSHADOW : this._shaderDefs | pc.SHADERDEF_NOSHADOW;
    this._shader[pc.SHADER_FORWARD] = null;
    this._shader[pc.SHADER_FORWARDHDR] = null;
  }});
  Object.defineProperty(MeshInstance.prototype, "skinInstance", {get:function() {
    return this._skinInstance;
  }, set:function(val) {
    this._skinInstance = val;
    this._shaderDefs = val ? this._shaderDefs | pc.SHADERDEF_SKIN : this._shaderDefs & ~pc.SHADERDEF_SKIN;
    for (var i = 0; i < this._shader.length; i++) {
      this._shader[i] = null;
    }
  }});
  Object.defineProperty(MeshInstance.prototype, "screenSpace", {get:function() {
    return this._screenSpace;
  }, set:function(val) {
    this._screenSpace = val;
    this._shaderDefs = val ? this._shaderDefs | pc.SHADERDEF_SCREENSPACE : this._shaderDefs & ~pc.SHADERDEF_SCREENSPACE;
    this._shader[pc.SHADER_FORWARD] = null;
  }});
  Object.defineProperty(MeshInstance.prototype, "key", {get:function() {
    return this._key[pc.SORTKEY_FORWARD];
  }, set:function(val) {
    this._key[pc.SORTKEY_FORWARD] = val;
  }});
  Object.defineProperty(MeshInstance.prototype, "mask", {get:function() {
    return this._shaderDefs >> 16;
  }, set:function(val) {
    var toggles = this._shaderDefs & 65535;
    this._shaderDefs = toggles | val << 16;
    this._shader[pc.SHADER_FORWARD] = null;
    this._shader[pc.SHADER_FORWARDHDR] = null;
  }});
  pc.extend(MeshInstance.prototype, {syncAabb:function() {
  }, updateKey:function() {
    var material = this.material;
    this._key[pc.SORTKEY_FORWARD] = getKey(this.layer, material.alphaToCoverage || material.alphaTest ? pc.BLEND_NORMAL : material.blendType, false, material.id);
  }, setParameter:pc.Material.prototype.setParameter, setParameters:pc.Material.prototype.setParameters, deleteParameter:pc.Material.prototype.deleteParameter, getParameter:pc.Material.prototype.getParameter, getParameters:pc.Material.prototype.getParameters, clearParameters:pc.Material.prototype.clearParameters});
  var Command = function(layer, blendType, command) {
    this._key = [];
    this._key[pc.SORTKEY_FORWARD] = getKey(layer, blendType, true, 0);
    this.command = command;
  };
  Object.defineProperty(Command.prototype, "key", {get:function() {
    return this._key[pc.SORTKEY_FORWARD];
  }, set:function(val) {
    this._key[pc.SORTKEY_FORWARD] = val;
  }});
  var InstancingData = function(numObjects, dynamic, instanceSize) {
    instanceSize = instanceSize || 16;
    this.buffer = new Float32Array(numObjects * instanceSize);
    this.count = numObjects;
    this.offset = 0;
    this.usage = dynamic ? pc.BUFFER_DYNAMIC : pc.BUFFER_STATIC;
    this._buffer = null;
  };
  InstancingData.prototype = {update:function() {
    if (this._buffer) {
      this._buffer.setData(this.buffer);
    }
  }};
  function getKey(layer, blendType, isCommand, materialId) {
    return (layer & 15) << 27 | (blendType === pc.BLEND_NONE ? 1 : 0) << 26 | (isCommand ? 1 : 0) << 25 | (materialId & 33554431) << 0;
  }
  return {Command:Command, Mesh:Mesh, MeshInstance:MeshInstance, InstancingData:InstancingData, _getDrawcallSortKey:getKey};
}());
pc.extend(pc, function() {
  var _invMatrix = new pc.Mat4;
  var Skin = function(graphicsDevice, ibp, boneNames) {
    this.device = graphicsDevice;
    this.inverseBindPose = ibp;
    this.boneNames = boneNames;
  };
  var SkinInstance = function(skin) {
    this.skin = skin;
    this._dirty = true;
    this.bones = [];
    var numBones = skin.inverseBindPose.length;
    var device = skin.device;
    if (device.supportsBoneTextures) {
      var size;
      if (numBones > 256) {
        size = 64;
      } else {
        if (numBones > 64) {
          size = 32;
        } else {
          if (numBones > 16) {
            size = 16;
          } else {
            size = 8;
          }
        }
      }
      this.boneTexture = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_RGBA32F, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
      this.matrixPalette = this.boneTexture.lock();
    } else {
      this.matrixPalette = new Float32Array(numBones * 16);
    }
    this.matrices = [];
    for (var i = 0; i < numBones; i++) {
      this.matrices[i] = new pc.Mat4;
    }
  };
  SkinInstance.prototype = {updateMatrices:function(rootNode) {
    _invMatrix.copy(rootNode.getWorldTransform()).invert();
    for (var i = this.bones.length - 1; i >= 0; i--) {
      this.matrices[i].mul2(_invMatrix, this.bones[i].getWorldTransform());
      this.matrices[i].mul2(this.matrices[i], this.skin.inverseBindPose[i]);
    }
  }, updateMatrixPalette:function() {
    var pe;
    var mp = this.matrixPalette;
    var base;
    for (var i = this.bones.length - 1; i >= 0; i--) {
      pe = this.matrices[i].data;
      base = i * 16;
      mp[base] = pe[0];
      mp[base + 1] = pe[1];
      mp[base + 2] = pe[2];
      mp[base + 3] = pe[3];
      mp[base + 4] = pe[4];
      mp[base + 5] = pe[5];
      mp[base + 6] = pe[6];
      mp[base + 7] = pe[7];
      mp[base + 8] = pe[8];
      mp[base + 9] = pe[9];
      mp[base + 10] = pe[10];
      mp[base + 11] = pe[11];
      mp[base + 12] = pe[12];
      mp[base + 13] = pe[13];
      mp[base + 14] = pe[14];
      mp[base + 15] = pe[15];
    }
    if (this.skin.device.supportsBoneTextures) {
      this.boneTexture.lock();
      this.boneTexture.unlock();
    }
  }};
  return {Skin:Skin, SkinInstance:SkinInstance};
}());
pc.extend(pc, function() {
  function PartitionedVertex() {
    this.index = 0;
    this.boneIndices = [0, 0, 0, 0];
  }
  function SkinPartition() {
    this.partition = 0;
    this.vertexStart = 0;
    this.vertexCount = 0;
    this.indexStart = 0;
    this.indexCount = 0;
    this.boneIndices = [];
    this.vertices = [];
    this.indices = [];
    this.indexMap = {};
  }
  SkinPartition.prototype = {addVertex:function(vertex, idx, vertexArray) {
    var remappedIndex = -1;
    if (this.indexMap[idx] !== undefined) {
      remappedIndex = this.indexMap[idx];
      this.indices.push(remappedIndex);
    } else {
      for (var influence = 0; influence < 4; influence++) {
        if (vertexArray.blendWeight.data[idx * 4 + influence] === 0) {
          continue;
        }
        var originalBoneIndex = vertexArray.blendIndices.data[vertex.index * 4 + influence];
        vertex.boneIndices[influence] = this.getBoneRemap(originalBoneIndex);
      }
      remappedIndex = this.vertices.length;
      this.indices.push(remappedIndex);
      this.vertices.push(vertex);
      this.indexMap[idx] = remappedIndex;
    }
  }, addPrimitive:function(vertices, vertexIndices, vertexArray, boneLimit) {
    var i, j;
    var bonesToAdd = [];
    var bonesToAddCount = 0;
    var vertexCount = vertices.length;
    for (i = 0; i < vertexCount; i++) {
      var vertex = vertices[i];
      var idx = vertex.index;
      for (var influence = 0; influence < 4; influence++) {
        if (vertexArray.blendWeight.data[idx * 4 + influence] > 0) {
          var boneIndex = vertexArray.blendIndices.data[idx * 4 + influence];
          var needToAdd = true;
          for (j = 0; j < bonesToAddCount; j++) {
            if (bonesToAdd[j] == boneIndex) {
              needToAdd = false;
              break;
            }
          }
          if (needToAdd) {
            bonesToAdd[bonesToAddCount] = boneIndex;
            var boneRemap = this.getBoneRemap(boneIndex);
            bonesToAddCount += boneRemap === -1 ? 1 : 0;
          }
        }
      }
    }
    if (this.boneIndices.length + bonesToAddCount > boneLimit) {
      return false;
    }
    for (i = 0; i < bonesToAddCount; i++) {
      this.boneIndices.push(bonesToAdd[i]);
    }
    for (i = 0; i < vertexCount; i++) {
      this.addVertex(vertices[i], vertexIndices[i], vertexArray);
    }
    return true;
  }, getBoneRemap:function(boneIndex) {
    for (var i = 0; i < this.boneIndices.length; i++) {
      if (this.boneIndices[i] === boneIndex) {
        return i;
      }
    }
    return -1;
  }};
  function indicesToReferences(model) {
    var i;
    var vertices = model.vertices;
    var skins = model.skins;
    var meshes = model.meshes;
    var meshInstances = model.meshInstances;
    for (i = 0; i < meshes.length; i++) {
      meshes[i].vertices = vertices[meshes[i].vertices];
      if (meshes[i].skin !== undefined) {
        meshes[i].skin = skins[meshes[i].skin];
      }
    }
    for (i = 0; i < meshInstances.length; i++) {
      meshInstances[i].mesh = meshes[meshInstances[i].mesh];
    }
  }
  function referencesToIndices(model) {
    var i;
    var vertices = model.vertices;
    var skins = model.skins;
    var meshes = model.meshes;
    var meshInstances = model.meshInstances;
    for (i = 0; i < meshes.length; i++) {
      meshes[i].vertices = vertices.indexOf(meshes[i].vertices);
      if (meshes[i].skin !== undefined) {
        meshes[i].skin = skins.indexOf(meshes[i].skin);
      }
    }
    for (i = 0; i < meshInstances.length; i++) {
      meshInstances[i].mesh = meshes.indexOf(meshInstances[i].mesh);
    }
  }
  function partitionSkin(model, materialMappings, boneLimit) {
    var i, j, k, index;
    indicesToReferences(model);
    var vertexArrays = model.vertices;
    var skins = model.skins;
    var mesh;
    var meshes = model.meshes;
    var meshInstances = model.meshInstances;
    var getVertex = function(idx) {
      var vert = new PartitionedVertex;
      vert.index = idx;
      return vert;
    };
    for (i = skins.length - 1; i >= 0; i--) {
      if (skins[i].boneNames.length > boneLimit) {
        var skin = skins.splice(i, 1)[0];
        var meshesToSplit = [];
        for (j = 0; j < meshes.length; j++) {
          if (meshes[j].skin === skin) {
            meshesToSplit.push(meshes[j]);
          }
        }
        for (j = 0; j < meshesToSplit.length; j++) {
          index = meshes.indexOf(meshesToSplit[j]);
          if (index !== -1) {
            meshes.splice(index, 1);
          }
        }
        if (meshesToSplit.length === 0) {
          throw new Error("partitionSkin: There should be at least one mesh that references a skin");
        }
        var vertexArray = meshesToSplit[0].vertices;
        for (j = 1; j < meshesToSplit.length; j++) {
          if (meshesToSplit[j].vertices !== vertexArray) {
            throw new Error("partitionSkin: All meshes that share a skin should also share the same vertex buffer");
          }
        }
        var partition;
        var partitions = [];
        var primitiveVertices = [];
        var primitiveIndices = [];
        var basePartition = 0;
        for (j = 0; j < meshesToSplit.length; j++) {
          mesh = meshesToSplit[j];
          var indices = mesh.indices;
          for (var iIndex = mesh.base; iIndex < mesh.base + mesh.count;) {
            index = indices[iIndex++];
            primitiveVertices[0] = getVertex(index);
            primitiveIndices[0] = index;
            index = indices[iIndex++];
            primitiveVertices[1] = getVertex(index);
            primitiveIndices[1] = index;
            index = indices[iIndex++];
            primitiveVertices[2] = getVertex(index);
            primitiveIndices[2] = index;
            var added = false;
            for (var iBonePartition = basePartition; iBonePartition < partitions.length; iBonePartition++) {
              partition = partitions[iBonePartition];
              if (partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit)) {
                added = true;
                break;
              }
            }
            if (!added) {
              partition = new SkinPartition;
              partition.originalMesh = mesh;
              partition.addPrimitive(primitiveVertices, primitiveIndices, vertexArray, boneLimit);
              partitions.push(partition);
            }
          }
          basePartition = partitions.length;
        }
        var partitionedVertices = [];
        var partitionedIndices = [];
        for (j = 0; j < partitions.length; j++) {
          partition = partitions[j];
          if (partition.vertices.length && partition.indices.length) {
            var vertexStart = partitionedVertices.length;
            var vertexCount = partition.vertices.length;
            var indexStart = partitionedIndices.length;
            var indexCount = partition.indices.length;
            partition.partition = j;
            partition.vertexStart = vertexStart;
            partition.vertexCount = vertexCount;
            partition.indexStart = indexStart;
            partition.indexCount = indexCount;
            var iSour;
            var iDest;
            iSour = 0;
            iDest = vertexStart;
            while (iSour < vertexCount) {
              partitionedVertices[iDest++] = partition.vertices[iSour++];
            }
            iSour = 0;
            iDest = indexStart;
            while (iSour < indexCount) {
              partitionedIndices[iDest++] = partition.indices[iSour++] + vertexStart;
            }
          }
        }
        var splitSkins = [];
        for (j = 0; j < partitions.length; j++) {
          partition = partitions[j];
          var ibp = [];
          var boneNames = [];
          for (k = 0; k < partition.boneIndices.length; k++) {
            ibp.push(skin.inverseBindMatrices[partition.boneIndices[k]]);
            boneNames.push(skin.boneNames[partition.boneIndices[k]]);
          }
          var splitSkin = {inverseBindMatrices:ibp, boneNames:boneNames};
          splitSkins.push(splitSkin);
          skins.push(splitSkin);
        }
        var attrib, attribName, data, components;
        var splitVertexArray = {};
        for (attribName in vertexArray) {
          splitVertexArray[attribName] = {components:vertexArray[attribName].components, data:[], type:vertexArray[attribName].type};
        }
        for (attribName in vertexArray) {
          if (attribName === "blendIndices") {
            var dstBoneIndices = splitVertexArray[attribName].data;
            for (j = 0; j < partitionedVertices.length; j++) {
              var srcBoneIndices = partitionedVertices[j].boneIndices;
              dstBoneIndices.push(srcBoneIndices[0], srcBoneIndices[1], srcBoneIndices[2], srcBoneIndices[3]);
            }
          } else {
            attrib = vertexArray[attribName];
            data = attrib.data;
            components = attrib.components;
            for (j = 0; j < partitionedVertices.length; j++) {
              index = partitionedVertices[j].index;
              for (k = 0; k < components; k++) {
                splitVertexArray[attribName].data.push(data[index * components + k]);
              }
            }
          }
        }
        vertexArrays[vertexArrays.indexOf(vertexArray)] = splitVertexArray;
        for (j = 0; j < partitions.length; j++) {
          partition = partitions[j];
          mesh = {aabb:{min:[0, 0, 0], max:[0, 0, 0]}, vertices:splitVertexArray, skin:splitSkins[j], indices:partitionedIndices.splice(0, partition.indexCount), type:"triangles", base:0, count:partition.indexCount};
          meshes.push(mesh);
          for (k = meshInstances.length - 1; k >= 0; k--) {
            if (meshInstances[k].mesh === partition.originalMesh) {
              meshInstances.push({mesh:mesh, node:meshInstances[k].node});
              if (materialMappings) {
                materialMappings.push({material:materialMappings[k].material, path:materialMappings[k].path});
              }
            }
          }
        }
        for (j = 0; j < partitions.length; j++) {
          partition = partitions[j];
          for (k = meshInstances.length - 1; k >= 0; k--) {
            if (meshInstances[k].mesh === partition.originalMesh) {
              meshInstances.splice(k, 1);
              if (materialMappings) {
                materialMappings.splice(k, 1);
              }
            }
          }
        }
      }
    }
    referencesToIndices(model);
  }
  return {partitionSkin:partitionSkin};
}());
pc.extend(pc, function() {
  var _morphMin = new pc.Vec3;
  var _morphMax = new pc.Vec3;
  var MorphTarget = function(options) {
    if (options.indices) {
      this.indices = options.indices;
    } else {
      var arr = options.deltaPositions;
      this.indices = [];
      this.indices.length = arr.length;
      for (var i = 0; i < arr.length; i++) {
        this.indices[i] = i;
      }
    }
    this.deltaPositions = options.deltaPositions;
    this.deltaNormals = options.deltaNormals;
    this.deltaTangents = options.deltaTangents;
    this.name = options.name;
    this.aabb = options.aabb;
  };
  var Morph = function(targets) {
    this.aabb = new pc.BoundingBox;
    this._baseBuffer = null;
    this._baseAabb = null;
    this._targets = targets;
    this._dirty = true;
    this._aabbDirty = true;
    this._baseData = null;
    this._offsetPF = 0;
    this._offsetNF = 0;
    this._offsetTF = 0;
    this._vertSizeF = 0;
  };
  pc.extend(Morph.prototype, {_setBaseMesh:function(baseMesh) {
    this._baseBuffer = baseMesh.vertexBuffer;
    this._baseAabb = baseMesh._aabb;
    this._baseData = new Float32Array(this._baseBuffer.storage);
    var offsetP = -1;
    var offsetN = -1;
    var offsetT = -1;
    var elems = this._baseBuffer.format.elements;
    var vertSize = this._baseBuffer.format.size;
    for (var j = 0; j < elems.length; j++) {
      if (elems[j].name === pc.SEMANTIC_POSITION) {
        offsetP = elems[j].offset;
      } else {
        if (elems[j].name === pc.SEMANTIC_NORMAL) {
          offsetN = elems[j].offset;
        } else {
          if (elems[j].name === pc.SEMANTIC_TANGENT) {
            offsetT = elems[j].offset;
          }
        }
      }
    }
    this._offsetPF = offsetP / 4;
    this._offsetNF = offsetN / 4;
    this._offsetTF = offsetT / 4;
    this._vertSizeF = vertSize / 4;
    this._dirty = true;
  }, _calculateAabb:function() {
    if (!this._baseBuffer) {
      return;
    }
    this.aabb.copy(this._baseAabb);
    var numIndices;
    var i, j, target, index, id;
    var x, y, z;
    var vertSizeF = this._vertSizeF;
    var offsetPF = this._offsetPF;
    var baseData = this._baseData;
    for (i = 0; i < this._targets.length; i++) {
      target = this._targets[i];
      if (!target.aabb && target.indices.length > 0) {
        target.aabb = this.aabb.clone();
        _morphMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
        _morphMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
        numIndices = target.indices.length;
        for (j = 0; j < numIndices; j++) {
          index = target.indices[j];
          id = index * vertSizeF + offsetPF;
          x = baseData[id] + target.deltaPositions[j * 3];
          y = baseData[id + 1] + target.deltaPositions[j * 3 + 1];
          z = baseData[id + 2] + target.deltaPositions[j * 3 + 2];
          if (_morphMin.x > x) {
            _morphMin.x = x;
          }
          if (_morphMin.y > y) {
            _morphMin.y = y;
          }
          if (_morphMin.z > z) {
            _morphMin.z = z;
          }
          if (_morphMax.x < x) {
            _morphMax.x = x;
          }
          if (_morphMax.y < y) {
            _morphMax.y = y;
          }
          if (_morphMax.z < z) {
            _morphMax.z = z;
          }
        }
        target.aabb.setMinMax(_morphMin, _morphMax);
      }
      if (target.aabb) {
        this.aabb.add(target.aabb);
      }
    }
    this._aabbDirty = false;
  }, addTarget:function(target) {
    this._targets.push(target);
    this._aabbDirty = true;
  }, removeTarget:function(target) {
    var index = this._targets.indexOf(target);
    if (index !== -1) {
      this._targets.splice(index, 1);
      this._aabbDirty = true;
    }
  }, getTarget:function(index) {
    return this._targets[index];
  }});
  var MorphInstance = function(morph) {
    this.morph = morph;
    this._vertexBuffer = null;
    this._vertexData = null;
    this._weights = [];
    this._dirty = true;
  };
  MorphInstance.prototype = {_setBaseMesh:function(baseMesh) {
    this.destroy();
    this._vertexBuffer = new pc.VertexBuffer(this.morph._baseBuffer.device, this.morph._baseBuffer.format, this.morph._baseBuffer.numVertices, pc.BUFFER_DYNAMIC, this.morph._baseBuffer.storage.slice(0));
    this._vertexData = new Float32Array(this._vertexBuffer.storage);
    this._weights = [];
    this._weights.length = this.morph._targets.length;
    for (var i = 0; i < this.morph._targets.length; i++) {
      this._weights[i] = 0;
    }
    this._dirty = true;
  }, destroy:function() {
    if (this._vertexBuffer) {
      this._vertexBuffer.destroy();
      this._vertexBuffer = null;
    }
  }, getWeight:function(index) {
    return this._weights[index];
  }, setWeight:function(index, weight) {
    this._weights[index] = weight;
    this._dirty = true;
  }, updateBounds:function(mesh) {
    if (this.morph._baseBuffer !== mesh.vertexBuffer) {
      this.morph._setBaseMesh(mesh);
    }
    if (!this._vertexData) {
      this._setBaseMesh(mesh);
    }
    if (this.morph._aabbDirty) {
      this.morph._calculateAabb();
    }
  }, update:function(mesh) {
    if (this.morph._baseBuffer !== mesh.vertexBuffer) {
      this.morph._setBaseMesh(mesh);
    }
    if (!this._vertexData) {
      this._setBaseMesh(mesh);
    }
    var numIndices, index;
    var targets = this.morph._targets;
    var weights = this._weights;
    var target, weight, j, id, j3, j4;
    var vertSizeF = this.morph._vertSizeF;
    var offsetPF = this.morph._offsetPF;
    var offsetNF = this.morph._offsetNF;
    var offsetTF = this.morph._offsetTF;
    var vdata = this._vertexData;
    vdata.set(this.morph._baseData);
    for (var i = 0; i < targets.length; i++) {
      weight = weights[i];
      if (weight === 0) {
        continue;
      }
      target = targets[i];
      numIndices = target.indices.length;
      for (j = 0; j < numIndices; j++) {
        j3 = j * 3;
        index = target.indices[j];
        id = index * vertSizeF + offsetPF;
        vdata[id] += target.deltaPositions[j3] * weight;
        vdata[id + 1] += target.deltaPositions[j3 + 1] * weight;
        vdata[id + 2] += target.deltaPositions[j3 + 2] * weight;
        if (target.deltaNormals) {
          id = index * vertSizeF + offsetNF;
          vdata[id] += target.deltaNormals[j3] * weight;
          vdata[id + 1] += target.deltaNormals[j3 + 1] * weight;
          vdata[id + 2] += target.deltaNormals[j3 + 2] * weight;
          if (target.deltaTangents) {
            j4 = j * 4;
            id = index * vertSizeF + offsetTF;
            vdata[id] += target.deltaTangents[j4] * weight;
            vdata[id + 1] += target.deltaTangents[j4 + 1] * weight;
            vdata[id + 2] += target.deltaTangents[j4 + 2] * weight;
            vdata[id + 3] += target.deltaTangents[j4 + 3] * weight;
            vdata[id + 3] = vdata[id + 3] > 0 ? 1 : -1;
          }
        }
      }
    }
    this._vertexBuffer.unlock();
  }};
  return {MorphTarget:MorphTarget, Morph:Morph, MorphInstance:MorphInstance};
}());
pc.extend(pc, function() {
  var Model = function Model() {
    this.graph = null;
    this.meshInstances = [];
    this.skinInstances = [];
    this.morphInstances = [];
    this.cameras = [];
    this.lights = [];
    this._shadersVersion = 0;
  };
  Model.prototype = {getGraph:function() {
    return this.graph;
  }, setGraph:function(graph) {
    this.graph = graph;
  }, getCameras:function() {
    return this.cameras;
  }, setCameras:function(cameras) {
    this.cameras = cameras;
  }, getLights:function() {
    return this.lights;
  }, setLights:function(lights) {
    this.lights = lights;
  }, getMaterials:function() {
    var i;
    var materials = [];
    for (i = 0; i < this.meshInstances.length; i++) {
      var meshInstance = this.meshInstances[i];
      if (materials.indexOf(meshInstance.material) === -1) {
        materials.push(meshInstance.material);
      }
    }
    return materials;
  }, clone:function() {
    var i, j;
    var srcNodes = [];
    var cloneNodes = [];
    var _duplicate = function(node) {
      var newNode = node.clone();
      srcNodes.push(node);
      cloneNodes.push(newNode);
      for (var i = 0; i < node._children.length; i++) {
        newNode.addChild(_duplicate(node._children[i]));
      }
      return newNode;
    };
    var cloneGraph = _duplicate(this.graph);
    var cloneMeshInstances = [];
    var cloneSkinInstances = [];
    var cloneMorphInstances = [];
    for (i = 0; i < this.skinInstances.length; i++) {
      var skin = this.skinInstances[i].skin;
      var cloneSkinInstance = new pc.SkinInstance(skin);
      var bones = [];
      for (j = 0; j < skin.boneNames.length; j++) {
        var boneName = skin.boneNames[j];
        var bone = cloneGraph.findByName(boneName);
        bones.push(bone);
      }
      cloneSkinInstance.bones = bones;
      cloneSkinInstances.push(cloneSkinInstance);
    }
    for (i = 0; i < this.morphInstances.length; i++) {
      var morph = this.morphInstances[i].morph;
      var cloneMorphInstance = new pc.MorphInstance(morph);
      cloneMorphInstances.push(cloneMorphInstance);
    }
    for (i = 0; i < this.meshInstances.length; i++) {
      var meshInstance = this.meshInstances[i];
      var nodeIndex = srcNodes.indexOf(meshInstance.node);
      var cloneMeshInstance = new pc.MeshInstance(cloneNodes[nodeIndex], meshInstance.mesh, meshInstance.material);
      if (meshInstance.skinInstance) {
        var skinInstanceIndex = this.skinInstances.indexOf(meshInstance.skinInstance);
        cloneMeshInstance.skinInstance = cloneSkinInstances[skinInstanceIndex];
      }
      if (meshInstance.morphInstance) {
        var morphInstanceIndex = this.morphInstances.indexOf(meshInstance.morphInstance);
        cloneMeshInstance.morphInstance = cloneMorphInstances[morphInstanceIndex];
      }
      cloneMeshInstances.push(cloneMeshInstance);
    }
    var clone = new pc.Model;
    clone.graph = cloneGraph;
    clone.meshInstances = cloneMeshInstances;
    clone.skinInstances = cloneSkinInstances;
    clone.morphInstances = cloneMorphInstances;
    clone.getGraph().syncHierarchy();
    return clone;
  }, destroy:function() {
    var meshInstances = this.meshInstances;
    var meshInstance, mesh, skin, morph, ib, boneTex, j;
    var device;
    for (var i = 0; i < meshInstances.length; i++) {
      meshInstance = meshInstances[i];
      mesh = meshInstance.mesh;
      if (mesh) {
        mesh._refCount--;
        if (mesh._refCount < 1) {
          if (mesh.vertexBuffer) {
            device = device || mesh.vertexBuffer.device;
            mesh.vertexBuffer.destroy();
            mesh.vertexBuffer = null;
          }
          for (j = 0; j < mesh.indexBuffer.length; j++) {
            device = device || mesh.indexBuffer.device;
            ib = mesh.indexBuffer[j];
            if (!ib) {
              continue;
            }
            ib.destroy();
          }
          mesh.indexBuffer.length = 0;
        }
      }
      skin = meshInstance.skinInstance;
      if (skin) {
        boneTex = skin.boneTexture;
        if (boneTex) {
          boneTex.destroy();
        }
      }
      meshInstance.skinInstance = null;
      morph = meshInstance.morphInstance;
      if (morph) {
        morph.destroy();
      }
      meshInstance.morphInstance = null;
      meshInstance.material = null;
    }
  }, generateWireframe:function() {
    var i, j, k;
    var i1, i2;
    var mesh, base, count, indexBuffer, wireBuffer;
    var srcIndices, dstIndices;
    var meshes = [];
    for (i = 0; i < this.meshInstances.length; i++) {
      mesh = this.meshInstances[i].mesh;
      if (meshes.indexOf(mesh) === -1) {
        meshes.push(mesh);
      }
    }
    var offsets = [[0, 1], [1, 2], [2, 0]];
    for (i = 0; i < meshes.length; i++) {
      mesh = meshes[i];
      base = mesh.primitive[pc.RENDERSTYLE_SOLID].base;
      count = mesh.primitive[pc.RENDERSTYLE_SOLID].count;
      indexBuffer = mesh.indexBuffer[pc.RENDERSTYLE_SOLID];
      srcIndices = new Uint16Array(indexBuffer.lock());
      var uniqueLineIndices = {};
      var lines = [];
      for (j = base; j < base + count; j += 3) {
        for (k = 0; k < 3; k++) {
          i1 = srcIndices[j + offsets[k][0]];
          i2 = srcIndices[j + offsets[k][1]];
          var line = i1 > i2 ? i2 << 16 | i1 : i1 << 16 | i2;
          if (uniqueLineIndices[line] === undefined) {
            uniqueLineIndices[line] = 0;
            lines.push(i1, i2);
          }
        }
      }
      indexBuffer.unlock();
      wireBuffer = new pc.IndexBuffer(indexBuffer.device, pc.INDEXFORMAT_UINT16, lines.length);
      dstIndices = new Uint16Array(wireBuffer.lock());
      dstIndices.set(lines);
      wireBuffer.unlock();
      mesh.primitive[pc.RENDERSTYLE_WIREFRAME] = {type:pc.PRIMITIVE_LINES, base:0, count:lines.length, indexed:true};
      mesh.indexBuffer[pc.RENDERSTYLE_WIREFRAME] = wireBuffer;
    }
  }};
  return {Model:Model};
}());
pc.extend(pc, function() {
  var particleVerts = [[-1, -1], [1, -1], [1, 1], [-1, 1]];
  var _createTexture = function(device, width, height, pixelData, format, mult8Bit, filter) {
    if (!format) {
      format = pc.PIXELFORMAT_RGBA32F;
    }
    var mipFilter = pc.FILTER_NEAREST;
    if (filter && format === pc.PIXELFORMAT_R8_G8_B8_A8) {
      mipFilter = pc.FILTER_LINEAR;
    }
    var texture = new pc.Texture(device, {width:width, height:height, format:format, cubemap:false, mipmaps:false, minFilter:mipFilter, magFilter:mipFilter, addressU:pc.ADDRESS_CLAMP_TO_EDGE, addressV:pc.ADDRESS_CLAMP_TO_EDGE});
    var pixels = texture.lock();
    if (format === pc.PIXELFORMAT_R8_G8_B8_A8) {
      var temp = new Uint8Array(pixelData.length);
      for (var i = 0; i < pixelData.length; i++) {
        temp[i] = pixelData[i] * mult8Bit * 255;
      }
      pixelData = temp;
    }
    pixels.set(pixelData);
    texture.unlock();
    return texture;
  };
  function saturate(x) {
    return Math.max(Math.min(x, 1), 0);
  }
  function glMod(x, y) {
    return x - y * Math.floor(x / y);
  }
  var default0Curve = new pc.Curve([0, 0, 1, 0]);
  var default1Curve = new pc.Curve([0, 1, 1, 1]);
  var default0Curve3 = new pc.CurveSet([0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]);
  var default1Curve3 = new pc.CurveSet([0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]);
  var particleTexHeight = 2;
  var particleTexChannels = 4;
  var velocityVec = new pc.Vec3;
  var localVelocityVec = new pc.Vec3;
  var velocityVec2 = new pc.Vec3;
  var localVelocityVec2 = new pc.Vec3;
  var rndFactor3Vec = new pc.Vec3;
  var particlePosPrev = new pc.Vec3;
  var particlePos = new pc.Vec3;
  var particleFinalPos = new pc.Vec3;
  var moveDirVec = new pc.Vec3;
  var rotMat = new pc.Mat4;
  var spawnMatrix3 = new pc.Mat3;
  var emitterMatrix3 = new pc.Mat3;
  var uniformScale = 1;
  var nonUniformScale;
  var spawnMatrix = new pc.Mat4;
  var randomPos = new pc.Vec3;
  var randomPosTformed = new pc.Vec3;
  var tmpVec3 = new pc.Vec3;
  var velocityV = new pc.Vec3;
  var bMin = new pc.Vec3;
  var bMax = new pc.Vec3;
  var setPropertyTarget;
  var setPropertyOptions;
  function setProperty(pName, defaultVal) {
    if (setPropertyOptions[pName] !== undefined && setPropertyOptions[pName] !== null) {
      setPropertyTarget[pName] = setPropertyOptions[pName];
    } else {
      setPropertyTarget[pName] = defaultVal;
    }
  }
  function pack3NFloats(a, b, c) {
    var packed = a * 255 << 16 | b * 255 << 8 | c * 255;
    return packed / (1 << 24);
  }
  function packTextureXYZ_NXYZ(qXYZ, qXYZ2) {
    var num = qXYZ.length / 3;
    var colors = new Array(num * 4);
    for (var i = 0; i < num; i++) {
      colors[i * 4] = qXYZ[i * 3];
      colors[i * 4 + 1] = qXYZ[i * 3 + 1];
      colors[i * 4 + 2] = qXYZ[i * 3 + 2];
      colors[i * 4 + 3] = pack3NFloats(qXYZ2[i * 3], qXYZ2[i * 3 + 1], qXYZ2[i * 3 + 2]);
    }
    return colors;
  }
  function packTextureRGBA(qRGB, qA) {
    var colors = new Array(qA.length * 4);
    for (var i = 0; i < qA.length; i++) {
      colors[i * 4] = qRGB[i * 3];
      colors[i * 4 + 1] = qRGB[i * 3 + 1];
      colors[i * 4 + 2] = qRGB[i * 3 + 2];
      colors[i * 4 + 3] = qA[i];
    }
    return colors;
  }
  function packTexture5Floats(qA, qB, qC, qD, qE) {
    var colors = new Array(qA.length * 4);
    for (var i = 0; i < qA.length; i++) {
      colors[i * 4] = qA[i];
      colors[i * 4 + 1] = qB[i];
      colors[i * 4 + 2] = 0;
      colors[i * 4 + 3] = pack3NFloats(qC[i], qD[i], qE[i]);
    }
    return colors;
  }
  function syncToCpu(device, targ) {
    var tex = targ._colorBuffer;
    var pixels = new Uint8Array(tex.width * tex.height * 4);
    var gl = device.gl;
    device.setFramebuffer(targ._glFrameBuffer);
    gl.readPixels(0, 0, tex.width, tex.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
    if (!tex._levels) {
      tex._levels = [];
    }
    tex._levels[0] = pixels;
  }
  var ParticleEmitter = function(graphicsDevice, options) {
    this.graphicsDevice = graphicsDevice;
    var gd = graphicsDevice;
    var precision = 32;
    this.precision = precision;
    this._addTimeTime = 0;
    if (!ParticleEmitter.DEFAULT_PARAM_TEXTURE) {
      var resolution = 16;
      var centerPoint = resolution * 0.5 + 0.5;
      var dtex = new Float32Array(resolution * resolution * 4);
      var x, y, xgrad, ygrad, p, c;
      for (y = 0; y < resolution; y++) {
        for (x = 0; x < resolution; x++) {
          xgrad = x + 1 - centerPoint;
          ygrad = y + 1 - centerPoint;
          c = saturate(1 - saturate(Math.sqrt(xgrad * xgrad + ygrad * ygrad) / resolution) - 0.5);
          p = y * resolution + x;
          dtex[p * 4] = 1;
          dtex[p * 4 + 1] = 1;
          dtex[p * 4 + 2] = 1;
          dtex[p * 4 + 3] = c;
        }
      }
      ParticleEmitter.DEFAULT_PARAM_TEXTURE = _createTexture(gd, resolution, resolution, dtex, pc.PIXELFORMAT_R8_G8_B8_A8, 1.0, true);
      ParticleEmitter.DEFAULT_PARAM_TEXTURE.minFilter = pc.FILTER_LINEAR;
      ParticleEmitter.DEFAULT_PARAM_TEXTURE.magFilter = pc.FILTER_LINEAR;
    }
    setPropertyTarget = this;
    setPropertyOptions = options;
    setProperty("numParticles", 1);
    if (this.numParticles > graphicsDevice.maxTextureSize) {
      console.warn("WARNING: can't create more than " + graphicsDevice.maxTextureSize + " particles on this device.");
      this.numParticles = graphicsDevice.maxTextureSize;
    }
    setProperty("rate", 1);
    setProperty("rate2", this.rate);
    setProperty("lifetime", 50);
    setProperty("emitterExtents", new pc.Vec3(0, 0, 0));
    setProperty("emitterRadius", 0);
    setProperty("emitterShape", pc.EMITTERSHAPE_BOX);
    setProperty("initialVelocity", 1);
    setProperty("wrap", false);
    setProperty("localSpace", false);
    setProperty("wrapBounds", null);
    setProperty("colorMap", ParticleEmitter.DEFAULT_PARAM_TEXTURE);
    setProperty("normalMap", null);
    setProperty("loop", true);
    setProperty("preWarm", false);
    setProperty("sort", pc.PARTICLESORT_NONE);
    setProperty("mode", pc.PARTICLEMODE_GPU);
    setProperty("scene", null);
    setProperty("lighting", false);
    setProperty("halfLambert", false);
    setProperty("intensity", 1.0);
    setProperty("stretch", 0.0);
    setProperty("alignToMotion", false);
    setProperty("depthSoftening", 0);
    setProperty("mesh", null);
    setProperty("depthWrite", false);
    setProperty("noFog", false);
    setProperty("blendType", pc.BLEND_NORMAL);
    setProperty("node", null);
    setProperty("startAngle", 0);
    setProperty("startAngle2", this.startAngle);
    setProperty("animTilesX", 1);
    setProperty("animTilesY", 1);
    setProperty("animNumFrames", 1);
    setProperty("animSpeed", 1);
    setProperty("animLoop", true);
    this.frameRandom = new pc.Vec3(0, 0, 0);
    setProperty("colorGraph", default1Curve3);
    setProperty("colorGraph2", this.colorGraph);
    setProperty("scaleGraph", default1Curve);
    setProperty("scaleGraph2", this.scaleGraph);
    setProperty("alphaGraph", default1Curve);
    setProperty("alphaGraph2", this.alphaGraph);
    setProperty("localVelocityGraph", default0Curve3);
    setProperty("localVelocityGraph2", this.localVelocityGraph);
    setProperty("velocityGraph", default0Curve3);
    setProperty("velocityGraph2", this.velocityGraph);
    setProperty("rotationSpeedGraph", default0Curve);
    setProperty("rotationSpeedGraph2", this.rotationSpeedGraph);
    this.constantParticleTexIN = gd.scope.resolve("particleTexIN");
    this.constantParticleTexOUT = gd.scope.resolve("particleTexOUT");
    this.constantEmitterPos = gd.scope.resolve("emitterPos");
    this.constantEmitterScale = gd.scope.resolve("emitterScale");
    this.constantSpawnBounds = gd.scope.resolve("spawnBounds");
    this.constantSpawnBoundsSphere = gd.scope.resolve("spawnBoundsSphere");
    this.constantInitialVelocity = gd.scope.resolve("initialVelocity");
    this.constantFrameRandom = gd.scope.resolve("frameRandom");
    this.constantDelta = gd.scope.resolve("delta");
    this.constantRate = gd.scope.resolve("rate");
    this.constantRateDiv = gd.scope.resolve("rateDiv");
    this.constantLifetime = gd.scope.resolve("lifetime");
    this.constantLightCube = gd.scope.resolve("lightCube[0]");
    this.constantGraphSampleSize = gd.scope.resolve("graphSampleSize");
    this.constantGraphNumSamples = gd.scope.resolve("graphNumSamples");
    this.constantInternalTex0 = gd.scope.resolve("internalTex0");
    this.constantInternalTex1 = gd.scope.resolve("internalTex1");
    this.constantInternalTex2 = gd.scope.resolve("internalTex2");
    this.constantEmitterMatrix = gd.scope.resolve("emitterMatrix");
    this.constantNumParticles = gd.scope.resolve("numParticles");
    this.constantNumParticlesPot = gd.scope.resolve("numParticlesPot");
    this.constantLocalVelocityDivMult = gd.scope.resolve("localVelocityDivMult");
    this.constantVelocityDivMult = gd.scope.resolve("velocityDivMult");
    this.constantRotSpeedDivMult = gd.scope.resolve("rotSpeedDivMult");
    this.constantSeed = gd.scope.resolve("seed");
    this.constantStartAngle = gd.scope.resolve("startAngle");
    this.constantStartAngle2 = gd.scope.resolve("startAngle2");
    this.constantOutBoundsMul = gd.scope.resolve("outBoundsMul");
    this.constantOutBoundsAdd = gd.scope.resolve("outBoundsAdd");
    this.constantInBoundsSize = gd.scope.resolve("inBoundsSize");
    this.constantInBoundsCenter = gd.scope.resolve("inBoundsCenter");
    this.constantMaxVel = gd.scope.resolve("maxVel");
    this.lightCube = new Float32Array(6 * 3);
    this.lightCubeDir = new Array(6);
    this.lightCubeDir[0] = new pc.Vec3(-1, 0, 0);
    this.lightCubeDir[1] = new pc.Vec3(1, 0, 0);
    this.lightCubeDir[2] = new pc.Vec3(0, -1, 0);
    this.lightCubeDir[3] = new pc.Vec3(0, 1, 0);
    this.lightCubeDir[4] = new pc.Vec3(0, 0, -1);
    this.lightCubeDir[5] = new pc.Vec3(0, 0, 1);
    this.animParams = new pc.Vec4;
    this.internalTex0 = null;
    this.internalTex1 = null;
    this.internalTex2 = null;
    this.internalTex3 = null;
    this.vbToSort = null;
    this.vbOld = null;
    this.particleDistance = null;
    this.camera = null;
    this.swapTex = false;
    this.useMesh = true;
    this.useCpu = false;
    this.pack8 = true;
    this.localBounds = new pc.BoundingBox;
    this.worldBoundsNoTrail = new pc.BoundingBox;
    this.worldBoundsTrail = [new pc.BoundingBox, new pc.BoundingBox];
    this.worldBounds = new pc.BoundingBox;
    this.worldBoundsSize = new pc.Vec3;
    this.prevWorldBoundsSize = new pc.Vec3;
    this.prevWorldBoundsCenter = new pc.Vec3;
    this.worldBoundsMul = new pc.Vec3;
    this.worldBoundsAdd = new pc.Vec3;
    this.timeToSwitchBounds = 0;
    this.shaderParticleUpdateRespawn = null;
    this.shaderParticleUpdateNoRespawn = null;
    this.shaderParticleUpdateOnStop = null;
    this.numParticleVerts = 0;
    this.numParticleIndices = 0;
    this.material = null;
    this.meshInstance = null;
    this.seed = 0;
    this.fixedTimeStep = 1.0 / 60;
    this.maxSubSteps = 10;
    this.simTime = 0;
    this.simTimeTotal = 0;
    this.beenReset = false;
    this._layer = null;
    this.rebuild();
  };
  function calcEndTime(emitter) {
    var interval = Math.max(emitter.rate, emitter.rate2) * emitter.numParticles + emitter.lifetime;
    return Date.now() + interval * 1000;
  }
  function subGraph(A, B) {
    var r = new Float32Array(A.length);
    for (var i = 0; i < A.length; i++) {
      r[i] = A[i] - B[i];
    }
    return r;
  }
  function maxUnsignedGraphValue(A, outUMax) {
    var i, j;
    var chans = outUMax.length;
    var values = A.length / chans;
    for (i = 0; i < values; i++) {
      for (j = 0; j < chans; j++) {
        var a = Math.abs(A[i * chans + j]);
        outUMax[j] = Math.max(outUMax[j], a);
      }
    }
  }
  function normalizeGraph(A, uMax) {
    var chans = uMax.length;
    var i, j;
    var values = A.length / chans;
    for (i = 0; i < values; i++) {
      for (j = 0; j < chans; j++) {
        A[i * chans + j] /= uMax[j];
        A[i * chans + j] *= 0.5;
        A[i * chans + j] += 0.5;
      }
    }
  }
  function divGraphFrom2Curves(curve1, curve2, outUMax) {
    var sub = subGraph(curve2, curve1);
    maxUnsignedGraphValue(sub, outUMax);
    normalizeGraph(sub, outUMax);
    return sub;
  }
  function mat4ToMat3(mat4, mat3) {
    mat3.data[0] = mat4.data[0];
    mat3.data[1] = mat4.data[1];
    mat3.data[2] = mat4.data[2];
    mat3.data[3] = mat4.data[4];
    mat3.data[4] = mat4.data[5];
    mat3.data[5] = mat4.data[6];
    mat3.data[6] = mat4.data[8];
    mat3.data[7] = mat4.data[9];
    mat3.data[8] = mat4.data[10];
  }
  ParticleEmitter.prototype = {onChangeCamera:function() {
    this.regenShader();
    this.resetMaterial();
  }, calculateBoundsMad:function() {
    this.worldBoundsMul.x = 1.0 / this.worldBoundsSize.x;
    this.worldBoundsMul.y = 1.0 / this.worldBoundsSize.y;
    this.worldBoundsMul.z = 1.0 / this.worldBoundsSize.z;
    this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).scale(-1);
    this.worldBoundsAdd.x += 0.5;
    this.worldBoundsAdd.y += 0.5;
    this.worldBoundsAdd.z += 0.5;
  }, calculateWorldBounds:function() {
    if (!this.node) {
      return;
    }
    var pos = this.node.getPosition();
    this.prevWorldBoundsSize.copy(this.worldBoundsSize);
    this.prevWorldBoundsCenter.copy(this.worldBounds.center);
    this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds, this.node.getWorldTransform());
    this.worldBoundsTrail[0].add(this.worldBoundsNoTrail);
    var now = this.simTimeTotal;
    if (now > this.timeToSwitchBounds) {
      var tmp = this.worldBoundsTrail[0];
      this.worldBoundsTrail[0] = this.worldBoundsTrail[1];
      this.worldBoundsTrail[1] = tmp;
      this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail);
      this.timeToSwitchBounds = now + this.lifetime;
    }
    this.worldBounds.copy(this.worldBoundsTrail[0]);
    this.worldBounds.add(this.worldBoundsTrail[1]);
    this.worldBoundsSize.copy(this.worldBounds.halfExtents).scale(2);
    this.meshInstance.mesh.aabb = this.worldBounds;
    this.meshInstance._aabbVer = 1 - this.meshInstance._aabbVer;
    if (this.pack8) {
      this.calculateBoundsMad();
    }
  }, calculateLocalBounds:function() {
    var minx = Number.MAX_VALUE;
    var miny = Number.MAX_VALUE;
    var minz = Number.MAX_VALUE;
    var maxx = -Number.MAX_VALUE;
    var maxy = -Number.MAX_VALUE;
    var maxz = -Number.MAX_VALUE;
    var maxScale = 0;
    var stepWeight = this.lifetime / this.precision;
    var vels = [this.qVelocity, this.qVelocity2, this.qLocalVelocity, this.qLocalVelocity2];
    var accumX = [0, 0, 0, 0];
    var accumY = [0, 0, 0, 0];
    var accumZ = [0, 0, 0, 0];
    var i, j;
    var index;
    var x, y, z;
    for (i = 0; i < this.precision + 1; i++) {
      index = Math.min(i, this.precision - 1);
      for (j = 0; j < 4; j++) {
        x = vels[j][index * 3] * stepWeight + accumX[j];
        y = vels[j][index * 3 + 1] * stepWeight + accumY[j];
        z = vels[j][index * 3 + 2] * stepWeight + accumZ[j];
        if (minx > x) {
          minx = x;
        }
        if (miny > y) {
          miny = y;
        }
        if (minz > z) {
          minz = z;
        }
        if (maxx < x) {
          maxx = x;
        }
        if (maxy < y) {
          maxy = y;
        }
        if (maxz < z) {
          maxz = z;
        }
        accumX[j] = x;
        accumY[j] = y;
        accumZ[j] = z;
      }
      maxScale = Math.max(maxScale, this.qScale[index]);
    }
    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {
      x = this.emitterExtents.x * 0.5;
      y = this.emitterExtents.y * 0.5;
      z = this.emitterExtents.z * 0.5;
      if (maxx < x) {
        maxx = x;
      }
      if (maxy < y) {
        maxy = y;
      }
      if (maxz < z) {
        maxz = z;
      }
      x = -x;
      y = -y;
      z = -z;
      if (minx > x) {
        minx = x;
      }
      if (miny > y) {
        miny = y;
      }
      if (minz > z) {
        minz = z;
      }
    } else {
      x = this.emitterRadius;
      y = this.emitterRadius;
      z = this.emitterRadius;
      if (maxx < x) {
        maxx = x;
      }
      if (maxy < y) {
        maxy = y;
      }
      if (maxz < z) {
        maxz = z;
      }
      x = -x;
      y = -y;
      z = -z;
      if (minx > x) {
        minx = x;
      }
      if (miny > y) {
        miny = y;
      }
      if (minz > z) {
        minz = z;
      }
    }
    bMin.x = minx - maxScale;
    bMin.y = miny - maxScale;
    bMin.z = minz - maxScale;
    bMax.x = maxx + maxScale;
    bMax.y = maxy + maxScale;
    bMax.z = maxz + maxScale;
    this.localBounds.setMinMax(bMin, bMax);
  }, rebuild:function() {
    var i, len;
    var precision = this.precision;
    var gd = this.graphicsDevice;
    if (this.colorMap === null) {
      this.colorMap = ParticleEmitter.DEFAULT_PARAM_TEXTURE;
    }
    this.spawnBounds = this.emitterShape === pc.EMITTERSHAPE_BOX ? this.emitterExtents : this.emitterRadius;
    this.useCpu = this.useCpu || this.sort > pc.PARTICLESORT_NONE || gd.maxVertexTextures <= 1 || gd.fragmentUniformsCount < 64 || gd.forceCpuParticles || !gd.extTextureFloat;
    this.vertexBuffer = undefined;
    this.pack8 = (this.pack8 || !gd.extTextureFloatRenderable) && !this.useCpu;
    particleTexHeight = this.useCpu || this.pack8 ? 4 : 2;
    this.useMesh = false;
    if (this.mesh) {
      var totalVertCount = this.numParticles * this.mesh.vertexBuffer.numVertices;
      if (totalVertCount > 65535) {
        console.warn("WARNING: particle system can't render mesh particles because numParticles * numVertices is more than 65k. Reverting to quad particles.");
      } else {
        this.useMesh = true;
      }
    }
    this.numParticlesPot = pc.math.nextPowerOfTwo(this.numParticles);
    this.rebuildGraphs();
    this.calculateLocalBounds();
    if (this.node) {
      this.worldBounds.setFromTransformedAabb(this.localBounds, this.node.getWorldTransform());
      this.worldBoundsTrail[0].copy(this.worldBounds);
      this.worldBoundsTrail[1].copy(this.worldBounds);
      this.worldBoundsSize.copy(this.worldBounds.halfExtents).scale(2);
      this.prevWorldBoundsSize.copy(this.worldBoundsSize);
      this.prevWorldBoundsCenter.copy(this.worldBounds.center);
      if (this.pack8) {
        this.calculateBoundsMad();
      }
    }
    this.vbToSort = new Array(this.numParticles);
    this.particleDistance = new Float32Array(this.numParticles);
    this.frameRandom.x = Math.random();
    this.frameRandom.y = Math.random();
    this.frameRandom.z = Math.random();
    this.particleTex = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);
    var emitterPos = this.node === null || this.localSpace ? pc.Vec3.ZERO : this.node.getPosition();
    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {
      if (this.node === null) {
        spawnMatrix.setTRS(pc.Vec3.ZERO, pc.Quat.IDENTITY, this.spawnBounds);
      } else {
        spawnMatrix.setTRS(pc.Vec3.ZERO, this.node.getRotation(), tmpVec3.copy(this.spawnBounds).mul(this.node.localScale));
      }
    }
    for (i = 0; i < this.numParticles; i++) {
      this.calcSpawnPosition(emitterPos, i);
      if (this.useCpu) {
        this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = 1;
      }
    }
    this.particleTexStart = new Float32Array(this.numParticlesPot * particleTexHeight * particleTexChannels);
    for (i = 0; i < this.particleTexStart.length; i++) {
      this.particleTexStart[i] = this.particleTex[i];
    }
    if (!this.useCpu) {
      if (this.pack8) {
        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);
        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);
        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart, pc.PIXELFORMAT_R8_G8_B8_A8, 1, false);
      } else {
        this.particleTexIN = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);
        this.particleTexOUT = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTex);
        this.particleTexStart = _createTexture(gd, this.numParticlesPot, particleTexHeight, this.particleTexStart);
      }
      this.rtParticleTexIN = new pc.RenderTarget(gd, this.particleTexIN, {depth:false});
      this.rtParticleTexOUT = new pc.RenderTarget(gd, this.particleTexOUT, {depth:false});
      this.swapTex = false;
    }
    var chunks = pc.shaderChunks;
    var shaderCodeStart = chunks.particleUpdaterInitPS + (this.pack8 ? chunks.particleInputRgba8PS + chunks.particleOutputRgba8PS : chunks.particleInputFloatPS + chunks.particleOutputFloatPS) + (this.emitterShape === pc.EMITTERSHAPE_BOX ? chunks.particleUpdaterAABBPS : chunks.particleUpdaterSpherePS) + chunks.particleUpdaterStartPS;
    var shaderCodeRespawn = shaderCodeStart + chunks.particleUpdaterRespawnPS + chunks.particleUpdaterEndPS;
    var shaderCodeNoRespawn = shaderCodeStart + chunks.particleUpdaterNoRespawnPS + chunks.particleUpdaterEndPS;
    var shaderCodeOnStop = shaderCodeStart + chunks.particleUpdaterOnStopPS + chunks.particleUpdaterEndPS;
    this.shaderParticleUpdateRespawn = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeRespawn, "fsQuad0" + this.emitterShape + "" + this.pack8);
    this.shaderParticleUpdateNoRespawn = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeNoRespawn, "fsQuad1" + this.emitterShape + "" + this.pack8);
    this.shaderParticleUpdateOnStop = chunks.createShaderFromCode(gd, chunks.fullscreenQuadVS, shaderCodeOnStop, "fsQuad2" + this.emitterShape + "" + this.pack8);
    this.numParticleVerts = this.useMesh ? this.mesh.vertexBuffer.numVertices : 4;
    this.numParticleIndices = this.useMesh ? this.mesh.indexBuffer[0].numIndices : 6;
    this._allocate(this.numParticles);
    var mesh = new pc.Mesh;
    mesh.vertexBuffer = this.vertexBuffer;
    mesh.indexBuffer[0] = this.indexBuffer;
    mesh.primitive[0].type = pc.PRIMITIVE_TRIANGLES;
    mesh.primitive[0].base = 0;
    mesh.primitive[0].count = this.numParticles * this.numParticleIndices;
    mesh.primitive[0].indexed = true;
    this.material = new pc.Material;
    this.material.cullMode = pc.CULLFACE_NONE;
    this.material.alphaWrite = false;
    this.material.blend = true;
    this.material.blendType = this.blendType;
    this.material.depthWrite = this.depthWrite;
    this.material.emitter = this;
    this.regenShader();
    this.resetMaterial();
    this.meshInstance = new pc.MeshInstance(this.node, mesh, this.material);
    this.meshInstance.pick = false;
    this.meshInstance.updateKey();
    this.meshInstance.cull = true;
    this.meshInstance._noDepthDrawGl1 = true;
    this.meshInstance.aabb = this.worldBounds;
    this.meshInstance._updateAabb = false;
    this._initializeTextures();
    this.addTime(0);
    if (this.preWarm) {
      this.prewarm(this.lifetime);
    }
    this.resetTime();
  }, _isAnimated:function() {
    return this.animNumFrames >= 1 && (this.animTilesX > 1 || this.animTilesY > 1) && (this.colorMap && this.colorMap !== ParticleEmitter.DEFAULT_PARAM_TEXTURE || this.normalMap);
  }, calcSpawnPosition:function(emitterPos, i) {
    var rX = Math.random();
    var rY = Math.random();
    var rZ = Math.random();
    var rW = Math.random();
    if (this.useCpu) {
      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels] = rX;
      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * 2 * particleTexChannels] = rY;
      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * 2 * particleTexChannels] = rZ;
    }
    randomPos.data[0] = rX - 0.5;
    randomPos.data[1] = rY - 0.5;
    randomPos.data[2] = rZ - 0.5;
    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {
      randomPosTformed.copy(emitterPos).add(spawnMatrix.transformPoint(randomPos));
    } else {
      randomPos.normalize();
      randomPosTformed.copy(emitterPos).add(randomPos.scale(rW * this.spawnBounds));
    }
    var particleRate, startSpawnTime;
    if (this.pack8) {
      var packX = (randomPosTformed.data[0] - this.worldBounds.center.data[0]) / this.worldBoundsSize.data[0] + 0.5;
      var packY = (randomPosTformed.data[1] - this.worldBounds.center.data[1]) / this.worldBoundsSize.data[1] + 0.5;
      var packZ = (randomPosTformed.data[2] - this.worldBounds.center.data[2]) / this.worldBoundsSize.data[2] + 0.5;
      var packA = pc.math.lerp(this.startAngle * pc.math.DEG_TO_RAD, this.startAngle2 * pc.math.DEG_TO_RAD, rX);
      packA = packA % (Math.PI * 2) / (Math.PI * 2);
      var rg0 = encodeFloatRG(packX);
      this.particleTex[i * particleTexChannels] = rg0[0];
      this.particleTex[i * particleTexChannels + 1] = rg0[1];
      var ba0 = encodeFloatRG(packY);
      this.particleTex[i * particleTexChannels + 2] = ba0[0];
      this.particleTex[i * particleTexChannels + 3] = ba0[1];
      var rg1 = encodeFloatRG(packZ);
      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * particleTexChannels] = rg1[0];
      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * particleTexChannels] = rg1[1];
      var ba1 = encodeFloatRG(packA);
      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * particleTexChannels] = ba1[0];
      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = ba1[1];
      var a2 = 1.0;
      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels * 2] = a2;
      particleRate = pc.math.lerp(this.rate, this.rate2, rX);
      startSpawnTime = -particleRate * i;
      var maxNegLife = Math.max(this.lifetime, (this.numParticles - 1.0) * Math.max(this.rate, this.rate2));
      var maxPosLife = this.lifetime + 1.0;
      startSpawnTime = (startSpawnTime + maxNegLife) / (maxNegLife + maxPosLife);
      var rgba3 = encodeFloatRGBA(startSpawnTime);
      this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * particleTexChannels * 3] = rgba3[0];
      this.particleTex[i * particleTexChannels + 1 + this.numParticlesPot * particleTexChannels * 3] = rgba3[1];
      this.particleTex[i * particleTexChannels + 2 + this.numParticlesPot * particleTexChannels * 3] = rgba3[2];
      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels * 3] = rgba3[3];
    } else {
      this.particleTex[i * particleTexChannels] = randomPosTformed.data[0];
      this.particleTex[i * particleTexChannels + 1] = randomPosTformed.data[1];
      this.particleTex[i * particleTexChannels + 2] = randomPosTformed.data[2];
      this.particleTex[i * particleTexChannels + 3] = pc.math.lerp(this.startAngle * pc.math.DEG_TO_RAD, this.startAngle2 * pc.math.DEG_TO_RAD, rX);
      particleRate = pc.math.lerp(this.rate, this.rate2, rX);
      startSpawnTime = -particleRate * i;
      this.particleTex[i * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = startSpawnTime;
    }
  }, rebuildGraphs:function() {
    var precision = this.precision;
    var gd = this.graphicsDevice;
    var i;
    this.qLocalVelocity = this.localVelocityGraph.quantize(precision);
    this.qVelocity = this.velocityGraph.quantize(precision);
    this.qColor = this.colorGraph.quantize(precision);
    this.qRotSpeed = this.rotationSpeedGraph.quantize(precision);
    this.qScale = this.scaleGraph.quantize(precision);
    this.qAlpha = this.alphaGraph.quantize(precision);
    this.qLocalVelocity2 = this.localVelocityGraph2.quantize(precision);
    this.qVelocity2 = this.velocityGraph2.quantize(precision);
    this.qColor2 = this.colorGraph2.quantize(precision);
    this.qRotSpeed2 = this.rotationSpeedGraph2.quantize(precision);
    this.qScale2 = this.scaleGraph2.quantize(precision);
    this.qAlpha2 = this.alphaGraph2.quantize(precision);
    for (i = 0; i < precision; i++) {
      this.qRotSpeed[i] *= pc.math.DEG_TO_RAD;
      this.qRotSpeed2[i] *= pc.math.DEG_TO_RAD;
    }
    this.localVelocityUMax = new pc.Vec3(0, 0, 0);
    this.velocityUMax = new pc.Vec3(0, 0, 0);
    this.colorUMax = new pc.Vec3(0, 0, 0);
    this.rotSpeedUMax = [0];
    this.scaleUMax = [0];
    this.alphaUMax = [0];
    this.qLocalVelocityDiv = divGraphFrom2Curves(this.qLocalVelocity, this.qLocalVelocity2, this.localVelocityUMax.data);
    this.qVelocityDiv = divGraphFrom2Curves(this.qVelocity, this.qVelocity2, this.velocityUMax.data);
    this.qColorDiv = divGraphFrom2Curves(this.qColor, this.qColor2, this.colorUMax.data);
    this.qRotSpeedDiv = divGraphFrom2Curves(this.qRotSpeed, this.qRotSpeed2, this.rotSpeedUMax);
    this.qScaleDiv = divGraphFrom2Curves(this.qScale, this.qScale2, this.scaleUMax);
    this.qAlphaDiv = divGraphFrom2Curves(this.qAlpha, this.qAlpha2, this.alphaUMax);
    if (this.pack8) {
      var umax = [0, 0, 0];
      maxUnsignedGraphValue(this.qVelocity, umax);
      var umax2 = [0, 0, 0];
      maxUnsignedGraphValue(this.qVelocity2, umax2);
      var lumax = [0, 0, 0];
      maxUnsignedGraphValue(this.qLocalVelocity, lumax);
      var lumax2 = [0, 0, 0];
      maxUnsignedGraphValue(this.qLocalVelocity2, lumax2);
      var maxVel = Math.max(umax[0], umax2[0]);
      maxVel = Math.max(maxVel, umax[1]);
      maxVel = Math.max(maxVel, umax2[1]);
      maxVel = Math.max(maxVel, umax[2]);
      maxVel = Math.max(maxVel, umax2[2]);
      var lmaxVel = Math.max(lumax[0], lumax2[0]);
      lmaxVel = Math.max(lmaxVel, lumax[1]);
      lmaxVel = Math.max(lmaxVel, lumax2[1]);
      lmaxVel = Math.max(lmaxVel, lumax[2]);
      lmaxVel = Math.max(lmaxVel, lumax2[2]);
      this.maxVel = maxVel + lmaxVel;
    }
    if (!this.useCpu) {
      this.internalTex0 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qLocalVelocity, this.qLocalVelocityDiv));
      this.internalTex1 = _createTexture(gd, precision, 1, packTextureXYZ_NXYZ(this.qVelocity, this.qVelocityDiv));
      this.internalTex2 = _createTexture(gd, precision, 1, packTexture5Floats(this.qRotSpeed, this.qScale, this.qScaleDiv, this.qRotSpeedDiv, this.qAlphaDiv));
    }
    this.internalTex3 = _createTexture(gd, precision, 1, packTextureRGBA(this.qColor, this.qAlpha), pc.PIXELFORMAT_R8_G8_B8_A8, 1.0, true);
  }, _initializeTextures:function() {
    if (this.colorMap) {
      this.material.setParameter("colorMap", this.colorMap);
      if (this.lighting && this.normalMap) {
        this.material.setParameter("normalMap", this.normalMap);
      }
    }
  }, regenShader:function() {
    var programLib = this.graphicsDevice.getProgramLibrary();
    var hasNormal = this.normalMap !== null;
    this.normalOption = 0;
    if (this.lighting) {
      this.normalOption = hasNormal ? 2 : 1;
    }
    this.material.updateShader = function() {
      if (this.emitter.scene) {
        if (this.emitter.camera != this.emitter.scene._activeCamera) {
          this.emitter.camera = this.emitter.scene._activeCamera;
          this.emitter.onChangeCamera();
        }
      }
      var shader = programLib.getProgram("particle", {useCpu:this.emitter.useCpu, normal:this.emitter.normalOption, halflambert:this.emitter.halfLambert, stretch:this.emitter.stretch, alignToMotion:this.emitter.alignToMotion, soft:this.emitter.depthSoftening, mesh:this.emitter.useMesh, gamma:this.emitter.scene ? this.emitter.scene.gammaCorrection : 0, toneMap:this.emitter.scene ? this.emitter.scene.toneMapping : 0, fog:this.emitter.scene && !this.emitter.noFog ? this.emitter.scene.fog : "none", wrap:this.emitter.wrap && 
      this.emitter.wrapBounds, localSpace:this.emitter.localSpace, blend:this.blendType, animTex:this.emitter._isAnimated(), animTexLoop:this.emitter.animLoop, pack8:this.emitter.pack8});
      this.setShader(shader);
    };
    this.material.updateShader();
  }, resetMaterial:function() {
    var material = this.material;
    var gd = this.graphicsDevice;
    material.setParameter("stretch", this.stretch);
    if (this._isAnimated()) {
      material.setParameter("animTexParams", this.animParams.data);
    }
    material.setParameter("colorMult", this.intensity);
    if (!this.useCpu) {
      material.setParameter("internalTex0", this.internalTex0);
      material.setParameter("internalTex1", this.internalTex1);
      material.setParameter("internalTex2", this.internalTex2);
    }
    material.setParameter("internalTex3", this.internalTex3);
    material.setParameter("numParticles", this.numParticles);
    material.setParameter("numParticlesPot", this.numParticlesPot);
    material.setParameter("lifetime", this.lifetime);
    material.setParameter("rate", this.rate);
    material.setParameter("rateDiv", this.rate2 - this.rate);
    material.setParameter("seed", this.seed);
    material.setParameter("scaleDivMult", this.scaleUMax[0]);
    material.setParameter("alphaDivMult", this.alphaUMax[0]);
    material.setParameter("graphNumSamples", this.precision);
    material.setParameter("graphSampleSize", 1.0 / this.precision);
    material.setParameter("emitterScale", pc.Vec3.ONE.data);
    if (this.pack8) {
      material.setParameter("inBoundsSize", this.worldBoundsSize.data);
      material.setParameter("inBoundsCenter", this.worldBounds.center.data);
      material.setParameter("maxVel", this.maxVel);
    }
    if (this.wrap && this.wrapBounds) {
      material.setParameter("wrapBounds", this.wrapBounds.data);
    }
    if (this.colorMap) {
      material.setParameter("colorMap", this.colorMap);
    }
    if (this.lighting) {
      if (this.normalMap) {
        material.setParameter("normalMap", this.normalMap);
      }
    }
    if (this.depthSoftening > 0) {
      material.setParameter("softening", 1.0 / (this.depthSoftening * this.depthSoftening * 100));
    }
    if (this.stretch > 0.0) {
      material.cull = pc.CULLFACE_NONE;
    }
  }, _allocate:function(numParticles) {
    var psysVertCount = numParticles * this.numParticleVerts;
    var psysIndexCount = numParticles * this.numParticleIndices;
    var elements, particleFormat;
    var i;
    if (this.vertexBuffer === undefined || this.vertexBuffer.getNumVertices() !== psysVertCount) {
      if (!this.useCpu) {
        elements = [{semantic:pc.SEMANTIC_ATTR0, components:4, type:pc.TYPE_FLOAT32}];
        particleFormat = new pc.VertexFormat(this.graphicsDevice, elements);
        this.vertexBuffer = new pc.VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, pc.BUFFER_DYNAMIC);
        this.indexBuffer = new pc.IndexBuffer(this.graphicsDevice, pc.INDEXFORMAT_UINT16, psysIndexCount);
      } else {
        elements = [{semantic:pc.SEMANTIC_ATTR0, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR1, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR2, components:4, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_ATTR3, components:2, type:pc.TYPE_FLOAT32}];
        particleFormat = new pc.VertexFormat(this.graphicsDevice, elements);
        this.vertexBuffer = new pc.VertexBuffer(this.graphicsDevice, particleFormat, psysVertCount, pc.BUFFER_DYNAMIC);
        this.indexBuffer = new pc.IndexBuffer(this.graphicsDevice, pc.INDEXFORMAT_UINT16, psysIndexCount);
      }
      var data = new Float32Array(this.vertexBuffer.lock());
      var meshData, stride;
      if (this.useMesh) {
        meshData = new Float32Array(this.mesh.vertexBuffer.lock());
        stride = meshData.length / this.mesh.vertexBuffer.numVertices;
      }
      var id, rnd;
      for (i = 0; i < psysVertCount; i++) {
        id = Math.floor(i / this.numParticleVerts);
        if (this.useCpu) {
          if (i % this.numParticleVerts === 0) {
            rnd = this.particleTex[i * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels];
          }
        }
        if (!this.useMesh) {
          var vertID = i % 4;
          data[i * 4] = particleVerts[vertID][0];
          data[i * 4 + 1] = particleVerts[vertID][1];
          data[i * 4 + 2] = 0;
        } else {
          var vert = i % this.numParticleVerts;
          data[i * 4] = meshData[vert * stride];
          data[i * 4 + 1] = meshData[vert * stride + 1];
          data[i * 4 + 2] = meshData[vert * stride + 2];
        }
        data[i * 4 + 3] = id;
      }
      if (this.useCpu) {
        this.vbCPU = new Float32Array(data);
        this.vbOld = new Float32Array(this.vbCPU.length);
      }
      this.vertexBuffer.unlock();
      if (this.useMesh) {
        this.mesh.vertexBuffer.unlock();
      }
      var dst = 0;
      var indices = new Uint16Array(this.indexBuffer.lock());
      if (this.useMesh) {
        meshData = new Uint16Array(this.mesh.indexBuffer[0].lock());
      }
      for (i = 0; i < numParticles; i++) {
        if (!this.useMesh) {
          var baseIndex = i * 4;
          indices[dst++] = baseIndex;
          indices[dst++] = baseIndex + 1;
          indices[dst++] = baseIndex + 2;
          indices[dst++] = baseIndex;
          indices[dst++] = baseIndex + 2;
          indices[dst++] = baseIndex + 3;
        } else {
          for (var j = 0; j < this.numParticleIndices; j++) {
            indices[i * this.numParticleIndices + j] = meshData[j] + i * this.numParticleVerts;
          }
        }
      }
      this.indexBuffer.unlock();
      if (this.useMesh) {
        this.mesh.indexBuffer[0].unlock();
      }
    }
  }, reset:function() {
    this.beenReset = true;
    this.seed = Math.random();
    this.material.setParameter("seed", this.seed);
    if (this.useCpu) {
      for (var i = 0; i < this.particleTexStart.length; i++) {
        this.particleTex[i] = this.particleTexStart[i];
      }
    } else {
      this._initializeTextures();
    }
    this.resetTime();
    var origLoop = this.loop;
    this.loop = true;
    this.addTime(0);
    this.loop = origLoop;
    if (this.preWarm) {
      this.prewarm(this.lifetime);
    }
  }, prewarm:function(time) {
    var lifetimeFraction = time / this.lifetime;
    var iterations = Math.min(Math.floor(lifetimeFraction * this.precision), this.precision);
    var stepDelta = time / iterations;
    for (var i = 0; i < iterations; i++) {
      this.addTime(stepDelta);
    }
  }, resetTime:function() {
    this.endTime = calcEndTime(this);
  }, finishFrame:function() {
    if (this.useCpu) {
      this.vertexBuffer.unlock();
    }
  }, addTime:function(delta, isOnStop) {
    var a, b, c, i, j;
    var device = this.graphicsDevice;
    this.simTimeTotal += delta;
    this.calculateWorldBounds();
    if (this._isAnimated()) {
      var params = this.animParams;
      params.x = 1.0 / this.animTilesX;
      params.y = 1.0 / this.animTilesY;
      params.z = this.animNumFrames * this.animSpeed;
      params.w = this.animNumFrames - 1;
    }
    if (this.scene) {
      if (this.camera != this.scene._activeCamera) {
        this.camera = this.scene._activeCamera;
        this.onChangeCamera();
      }
    }
    if (this.emitterShape === pc.EMITTERSHAPE_BOX) {
      if (this.meshInstance.node === null) {
        spawnMatrix.setTRS(pc.Vec3.ZERO, pc.Quat.IDENTITY, this.emitterExtents);
      } else {
        spawnMatrix.setTRS(pc.Vec3.ZERO, this.meshInstance.node.getRotation(), tmpVec3.copy(this.emitterExtents).mul(this.meshInstance.node.localScale));
      }
    }
    var emitterPos;
    var emitterScale = this.meshInstance.node === null ? pc.Vec3.ONE.data : this.meshInstance.node.localScale.data;
    this.material.setParameter("emitterScale", emitterScale);
    if (this.localSpace && this.meshInstance.node) {
      this.material.setParameter("emitterPos", this.meshInstance.node.getPosition().data);
    }
    if (!this.useCpu) {
      device.setBlending(false);
      device.setColorWrite(true, true, true, true);
      device.setCullMode(pc.CULLFACE_NONE);
      device.setDepthTest(false);
      device.setDepthWrite(false);
      this.frameRandom.x = Math.random();
      this.frameRandom.y = Math.random();
      this.frameRandom.z = Math.random();
      this.constantGraphSampleSize.setValue(1.0 / this.precision);
      this.constantGraphNumSamples.setValue(this.precision);
      this.constantNumParticles.setValue(this.numParticles);
      this.constantNumParticlesPot.setValue(this.numParticlesPot);
      this.constantInternalTex0.setValue(this.internalTex0);
      this.constantInternalTex1.setValue(this.internalTex1);
      this.constantInternalTex2.setValue(this.internalTex2);
      if (this.pack8) {
        this.constantOutBoundsMul.setValue(this.worldBoundsMul.data);
        this.constantOutBoundsAdd.setValue(this.worldBoundsAdd.data);
        this.constantInBoundsSize.setValue(this.prevWorldBoundsSize.data);
        this.constantInBoundsCenter.setValue(this.prevWorldBoundsCenter.data);
        var maxVel = this.maxVel * Math.max(Math.max(emitterScale[0], emitterScale[1]), emitterScale[2]);
        maxVel = Math.max(maxVel, 1);
        this.constantMaxVel.setValue(maxVel);
      }
      emitterPos = this.meshInstance.node === null || this.localSpace ? pc.Vec3.ZERO.data : this.meshInstance.node.getPosition().data;
      var emitterMatrix = this.meshInstance.node === null ? pc.Mat4.IDENTITY : this.meshInstance.node.getWorldTransform();
      if (this.emitterShape === pc.EMITTERSHAPE_BOX) {
        mat4ToMat3(spawnMatrix, spawnMatrix3);
        this.constantSpawnBounds.setValue(spawnMatrix3.data);
      } else {
        this.constantSpawnBoundsSphere.setValue(this.emitterRadius);
      }
      this.constantInitialVelocity.setValue(this.initialVelocity);
      mat4ToMat3(emitterMatrix, emitterMatrix3);
      this.constantEmitterPos.setValue(emitterPos);
      this.constantFrameRandom.setValue(this.frameRandom.data);
      this.constantDelta.setValue(delta);
      this.constantRate.setValue(this.rate);
      this.constantRateDiv.setValue(this.rate2 - this.rate);
      this.constantStartAngle.setValue(this.startAngle * pc.math.DEG_TO_RAD);
      this.constantStartAngle2.setValue(this.startAngle2 * pc.math.DEG_TO_RAD);
      this.constantSeed.setValue(this.seed);
      this.constantLifetime.setValue(this.lifetime);
      this.constantEmitterScale.setValue(emitterScale);
      this.constantEmitterMatrix.setValue(emitterMatrix3.data);
      this.constantLocalVelocityDivMult.setValue(this.localVelocityUMax.data);
      this.constantVelocityDivMult.setValue(this.velocityUMax.data);
      this.constantRotSpeedDivMult.setValue(this.rotSpeedUMax[0]);
      var texIN = this.swapTex ? this.particleTexOUT : this.particleTexIN;
      texIN = this.beenReset ? this.particleTexStart : texIN;
      var texOUT = this.swapTex ? this.particleTexIN : this.particleTexOUT;
      this.constantParticleTexIN.setValue(texIN);
      if (!isOnStop) {
        pc.drawQuadWithShader(device, this.swapTex ? this.rtParticleTexIN : this.rtParticleTexOUT, this.loop ? this.shaderParticleUpdateRespawn : this.shaderParticleUpdateNoRespawn);
      } else {
        pc.drawQuadWithShader(device, this.swapTex ? this.rtParticleTexIN : this.rtParticleTexOUT, this.shaderParticleUpdateOnStop);
      }
      this.constantParticleTexOUT.setValue(texOUT);
      this.material.setParameter("particleTexOUT", texIN);
      this.material.setParameter("particleTexIN", texOUT);
      this.beenReset = false;
      this.swapTex = !this.swapTex;
      device.setDepthTest(true);
      device.setDepthWrite(true);
    } else {
      var data = new Float32Array(this.vertexBuffer.lock());
      if (this.meshInstance.node) {
        var fullMat = this.meshInstance.node.worldTransform;
        for (j = 0; j < 12; j++) {
          rotMat.data[j] = fullMat.data[j];
        }
        nonUniformScale = this.meshInstance.node.localScale;
        uniformScale = Math.max(Math.max(nonUniformScale.x, nonUniformScale.y), nonUniformScale.z);
      }
      emitterPos = this.meshInstance.node === null || this.localSpace ? pc.Vec3.ZERO : this.meshInstance.node.getPosition();
      var posCam = this.camera ? this.camera._node.getPosition() : pc.Vec3.ZERO;
      var vertSize = 14;
      var cf, cc;
      var rotSpeed, rotSpeed2, scale2, alpha, alpha2;
      var precision1 = this.precision - 1;
      for (i = 0; i < this.numParticles; i++) {
        var id = Math.floor(this.vbCPU[i * this.numParticleVerts * 4 + 3]);
        var rndFactor = this.particleTex[id * particleTexChannels + 0 + this.numParticlesPot * 2 * particleTexChannels];
        rndFactor3Vec.data[0] = rndFactor;
        rndFactor3Vec.data[1] = this.particleTex[id * particleTexChannels + 1 + this.numParticlesPot * 2 * particleTexChannels];
        rndFactor3Vec.data[2] = this.particleTex[id * particleTexChannels + 2 + this.numParticlesPot * 2 * particleTexChannels];
        var particleRate = this.rate + (this.rate2 - this.rate) * rndFactor;
        var particleLifetime = this.lifetime;
        var startSpawnTime = -particleRate * id;
        var life = this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] + delta;
        var nlife = saturate(life / particleLifetime);
        var scale = 0;
        var alphaDiv = 0;
        var angle = 0;
        var len;
        var interpolation;
        var particleEnabled = life > 0.0 && life < particleLifetime;
        if (particleEnabled) {
          c = nlife * precision1;
          cf = Math.floor(c);
          cc = Math.ceil(c);
          c = c % 1;
          a = this.qRotSpeed[cf];
          b = this.qRotSpeed[cc];
          rotSpeed = a + (b - a) * c;
          a = this.qRotSpeed2[cf];
          b = this.qRotSpeed2[cc];
          rotSpeed2 = a + (b - a) * c;
          a = this.qScale[cf];
          b = this.qScale[cc];
          scale = a + (b - a) * c;
          a = this.qScale2[cf];
          b = this.qScale2[cc];
          scale2 = a + (b - a) * c;
          a = this.qAlpha[cf];
          b = this.qAlpha[cc];
          alpha = a + (b - a) * c;
          a = this.qAlpha2[cf];
          b = this.qAlpha2[cc];
          alpha2 = a + (b - a) * c;
          cf *= 3;
          cc *= 3;
          a = this.qLocalVelocity[cf];
          b = this.qLocalVelocity[cc];
          localVelocityVec.data[0] = a + (b - a) * c;
          a = this.qLocalVelocity[cf + 1];
          b = this.qLocalVelocity[cc + 1];
          localVelocityVec.data[1] = a + (b - a) * c;
          a = this.qLocalVelocity[cf + 2];
          b = this.qLocalVelocity[cc + 2];
          localVelocityVec.data[2] = a + (b - a) * c;
          a = this.qLocalVelocity2[cf];
          b = this.qLocalVelocity2[cc];
          localVelocityVec2.data[0] = a + (b - a) * c;
          a = this.qLocalVelocity2[cf + 1];
          b = this.qLocalVelocity2[cc + 1];
          localVelocityVec2.data[1] = a + (b - a) * c;
          a = this.qLocalVelocity2[cf + 2];
          b = this.qLocalVelocity2[cc + 2];
          localVelocityVec2.data[2] = a + (b - a) * c;
          a = this.qVelocity[cf];
          b = this.qVelocity[cc];
          velocityVec.data[0] = a + (b - a) * c;
          a = this.qVelocity[cf + 1];
          b = this.qVelocity[cc + 1];
          velocityVec.data[1] = a + (b - a) * c;
          a = this.qVelocity[cf + 2];
          b = this.qVelocity[cc + 2];
          velocityVec.data[2] = a + (b - a) * c;
          a = this.qVelocity2[cf];
          b = this.qVelocity2[cc];
          velocityVec2.data[0] = a + (b - a) * c;
          a = this.qVelocity2[cf + 1];
          b = this.qVelocity2[cc + 1];
          velocityVec2.data[1] = a + (b - a) * c;
          a = this.qVelocity2[cf + 2];
          b = this.qVelocity2[cc + 2];
          velocityVec2.data[2] = a + (b - a) * c;
          localVelocityVec.data[0] = localVelocityVec.data[0] + (localVelocityVec2.data[0] - localVelocityVec.data[0]) * rndFactor3Vec.data[0];
          localVelocityVec.data[1] = localVelocityVec.data[1] + (localVelocityVec2.data[1] - localVelocityVec.data[1]) * rndFactor3Vec.data[1];
          localVelocityVec.data[2] = localVelocityVec.data[2] + (localVelocityVec2.data[2] - localVelocityVec.data[2]) * rndFactor3Vec.data[2];
          if (this.initialVelocity > 0) {
            if (this.emitterShape === pc.EMITTERSHAPE_SPHERE) {
              randomPos.copy(rndFactor3Vec).scale(2).sub(pc.Vec3.ONE).normalize();
              localVelocityVec.add(randomPos.scale(this.initialVelocity));
            } else {
              localVelocityVec.add(pc.Vec3.FORWARD.scale(this.initialVelocity));
            }
          }
          velocityVec.data[0] = velocityVec.data[0] + (velocityVec2.data[0] - velocityVec.data[0]) * rndFactor3Vec.data[0];
          velocityVec.data[1] = velocityVec.data[1] + (velocityVec2.data[1] - velocityVec.data[1]) * rndFactor3Vec.data[1];
          velocityVec.data[2] = velocityVec.data[2] + (velocityVec2.data[2] - velocityVec.data[2]) * rndFactor3Vec.data[2];
          rotSpeed = rotSpeed + (rotSpeed2 - rotSpeed) * rndFactor3Vec.data[1];
          scale = (scale + (scale2 - scale) * (rndFactor * 10000.0 % 1.0)) * uniformScale;
          alphaDiv = (alpha2 - alpha) * (rndFactor * 1000.0 % 1.0);
          if (this.meshInstance.node) {
            rotMat.transformPoint(localVelocityVec, localVelocityVec);
          }
          localVelocityVec.add(velocityVec.mul(nonUniformScale));
          moveDirVec.copy(localVelocityVec);
          particlePosPrev.data[0] = this.particleTex[id * particleTexChannels];
          particlePosPrev.data[1] = this.particleTex[id * particleTexChannels + 1];
          particlePosPrev.data[2] = this.particleTex[id * particleTexChannels + 2];
          particlePos.copy(particlePosPrev).add(localVelocityVec.scale(delta));
          particleFinalPos.copy(particlePos);
          this.particleTex[id * particleTexChannels] = particleFinalPos.data[0];
          this.particleTex[id * particleTexChannels + 1] = particleFinalPos.data[1];
          this.particleTex[id * particleTexChannels + 2] = particleFinalPos.data[2];
          this.particleTex[id * particleTexChannels + 3] += rotSpeed * delta;
          if (this.wrap && this.wrapBounds) {
            particleFinalPos.sub(emitterPos);
            particleFinalPos.data[0] = glMod(particleFinalPos.data[0], this.wrapBounds.data[0]) - this.wrapBounds.data[0] * 0.5;
            particleFinalPos.data[1] = glMod(particleFinalPos.data[1], this.wrapBounds.data[1]) - this.wrapBounds.data[1] * 0.5;
            particleFinalPos.data[2] = glMod(particleFinalPos.data[2], this.wrapBounds.data[2]) - this.wrapBounds.data[2] * 0.5;
            particleFinalPos.add(emitterPos);
          }
          if (this.sort > 0) {
            if (this.sort === 1) {
              tmpVec3.copy(particleFinalPos).sub(posCam);
              this.particleDistance[id] = -(tmpVec3.data[0] * tmpVec3.data[0] + tmpVec3.data[1] * tmpVec3.data[1] + tmpVec3.data[2] * tmpVec3.data[2]);
            } else {
              if (this.sort === 2) {
                this.particleDistance[id] = life;
              } else {
                if (this.sort === 3) {
                  this.particleDistance[id] = -life;
                }
              }
            }
          }
        } else {
          this.calcSpawnPosition(emitterPos, id);
        }
        if (isOnStop) {
          if (life < 0) {
            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = -1;
          }
        } else {
          if (life >= particleLifetime) {
            life -= Math.max(particleLifetime, (this.numParticles - 1) * particleRate);
            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = this.loop ? 1 : -1;
          }
          if (life < 0 && this.loop) {
            this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] = 1;
          }
        }
        if (this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * 2 * particleTexChannels] < 0) {
          particleEnabled = false;
        }
        this.particleTex[id * particleTexChannels + 3 + this.numParticlesPot * particleTexChannels] = life;
        for (var v = 0; v < this.numParticleVerts; v++) {
          var quadX = this.vbCPU[i * this.numParticleVerts * 4 + v * 4];
          var quadY = this.vbCPU[i * this.numParticleVerts * 4 + v * 4 + 1];
          var quadZ = this.vbCPU[i * this.numParticleVerts * 4 + v * 4 + 2];
          if (!particleEnabled) {
            quadX = quadY = quadZ = 0;
          }
          var w = i * this.numParticleVerts * vertSize + v * vertSize;
          data[w] = particleFinalPos.data[0];
          data[w + 1] = particleFinalPos.data[1];
          data[w + 2] = particleFinalPos.data[2];
          data[w + 3] = nlife;
          data[w + 4] = this.alignToMotion ? angle : this.particleTex[id * particleTexChannels + 3];
          data[w + 5] = scale;
          data[w + 6] = alphaDiv;
          data[w + 7] = moveDirVec.data[0];
          data[w + 8] = quadX;
          data[w + 9] = quadY;
          data[w + 10] = quadZ;
          data[w + 11] = moveDirVec.data[1];
          data[w + 12] = moveDirVec.data[2];
        }
      }
      if (this.sort > pc.PARTICLESORT_NONE && this.camera) {
        var particleDistance = this.particleDistance;
        for (i = 0; i < this.numParticles; i++) {
          this.vbToSort[i] = [i, particleDistance[Math.floor(this.vbCPU[i * this.numParticleVerts * 4 + 3])]];
        }
        this.vbOld.set(this.vbCPU);
        this.vbToSort.sort(function(a, b) {
          return a[1] - b[1];
        });
        for (i = 0; i < this.numParticles; i++) {
          var src = this.vbToSort[i][0] * this.numParticleVerts * 4;
          var dest = i * this.numParticleVerts * 4;
          for (j = 0; j < this.numParticleVerts * 4; j++) {
            this.vbCPU[dest + j] = this.vbOld[src + j];
          }
        }
      }
    }
    if (!this.loop) {
      if (Date.now() > this.endTime) {
        if (this.onFinished) {
          this.onFinished();
        }
        this.meshInstance.visible = false;
      }
    }
  }, destroy:function() {
    if (this.particleTexIN) {
      this.particleTexIN.destroy();
    }
    if (this.particleTexOUT) {
      this.particleTexOUT.destroy();
    }
    if (!this.useCpu && this.particleTexStart) {
      this.particleTexStart.destroy();
    }
    if (this.rtParticleTexIN) {
      this.rtParticleTexIN.destroy();
    }
    if (this.rtParticleTexOUT) {
      this.rtParticleTexOUT.destroy();
    }
    this.particleTexIN = null;
    this.particleTexOUT = null;
    this.particleTexStart = null;
    this.rtParticleTexIN = null;
    this.rtParticleTexOUT = null;
    this.shaderParticleUpdateRespawn = null;
    this.shaderParticleUpdateNoRespawn = null;
    this.shaderParticleUpdateOnStop = null;
  }};
  return {ParticleEmitter:ParticleEmitter};
}());
function frac(f) {
  return f - Math.floor(f);
}
function encodeFloatRGBA(v) {
  var encX = frac(v);
  var encY = frac(255.0 * v);
  var encZ = frac(65025.0 * v);
  var encW = frac(160581375.0 * v);
  encX -= encY / 255.0;
  encY -= encZ / 255.0;
  encZ -= encW / 255.0;
  encW -= encW / 255.0;
  return [encX, encY, encZ, encW];
}
function encodeFloatRG(v) {
  var encX = frac(v);
  var encY = frac(255.0 * v);
  encX -= encY / 255.0;
  encY -= encY / 255.0;
  return [encX, encY];
}
;pc.extend(pc, function() {
  var _deviceDeprecationWarning = false;
  var _getSelectionDeprecationWarning = false;
  var _prepareDeprecationWarning = false;
  function sortDrawCalls(drawCallA, drawCallB) {
    if (drawCallA.layer === drawCallB.layer) {
      if (drawCallA.drawOrder && drawCallB.drawOrder) {
        return drawCallA.drawOrder - drawCallB.drawOrder;
      }
    }
    return drawCallB.key - drawCallA.key;
  }
  var Picker = function(app, width, height) {
    if (app instanceof pc.GraphicsDevice) {
      app = pc.Application.getApplication();
      if (!_deviceDeprecationWarning) {
        _deviceDeprecationWarning = true;
      }
    }
    this.app = app;
    this.device = app.graphicsDevice;
    var device = this.device;
    this.library = device.getProgramLibrary();
    this.pickColor = new Float32Array(4);
    this.pickColor[3] = 1;
    this.scene = null;
    this.drawCalls = [];
    this.layer = null;
    this.layerComp = null;
    this.clearOptions = {color:[1, 1, 1, 1], depth:1, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};
    var self = this;
    this._clearDepthOptions = {depth:1.0, flags:pc.CLEARFLAG_DEPTH};
    this.clearDepthCommand = new pc.Command(0, 0, function() {
      device.clear(self._clearDepthOptions);
    });
    this.resize(width, height);
    this._ignoreOpacityFor = null;
  };
  Picker.prototype.getSelection = function(x, y, width, height) {
    var device = this.device;
    if (typeof x === "object") {
      var rect = x;
      x = rect.x;
      y = rect.y;
      width = rect.width;
      height = rect.height;
    } else {
      y = this.layer.renderTarget.height - (y + (height || 1));
    }
    width = width || 1;
    height = height || 1;
    var prevRenderTarget = device.renderTarget;
    device.setRenderTarget(this.layer.renderTarget);
    device.updateBegin();
    var pixels = new Uint8Array(4 * width * height);
    device.readPixels(x, y, width, height, pixels);
    device.updateEnd();
    device.setRenderTarget(prevRenderTarget);
    var selection = [];
    var drawCalls = this.layer.instances.visibleOpaque[0].list;
    var r, g, b, a, index;
    for (var i = 0; i < width * height; i++) {
      r = pixels[4 * i + 0];
      g = pixels[4 * i + 1];
      b = pixels[4 * i + 2];
      index = r << 16 | g << 8 | b;
      if (index !== 16777215) {
        var selectedMeshInstance = drawCalls[index];
        if (selection.indexOf(selectedMeshInstance) === -1) {
          selection.push(selectedMeshInstance);
        }
      }
    }
    return selection;
  };
  Picker.prototype.prepare = function(camera, scene, arg) {
    var device = this.device;
    var self = this;
    if (camera instanceof pc.Camera) {
      camera = camera._component;
    }
    this.scene = scene;
    var sourceLayer = null;
    var sourceRt = null;
    if (arg instanceof pc.Layer) {
      sourceLayer = arg;
    } else {
      sourceRt = arg;
    }
    if (!this.layer) {
      var pickColorId = device.scope.resolve("uColor");
      this.layer = new pc.Layer({name:"Picker", shaderPass:pc.SHADER_PICK, opaqueSortMode:pc.SORTMODE_NONE, onEnable:function() {
        if (this.renderTarget) {
          return;
        }
        var colorBuffer = new pc.Texture(device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:self.width, height:self.height});
        colorBuffer.minFilter = pc.FILTER_NEAREST;
        colorBuffer.magFilter = pc.FILTER_NEAREST;
        colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
        colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
        this.renderTarget = new pc.RenderTarget(device, colorBuffer, {depth:true});
      }, onDisable:function() {
        if (!this.renderTarget) {
          return;
        }
        this.renderTarget._colorBuffer.destroy();
        this.renderTarget.destroy();
        this.renderTarget = null;
      }, onDrawCall:function(meshInstance, i) {
        self.pickColor[0] = (i >> 16 & 255) / 255;
        self.pickColor[1] = (i >> 8 & 255) / 255;
        self.pickColor[2] = (i & 255) / 255;
        pickColorId.setValue(self.pickColor);
        device.setBlending(false);
      }, onPreCull:function() {
        this.oldAspectMode = this.cameras[0].aspectRatioMode;
        this.oldAspect = this.cameras[0].aspectRatio;
        this.cameras[0].aspectRatioMode = pc.ASPECT_MANUAL;
        var rt = sourceRt ? sourceRt : sourceLayer ? sourceLayer.renderTarget : null;
        this.cameras[0].aspectRatio = this.cameras[0].calculateAspectRatio(rt);
        self.app.renderer.updateCameraFrustum(this.cameras[0].camera);
      }, onPostCull:function() {
        this.cameras[0].aspectRatioMode = this.oldAspectMode;
        this.cameras[0].aspectRatio = this.oldAspect;
      }});
      this.layerComp = new pc.LayerComposition;
      this.layerComp.pushOpaque(this.layer);
      this.meshInstances = this.layer.opaqueMeshInstances;
      this._instancesVersion = -1;
    }
    if (!sourceLayer) {
      this.layer.clearMeshInstances();
      var layers = scene.layers.layerList;
      var subLayerEnabled = scene.layers.subLayerEnabled;
      var isTransparent = scene.layers.subLayerList;
      var layer;
      var j;
      var instanceList, layerCamId, instanceListLength, drawCall, transparent;
      for (var i = 0; i < layers.length; i++) {
        if (layers[i].overrideClear && layers[i]._clearDepthBuffer) {
          layers[i]._pickerCleared = false;
        }
      }
      for (var i = 0; i < layers.length; i++) {
        layer = layers[i];
        if (layer.renderTarget !== sourceRt || !layer.enabled || !subLayerEnabled[i]) {
          continue;
        }
        layerCamId = layer.cameras.indexOf(camera);
        if (layerCamId < 0) {
          continue;
        }
        if (layer.overrideClear && layer._clearDepthBuffer && !layer._pickerCleared) {
          this.meshInstances.push(this.clearDepthCommand);
          layer._pickerCleared = true;
        }
        transparent = isTransparent[i];
        instanceList = transparent ? layer.instances.transparentMeshInstances : layer.instances.opaqueMeshInstances;
        instanceListLength = instanceList.length;
        for (j = 0; j < instanceListLength; j++) {
          drawCall = instanceList[j];
          if (drawCall.pick) {
            this.meshInstances.push(drawCall);
          }
        }
      }
    } else {
      if (this._instancesVersion !== sourceLayer._version) {
        this.layer.clearMeshInstances();
        var instanceList = sourceLayer.instances.opaqueMeshInstances;
        var instanceListLength = instanceList.length;
        for (var j = 0; j < instanceListLength; j++) {
          drawCall = instanceList[j];
          if (drawCall.pick) {
            this.meshInstances.push(drawCall);
          }
        }
        instanceList = sourceLayer.instances.transparentMeshInstances;
        instanceListLength = instanceList.length;
        for (j = 0; j < instanceListLength; j++) {
          drawCall = instanceList[j];
          if (drawCall.pick) {
            this.meshInstances.push(drawCall);
          }
        }
        this._instancesVersion = sourceLayer._version;
      }
    }
    if (this.layer.cameras[0] !== camera) {
      this.layer.clearCameras();
      this.layer.addCamera(camera);
    }
    this.onLayerPreRender(this.layer, sourceLayer, sourceRt);
    this.app.renderer.renderComposition(this.layerComp);
    this.onLayerPostRender(this.layer);
  };
  Picker.prototype.onLayerPreRender = function(layer, sourceLayer, sourceRt) {
    if (this.width !== layer.renderTarget.width || this.height !== layer.renderTarget.height) {
      layer.onDisable();
      layer.onEnable();
    }
    layer.oldClear = layer.cameras[0].camera._clearOptions;
    layer.oldAspectMode = layer.cameras[0].aspectRatioMode;
    layer.oldAspect = layer.cameras[0].aspectRatio;
    layer.cameras[0].camera._clearOptions = this.clearOptions;
    layer.cameras[0].aspectRatioMode = pc.ASPECT_MANUAL;
    var rt = sourceRt ? sourceRt : sourceLayer ? sourceLayer.renderTarget : null;
    layer.cameras[0].aspectRatio = layer.cameras[0].calculateAspectRatio(rt);
  };
  Picker.prototype.onLayerPostRender = function(layer) {
    layer.cameras[0].camera._clearOptions = layer.oldClear;
    layer.cameras[0].aspectRatioMode = layer.oldAspectMode;
    layer.cameras[0].aspectRatio = layer.oldAspect;
  };
  Picker.prototype.resize = function(width, height) {
    this.width = width;
    this.height = height;
  };
  Object.defineProperty(Picker.prototype, "renderTarget", {get:function() {
    return this.layer.renderTarget;
  }});
  return {Picker:Picker};
}());
var primitiveUv1Padding = 4.0 / 64;
var primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;
pc.calculateNormals = function(positions, indices) {
  var triangleCount = indices.length / 3;
  var vertexCount = positions.length / 3;
  var i1, i2, i3;
  var i;
  var p1 = new pc.Vec3;
  var p2 = new pc.Vec3;
  var p3 = new pc.Vec3;
  var p1p2 = new pc.Vec3;
  var p1p3 = new pc.Vec3;
  var faceNormal = new pc.Vec3;
  var normals = [];
  for (i = 0; i < positions.length; i++) {
    normals[i] = 0;
  }
  for (i = 0; i < triangleCount; i++) {
    i1 = indices[i * 3];
    i2 = indices[i * 3 + 1];
    i3 = indices[i * 3 + 2];
    p1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
    p2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
    p3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
    p1p2.sub2(p2, p1);
    p1p3.sub2(p3, p1);
    faceNormal.cross(p1p2, p1p3).normalize();
    normals[i1 * 3] += faceNormal.x;
    normals[i1 * 3 + 1] += faceNormal.y;
    normals[i1 * 3 + 2] += faceNormal.z;
    normals[i2 * 3] += faceNormal.x;
    normals[i2 * 3 + 1] += faceNormal.y;
    normals[i2 * 3 + 2] += faceNormal.z;
    normals[i3 * 3] += faceNormal.x;
    normals[i3 * 3 + 1] += faceNormal.y;
    normals[i3 * 3 + 2] += faceNormal.z;
  }
  for (i = 0; i < vertexCount; i++) {
    var nx = normals[i * 3];
    var ny = normals[i * 3 + 1];
    var nz = normals[i * 3 + 2];
    var invLen = 1 / Math.sqrt(nx * nx + ny * ny + nz * nz);
    normals[i * 3] *= invLen;
    normals[i * 3 + 1] *= invLen;
    normals[i * 3 + 2] *= invLen;
  }
  return normals;
};
pc.calculateTangents = function(positions, normals, uvs, indices) {
  var triangleCount = indices.length / 3;
  var vertexCount = positions.length / 3;
  var i1, i2, i3;
  var x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r;
  var sdir = new pc.Vec3;
  var tdir = new pc.Vec3;
  var v1 = new pc.Vec3;
  var v2 = new pc.Vec3;
  var v3 = new pc.Vec3;
  var w1 = new pc.Vec2;
  var w2 = new pc.Vec2;
  var w3 = new pc.Vec2;
  var i;
  var tan1 = new Float32Array(vertexCount * 3);
  var tan2 = new Float32Array(vertexCount * 3);
  var tangents = [];
  var area = 0.0;
  for (i = 0; i < triangleCount; i++) {
    i1 = indices[i * 3];
    i2 = indices[i * 3 + 1];
    i3 = indices[i * 3 + 2];
    v1.set(positions[i1 * 3], positions[i1 * 3 + 1], positions[i1 * 3 + 2]);
    v2.set(positions[i2 * 3], positions[i2 * 3 + 1], positions[i2 * 3 + 2]);
    v3.set(positions[i3 * 3], positions[i3 * 3 + 1], positions[i3 * 3 + 2]);
    w1.set(uvs[i1 * 2], uvs[i1 * 2 + 1]);
    w2.set(uvs[i2 * 2], uvs[i2 * 2 + 1]);
    w3.set(uvs[i3 * 2], uvs[i3 * 2 + 1]);
    x1 = v2.x - v1.x;
    x2 = v3.x - v1.x;
    y1 = v2.y - v1.y;
    y2 = v3.y - v1.y;
    z1 = v2.z - v1.z;
    z2 = v3.z - v1.z;
    s1 = w2.x - w1.x;
    s2 = w3.x - w1.x;
    t1 = w2.y - w1.y;
    t2 = w3.y - w1.y;
    area = s1 * t2 - s2 * t1;
    if (area == 0.0) {
      sdir.set(0.0, 1.0, 0.0);
      tdir.set(1.0, 0.0, 0.0);
    } else {
      r = 1.0 / area;
      sdir.set((t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
      tdir.set((s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
    }
    tan1[i1 * 3 + 0] += sdir.x;
    tan1[i1 * 3 + 1] += sdir.y;
    tan1[i1 * 3 + 2] += sdir.z;
    tan1[i2 * 3 + 0] += sdir.x;
    tan1[i2 * 3 + 1] += sdir.y;
    tan1[i2 * 3 + 2] += sdir.z;
    tan1[i3 * 3 + 0] += sdir.x;
    tan1[i3 * 3 + 1] += sdir.y;
    tan1[i3 * 3 + 2] += sdir.z;
    tan2[i1 * 3 + 0] += tdir.x;
    tan2[i1 * 3 + 1] += tdir.y;
    tan2[i1 * 3 + 2] += tdir.z;
    tan2[i2 * 3 + 0] += tdir.x;
    tan2[i2 * 3 + 1] += tdir.y;
    tan2[i2 * 3 + 2] += tdir.z;
    tan2[i3 * 3 + 0] += tdir.x;
    tan2[i3 * 3 + 1] += tdir.y;
    tan2[i3 * 3 + 2] += tdir.z;
  }
  t1 = new pc.Vec3;
  t2 = new pc.Vec3;
  var n = new pc.Vec3;
  var temp = new pc.Vec3;
  for (i = 0; i < vertexCount; i++) {
    n.set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
    t1.set(tan1[i * 3], tan1[i * 3 + 1], tan1[i * 3 + 2]);
    t2.set(tan2[i * 3], tan2[i * 3 + 1], tan2[i * 3 + 2]);
    var ndott = n.dot(t1);
    temp.copy(n).scale(ndott);
    temp.sub2(t1, temp).normalize();
    tangents[i * 4] = temp.x;
    tangents[i * 4 + 1] = temp.y;
    tangents[i * 4 + 2] = temp.z;
    temp.cross(n, t1);
    tangents[i * 4 + 3] = temp.dot(t2) < 0.0 ? -1.0 : 1.0;
  }
  return tangents;
};
pc.createMesh = function(device, positions, opts) {
  var normals = opts && opts.normals !== undefined ? opts.normals : null;
  var tangents = opts && opts.tangents !== undefined ? opts.tangents : null;
  var colors = opts && opts.colors !== undefined ? opts.colors : null;
  var uvs = opts && opts.uvs !== undefined ? opts.uvs : null;
  var uvs1 = opts && opts.uvs1 !== undefined ? opts.uvs1 : null;
  var indices = opts && opts.indices !== undefined ? opts.indices : null;
  var blendIndices = opts && opts.blendIndices !== undefined ? opts.blendIndices : null;
  var blendWeights = opts && opts.blendWeights !== undefined ? opts.blendWeights : null;
  var vertexDesc = [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}];
  if (normals !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_NORMAL, components:3, type:pc.TYPE_FLOAT32});
  }
  if (tangents !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_TANGENT, components:4, type:pc.TYPE_FLOAT32});
  }
  if (colors !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_COLOR, components:4, type:pc.TYPE_UINT8, normalize:true});
  }
  if (uvs !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_TEXCOORD0, components:2, type:pc.TYPE_FLOAT32});
  }
  if (uvs1 !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_TEXCOORD1, components:2, type:pc.TYPE_FLOAT32});
  }
  if (blendIndices !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_BLENDINDICES, components:2, type:pc.TYPE_UINT8});
  }
  if (blendWeights !== null) {
    vertexDesc.push({semantic:pc.SEMANTIC_BLENDWEIGHT, components:2, type:pc.TYPE_FLOAT32});
  }
  var vertexFormat = new pc.VertexFormat(device, vertexDesc);
  var numVertices = positions.length / 3;
  var vertexBuffer = new pc.VertexBuffer(device, vertexFormat, numVertices);
  var iterator = new pc.VertexIterator(vertexBuffer);
  for (var i = 0; i < numVertices; i++) {
    iterator.element[pc.SEMANTIC_POSITION].set(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]);
    if (normals !== null) {
      iterator.element[pc.SEMANTIC_NORMAL].set(normals[i * 3], normals[i * 3 + 1], normals[i * 3 + 2]);
    }
    if (tangents !== null) {
      iterator.element[pc.SEMANTIC_TANGENT].set(tangents[i * 4], tangents[i * 4 + 1], tangents[i * 4 + 2], tangents[i * 4 + 3]);
    }
    if (colors !== null) {
      iterator.element[pc.SEMANTIC_COLOR].set(colors[i * 4], colors[i * 4 + 1], colors[i * 4 + 2], colors[i * 4 + 3]);
    }
    if (uvs !== null) {
      iterator.element[pc.SEMANTIC_TEXCOORD0].set(uvs[i * 2], uvs[i * 2 + 1]);
    }
    if (uvs1 !== null) {
      iterator.element[pc.SEMANTIC_TEXCOORD1].set(uvs1[i * 2], uvs1[i * 2 + 1]);
    }
    if (blendIndices !== null) {
      iterator.element[pc.SEMANTIC_BLENDINDICES].set(blendIndices[i * 2], blendIndices[i * 2 + 1]);
    }
    if (blendWeights !== null) {
      iterator.element[pc.SEMANTIC_BLENDWEIGHT].set(blendWeights[i * 2], blendWeights[i * 2 + 1]);
    }
    iterator.next();
  }
  iterator.end();
  var indexBuffer = null;
  var indexed = indices !== null;
  if (indexed) {
    indexBuffer = new pc.IndexBuffer(device, pc.INDEXFORMAT_UINT16, indices.length);
    var dst = new Uint16Array(indexBuffer.lock());
    dst.set(indices);
    indexBuffer.unlock();
  }
  var aabb = new pc.BoundingBox;
  aabb.compute(positions);
  var mesh = new pc.Mesh;
  mesh.vertexBuffer = vertexBuffer;
  mesh.indexBuffer[0] = indexBuffer;
  mesh.primitive[0].type = pc.PRIMITIVE_TRIANGLES;
  mesh.primitive[0].base = 0;
  mesh.primitive[0].count = indexed ? indices.length : numVertices;
  mesh.primitive[0].indexed = indexed;
  mesh.aabb = aabb;
  return mesh;
};
pc.createTorus = function(device, opts) {
  var rc = opts && opts.tubeRadius !== undefined ? opts.tubeRadius : 0.2;
  var rt = opts && opts.ringRadius !== undefined ? opts.ringRadius : 0.3;
  var segments = opts && opts.segments !== undefined ? opts.segments : 30;
  var sides = opts && opts.sides !== undefined ? opts.sides : 20;
  var i, j;
  var x, y, z, nx, ny, nz, u, v;
  var positions = [];
  var normals = [];
  var uvs = [];
  var indices = [];
  for (i = 0; i <= sides; i++) {
    for (j = 0; j <= segments; j++) {
      x = Math.cos(2.0 * Math.PI * j / segments) * (rt + rc * Math.cos(2.0 * Math.PI * i / sides));
      y = Math.sin(2.0 * Math.PI * i / sides) * rc;
      z = Math.sin(2.0 * Math.PI * j / segments) * (rt + rc * Math.cos(2.0 * Math.PI * i / sides));
      nx = Math.cos(2.0 * Math.PI * j / segments) * Math.cos(2.0 * Math.PI * i / sides);
      ny = Math.sin(2.0 * Math.PI * i / sides);
      nz = Math.sin(2.0 * Math.PI * j / segments) * Math.cos(2.0 * Math.PI * i / sides);
      u = i / sides;
      v = 1.0 - j / segments;
      positions.push(x, y, z);
      normals.push(nx, ny, nz);
      uvs.push(u, v);
      if (i < sides && j < segments) {
        var first, second, third, fourth;
        first = i * (segments + 1) + j;
        second = (i + 1) * (segments + 1) + j;
        third = i * (segments + 1) + (j + 1);
        fourth = (i + 1) * (segments + 1) + (j + 1);
        indices.push(first, second, third);
        indices.push(second, fourth, third);
      }
    }
  }
  var options = {normals:normals, uvs:uvs, indices:indices};
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);
  }
  return pc.createMesh(device, positions, options);
};
pc._createConeData = function(baseRadius, peakRadius, height, heightSegments, capSegments, roundedCaps) {
  var i, j;
  var x, y, z, u, v;
  var pos = new pc.Vec3;
  var bottomToTop = new pc.Vec3;
  var norm = new pc.Vec3;
  var top, bottom, tangent;
  var positions = [];
  var normals = [];
  var uvs = [];
  var uvs1 = [];
  var indices = [];
  var theta, cosTheta, sinTheta;
  var phi, sinPhi, cosPhi;
  var first, second, third, fourth;
  var offset;
  if (height > 0) {
    for (i = 0; i <= heightSegments; i++) {
      for (j = 0; j <= capSegments; j++) {
        theta = j / capSegments * 2.0 * Math.PI - Math.PI;
        sinTheta = Math.sin(theta);
        cosTheta = Math.cos(theta);
        bottom = new pc.Vec3(sinTheta * baseRadius, -height / 2.0, cosTheta * baseRadius);
        top = new pc.Vec3(sinTheta * peakRadius, height / 2.0, cosTheta * peakRadius);
        pos.lerp(bottom, top, i / heightSegments);
        bottomToTop.sub2(top, bottom).normalize();
        tangent = new pc.Vec3(cosTheta, 0.0, -sinTheta);
        norm.cross(tangent, bottomToTop).normalize();
        positions.push(pos.x, pos.y, pos.z);
        normals.push(norm.x, norm.y, norm.z);
        u = j / capSegments;
        v = i / heightSegments;
        uvs.push(u, v);
        var _v = v;
        v = u;
        u = _v;
        u /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        uvs1.push(u, v);
        if (i < heightSegments && j < capSegments) {
          first = i * (capSegments + 1) + j;
          second = i * (capSegments + 1) + (j + 1);
          third = (i + 1) * (capSegments + 1) + j;
          fourth = (i + 1) * (capSegments + 1) + (j + 1);
          indices.push(first, second, third);
          indices.push(second, fourth, third);
        }
      }
    }
  }
  if (roundedCaps) {
    var lat, lon;
    var latitudeBands = Math.floor(capSegments / 2);
    var longitudeBands = capSegments;
    var capOffset = height / 2;
    for (lat = 0; lat <= latitudeBands; lat++) {
      theta = lat * Math.PI * 0.5 / latitudeBands;
      sinTheta = Math.sin(theta);
      cosTheta = Math.cos(theta);
      for (lon = 0; lon <= longitudeBands; lon++) {
        phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;
        sinPhi = Math.sin(phi);
        cosPhi = Math.cos(phi);
        x = cosPhi * sinTheta;
        y = cosTheta;
        z = sinPhi * sinTheta;
        u = 1.0 - lon / longitudeBands;
        v = 1.0 - lat / latitudeBands;
        positions.push(x * peakRadius, y * peakRadius + capOffset, z * peakRadius);
        normals.push(x, y, z);
        uvs.push(u, v);
        u /= 3;
        v /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u += 1.0 / 3;
        uvs1.push(u, v);
      }
    }
    offset = (heightSegments + 1) * (capSegments + 1);
    for (lat = 0; lat < latitudeBands; ++lat) {
      for (lon = 0; lon < longitudeBands; ++lon) {
        first = lat * (longitudeBands + 1) + lon;
        second = first + longitudeBands + 1;
        indices.push(offset + first + 1, offset + second, offset + first);
        indices.push(offset + first + 1, offset + second + 1, offset + second);
      }
    }
    for (lat = 0; lat <= latitudeBands; lat++) {
      theta = Math.PI * 0.5 + lat * Math.PI * 0.5 / latitudeBands;
      sinTheta = Math.sin(theta);
      cosTheta = Math.cos(theta);
      for (lon = 0; lon <= longitudeBands; lon++) {
        phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;
        sinPhi = Math.sin(phi);
        cosPhi = Math.cos(phi);
        x = cosPhi * sinTheta;
        y = cosTheta;
        z = sinPhi * sinTheta;
        u = 1.0 - lon / longitudeBands;
        v = 1.0 - lat / latitudeBands;
        positions.push(x * peakRadius, y * peakRadius - capOffset, z * peakRadius);
        normals.push(x, y, z);
        uvs.push(u, v);
        u /= 3;
        v /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u += 2.0 / 3;
        uvs1.push(u, v);
      }
    }
    offset = (heightSegments + 1) * (capSegments + 1) + (longitudeBands + 1) * (latitudeBands + 1);
    for (lat = 0; lat < latitudeBands; ++lat) {
      for (lon = 0; lon < longitudeBands; ++lon) {
        first = lat * (longitudeBands + 1) + lon;
        second = first + longitudeBands + 1;
        indices.push(offset + first + 1, offset + second, offset + first);
        indices.push(offset + first + 1, offset + second + 1, offset + second);
      }
    }
  } else {
    offset = (heightSegments + 1) * (capSegments + 1);
    if (baseRadius > 0.0) {
      for (i = 0; i < capSegments; i++) {
        theta = i / capSegments * 2.0 * Math.PI;
        x = Math.sin(theta);
        y = -height / 2.0;
        z = Math.cos(theta);
        u = 1.0 - (x + 1.0) / 2.0;
        v = (z + 1.0) / 2.0;
        positions.push(x * baseRadius, y, z * baseRadius);
        normals.push(0.0, -1.0, 0.0);
        uvs.push(u, v);
        u /= 3;
        v /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u += 1.0 / 3;
        uvs1.push(u, v);
        if (i > 1) {
          indices.push(offset, offset + i, offset + i - 1);
        }
      }
    }
    offset += capSegments;
    if (peakRadius > 0.0) {
      for (i = 0; i < capSegments; i++) {
        theta = i / capSegments * 2.0 * Math.PI;
        x = Math.sin(theta);
        y = height / 2.0;
        z = Math.cos(theta);
        u = 1.0 - (x + 1.0) / 2.0;
        v = (z + 1.0) / 2.0;
        positions.push(x * peakRadius, y, z * peakRadius);
        normals.push(0.0, 1.0, 0.0);
        uvs.push(u, v);
        u /= 3;
        v /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u += 2.0 / 3;
        uvs1.push(u, v);
        if (i > 1) {
          indices.push(offset, offset + i - 1, offset + i);
        }
      }
    }
  }
  return {positions:positions, normals:normals, uvs:uvs, uvs1:uvs1, indices:indices};
};
pc.createCylinder = function(device, opts) {
  var radius = opts && (opts.radius || opts.baseRadius);
  radius = radius !== undefined ? radius : 0.5;
  var height = opts && opts.height !== undefined ? opts.height : 1.0;
  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;
  var capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 20;
  var options = pc._createConeData(radius, radius, height, heightSegments, capSegments, false);
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }
  return pc.createMesh(device, options.positions, options);
};
pc.createCapsule = function(device, opts) {
  var radius = opts && opts.radius !== undefined ? opts.radius : 0.3;
  var height = opts && opts.height !== undefined ? opts.height : 1.0;
  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;
  var sides = opts && opts.sides !== undefined ? opts.sides : 20;
  var options = pc._createConeData(radius, radius, height - 2 * radius, heightSegments, sides, true);
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }
  return pc.createMesh(device, options.positions, options);
};
pc.createCone = function(device, opts) {
  var baseRadius = opts && opts.baseRadius !== undefined ? opts.baseRadius : 0.5;
  var peakRadius = opts && opts.peakRadius !== undefined ? opts.peakRadius : 0.0;
  var height = opts && opts.height !== undefined ? opts.height : 1.0;
  var heightSegments = opts && opts.heightSegments !== undefined ? opts.heightSegments : 5;
  var capSegments = opts && opts.capSegments !== undefined ? opts.capSegments : 18;
  var options = pc._createConeData(baseRadius, peakRadius, height, heightSegments, capSegments, false);
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(options.positions, options.normals, options.uvs, options.indices);
  }
  return pc.createMesh(device, options.positions, options);
};
pc.createSphere = function(device, opts) {
  var radius = opts && opts.radius !== undefined ? opts.radius : 0.5;
  var latitudeBands = opts && opts.latitudeBands !== undefined ? opts.latitudeBands : 16;
  var longitudeBands = opts && opts.longitudeBands !== undefined ? opts.longitudeBands : 16;
  var lon, lat;
  var theta, sinTheta, cosTheta, phi, sinPhi, cosPhi;
  var first, second;
  var x, y, z, u, v;
  var positions = [];
  var normals = [];
  var uvs = [];
  var indices = [];
  for (lat = 0; lat <= latitudeBands; lat++) {
    theta = lat * Math.PI / latitudeBands;
    sinTheta = Math.sin(theta);
    cosTheta = Math.cos(theta);
    for (lon = 0; lon <= longitudeBands; lon++) {
      phi = lon * 2 * Math.PI / longitudeBands - Math.PI / 2.0;
      sinPhi = Math.sin(phi);
      cosPhi = Math.cos(phi);
      x = cosPhi * sinTheta;
      y = cosTheta;
      z = sinPhi * sinTheta;
      u = 1.0 - lon / longitudeBands;
      v = 1.0 - lat / latitudeBands;
      positions.push(x * radius, y * radius, z * radius);
      normals.push(x, y, z);
      uvs.push(u, v);
    }
  }
  for (lat = 0; lat < latitudeBands; ++lat) {
    for (lon = 0; lon < longitudeBands; ++lon) {
      first = lat * (longitudeBands + 1) + lon;
      second = first + longitudeBands + 1;
      indices.push(first + 1, second, first);
      indices.push(first + 1, second + 1, second);
    }
  }
  var options = {normals:normals, uvs:uvs, uvs1:uvs, indices:indices};
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);
  }
  return pc.createMesh(device, positions, options);
};
pc.createPlane = function(device, opts) {
  var he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new pc.Vec2(0.5, 0.5);
  var ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 5;
  var ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 5;
  var i, j;
  var x, y, z, u, v;
  var positions = [];
  var normals = [];
  var uvs = [];
  var indices = [];
  var vcounter = 0;
  for (i = 0; i <= ws; i++) {
    for (j = 0; j <= ls; j++) {
      x = -he.x + 2.0 * he.x * i / ws;
      y = 0.0;
      z = -(-he.y + 2.0 * he.y * j / ls);
      u = i / ws;
      v = j / ls;
      positions.push(x, y, z);
      normals.push(0.0, 1.0, 0.0);
      uvs.push(u, v);
      if (i < ws && j < ls) {
        indices.push(vcounter + ls + 1, vcounter + 1, vcounter);
        indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);
      }
      vcounter++;
    }
  }
  var options = {normals:normals, uvs:uvs, uvs1:uvs, indices:indices};
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);
  }
  return pc.createMesh(device, positions, options);
};
pc.createBox = function(device, opts) {
  var he = opts && opts.halfExtents !== undefined ? opts.halfExtents : new pc.Vec3(0.5, 0.5, 0.5);
  var ws = opts && opts.widthSegments !== undefined ? opts.widthSegments : 1;
  var ls = opts && opts.lengthSegments !== undefined ? opts.lengthSegments : 1;
  var hs = opts && opts.heightSegments !== undefined ? opts.heightSegments : 1;
  var corners = [new pc.Vec3(-he.x, -he.y, he.z), new pc.Vec3(he.x, -he.y, he.z), new pc.Vec3(he.x, he.y, he.z), new pc.Vec3(-he.x, he.y, he.z), new pc.Vec3(he.x, -he.y, -he.z), new pc.Vec3(-he.x, -he.y, -he.z), new pc.Vec3(-he.x, he.y, -he.z), new pc.Vec3(he.x, he.y, -he.z)];
  var faceAxes = [[0, 1, 3], [4, 5, 7], [3, 2, 6], [1, 0, 4], [1, 4, 2], [5, 0, 6]];
  var faceNormals = [[0, 0, 1], [0, 0, -1], [0, 1, 0], [0, -1, 0], [1, 0, 0], [-1, 0, 0]];
  var sides = {FRONT:0, BACK:1, TOP:2, BOTTOM:3, RIGHT:4, LEFT:5};
  var positions = [];
  var normals = [];
  var uvs = [];
  var uvs1 = [];
  var indices = [];
  var vcounter = 0;
  var generateFace = function(side, uSegments, vSegments) {
    var u, v;
    var i, j;
    var offset = positions.length / 3;
    for (i = 0; i <= uSegments; i++) {
      for (j = 0; j <= vSegments; j++) {
        var temp1 = new pc.Vec3;
        var temp2 = new pc.Vec3;
        var temp3 = new pc.Vec3;
        var r = new pc.Vec3;
        temp1.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);
        temp2.lerp(corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);
        temp3.sub2(temp2, corners[faceAxes[side][0]]);
        r.add2(temp1, temp3);
        u = i / uSegments;
        v = j / vSegments;
        positions.push(r.x, r.y, r.z);
        normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);
        uvs.push(u, v);
        u /= 3;
        v /= 3;
        u = u * primitiveUv1PaddingScale + primitiveUv1Padding;
        v = v * primitiveUv1PaddingScale + primitiveUv1Padding;
        u += side % 3 / 3;
        v += Math.floor(side / 3) / 3;
        uvs1.push(u, v);
        if (i < uSegments && j < vSegments) {
          indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);
          indices.push(vcounter + vSegments + 1, vcounter + vSegments + 2, vcounter + 1);
        }
        vcounter++;
      }
    }
  };
  generateFace(sides.FRONT, ws, hs);
  generateFace(sides.BACK, ws, hs);
  generateFace(sides.TOP, ws, ls);
  generateFace(sides.BOTTOM, ws, ls);
  generateFace(sides.RIGHT, ls, hs);
  generateFace(sides.LEFT, ls, hs);
  var options = {normals:normals, uvs:uvs, uvs1:uvs1, indices:indices};
  if (pc.precalculatedTangents) {
    options.tangents = pc.calculateTangents(positions, normals, uvs, indices);
  }
  return pc.createMesh(device, positions, options);
};
pc.Scene.defaultMaterial = new pc.StandardMaterial;
pc.Scene.defaultMaterial.shadingModel = pc.SPECULAR_BLINN;
pc.extend(pc, function() {
  var keyA, keyB, sortPos, sortDir;
  function sortManual(drawCallA, drawCallB) {
    return drawCallA.drawOrder - drawCallB.drawOrder;
  }
  function sortMaterialMesh(drawCallA, drawCallB) {
    keyA = drawCallA._key[pc.SORTKEY_FORWARD];
    keyB = drawCallB._key[pc.SORTKEY_FORWARD];
    if (keyA === keyB && drawCallA.mesh && drawCallB.mesh) {
      return drawCallB.mesh.id - drawCallA.mesh.id;
    }
    return keyB - keyA;
  }
  function sortBackToFront(drawCallA, drawCallB) {
    return drawCallB.zdist - drawCallA.zdist;
  }
  function sortFrontToBack(drawCallA, drawCallB) {
    return drawCallA.zdist - drawCallB.zdist;
  }
  var sortCallbacks = [null, sortManual, sortMaterialMesh, sortBackToFront, sortFrontToBack];
  function sortCameras(camA, camB) {
    return camA.priority - camB.priority;
  }
  function sortLights(lightA, lightB) {
    return lightB.key - lightA.key;
  }
  var layerCounter = 0;
  var layerList = [];
  var VisibleInstanceList = function() {
    this.list = [];
    this.length = 0;
    this.done = false;
  };
  var InstanceList = function() {
    this.opaqueMeshInstances = [];
    this.transparentMeshInstances = [];
    this.shadowCasters = [];
    this.visibleOpaque = [];
    this.visibleTransparent = [];
  };
  var Layer = function(options) {
    if (options.id !== undefined) {
      this.id = options.id;
      layerCounter = Math.max(this.id + 1, layerCounter);
    } else {
      this.id = layerCounter++;
    }
    this.name = options.name;
    this._enabled = options.enabled === undefined ? true : options.enabled;
    this._refCounter = this._enabled ? 1 : 0;
    this.opaqueSortMode = options.opaqueSortMode === undefined ? pc.SORTMODE_MATERIALMESH : options.opaqueSortMode;
    this.transparentSortMode = options.transparentSortMode === undefined ? pc.SORTMODE_BACK2FRONT : options.transparentSortMode;
    this.renderTarget = options.renderTarget;
    this.shaderPass = options.shaderPass === undefined ? pc.SHADER_FORWARD : options.shaderPass;
    this.passThrough = options.passThrough === undefined ? false : options.passThrough;
    this.overrideClear = options.overrideClear === undefined ? false : options.overrideClear;
    this._clearColor = new pc.Color(0, 0, 0, 1);
    if (options.clearColor) {
      this._clearColor.copy(options.clearColor);
    }
    this._clearColorBuffer = options.clearColorBuffer === undefined ? false : options.clearColorBuffer;
    this._clearDepthBuffer = options.clearDepthBuffer === undefined ? false : options.clearDepthBuffer;
    this._clearStencilBuffer = options.clearStencilBuffer === undefined ? false : options.clearStencilBuffer;
    this._clearOptions = {color:this._clearColor.data, depth:1.0, stencil:0, flags:(this._clearColorBuffer ? pc.CLEARFLAG_COLOR : 0) | (this._clearDepthBuffer ? pc.CLEARFLAG_DEPTH : 0) | (this._clearStencilBuffer ? pc.CLEARFLAG_STENCIL : 0)};
    this.onPreCull = options.onPreCull;
    this.onPreRender = options.onPreRender;
    this.onPreRenderOpaque = options.onPreRenderOpaque;
    this.onPreRenderTransparent = options.onPreRenderTransparent;
    this.onPostCull = options.onPostCull;
    this.onPostRender = options.onPostRender;
    this.onPostRenderOpaque = options.onPostRenderOpaque;
    this.onPostRenderTransparent = options.onPostRenderTransparent;
    this.onDrawCall = options.onDrawCall;
    this.onEnable = options.onEnable;
    this.onDisable = options.onDisable;
    if (this._enabled && this.onEnable) {
      this.onEnable();
    }
    this.layerReference = options.layerReference;
    this.instances = options.layerReference ? options.layerReference.instances : new InstanceList;
    this.cullingMask = options.cullingMask ? options.cullingMask : 4294967295;
    this.opaqueMeshInstances = this.instances.opaqueMeshInstances;
    this.transparentMeshInstances = this.instances.transparentMeshInstances;
    this.shadowCasters = this.instances.shadowCasters;
    this._lightComponents = [];
    this._lights = [];
    this._sortedLights = [[], [], []];
    this.cameras = [];
    this._dirty = false;
    this._dirtyLights = false;
    this._dirtyCameras = false;
    this._cameraHash = 0;
    this._lightHash = 0;
    this._staticLightHash = 0;
    this._needsStaticPrepare = true;
    this._staticPrepareDone = false;
    this._shaderVersion = -1;
    this._version = 0;
    this._lightCube = null;
  };
  Object.defineProperty(Layer.prototype, "enabled", {get:function() {
    return this._enabled;
  }, set:function(val) {
    if (val !== this._enabled) {
      this._enabled = val;
      if (val) {
        this.incrementCounter();
        if (this.onEnable) {
          this.onEnable();
        }
      } else {
        this.decrementCounter();
        if (this.onDisable) {
          this.onDisable();
        }
      }
    }
  }});
  Object.defineProperty(Layer.prototype, "clearColor", {get:function() {
    return this._clearColor;
  }, set:function(val) {
    this._clearColor.copy(val);
  }});
  Layer.prototype._updateClearFlags = function() {
    var flags = 0;
    if (this._clearColorBuffer) {
      flags = flags | pc.CLEARFLAG_COLOR;
    }
    if (this._clearDepthBuffer) {
      flags = flags | pc.CLEARFLAG_DEPTH;
    }
    if (this._clearStencilBuffer) {
      flags = flags | pc.CLEARFLAG_STENCIL;
    }
    this._clearOptions.flags = flags;
  };
  Object.defineProperty(Layer.prototype, "clearColorBuffer", {get:function() {
    return this._clearColorBuffer;
  }, set:function(val) {
    this._clearColorBuffer = val;
    this._updateClearFlags();
  }});
  Object.defineProperty(Layer.prototype, "clearDepthBuffer", {get:function() {
    return this._clearDepthBuffer;
  }, set:function(val) {
    this._clearDepthBuffer = val;
    this._updateClearFlags();
  }});
  Object.defineProperty(Layer.prototype, "clearStencilBuffer", {get:function() {
    return this._clearStencilBuffer;
  }, set:function(val) {
    this._clearStencilBuffer = val;
    this._updateClearFlags();
  }});
  Layer.prototype.incrementCounter = function() {
    if (this._refCounter === 0) {
      this._enabled = true;
      if (this.onEnable) {
        this.onEnable();
      }
    }
    this._refCounter++;
  };
  Layer.prototype.decrementCounter = function() {
    if (this._refCounter === 1) {
      this._enabled = false;
      if (this.onDisable) {
        this.onDisable();
      }
    } else {
      if (this._refCounter === 0) {
        return;
      }
    }
    this._refCounter--;
  };
  Layer.prototype.addMeshInstances = function(meshInstances, skipShadowCasters) {
    var sceneShaderVer = this._shaderVersion;
    var m, arr, mat;
    var casters = this.shadowCasters;
    for (var i = 0; i < meshInstances.length; i++) {
      m = meshInstances[i];
      mat = m.material;
      if (mat.blendType === pc.BLEND_NONE) {
        arr = this.opaqueMeshInstances;
      } else {
        arr = this.transparentMeshInstances;
      }
      if (arr.indexOf(m) < 0) {
        arr.push(m);
      }
      if (!skipShadowCasters && m.castShadow && casters.indexOf(m) < 0) {
        casters.push(m);
      }
      if (!this.passThrough && sceneShaderVer >= 0 && mat._shaderVersion !== sceneShaderVer) {
        if (mat.updateShader !== pc.Material.prototype.updateShader) {
          mat.clearVariants();
          mat.shader = null;
        }
        mat._shaderVersion = sceneShaderVer;
      }
    }
    if (!this.passThrough) {
      this._dirty = true;
    }
  };
  Layer.prototype.removeMeshInstances = function(meshInstances, skipShadowCasters) {
    var i, j, m, spliceOffset, spliceCount, len, drawCall;
    var opaque = this.opaqueMeshInstances;
    var transparent = this.transparentMeshInstances;
    var casters = this.shadowCasters;
    for (i = 0; i < meshInstances.length; i++) {
      m = meshInstances[i];
      spliceOffset = -1;
      spliceCount = 0;
      len = opaque.length;
      for (j = 0; j < len; j++) {
        drawCall = opaque[j];
        if (drawCall === m) {
          spliceOffset = j;
          spliceCount = 1;
          break;
        }
        if (drawCall._staticSource === m) {
          if (spliceOffset < 0) {
            spliceOffset = j;
          }
          spliceCount++;
        } else {
          if (spliceOffset >= 0) {
            break;
          }
        }
      }
      if (spliceOffset >= 0) {
        opaque.splice(spliceOffset, spliceCount);
      }
      spliceOffset = -1;
      spliceCount = 0;
      len = transparent.length;
      for (j = 0; j < len; j++) {
        drawCall = transparent[j];
        if (drawCall === m) {
          spliceOffset = j;
          spliceCount = 1;
          break;
        }
        if (drawCall._staticSource === m) {
          if (spliceOffset < 0) {
            spliceOffset = j;
          }
          spliceCount++;
        } else {
          if (spliceOffset >= 0) {
            break;
          }
        }
      }
      if (spliceOffset >= 0) {
        transparent.splice(spliceOffset, spliceCount);
      }
      if (skipShadowCasters) {
        continue;
      }
      j = casters.indexOf(m);
      if (j >= 0) {
        casters.splice(j, 1);
      }
    }
    this._dirty = true;
  };
  Layer.prototype.clearMeshInstances = function(skipShadowCasters) {
    if (this.opaqueMeshInstances.length === 0 && this.transparentMeshInstances.length === 0) {
      if (skipShadowCasters || this.shadowCasters.length === 0) {
        return;
      }
    }
    this.opaqueMeshInstances.length = 0;
    this.transparentMeshInstances.length = 0;
    if (!skipShadowCasters) {
      this.shadowCasters.length = 0;
    }
    if (!this.passThrough) {
      this._dirty = true;
    }
  };
  Layer.prototype.addLight = function(light) {
    if (this._lightComponents.indexOf(light) >= 0) {
      return;
    }
    this._lightComponents.push(light);
    this._lights.push(light.light);
    this._dirtyLights = true;
    this._generateLightHash();
  };
  Layer.prototype.removeLight = function(light) {
    var id = this._lightComponents.indexOf(light);
    if (id < 0) {
      return;
    }
    this._lightComponents.splice(id, 1);
    id = this._lights.indexOf(light.light);
    this._lights.splice(id, 1);
    this._dirtyLights = true;
    this._generateLightHash();
  };
  Layer.prototype.clearLights = function() {
    this._lightComponents.length = 0;
    this._lights.length = 0;
    this._dirtyLights = true;
  };
  Layer.prototype.addShadowCasters = function(meshInstances) {
    var m;
    var arr = this.shadowCasters;
    for (var i = 0; i < meshInstances.length; i++) {
      m = meshInstances[i];
      if (!m.castShadow) {
        continue;
      }
      if (arr.indexOf(m) < 0) {
        arr.push(m);
      }
    }
    this._dirtyLights = true;
  };
  Layer.prototype.removeShadowCasters = function(meshInstances) {
    var id;
    var arr = this.shadowCasters;
    for (var i = 0; i < meshInstances.length; i++) {
      id = arr.indexOf(meshInstances[i]);
      if (id >= 0) {
        arr.splice(id, 1);
      }
    }
    this._dirtyLights = true;
  };
  Layer.prototype._generateLightHash = function() {
    if (this._lights.length > 0) {
      this._lights.sort(sortLights);
      var str = "";
      var strStatic = "";
      for (var i = 0; i < this._lights.length; i++) {
        if (this._lights[i].isStatic) {
          strStatic += this._lights[i].key;
        } else {
          str += this._lights[i].key;
        }
      }
      if (str.length === 0) {
        this._lightHash = 0;
      } else {
        this._lightHash = pc.hashCode(str);
      }
      if (strStatic.length === 0) {
        this._staticLightHash = 0;
      } else {
        this._staticLightHash = pc.hashCode(strStatic);
      }
    } else {
      this._lightHash = 0;
      this._staticLightHash = 0;
    }
  };
  Layer.prototype._generateCameraHash = function() {
    if (this.cameras.length > 1) {
      this.cameras.sort(sortCameras);
      var str = "";
      for (var i = 0; i < this.cameras.length; i++) {
        str += this.cameras[i].entity._guid;
      }
      this._cameraHash = pc.hashCode(str);
    } else {
      this._cameraHash = 0;
    }
    this._dirtyCameras = true;
  };
  Layer.prototype.addCamera = function(camera) {
    if (this.cameras.indexOf(camera) >= 0) {
      return;
    }
    this.cameras.push(camera);
    this._generateCameraHash();
  };
  Layer.prototype.removeCamera = function(camera) {
    var id = this.cameras.indexOf(camera);
    if (id < 0) {
      return;
    }
    this.cameras.splice(id, 1);
    this._generateCameraHash();
  };
  Layer.prototype.clearCameras = function() {
    this.cameras.length = 0;
    this._cameraHash = 0;
    this._dirtyCameras = true;
  };
  Layer.prototype._sortCameras = function() {
    this._generateCameraHash();
  };
  Layer.prototype._calculateSortDistances = function(drawCalls, drawCallsCount, camPos, camFwd) {
    var i, drawCall, btype, meshPos;
    var tempx, tempy, tempz;
    for (i = 0; i < drawCallsCount; i++) {
      drawCall = drawCalls[i];
      if (drawCall.command) {
        continue;
      }
      if (drawCall.layer <= pc.scene.LAYER_FX) {
        continue;
      }
      meshPos = drawCall.aabb.center.data;
      tempx = meshPos[0] - camPos[0];
      tempy = meshPos[1] - camPos[1];
      tempz = meshPos[2] - camPos[2];
      drawCall.zdist = tempx * camFwd[0] + tempy * camFwd[1] + tempz * camFwd[2];
    }
  };
  Layer.prototype._sortVisible = function(transparent, cameraNode, cameraPass) {
    var objects = this.instances;
    var sortMode = transparent ? this.transparentSortMode : this.opaqueSortMode;
    if (sortMode === pc.SORTMODE_NONE) {
      return;
    }
    var visible = transparent ? objects.visibleTransparent[cameraPass] : objects.visibleOpaque[cameraPass];
    if (sortMode === pc.SORTMODE_BACK2FRONT || sortMode === pc.SORTMODE_FRONT2BACK) {
      sortPos = cameraNode.getPosition().data;
      sortDir = cameraNode.forward.data;
      this._calculateSortDistances(visible.list, visible.length, sortPos, sortDir);
    }
    if (visible.list.length !== visible.length) {
      visible.list.length = visible.length;
    }
    visible.list.sort(sortCallbacks[sortMode]);
  };
  return {Layer:Layer, InstanceList:InstanceList, VisibleInstanceList:VisibleInstanceList};
}());
pc.extend(pc, function() {
  var LayerComposition = function() {
    this.layerList = [];
    this.subLayerList = [];
    this.subLayerEnabled = [];
    this._dirty = false;
    this._dirtyBlend = false;
    this._dirtyLights = false;
    this._dirtyCameras = false;
    this._meshInstances = [];
    this._lights = [];
    this.cameras = [];
    this._sortedLights = [[], [], []];
    this._lightShadowCasters = [];
    this._globalLightCameras = [];
    this._globalLightCameraIds = [];
    this._renderedRt = [];
    this._renderedByCam = [];
    this._renderedLayer = [];
    this._renderList = [];
    this._renderListCamera = [];
    pc.events.attach(this);
  };
  LayerComposition.prototype._sortLights = function(target) {
    var light;
    var lights = target._lights;
    target._sortedLights[pc.LIGHTTYPE_DIRECTIONAL].length = 0;
    target._sortedLights[pc.LIGHTTYPE_POINT].length = 0;
    target._sortedLights[pc.LIGHTTYPE_SPOT].length = 0;
    for (var i = 0; i < lights.length; i++) {
      light = lights[i];
      if (light._enabled) {
        target._sortedLights[light._type].push(light);
      }
    }
  };
  LayerComposition.prototype._update = function() {
    var i, j, k, l;
    var layer;
    var len = this.layerList.length;
    var result = 0;
    if (!this._dirty || !this._dirtyLights || !this._dirtyCameras) {
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        if (layer._dirty) {
          this._dirty = true;
        }
        if (layer._dirtyLights) {
          this._dirtyLights = true;
        }
        if (layer._dirtyCameras) {
          this._dirtyCameras = true;
        }
      }
    }
    var arr;
    if (this._dirty) {
      result |= pc.COMPUPDATED_INSTANCES;
      this._meshInstances.length = 0;
      var mi;
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        if (layer.passThrough) {
          continue;
        }
        arr = layer.opaqueMeshInstances;
        for (j = 0; j < arr.length; j++) {
          mi = arr[j];
          if (this._meshInstances.indexOf(mi) < 0) {
            this._meshInstances.push(mi);
            if (mi.material && mi.material._dirtyBlend) {
              this._dirtyBlend = true;
              mi.material._dirtyBlend = false;
            }
          }
        }
        arr = layer.transparentMeshInstances;
        for (j = 0; j < arr.length; j++) {
          mi = arr[j];
          if (this._meshInstances.indexOf(mi) < 0) {
            this._meshInstances.push(mi);
            if (mi.material && mi.material._dirtyBlend) {
              this._dirtyBlend = true;
              mi.material._dirtyBlend = false;
            }
          }
        }
      }
      for (i = 0; i < len; i++) {
        this.layerList[i]._dirty = false;
        this.layerList[i]._version++;
      }
    }
    if (this._dirtyBlend) {
      result |= pc.COMPUPDATED_BLEND;
      var opaqueOld, transparentOld, opaqueNew, transparentNew;
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        if (layer.passThrough) {
          continue;
        }
        opaqueOld = layer.opaqueMeshInstances;
        transparentOld = layer.transparentMeshInstances;
        opaqueNew = [];
        transparentNew = [];
        for (j = 0; j < opaqueOld.length; j++) {
          if (opaqueOld[j].material && opaqueOld[j].material.blendType !== pc.BLEND_NONE) {
            transparentNew.push(opaqueOld[j]);
          } else {
            opaqueNew.push(opaqueOld[j]);
          }
        }
        for (j = 0; j < transparentOld.length; j++) {
          if (transparentOld[j].material && transparentOld[j].material.blendType !== pc.BLEND_NONE) {
            transparentNew.push(transparentOld[j]);
          } else {
            opaqueNew.push(transparentOld[j]);
          }
        }
        layer.opaqueMeshInstances.length = opaqueNew.length;
        for (j = 0; j < opaqueNew.length; j++) {
          layer.opaqueMeshInstances[j] = opaqueNew[j];
        }
        layer.transparentMeshInstances.length = transparentNew.length;
        for (j = 0; j < transparentNew.length; j++) {
          layer.transparentMeshInstances[j] = transparentNew[j];
        }
      }
      this._dirtyBlend = false;
    }
    this._dirty = false;
    var transparent;
    if (this._dirtyLights || result & pc.COMPUPDATED_INSTANCES) {
      result |= pc.COMPUPDATED_LIGHTS;
      this._lights.length = 0;
      this._lightShadowCasters.length = 0;
      var light, casters, meshInstances, lid;
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        arr = layer._lights;
        for (j = 0; j < arr.length; j++) {
          light = arr[j];
          lid = this._lights.indexOf(light);
          if (lid < 0) {
            this._lights.push(light);
            lid = this._lights.length - 1;
          }
          casters = this._lightShadowCasters[lid];
          if (!casters) {
            this._lightShadowCasters[lid] = casters = [];
          }
        }
      }
    }
    if (this._dirtyLights) {
      this._sortLights(this);
      this._dirtyLights = false;
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        this._sortLights(layer);
        layer._dirtyLights = false;
      }
    }
    if (result) {
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        arr = layer._lights;
        for (j = 0; j < arr.length; j++) {
          light = arr[j];
          lid = this._lights.indexOf(light);
          casters = this._lightShadowCasters[lid];
          meshInstances = layer.shadowCasters;
          for (k = 0; k < meshInstances.length; k++) {
            if (casters.indexOf(meshInstances[k]) < 0) {
              casters.push(meshInstances[k]);
            }
          }
        }
      }
    }
    if (result & pc.COMPUPDATED_LIGHTS || this._dirtyCameras) {
      this._globalLightCameras.length = 0;
      var globalLights = this._sortedLights[pc.LIGHTTYPE_DIRECTIONAL];
      for (l = 0; l < globalLights.length; l++) {
        light = globalLights[l];
        this._globalLightCameras[l] = [];
        for (i = 0; i < len; i++) {
          layer = this.layerList[i];
          if (layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL].indexOf(light) < 0) {
            continue;
          }
          for (k = 0; k < layer.cameras.length; k++) {
            if (this._globalLightCameras[l].indexOf(layer.cameras[k]) >= 0) {
              continue;
            }
            this._globalLightCameras[l].push(layer.cameras[k]);
          }
        }
      }
    }
    var camera, index;
    if (this._dirtyCameras) {
      result |= pc.COMPUPDATED_CAMERAS;
      this.cameras.length = 0;
      for (i = 0; i < len; i++) {
        layer = this.layerList[i];
        for (j = 0; j < layer.cameras.length; j++) {
          camera = layer.cameras[j];
          index = this.cameras.indexOf(camera);
          if (index < 0) {
            index = this.cameras.length;
            this.cameras.push(camera);
          }
        }
      }
      this._renderList.length = 0;
      this._renderListCamera.length = 0;
      var hash, hash2, groupLength, cam;
      var skipCount = 0;
      for (i = 0; i < len; i++) {
        if (skipCount) {
          skipCount--;
          continue;
        }
        layer = this.layerList[i];
        if (layer.cameras.length === 0 && !layer.isPostEffect) {
          continue;
        }
        hash = layer._cameraHash;
        if (hash === 0) {
          this._renderList.push(i);
          this._renderListCamera.push(0);
        } else {
          groupLength = 1;
          for (j = i + 1; j < len; j++) {
            hash2 = this.layerList[j]._cameraHash;
            if (hash !== hash2) {
              groupLength = j - i - 1;
              break;
            } else {
              if (j === len - 1) {
                groupLength = j - i;
              }
            }
          }
          if (groupLength === 1) {
            for (cam = 0; cam < layer.cameras.length; cam++) {
              this._renderList.push(i);
              this._renderListCamera.push(cam);
            }
          } else {
            cam = 0;
            for (cam = 0; cam < layer.cameras.length; cam++) {
              for (j = 0; j <= groupLength; j++) {
                this._renderList.push(i + j);
                this._renderListCamera.push(cam);
              }
            }
            skipCount = groupLength;
          }
        }
      }
      this._dirtyCameras = false;
      for (i = 0; i < len; i++) {
        this.layerList[i]._dirtyCameras = false;
      }
    }
    if (result & pc.COMPUPDATED_LIGHTS || result & pc.COMPUPDATED_CAMERAS) {
      this._globalLightCameraIds.length = 0;
      for (l = 0; l < this._globalLightCameras.length; l++) {
        arr = [];
        for (i = 0; i < this._globalLightCameras[l].length; i++) {
          index = this.cameras.indexOf(this._globalLightCameras[l][i]);
          if (index < 0) {
            continue;
          }
          arr.push(index);
        }
        this._globalLightCameraIds.push(arr);
      }
    }
    return result;
  };
  LayerComposition.prototype._isLayerAdded = function(layer) {
    if (this.layerList.indexOf(layer) >= 0) {
      return true;
    }
    return false;
  };
  LayerComposition.prototype._isSublayerAdded = function(layer, transparent) {
    for (var i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i] === layer && this.subLayerList[i] === transparent) {
        return true;
      }
    }
    return false;
  };
  LayerComposition.prototype.push = function(layer) {
    if (this._isLayerAdded(layer)) {
      return;
    }
    this.layerList.push(layer);
    this.layerList.push(layer);
    this.subLayerList.push(false);
    this.subLayerList.push(true);
    this.subLayerEnabled.push(true);
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.insert = function(layer, index) {
    if (this._isLayerAdded(layer)) {
      return;
    }
    this.layerList.splice(index, 0, layer, layer);
    this.subLayerList.splice(index, 0, false, true);
    this.subLayerEnabled.splice(index, 0, true, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.remove = function(layer) {
    var id = this.layerList.indexOf(layer);
    while (id >= 0) {
      this.layerList.splice(id, 1);
      this.subLayerList.splice(id, 1);
      this.subLayerEnabled.splice(id, 1);
      id = this.layerList.indexOf(layer);
      this._dirty = true;
      this._dirtyLights = true;
      this._dirtyCameras = true;
      this.fire("remove", layer);
    }
  };
  LayerComposition.prototype.pushOpaque = function(layer) {
    if (this._isSublayerAdded(layer, false)) {
      return;
    }
    this.layerList.push(layer);
    this.subLayerList.push(false);
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.insertOpaque = function(layer, index) {
    if (this._isSublayerAdded(layer, false)) {
      return;
    }
    this.layerList.splice(index, 0, layer);
    this.subLayerList.splice(index, 0, false);
    this.subLayerEnabled.splice(index, 0, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.removeOpaque = function(layer) {
    for (var i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i] === layer && !this.subLayerList[i]) {
        this.layerList.splice(i, 1);
        this.subLayerList.splice(i, 1);
        this.subLayerEnabled.splice(i, 1);
        this._dirty = true;
        this._dirtyLights = true;
        this._dirtyCameras = true;
        if (this.layerList.indexOf(layer) < 0) {
          this.fire("remove", layer);
        }
        return;
      }
    }
  };
  LayerComposition.prototype.pushTransparent = function(layer) {
    if (this._isSublayerAdded(layer, true)) {
      return;
    }
    this.layerList.push(layer);
    this.subLayerList.push(true);
    this.subLayerEnabled.push(true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.insertTransparent = function(layer, index) {
    if (this._isSublayerAdded(layer, true)) {
      return;
    }
    this.layerList.splice(index, 0, layer);
    this.subLayerList.splice(index, 0, true);
    this.subLayerEnabled.splice(index, 0, true);
    this._dirty = true;
    this._dirtyLights = true;
    this._dirtyCameras = true;
    this.fire("add", layer);
  };
  LayerComposition.prototype.removeTransparent = function(layer) {
    for (var i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i] === layer && this.subLayerList[i]) {
        this.layerList.splice(i, 1);
        this.subLayerList.splice(i, 1);
        this.subLayerEnabled.splice(i, 1);
        this._dirty = true;
        this._dirtyLights = true;
        this._dirtyCameras = true;
        if (this.layerList.indexOf(layer) < 0) {
          this.fire("remove", layer);
        }
        return;
      }
    }
  };
  LayerComposition.prototype._getSublayerIndex = function(layer, transparent) {
    var id = this.layerList.indexOf(layer);
    if (id < 0) {
      return -1;
    }
    if (this.subLayerList[id] !== transparent) {
      id = this.layerList.indexOf(layer, id + 1);
      if (id < 0) {
        return -1;
      }
      if (this.subLayerList[id] !== transparent) {
        return -1;
      }
    }
    return id;
  };
  LayerComposition.prototype.getOpaqueIndex = function(layer) {
    return this._getSublayerIndex(layer, false);
  };
  LayerComposition.prototype.getTransparentIndex = function(layer) {
    return this._getSublayerIndex(layer, true);
  };
  LayerComposition.prototype.getLayerById = function(id) {
    for (var i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i].id === id) {
        return this.layerList[i];
      }
    }
    return null;
  };
  LayerComposition.prototype.getLayerByName = function(name) {
    for (var i = 0; i < this.layerList.length; i++) {
      if (this.layerList[i].name === name) {
        return this.layerList[i];
      }
    }
    return null;
  };
  return {LayerComposition:LayerComposition};
}());
pc.extend(pc, function() {
  pc.SPRITE_RENDERMODE_SIMPLE = 0;
  pc.SPRITE_RENDERMODE_SLICED = 1;
  pc.SPRITE_RENDERMODE_TILED = 2;
  var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1];
  var indices = [0, 1, 3, 2, 3, 1];
  var Sprite = function(device, options) {
    this._device = device;
    this._pixelsPerUnit = options && options.pixelsPerUnit !== undefined ? options.pixelsPerUnit : 1;
    this._renderMode = options && options.renderMode !== undefined ? options.renderMode : pc.SPRITE_RENDERMODE_SIMPLE;
    this._atlas = options && options.atlas !== undefined ? options.atlas : null;
    this._frameKeys = options && options.frameKeys !== undefined ? options.frameKeys : null;
    this._meshes = [];
    this._updatingProperties = false;
    this._meshesDirty = false;
    pc.events.attach(this);
    if (this._atlas && this._frameKeys) {
      this._createMeshes();
    }
  };
  Sprite.prototype._createMeshes = function() {
    var i, len;
    for (i = 0, len = this._meshes.length; i < len; i++) {
      var mesh = this._meshes[i];
      if (!mesh) {
        continue;
      }
      mesh.vertexBuffer.destroy();
      for (var j = 0, len2 = mesh.indexBuffer.length; j < len2; j++) {
        mesh.indexBuffer[j].destroy();
      }
    }
    var count = this._frameKeys.length;
    this._meshes = new Array(count);
    var createMeshFunc = this.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._renderMode === pc.SPRITE_RENDERMODE_TILED ? this._create9SliceMesh : this._createSimpleMesh;
    for (i = 0; i < count; i++) {
      var frame = this._atlas.frames[this._frameKeys[i]];
      this._meshes[i] = frame ? createMeshFunc.call(this, frame) : null;
    }
    this.fire("set:meshes");
  };
  Sprite.prototype._createSimpleMesh = function(frame) {
    var rect = frame.rect;
    var texWidth = this._atlas.texture.width;
    var texHeight = this._atlas.texture.height;
    var w = rect.data[2] / this._pixelsPerUnit;
    var h = rect.data[3] / this._pixelsPerUnit;
    var hp = frame.pivot.x;
    var vp = frame.pivot.y;
    var positions = [-hp * w, -vp * h, 0, (1 - hp) * w, -vp * h, 0, (1 - hp) * w, (1 - vp) * h, 0, -hp * w, (1 - vp) * h, 0];
    var lu = rect.data[0] / texWidth;
    var bv = rect.data[1] / texHeight;
    var ru = (rect.data[0] + rect.data[2]) / texWidth;
    var tv = (rect.data[1] + rect.data[3]) / texHeight;
    var uvs = [lu, bv, ru, bv, ru, tv, lu, tv];
    var mesh = pc.createMesh(this._device, positions, {uvs:uvs, normals:normals, indices:indices});
    return mesh;
  };
  Sprite.prototype._create9SliceMesh = function() {
    var he = pc.Vec2.ONE;
    var ws = 3;
    var ls = 3;
    var i, j;
    var x, y, z, u, v;
    var positions = [];
    var normals = [];
    var uvs = [];
    var uvs1 = [];
    var indices = [];
    var vcounter = 0;
    for (i = 0; i <= ws; i++) {
      u = i === 0 || i === ws ? 0 : 1;
      for (j = 0; j <= ls; j++) {
        x = -he.x + 2.0 * he.x * (i <= 1 ? 0 : 3) / ws;
        y = 0.0;
        z = -(-he.y + 2.0 * he.y * (j <= 1 ? 0 : 3) / ls);
        v = j === 0 || j === ls ? 0 : 1;
        positions.push(-x, y, z);
        normals.push(0.0, 1.0, 0.0);
        uvs.push(u, v);
        if (i < ws && j < ls) {
          indices.push(vcounter + ls + 1, vcounter + 1, vcounter);
          indices.push(vcounter + ls + 1, vcounter + ls + 2, vcounter + 1);
        }
        vcounter++;
      }
    }
    var options = {normals:normals, uvs:uvs, indices:indices};
    return pc.createMesh(this._device, positions, options);
  };
  Sprite.prototype._onSetFrames = function(frames) {
    if (this._updatingProperties) {
      this._meshesDirty = true;
    } else {
      this._createMeshes();
    }
  };
  Sprite.prototype._onFrameChanged = function(frameKey, frame) {
    var idx = this._frameKeys.indexOf(frameKey);
    if (idx < 0) {
      return;
    }
    if (frame) {
      if (this.renderMode === pc.SPRITE_RENDERMODE_SIMPLE) {
        this._meshes[idx] = this._createSimpleMesh(frame);
      }
    } else {
      this._meshes[idx] = null;
    }
    this.fire("set:meshes");
  };
  Sprite.prototype._onFrameRemoved = function(frameKey) {
    var idx = this._frameKeys.indexOf(frameKey);
    if (idx < 0) {
      return;
    }
    this._meshes[idx] = null;
    this.fire("set:meshes");
  };
  Sprite.prototype.startUpdate = function() {
    this._updatingProperties = true;
    this._meshesDirty = false;
  };
  Sprite.prototype.endUpdate = function() {
    this._updatingProperties = false;
    if (this._meshesDirty && this._atlas && this._frameKeys) {
      this._createMeshes();
    }
    this._meshesDirty = false;
  };
  Sprite.prototype.destroy = function() {
    var i;
    var len;
    for (i = 0, len = this._meshes.length; i < len; i++) {
      var mesh = this._meshes[i];
      if (!mesh) {
        continue;
      }
      mesh.vertexBuffer.destroy();
      for (var j = 0, len2 = mesh.indexBuffer.length; j < len2; j++) {
        mesh.indexBuffer[j].destroy();
      }
    }
    this._meshes.length = 0;
  }, Object.defineProperty(Sprite.prototype, "frameKeys", {get:function() {
    return this._frameKeys;
  }, set:function(value) {
    this._frameKeys = value;
    if (this._atlas && this._frameKeys) {
      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }
    this.fire("set:frameKeys", value);
  }});
  Object.defineProperty(Sprite.prototype, "atlas", {get:function() {
    return this._atlas;
  }, set:function(value) {
    if (value === this._atlas) {
      return;
    }
    if (this._atlas) {
      this._atlas.off("set:frames", this._onSetFrames, this);
      this._atlas.off("set:frame", this._onFrameChanged, this);
      this._atlas.off("remove:frame", this._onFrameRemoved, this);
    }
    this._atlas = value;
    if (this._atlas && this._frameKeys) {
      this._atlas.on("set:frames", this._onSetFrames, this);
      this._atlas.on("set:frame", this._onFrameChanged, this);
      this._atlas.on("remove:frame", this._onFrameRemoved, this);
      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }
    this.fire("set:atlas", value);
  }});
  Object.defineProperty(Sprite.prototype, "pixelsPerUnit", {get:function() {
    return this._pixelsPerUnit;
  }, set:function(value) {
    if (this._pixelsPerUnit === value) {
      return;
    }
    this._pixelsPerUnit = value;
    this.fire("set:pixelsPerUnit", value);
    if (this._atlas && this._frameKeys && this.renderMode === pc.SPRITE_RENDERMODE_SIMPLE) {
      if (this._updatingProperties) {
        this._meshesDirty = true;
      } else {
        this._createMeshes();
      }
    }
  }});
  Object.defineProperty(Sprite.prototype, "renderMode", {get:function() {
    return this._renderMode;
  }, set:function(value) {
    if (this._renderMode === value) {
      return;
    }
    var prev = this._renderMode;
    this._renderMode = value;
    this.fire("set:renderMode", value);
    if (prev === pc.SPRITE_RENDERMODE_SIMPLE || value === pc.SPRITE_RENDERMODE_SIMPLE) {
      if (this._atlas && this._frameKeys) {
        if (this._updatingProperties) {
          this._meshesDirty = true;
        } else {
          this._createMeshes();
        }
      }
    }
  }});
  Object.defineProperty(Sprite.prototype, "meshes", {get:function() {
    return this._meshes;
  }});
  return {Sprite:Sprite};
}());
pc.extend(pc, function() {
  var TextureAtlas = function() {
    this._texture = null;
    this._frames = null;
    pc.events.attach(this);
  };
  TextureAtlas.prototype.setFrame = function(key, data) {
    var frame = this._frames[key];
    if (!frame) {
      frame = {rect:data.rect.clone(), pivot:data.pivot.clone(), border:data.border.clone()};
      this._frames[key] = frame;
    } else {
      frame.rect.copy(data.rect);
      frame.pivot.copy(data.pivot);
      frame.border.copy(data.border);
    }
    this.fire("set:frame", key.toString(), frame);
  };
  TextureAtlas.prototype.removeFrame = function(key) {
    var frame = this._frames[key];
    if (frame) {
      delete this._frames[key];
      this.fire("remove:frame", key.toString(), frame);
    }
  };
  TextureAtlas.prototype.destroy = function() {
    if (this._texture) {
      this._texture.destroy();
    }
  }, Object.defineProperty(TextureAtlas.prototype, "texture", {get:function() {
    return this._texture;
  }, set:function(value) {
    this._texture = value;
    this.fire("set:texture", value);
  }});
  Object.defineProperty(TextureAtlas.prototype, "frames", {get:function() {
    return this._frames;
  }, set:function(value) {
    this._frames = value;
    this.fire("set:frames", value);
  }});
  return {TextureAtlas:TextureAtlas};
}());
pc.extend(pc, function() {
  var StencilParameters = function(options) {
    this.func = options.func === undefined ? pc.FUNC_ALWAYS : options.func;
    this.ref = options.ref || 0;
    this.readMask = options.readMask === undefined ? 255 : options.readMask;
    this.writeMask = options.writeMask === undefined ? 255 : options.writeMask;
    this.fail = options.fail || pc.STENCILOP_KEEP;
    this.zfail = options.zfail || pc.STENCILOP_KEEP;
    this.zpass = options.zpass || pc.STENCILOP_KEEP;
  };
  StencilParameters.prototype.clone = function() {
    var clone = new pc.StencilParameters({func:this.func, ref:this.ref, readMask:this.readMask, writeMask:this.writeMask, fail:this.fail, zfail:this.zfail, zpass:this.zpass});
    return clone;
  };
  return {StencilParameters:StencilParameters};
}());
pc.extend(pc, function() {
  var Key = function Key(time, position, rotation, scale) {
    this.time = time;
    this.position = position;
    this.rotation = rotation;
    this.scale = scale;
  };
  var Node = function Node() {
    this._name = "";
    this._keys = [];
  };
  var Animation = function Animation() {
    this.name = "";
    this.duration = 0;
    this._nodes = [];
    this._nodeDict = {};
  };
  Animation.prototype.getDuration = function() {
    return this.duration;
  };
  Animation.prototype.getName = function() {
    return this.name;
  };
  Animation.prototype.getNode = function(name) {
    return this._nodeDict[name];
  };
  Object.defineProperty(Animation.prototype, "nodes", {get:function() {
    return this._nodes;
  }});
  Animation.prototype.getNodes = function() {
    return this._nodes;
  };
  Animation.prototype.setDuration = function(duration) {
    this.duration = duration;
  };
  Animation.prototype.setName = function(name) {
    this.name = name;
  };
  Animation.prototype.addNode = function(node) {
    this._nodes.push(node);
    this._nodeDict[node._name] = node;
  };
  return {Animation:Animation, Key:Key, Node:Node};
}());
pc.extend(pc, function() {
  function InterpolatedKey() {
    this._written = false;
    this._name = "";
    this._keyFrames = [];
    this._quat = new pc.Quat;
    this._pos = new pc.Vec3;
    this._scale = new pc.Vec3;
    this._targetNode = null;
  }
  InterpolatedKey.prototype = {getTarget:function() {
    return this._targetNode;
  }, setTarget:function(node) {
    this._targetNode = node;
  }};
  var Skeleton = function Skeleton(graph) {
    this._animation = null;
    this._time = 0;
    this.looping = true;
    this._interpolatedKeys = [];
    this._interpolatedKeyDict = {};
    this._currKeyIndices = {};
    this.graph = null;
    var self = this;
    function addInterpolatedKeys(node) {
      var interpKey = new InterpolatedKey;
      interpKey._name = node.name;
      self._interpolatedKeys.push(interpKey);
      self._interpolatedKeyDict[node.name] = interpKey;
      self._currKeyIndices[node.name] = 0;
      for (var i = 0; i < node._children.length; i++) {
        addInterpolatedKeys(node._children[i]);
      }
    }
    addInterpolatedKeys(graph);
  };
  Skeleton.prototype.addTime = function(delta) {
    if (this._animation !== null) {
      var i;
      var node, nodeName;
      var keys, interpKey;
      var k1, k2, alpha;
      var nodes = this._animation._nodes;
      var duration = this._animation.duration;
      if (this._time === duration && !this.looping) {
        return;
      }
      this._time += delta;
      if (this._time > duration) {
        this._time = this.looping ? 0.0 : duration;
        for (i = 0; i < nodes.length; i++) {
          node = nodes[i];
          nodeName = node._name;
          this._currKeyIndices[nodeName] = 0;
        }
      } else {
        if (this._time < 0) {
          this._time = this.looping ? duration : 0.0;
          for (i = 0; i < nodes.length; i++) {
            node = nodes[i];
            nodeName = node._name;
            this._currKeyIndices[nodeName] = node._keys.length - 2;
          }
        }
      }
      var offset = delta >= 0 ? 1 : -1;
      var foundKey;
      for (i = 0; i < nodes.length; i++) {
        node = nodes[i];
        nodeName = node._name;
        keys = node._keys;
        interpKey = this._interpolatedKeyDict[nodeName];
        foundKey = false;
        if (keys.length !== 1) {
          for (var currKeyIndex = this._currKeyIndices[nodeName]; currKeyIndex < keys.length - 1 && currKeyIndex >= 0; currKeyIndex += offset) {
            k1 = keys[currKeyIndex];
            k2 = keys[currKeyIndex + 1];
            if (k1.time <= this._time && k2.time >= this._time) {
              alpha = (this._time - k1.time) / (k2.time - k1.time);
              interpKey._pos.lerp(k1.position, k2.position, alpha);
              interpKey._quat.slerp(k1.rotation, k2.rotation, alpha);
              interpKey._scale.lerp(k1.scale, k2.scale, alpha);
              interpKey._written = true;
              this._currKeyIndices[nodeName] = currKeyIndex;
              foundKey = true;
              break;
            }
          }
        }
        if (keys.length === 1 || !foundKey && this._time === 0.0 && this.looping) {
          interpKey._pos.copy(keys[0].position);
          interpKey._quat.copy(keys[0].rotation);
          interpKey._scale.copy(keys[0].scale);
          interpKey._written = true;
        }
      }
    }
  };
  Skeleton.prototype.blend = function(skel1, skel2, alpha) {
    var numNodes = this._interpolatedKeys.length;
    for (var i = 0; i < numNodes; i++) {
      var key1 = skel1._interpolatedKeys[i];
      var key2 = skel2._interpolatedKeys[i];
      var dstKey = this._interpolatedKeys[i];
      if (key1._written && key2._written) {
        dstKey._quat.slerp(key1._quat, skel2._interpolatedKeys[i]._quat, alpha);
        dstKey._pos.lerp(key1._pos, skel2._interpolatedKeys[i]._pos, alpha);
        dstKey._scale.lerp(key1._scale, key2._scale, alpha);
        dstKey._written = true;
      } else {
        if (key1._written) {
          dstKey._quat.copy(key1._quat);
          dstKey._pos.copy(key1._pos);
          dstKey._scale.copy(key1._scale);
          dstKey._written = true;
        } else {
          if (key2._written) {
            dstKey._quat.copy(key2._quat);
            dstKey._pos.copy(key2._pos);
            dstKey._scale.copy(key2._scale);
            dstKey._written = true;
          }
        }
      }
    }
  };
  Object.defineProperty(Skeleton.prototype, "animation", {get:function() {
    return this._animation;
  }, set:function(value) {
    this._animation = value;
    this.currentTime = 0;
  }});
  Skeleton.prototype.getAnimation = function() {
    return this._animation;
  };
  Object.defineProperty(Skeleton.prototype, "currentTime", {get:function() {
    return this._time;
  }, set:function(value) {
    this._time = value;
    var numNodes = this._interpolatedKeys.length;
    for (var i = 0; i < numNodes; i++) {
      var node = this._interpolatedKeys[i];
      var nodeName = node._name;
      this._currKeyIndices[nodeName] = 0;
    }
    this.addTime(0);
    this.updateGraph();
  }});
  Skeleton.prototype.getCurrentTime = function() {
    return this._time;
  };
  Skeleton.prototype.setCurrentTime = function(time) {
    this.currentTime = time;
  };
  Object.defineProperty(Skeleton.prototype, "numNodes", {get:function() {
    return this._interpolatedKeys.length;
  }});
  Skeleton.prototype.getNumNodes = function() {
    return this._interpolatedKeys.length;
  };
  Skeleton.prototype.setAnimation = function(animation) {
    this.animation = animation;
  };
  Skeleton.prototype.setGraph = function(graph) {
    var i;
    this.graph = graph;
    if (graph) {
      for (i = 0; i < this._interpolatedKeys.length; i++) {
        var interpKey = this._interpolatedKeys[i];
        var graphNode = graph.findByName(interpKey._name);
        this._interpolatedKeys[i].setTarget(graphNode);
      }
    } else {
      for (i = 0; i < this._interpolatedKeys.length; i++) {
        this._interpolatedKeys[i].setTarget(null);
      }
    }
  };
  Skeleton.prototype.updateGraph = function() {
    if (this.graph) {
      for (var i = 0; i < this._interpolatedKeys.length; i++) {
        var interpKey = this._interpolatedKeys[i];
        if (interpKey._written) {
          var transform = interpKey.getTarget();
          transform.localPosition.copy(interpKey._pos);
          transform.localRotation.copy(interpKey._quat);
          transform.localScale.copy(interpKey._scale);
          if (!transform._dirtyLocal) {
            transform._dirtify(true);
          }
          interpKey._written = false;
        }
      }
    }
  };
  Skeleton.prototype.setLooping = function(looping) {
    this.looping = looping;
  };
  Skeleton.prototype.getLooping = function() {
    return this.looping;
  };
  return {Skeleton:Skeleton};
}());
pc.extend(pc, function() {
  function hasAudio() {
    return typeof Audio !== "undefined";
  }
  function hasAudioContext() {
    return !!(typeof AudioContext !== "undefined" || typeof webkitAudioContext !== "undefined");
  }
  var SoundManager = function(options) {
    if (hasAudioContext() || options.forceWebAudioApi) {
      if (typeof AudioContext !== "undefined") {
        this.context = new AudioContext;
      } else {
        if (typeof webkitAudioContext !== "undefined") {
          this.context = new webkitAudioContext;
        }
      }
      if (this.context) {
        var context = this.context;
        if (pc.platform.ios) {
          var unlock = function() {
            var buffer = context.createBuffer(1, 1, 44100);
            var source = context.createBufferSource();
            source.buffer = buffer;
            source.connect(context.destination);
            source.start(0);
            source.disconnect();
            window.removeEventListener("touchend", unlock);
          };
          window.addEventListener("touchend", unlock);
        }
      }
    } else {
      console.warn("No support for 3D audio found");
    }
    if (!hasAudio()) {
      console.warn("No support for 2D audio found");
    }
    this.listener = new pc.Listener(this);
    this._volume = 1;
    this.suspended = false;
    pc.events.attach(this);
  };
  SoundManager.hasAudio = hasAudio;
  SoundManager.hasAudioContext = hasAudioContext;
  SoundManager.prototype = {suspend:function() {
    this.suspended = true;
    this.fire("suspend");
  }, resume:function() {
    this.suspended = false;
    this.fire("resume");
  }, destroy:function() {
    this.fire("destroy");
    if (this.context && this.context.close) {
      this.context.close();
      this.context = null;
    }
  }, getListener:function() {
    console.warn('DEPRECATED: getListener is deprecated. Get the "listener" field instead.');
    return this.listener;
  }, getVolume:function() {
    console.warn('DEPRECATED: getVolume is deprecated. Get the "volume" property instead.');
    return this.volume;
  }, setVolume:function(volume) {
    console.warn('DEPRECATED: setVolume is deprecated. Set the "volume" property instead.');
    this.volume = volume;
  }, playSound:function(sound, options) {
    options = options || {};
    var channel = null;
    if (pc.Channel) {
      channel = new pc.Channel(this, sound, options);
      channel.play();
    }
    return channel;
  }, playSound3d:function(sound, position, options) {
    options = options || {};
    var channel = null;
    if (pc.Channel3d) {
      channel = new pc.Channel3d(this, sound, options);
      channel.setPosition(position);
      if (options.volume) {
        channel.setVolume(options.volume);
      }
      if (options.loop) {
        channel.setLoop(options.loop);
      }
      if (options.maxDistance) {
        channel.setMaxDistance(options.maxDistance);
      }
      if (options.minDistance) {
        channel.setMinDistance(options.minDistance);
      }
      if (options.rollOffFactor) {
        channel.setRollOffFactor(options.rollOffFactor);
      }
      if (options.distanceModel) {
        channel.setDistanceModel(options.distanceModel);
      }
      channel.play();
    }
    return channel;
  }};
  Object.defineProperty(SoundManager.prototype, "volume", {get:function() {
    return this._volume;
  }, set:function(volume) {
    volume = pc.math.clamp(volume, 0, 1);
    this._volume = volume;
    this.fire("volumechange", volume);
  }});
  pc.AudioManager = SoundManager;
  return {SoundManager:SoundManager};
}());
pc.extend(pc, function() {
  var Sound = function(resource) {
    if (resource instanceof Audio) {
      this.audio = resource;
    } else {
      this.buffer = resource;
    }
  };
  Object.defineProperty(Sound.prototype, "duration", {get:function() {
    var duration = 0;
    if (this.buffer) {
      duration = this.buffer.duration;
    } else {
      if (this.audio) {
        duration = this.audio.duration;
      }
    }
    return duration || 0;
  }});
  return {Sound:Sound};
}());
pc.extend(pc, function() {
  var Listener = function(manager) {
    this.position = new pc.Vec3;
    this.velocity = new pc.Vec3;
    this.orientation = new pc.Mat4;
    if (pc.AudioManager.hasAudioContext()) {
      this.listener = manager.context.listener;
    }
  };
  Listener.prototype = {getPosition:function() {
    return this.position;
  }, setPosition:function(position) {
    this.position.copy(position);
    if (this.listener) {
      this.listener.setPosition(position.x, position.y, position.z);
    }
  }, getVelocity:function() {
    return this.velocity;
  }, setVelocity:function(velocity) {
    this.velocity.copy(velocity);
    if (this.listener) {
      this.listener.setPosition(velocity.x, velocity.y, velocity.z);
    }
  }, setOrientation:function(orientation) {
    this.orientation.copy(orientation);
    if (this.listener) {
      this.listener.setOrientation(-orientation.data[8], -orientation.data[9], -orientation.data[10], orientation.data[4], orientation.data[5], orientation.data[6]);
    }
  }, getOrientation:function() {
    return this.orientation;
  }};
  return {Listener:Listener};
}());
pc.extend(pc, function() {
  var SoundInstance;
  var STATE_PLAYING = 0;
  var STATE_PAUSED = 1;
  var STATE_STOPPED = 2;
  var capTime = function(time, duration) {
    return time % duration || 0;
  };
  if (pc.SoundManager.hasAudioContext()) {
    SoundInstance = function(manager, sound, options) {
      pc.events.attach(this);
      options = options || {};
      this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;
      this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;
      this._loop = !!(options.loop !== undefined ? options.loop : false);
      this._sound = sound;
      this._state = STATE_STOPPED;
      this._suspended = false;
      this._suspendEndEvent = false;
      this._suspendInstanceEvents = false;
      this._startTime = Math.max(0, Number(options.startTime) || 0);
      this._duration = Math.max(0, Number(options.duration) || 0);
      this._startedAt = 0;
      this._startOffset = null;
      this._currentTime = 0;
      this._currentOffset = 0;
      this._playWhenLoaded = true;
      this._manager = manager;
      this._inputNode = null;
      this._connectorNode = null;
      this._firstNode = null;
      this._lastNode = null;
      this._initializeNodes();
      this._onPlayCallback = options.onPlay;
      this._onPauseCallback = options.onPause;
      this._onResumeCallback = options.onResume;
      this._onStopCallback = options.onStop;
      this._onEndCallback = options.onEnd;
      this._endedHandler = this._onEnded.bind(this);
      this.source = null;
    };
    SoundInstance.prototype = {_initializeNodes:function() {
      this.gain = this._manager.context.createGain();
      this._inputNode = this.gain;
      this._connectorNode = this.gain;
      this._connectorNode.connect(this._manager.context.destination);
    }, play:function() {
      if (this._state !== STATE_STOPPED) {
        this.stop();
      }
      if (!this.source) {
        this._createSource();
      }
      var offset = capTime(this._startOffset, this.duration);
      offset = capTime(this._startTime + offset, this._sound.duration);
      this._startOffset = null;
      if (this._duration) {
        this.source.start(0, offset, this._duration);
      } else {
        this.source.start(0, offset);
      }
      this._startedAt = this._manager.context.currentTime;
      this._currentTime = 0;
      this._currentOffset = offset;
      this._state = STATE_PLAYING;
      this._playWhenLoaded = false;
      this.volume = this._volume;
      this.loop = this._loop;
      this.pitch = this._pitch;
      this._manager.on("volumechange", this._onManagerVolumeChange, this);
      this._manager.on("suspend", this._onManagerSuspend, this);
      this._manager.on("resume", this._onManagerResume, this);
      this._manager.on("destroy", this._onManagerDestroy, this);
      if (this._manager.suspended) {
        this._onManagerSuspend();
      }
      if (!this._suspendInstanceEvents) {
        this._onPlay();
      }
      return true;
    }, pause:function() {
      if (this._state !== STATE_PLAYING || !this.source) {
        return false;
      }
      this._updateCurrentTime();
      this._state = STATE_PAUSED;
      this._suspendEndEvent = true;
      this.source.stop(0);
      this.source = null;
      this._playWhenLoaded = false;
      this._startOffset = null;
      if (!this._suspendInstanceEvents) {
        this._onPause();
      }
      return true;
    }, resume:function() {
      if (this._state !== STATE_PAUSED) {
        return false;
      }
      if (!this.source) {
        this._createSource();
      }
      var offset = this.currentTime;
      if (this._startOffset !== null) {
        offset = capTime(this._startOffset, this.duration);
        offset = capTime(this._startTime + offset, this._sound.duration);
        this._startOffset = null;
      }
      if (this._duration) {
        this.source.start(0, offset, this._duration);
      } else {
        this.source.start(0, offset);
      }
      this._state = STATE_PLAYING;
      this._startedAt = this._manager.context.currentTime;
      this._currentOffset = offset;
      this.volume = this._volume;
      this.loop = this._loop;
      this.pitch = this._pitch;
      this._playWhenLoaded = false;
      if (!this._suspendInstanceEvents) {
        this._onResume();
      }
      return true;
    }, stop:function() {
      if (this._state === STATE_STOPPED || !this.source) {
        return false;
      }
      this._manager.off("volumechange", this._onManagerVolumeChange, this);
      this._manager.off("suspend", this._onManagerSuspend, this);
      this._manager.off("resume", this._onManagerResume, this);
      this._manager.off("destroy", this._onManagerDestroy, this);
      this._startedAt = 0;
      this._currentTime = 0;
      this._currentOffset = 0;
      this._startOffset = null;
      this._playWhenLoaded = false;
      this._suspendEndEvent = true;
      if (this._state === STATE_PLAYING) {
        this.source.stop(0);
      }
      this.source = null;
      this._state = STATE_STOPPED;
      if (!this._suspendInstanceEvents) {
        this._onStop();
      }
      return true;
    }, setExternalNodes:function(firstNode, lastNode) {
      if (!firstNode) {
        console.error("The firstNode must be a valid Audio Node");
        return;
      }
      if (!lastNode) {
        lastNode = firstNode;
      }
      var speakers = this._manager.context.destination;
      if (this._firstNode !== firstNode) {
        if (this._firstNode) {
          this._connectorNode.disconnect(this._firstNode);
        } else {
          this._connectorNode.disconnect(speakers);
        }
        this._firstNode = firstNode;
        this._connectorNode.connect(firstNode);
      }
      if (this._lastNode !== lastNode) {
        if (this._lastNode) {
          this._lastNode.disconnect(speakers);
        }
        this._lastNode = lastNode;
        this._lastNode.connect(speakers);
      }
    }, clearExternalNodes:function() {
      var speakers = this._manager.context.destination;
      if (this._firstNode) {
        this._connectorNode.disconnect(this._firstNode);
        this._firstNode = null;
      }
      if (this._lastNode) {
        this._lastNode.disconnect(speakers);
        this._lastNode = null;
      }
      this._connectorNode.connect(speakers);
    }, getExternalNodes:function() {
      return [this._firstNode, this._lastNode];
    }, _createSource:function() {
      if (!this._sound) {
        return null;
      }
      var context = this._manager.context;
      if (this._sound.buffer) {
        this.source = context.createBufferSource();
        this.source.buffer = this._sound.buffer;
        this.source.connect(this._inputNode);
        this.source.onended = this._endedHandler;
        this.source.loopStart = capTime(this._startTime, this.source.buffer.duration);
        if (this._duration) {
          this.source.loopEnd = Math.max(this.source.loopStart, capTime(this._startTime + this._duration, this.source.buffer.duration));
        }
      }
      return this.source;
    }, _updateCurrentTime:function() {
      this._currentTime = capTime((this._manager.context.currentTime - this._startedAt) * this.pitch + this._currentOffset, this.duration);
    }, _onManagerDestroy:function() {
      if (this.source && this.isPlaying) {
        this.source.stop(0);
        this.source = null;
      }
    }};
    Object.defineProperty(SoundInstance.prototype, "volume", {get:function() {
      return this._volume;
    }, set:function(volume) {
      volume = pc.math.clamp(volume, 0, 1);
      this._volume = volume;
      if (this.gain) {
        this.gain.gain.value = volume * this._manager.volume;
      }
    }});
    Object.defineProperty(SoundInstance.prototype, "pitch", {get:function() {
      return this._pitch;
    }, set:function(pitch) {
      this._currentOffset = this.currentTime;
      this._startedAt = this._manager.context.currentTime;
      this._pitch = Math.max(Number(pitch) || 0, 0.01);
      if (this.source) {
        this.source.playbackRate.value = this._pitch;
      }
    }});
    Object.defineProperty(SoundInstance.prototype, "loop", {get:function() {
      return this._loop;
    }, set:function(loop) {
      this._loop = !!loop;
      if (this.source) {
        this.source.loop = this._loop;
      }
    }});
    Object.defineProperty(SoundInstance.prototype, "sound", {get:function() {
      return this._sound;
    }, set:function(value) {
      this._sound = value;
      if (!this.isStopped) {
        this.stop();
      } else {
        this._createSource();
      }
    }});
    Object.defineProperty(SoundInstance.prototype, "currentTime", {get:function() {
      if (this._startOffset !== null) {
        return this._startOffset;
      }
      if (this.isPaused) {
        return this._currentTime;
      }
      if (this.isStopped || !this.source) {
        return 0;
      }
      this._updateCurrentTime();
      return this._currentTime;
    }, set:function(value) {
      if (value < 0) {
        return;
      }
      if (this.isPlaying) {
        this.stop();
        var suspend = this._suspendInstanceEvents;
        this._suspendInstanceEvents = true;
        this._startOffset = value;
        this.play();
        this._suspendInstanceEvents = suspend;
      } else {
        this._startOffset = value;
        this._currentTime = value;
      }
    }});
  } else {
    if (pc.SoundManager.hasAudio()) {
      SoundInstance = function(manager, resource, options) {
        pc.events.attach(this);
        options = options || {};
        this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;
        this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;
        this._loop = !!(options.loop !== undefined ? options.loop : false);
        this._sound = resource;
        this._state = STATE_STOPPED;
        this._suspended = false;
        this._suspendEndEvent = false;
        this._suspendInstanceEvents = false;
        this._playWhenLoaded = true;
        this._startTime = Math.max(0, Number(options.startTime) || 0);
        this._duration = Math.max(0, Number(options.duration) || 0);
        this._startOffset = null;
        this._isReady = false;
        this._manager = manager;
        this._loadedMetadataHandler = this._onLoadedMetadata.bind(this);
        this._timeUpdateHandler = this._onTimeUpdate.bind(this);
        this._endedHandler = this._onEnded.bind(this);
        this._onPlayCallback = options.onPlay;
        this._onPauseCallback = options.onPause;
        this._onResumeCallback = options.onResume;
        this._onStopCallback = options.onStop;
        this._onEndCallback = options.onEnd;
        this.source = null;
        this._createSource();
      };
      SoundInstance.prototype = {play:function() {
        if (this._state !== STATE_STOPPED) {
          this.stop();
        }
        if (!this.source) {
          if (!this._createSource()) {
            return false;
          }
        }
        this.volume = this._volume;
        this.pitch = this._pitch;
        this.loop = this._loop;
        this.source.play();
        this._state = STATE_PLAYING;
        this._playWhenLoaded = false;
        this._manager.on("volumechange", this._onManagerVolumeChange, this);
        this._manager.on("suspend", this._onManagerSuspend, this);
        this._manager.on("resume", this._onManagerResume, this);
        this._manager.on("destroy", this._onManagerDestroy, this);
        if (this._manager.suspended) {
          this._onManagerSuspend();
        }
        if (!this._suspendInstanceEvents) {
          this._onPlay();
        }
        return true;
      }, pause:function() {
        if (!this.source || this._state !== STATE_PLAYING) {
          return false;
        }
        this._suspendEndEvent = true;
        this.source.pause();
        this._playWhenLoaded = false;
        this._state = STATE_PAUSED;
        this._startOffset = null;
        if (!this._suspendInstanceEvents) {
          this._onPause();
        }
        return true;
      }, resume:function() {
        if (!this.source || this._state !== STATE_PAUSED) {
          return false;
        }
        this._state = STATE_PLAYING;
        this._playWhenLoaded = false;
        if (this.source.paused) {
          this.source.play();
          if (!this._suspendInstanceEvents) {
            this._onResume();
          }
        }
        return true;
      }, stop:function() {
        if (!this.source || this._state === STATE_STOPPED) {
          return false;
        }
        this._manager.off("volumechange", this._onManagerVolumeChange, this);
        this._manager.off("suspend", this._onManagerSuspend, this);
        this._manager.off("resume", this._onManagerResume, this);
        this._manager.off("destroy", this._onManagerDestroy, this);
        this._suspendEndEvent = true;
        this.source.pause();
        this._playWhenLoaded = false;
        this._state = STATE_STOPPED;
        this._startOffset = null;
        if (!this._suspendInstanceEvents) {
          this._onStop();
        }
        return true;
      }, setExternalNodes:function() {
      }, clearExternalNodes:function() {
      }, getExternalNodes:function() {
        return [null, null];
      }, _onLoadedMetadata:function() {
        this.source.removeEventListener("loadedmetadata", this._loadedMetadataHandler);
        this._isReady = true;
        var offset = capTime(this._startOffset, this.duration);
        offset = capTime(this._startTime + offset, this._sound.duration);
        this._startOffset = null;
        this.source.currentTime = offset;
      }, _createSource:function() {
        if (this._sound && this._sound.audio) {
          this._isReady = false;
          this.source = this._sound.audio.cloneNode(true);
          this.source.addEventListener("loadedmetadata", this._loadedMetadataHandler);
          this.source.addEventListener("timeupdate", this._timeUpdateHandler);
          this.source.onended = this._endedHandler;
        }
        return this.source;
      }, _onTimeUpdate:function() {
        if (!this._duration) {
          return;
        }
        if (this.source.currentTime > capTime(this._startTime + this._duration, this.source.duration)) {
          if (this.loop) {
            this.source.currentTime = capTime(this._startTime, this.source.duration);
          } else {
            this.source.removeEventListener("timeupdate", this._timeUpdateHandler);
            this.source.pause();
            this._onEnded();
          }
        }
      }, _onManagerDestroy:function() {
        if (this.source) {
          this.source.pause();
        }
      }};
      Object.defineProperty(SoundInstance.prototype, "volume", {get:function() {
        return this._volume;
      }, set:function(volume) {
        volume = pc.math.clamp(volume, 0, 1);
        this._volume = volume;
        if (this.source) {
          this.source.volume = volume * this._manager.volume;
        }
      }});
      Object.defineProperty(SoundInstance.prototype, "pitch", {get:function() {
        return this._pitch;
      }, set:function(pitch) {
        this._pitch = Math.max(Number(pitch) || 0, 0.01);
        if (this.source) {
          this.source.playbackRate = this._pitch;
        }
      }});
      Object.defineProperty(SoundInstance.prototype, "loop", {get:function() {
        return this._loop;
      }, set:function(loop) {
        this._loop = !!loop;
        if (this.source) {
          this.source.loop = this._loop;
        }
      }});
      Object.defineProperty(SoundInstance.prototype, "sound", {get:function() {
        return this._sound;
      }, set:function(value) {
        this.stop();
        this._sound = value;
      }});
      Object.defineProperty(SoundInstance.prototype, "currentTime", {get:function() {
        if (this._startOffset !== null) {
          return this._startOffset;
        }
        if (this.isStopped || !this.source) {
          return 0;
        }
        return this.source.currentTime - this._startTime;
      }, set:function(value) {
        if (value < 0) {
          return;
        }
        this._startOffset = value;
        if (this.source && this._isReady) {
          this.source.currentTime = capTime(this._startTime + capTime(value, this.duration), this._sound.duration);
          this._startOffset = null;
        }
      }});
    } else {
      SoundInstance = function() {
      };
    }
  }
  pc.extend(SoundInstance.prototype, {_onPlay:function() {
    this.fire("play");
    if (this._onPlayCallback) {
      this._onPlayCallback(this);
    }
  }, _onPause:function() {
    this.fire("pause");
    if (this._onPauseCallback) {
      this._onPauseCallback(this);
    }
  }, _onResume:function() {
    this.fire("resume");
    if (this._onResumeCallback) {
      this._onResumeCallback(this);
    }
  }, _onStop:function() {
    this.fire("stop");
    if (this._onStopCallback) {
      this._onStopCallback(this);
    }
  }, _onEnded:function() {
    if (this._suspendEndEvent) {
      this._suspendEndEvent = false;
      return;
    }
    this.fire("end");
    if (this._onEndCallback) {
      this._onEndCallback(this);
    }
    this.stop();
  }, _onManagerVolumeChange:function() {
    this.volume = this._volume;
  }, _onManagerSuspend:function() {
    if (this.isPlaying && !this._suspended) {
      this._suspended = true;
      this.pause();
    }
  }, _onManagerResume:function() {
    if (this._suspended) {
      this._suspended = false;
      this.resume();
    }
  }});
  Object.defineProperty(SoundInstance.prototype, "startTime", {get:function() {
    return this._startTime;
  }, set:function(value) {
    this._startTime = Math.max(0, Number(value) || 0);
    var isPlaying = this.isPlaying;
    this.stop();
    if (isPlaying) {
      this.play();
    }
  }});
  Object.defineProperty(SoundInstance.prototype, "duration", {get:function() {
    if (!this._sound) {
      return 0;
    }
    if (this._duration) {
      return capTime(this._duration, this._sound.duration);
    } else {
      return this._sound.duration;
    }
  }, set:function(value) {
    this._duration = Math.max(0, Number(value) || 0);
    var isPlaying = this.isPlaying;
    this.stop();
    if (isPlaying) {
      this.play();
    }
  }});
  Object.defineProperty(SoundInstance.prototype, "isPlaying", {get:function() {
    return this._state === STATE_PLAYING;
  }});
  Object.defineProperty(SoundInstance.prototype, "isPaused", {get:function() {
    return this._state === STATE_PAUSED;
  }});
  Object.defineProperty(SoundInstance.prototype, "isStopped", {get:function() {
    return this._state === STATE_STOPPED;
  }});
  Object.defineProperty(SoundInstance.prototype, "isSuspended", {get:function() {
    return this._suspended;
  }});
  return {SoundInstance:SoundInstance};
}());
pc.extend(pc, function() {
  var MAX_DISTANCE = 10000;
  var SoundInstance3d;
  if (pc.SoundManager.hasAudioContext()) {
    SoundInstance3d = function(manager, sound, options) {
      options = options || {};
      this._position = new pc.Vec3;
      if (options.position) {
        this.position = options.position;
      }
      this._velocity = new pc.Vec3;
      if (options.velocity) {
        this.velocity = options.velocity;
      }
      this.maxDistance = options.maxDistance !== undefined ? Number(options.maxDistance) : MAX_DISTANCE;
      this.refDistance = options.refDistance !== undefined ? Number(options.refDistance) : 1;
      this.rollOffFactor = options.rollOffFactor !== undefined ? Number(options.rollOffFactor) : 1;
      this.distanceModel = options.distanceModel !== undefined ? options.distanceModel : pc.DISTANCE_LINEAR;
    };
    SoundInstance3d = pc.inherits(SoundInstance3d, pc.SoundInstance);
    SoundInstance3d.prototype = pc.extend(SoundInstance3d.prototype, {_initializeNodes:function() {
      this.gain = this._manager.context.createGain();
      this.panner = this._manager.context.createPanner();
      this.panner.connect(this.gain);
      this._inputNode = this.panner;
      this._connectorNode = this.gain;
      this._connectorNode.connect(this._manager.context.destination);
    }});
    Object.defineProperty(SoundInstance3d.prototype, "position", {get:function() {
      return this._position;
    }, set:function(position) {
      this._position.copy(position);
      this.panner.setPosition(position.x, position.y, position.z);
    }});
    Object.defineProperty(SoundInstance3d.prototype, "velocity", {get:function() {
      return this._velocity;
    }, set:function(velocity) {
      this._velocity.copy(velocity);
      this.panner.setVelocity(velocity.x, velocity.y, velocity.z);
    }});
    Object.defineProperty(SoundInstance3d.prototype, "maxDistance", {get:function() {
      return this.panner.maxDistance;
    }, set:function(value) {
      this.panner.maxDistance = value;
    }});
    Object.defineProperty(SoundInstance3d.prototype, "refDistance", {get:function() {
      return this.panner.refDistance;
    }, set:function(value) {
      this.panner.refDistance = value;
    }});
    Object.defineProperty(SoundInstance3d.prototype, "rollOffFactor", {get:function() {
      return this.panner.rolloffFactor;
    }, set:function(value) {
      this.panner.rolloffFactor = value;
    }});
    Object.defineProperty(SoundInstance3d.prototype, "distanceModel", {get:function() {
      return this.panner.distanceModel;
    }, set:function(value) {
      this.panner.distanceModel = value;
    }});
  } else {
    if (pc.SoundManager.hasAudio()) {
      var offset = new pc.Vec3;
      var fallOff = function(posOne, posTwo, refDistance, maxDistance, rollOffFactor, distanceModel) {
        offset = offset.sub2(posOne, posTwo);
        var distance = offset.length();
        if (distance < refDistance) {
          return 1;
        } else {
          if (distance > maxDistance) {
            return 0;
          } else {
            var result = 0;
            if (distanceModel === pc.DISTANCE_LINEAR) {
              result = 1 - rollOffFactor * (distance - refDistance) / (maxDistance - refDistance);
            } else {
              if (distanceModel === pc.DISTANCE_INVERSE) {
                result = refDistance / (refDistance + rollOffFactor * (distance - refDistance));
              } else {
                if (distanceModel === pc.DISTANCE_EXPONENTIAL) {
                  result = Math.pow(distance / refDistance, -rollOffFactor);
                }
              }
            }
            return pc.math.clamp(result, 0, 1);
          }
        }
      };
      SoundInstance3d = function(manager, sound, options) {
        options = options || {};
        this._position = new pc.Vec3;
        if (options.position) {
          this.position = options.position;
        }
        this._velocity = new pc.Vec3;
        if (options.velocity) {
          this.velocity = options.velocity;
        }
        this._maxDistance = options.maxDistance !== undefined ? Number(options.maxDistance) : MAX_DISTANCE;
        this._refDistance = options.refDistance !== undefined ? Number(options.refDistance) : 1;
        this._rollOffFactor = options.rollOffFactor !== undefined ? Number(options.rollOffFactor) : 1;
        this._distanceModel = options.distanceModel !== undefined ? options.distanceModel : pc.DISTANCE_LINEAR;
      };
      SoundInstance3d = pc.inherits(SoundInstance3d, pc.SoundInstance);
      Object.defineProperty(SoundInstance3d.prototype, "position", {get:function() {
        return this._position;
      }, set:function(position) {
        this._position.copy(position);
        if (this.source) {
          var listener = this._manager.listener;
          var lpos = listener.getPosition();
          var factor = fallOff(lpos, this._position, this.refDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);
          var v = this.volume;
          this.source.volume = v * factor * this._manager.volume;
        }
      }});
      Object.defineProperty(SoundInstance3d.prototype, "velocity", {get:function() {
        return this._velocity;
      }, set:function(velocity) {
        this._velocity.copy(velocity);
      }});
      Object.defineProperty(SoundInstance3d.prototype, "maxDistance", {get:function() {
        return this._maxDistance;
      }, set:function(value) {
        this._maxDistance = value;
      }});
      Object.defineProperty(SoundInstance3d.prototype, "refDistance", {get:function() {
        return this._refDistance;
      }, set:function(value) {
        this._refDistance = value;
      }});
      Object.defineProperty(SoundInstance3d.prototype, "rollOffFactor", {get:function() {
        return this._rollOffFactor;
      }, set:function(value) {
        this._rollOffFactor = value;
      }});
      Object.defineProperty(SoundInstance3d.prototype, "distanceModel", {get:function() {
        return this._distanceModel;
      }, set:function(value) {
        this._distanceModel = value;
      }});
    } else {
      SoundInstance3d = function() {
      };
    }
  }
  return {SoundInstance3d:SoundInstance3d};
}());
pc.extend(pc, function() {
  var Channel;
  if (pc.AudioManager.hasAudioContext()) {
    Channel = function(manager, sound, options) {
      options = options || {};
      this.volume = options.volume === undefined ? 1 : options.volume;
      this.loop = options.loop === undefined ? false : options.loop;
      this.pitch = options.pitch === undefined ? 1 : options.pitch;
      this.sound = sound;
      this.paused = false;
      this.suspended = false;
      this.startTime = 0;
      this.startOffset = 0;
      this.manager = manager;
      this.source = null;
      var context = manager.context;
      this.gain = context.createGain();
    };
    Channel.prototype = {play:function() {
      if (this.source) {
        throw new Error("Call stop() before calling play()");
      }
      this._createSource();
      if (!this.source) {
        return;
      }
      this.startTime = this.manager.context.currentTime;
      this.source.start(0, this.startOffset % this.source.buffer.duration);
      this.setVolume(this.volume);
      this.setLoop(this.loop);
      this.setPitch(this.pitch);
      this.manager.on("volumechange", this.onManagerVolumeChange, this);
      this.manager.on("suspend", this.onManagerSuspend, this);
      this.manager.on("resume", this.onManagerResume, this);
      if (this.manager.suspended) {
        this.onManagerSuspend();
      }
    }, pause:function() {
      if (this.source) {
        this.paused = true;
        this.startOffset += this.manager.context.currentTime - this.startTime;
        this.source.stop(0);
        this.source = null;
      }
    }, unpause:function() {
      if (this.source || !this.paused) {
        console.warn("Call pause() before unpausing.");
        return;
      }
      this._createSource();
      if (!this.source) {
        return;
      }
      this.startTime = this.manager.context.currentTime;
      this.source.start(0, this.startOffset % this.source.buffer.duration);
      this.setVolume(this.volume);
      this.setLoop(this.loop);
      this.setPitch(this.pitch);
      this.paused = false;
    }, stop:function() {
      if (this.source) {
        this.source.stop(0);
        this.source = null;
      }
      this.manager.off("volumechange", this.onManagerVolumeChange, this);
      this.manager.off("suspend", this.onManagerSuspend, this);
      this.manager.off("resume", this.onManagerResume, this);
    }, setLoop:function(loop) {
      this.loop = loop;
      if (this.source) {
        this.source.loop = loop;
      }
    }, setVolume:function(volume) {
      volume = pc.math.clamp(volume, 0, 1);
      this.volume = volume;
      if (this.gain) {
        this.gain.gain.value = volume * this.manager.volume;
      }
    }, setPitch:function(pitch) {
      this.pitch = pitch;
      if (this.source) {
        this.source.playbackRate.value = pitch;
      }
    }, isPlaying:function() {
      return !this.paused && this.source.playbackState === this.source.PLAYING_STATE;
    }, getDuration:function() {
      if (this.source) {
        return this.source.buffer.duration;
      } else {
        return 0;
      }
    }, _createSource:function() {
      var context = this.manager.context;
      if (this.sound.buffer) {
        this.source = context.createBufferSource();
        this.source.buffer = this.sound.buffer;
        this.source.connect(this.gain);
        this.gain.connect(context.destination);
        if (!this.loop) {
          this.source.onended = this.pause.bind(this);
        }
      }
    }};
  } else {
    if (pc.AudioManager.hasAudio()) {
      Channel = function(manager, sound, options) {
        this.volume = options.volume || 1;
        this.loop = options.loop || false;
        this.sound = sound;
        this.pitch = options.pitch !== undefined ? options.pitch : 1;
        this.paused = false;
        this.suspended = false;
        this.manager = manager;
        if (sound.audio) {
          this.source = sound.audio.cloneNode(false);
          this.source.pause();
        }
      };
      Channel.prototype = {play:function() {
        if (this.source) {
          this.paused = false;
          this.setVolume(this.volume);
          this.setLoop(this.loop);
          this.setPitch(this.pitch);
          this.source.play();
        }
        this.manager.on("volumechange", this.onManagerVolumeChange, this);
        this.manager.on("suspend", this.onManagerSuspend, this);
        this.manager.on("resume", this.onManagerResume, this);
        if (this.manager.suspended) {
          this.onManagerSuspend();
        }
      }, pause:function() {
        if (this.source) {
          this.paused = true;
          this.source.pause();
        }
      }, unpause:function() {
        if (this.source) {
          this.paused = false;
          this.source.play();
        }
      }, stop:function() {
        if (this.source) {
          this.source.pause();
        }
        this.manager.off("volumechange", this.onManagerVolumeChange, this);
        this.manager.off("suspend", this.onManagerSuspend, this);
        this.manager.off("resume", this.onManagerResume, this);
      }, setVolume:function(volume) {
        volume = pc.math.clamp(volume, 0, 1);
        this.volume = volume;
        if (this.source) {
          this.source.volume = volume * this.manager.volume;
        }
      }, setLoop:function(loop) {
        this.loop = loop;
        if (this.source) {
          this.source.loop = loop;
        }
      }, setPitch:function(pitch) {
        this.pitch = pitch;
        if (this.source) {
          this.source.playbackRate = pitch;
        }
      }, getDuration:function() {
        if (this.source) {
          var d = this.source.duration;
          if (d === d) {
            return d;
          }
        }
        return 0;
      }, isPlaying:function() {
        return !this.source.paused;
      }};
    } else {
      Channel = function() {
      };
    }
  }
  pc.extend(Channel.prototype, {getVolume:function() {
    return this.volume;
  }, getLoop:function() {
    return this.loop;
  }, getPitch:function() {
    return this.pitch;
  }, onManagerVolumeChange:function() {
    this.setVolume(this.getVolume());
  }, onManagerSuspend:function() {
    if (this.isPlaying() && !this.suspended) {
      this.suspended = true;
      this.pause();
    }
  }, onManagerResume:function() {
    if (this.suspended) {
      this.suspended = false;
      this.unpause();
    }
  }});
  return {Channel:Channel};
}());
pc.extend(pc, function() {
  var MAX_DISTANCE = 10000;
  var Channel3d;
  if (pc.AudioManager.hasAudioContext()) {
    Channel3d = function(manager, sound, options) {
      this.position = new pc.Vec3;
      this.velocity = new pc.Vec3;
      var context = manager.context;
      this.panner = context.createPanner();
    };
    Channel3d = pc.inherits(Channel3d, pc.Channel);
    Channel3d.prototype = pc.extend(Channel3d.prototype, {getPosition:function() {
      return this.position;
    }, setPosition:function(position) {
      this.position.copy(position);
      this.panner.setPosition(position.x, position.y, position.z);
    }, getVelocity:function() {
      return this.velocity;
    }, setVelocity:function(velocity) {
      this.velocity.copy(velocity);
      this.panner.setVelocity(velocity.x, velocity.y, velocity.z);
    }, getMaxDistance:function() {
      return this.panner.maxDistance;
    }, setMaxDistance:function(max) {
      this.panner.maxDistance = max;
    }, getMinDistance:function() {
      return this.panner.refDistance;
    }, setMinDistance:function(min) {
      this.panner.refDistance = min;
    }, getRollOffFactor:function() {
      return this.panner.rolloffFactor;
    }, setRollOffFactor:function(factor) {
      this.panner.rolloffFactor = factor;
    }, getDistanceModel:function() {
      return this.pannel.distanceModel;
    }, setDistanceModel:function(distanceModel) {
      this.panner.distanceModel = distanceModel;
    }, _createSource:function() {
      var context = this.manager.context;
      this.source = context.createBufferSource();
      this.source.buffer = this.sound.buffer;
      this.source.connect(this.panner);
      this.panner.connect(this.gain);
      this.gain.connect(context.destination);
      if (!this.loop) {
        this.source.onended = this.pause.bind(this);
      }
    }});
  } else {
    if (pc.AudioManager.hasAudio()) {
      var offset = new pc.Vec3;
      var fallOff = function(posOne, posTwo, refDistance, maxDistance, rolloffFactor, distanceModel) {
        offset = offset.sub2(posOne, posTwo);
        var distance = offset.length();
        if (distance < refDistance) {
          return 1;
        } else {
          if (distance > maxDistance) {
            return 0;
          } else {
            var result = 0;
            if (distanceModel === pc.DISTANCE_LINEAR) {
              result = 1 - rolloffFactor * (distance - refDistance) / (maxDistance - refDistance);
            } else {
              if (distanceModel === pc.DISTANCE_INVERSE) {
                result = refDistance / (refDistance + rolloffFactor * (distance - refDistance));
              } else {
                if (distanceModel === pc.DISTANCE_EXPONENTIAL) {
                  result = Math.pow(distance / refDistance, -rolloffFactor);
                }
              }
            }
            return pc.math.clamp(result, 0, 1);
          }
        }
      };
      Channel3d = function(manager, sound) {
        this.position = new pc.Vec3;
        this.velocity = new pc.Vec3;
        this.maxDistance = MAX_DISTANCE;
        this.minDistance = 1;
        this.rollOffFactor = 1;
        this.distanceModel = pc.DISTANCE_INVERSE;
      };
      Channel3d = pc.inherits(Channel3d, pc.Channel);
      Channel3d.prototype = pc.extend(Channel3d.prototype, {getPosition:function() {
        return this.position;
      }, setPosition:function(position) {
        this.position.copy(position);
        if (this.source) {
          var listener = this.manager.listener;
          var lpos = listener.getPosition();
          var factor = fallOff(lpos, this.position, this.minDistance, this.maxDistance, this.rollOffFactor, this.distanceModel);
          var v = this.getVolume();
          this.source.volume = v * factor;
        }
      }, getVelocity:function() {
        return this.velocity;
      }, setVelocity:function(velocity) {
        this.velocity.copy(velocity);
      }, getMaxDistance:function() {
        return this.maxDistance;
      }, setMaxDistance:function(max) {
        this.maxDistance = max;
      }, getMinDistance:function() {
        return this.minDistance;
      }, setMinDistance:function(min) {
        this.minDistance = min;
      }, getRollOffFactor:function() {
        return this.rollOffFactor;
      }, setRollOffFactor:function(factor) {
        this.rollOffFactor = factor;
      }, getDistanceModel:function() {
        return this.distanceModel;
      }, setDistanceModel:function(distanceModel) {
        this.distanceModel = distanceModel;
      }});
    } else {
      Channel3d = function() {
      };
    }
  }
  return {Channel3d:Channel3d};
}());
(function() {
  var enums = {ACTION_MOUSE:"mouse", ACTION_KEYBOARD:"keyboard", ACTION_GAMEPAD:"gamepad", AXIS_MOUSE_X:"mousex", AXIS_MOUSE_Y:"mousey", AXIS_PAD_L_X:"padlx", AXIS_PAD_L_Y:"padly", AXIS_PAD_R_X:"padrx", AXIS_PAD_R_Y:"padry", AXIS_KEY:"key", EVENT_KEYDOWN:"keydown", EVENT_KEYUP:"keyup", EVENT_MOUSEDOWN:"mousedown", EVENT_MOUSEMOVE:"mousemove", EVENT_MOUSEUP:"mouseup", EVENT_MOUSEWHEEL:"mousewheel", EVENT_TOUCHSTART:"touchstart", EVENT_TOUCHEND:"touchend", EVENT_TOUCHMOVE:"touchmove", EVENT_TOUCHCANCEL:"touchcancel", 
  KEY_BACKSPACE:8, KEY_TAB:9, KEY_RETURN:13, KEY_ENTER:13, KEY_SHIFT:16, KEY_CONTROL:17, KEY_ALT:18, KEY_PAUSE:19, KEY_CAPS_LOCK:20, KEY_ESCAPE:27, KEY_SPACE:32, KEY_PAGE_UP:33, KEY_PAGE_DOWN:34, KEY_END:35, KEY_HOME:36, KEY_LEFT:37, KEY_UP:38, KEY_RIGHT:39, KEY_DOWN:40, KEY_PRINT_SCREEN:44, KEY_INSERT:45, KEY_DELETE:46, KEY_0:48, KEY_1:49, KEY_2:50, KEY_3:51, KEY_4:52, KEY_5:53, KEY_6:54, KEY_7:55, KEY_8:56, KEY_9:57, KEY_SEMICOLON:59, KEY_EQUAL:61, KEY_A:65, KEY_B:66, KEY_C:67, KEY_D:68, KEY_E:69, 
  KEY_F:70, KEY_G:71, KEY_H:72, KEY_I:73, KEY_J:74, KEY_K:75, KEY_L:76, KEY_M:77, KEY_N:78, KEY_O:79, KEY_P:80, KEY_Q:81, KEY_R:82, KEY_S:83, KEY_T:84, KEY_U:85, KEY_V:86, KEY_W:87, KEY_X:88, KEY_Y:89, KEY_Z:90, KEY_WINDOWS:91, KEY_CONTEXT_MENU:93, KEY_NUMPAD_0:96, KEY_NUMPAD_1:97, KEY_NUMPAD_2:98, KEY_NUMPAD_3:99, KEY_NUMPAD_4:100, KEY_NUMPAD_5:101, KEY_NUMPAD_6:102, KEY_NUMPAD_7:103, KEY_NUMPAD_8:104, KEY_NUMPAD_9:105, KEY_MULTIPLY:106, KEY_ADD:107, KEY_SEPARATOR:108, KEY_SUBTRACT:109, KEY_DECIMAL:110, 
  KEY_DIVIDE:111, KEY_F1:112, KEY_F2:113, KEY_F3:114, KEY_F4:115, KEY_F5:116, KEY_F6:117, KEY_F7:118, KEY_F8:119, KEY_F9:120, KEY_F10:121, KEY_F11:122, KEY_F12:123, KEY_COMMA:188, KEY_PERIOD:190, KEY_SLASH:191, KEY_OPEN_BRACKET:219, KEY_BACK_SLASH:220, KEY_CLOSE_BRACKET:221, KEY_META:224, MOUSEBUTTON_NONE:-1, MOUSEBUTTON_LEFT:0, MOUSEBUTTON_MIDDLE:1, MOUSEBUTTON_RIGHT:2, PAD_1:0, PAD_2:1, PAD_3:2, PAD_4:3, PAD_FACE_1:0, PAD_FACE_2:1, PAD_FACE_3:2, PAD_FACE_4:3, PAD_L_SHOULDER_1:4, PAD_R_SHOULDER_1:5, 
  PAD_L_SHOULDER_2:6, PAD_R_SHOULDER_2:7, PAD_SELECT:8, PAD_START:9, PAD_L_STICK_BUTTON:10, PAD_R_STICK_BUTTON:11, PAD_UP:12, PAD_DOWN:13, PAD_LEFT:14, PAD_RIGHT:15, PAD_VENDOR:16, PAD_L_STICK_X:0, PAD_L_STICK_Y:1, PAD_R_STICK_X:2, PAD_R_STICK_Y:3};
  pc.extend(pc, enums);
  pc.input = {};
  pc.extend(pc.input, enums);
})();
pc.extend(pc, function() {
  var MouseEvent = function(mouse, event) {
    var coords = {x:0, y:0};
    if (event) {
      if (event instanceof MouseEvent) {
        throw Error("Expected MouseEvent");
      }
      coords = mouse._getTargetCoords(event);
    } else {
      event = {};
    }
    if (coords) {
      this.x = coords.x;
      this.y = coords.y;
    } else {
      if (pc.Mouse.isPointerLocked()) {
        this.x = 0;
        this.y = 0;
      } else {
        return;
      }
    }
    if (event.detail) {
      this.wheel = -1 * event.detail;
    } else {
      if (event.wheelDelta) {
        this.wheel = event.wheelDelta / 120;
      } else {
        this.wheel = 0;
      }
    }
    if (pc.Mouse.isPointerLocked()) {
      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;
      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;
    } else {
      this.dx = this.x - mouse._lastX;
      this.dy = this.y - mouse._lastY;
    }
    if (event.type === "mousedown" || event.type === "mouseup") {
      this.button = event.button;
    } else {
      this.button = pc.MOUSEBUTTON_NONE;
    }
    this.buttons = mouse._buttons.slice(0);
    this.element = event.target;
    this.ctrlKey = event.ctrlKey || false;
    this.altKey = event.altKey || false;
    this.shiftKey = event.shiftKey || false;
    this.metaKey = event.metaKey || false;
    this.event = event;
  };
  var Mouse = function(element) {
    this._lastX = 0;
    this._lastY = 0;
    this._buttons = [false, false, false];
    this._lastbuttons = [false, false, false];
    this._upHandler = this._handleUp.bind(this);
    this._downHandler = this._handleDown.bind(this);
    this._moveHandler = this._handleMove.bind(this);
    this._wheelHandler = this._handleWheel.bind(this);
    this._contextMenuHandler = function(event) {
      event.preventDefault();
    };
    this._target = null;
    this._attached = false;
    this.attach(element);
    pc.events.attach(this);
  };
  Mouse.isPointerLocked = function() {
    return !!(document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement);
  };
  Mouse.prototype = {attach:function(element) {
    this._target = element;
    if (this._attached) {
      return;
    }
    this._attached = true;
    window.addEventListener("mouseup", this._upHandler, false);
    window.addEventListener("mousedown", this._downHandler, false);
    window.addEventListener("mousemove", this._moveHandler, false);
    window.addEventListener("mousewheel", this._wheelHandler, false);
    window.addEventListener("DOMMouseScroll", this._wheelHandler, false);
  }, detach:function() {
    if (!this._attached) {
      return;
    }
    this._attached = false;
    window.removeEventListener("mouseup", this._upHandler);
    window.removeEventListener("mousedown", this._downHandler);
    window.removeEventListener("mousemove", this._moveHandler);
    window.removeEventListener("mousewheel", this._wheelHandler);
    window.removeEventListener("DOMMouseScroll", this._wheelHandler);
  }, disableContextMenu:function() {
    if (!this._target) {
      return;
    }
    this._target.addEventListener("contextmenu", this._contextMenuHandler);
  }, enableContextMenu:function() {
    if (!this._target) {
      return;
    }
    this._target.removeEventListener("contextmenu", this._contextMenuHandler);
  }, enablePointerLock:function(success, error) {
    if (!document.body.requestPointerLock) {
      if (error) {
        error();
      }
      return;
    }
    var s = function() {
      success();
      document.removeEventListener("pointerlockchange", s);
    };
    var e = function() {
      error();
      document.removeEventListener("pointerlockerror", e);
    };
    if (success) {
      document.addEventListener("pointerlockchange", s, false);
    }
    if (error) {
      document.addEventListener("pointerlockerror", e, false);
    }
    document.body.requestPointerLock();
  }, disablePointerLock:function(success) {
    if (!document.exitPointerLock) {
      return;
    }
    var s = function() {
      success();
      document.removeEventListener("pointerlockchange", s);
    };
    if (success) {
      document.addEventListener("pointerlockchange", s, false);
    }
    document.exitPointerLock();
  }, update:function() {
    this._lastbuttons[0] = this._buttons[0];
    this._lastbuttons[1] = this._buttons[1];
    this._lastbuttons[2] = this._buttons[2];
  }, isPressed:function(button) {
    return this._buttons[button];
  }, wasPressed:function(button) {
    return this._buttons[button] && !this._lastbuttons[button];
  }, wasReleased:function(button) {
    return !this._buttons[button] && this._lastbuttons[button];
  }, _handleUp:function(event) {
    this._buttons[event.button] = false;
    var e = new MouseEvent(this, event);
    if (!e.event) {
      return;
    }
    this.fire(pc.EVENT_MOUSEUP, e);
  }, _handleDown:function(event) {
    this._buttons[event.button] = true;
    var e = new MouseEvent(this, event);
    if (!e.event) {
      return;
    }
    this.fire(pc.EVENT_MOUSEDOWN, e);
  }, _handleMove:function(event) {
    var e = new MouseEvent(this, event);
    if (!e.event) {
      return;
    }
    this.fire(pc.EVENT_MOUSEMOVE, e);
    this._lastX = e.x;
    this._lastY = e.y;
  }, _handleWheel:function(event) {
    var e = new MouseEvent(this, event);
    if (!e.event) {
      return;
    }
    this.fire(pc.EVENT_MOUSEWHEEL, e);
  }, _getTargetCoords:function(event) {
    var rect = this._target.getBoundingClientRect();
    var left = Math.floor(rect.left);
    var top = Math.floor(rect.top);
    if (event.clientX < left || event.clientX >= left + this._target.clientWidth || event.clientY < top || event.clientY >= top + this._target.clientHeight) {
      return null;
    }
    return {x:event.clientX - left, y:event.clientY - top};
  }};
  (function() {
    if (typeof navigator === "undefined" || typeof document === "undefined") {
      return;
    }
    navigator.pointer = navigator.pointer || navigator.webkitPointer || navigator.mozPointer;
    var pointerlockchange = function() {
      var e = document.createEvent("CustomEvent");
      e.initCustomEvent("pointerlockchange", true, false, null);
      document.dispatchEvent(e);
    };
    var pointerlockerror = function() {
      var e = document.createEvent("CustomEvent");
      e.initCustomEvent("pointerlockerror", true, false, null);
      document.dispatchEvent(e);
    };
    document.addEventListener("webkitpointerlockchange", pointerlockchange, false);
    document.addEventListener("webkitpointerlocklost", pointerlockchange, false);
    document.addEventListener("mozpointerlockchange", pointerlockchange, false);
    document.addEventListener("mozpointerlocklost", pointerlockchange, false);
    document.addEventListener("webkitpointerlockerror", pointerlockerror, false);
    document.addEventListener("mozpointerlockerror", pointerlockerror, false);
    if (Element.prototype.mozRequestPointerLock) {
      Element.prototype.requestPointerLock = function() {
        this.mozRequestPointerLock();
      };
    } else {
      Element.prototype.requestPointerLock = Element.prototype.requestPointerLock || Element.prototype.webkitRequestPointerLock || Element.prototype.mozRequestPointerLock;
    }
    if (!Element.prototype.requestPointerLock && navigator.pointer) {
      Element.prototype.requestPointerLock = function() {
        var el = this;
        document.pointerLockElement = el;
        navigator.pointer.lock(el, pointerlockchange, pointerlockerror);
      };
    }
    document.exitPointerLock = document.exitPointerLock || document.webkitExitPointerLock || document.mozExitPointerLock;
    if (!document.exitPointerLock) {
      document.exitPointerLock = function() {
        if (navigator.pointer) {
          document.pointerLockElement = null;
          navigator.pointer.unlock();
        }
      };
    }
  })();
  return {Mouse:Mouse, MouseEvent:MouseEvent};
}());
pc.extend(pc, function() {
  var KeyboardEvent = function(keyboard, event) {
    if (event) {
      this.key = event.keyCode;
      this.element = event.target;
      this.event = event;
    } else {
      this.key = null;
      this.element = null;
      this.event = null;
    }
  };
  var _keyboardEvent = new KeyboardEvent;
  function makeKeyboardEvent(event) {
    _keyboardEvent.key = event.keyCode;
    _keyboardEvent.element = event.target;
    _keyboardEvent.event = event;
    return _keyboardEvent;
  }
  function toKeyCode(s) {
    if (typeof s == "string") {
      return s.toUpperCase().charCodeAt(0);
    } else {
      return s;
    }
  }
  var _keyCodeToKeyIdentifier = {9:"Tab", 13:"Enter", 16:"Shift", 17:"Control", 18:"Alt", 27:"Escape", 37:"Left", 38:"Up", 39:"Right", 40:"Down", 46:"Delete", 91:"Win"};
  var Keyboard = function(element, options) {
    options = options || {};
    this._element = null;
    this._keyDownHandler = this._handleKeyDown.bind(this);
    this._keyUpHandler = this._handleKeyUp.bind(this);
    this._keyPressHandler = this._handleKeyPress.bind(this);
    pc.events.attach(this);
    this._keymap = {};
    this._lastmap = {};
    if (element) {
      this.attach(element);
    }
    this.preventDefault = options.preventDefault || false;
    this.stopPropagation = options.stopPropagation || false;
  };
  Keyboard.prototype.attach = function(element) {
    if (this._element) {
      this.detach();
    }
    this._element = element;
    this._element.addEventListener("keydown", this._keyDownHandler, false);
    this._element.addEventListener("keypress", this._keyPressHandler, false);
    this._element.addEventListener("keyup", this._keyUpHandler, false);
  };
  Keyboard.prototype.detach = function() {
    this._element.removeEventListener("keydown", this._keyDownHandler);
    this._element.removeEventListener("keypress", this._keyPressHandler);
    this._element.removeEventListener("keyup", this._keyUpHandler);
    this._element = null;
  };
  Keyboard.prototype.toKeyIdentifier = function(keyCode) {
    keyCode = toKeyCode(keyCode);
    var count;
    var hex;
    var length;
    var id = _keyCodeToKeyIdentifier[keyCode.toString()];
    if (id) {
      return id;
    }
    hex = keyCode.toString(16).toUpperCase();
    length = hex.length;
    for (count = 0; count < 4 - length; count++) {
      hex = "0" + hex;
    }
    return "U+" + hex;
  };
  Keyboard.prototype._handleKeyDown = function(event) {
    var code = event.keyCode || event.charCode;
    if (code === undefined) {
      return;
    }
    var id = this.toKeyIdentifier(code);
    this._keymap[id] = true;
    this.fire("keydown", makeKeyboardEvent(event));
    if (this.preventDefault) {
      event.preventDefault();
    }
    if (this.stopPropagation) {
      event.stopPropagation();
    }
  };
  Keyboard.prototype._handleKeyUp = function(event) {
    var code = event.keyCode || event.charCode;
    if (code === undefined) {
      return;
    }
    var id = this.toKeyIdentifier(code);
    delete this._keymap[id];
    this.fire("keyup", makeKeyboardEvent(event));
    if (this.preventDefault) {
      event.preventDefault();
    }
    if (this.stopPropagation) {
      event.stopPropagation();
    }
  };
  Keyboard.prototype._handleKeyPress = function(event) {
    this.fire("keypress", makeKeyboardEvent(event));
    if (this.preventDefault) {
      event.preventDefault();
    }
    if (this.stopPropagation) {
      event.stopPropagation();
    }
  };
  Keyboard.prototype.update = function() {
    var prop;
    for (prop in this._lastmap) {
      delete this._lastmap[prop];
    }
    for (prop in this._keymap) {
      if (this._keymap.hasOwnProperty(prop)) {
        this._lastmap[prop] = this._keymap[prop];
      }
    }
  };
  Keyboard.prototype.isPressed = function(key) {
    var keyCode = toKeyCode(key);
    var id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id];
  };
  Keyboard.prototype.wasPressed = function(key) {
    var keyCode = toKeyCode(key);
    var id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id] && !!!this._lastmap[id];
  };
  Keyboard.prototype.wasReleased = function(key) {
    var keyCode = toKeyCode(key);
    var id = this.toKeyIdentifier(keyCode);
    return !!!this._keymap[id] && !!this._lastmap[id];
  };
  return {Keyboard:Keyboard, KeyboardEvent:KeyboardEvent};
}());
pc.extend(pc, function() {
  var GamePads = function() {
    this.gamepadsSupported = !!navigator.getGamepads || !!navigator.webkitGetGamepads;
    this.current = [];
    this.previous = [];
    this.deadZone = 0.25;
  };
  var MAPS = {DEFAULT:{buttons:["PAD_FACE_1", "PAD_FACE_2", "PAD_FACE_3", "PAD_FACE_4", "PAD_L_SHOULDER_1", "PAD_R_SHOULDER_1", "PAD_L_SHOULDER_2", "PAD_R_SHOULDER_2", "PAD_SELECT", "PAD_START", "PAD_L_STICK_BUTTON", "PAD_R_STICK_BUTTON", "PAD_UP", "PAD_DOWN", "PAD_LEFT", "PAD_RIGHT", "PAD_VENDOR"], axes:["PAD_L_STICK_X", "PAD_L_STICK_Y", "PAD_R_STICK_X", "PAD_R_STICK_Y"]}, PS3:{buttons:["PAD_FACE_1", "PAD_FACE_2", "PAD_FACE_4", "PAD_FACE_3", "PAD_L_SHOULDER_1", "PAD_R_SHOULDER_1", "PAD_L_SHOULDER_2", 
  "PAD_R_SHOULDER_2", "PAD_SELECT", "PAD_START", "PAD_L_STICK_BUTTON", "PAD_R_STICK_BUTTON", "PAD_UP", "PAD_DOWN", "PAD_LEFT", "PAD_RIGHT", "PAD_VENDOR"], axes:["PAD_L_STICK_X", "PAD_L_STICK_Y", "PAD_R_STICK_X", "PAD_R_STICK_Y"]}};
  var PRODUCT_CODES = {"Product: 0268":"PS3"};
  GamePads.prototype = {update:function() {
    var i, j, l;
    var buttons, buttonsLen;
    for (i = 0, l = this.current.length; i < l; i++) {
      buttons = this.current[i].pad.buttons;
      buttonsLen = buttons.length;
      for (j = 0; j < buttonsLen; j++) {
        if (this.previous[i] === undefined) {
          this.previous[i] = [];
        }
        this.previous[i][j] = buttons[j].pressed;
      }
    }
    var pads = this.poll();
    for (i = 0, l = pads.length; i < l; i++) {
      this.current[i] = pads[i];
    }
  }, poll:function() {
    var pads = [];
    if (this.gamepadsSupported) {
      var padDevices = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads();
      var i, len = padDevices.length;
      for (i = 0; i < len; i++) {
        if (padDevices[i]) {
          pads.push({map:this.getMap(padDevices[i]), pad:padDevices[i]});
        }
      }
    }
    return pads;
  }, getMap:function(pad) {
    for (var code in PRODUCT_CODES) {
      if (pad.id.indexOf(code) >= 0) {
        return MAPS[PRODUCT_CODES[code]];
      }
    }
    return MAPS.DEFAULT;
  }, isPressed:function(index, button) {
    if (!this.current[index]) {
      return false;
    }
    var key = this.current[index].map.buttons[button];
    return this.current[index].pad.buttons[pc[key]].pressed;
  }, wasPressed:function(index, button) {
    if (!this.current[index]) {
      return false;
    }
    var key = this.current[index].map.buttons[button];
    var i = pc[key];
    return this.current[index].pad.buttons[i].pressed && !this.previous[index][i];
  }, getAxis:function(index, axes) {
    if (!this.current[index]) {
      return false;
    }
    var key = this.current[index].map.axes[axes];
    var value = this.current[index].pad.axes[pc[key]];
    if (Math.abs(value) < this.deadZone) {
      value = 0;
    }
    return value;
  }};
  return {GamePads:GamePads};
}());
pc.extend(pc, function() {
  var TouchEvent = function(device, event) {
    this.element = event.target;
    this.event = event;
    this.touches = [];
    this.changedTouches = [];
    if (event) {
      var i, l = event.touches.length;
      for (i = 0; i < l; i++) {
        this.touches.push(new Touch(event.touches[i]));
      }
      l = event.changedTouches.length;
      for (i = 0; i < l; i++) {
        this.changedTouches.push(new Touch(event.changedTouches[i]));
      }
    }
  };
  TouchEvent.prototype = {getTouchById:function(id, list) {
    var i, l = list.length;
    for (i = 0; i < l; i++) {
      if (list[i].id === id) {
        return list[i];
      }
    }
    return null;
  }};
  var Touch = function(touch) {
    var coords = pc.getTouchTargetCoords(touch);
    this.id = touch.identifier;
    this.x = coords.x;
    this.y = coords.y;
    this.target = touch.target;
    this.touch = touch;
  };
  var TouchDevice = function(element) {
    this._startHandler = this._handleTouchStart.bind(this);
    this._endHandler = this._handleTouchEnd.bind(this);
    this._moveHandler = this._handleTouchMove.bind(this);
    this._cancelHandler = this._handleTouchCancel.bind(this);
    this.attach(element);
    pc.events.attach(this);
  };
  TouchDevice.prototype = {attach:function(element) {
    if (this._element) {
      this.detach();
    }
    this._element = element;
    this._element.addEventListener("touchstart", this._startHandler, false);
    this._element.addEventListener("touchend", this._endHandler, false);
    this._element.addEventListener("touchmove", this._moveHandler, false);
    this._element.addEventListener("touchcancel", this._cancelHandler, false);
  }, detach:function() {
    if (this._element) {
      this._element.removeEventListener("touchstart", this._startHandler, false);
      this._element.removeEventListener("touchend", this._endHandler, false);
      this._element.removeEventListener("touchmove", this._moveHandler, false);
      this._element.removeEventListener("touchcancel", this._cancelHandler, false);
    }
    this._element = null;
  }, _handleTouchStart:function(e) {
    this.fire("touchstart", new TouchEvent(this, e));
  }, _handleTouchEnd:function(e) {
    this.fire("touchend", new TouchEvent(this, e));
  }, _handleTouchMove:function(e) {
    e.preventDefault();
    this.fire("touchmove", new TouchEvent(this, e));
  }, _handleTouchCancel:function(e) {
    this.fire("touchcancel", new TouchEvent(this, e));
  }};
  return {getTouchTargetCoords:function(touch) {
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var target = touch.target;
    while (!(target instanceof HTMLElement)) {
      target = target.parentNode;
    }
    var currentElement = target;
    do {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
      currentElement = currentElement.offsetParent;
    } while (currentElement);
    return {x:touch.pageX - totalOffsetX, y:touch.pageY - totalOffsetY};
  }, TouchDevice:TouchDevice, TouchEvent:TouchEvent};
}());
pc.extend(pc, function() {
  var Controller = function(element, options) {
    options = options || {};
    this._keyboard = options.keyboard || null;
    this._mouse = options.mouse || null;
    this._gamepads = options.gamepads || null;
    this._element = null;
    this._actions = {};
    this._axes = {};
    this._axesValues = {};
    if (element) {
      this.attach(element);
    }
  };
  Controller.prototype.attach = function(element) {
    this._element = element;
    if (this._keyboard) {
      this._keyboard.attach(element);
    }
    if (this._mouse) {
      this._mouse.attach(element);
    }
  };
  Controller.prototype.detach = function() {
    if (this._keyboard) {
      this._keyboard.detach();
    }
    if (this._mouse) {
      this._mouse.detach();
    }
    this._element = null;
  };
  Controller.prototype.disableContextMenu = function() {
    if (!this._mouse) {
      this._enableMouse();
    }
    this._mouse.disableContextMenu();
  };
  Controller.prototype.enableContextMenu = function() {
    if (!this._mouse) {
      this._enableMouse();
    }
    this._mouse.enableContextMenu();
  };
  Controller.prototype.update = function(dt) {
    if (this._keyboard) {
      this._keyboard.update(dt);
    }
    if (this._mouse) {
      this._mouse.update(dt);
    }
    if (this._gamepads) {
      this._gamepads.update(dt);
    }
    this._axesValues = {};
    for (var key in this._axes) {
      this._axesValues[key] = [];
    }
  };
  Controller.prototype.registerKeys = function(action, keys) {
    if (!this._keyboard) {
      this._enableKeyboard();
    }
    if (this._actions[action]) {
      throw new Error(pc.string.format("Action: {0} already registered", action));
    }
    if (keys === undefined) {
      throw new Error("Invalid button");
    }
    if (!keys.length) {
      keys = [keys];
    }
    if (this._actions[action]) {
      this._actions[action].push({type:pc.ACTION_KEYBOARD, keys:keys});
    } else {
      this._actions[action] = [{type:pc.ACTION_KEYBOARD, keys:keys}];
    }
  };
  Controller.prototype.registerMouse = function(action, button) {
    if (!this._mouse) {
      this._enableMouse();
    }
    if (button === undefined) {
      throw new Error("Invalid button");
    }
    if (this._actions[action]) {
      this._actions[action].push({type:pc.ACTION_MOUSE, button:button});
    } else {
      this._actions[action] = [{type:pc.ACTION_MOUSE, button:-button}];
    }
  };
  Controller.prototype.registerPadButton = function(action, pad, button) {
    if (button === undefined) {
      throw new Error("Invalid button");
    }
    if (this._actions[action]) {
      this._actions[action].push({type:pc.ACTION_GAMEPAD, button:button, pad:pad});
    } else {
      this._actions[action] = [{type:pc.ACTION_GAMEPAD, button:button, pad:pad}];
    }
  };
  Controller.prototype.registerAxis = function(options) {
    var name = options.name;
    if (!this._axes[name]) {
      this._axes[name] = [];
    }
    var i = this._axes[name].push(name);
    options = options || {};
    options.pad = options.pad || pc.PAD_1;
    var bind = function(controller, source, value, key) {
      switch(source) {
        case "mousex":
          controller._mouse.on(pc.EVENT_MOUSEMOVE, function(e) {
            controller._axesValues[name][i] = e.dx / 10;
          });
          break;
        case "mousey":
          controller._mouse.on(pc.EVENT_MOUSEMOVE, function(e) {
            controller._axesValues[name][i] = e.dy / 10;
          });
          break;
        case "key":
          controller._axes[name].push(function() {
            return controller._keyboard.isPressed(key) ? value : 0;
          });
          break;
        case "padrx":
          controller._axes[name].push(function() {
            return controller._gamepads.getAxis(options.pad, pc.PAD_R_STICK_X);
          });
          break;
        case "padry":
          controller._axes[name].push(function() {
            return controller._gamepads.getAxis(options.pad, pc.PAD_R_STICK_Y);
          });
          break;
        case "padlx":
          controller._axes[name].push(function() {
            return controller._gamepads.getAxis(options.pad, pc.PAD_L_STICK_X);
          });
          break;
        case "padly":
          controller._axes[name].push(function() {
            return controller._gamepads.getAxis(options.pad, pc.PAD_L_STICK_Y);
          });
          break;
        default:
          throw new Error("Unknown axis");
      }
    };
    bind(this, options.positive, 1, options.positiveKey);
    if (options.negativeKey || options.negative !== options.positive) {
      bind(this, options.negative, -1, options.negativeKey);
    }
  };
  Controller.prototype.isPressed = function(actionName) {
    if (!this._actions[actionName]) {
      return false;
    }
    var action;
    var index = 0;
    var length = this._actions[actionName].length;
    for (index = 0; index < length; ++index) {
      action = this._actions[actionName][index];
      switch(action.type) {
        case pc.ACTION_KEYBOARD:
          if (this._keyboard) {
            var i, len = action.keys.length;
            for (i = 0; i < len; i++) {
              if (this._keyboard.isPressed(action.keys[i])) {
                return true;
              }
            }
          }
          break;
        case pc.ACTION_MOUSE:
          if (this._mouse && this._mouse.isPressed(action.button)) {
            return true;
          }
          break;
        case pc.ACTION_GAMEPAD:
          if (this._gamepads && this._gamepads.isPressed(action.pad, action.button)) {
            return true;
          }
          break;
      }
    }
    return false;
  };
  Controller.prototype.wasPressed = function(actionName) {
    if (!this._actions[actionName]) {
      return false;
    }
    var index = 0;
    var length = this._actions[actionName].length;
    for (index = 0; index < length; ++index) {
      var action = this._actions[actionName][index];
      switch(action.type) {
        case pc.ACTION_KEYBOARD:
          if (this._keyboard) {
            var i, len = action.keys.length;
            for (i = 0; i < len; i++) {
              if (this._keyboard.wasPressed(action.keys[i])) {
                return true;
              }
            }
          }
          break;
        case pc.ACTION_MOUSE:
          if (this._mouse && this._mouse.wasPressed(action.button)) {
            return true;
          }
          break;
        case pc.ACTION_GAMEPAD:
          if (this._gamepads && this._gamepads.wasPressed(action.pad, action.button)) {
            return true;
          }
          break;
      }
    }
    return false;
  };
  Controller.prototype.getAxis = function(name) {
    var value = 0;
    if (this._axes[name]) {
      var i, len = this._axes[name].length;
      for (i = 0; i < len; i++) {
        if (pc.type(this._axes[name][i]) === "function") {
          var v = this._axes[name][i]();
          if (Math.abs(v) > Math.abs(value)) {
            value = v;
          }
        } else {
          if (this._axesValues[name]) {
            if (Math.abs(this._axesValues[name][i]) > Math.abs(value)) {
              value = this._axesValues[name][i];
            }
          }
        }
      }
    }
    return value;
  };
  Controller.prototype._enableMouse = function() {
    this._mouse = new pc.Mouse;
    if (!this._element) {
      throw new Error("Controller must be attached to an Element");
    }
    this._mouse.attach(this._element);
  };
  Controller.prototype._enableKeyboard = function() {
    this._keyboard = new pc.Keyboard;
    if (!this._element) {
      throw new Error("Controller must be attached to an Element");
    }
    this._keyboard.attach(this._element);
  };
  return {Controller:Controller};
}());
pc.extend(pc, function() {
  var targetX, targetY;
  var vecA = new pc.Vec3;
  var vecB = new pc.Vec3;
  var _pq = new pc.Vec3;
  var _pa = new pc.Vec3;
  var _pb = new pc.Vec3;
  var _pc = new pc.Vec3;
  var _pd = new pc.Vec3;
  var _m = new pc.Vec3;
  var _sct = new pc.Vec3;
  var intersectLineQuad = function(p, q, corners) {
    _pq.sub2(q, p);
    _pa.sub2(corners[0], p);
    _pb.sub2(corners[1], p);
    _pc.sub2(corners[2], p);
    _m.cross(_pc, _pq);
    var v = _pa.dot(_m);
    if (v >= 0) {
      if (-_pb.dot(_m) < 0) {
        return false;
      }
      if (scalarTriple(_pq, _pb, _pa) < 0) {
        return false;
      }
    } else {
      _pd.sub2(corners[3], p);
      if (_pd.dot(_m) < 0) {
        return false;
      }
      if (scalarTriple(_pq, _pa, _pd) < 0) {
        return false;
      }
    }
    return true;
  };
  var scalarTriple = function(p1, p2, p3) {
    return _sct.cross(p1, p2).dot(p3);
  };
  var ElementInputEvent = function(event, element) {
    this.event = event;
    this.element = element;
    this._stopPropagation = false;
  };
  ElementInputEvent.prototype = {stopPropagation:function() {
    this._stopPropagation = true;
    this.event.stopImmediatePropagation();
    this.event.stopPropagation();
  }};
  var ElementMouseEvent = function(event, element, x, y, lastX, lastY) {
    this.x = x;
    this.y = y;
    this.ctrlKey = event.ctrlKey || false;
    this.altKey = event.altKey || false;
    this.shiftKey = event.shiftKey || false;
    this.metaKey = event.metaKey || false;
    this.button = event.button;
    if (pc.Mouse.isPointerLocked()) {
      this.dx = event.movementX || event.webkitMovementX || event.mozMovementX || 0;
      this.dy = event.movementY || event.webkitMovementY || event.mozMovementY || 0;
    } else {
      this.dx = x - lastX;
      this.dy = y - lastY;
    }
    if (event.detail) {
      this.wheel = -1 * event.detail;
    } else {
      if (event.wheelDelta) {
        this.wheel = event.wheelDelta / 120;
      } else {
        this.wheel = 0;
      }
    }
  };
  ElementMouseEvent = pc.inherits(ElementMouseEvent, ElementInputEvent);
  var ElementTouchEvent = function(event, element, input) {
    this.touches = event.touches;
    this.changedTouches = event.changedTouches;
  };
  ElementTouchEvent = pc.inherits(ElementTouchEvent, ElementInputEvent);
  var ElementInput = function(domElement) {
    this._app = null;
    this._attached = false;
    this._target = null;
    this._lastX = 0;
    this._lastY = 0;
    this._upHandler = this._handleUp.bind(this);
    this._downHandler = this._handleDown.bind(this);
    this._moveHandler = this._handleMove.bind(this);
    this._wheelHandler = this._handleWheel.bind(this);
    this._touchstartHandler = this._handleTouchStart.bind(this);
    this._touchendHandler = this._handleTouchEnd.bind(this);
    this._touchcancelHandler = this._touchendHandler;
    this._touchmoveHandler = this._handleTouchMove.bind(this);
    this._elements = [];
    this._hoveredElement = null;
    this._pressedElement = null;
    this._touchedElements = {};
    if ("ontouchstart" in window) {
      this._clickedEntities = {};
    }
    this.attach(domElement);
  };
  ElementInput.prototype = {attach:function(domElement) {
    if (this._attached) {
      this._attached = false;
      this.detach();
    }
    this._target = domElement;
    this._attached = true;
    window.addEventListener("mouseup", this._upHandler, {passive:true});
    window.addEventListener("mousedown", this._downHandler, {passive:true});
    window.addEventListener("mousemove", this._moveHandler, {passive:true});
    window.addEventListener("mousewheel", this._wheelHandler, {passive:true});
    window.addEventListener("DOMMouseScroll", this._wheelHandler, {passive:true});
    if ("ontouchstart" in window) {
      this._target.addEventListener("touchstart", this._touchstartHandler, {passive:true});
      this._target.addEventListener("touchend", this._touchendHandler, {passive:true});
      this._target.addEventListener("touchmove", this._touchmoveHandler, false);
      this._target.addEventListener("touchcancel", this._touchcancelHandler, {passive:true});
    }
  }, detach:function() {
    if (!this._attached) {
      return;
    }
    this._attached = false;
    window.removeEventListener("mouseup", this._upHandler, false);
    window.removeEventListener("mousedown", this._downHandler, false);
    window.removeEventListener("mousemove", this._moveHandler, false);
    window.removeEventListener("mousewheel", this._wheelHandler, false);
    window.removeEventListener("DOMMouseScroll", this._wheelHandler, false);
    this._target.removeEventListener("touchstart", this._touchstartHandler, false);
    this._target.removeEventListener("touchend", this._touchendHandler, false);
    this._target.removeEventListener("touchmove", this._touchmoveHandler, false);
    this._target.removeEventListener("touchcancel", this._touchcancelHandler, false);
    this._target = null;
  }, addElement:function(element) {
    if (this._elements.indexOf(element) === -1) {
      this._elements.push(element);
    }
  }, removeElement:function(element) {
    var idx = this._elements.indexOf(element);
    if (idx !== -1) {
      this._elements.splice(idx, 1);
    }
  }, _handleUp:function(event) {
    if (pc.Mouse.isPointerLocked()) {
      return;
    }
    this._calcMouseCoords(event);
    if (targetX === null) {
      return;
    }
    this._onElementMouseEvent(event);
  }, _handleDown:function(event) {
    if (pc.Mouse.isPointerLocked()) {
      return;
    }
    this._calcMouseCoords(event);
    if (targetX === null) {
      return;
    }
    this._onElementMouseEvent(event);
  }, _handleMove:function(event) {
    this._calcMouseCoords(event);
    if (targetX === null) {
      return;
    }
    this._onElementMouseEvent(event);
    this._lastX = targetX;
    this._lastY = targetY;
  }, _handleWheel:function(event) {
    this._calcMouseCoords(event);
    if (targetX === null) {
      return;
    }
    this._onElementMouseEvent(event);
  }, _handleTouchStart:function(event) {
    var cameras = this.app.systems.camera.cameras;
    for (var i = cameras.length - 1; i >= 0; i--) {
      var camera = cameras[i];
      var done = 0;
      for (var j = 0, len = event.changedTouches.length; j < len; j++) {
        if (this._touchedElements[event.changedTouches[j].identifier]) {
          done++;
          continue;
        }
        var coords = this._calcTouchCoords(event.changedTouches[j]);
        var element = this._getTargetElement(camera, coords.x, coords.y);
        if (element) {
          done++;
          this._touchedElements[event.changedTouches[j].identifier] = element;
          this._fireEvent(event.type, new ElementTouchEvent(event, element, this));
        }
      }
      if (done === len) {
        break;
      }
    }
  }, _handleTouchEnd:function(event) {
    var cameras = this.app.systems.camera.cameras;
    for (var key in this._clickedEntities) {
      delete this._clickedEntities[key];
    }
    for (var i = 0, len = event.changedTouches.length; i < len; i++) {
      var touch = event.changedTouches[i];
      var element = this._touchedElements[touch.identifier];
      if (!element) {
        continue;
      }
      delete this._touchedElements[touch.identifier];
      this._fireEvent(event.type, new ElementTouchEvent(event, element, this));
      if (event.touches.length === 0) {
        var coords = this._calcTouchCoords(touch);
        for (var c = cameras.length - 1; c >= 0; c--) {
          var hovered = this._getTargetElement(cameras[c], coords.x, coords.y);
          if (hovered === element) {
            if (!this._clickedEntities[element.entity.getGuid()]) {
              this._fireEvent("click", new ElementTouchEvent(event, element, this));
              this._clickedEntities[element.entity.getGuid()] = true;
            }
          }
        }
      }
    }
  }, _handleTouchMove:function(event) {
    event.preventDefault();
    for (var i = 0, len = event.changedTouches.length; i < len; i++) {
      var element = this._touchedElements[event.changedTouches[i].identifier];
      if (element) {
        this._fireEvent(event.type, new ElementTouchEvent(event, element, this));
      }
    }
  }, _onElementMouseEvent:function(event) {
    var element;
    var hovered = this._hoveredElement;
    this._hoveredElement = null;
    var cameras = this.app.systems.camera.cameras;
    for (var i = cameras.length - 1; i >= 0; i--) {
      var camera = cameras[i];
      element = this._getTargetElement(camera, targetX, targetY);
      if (element) {
        break;
      }
    }
    if (element) {
      this._fireEvent(event.type, new ElementMouseEvent(event, element, targetX, targetY, this._lastX, this._lastY));
      this._hoveredElement = element;
      if (event.type === pc.EVENT_MOUSEDOWN) {
        this._pressedElement = element;
      }
    }
    if (hovered !== this._hoveredElement) {
      if (hovered) {
        this._fireEvent("mouseleave", new ElementMouseEvent(event, hovered, targetX, targetY, this._lastX, this._lastY));
      }
      if (this._hoveredElement) {
        this._fireEvent("mouseenter", new ElementMouseEvent(event, this._hoveredElement, targetX, targetY, this._lastX, this._lastY));
      }
    }
    if (event.type === pc.EVENT_MOUSEUP && this._pressedElement) {
      if (this._pressedElement === this._hoveredElement) {
        this._pressedElement = null;
        if (!this._clickedEntities || !this._clickedEntities[this._hoveredElement.entity.getGuid()]) {
          this._fireEvent("click", new ElementMouseEvent(event, this._hoveredElement, targetX, targetY, this._lastX, this._lastY));
        }
      } else {
        this._pressedElement = null;
      }
    }
  }, _fireEvent:function(name, evt) {
    var element = evt.element;
    while (true) {
      element.fire(name, evt);
      if (evt._stopPropagation) {
        break;
      }
      if (!element.entity.parent) {
        break;
      }
      element = element.entity.parent.element;
      if (!element) {
        break;
      }
    }
  }, _calcMouseCoords:function(event) {
    var rect = this._target.getBoundingClientRect();
    var left = Math.floor(rect.left);
    var top = Math.floor(rect.top);
    if (event.clientX < left || event.clientX >= left + this._target.clientWidth || event.clientY < top || event.clientY >= top + this._target.clientHeight) {
      targetX = null;
      targetY = null;
    } else {
      targetX = event.clientX - left;
      targetY = event.clientY - top;
    }
  }, _calcTouchCoords:function(touch) {
    var totalOffsetX = 0;
    var totalOffsetY = 0;
    var target = touch.target;
    while (!(target instanceof HTMLElement)) {
      target = target.parentNode;
    }
    var currentElement = target;
    do {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
      currentElement = currentElement.offsetParent;
    } while (currentElement);
    return {x:touch.pageX - totalOffsetX, y:touch.pageY - totalOffsetY};
  }, _sortElements:function(a, b) {
    if (a.screen && !b.screen) {
      return -1;
    }
    if (!a.screen && b.screen) {
      return 1;
    }
    if (!a.screen && !b.screen) {
      return 0;
    }
    if (a.screen.screen.screenSpace && !b.screen.screen.screenSpace) {
      return -1;
    }
    if (b.screen.screen.screenSpace && !a.screen.screen.screenSpace) {
      return 1;
    }
    return b.drawOrder - a.drawOrder;
  }, _getTargetElement:function(camera, x, y) {
    var result = null;
    this._elements.sort(this._sortElements);
    for (var i = 0, len = this._elements.length; i < len; i++) {
      var element = this._elements[i];
      if (element.screen && element.screen.screen.screenSpace) {
        if (this._checkElement2d(x, y, element, camera)) {
          result = element;
          break;
        }
      } else {
        if (this._checkElement3d(x, y, element, camera)) {
          result = element;
          break;
        }
      }
    }
    return result;
  }, _checkElement2d:function(x, y, element, camera) {
    var sw = this.app.graphicsDevice.width;
    var sh = this.app.graphicsDevice.height;
    var cameraWidth = camera.rect.z * sw;
    var cameraHeight = camera.rect.w * sh;
    var cameraLeft = camera.rect.x * sw;
    var cameraRight = cameraLeft + cameraWidth;
    var cameraBottom = (1 - camera.rect.y) * sh;
    var cameraTop = cameraBottom - cameraHeight;
    var _x = x * sw / this._target.clientWidth;
    var _y = y * sh / this._target.clientHeight;
    if (_x >= cameraLeft && _x <= cameraRight && _y <= cameraBottom && _y >= cameraTop) {
      _x = sw * (_x - cameraLeft) / cameraWidth;
      _y = sh * (_y - cameraTop) / cameraHeight;
      _y = sh - _y;
      var screenCorners = element.screenCorners;
      vecA.set(_x, _y, 1);
      vecB.set(_x, _y, -1);
      if (intersectLineQuad(vecA, vecB, screenCorners)) {
        return true;
      }
    }
    return false;
  }, _checkElement3d:function(x, y, element, camera) {
    var sw = this._target.clientWidth;
    var sh = this._target.clientHeight;
    var cameraWidth = camera.rect.z * sw;
    var cameraHeight = camera.rect.w * sh;
    var cameraLeft = camera.rect.x * sw;
    var cameraRight = cameraLeft + cameraWidth;
    var cameraBottom = (1 - camera.rect.y) * sh;
    var cameraTop = cameraBottom - cameraHeight;
    var _x = x;
    var _y = y;
    if (x >= cameraLeft && x <= cameraRight && y <= cameraBottom && _y >= cameraTop) {
      _x = sw * (_x - cameraLeft) / cameraWidth;
      _y = sh * (_y - cameraTop) / cameraHeight;
      var worldCorners = element.worldCorners;
      var start = camera.entity.getPosition();
      var end = vecA;
      camera.screenToWorld(_x, _y, camera.farClip, end);
      if (intersectLineQuad(start, end, worldCorners)) {
        return true;
      }
    }
    return false;
  }};
  Object.defineProperty(ElementInput.prototype, "app", {get:function() {
    return this._app || pc.app;
  }, set:function(value) {
    this._app = value;
  }});
  return {ElementInput:ElementInput, ElementInputEvent:ElementInputEvent, ElementMouseEvent:ElementMouseEvent, ElementTouchEvent:ElementTouchEvent};
}());
pc.extend(pc, function() {
  var VrManager = function(app) {
    pc.events.attach(this);
    var self = this;
    this.isSupported = VrManager.isSupported;
    this.usesPolyfill = VrManager.usesPolyfill;
    if (window.InitializeWebVRPolyfill) {
      window.InitializeWebVRPolyfill();
    }
    this._index = {};
    this.displays = [];
    this.display = null;
    this._app = app;
    this._onDisplayConnect = this._onDisplayConnect.bind(this);
    this._onDisplayDisconnect = this._onDisplayDisconnect.bind(this);
    self._attach();
    this._getDisplays(function(err, displays) {
      if (err) {
        self.fire("error", err);
      } else {
        for (var i = 0; i < displays.length; i++) {
          self._addDisplay(displays[i]);
        }
        self.fire("ready", self.displays);
      }
    });
  };
  VrManager.isSupported = !!navigator.getVRDisplays;
  VrManager.usesPolyfill = !!window.InitializeWebVRPolyfill;
  VrManager.prototype = {_attach:function() {
    window.addEventListener("vrdisplayconnect", this._onDisplayConnect);
    window.addEventListener("vrdisplaydisconnect", this._onDisplayDisconnect);
  }, _detach:function() {
    window.removeEventListener("vrdisplayconnect", this._onDisplayConnect);
    window.removeEventListener("vrdisplaydisconnect", this._onDisplayDisconnect);
  }, destroy:function() {
    this._detach();
  }, poll:function() {
    var l = this.displays.length;
    if (!l) {
      return;
    }
    for (var i = 0; i < l; i++) {
      if (this.displays[i]._camera) {
        this.displays[i].poll();
      }
    }
  }, _getDisplays:function(callback) {
    if (navigator.getVRDisplays) {
      navigator.getVRDisplays().then(function(displays) {
        if (callback) {
          callback(null, displays);
        }
      });
    } else {
      if (callback) {
        callback(new Error("WebVR not supported"));
      }
    }
  }, _addDisplay:function(vrDisplay) {
    if (this._index[vrDisplay.displayId]) {
      return;
    }
    var display = new pc.VrDisplay(this._app, vrDisplay);
    this._index[display.id] = display;
    this.displays.push(display);
    if (!this.display) {
      this.display = display;
    }
    this.fire("displayconnect", display);
  }, _onDisplayConnect:function(e) {
    if (e.detail && e.detail.display) {
      this._addDisplay(e.detail.display);
    } else {
      this._addDisplay(e.display);
    }
  }, _onDisplayDisconnect:function(e) {
    var id;
    if (e.detail && e.detail.display) {
      id = e.detail.display.displayId;
    } else {
      id = e.display.displayId;
    }
    var display = this._index[id];
    if (!display) {
      return;
    }
    display.destroy();
    delete this._index[display.id];
    var ind = this.displays.indexOf(display);
    this.displays.splice(ind, 1);
    if (this.display === display) {
      if (this.displays.length) {
        this.display = this.displays[0];
      } else {
        this.display = null;
      }
    }
    this.fire("displaydisconnect", display);
  }};
  return {VrManager:VrManager};
}());
pc.extend(pc, function() {
  var VrDisplay = function(app, display) {
    var self = this;
    this._app = app;
    this._device = app.graphicsDevice;
    this.id = display.displayId;
    this._frameData = null;
    if (window.VRFrameData) {
      this._frameData = new window.VRFrameData;
    }
    this.display = display;
    this._camera = null;
    this.sitToStandInv = new pc.Mat4;
    this.leftView = new pc.Mat4;
    this.leftProj = new pc.Mat4;
    this.leftViewInv = new pc.Mat4;
    this.leftPos = new pc.Vec3;
    this.rightView = new pc.Mat4;
    this.rightProj = new pc.Mat4;
    this.rightViewInv = new pc.Mat4;
    this.rightPos = new pc.Vec3;
    this.combinedPos = new pc.Vec3;
    this.combinedView = new pc.Mat4;
    this.combinedProj = new pc.Mat4;
    this.combinedViewInv = new pc.Mat4;
    this.combinedFov = 0;
    this.combinedAspect = 0;
    this.presenting = false;
    self._presentChange = function(event) {
      var display;
      if (event.display) {
        display = event.display;
      } else {
        if (event.detail && event.detail.display) {
          display = event.detail.display;
        } else {
          if (event.detail && event.detail.vrdisplay) {
            display = event.detail.vrdisplay;
          } else {
            display = self.display;
          }
        }
      }
      if (display === self.display) {
        self.presenting = self.display && self.display.isPresenting;
        if (self.presenting) {
          var leftEye = self.display.getEyeParameters("left");
          var rightEye = self.display.getEyeParameters("right");
          var w = Math.max(leftEye.renderWidth, rightEye.renderWidth) * 2;
          var h = Math.max(leftEye.renderHeight, rightEye.renderHeight);
          self._app.graphicsDevice.setResolution(w, h);
          self._app._allowResize = false;
        } else {
          self._app.setCanvasResolution(pc.RESOLUTION_AUTO);
          self._app._allowResize = true;
        }
        self.fire("beforepresentchange", self);
        self.fire("presentchange", self);
      }
    };
    window.addEventListener("vrdisplaypresentchange", self._presentChange, false);
    pc.events.attach(this);
  };
  VrDisplay.prototype = {destroy:function() {
    window.removeEventListener("vrdisplaypresentchange", self._presentChange);
    if (this._camera) {
      this._camera.vrDisplay = null;
    }
    this._camera = null;
  }, poll:function() {
    if (this.display) {
      this.display.getFrameData(this._frameData);
      this.leftProj.data = this._frameData.leftProjectionMatrix;
      this.rightProj.data = this._frameData.rightProjectionMatrix;
      var stage = this.display.stageParameters;
      if (stage) {
        this.sitToStandInv.set(stage.sittingToStandingTransform).invert();
        this.combinedView.set(this._frameData.leftViewMatrix);
        this.leftView.mul2(this.combinedView, this.sitToStandInv);
        this.combinedView.set(this._frameData.rightViewMatrix);
        this.rightView.mul2(this.combinedView, this.sitToStandInv);
      } else {
        this.leftView.set(this._frameData.leftViewMatrix);
        this.rightView.set(this._frameData.rightViewMatrix);
      }
      var nx = this.leftProj.data[3] + this.leftProj.data[0];
      var nz = this.leftProj.data[11] + this.leftProj.data[8];
      var l = 1.0 / Math.sqrt(nx * nx + nz * nz);
      nx *= l;
      nz *= l;
      var maxFov = -Math.atan2(nz, nx);
      nx = this.rightProj.data[3] + this.rightProj.data[0];
      nz = this.rightProj.data[11] + this.rightProj.data[8];
      l = 1.0 / Math.sqrt(nx * nx + nz * nz);
      nx *= l;
      nz *= l;
      maxFov = Math.max(maxFov, -Math.atan2(nz, nx));
      maxFov *= 2.0;
      this.combinedFov = maxFov;
      var aspect = this.rightProj.data[5] / this.rightProj.data[0];
      this.combinedAspect = aspect;
      var view = this.combinedView;
      view.copy(this.leftView);
      view.invert();
      this.leftViewInv.copy(view);
      var pos = this.combinedPos.data;
      pos[0] = this.leftPos.data[0] = view.data[12];
      pos[1] = this.leftPos.data[1] = view.data[13];
      pos[2] = this.leftPos.data[2] = view.data[14];
      view.copy(this.rightView);
      view.invert();
      this.rightViewInv.copy(view);
      var deltaX = pos[0] - view.data[12];
      var deltaY = pos[1] - view.data[13];
      var deltaZ = pos[2] - view.data[14];
      var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);
      this.rightPos.data[0] = view.data[12];
      this.rightPos.data[1] = view.data[13];
      this.rightPos.data[2] = view.data[14];
      pos[0] += view.data[12];
      pos[1] += view.data[13];
      pos[2] += view.data[14];
      pos[0] *= 0.5;
      pos[1] *= 0.5;
      pos[2] *= 0.5;
      var b = Math.PI * 0.5;
      var c = maxFov * 0.5;
      var a = Math.PI - (b + c);
      var offset = dist * 0.5 * Math.sin(a);
      var fwdX = view.data[8];
      var fwdY = view.data[9];
      var fwdZ = view.data[10];
      view.data[12] = pos[0] + fwdX * offset;
      view.data[13] = pos[1] + fwdY * offset;
      view.data[14] = pos[2] + fwdZ * offset;
      this.combinedViewInv.copy(view);
      view.invert();
      this.combinedProj.setPerspective(maxFov * pc.math.RAD_TO_DEG, aspect, this.display.depthNear + offset, this.display.depthFar + offset, true);
    }
  }, requestPresent:function(callback) {
    if (!this.display) {
      if (callback) {
        callback(new Error("No VrDisplay to requestPresent"));
      }
      return;
    }
    if (this.presenting) {
      if (callback) {
        callback(new Error("VrDisplay already presenting"));
      }
      return;
    }
    this.display.requestPresent([{source:this._device.canvas}]).then(function() {
      if (callback) {
        callback();
      }
    }, function(err) {
      if (callback) {
        callback(err);
      }
    });
  }, exitPresent:function(callback) {
    if (!this.display) {
      if (callback) {
        callback(new Error("No VrDisplay to exitPresent"));
      }
    }
    if (!this.presenting) {
      if (callback) {
        callback(new Error("VrDisplay not presenting"));
      }
      return;
    }
    this.display.exitPresent().then(function() {
      if (callback) {
        callback();
      }
    }, function() {
      if (callback) {
        callback(new Error("exitPresent failed"));
      }
    });
  }, requestAnimationFrame:function(fn) {
    if (this.display) {
      this.display.requestAnimationFrame(fn);
    }
  }, submitFrame:function() {
    if (this.display) {
      this.display.submitFrame();
    }
  }, reset:function() {
    if (this.display) {
      this.display.resetPose();
    }
  }, setClipPlanes:function(n, f) {
    if (this.display) {
      this.display.depthNear = n;
      this.display.depthFar = f;
    }
  }, getFrameData:function() {
    if (this.display) {
      return this._frameData;
    }
  }};
  Object.defineProperty(VrDisplay.prototype, "capabilities", {get:function() {
    if (this.display) {
      return this.display.capabilities;
    }
    return {};
  }});
  return {VrDisplay:VrDisplay};
}());
pc.extend(pc, function() {
  var Http = function Http() {
  };
  Http.ContentType = {FORM_URLENCODED:"application/x-www-form-urlencoded", GIF:"image/gif", JPEG:"image/jpeg", DDS:"image/dds", JSON:"application/json", PNG:"image/png", TEXT:"text/plain", XML:"application/xml", WAV:"audio/x-wav", OGG:"audio/ogg", MP3:"audio/mpeg", MP4:"audio/mp4", AAC:"audio/aac", BIN:"application/octet-stream"};
  Http.ResponseType = {TEXT:"text", ARRAY_BUFFER:"arraybuffer", BLOB:"blob", DOCUMENT:"document"};
  Http.binaryExtensions = [".model", ".wav", ".ogg", ".mp3", ".mp4", ".m4a", ".aac", ".dds"];
  Http.prototype = {ContentType:Http.ContentType, ResponseType:Http.ResponseType, binaryExtensions:Http.binaryExtensions, get:function(url, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    return this.request("GET", url, options, callback);
  }, post:function(url, data, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options.postdata = data;
    return this.request("POST", url, options, callback);
  }, put:function(url, data, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options.postdata = data;
    return this.request("PUT", url, options, callback);
  }, del:function(url, options, callback) {
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    return this.request("DELETE", url, options, callback);
  }, request:function(method, url, options, callback) {
    var uri, query, timestamp, postdata, xhr;
    var errored = false;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options.callback = callback;
    if (options.async == null) {
      options.async = true;
    }
    if (options.headers == null) {
      options.headers = {};
    }
    if (options.postdata != null) {
      if (options.postdata instanceof Document) {
        postdata = options.postdata;
      } else {
        if (options.postdata instanceof FormData) {
          postdata = options.postdata;
        } else {
          if (options.postdata instanceof Object) {
            var contentType = options.headers["Content-Type"];
            if (contentType === undefined) {
              options.headers["Content-Type"] = Http.ContentType.FORM_URLENCODED;
              contentType = options.headers["Content-Type"];
            }
            switch(contentType) {
              case Http.ContentType.FORM_URLENCODED:
                postdata = "";
                var bFirstItem = true;
                for (var key in options.postdata) {
                  if (options.postdata.hasOwnProperty(key)) {
                    if (bFirstItem) {
                      bFirstItem = false;
                    } else {
                      postdata += "&";
                    }
                    postdata += escape(key) + "=" + escape(options.postdata[key]);
                  }
                }
                break;
              default:
              case Http.ContentType.JSON:
                if (contentType == null) {
                  options.headers["Content-Type"] = Http.ContentType.JSON;
                }
                postdata = JSON.stringify(options.postdata);
                break;
            }
          } else {
            postdata = options.postdata;
          }
        }
      }
    }
    if (!xhr) {
      xhr = new XMLHttpRequest;
    }
    if (options.cache === false) {
      timestamp = pc.time.now();
      uri = new pc.URI(url);
      if (!uri.query) {
        uri.query = "ts=" + timestamp;
      } else {
        uri.query = uri.query + "&ts=" + timestamp;
      }
      url = uri.toString();
    }
    if (options.query) {
      uri = new pc.URI(url);
      query = pc.extend(uri.getQuery(), options.query);
      uri.setQuery(query);
      url = uri.toString();
    }
    xhr.open(method, url, options.async);
    xhr.withCredentials = options.withCredentials !== undefined ? options.withCredentials : false;
    xhr.responseType = options.responseType || this._guessResponseType(url);
    for (var header in options.headers) {
      if (options.headers.hasOwnProperty(header)) {
        xhr.setRequestHeader(header, options.headers[header]);
      }
    }
    xhr.onreadystatechange = function() {
      this._onReadyStateChange(method, url, options, xhr);
    }.bind(this);
    xhr.onerror = function() {
      this._onError(method, url, options, xhr);
      errored = true;
    }.bind(this);
    try {
      xhr.send(postdata);
    } catch (e) {
      if (!errored) {
        options.error(xhr.status, xhr, e);
      }
    }
    return xhr;
  }, _guessResponseType:function(url) {
    var uri = new pc.URI(url);
    var ext = pc.path.getExtension(uri.path);
    if (Http.binaryExtensions.indexOf(ext) >= 0) {
      return Http.ResponseType.ARRAY_BUFFER;
    }
    if (ext === ".xml") {
      return Http.ResponseType.DOCUMENT;
    }
    return Http.ResponseType.TEXT;
  }, _isBinaryContentType:function(contentType) {
    var binTypes = [Http.ContentType.MP4, Http.ContentType.WAV, Http.ContentType.OGG, Http.ContentType.MP3, Http.ContentType.BIN, Http.ContentType.DDS];
    if (binTypes.indexOf(contentType) >= 0) {
      return true;
    }
    return false;
  }, _onReadyStateChange:function(method, url, options, xhr) {
    if (xhr.readyState === 4) {
      switch(xhr.status) {
        case 0:
          {
            if (url[0] != "/") {
              this._onSuccess(method, url, options, xhr);
            }
            break;
          }
        case 200:
        case 201:
        case 206:
        case 304:
          {
            this._onSuccess(method, url, options, xhr);
            break;
          }
        default:
          {
            this._onError(method, url, options, xhr);
            break;
          }
      }
    }
  }, _onSuccess:function(method, url, options, xhr) {
    var response;
    var header;
    var contentType;
    var parts;
    header = xhr.getResponseHeader("Content-Type");
    if (header) {
      parts = header.split(";");
      contentType = parts[0].trim();
    }
    if (contentType === this.ContentType.JSON || url.split("?")[0].endsWith(".json")) {
      response = JSON.parse(xhr.responseText);
    } else {
      if (this._isBinaryContentType(contentType)) {
        response = xhr.response;
      } else {
        if (xhr.responseType === Http.ResponseType.ARRAY_BUFFER) {
          logWARNING(pc.string.format("responseType: {0} being served with Content-Type: {1}", Http.ResponseType.ARRAY_BUFFER, contentType));
          response = xhr.response;
        } else {
          if (xhr.responseType === Http.ResponseType.DOCUMENT || contentType === this.ContentType.XML) {
            response = xhr.responseXML;
          } else {
            response = xhr.responseText;
          }
        }
      }
    }
    options.callback(null, response);
  }, _onError:function(method, url, options, xhr) {
    options.callback(xhr.status, null);
  }};
  return {Http:Http, http:new Http};
}());
pc.extend(pc, function() {
  var ScriptRegistry = function(app) {
    pc.events.attach(this);
    this.app = app;
    this._scripts = {};
    this._list = [];
  };
  ScriptRegistry.prototype.add = function(script) {
    var self = this;
    if (this._scripts.hasOwnProperty(script.__name)) {
      setTimeout(function() {
        if (script.prototype.swap) {
          var old = self._scripts[script.__name];
          var ind = self._list.indexOf(old);
          self._list[ind] = script;
          self._scripts[script.__name] = script;
          self.fire("swap", script.__name, script);
          self.fire("swap:" + script.__name, script);
        } else {
          console.warn("script registry already has '" + script.__name + "' script, define 'swap' method for new script type to enable code hot swapping");
        }
      });
      return false;
    }
    this._scripts[script.__name] = script;
    this._list.push(script);
    this.fire("add", script.__name, script);
    this.fire("add:" + script.__name, script);
    setTimeout(function() {
      if (!self._scripts.hasOwnProperty(script.__name)) {
        return;
      }
      var components = self.app.systems.script._components;
      var i, scriptInstance, attributes;
      var scriptInstances = [];
      var scriptInstancesInitialized = [];
      for (i = 0; i < components.length; i++) {
        if (components[i]._scriptsIndex[script.__name] && components[i]._scriptsIndex[script.__name].awaiting) {
          if (components[i]._scriptsData && components[i]._scriptsData[script.__name]) {
            attributes = components[i]._scriptsData[script.__name].attributes;
          }
          scriptInstance = components[i].create(script.__name, {preloading:true, ind:components[i]._scriptsIndex[script.__name].ind, attributes:attributes});
          if (scriptInstance) {
            scriptInstances.push(scriptInstance);
          }
        }
      }
      for (i = 0; i < scriptInstances.length; i++) {
        scriptInstances[i].__initializeAttributes();
      }
      for (i = 0; i < scriptInstances.length; i++) {
        if (scriptInstances[i].enabled) {
          scriptInstances[i]._initialized = true;
          scriptInstancesInitialized.push(scriptInstances[i]);
          if (scriptInstances[i].initialize) {
            scriptInstances[i].initialize();
          }
        }
      }
      for (i = 0; i < scriptInstancesInitialized.length; i++) {
        if (!scriptInstancesInitialized[i].enabled || scriptInstancesInitialized[i]._postInitialized) {
          continue;
        }
        scriptInstancesInitialized[i]._postInitialized = true;
        if (scriptInstancesInitialized[i].postInitialize) {
          scriptInstancesInitialized[i].postInitialize();
        }
      }
    });
    return true;
  };
  ScriptRegistry.prototype.remove = function(script) {
    var name = script;
    if (typeof script === "function") {
      name = script.__name;
    }
    if (!this._scripts.hasOwnProperty(name)) {
      return false;
    }
    var item = this._scripts[name];
    delete this._scripts[name];
    var ind = this._list.indexOf(item);
    this._list.splice(ind, 1);
    this.fire("remove", name, item);
    this.fire("remove:" + name, item);
    return true;
  };
  ScriptRegistry.prototype.get = function(name) {
    return this._scripts[name] || null;
  };
  ScriptRegistry.prototype.has = function(name) {
    return this._scripts.hasOwnProperty(name);
  };
  ScriptRegistry.prototype.list = function() {
    return this._list;
  };
  return {ScriptRegistry:ScriptRegistry};
}());
pc.extend(pc, function() {
  var rawToValue = function(app, args, value, old) {
    var i;
    switch(args.type) {
      case "boolean":
        return !!value;
      case "number":
        if (typeof value === "number") {
          return value;
        } else {
          if (typeof value === "string") {
            var v = parseInt(value, 10);
            if (isNaN(v)) {
              return null;
            }
            return v;
          } else {
            if (typeof value === "boolean") {
              return 0 + value;
            } else {
              return null;
            }
          }
        }
        break;
      case "json":
        if (typeof value === "object") {
          return value;
        } else {
          try {
            return JSON.parse(value);
          } catch (ex) {
            return null;
          }
        }
        break;
      case "asset":
        if (args.array) {
          var result = [];
          if (value instanceof Array) {
            for (i = 0; i < value.length; i++) {
              if (value[i] instanceof pc.Asset) {
                result.push(value[i]);
              } else {
                if (typeof value[i] === "number") {
                  result.push(app.assets.get(value[i]) || null);
                } else {
                  if (typeof value[i] === "string") {
                    result.push(app.assets.get(parseInt(value[i], 10)) || null);
                  } else {
                    result.push(null);
                  }
                }
              }
            }
          }
          return result;
        } else {
          if (value instanceof pc.Asset) {
            return value;
          } else {
            if (typeof value === "number") {
              return app.assets.get(value) || null;
            } else {
              if (typeof value === "string") {
                return app.assets.get(parseInt(value, 10)) || null;
              } else {
                return null;
              }
            }
          }
        }
        break;
      case "entity":
        if (value instanceof pc.GraphNode) {
          return value;
        } else {
          if (typeof value === "string") {
            return app.root.findByGuid(value);
          } else {
            return null;
          }
        }
        break;
      case "rgb":
      case "rgba":
        if (value instanceof pc.Color) {
          if (old instanceof pc.Color) {
            old.copy(value);
            return old;
          } else {
            return value.clone();
          }
        } else {
          if (value instanceof Array && value.length >= 3 && value.length <= 4) {
            for (i = 0; i < value.length; i++) {
              if (typeof value[i] !== "number") {
                return null;
              }
            }
            if (!old) {
              old = new pc.Color;
            }
            for (i = 0; i < 4; i++) {
              old.data[i] = i === 4 && value.length === 3 ? 1 : value[i];
            }
            return old;
          } else {
            if (typeof value === "string" && /#([0-9abcdef]{2}){3,4}/i.test(value)) {
              if (!old) {
                old = new pc.Color;
              }
              old.fromString(value);
              return old;
            } else {
              return null;
            }
          }
        }
        break;
      case "vec2":
      case "vec3":
      case "vec4":
        var len = parseInt(args.type.slice(3), 10);
        if (value instanceof pc["Vec" + len]) {
          if (old instanceof pc["Vec" + len]) {
            old.copy(value);
            return old;
          } else {
            return value.clone();
          }
        } else {
          if (value instanceof Array && value.length === len) {
            for (i = 0; i < value.length; i++) {
              if (typeof value[i] !== "number") {
                return null;
              }
            }
            if (!old) {
              old = new pc["Vec" + len];
            }
            for (i = 0; i < len; i++) {
              old.data[i] = value[i];
            }
            return old;
          } else {
            return null;
          }
        }
        break;
      case "curve":
        if (value) {
          var curve;
          if (value instanceof pc.Curve || value instanceof pc.CurveSet) {
            curve = value.clone();
          } else {
            var CurveType = value.keys[0] instanceof Array ? pc.CurveSet : pc.Curve;
            curve = new CurveType(value.keys);
            curve.type = value.type;
          }
          return curve;
        }
        break;
    }
    return value;
  };
  var ScriptAttributes = function(scriptType) {
    this.scriptType = scriptType;
    this.index = {};
  };
  ScriptAttributes.prototype.add = function(name, args) {
    if (this.index[name]) {
      console.warn("attribute '" + name + "' is already defined for script type '" + this.scriptType.name + "'");
      return;
    } else {
      if (pc.createScript.reservedAttributes[name]) {
        console.warn("attribute '" + name + "' is a reserved attribute name");
        return;
      }
    }
    this.index[name] = args;
    Object.defineProperty(this.scriptType.prototype, name, {get:function() {
      return this.__attributes[name];
    }, set:function(raw) {
      var old = this.__attributes[name];
      this.__attributes[name] = rawToValue(this.app, args, raw, old);
      this.fire("attr", name, this.__attributes[name], old);
      this.fire("attr:" + name, this.__attributes[name], old);
    }});
  };
  ScriptAttributes.prototype.remove = function(name) {
    if (!this.index[name]) {
      return false;
    }
    delete this.index[name];
    delete this.scriptType.prototype[name];
    return true;
  };
  ScriptAttributes.prototype.has = function(name) {
    return !!this.index[name];
  };
  ScriptAttributes.prototype.get = function(name) {
    return this.index[name] || null;
  };
  var createScript = function(name, app) {
    if (pc.script.legacy) {
      console.error("This project is using the legacy script system. You cannot call pc.createScript(). See: http://developer.playcanvas.com/en/user-manual/scripting/legacy/");
      return null;
    }
    if (createScript.reservedScripts[name]) {
      throw new Error("script name: '" + name + "' is reserved, please change script name");
    }
    var script = function(args) {
      if (!args || !args.app || !args.entity) {
        console.warn("script '" + name + "' has missing arguments in consructor");
      }
      pc.events.attach(this);
      this.app = args.app;
      this.entity = args.entity;
      this._enabled = typeof args.enabled === "boolean" ? args.enabled : true;
      this._enabledOld = this.enabled;
      this.__attributes = {};
      this.__attributesRaw = args.attributes || null;
      this.__scriptType = script;
    };
    script.__name = name;
    script.attributes = new ScriptAttributes(script);
    script.prototype.__initializeAttributes = function(force) {
      if (!force && !this.__attributesRaw) {
        return;
      }
      for (var key in script.attributes.index) {
        if (this.__attributesRaw && this.__attributesRaw.hasOwnProperty(key)) {
          this[key] = this.__attributesRaw[key];
        } else {
          if (!this.__attributes.hasOwnProperty(key)) {
            if (script.attributes.index[key].hasOwnProperty("default")) {
              this[key] = script.attributes.index[key].default;
            } else {
              this[key] = null;
            }
          }
        }
      }
      this.__attributesRaw = null;
    };
    script.extend = function(methods) {
      for (var key in methods) {
        if (!methods.hasOwnProperty(key)) {
          continue;
        }
        script.prototype[key] = methods[key];
      }
    };
    Object.defineProperty(script.prototype, "enabled", {get:function() {
      return this._enabled && this.entity.script.enabled && this.entity.enabled;
    }, set:function(value) {
      this._enabled = !!value;
      if (this.enabled === this._enabledOld) {
        return;
      }
      this._enabledOld = this.enabled;
      this.fire(this.enabled ? "enable" : "disable");
      this.fire("state", this.enabled);
      if (!this._initialized && this.enabled) {
        this._initialized = true;
        this.__initializeAttributes(true);
        if (this.initialize) {
          this.entity.script._scriptMethod(this, pc.ScriptComponent.scriptMethods.initialize);
        }
      }
      if (this._initialized && !this._postInitialized && this.enabled && !this.entity.script._beingEnabled) {
        this._postInitialized = true;
        if (this.postInitialize) {
          this.entity.script._scriptMethod(this, pc.ScriptComponent.scriptMethods.postInitialize);
        }
      }
    }});
    var registry = app ? app.scripts : pc.Application.getApplication().scripts;
    registry.add(script);
    pc.ScriptHandler._push(script);
    return script;
  };
  createScript.reservedScripts = ["system", "entity", "create", "destroy", "swap", "move", "scripts", "_scripts", "_scriptsIndex", "_scriptsData", "enabled", "_oldState", "onEnable", "onDisable", "onPostStateChange", "_onSetEnabled", "_checkState", "_onBeforeRemove", "_onInitializeAttributes", "_onInitialize", "_onPostInitialize", "_onUpdate", "_onPostUpdate", "_callbacks", "has", "on", "off", "fire", "once", "hasEvent"];
  var reservedScripts = {};
  var i;
  for (i = 0; i < createScript.reservedScripts.length; i++) {
    reservedScripts[createScript.reservedScripts[i]] = 1;
  }
  createScript.reservedScripts = reservedScripts;
  createScript.reservedAttributes = ["app", "entity", "enabled", "_enabled", "_enabledOld", "__attributes", "__attributesRaw", "__scriptType", "_callbacks", "has", "on", "off", "fire", "once", "hasEvent"];
  var reservedAttributes = {};
  for (i = 0; i < createScript.reservedAttributes.length; i++) {
    reservedAttributes[createScript.reservedAttributes[i]] = 1;
  }
  createScript.reservedAttributes = reservedAttributes;
  return {createScript:createScript};
}());
pc.script = function() {
  var _legacy = false;
  var _createdLoadingScreen = false;
  var script = {app:null, create:function(name, callback) {
    if (!_legacy) {
      return;
    }
    var ScriptType = callback(pc.script.app);
    ScriptType._pcScriptName = name;
    pc.ScriptHandler._push(ScriptType);
    this.fire("created", name, callback);
  }, attribute:function(name, type, defaultValue, options) {
  }, createLoadingScreen:function(callback) {
    if (_createdLoadingScreen) {
      return;
    }
    _createdLoadingScreen = true;
    var app = pc.Application.getApplication();
    callback(app);
  }};
  Object.defineProperty(script, "legacy", {get:function() {
    return _legacy;
  }, set:function(value) {
    _legacy = value;
  }});
  pc.events.attach(script);
  return script;
}();
pc.extend(pc, function() {
  var Application = function(canvas, options) {
    options = options || {};
    pc.log.open();
    pc.events.attach(this);
    Application._applications[canvas.id] = this;
    Application._currentApplication = this;
    this._time = 0;
    this.timeScale = 1;
    this.maxDeltaTime = 0.1;
    this.autoRender = true;
    this.renderNextFrame = false;
    this._librariesLoaded = false;
    this._fillMode = pc.FILLMODE_KEEP_ASPECT;
    this._resolutionMode = pc.RESOLUTION_FIXED;
    this._allowResize = true;
    this.context = this;
    this.graphicsDevice = new pc.GraphicsDevice(canvas, options.graphicsDeviceOptions);
    this.stats = new pc.ApplicationStats(this.graphicsDevice);
    this.systems = new pc.ComponentSystemRegistry;
    this._audioManager = new pc.SoundManager(options);
    this.loader = new pc.ResourceLoader;
    this.scene = new pc.Scene;
    this.root = new pc.Entity(this);
    this.root._enabledInHierarchy = true;
    this._enableList = [];
    this._enableList.size = 0;
    this.assets = new pc.AssetRegistry(this.loader);
    if (options.assetPrefix) {
      this.assets.prefix = options.assetPrefix;
    }
    this.scriptsOrder = options.scriptsOrder || [];
    this.scripts = new pc.ScriptRegistry(this);
    var self = this;
    this.defaultLayerWorld = new pc.Layer({name:"World", id:pc.LAYERID_WORLD});
    if (this.graphicsDevice.webgl2) {
      this.defaultLayerDepth = new pc.Layer({enabled:false, name:"Depth", id:pc.LAYERID_DEPTH, onEnable:function() {
        if (this.renderTarget) {
          return;
        }
        var depthBuffer = new pc.Texture(self.graphicsDevice, {format:pc.PIXELFORMAT_DEPTHSTENCIL, width:self.graphicsDevice.width, height:self.graphicsDevice.height});
        depthBuffer.minFilter = pc.FILTER_NEAREST;
        depthBuffer.magFilter = pc.FILTER_NEAREST;
        depthBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
        depthBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
        this.renderTarget = new pc.RenderTarget({colorBuffer:null, depthBuffer:depthBuffer, autoResolve:false});
        self.graphicsDevice.scope.resolve("uDepthMap").setValue(depthBuffer);
      }, onDisable:function() {
        if (!this.renderTarget) {
          return;
        }
        this.renderTarget._depthBuffer.destroy();
        this.renderTarget.destroy();
        this.renderTarget = null;
      }, onPreRenderOpaque:function(cameraPass) {
        var gl = self.graphicsDevice.gl;
        this.srcFbo = gl.getParameter(gl.FRAMEBUFFER_BINDING);
        if (!this.renderTarget || (this.renderTarget.width !== self.graphicsDevice.width || this.renderTarget.height !== self.graphicsDevice.height)) {
          this.onDisable();
          this.onEnable();
        }
        this.oldClear = this.cameras[cameraPass].camera._clearOptions;
        this.cameras[cameraPass].camera._clearOptions = this.depthClearOptions;
      }, onPostRenderOpaque:function(cameraPass) {
        if (!this.renderTarget) {
          return;
        }
        this.cameras[cameraPass].camera._clearOptions = this.oldClear;
        var gl = self.graphicsDevice.gl;
        self.graphicsDevice.setRenderTarget(this.renderTarget);
        self.graphicsDevice.updateBegin();
        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, this.srcFbo);
        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, this.renderTarget._glFrameBuffer);
        gl.blitFramebuffer(0, 0, this.renderTarget.width, this.renderTarget.height, 0, 0, this.renderTarget.width, this.renderTarget.height, gl.DEPTH_BUFFER_BIT, gl.NEAREST);
      }});
      this.defaultLayerDepth.depthClearOptions = {flags:0};
    } else {
      this.defaultLayerDepth = new pc.Layer({enabled:false, name:"Depth", id:pc.LAYERID_DEPTH, shaderPass:pc.SHADER_DEPTH, onEnable:function() {
        if (this.renderTarget) {
          return;
        }
        var colorBuffer = new pc.Texture(self.graphicsDevice, {format:pc.PIXELFORMAT_R8_G8_B8_A8, width:self.graphicsDevice.width, height:self.graphicsDevice.height});
        colorBuffer.minFilter = pc.FILTER_NEAREST;
        colorBuffer.magFilter = pc.FILTER_NEAREST;
        colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
        colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
        this.renderTarget = new pc.RenderTarget(self.graphicsDevice, colorBuffer, {depth:true, stencil:self.graphicsDevice.supportsStencil});
        self.graphicsDevice.scope.resolve("uDepthMap").setValue(colorBuffer);
      }, onDisable:function() {
        if (!this.renderTarget) {
          return;
        }
        this.renderTarget._colorBuffer.destroy();
        this.renderTarget.destroy();
        this.renderTarget = null;
      }, onPostCull:function(cameraPass) {
        var visibleObjects = this.instances.visibleOpaque[cameraPass];
        var visibleList = visibleObjects.list;
        var visibleLength = 0;
        var layers = self.scene.layers.layerList;
        var subLayerEnabled = self.scene.layers.subLayerEnabled;
        var isTransparent = self.scene.layers.subLayerList;
        var rt = self.defaultLayerWorld.renderTarget;
        var cam = this.cameras[cameraPass];
        var layer;
        var j;
        var layerVisibleList, layerCamId, layerVisibleListLength, drawCall, transparent;
        for (var i = 0; i < layers.length; i++) {
          layer = layers[i];
          if (layer === this) {
            break;
          }
          if (layer.renderTarget !== rt || !layer.enabled || !subLayerEnabled[i]) {
            continue;
          }
          layerCamId = layer.cameras.indexOf(cam);
          if (layerCamId < 0) {
            continue;
          }
          transparent = isTransparent[i];
          layerVisibleList = transparent ? layer.instances.visibleTransparent[layerCamId] : layer.instances.visibleOpaque[layerCamId];
          layerVisibleListLength = layerVisibleList.length;
          layerVisibleList = layerVisibleList.list;
          for (j = 0; j < layerVisibleListLength; j++) {
            drawCall = layerVisibleList[j];
            if (drawCall.material && drawCall.material.depthWrite && !drawCall._noDepthDrawGl1) {
              visibleList[visibleLength] = drawCall;
              visibleLength++;
            }
          }
        }
        visibleObjects.length = visibleLength;
      }, onPreRenderOpaque:function(cameraPass) {
        if (!this.renderTarget || (this.renderTarget.width !== self.graphicsDevice.width || this.renderTarget.height !== self.graphicsDevice.height)) {
          this.onDisable();
          this.onEnable();
        }
        this.oldClear = this.cameras[cameraPass].camera._clearOptions;
        this.cameras[cameraPass].camera._clearOptions = this.rgbaDepthClearOptions;
      }, onDrawCall:function() {
        self.graphicsDevice.setColorWrite(true, true, true, true);
      }, onPostRenderOpaque:function(cameraPass) {
        if (!this.renderTarget) {
          return;
        }
        this.cameras[cameraPass].camera._clearOptions = this.oldClear;
      }});
      this.defaultLayerDepth.rgbaDepthClearOptions = {color:[254.0 / 255, 254.0 / 255, 254.0 / 255, 254.0 / 255], depth:1.0, flags:pc.CLEARFLAG_COLOR | pc.CLEARFLAG_DEPTH};
    }
    this.defaultLayerSkybox = new pc.Layer({enabled:false, name:"Skybox", id:pc.LAYERID_SKYBOX, opaqueSortMode:pc.SORTMODE_NONE});
    this.defaultLayerUi = new pc.Layer({enabled:true, name:"UI", id:pc.LAYERID_UI, transparentSortMode:pc.SORTMODE_MANUAL, passThrough:true});
    this.defaultLayerImmediate = new pc.Layer({enabled:true, name:"Immediate", id:pc.LAYERID_IMMEDIATE, opaqueSortMode:pc.SORTMODE_NONE, passThrough:true});
    this.defaultLayerComposition = new pc.LayerComposition;
    this.defaultLayerComposition.pushOpaque(this.defaultLayerWorld);
    this.defaultLayerComposition.pushOpaque(this.defaultLayerDepth);
    this.defaultLayerComposition.pushOpaque(this.defaultLayerSkybox);
    this.defaultLayerComposition.pushTransparent(this.defaultLayerWorld);
    this.defaultLayerComposition.pushOpaque(this.defaultLayerImmediate);
    this.defaultLayerComposition.pushTransparent(this.defaultLayerImmediate);
    this.defaultLayerComposition.pushTransparent(this.defaultLayerUi);
    this.scene.layers = this.defaultLayerComposition;
    this._immediateLayer = this.defaultLayerImmediate;
    this.scene.on("set:layers", function(oldComp, newComp) {
      var list = newComp.layerList;
      var layer;
      for (var i = 0; i < list.length; i++) {
        layer = list[i];
        switch(layer.id) {
          case pc.LAYERID_DEPTH:
            layer.onEnable = self.defaultLayerDepth.onEnable;
            layer.onDisable = self.defaultLayerDepth.onDisable;
            layer.onPreRenderOpaque = self.defaultLayerDepth.onPreRenderOpaque;
            layer.onPostRenderOpaque = self.defaultLayerDepth.onPostRenderOpaque;
            layer.depthClearOptions = self.defaultLayerDepth.depthClearOptions;
            layer.rgbaDepthClearOptions = self.defaultLayerDepth.rgbaDepthClearOptions;
            layer.shaderPass = self.defaultLayerDepth.shaderPass;
            layer.onPostCull = self.defaultLayerDepth.onPostCull;
            layer.onDrawCall = self.defaultLayerDepth.onDrawCall;
            break;
          case pc.LAYERID_UI:
            layer.passThrough = self.defaultLayerUi.passThrough;
            break;
          case pc.LAYERID_IMMEDIATE:
            layer.passThrough = self.defaultLayerImmediate.passThrough;
            break;
        }
      }
    });
    this.renderer = new pc.ForwardRenderer(this.graphicsDevice);
    this.renderer.scene = this.scene;
    this.lightmapper = new pc.Lightmapper(this.graphicsDevice, this.root, this.scene, this.renderer, this.assets);
    this.once("prerender", this._firstBake, this);
    this.batcher = new pc.BatchManager(this.graphicsDevice, this.root, this.scene);
    this.once("prerender", this._firstBatch, this);
    this.keyboard = options.keyboard || null;
    this.mouse = options.mouse || null;
    this.touch = options.touch || null;
    this.gamepads = options.gamepads || null;
    this.elementInput = options.elementInput || null;
    if (this.elementInput) {
      this.elementInput.app = this;
    }
    this.vr = null;
    if (options.vr) {
      this._onVrChange(options.vr);
    }
    this._inTools = false;
    this._skyboxLast = 0;
    this._scriptPrefix = options.scriptPrefix || "";
    this.loader.addHandler("animation", new pc.AnimationHandler);
    this.loader.addHandler("model", new pc.ModelHandler(this.graphicsDevice));
    this.loader.addHandler("material", new pc.MaterialHandler(this));
    this.loader.addHandler("texture", new pc.TextureHandler(this.graphicsDevice, this.assets, this.loader));
    this.loader.addHandler("text", new pc.TextHandler);
    this.loader.addHandler("json", new pc.JsonHandler);
    this.loader.addHandler("audio", new pc.AudioHandler(this._audioManager));
    this.loader.addHandler("script", new pc.ScriptHandler(this));
    this.loader.addHandler("scene", new pc.SceneHandler(this));
    this.loader.addHandler("cubemap", new pc.CubemapHandler(this.graphicsDevice, this.assets, this.loader));
    this.loader.addHandler("html", new pc.HtmlHandler);
    this.loader.addHandler("css", new pc.CssHandler);
    this.loader.addHandler("shader", new pc.ShaderHandler);
    this.loader.addHandler("hierarchy", new pc.HierarchyHandler(this));
    this.loader.addHandler("scenesettings", new pc.SceneSettingsHandler(this));
    this.loader.addHandler("folder", new pc.FolderHandler);
    this.loader.addHandler("font", new pc.FontHandler(this.loader));
    this.loader.addHandler("binary", new pc.BinaryHandler);
    this.loader.addHandler("textureatlas", new pc.TextureAtlasHandler(this.loader));
    this.loader.addHandler("sprite", new pc.SpriteHandler(this.assets, this.graphicsDevice));
    new pc.RigidBodyComponentSystem(this);
    new pc.CollisionComponentSystem(this);
    new pc.AnimationComponentSystem(this);
    new pc.ModelComponentSystem(this);
    new pc.CameraComponentSystem(this);
    new pc.LightComponentSystem(this);
    if (pc.script.legacy) {
      new pc.ScriptLegacyComponentSystem(this);
    } else {
      new pc.ScriptComponentSystem(this);
    }
    new pc.AudioSourceComponentSystem(this, this._audioManager);
    new pc.SoundComponentSystem(this, this._audioManager);
    new pc.AudioListenerComponentSystem(this, this._audioManager);
    new pc.ParticleSystemComponentSystem(this);
    new pc.ScreenComponentSystem(this);
    new pc.ElementComponentSystem(this);
    new pc.SpriteComponentSystem(this);
    new pc.ZoneComponentSystem(this);
    this._visibilityChangeHandler = this.onVisibilityChange.bind(this);
    if (document.hidden !== undefined) {
      this._hiddenAttr = "hidden";
      document.addEventListener("visibilitychange", this._visibilityChangeHandler, false);
    } else {
      if (document.mozHidden !== undefined) {
        this._hiddenAttr = "mozHidden";
        document.addEventListener("mozvisibilitychange", this._visibilityChangeHandler, false);
      } else {
        if (document.msHidden !== undefined) {
          this._hiddenAttr = "msHidden";
          document.addEventListener("msvisibilitychange", this._visibilityChangeHandler, false);
        } else {
          if (document.webkitHidden !== undefined) {
            this._hiddenAttr = "webkitHidden";
            document.addEventListener("webkitvisibilitychange", this._visibilityChangeHandler, false);
          }
        }
      }
    }
    this.tick = makeTick(this);
  };
  Application._currentApplication = null;
  Application._applications = {};
  Application.getApplication = function(id) {
    if (id) {
      return Application._applications[id];
    } else {
      return Application._currentApplication;
    }
  };
  var Progress = function(length) {
    this.length = length;
    this.count = 0;
    this.inc = function() {
      this.count++;
    };
    this.done = function() {
      return this.count === this.length;
    };
  };
  Application.prototype = {configure:function(url, callback) {
    var self = this;
    pc.http.get(url, function(err, response) {
      if (err) {
        callback(err);
        return;
      }
      var props = response.application_properties;
      var assets = response.assets;
      self._parseApplicationProperties(props, function(err) {
        self._onVrChange(props.vr);
        self._parseAssets(assets);
        if (!err) {
          callback(null);
        } else {
          callback(err);
        }
      });
    });
  }, preload:function(callback) {
    var self = this;
    self.fire("preload:start");
    var assets = this.assets.list({preload:true});
    var _assets = new Progress(assets.length);
    var _done = false;
    var done = function() {
      if (!self.graphicsDevice) {
        return;
      }
      if (!_done && _assets.done()) {
        _done = true;
        self.fire("preload:end");
        callback();
      }
    };
    var total = assets.length;
    var count = function() {
      return _assets.count;
    };
    var i;
    if (_assets.length) {
      var onAssetLoad = function(asset) {
        _assets.inc();
        self.fire("preload:progress", count() / total);
        if (_assets.done()) {
          done();
        }
      };
      var onAssetError = function(err, asset) {
        _assets.inc();
        self.fire("preload:progress", count() / total);
        if (_assets.done()) {
          done();
        }
      };
      for (i = 0; i < assets.length; i++) {
        if (!assets[i].loaded) {
          assets[i].once("load", onAssetLoad);
          assets[i].once("error", onAssetError);
          this.assets.load(assets[i]);
        } else {
          _assets.inc();
          self.fire("preload:progress", count() / total);
          if (_assets.done()) {
            done();
          }
        }
      }
    } else {
      done();
    }
  }, loadSceneHierarchy:function(url, callback) {
    var self = this;
    var handler = this.loader.getHandler("hierarchy");
    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {
      url = pc.path.join(this.assets.prefix, url);
    }
    handler.load(url, function(err, data) {
      if (err) {
        if (callback) {
          callback(err);
        }
        return;
      }
      var _loaded = function() {
        self.systems.script.preloading = true;
        var entity = handler.open(url, data);
        self.systems.script.preloading = false;
        self.loader.clearCache(url, "hierarchy");
        self.root.addChild(entity);
        pc.ComponentSystem.initialize(entity);
        pc.ComponentSystem.postInitialize(entity);
        if (callback) {
          callback(err, entity);
        }
      };
      self._preloadScripts(data, _loaded);
    });
  }, loadSceneSettings:function(url, callback) {
    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {
      url = pc.path.join(this.assets.prefix, url);
    }
    this.loader.load(url, "scenesettings", function(err, settings) {
      if (!err) {
        this.applySceneSettings(settings);
        if (callback) {
          callback(null);
        }
      } else {
        if (callback) {
          callback(err);
        }
      }
    }.bind(this));
  }, loadScene:function(url, callback) {
    var self = this;
    var handler = this.loader.getHandler("scene");
    if (this.assets && this.assets.prefix && !pc.ABSOLUTE_URL.test(url)) {
      url = pc.path.join(this.assets.prefix, url);
    }
    handler.load(url, function(err, data) {
      if (!err) {
        var _loaded = function() {
          self.systems.script.preloading = true;
          var scene = handler.open(url, data);
          self.systems.script.preloading = false;
          self.loader.clearCache(url, "scene");
          self.loader.patch({resource:scene, type:"scene"}, self.assets);
          self.root.addChild(scene.root);
          if (self.systems.rigidbody && typeof Ammo !== "undefined") {
            self.systems.rigidbody.setGravity(scene._gravity.x, scene._gravity.y, scene._gravity.z);
          }
          if (callback) {
            callback(null, scene);
          }
        };
        this._preloadScripts(data, _loaded);
      } else {
        if (callback) {
          callback(err);
        }
      }
    }.bind(this));
  }, _preloadScripts:function(sceneData, callback) {
    if (!pc.script.legacy) {
      callback();
      return;
    }
    var self = this;
    self.systems.script.preloading = true;
    var scripts = this._getScriptReferences(sceneData);
    var i = 0, l = scripts.length;
    var progress = new Progress(l);
    var scriptUrl;
    var regex = /^http(s)?:\/\//;
    if (l) {
      var onLoad = function(err, ScriptType) {
        if (err) {
          console.error(err);
        }
        progress.inc();
        if (progress.done()) {
          self.systems.script.preloading = false;
          callback();
        }
      };
      for (i = 0; i < l; i++) {
        scriptUrl = scripts[i];
        if (!regex.test(scriptUrl.toLowerCase()) && self._scriptPrefix) {
          scriptUrl = pc.path.join(self._scriptPrefix, scripts[i]);
        }
        this.loader.load(scriptUrl, "script", onLoad);
      }
    } else {
      self.systems.script.preloading = false;
      callback();
    }
  }, _parseApplicationProperties:function(props, callback) {
    var i;
    var len;
    if (!props.useDevicePixelRatio) {
      props.useDevicePixelRatio = props.use_device_pixel_ratio;
    }
    if (!props.resolutionMode) {
      props.resolutionMode = props.resolution_mode;
    }
    if (!props.fillMode) {
      props.fillMode = props.fill_mode;
    }
    if (!props.vrPolyfillUrl) {
      props.vrPolyfillUrl = props.vr_polyfill_url;
    }
    this._width = props.width;
    this._height = props.height;
    if (props.useDevicePixelRatio) {
      this.graphicsDevice.maxPixelRatio = window.devicePixelRatio;
    }
    this.setCanvasResolution(props.resolutionMode, this._width, this._height);
    this.setCanvasFillMode(props.fillMode, this._width, this._height);
    if (props.vr && props.vrPolyfillUrl) {
      if (!pc.VrManager.isSupported || pc.platform.android) {
        props.libraries.push(props.vrPolyfillUrl);
      }
    }
    if (props.layers && props.layerOrder) {
      var composition = new pc.LayerComposition;
      var layers = {};
      for (var key in props.layers) {
        var data = props.layers[key];
        data.id = parseInt(key, 10);
        data.enabled = data.id !== pc.LAYERID_DEPTH;
        layers[key] = new pc.Layer(data);
      }
      for (i = 0, len = props.layerOrder.length; i < len; i++) {
        var sublayer = props.layerOrder[i];
        var layer = layers[sublayer.layer];
        if (!layer) {
          continue;
        }
        if (sublayer.transparent) {
          composition.pushTransparent(layer);
        } else {
          composition.pushOpaque(layer);
        }
        composition.subLayerEnabled[i] = sublayer.enabled;
      }
      this.scene.layers = composition;
    }
    if (props.batchGroups) {
      for (i = 0, len = props.batchGroups.length; i < len; i++) {
        var grp = props.batchGroups[i];
        this.batcher.addGroup(grp.name, grp.dynamic, grp.maxAabbSize, grp.id, grp.layers);
      }
    }
    this._loadLibraries(props.libraries, callback);
  }, _loadLibraries:function(urls, callback) {
    var len = urls.length;
    var count = len;
    var self = this;
    var regex = /^http(s)?:\/\//;
    if (len) {
      var onLoad = function(err, script) {
        count--;
        if (err) {
          callback(err);
        } else {
          if (count === 0) {
            self.onLibrariesLoaded();
            callback(null);
          }
        }
      };
      for (var i = 0; i < len; ++i) {
        var url = urls[i];
        if (!regex.test(url.toLowerCase()) && self._scriptPrefix) {
          url = pc.path.join(self._scriptPrefix, url);
        }
        this.loader.load(url, "script", onLoad);
      }
    } else {
      callback(null);
    }
  }, _parseAssets:function(assets) {
    var i, id;
    var list = [];
    var scriptsIndex = {};
    if (!pc.script.legacy) {
      for (i = 0; i < this.scriptsOrder.length; i++) {
        id = this.scriptsOrder[i];
        if (!assets[id]) {
          continue;
        }
        scriptsIndex[id] = true;
        list.push(assets[id]);
      }
      for (id in assets) {
        if (scriptsIndex[id]) {
          continue;
        }
        list.push(assets[id]);
      }
    } else {
      for (id in assets) {
        list.push(assets[id]);
      }
    }
    for (i = 0; i < list.length; i++) {
      var data = list[i];
      var asset = new pc.Asset(data.name, data.type, data.file, data.data);
      asset.id = parseInt(data.id);
      asset.preload = data.preload ? data.preload : false;
      asset.tags.add(data.tags);
      this.assets.add(asset);
    }
  }, _getScriptReferences:function(scene) {
    var i, key;
    var priorityScripts = [];
    if (scene.settings.priority_scripts) {
      priorityScripts = scene.settings.priority_scripts;
    }
    var _scripts = [];
    var _index = {};
    for (i = 0; i < priorityScripts.length; i++) {
      _scripts.push(priorityScripts[i]);
      _index[priorityScripts[i]] = true;
    }
    var entities = scene.entities;
    for (key in entities) {
      if (!entities[key].components.script) {
        continue;
      }
      var scripts = entities[key].components.script.scripts;
      for (i = 0; i < scripts.length; i++) {
        if (_index[scripts[i].url]) {
          continue;
        }
        _scripts.push(scripts[i].url);
        _index[scripts[i].url] = true;
      }
    }
    return _scripts;
  }, start:function() {
    this.fire("start", {timestamp:pc.now(), target:this});
    if (!this._librariesLoaded) {
      this.onLibrariesLoaded();
    }
    pc.ComponentSystem.initialize(this.root);
    this.fire("initialize");
    pc.ComponentSystem.postInitialize(this.root);
    this.fire("postinitialize");
    this.tick();
  }, update:function(dt) {
    this.graphicsDevice.updateClientRect();
    if (this.vr) {
      this.vr.poll();
    }
    if (pc.script.legacy) {
      pc.ComponentSystem.fixedUpdate(1.0 / 60.0, this._inTools);
    }
    pc.ComponentSystem.update(dt, this._inTools);
    pc.ComponentSystem.postUpdate(dt, this._inTools);
    this.fire("update", dt);
    if (this.controller) {
      this.controller.update(dt);
    }
    if (this.mouse) {
      this.mouse.update(dt);
    }
    if (this.keyboard) {
      this.keyboard.update(dt);
    }
    if (this.gamepads) {
      this.gamepads.update(dt);
    }
  }, render:function() {
    this.fire("prerender");
    this.root.syncHierarchy();
    this.batcher.updateAll();
    pc._skipRenderCounter = 0;
    this.renderer.renderComposition(this.scene.layers);
    this.fire("postrender");
  }, _fillFrameStats:function(now, dt, ms) {
    var stats = this.stats.frame;
    stats.dt = dt;
    stats.ms = ms;
    if (now > stats._timeToCountFrames) {
      stats.fps = stats._fpsAccum;
      stats._fpsAccum = 0;
      stats._timeToCountFrames = now + 1000;
    } else {
      stats._fpsAccum++;
    }
    stats.cameras = this.renderer._camerasRendered;
    stats.materials = this.renderer._materialSwitches;
    stats.shaders = this.graphicsDevice._shaderSwitchesPerFrame;
    stats.shadowMapUpdates = this.renderer._shadowMapUpdates;
    stats.shadowMapTime = this.renderer._shadowMapTime;
    stats.depthMapTime = this.renderer._depthMapTime;
    stats.forwardTime = this.renderer._forwardTime;
    var prims = this.graphicsDevice._primsPerFrame;
    stats.triangles = prims[pc.PRIMITIVE_TRIANGLES] / 3 + Math.max(prims[pc.PRIMITIVE_TRISTRIP] - 2, 0) + Math.max(prims[pc.PRIMITIVE_TRIFAN] - 2, 0);
    stats.cullTime = this.renderer._cullTime;
    stats.sortTime = this.renderer._sortTime;
    stats.skinTime = this.renderer._skinTime;
    stats.morphTime = this.renderer._morphTime;
    stats.instancingTime = this.renderer._instancingTime;
    stats.otherPrimitives = 0;
    for (var i = 0; i < prims.length; i++) {
      if (i < pc.PRIMITIVE_TRIANGLES) {
        stats.otherPrimitives += prims[i];
      }
      prims[i] = 0;
    }
    this.renderer._camerasRendered = 0;
    this.renderer._materialSwitches = 0;
    this.renderer._shadowMapUpdates = 0;
    this.graphicsDevice._shaderSwitchesPerFrame = 0;
    this.renderer._cullTime = 0;
    this.renderer._sortTime = 0;
    this.renderer._skinTime = 0;
    this.renderer._morphTime = 0;
    this.renderer._instancingTime = 0;
    this.renderer._shadowMapTime = 0;
    this.renderer._depthMapTime = 0;
    this.renderer._forwardTime = 0;
    stats = this.stats.drawCalls;
    stats.forward = this.renderer._forwardDrawCalls;
    stats.depth = 0;
    stats.shadow = this.renderer._shadowDrawCalls;
    stats.skinned = this.renderer._skinDrawCalls;
    stats.immediate = 0;
    stats.instanced = 0;
    stats.removedByInstancing = 0;
    stats.total = this.graphicsDevice._drawCallsPerFrame;
    stats.misc = stats.total - (stats.forward + stats.shadow);
    this.renderer._depthDrawCalls = 0;
    this.renderer._shadowDrawCalls = 0;
    this.renderer._forwardDrawCalls = 0;
    this.renderer._skinDrawCalls = 0;
    this.renderer._immediateRendered = 0;
    this.renderer._instancedDrawCalls = 0;
    this.renderer._removedByInstancing = 0;
    this.graphicsDevice._drawCallsPerFrame = 0;
    this.stats.misc.renderTargetCreationTime = this.graphicsDevice.renderTargetCreationTime;
    stats = this.stats.particles;
    stats.updatesPerFrame = stats._updatesPerFrame;
    stats.frameTime = stats._frameTime;
    stats._updatesPerFrame = 0;
    stats._frameTime = 0;
  }, setCanvasFillMode:function(mode, width, height) {
    this._fillMode = mode;
    this.resizeCanvas(width, height);
  }, setCanvasResolution:function(mode, width, height) {
    this._resolutionMode = mode;
    if (mode === pc.RESOLUTION_AUTO && width === undefined) {
      width = this.graphicsDevice.canvas.clientWidth;
      height = this.graphicsDevice.canvas.clientHeight;
    }
    this.graphicsDevice.resizeCanvas(width, height);
  }, isFullscreen:function() {
    return !!document.fullscreenElement;
  }, enableFullscreen:function(element, success, error) {
    element = element || this.graphicsDevice.canvas;
    var s = function() {
      success();
      document.removeEventListener("fullscreenchange", s);
    };
    var e = function() {
      error();
      document.removeEventListener("fullscreenerror", e);
    };
    if (success) {
      document.addEventListener("fullscreenchange", s, false);
    }
    if (error) {
      document.addEventListener("fullscreenerror", e, false);
    }
    if (element.requestFullscreen) {
      element.requestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    } else {
      error();
    }
  }, disableFullscreen:function(success) {
    var s = function() {
      success();
      document.removeEventListener("fullscreenchange", s);
    };
    if (success) {
      document.addEventListener("fullscreenchange", s, false);
    }
    document.exitFullscreen();
  }, isHidden:function() {
    return document[this._hiddenAttr];
  }, onVisibilityChange:function() {
    if (this.isHidden()) {
      this._audioManager.suspend();
    } else {
      this._audioManager.resume();
    }
  }, resizeCanvas:function(width, height) {
    if (!this._allowResize) {
      return;
    }
    var windowWidth = window.innerWidth;
    var windowHeight = window.innerHeight;
    if (navigator.isCocoonJS) {
      width = windowWidth;
      height = windowHeight;
      this.graphicsDevice.resizeCanvas(width, height);
    } else {
      if (this._fillMode === pc.FILLMODE_KEEP_ASPECT) {
        var r = this.graphicsDevice.canvas.width / this.graphicsDevice.canvas.height;
        var winR = windowWidth / windowHeight;
        if (r > winR) {
          width = windowWidth;
          height = width / r;
        } else {
          height = windowHeight;
          width = height * r;
        }
      } else {
        if (this._fillMode === pc.FILLMODE_FILL_WINDOW) {
          width = windowWidth;
          height = windowHeight;
        } else {
        }
      }
      this.graphicsDevice.canvas.style.width = width + "px";
      this.graphicsDevice.canvas.style.height = height + "px";
      if (this._resolutionMode === pc.RESOLUTION_AUTO) {
        this.setCanvasResolution(pc.RESOLUTION_AUTO);
      }
    }
    return {width:width, height:height};
  }, onLibrariesLoaded:function() {
    this._librariesLoaded = true;
    this.systems.rigidbody.onLibraryLoaded();
    this.systems.collision.onLibraryLoaded();
  }, applySceneSettings:function(settings) {
    var asset;
    if (this.systems.rigidbody && typeof Ammo !== "undefined") {
      var gravity = settings.physics.gravity;
      this.systems.rigidbody.setGravity(gravity[0], gravity[1], gravity[2]);
    }
    this.scene.applySettings(settings);
    if (settings.render.hasOwnProperty("skybox")) {
      if (settings.render.skybox) {
        asset = this.assets.get(settings.render.skybox);
        if (asset) {
          this.setSkybox(asset);
        } else {
          this.assets.once("add:" + settings.render.skybox, this.setSkybox, this);
        }
      } else {
        this.setSkybox(null);
      }
    }
  }, setSkybox:function(asset) {
    if (asset) {
      if (this._skyboxLast === asset.id) {
        if (this.scene.skyboxMip === 0 && !asset.loadFaces) {
          this._skyboxLoad(asset);
        } else {
          this._onSkyboxChange(asset);
        }
        return;
      }
      if (this._skyboxLast) {
        this.assets.off("add:" + this._skyboxLast, this.setSkybox, this);
        this.assets.off("load:" + this._skyboxLast, this._onSkyboxChange, this);
        this.assets.off("remove:" + this._skyboxLast, this._skyboxRemove, this);
      }
      this._skyboxLast = asset.id;
      this.assets.on("load:" + asset.id, this._onSkyboxChange, this);
      this.assets.once("remove:" + asset.id, this._skyboxRemove, this);
      if (asset.resource) {
        this.scene.setSkybox(asset.resources);
      }
      this._skyboxLoad(asset);
    } else {
      if (!this._skyboxLast) {
        return;
      }
      this._skyboxRemove({id:this._skyboxLast});
    }
  }, _onVrChange:function(enabled) {
    if (enabled) {
      if (!this.vr) {
        this.vr = new pc.VrManager(this);
      }
    } else {
      if (this.vr) {
        this.vr.destroy();
        this.vr = null;
      }
    }
  }, _onSkyboxChange:function(asset) {
    this.scene.setSkybox(asset.resources);
  }, _skyboxLoad:function(asset) {
    if (this.scene.skyboxMip === 0) {
      asset.loadFaces = true;
    }
    this.assets.load(asset);
    this._onSkyboxChange(asset);
  }, _skyboxRemove:function(asset) {
    if (!this._skyboxLast) {
      return;
    }
    this.assets.off("add:" + asset.id, this.setSkybox, this);
    this.assets.off("load:" + asset.id, this._onSkyboxChange, this);
    this.assets.off("remove:" + asset.id, this._skyboxRemove, this);
    this.scene.setSkybox(null);
    this._skyboxLast = null;
  }, _firstBake:function() {
    this.lightmapper.bake(null, this.scene.lightmapMode);
  }, _firstBatch:function() {
    if (this.scene._needsStaticPrepare) {
      this.renderer.prepareStaticMeshes(this.graphicsDevice, this.scene);
      this.scene._needsStaticPrepare = false;
    }
    this.batcher.generate();
  }, destroy:function() {
    Application._applications[this.graphicsDevice.canvas.id] = null;
    if (Application._currentApplication === this) {
      Application._currentApplication = null;
    }
    this.off("librariesloaded");
    document.removeEventListener("visibilitychange", this._visibilityChangeHandler);
    document.removeEventListener("mozvisibilitychange", this._visibilityChangeHandler);
    document.removeEventListener("msvisibilitychange", this._visibilityChangeHandler);
    document.removeEventListener("webkitvisibilitychange", this._visibilityChangeHandler);
    this.root.destroy();
    this.root = null;
    if (this.mouse) {
      this.mouse.off("mouseup");
      this.mouse.off("mousedown");
      this.mouse.off("mousewheel");
      this.mouse.off("mousemove");
      this.mouse.detach();
      this.mouse = null;
    }
    if (this.keyboard) {
      this.keyboard.off("keydown");
      this.keyboard.off("keyup");
      this.keyboard.off("keypress");
      this.keyboard.detach();
      this.keyboard = null;
    }
    if (this.touch) {
      this.touch.off("touchstart");
      this.touch.off("touchend");
      this.touch.off("touchmove");
      this.touch.off("touchcancel");
      this.touch.detach();
      this.touch = null;
    }
    if (this.elementInput) {
      this.elementInput.detach();
      this.elementInput = null;
    }
    if (this.controller) {
      this.controller = null;
    }
    pc.ComponentSystem.destroy();
    var assets = this.assets.list();
    for (var i = 0; i < assets.length; i++) {
      assets[i].unload();
    }
    this.loader.destroy();
    this.loader = null;
    this.scene = null;
    this.systems = [];
    this.context = null;
    this.graphicsDevice.clearShaderCache();
    this.graphicsDevice.destroy();
    this.graphicsDevice.destroyed = true;
    this.graphicsDevice = null;
    this.renderer = null;
    this.tick = null;
    if (this._audioManager) {
      this._audioManager.destroy();
      this._audioManager = null;
    }
    pc.http = new pc.Http;
    pc.ParticleEmitter.DEFAULT_PARAM_TEXTURE = null;
    pc.destroyPostEffectQuad();
  }};
  var makeTick = function(_app) {
    var app = _app;
    return function(timestamp) {
      if (!app.graphicsDevice) {
        return;
      }
      Application._currentApplication = app;
      pc.app = app;
      var now = timestamp || pc.now();
      var ms = now - (app._time || now);
      var dt = ms / 1000.0;
      dt = pc.math.clamp(dt, 0, app.maxDeltaTime);
      dt *= app.timeScale;
      app._time = now;
      if (app.vr && app.vr.display) {
        app.vr.display.requestAnimationFrame(app.tick);
      } else {
        window.requestAnimationFrame(app.tick);
      }
      if (app.graphicsDevice.contextLost) {
        return;
      }
      app.update(dt);
      if (app.autoRender || app.renderNextFrame) {
        app.render();
        app.renderNextFrame = false;
      }
      _frameEndData.timestamp = pc.now();
      _frameEndData.target = app;
      app.fire("frameend", _frameEndData);
      app.fire("frameEnd", _frameEndData);
      if (app.vr && app.vr.display && app.vr.display.presenting) {
        app.vr.display.submitFrame();
      }
    };
  };
  var _frameEndData = {};
  return {FILLMODE_NONE:"NONE", FILLMODE_FILL_WINDOW:"FILL_WINDOW", FILLMODE_KEEP_ASPECT:"KEEP_ASPECT", RESOLUTION_AUTO:"AUTO", RESOLUTION_FIXED:"FIXED", Application:Application};
}());
pc.ApplicationStats = function(device) {
  this.frame = {fps:0, ms:0, dt:0, updateStart:0, updateTime:0, renderStart:0, renderTime:0, physicsStart:0, physicsTime:0, cullTime:0, sortTime:0, skinTime:0, morphTime:0, instancingTime:0, triangles:0, otherPrimitives:0, shaders:0, materials:0, cameras:0, shadowMapUpdates:0, shadowMapTime:0, depthMapTime:0, forwardTime:0, _timeToCountFrames:0, _fpsAccum:0};
  this.drawCalls = {forward:0, depth:0, shadow:0, immediate:0, misc:0, total:0, skinned:0, instanced:0, removedByInstancing:0};
  this.misc = {renderTargetCreationTime:0};
  this.particles = {updatesPerFrame:0, _updatesPerFrame:0, frameTime:0, _frameTime:0};
  this.vram = device._vram;
  this.shaders = device._shaderStats;
  Object.defineProperty(this.vram, "totalUsed", {get:function() {
    return this.tex + this.vb + this.ib;
  }});
  Object.defineProperty(this, "scene", {get:function() {
    return pc.Application._currentApplication.scene._stats;
  }});
  Object.defineProperty(this, "lightmapper", {get:function() {
    return pc.Application._currentApplication.lightmapper._stats;
  }});
  Object.defineProperty(this, "batcher", {get:function() {
    return pc.Application._currentApplication.batcher._stats;
  }});
  pc.events.attach(this);
};
pc.extend(pc, function() {
  var ComponentSystemRegistry = function() {
  };
  ComponentSystemRegistry.prototype = {add:function(name, system) {
    if (!this[name]) {
      this[name] = system;
      system.name = name;
    } else {
      throw new Error(pc.string.format("ComponentSystem name '{0}' already registered or not allowed", name));
    }
  }, remove:function(name) {
    if (!this[name]) {
      throw new Error(pc.string.format("No ComponentSystem named '{0}' registered", name));
    }
    delete this[name];
  }, list:function() {
    var list = Object.keys(this);
    var defaultPriority = 1;
    var priorities = {"collisionrect":0.5, "collisioncircle":0.5};
    list.sort(function(a, b) {
      var pa = priorities[a] || defaultPriority;
      var pb = priorities[b] || defaultPriority;
      if (pa < pb) {
        return -1;
      } else {
        if (pa > pb) {
          return 1;
        }
      }
      return 0;
    });
    return list.map(function(key) {
      return this[key];
    }, this);
  }, getComponentSystemOrder:function() {
    var index;
    var names = Object.keys(this);
    index = names.indexOf("collisionrect");
    names.splice(index, 1);
    names.unshift("collisionrect");
    index = names.indexOf("collisioncircle");
    names.splice(index, 1);
    names.unshift("collisioncircle");
    return names;
  }};
  return {ComponentSystemRegistry:ComponentSystemRegistry};
}());
pc.extend(pc, function() {
  var ComponentSystem = function(app) {
    this.app = app;
    this.dataStore = {};
    this.schema = [];
    pc.events.attach(this);
  };
  pc.extend(ComponentSystem, {initialize:function(root) {
    ComponentSystem.fire("initialize", root);
  }, postInitialize:function(root) {
    ComponentSystem.fire("postInitialize", root);
  }, update:function(dt, inTools) {
    if (inTools) {
      ComponentSystem.fire("toolsUpdate", dt);
    } else {
      ComponentSystem.fire("update", dt);
    }
  }, fixedUpdate:function(dt, inTools) {
    ComponentSystem.fire("fixedUpdate", dt);
  }, postUpdate:function(dt, inTools) {
    ComponentSystem.fire("postUpdate", dt);
  }});
  ComponentSystem.prototype = {get store() {
    return this.dataStore;
  }, addComponent:function(entity, data) {
    var component = new this.ComponentType(this, entity);
    var componentData = new this.DataType;
    data = data || {};
    this.dataStore[entity._guid] = {entity:entity, data:componentData};
    entity[this.id] = component;
    entity.c[this.id] = component;
    this.initializeComponentData(component, data, []);
    this.fire("add", entity, component);
    return component;
  }, removeComponent:function(entity) {
    var record = this.dataStore[entity._guid];
    var component = entity.c[this.id];
    this.fire("beforeremove", entity, component);
    delete this.dataStore[entity._guid];
    delete entity[this.id];
    delete entity.c[this.id];
    this.fire("remove", entity, record.data);
  }, cloneComponent:function(entity, clone) {
    var src = this.dataStore[entity._guid];
    return this.addComponent(clone, src.data);
  }, initializeComponentData:function(component, data, properties) {
    data = data || {};
    properties.forEach(function(value) {
      if (data[value] !== undefined) {
        component[value] = data[value];
      } else {
        component[value] = component.data[value];
      }
    }, this);
    if (component.enabled && component.entity.enabled) {
      component.onEnable();
    }
  }};
  pc.events.attach(ComponentSystem);
  ComponentSystem.destroy = function() {
    ComponentSystem.off("initialize");
    ComponentSystem.off("postInitialize");
    ComponentSystem.off("toolsUpdate");
    ComponentSystem.off("update");
    ComponentSystem.off("fixedUpdate");
    ComponentSystem.off("postUpdate");
  };
  return {ComponentSystem:ComponentSystem};
}());
pc.extend(pc, function() {
  var Component = function(system, entity) {
    this.system = system;
    this.entity = entity;
    pc.events.attach(this);
    if (this.system.schema && !this._accessorsBuilt) {
      this.buildAccessors(this.system.schema);
    }
    this.on("set", function(name, oldValue, newValue) {
      this.fire("set_" + name, name, oldValue, newValue);
    });
    this.on("set_enabled", this.onSetEnabled, this);
  };
  Component._buildAccessors = function(obj, schema) {
    schema.forEach(function(prop) {
      Object.defineProperty(obj, prop, {get:function() {
        return this.data[prop];
      }, set:function(value) {
        var data = this.data;
        var oldValue = data[prop];
        data[prop] = value;
        this.fire("set", prop, oldValue, value);
      }, configurable:true});
    });
    obj._accessorsBuilt = true;
  };
  Component.prototype = {get data() {
    var record = this.system.store[this.entity._guid];
    if (record) {
      return record.data;
    } else {
      return null;
    }
  }, buildAccessors:function(schema) {
    Component._buildAccessors(this, schema);
  }, onSetEnabled:function(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.entity.enabled) {
        if (newValue) {
          this.onEnable();
        } else {
          this.onDisable();
        }
      }
    }
  }, onEnable:function() {
  }, onDisable:function() {
  }, onPostStateChange:function() {
  }};
  return {Component:Component};
}());
pc.extend(pc, function() {
  var ComponentData = function() {
  };
  return {ComponentData:ComponentData};
}());
pc.extend(pc, function() {
  var AnimationComponent = function(system, entity) {
    this.animationsIndex = {};
    this.on("set_animations", this.onSetAnimations, this);
    this.on("set_assets", this.onSetAssets, this);
    this.on("set_loop", this.onSetLoop, this);
  };
  AnimationComponent = pc.inherits(AnimationComponent, pc.Component);
  pc.extend(AnimationComponent.prototype, {play:function(name, blendTime) {
    if (!this.data.animations[name]) {
      console.error(pc.string.format("Trying to play animation '{0}' which doesn't exist", name));
      return;
    }
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    blendTime = blendTime || 0;
    var data = this.data;
    data.prevAnim = data.currAnim;
    data.currAnim = name;
    if (data.model) {
      data.blending = blendTime > 0 && data.prevAnim;
      if (data.blending) {
        data.blendTime = blendTime;
        data.blendTimeRemaining = blendTime;
        data.fromSkel.animation = data.animations[data.prevAnim];
        data.fromSkel.addTime(data.skeleton._time);
        data.toSkel.animation = data.animations[data.currAnim];
      } else {
        data.skeleton.animation = data.animations[data.currAnim];
      }
    }
    data.playing = true;
  }, getAnimation:function(name) {
    return this.data.animations[name];
  }, setModel:function(model) {
    var data = this.data;
    if (model) {
      var graph = model.getGraph();
      data.fromSkel = new pc.Skeleton(graph);
      data.toSkel = new pc.Skeleton(graph);
      data.skeleton = new pc.Skeleton(graph);
      data.skeleton.looping = data.loop;
      data.skeleton.setGraph(graph);
    }
    data.model = model;
    if (data.animations && data.currAnim && data.animations[data.currAnim]) {
      this.play(data.currAnim);
    }
  }, loadAnimationAssets:function(ids) {
    if (!ids || !ids.length) {
      return;
    }
    var self = this;
    var assets = this.system.app.assets;
    var i, l = ids.length;
    var onAssetReady = function(asset) {
      self.animations[asset.name] = asset.resource;
      self.animationsIndex[asset.id] = asset.name;
      self.animations = self.animations;
    };
    var onAssetAdd = function(asset) {
      asset.off("change", self.onAssetChanged, self);
      asset.on("change", self.onAssetChanged, self);
      asset.off("remove", self.onAssetRemoved, self);
      asset.on("remove", self.onAssetRemoved, self);
      if (asset.resource) {
        onAssetReady(asset);
      } else {
        asset.once("load", onAssetReady, self);
        if (self.enabled && self.entity.enabled) {
          assets.load(asset);
        }
      }
    };
    for (i = 0; i < l; i++) {
      var asset = assets.get(ids[i]);
      if (asset) {
        onAssetAdd(asset);
      } else {
        assets.on("add:" + ids[i], onAssetAdd);
      }
    }
  }, onAssetChanged:function(asset, attribute, newValue, oldValue) {
    if (attribute === "resource") {
      if (newValue) {
        this.animations[asset.name] = newValue;
        this.animationsIndex[asset.id] = asset.name;
        if (this.data.currAnim === asset.name) {
          if (this.data.playing && this.data.enabled && this.entity.enabled) {
            this.play(asset.name, 0);
          }
        }
      } else {
        delete this.animations[asset.name];
        delete this.animationsIndex[asset.id];
      }
    }
  }, onAssetRemoved:function(asset) {
    asset.off("remove", this.onAssetRemoved, this);
    if (this.animations && this.animations[asset.name]) {
      delete this.animations[asset.name];
      delete this.animationsIndex[asset.id];
      if (this.data.currAnim === asset.name) {
        this._stopCurrentAnimation();
      }
    }
  }, _stopCurrentAnimation:function() {
    this.data.currAnim = null;
    this.data.playing = false;
    if (this.data.skeleton) {
      this.data.skeleton.currentTime = 0;
      this.data.skeleton.animation = null;
    }
  }, onSetAnimations:function(name, oldValue, newValue) {
    var data = this.data;
    var modelComponent = this.entity.model;
    if (modelComponent) {
      var m = modelComponent.model;
      if (m && m !== data.model) {
        this.entity.animation.setModel(m);
      }
    }
    if (!data.currAnim && data.activate && data.enabled && this.entity.enabled) {
      for (var animName in data.animations) {
        this.play(animName, 0);
        break;
      }
    }
  }, onSetAssets:function(name, oldValue, newValue) {
    if (oldValue && oldValue.length) {
      for (var i = 0; i < oldValue.length; i++) {
        if (oldValue[i]) {
          var asset = this.system.app.assets.get(oldValue[i]);
          if (asset) {
            asset.off("change", this.onAssetChanged, this);
            asset.off("remove", this.onAssetRemoved, this);
            var animName = this.animationsIndex[asset.id];
            if (this.data.currAnim === animName) {
              this._stopCurrentAnimation();
            }
            delete this.animations[animName];
            delete this.animationsIndex[asset.id];
          }
        }
      }
    }
    var ids = newValue.map(function(value) {
      if (value instanceof pc.Asset) {
        return value.id;
      } else {
        return value;
      }
    });
    this.loadAnimationAssets(ids);
  }, onSetLoop:function(name, oldValue, newValue) {
    if (this.data.skeleton) {
      this.data.skeleton.looping = this.data.loop;
    }
  }, onSetCurrentTime:function(name, oldValue, newValue) {
    this.data.skeleton.currentTime = newValue;
    this.data.skeleton.addTime(0);
    this.data.skeleton.updateGraph();
  }, onEnable:function() {
    AnimationComponent._super.onEnable.call(this);
    var assets = this.data.assets;
    var registry = this.system.app.assets;
    if (assets) {
      for (var i = 0, len = assets.length; i < len; i++) {
        var asset = assets[i];
        if (!(asset instanceof pc.Asset)) {
          asset = registry.get(asset);
        }
        if (asset && !asset.resource) {
          registry.load(asset);
        }
      }
    }
    if (this.data.activate && !this.data.currAnim) {
      for (var animName in this.data.animations) {
        this.play(animName, 0);
        break;
      }
    }
  }, onBeforeRemove:function() {
    for (var i = 0; i < this.assets.length; i++) {
      var asset = this.system.app.assets.get(this.assets[i]);
      if (!asset) {
        continue;
      }
      asset.off("change", this.onAssetChanged, this);
      asset.off("remove", this.onAssetRemoved, this);
    }
    delete this.data.animation;
    delete this.data.skeleton;
    delete this.data.fromSkel;
    delete this.data.toSkel;
  }});
  Object.defineProperties(AnimationComponent.prototype, {currentTime:{get:function() {
    return this.data.skeleton._time;
  }, set:function(currentTime) {
    this.data.skeleton.currentTime = currentTime;
    this.data.skeleton.addTime(0);
    this.data.skeleton.updateGraph();
  }}, duration:{get:function() {
    return this.data.animations[this.data.currAnim].duration;
  }}});
  return {AnimationComponent:AnimationComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "assets", "speed", "loop", "activate", "animations", "skeleton", "model", "prevAnim", "currAnim", "fromSkel", "toSkel", "blending", "blendTimeRemaining", "playing"];
  var AnimationComponentSystem = function AnimationComponentSystem(app) {
    this.id = "animation";
    this.description = "Specifies the animation assets that can run on the model specified by the Entity's model Component.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.AnimationComponent;
    this.DataType = pc.AnimationComponentData;
    this.schema = _schema;
    this.on("beforeremove", this.onBeforeRemove, this);
    this.on("update", this.onUpdate, this);
    pc.ComponentSystem.on("update", this.onUpdate, this);
  };
  AnimationComponentSystem = pc.inherits(AnimationComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.AnimationComponent.prototype, _schema);
  pc.extend(AnimationComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    properties = ["activate", "enabled", "loop", "speed", "assets"];
    AnimationComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, cloneComponent:function(entity, clone) {
    var key;
    this.addComponent(clone, {});
    clone.animation.data.assets = pc.extend([], entity.animation.assets);
    clone.animation.data.speed = entity.animation.speed;
    clone.animation.data.loop = entity.animation.loop;
    clone.animation.data.activate = entity.animation.activate;
    clone.animation.data.enabled = entity.animation.enabled;
    var clonedAnimations = {};
    var animations = entity.animation.animations;
    for (key in animations) {
      if (animations.hasOwnProperty(key)) {
        clonedAnimations[key] = animations[key];
      }
    }
    clone.animation.animations = clonedAnimations;
    var clonedAnimationsIndex = {};
    var animationsIndex = entity.animation.animationsIndex;
    for (key in animationsIndex) {
      if (animationsIndex.hasOwnProperty(key)) {
        clonedAnimationsIndex[key] = animationsIndex[key];
      }
    }
    clone.animation.animationsIndex = clonedAnimationsIndex;
  }, onBeforeRemove:function(entity, component) {
    component.onBeforeRemove();
  }, onUpdate:function(dt) {
    var components = this.store;
    for (var id in components) {
      if (components.hasOwnProperty(id)) {
        var component = components[id];
        var componentData = component.data;
        if (componentData.enabled && componentData.playing && component.entity.enabled) {
          var skeleton = componentData.skeleton;
          if (skeleton !== null && componentData.model !== null) {
            if (componentData.blending) {
              componentData.blendTimeRemaining -= dt;
              if (componentData.blendTimeRemaining < 0.0) {
                componentData.blendTimeRemaining = 0.0;
              }
              var alpha = 1.0 - componentData.blendTimeRemaining / componentData.blendTime;
              skeleton.blend(componentData.fromSkel, componentData.toSkel, alpha);
            } else {
              var delta = dt * componentData.speed;
              skeleton.addTime(delta);
              if (skeleton._time === skeleton._animation.duration && !componentData.loop) {
                componentData.playing = false;
              }
            }
            if (componentData.blending && componentData.blendTimeRemaining === 0.0) {
              componentData.blending = false;
              skeleton.animation = componentData.toSkel._animation;
            }
            skeleton.updateGraph();
          }
        }
      }
    }
  }});
  return {AnimationComponentSystem:AnimationComponentSystem};
}());
pc.extend(pc, function() {
  var AnimationComponentData = function() {
    this.assets = [];
    this.speed = 1.0;
    this.loop = true;
    this.activate = true;
    this.enabled = true;
    this.animations = {};
    this.skeleton = null;
    this.model = null;
    this.prevAnim = null;
    this.currAnim = null;
    this.fromSkel = null;
    this.toSkel = null;
    this.blending = false;
    this.blendTime = 0;
    this.blendTimeRemaining = 0;
    this.playing = false;
  };
  AnimationComponentData = pc.inherits(AnimationComponentData, pc.ComponentData);
  return {AnimationComponentData:AnimationComponentData};
}());
pc.extend(pc, function() {
  var ModelComponent = function ModelComponent(system, entity) {
    this.on("set_type", this.onSetType, this);
    this.on("set_asset", this.onSetAsset, this);
    this.on("set_castShadows", this.onSetCastShadows, this);
    this.on("set_receiveShadows", this.onSetReceiveShadows, this);
    this.on("set_castShadowsLightmap", this.onSetCastShadowsLightmap, this);
    this.on("set_lightmapped", this.onSetLightmapped, this);
    this.on("set_lightmapSizeMultiplier", this.onSetLightmapSizeMultiplier, this);
    this.on("set_isStatic", this.onSetIsStatic, this);
    this.on("set_model", this.onSetModel, this);
    this.on("set_material", this.onSetMaterial, this);
    this.on("set_mapping", this.onSetMapping, this);
    this.on("set_layers", this.onSetLayers, this);
    this.on("set_batchGroupId", this.onSetBatchGroupId, this);
    Object.defineProperty(this, "materialAsset", {set:this.setMaterialAsset.bind(this), get:this.getMaterialAsset.bind(this)});
    this._assetOld = 0;
    this._materialEvents = null;
    this._dirtyModelAsset = false;
    this._dirtyMaterialAsset = false;
    this._clonedModel = false;
  };
  ModelComponent = pc.inherits(ModelComponent, pc.Component);
  pc.extend(ModelComponent.prototype, {setVisible:function(visible) {
    console.warn("WARNING: setVisible: Function is deprecated. Set enabled property instead.");
    this.enabled = visible;
  }, _onAssetLoad:function(asset) {
    if (asset.resource) {
      this._onModelLoaded(asset.resource.clone());
      this._clonedModel = true;
    }
  }, addModelToLayers:function() {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.addMeshInstances(this.meshInstances);
    }
  }, removeModelFromLayers:function(model) {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.removeMeshInstances(model.meshInstances);
    }
  }, _onAssetUnload:function(asset) {
    if (!this.model) {
      return;
    }
    this.removeModelFromLayers(this.model);
    this.model = null;
  }, _onAssetChange:function(asset, attribute, newValue, oldValue) {
    if (attribute === "data") {
      this.mapping = this.data.mapping;
    }
  }, _onAssetRemove:function(asset) {
    if (this.asset === asset.id) {
      this.asset = null;
    }
  }, _setModelAsset:function(id) {
    if (this._assetOld === id) {
      return;
    }
    var assets = this.system.app.assets;
    var asset = id !== null ? assets.get(id) : null;
    this._dirtyModelAsset = true;
    this._onModelAsset(asset || null);
    if (!asset && id !== null) {
      assets.once("add:" + id, this._onModelAsset, this);
    }
  }, _onModelAsset:function(asset) {
    var assets = this.system.app.assets;
    if (this._assetOld) {
      assets.off("add:" + this._assetOld, this._onModelAsset, this);
      var assetOld = assets.get(this._assetOld);
      if (assetOld) {
        assetOld.off("load", this._onAssetLoad, this);
        assetOld.off("unload", this._onAssetUnload, this);
        assetOld.off("change", this._onAssetChange, this);
        assetOld.off("remove", this._onAssetRemove, this);
      }
    }
    this._assetOld = asset ? asset.id : 0;
    if (asset) {
      asset.on("load", this._onAssetLoad, this);
      asset.on("unload", this._onAssetUnload, this);
      asset.on("change", this._onAssetChange, this);
      asset.on("remove", this._onAssetRemove, this);
      if (asset.resource) {
        this._dirtyModelAsset = false;
        this._onModelLoaded(asset.resource.clone());
        this._clonedModel = true;
      } else {
        if (this.enabled && this.entity.enabled) {
          this._dirtyModelAsset = false;
          assets.load(asset);
        }
      }
    } else {
      this._dirtyModelAsset = false;
    }
  }, remove:function() {
    this._onModelAsset(null);
  }, _onModelLoaded:function(model) {
    if (this.data.type === "asset") {
      this.model = model;
    }
  }, onSetType:function(name, oldValue, newValue) {
    var data = this.data;
    if (newValue) {
      var mesh = null;
      this._area = null;
      if (newValue === "asset") {
        if (this.data.asset !== null) {
          this._setModelAsset(this.data.asset);
        } else {
          this.model = null;
        }
      } else {
        switch(newValue) {
          case "box":
            mesh = this.system.box;
            this._area = {x:2, y:2, z:2, uv:2.0 / 3};
            break;
          case "capsule":
            mesh = this.system.capsule;
            this._area = {x:Math.PI * 2, y:Math.PI, z:Math.PI * 2, uv:1.0 / 3 + 1.0 / 3 / 3 * 2};
            break;
          case "sphere":
            mesh = this.system.sphere;
            this._area = {x:Math.PI, y:Math.PI, z:Math.PI, uv:1};
            break;
          case "cone":
            mesh = this.system.cone;
            this._area = {x:2.54, y:2.54, z:2.54, uv:1.0 / 3 + 1.0 / 3 / 3};
            break;
          case "cylinder":
            mesh = this.system.cylinder;
            this._area = {x:Math.PI, y:0.79 * 2, z:Math.PI, uv:1.0 / 3 + 1.0 / 3 / 3 * 2};
            break;
          case "plane":
            mesh = this.system.plane;
            this._area = {x:0, y:1, z:0, uv:1};
            break;
          default:
            throw new Error("Invalid model type: " + newValue);
        }
        var node = new pc.GraphNode;
        var model = new pc.Model;
        model.graph = node;
        model.meshInstances = [new pc.MeshInstance(node, mesh, data.material)];
        if (this.system._inTools) {
          model.generateWireframe();
        }
        this.model = model;
        this.asset = null;
      }
    }
  }, onSetAsset:function(name, oldValue, newValue) {
    var id = null;
    if (this.data.type === "asset") {
      if (newValue !== null) {
        id = newValue;
        if (newValue instanceof pc.Asset) {
          this.data.asset = newValue.id;
          id = newValue.id;
        }
      } else {
        this.model = null;
      }
    }
    if (id === null) {
      this.data.asset = null;
    }
    this._setModelAsset(id);
  }, onSetCastShadows:function(name, oldValue, newValue) {
    var layer;
    var model = this.data.model;
    if (model) {
      var layers = this.layers;
      var scene = this.system.app.scene;
      if (oldValue && !newValue) {
        for (i = 0; i < layers.length; i++) {
          layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
          if (!layer) {
            continue;
          }
          layer.removeShadowCasters(model.meshInstances);
        }
      }
      var meshInstances = model.meshInstances;
      for (var i = 0; i < meshInstances.length; i++) {
        meshInstances[i].castShadow = newValue;
      }
      if (!oldValue && newValue) {
        for (i = 0; i < layers.length; i++) {
          layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
          if (!layer) {
            continue;
          }
          layer.addShadowCasters(model.meshInstances);
        }
      }
    }
  }, onSetCastShadowsLightmap:function(name, oldValue, newValue) {
  }, onSetLightmapped:function(name, oldValue, newValue) {
    var i, m, mask;
    if (this.data.model) {
      var rcv = this.data.model.meshInstances;
      if (newValue) {
        for (i = 0; i < rcv.length; i++) {
          m = rcv[i];
          mask = m.mask;
          m.mask = (mask | pc.MASK_BAKED) & ~(pc.MASK_DYNAMIC | pc.MASK_LIGHTMAP);
        }
      } else {
        for (i = 0; i < rcv.length; i++) {
          m = rcv[i];
          m.deleteParameter("texture_lightMap");
          m.deleteParameter("texture_dirLightMap");
          m._shaderDefs &= ~pc.SHADERDEF_LM;
          mask = m.mask;
          m.mask = (mask | pc.MASK_DYNAMIC) & ~(pc.MASK_BAKED | pc.MASK_LIGHTMAP);
        }
      }
    }
  }, onSetLightmapSizeMultiplier:function(name, oldValue, newValue) {
    this.data.lightmapSizeMultiplier = newValue;
  }, onSetIsStatic:function(name, oldValue, newValue) {
    var i, m;
    if (this.data.model) {
      var rcv = this.data.model.meshInstances;
      for (i = 0; i < rcv.length; i++) {
        m = rcv[i];
        m.isStatic = newValue;
      }
    }
  }, onSetLayers:function(name, oldValue, newValue) {
    if (!this.meshInstances) {
      return;
    }
    var i, layer;
    for (i = 0; i < oldValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
      if (!layer) {
        continue;
      }
      layer.removeMeshInstances(this.meshInstances);
    }
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    for (i = 0; i < newValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) {
        continue;
      }
      layer.addMeshInstances(this.meshInstances);
    }
  }, onLayersChanged:function(oldComp, newComp) {
    this.addModelToLayers();
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
  }, onLayerAdded:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.addMeshInstances(this.meshInstances);
  }, onLayerRemoved:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.removeMeshInstances(this.meshInstances);
  }, onSetBatchGroupId:function(name, oldValue, newValue) {
    if (oldValue >= 0) {
      this.system.app.batcher._markGroupDirty(oldValue);
    }
    if (newValue >= 0) {
      this.system.app.batcher._markGroupDirty(newValue);
    }
    if (newValue < 0 && oldValue >= 0 && this.enabled && this.entity.enabled) {
      this.addModelToLayers();
    }
  }, onSetModel:function(name, oldValue, newValue) {
    if (oldValue) {
      this.removeModelFromLayers(oldValue);
      this.entity.removeChild(oldValue.getGraph());
      delete oldValue._entity;
      if (this._clonedModel) {
        oldValue.destroy();
        this._clonedModel = false;
      }
    }
    if (newValue) {
      var componentData = this.data;
      var meshInstances = newValue.meshInstances;
      for (var i = 0; i < meshInstances.length; i++) {
        meshInstances[i].castShadow = componentData.castShadows;
        meshInstances[i].receiveShadow = componentData.receiveShadows;
      }
      this.lightmapped = componentData.lightmapped;
      this.isStatic = componentData.isStatic;
      this.entity.addChild(newValue.graph);
      if (this.enabled && this.entity.enabled) {
        this.addModelToLayers();
      }
      newValue._entity = this.entity;
      if (this.entity.animation) {
        this.entity.animation.setModel(newValue);
      }
      if (this.data.type === "asset") {
        this.mapping = this.data.mapping;
      } else {
        this._unsetMaterialEvents();
      }
    } else {
      this._unsetMaterialEvents();
    }
  }, _onMaterialAssetRemove:function(asset) {
    var assets = this.system.app.assets;
    var id = isNaN(asset) ? asset.id : asset;
    if (asset && isNaN(asset) && asset.resource === this.material) {
      this.material = pc.ModelHandler.DEFAULT_MATERIAL;
    }
    assets.off("add:" + id, this._onMaterialAssetAdd, this);
    assets.off("load:" + id, this._onMaterialAssetLoad, this);
    assets.off("unload:" + id, this._onMaterialAssetUnload, this);
    assets.off("remove:" + id, this._onMaterialAssetRemove, this);
  }, _onMaterialAssetAdd:function(asset) {
    var assets = this.system.app.assets;
    if (asset.resource) {
      this.material = asset.resource;
      this._dirtyMaterialAsset = false;
    } else {
      if (this.enabled && this.entity.enabled) {
        this._dirtyMaterialAsset = false;
        assets.load(asset);
      }
    }
  }, _onMaterialAssetLoad:function(asset) {
    var assets = this.system.app.assets;
    if (asset.resource) {
      this.material = asset.resource;
      this._dirtyMaterialAsset = false;
    } else {
      if (this.enabled && this.entity.enabled) {
        this._dirtyMaterialAsset = false;
        assets.load(asset);
      }
    }
  }, _onMaterialAssetUnload:function(asset) {
    if (asset && isNaN(asset) && asset.resource === this.material) {
      this.material = pc.ModelHandler.DEFAULT_MATERIAL;
    }
  }, setMaterialAsset:function(value) {
    this._dirtyMaterialAsset = true;
    var id = typeof value === "number" || !value ? value : value.id;
    var assets = this.system.app.assets;
    var self = this;
    if (this.data.materialAsset !== id) {
      if (this.data.materialAsset) {
        this._onMaterialAssetRemove(this.data.materialAsset);
      }
      if (id) {
        assets.on("load:" + id, this._onMaterialAssetLoad, this);
        assets.on("unload:" + id, this._onMaterialAssetUnload, this);
        assets.on("remove:" + id, this._onMaterialAssetRemove, this);
      }
    }
    if (id !== undefined && id !== null) {
      var asset = assets.get(id);
      if (asset) {
        this._onMaterialAssetLoad(asset);
      }
      assets.once("add:" + id, this._onMaterialAssetAdd, this);
    } else {
      if (id === null) {
        self.material = pc.ModelHandler.DEFAULT_MATERIAL;
        self._dirtyMaterialAsset = false;
      }
    }
    var valueOld = this.data.materialAsset;
    this.data.materialAsset = id;
    this.fire("set", "materialAsset", valueOld, id);
  }, getMaterialAsset:function() {
    return this.system.app.assets.get(this.data.materialAsset);
  }, onSetMaterial:function(name, oldValue, newValue) {
    if (newValue !== oldValue) {
      this.data.material = newValue;
      if (this.data.model && this.data.type !== "asset") {
        var meshInstances = this.data.model.meshInstances;
        for (var i = 0; i < meshInstances.length; i++) {
          meshInstances[i].material = newValue;
        }
      }
    }
  }, onSetMapping:function(name, oldValue, newValue) {
    if (this.data.type !== "asset" || !this.data.model) {
      return;
    }
    this._unsetMaterialEvents();
    if (!newValue) {
      newValue = {};
    }
    var meshInstances = this.data.model.meshInstances;
    var modelAsset = this.asset ? this.system.app.assets.get(this.asset) : null;
    var assetMapping = modelAsset ? modelAsset.data.mapping : null;
    for (var i = 0, len = meshInstances.length; i < len; i++) {
      if (newValue[i] !== undefined) {
        if (newValue[i]) {
          this._loadAndSetMeshInstanceMaterial(newValue[i], meshInstances[i], i);
        } else {
          meshInstances[i].material = pc.ModelHandler.DEFAULT_MATERIAL;
        }
      } else {
        if (assetMapping) {
          if (assetMapping[i] && (assetMapping[i].material || assetMapping[i].path)) {
            var idOrPath = assetMapping[i].material || assetMapping[i].path;
            this._loadAndSetMeshInstanceMaterial(idOrPath, meshInstances[i], i);
          } else {
            meshInstances[i].material = pc.ModelHandler.DEFAULT_MATERIAL;
          }
        }
      }
    }
  }, _setMaterialEvent:function(index, event, id, handler) {
    var evt = event + ":" + id;
    this.system.app.assets.on(evt, handler, this);
    if (!this._materialEvents) {
      this._materialEvents = [];
    }
    if (!this._materialEvents[index]) {
      this._materialEvents[index] = {};
    }
    this._materialEvents[index][evt] = {id:id, handler:handler};
  }, _unsetMaterialEvents:function() {
    var assets = this.system.app.assets;
    var events = this._materialEvents;
    if (!events) {
      return;
    }
    for (var i = 0, len = events.length; i < len; i++) {
      if (!events[i]) {
        continue;
      }
      var evt = events[i];
      for (var key in evt) {
        assets.off(key, evt[key].handler, this);
      }
    }
    this._materialEvents = null;
  }, _getAssetByIdOrPath:function(idOrPath) {
    var asset = null;
    var isPath = isNaN(parseInt(idOrPath, 10));
    if (!isPath) {
      asset = this.system.app.assets.get(idOrPath);
    } else {
      if (this.asset) {
        var url = this._getMaterialAssetUrl(idOrPath);
        if (url) {
          asset = this.system.app.assets.getByUrl(url);
        }
      }
    }
    return asset;
  }, _getMaterialAssetUrl:function(path) {
    if (!this.asset) {
      return null;
    }
    var modelAsset = this.system.app.assets.get(this.asset);
    if (!modelAsset) {
      return null;
    }
    var fileUrl = modelAsset.getFileUrl();
    var dirUrl = pc.path.getDirectory(fileUrl);
    return pc.path.join(dirUrl, path);
  }, _loadAndSetMeshInstanceMaterial:function(idOrPath, meshInstance, index) {
    var self = this;
    var assets = this.system.app.assets;
    var asset = this._getAssetByIdOrPath(idOrPath);
    if (!asset) {
      return;
    }
    var handleMaterial = function(asset) {
      if (asset.resource) {
        meshInstance.material = asset.resource;
        self._setMaterialEvent(index, "remove", asset.id, function() {
          meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
        });
      } else {
        self._setMaterialEvent(index, "load", asset.id, function(asset) {
          meshInstance.material = asset.resource;
          self._setMaterialEvent(index, "remove", asset.id, function() {
            meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
          });
        });
        if (self.enabled && self.entity.enabled) {
          assets.load(asset);
        }
      }
    };
    if (asset) {
      handleMaterial(asset);
    } else {
      meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
      var isPath = isNaN(parseInt(idOrPath, 10));
      self._setMaterialEvent(index, isPath ? "add:url" : "add", idOrPath, handleMaterial);
    }
  }, onSetReceiveShadows:function(name, oldValue, newValue) {
    if (newValue !== undefined) {
      var componentData = this.data;
      if (componentData.model) {
        var meshInstances = componentData.model.meshInstances;
        for (var i = 0; i < meshInstances.length; i++) {
          meshInstances[i].receiveShadow = newValue;
        }
      }
    }
  }, onEnable:function() {
    ModelComponent._super.onEnable.call(this);
    this.system.app.scene.on("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this.onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this.onLayerRemoved, this);
    }
    var asset;
    var model = this.data.model;
    var isAsset = this.data.type === "asset";
    if (model) {
      this.addModelToLayers();
    } else {
      if (isAsset && this._dirtyModelAsset) {
        asset = this.data.asset;
        if (!asset) {
          return;
        }
        asset = this.system.app.assets.get(asset);
        if (asset) {
          this._onModelAsset(asset);
        }
      }
    }
    if (this._dirtyMaterialAsset) {
      var materialAsset = this.data.materialAsset;
      if (materialAsset) {
        materialAsset = this.system.app.assets.get(materialAsset);
        if (materialAsset && !materialAsset.resource) {
          this._onMaterialAssetLoad(materialAsset);
        }
      }
    }
    if (isAsset) {
      var mapping = this.data.mapping;
      if (mapping) {
        for (var index in mapping) {
          if (mapping[index]) {
            asset = this._getAssetByIdOrPath(mapping[index]);
            if (asset && !asset.resource) {
              this.system.app.assets.load(asset);
            }
          }
        }
      }
    }
  }, onDisable:function() {
    ModelComponent._super.onDisable.call(this);
    this.system.app.scene.off("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this.onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this.onLayerRemoved, this);
    }
    var model = this.data.model;
    if (model) {
      this.removeModelFromLayers(this.model);
    }
  }, hide:function() {
    var model = this.data.model;
    if (model) {
      var i, l;
      var instances = model.meshInstances;
      for (i = 0, l = instances.length; i < l; i++) {
        instances[i].visible = false;
      }
    }
  }, show:function() {
    var model = this.data.model;
    if (model) {
      var i, l;
      var instances = model.meshInstances;
      for (i = 0, l = instances.length; i < l; i++) {
        instances[i].visible = true;
      }
    }
  }});
  Object.defineProperty(ModelComponent.prototype, "meshInstances", {get:function() {
    if (!this.model) {
      return null;
    }
    return this.model.meshInstances;
  }, set:function(value) {
    if (!this.model) {
      return;
    }
    this.model.meshInstances = value;
  }});
  return {ModelComponent:ModelComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "type", "asset", "materialAsset", "castShadows", "receiveShadows", "castShadowsLightmap", "lightmapped", "lightmapSizeMultiplier", "isStatic", "material", "model", "layers", "batchGroupId", "mapping"];
  var ModelComponentSystem = function ModelComponentSystem(app) {
    this.id = "model";
    this.description = "Renders a 3D model at the location of the Entity.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.ModelComponent;
    this.DataType = pc.ModelComponentData;
    this.schema = _schema;
    var gd = app.graphicsDevice;
    this.box = pc.createBox(gd, {halfExtents:new pc.Vec3(0.5, 0.5, 0.5)});
    this.capsule = pc.createCapsule(gd, {radius:0.5, height:2});
    this.sphere = pc.createSphere(gd, {radius:0.5});
    this.cone = pc.createCone(gd, {baseRadius:0.5, peakRadius:0, height:1});
    this.cylinder = pc.createCylinder(gd, {radius:0.5, height:1});
    this.plane = pc.createPlane(gd, {halfExtents:new pc.Vec2(0.5, 0.5), widthSegments:1, lengthSegments:1});
    this.defaultMaterial = new pc.StandardMaterial;
    this.on("beforeremove", this.onRemove, this);
  };
  ModelComponentSystem = pc.inherits(ModelComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ModelComponent.prototype, _schema);
  pc.extend(ModelComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {
    properties = ["enabled", "material", "materialAsset", "asset", "castShadows", "receiveShadows", "castShadowsLightmap", "lightmapped", "lightmapSizeMultiplier", "type", "mapping", "layers", "isStatic", "batchGroupId"];
    var data = {};
    var name;
    for (var i = 0; i < properties.length; i++) {
      name = properties[i];
      data[name] = _data[name];
    }
    data.material = this.defaultMaterial;
    if (data.batchGroupId === null || data.batchGroupId === undefined) {
      data.batchGroupId = -1;
    }
    if (data.layers && pc.type(data.layers) === "array") {
      data.layers = data.layers.slice(0);
    }
    ModelComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, removeComponent:function(entity) {
    var data = entity.model.data;
    entity.model.asset = null;
    if (data.type !== "asset" && data.model) {
      entity.model.removeModelFromLayers(entity.model.model);
      entity.removeChild(data.model.getGraph());
      data.model = null;
    }
    ModelComponentSystem._super.removeComponent.call(this, entity);
  }, cloneComponent:function(entity, clone) {
    var data = {type:entity.model.type, asset:entity.model.asset, castShadows:entity.model.castShadows, receiveShadows:entity.model.receiveShadows, castShadowsLightmap:entity.model.castShadowsLightmap, lightmapped:entity.model.lightmapped, lightmapSizeMultiplier:entity.model.lightmapSizeMultiplier, isStatic:entity.model.isStatic, enabled:entity.model.enabled, layers:entity.model.layers, batchGroupId:entity.model.batchGroupId, mapping:pc.extend({}, entity.model.mapping)};
    var materialAsset = entity.model.materialAsset;
    if (!(materialAsset instanceof pc.Asset) && materialAsset != null) {
      materialAsset = this.app.assets.get(materialAsset);
    }
    var material = entity.model.material;
    if (!material || material === pc.ModelHandler.DEFAULT_MATERIAL || !materialAsset || material === materialAsset.resource) {
      data.materialAsset = materialAsset;
    }
    var component = this.addComponent(clone, data);
    if (!data.materialAsset) {
      component.material = material;
    }
    if (entity.model.model) {
      var meshInstances = entity.model.model.meshInstances;
      var meshInstancesClone = component.model.meshInstances;
      for (var i = 0; i < meshInstances.length; i++) {
        meshInstancesClone[i].mask = meshInstances[i].mask;
        meshInstancesClone[i].material = meshInstances[i].material;
        meshInstancesClone[i].layer = meshInstances[i].layer;
        meshInstancesClone[i].receiveShadow = meshInstances[i].receiveShadow;
      }
    }
  }, onRemove:function(entity, component) {
    entity.model.materialAsset = null;
    component.remove();
  }});
  return {ModelComponentSystem:ModelComponentSystem};
}());
pc.extend(pc, function() {
  var ModelComponentData = function() {
    this.enabled = true;
    this.type = "asset";
    this.asset = null;
    this.castShadows = true;
    this.receiveShadows = true;
    this.materialAsset = null;
    this.mapping = null;
    this.castShadowsLightmap = true;
    this.lightmapped = false;
    this.lightmapSizeMultiplier = 1;
    this.isStatic = false;
    this.layers = [pc.LAYERID_WORLD];
    this.batchGroupId = -1;
    this.material = null;
    this.model = null;
  };
  ModelComponentData = pc.inherits(ModelComponentData, pc.ComponentData);
  return {ModelComponentData:ModelComponentData};
}());
pc.extend(pc, function() {
  var CameraComponent = function CameraComponent(system, entity) {
    this.on("set_aspectRatioMode", this.onSetAspectRatioMode, this);
    this.on("set_aspectRatio", this.onSetAspectRatio, this);
    this.on("set_camera", this.onSetCamera, this);
    this.on("set_clearColor", this.onSetClearColor, this);
    this.on("set_fov", this.onSetFov, this);
    this.on("set_orthoHeight", this.onSetOrthoHeight, this);
    this.on("set_nearClip", this.onSetNearClip, this);
    this.on("set_farClip", this.onSetFarClip, this);
    this.on("set_projection", this.onSetProjection, this);
    this.on("set_priority", this.onSetPriority, this);
    this.on("set_clearColorBuffer", this.updateClearFlags, this);
    this.on("set_clearDepthBuffer", this.updateClearFlags, this);
    this.on("set_clearStencilBuffer", this.updateClearFlags, this);
    this.on("set_renderTarget", this.onSetRenderTarget, this);
    this.on("set_rect", this.onSetRect, this);
    this.on("set_scissorRect", this.onSetScissorRect, this);
    this.on("set_horizontalFov", this.onSetHorizontalFov, this);
    this.on("set_frustumCulling", this.onSetFrustumCulling, this);
    this.on("set_calculateTransform", this.onSetCalculateTransform, this);
    this.on("set_calculateProjection", this.onSetCalculateProjection, this);
    this.on("set_cullFaces", this.onSetCullFaces, this);
    this.on("set_flipFaces", this.onSetFlipFaces, this);
    this.on("set_layers", this.onSetLayers, this);
  };
  CameraComponent = pc.inherits(CameraComponent, pc.Component);
  Object.defineProperty(CameraComponent.prototype, "projectionMatrix", {get:function() {
    return this.data.camera.getProjectionMatrix();
  }});
  Object.defineProperty(CameraComponent.prototype, "viewMatrix", {get:function() {
    var wtm = this.data.camera._node.getWorldTransform();
    return wtm.clone().invert();
  }});
  Object.defineProperty(CameraComponent.prototype, "frustum", {get:function() {
    return this.data.camera.frustum;
  }});
  Object.defineProperty(CameraComponent.prototype, "vrDisplay", {get:function() {
    return this.data.camera.vrDisplay;
  }, set:function(value) {
    this.data.camera.vrDisplay = value;
    if (value) {
      value._camera = this.data.camera;
    }
  }});
  Object.defineProperty(CameraComponent.prototype, "node", {get:function() {
    return this.data.camera._node;
  }});
  pc.extend(CameraComponent.prototype, {screenToWorld:function(screenx, screeny, cameraz, worldCoord) {
    var device = this.system.app.graphicsDevice;
    return this.data.camera.screenToWorld(screenx, screeny, cameraz, device.clientRect.width, device.clientRect.height, worldCoord);
  }, worldToScreen:function(worldCoord, screenCoord) {
    var device = this.system.app.graphicsDevice;
    return this.data.camera.worldToScreen(worldCoord, device.clientRect.width, device.clientRect.height, screenCoord);
  }, onSetAspectRatioMode:function(name, oldValue, newValue) {
    this.data.camera.aspectRatioMode = newValue;
  }, onSetAspectRatio:function(name, oldValue, newValue) {
    this.data.camera.aspectRatio = newValue;
  }, onSetCamera:function(name, oldValue, newValue) {
    if (oldValue) {
      oldValue._node = null;
    }
    newValue._node = this.entity;
  }, onSetClearColor:function(name, oldValue, newValue) {
    this.data.camera.clearColor[0] = newValue.data[0];
    this.data.camera.clearColor[1] = newValue.data[1];
    this.data.camera.clearColor[2] = newValue.data[2];
    this.data.camera.clearColor[3] = newValue.data[3];
  }, onSetFov:function(name, oldValue, newValue) {
    this.data.camera.fov = newValue;
  }, onSetOrthoHeight:function(name, oldValue, newValue) {
    this.data.camera.orthoHeight = newValue;
  }, onSetNearClip:function(name, oldValue, newValue) {
    this.data.camera.nearClip = newValue;
  }, onSetFarClip:function(name, oldValue, newValue) {
    this.data.camera.farClip = newValue;
  }, onSetHorizontalFov:function(name, oldValue, newValue) {
    this.data.camera.horizontalFov = newValue;
  }, onSetFrustumCulling:function(name, oldValue, newValue) {
    this.data.camera.frustumCulling = newValue;
  }, onSetCalculateTransform:function(name, oldValue, newValue) {
    this._calculateTransform = newValue;
    this.camera.overrideCalculateTransform = !!newValue;
  }, onSetCalculateProjection:function(name, oldValue, newValue) {
    this._calculateProjection = newValue;
    this.camera._projMatDirty = true;
    this.camera.overrideCalculateProjection = !!newValue;
  }, onSetCullFaces:function(name, oldValue, newValue) {
    this.camera._cullFaces = newValue;
  }, onSetFlipFaces:function(name, oldValue, newValue) {
    this.camera._flipFaces = newValue;
  }, onSetProjection:function(name, oldValue, newValue) {
    this.data.camera.projection = newValue;
  }, onSetPriority:function(name, oldValue, newValue) {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer._sortCameras();
    }
  }, onSetLayers:function(name, oldValue, newValue) {
    var i, layer;
    for (i = 0; i < oldValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
      if (!layer) {
        continue;
      }
      layer.removeCamera(this);
    }
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    for (i = 0; i < newValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) {
        continue;
      }
      layer.addCamera(this);
    }
  }, addCameraToLayers:function() {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.addCamera(this);
    }
  }, removeCameraFromLayers:function() {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.removeCamera(this);
    }
  }, onLayersChanged:function(oldComp, newComp) {
    this.addCameraToLayers();
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
  }, onLayerAdded:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.addCamera(this);
  }, onLayerRemoved:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.removeCamera(this);
  }, updateClearFlags:function() {
    var flags = 0;
    if (this.clearColorBuffer) {
      flags = flags | pc.CLEARFLAG_COLOR;
    }
    if (this.clearDepthBuffer) {
      flags = flags | pc.CLEARFLAG_DEPTH;
    }
    if (this.clearStencilBuffer) {
      flags = flags | pc.CLEARFLAG_STENCIL;
    }
    this.data.camera.clearFlags = flags;
  }, onSetRenderTarget:function(name, oldValue, newValue) {
    this.data.camera.renderTarget = newValue;
  }, onSetRect:function(name, oldValue, newValue) {
    this.data.camera.setRect(newValue.data[0], newValue.data[1], newValue.data[2], newValue.data[3]);
  }, onSetScissorRect:function(name, oldValue, newValue) {
    this.data.camera.setScissorRect(newValue.data[0], newValue.data[1], newValue.data[2], newValue.data[3]);
  }, onEnable:function() {
    CameraComponent._super.onEnable.call(this);
    this.system.addCamera(this);
    this.system.app.scene.on("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this.onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this.onLayerRemoved, this);
    }
    if (this.enabled && this.entity.enabled) {
      this.addCameraToLayers();
    }
    this.postEffects.enable();
  }, onDisable:function() {
    CameraComponent._super.onDisable.call(this);
    this.postEffects.disable();
    this.removeCameraFromLayers();
    this.system.app.scene.off("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this.onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this.onLayerRemoved, this);
    }
    this.system.removeCamera(this);
  }, calculateAspectRatio:function(rt) {
    var src = rt ? rt : this.system.app.graphicsDevice;
    var rect = this.rect;
    return src.width * rect.z / (src.height * rect.w);
  }, frameBegin:function(rt) {
    if (this.aspectRatioMode === pc.ASPECT_AUTO) {
      this.aspectRatio = this.calculateAspectRatio(rt);
    }
    this.data.isRendering = true;
  }, frameEnd:function() {
    this.data.isRendering = false;
  }, enterVr:function(display, callback) {
    if (display instanceof Function && !callback) {
      callback = display;
      display = null;
    }
    if (!this.system.app.vr) {
      callback("VrManager not created. Enable VR in project settings.");
      return;
    }
    if (!display) {
      display = this.system.app.vr.display;
    }
    if (display) {
      var self = this;
      if (display.capabilities.canPresent) {
        display.requestPresent(function(err) {
          if (!err) {
            self.vrDisplay = display;
            self.vrDisplay.once("beforepresentchange", function(display) {
              if (!display.presenting) {
                self.vrDisplay = null;
              }
            });
          }
          callback(err);
        });
      } else {
        self.vrDisplay = display;
        callback();
      }
    } else {
      callback("No pc.VrDisplay to present");
    }
  }, exitVr:function(callback) {
    if (this.vrDisplay) {
      if (this.vrDisplay.capabilities.canPresent) {
        var display = this.vrDisplay;
        this.vrDisplay = null;
        display.exitPresent(callback);
      } else {
        this.vrDisplay = null;
        callback();
      }
    } else {
      callback("Not presenting VR");
    }
  }});
  return {CameraComponent:CameraComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "clearColorBuffer", "clearColor", "clearDepthBuffer", "clearStencilBuffer", "frustumCulling", "projection", "fov", "orthoHeight", "nearClip", "farClip", "priority", "rect", "scissorRect", "camera", "aspectRatio", "aspectRatioMode", "horizontalFov", "model", "renderTarget", "calculateTransform", "calculateProjection", "cullFaces", "flipFaces", "layers"];
  var CameraComponentSystem = function(app) {
    this.id = "camera";
    this.description = "Renders the scene from the location of the Entity.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.CameraComponent;
    this.DataType = pc.CameraComponentData;
    this.schema = _schema;
    this.cameras = [];
    this.on("beforeremove", this.onBeforeRemove, this);
    this.on("remove", this.onRemove, this);
    pc.ComponentSystem.on("update", this.onUpdate, this);
  };
  CameraComponentSystem = pc.inherits(CameraComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.CameraComponent.prototype, _schema);
  pc.extend(CameraComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {
    properties = ["postEffects", "enabled", "model", "camera", "aspectRatio", "aspectRatioMode", "horizontalFov", "renderTarget", "clearColor", "fov", "orthoHeight", "nearClip", "farClip", "projection", "priority", "clearColorBuffer", "clearDepthBuffer", "clearStencilBuffer", "frustumCulling", "rect", "scissorRect", "calculateTransform", "calculateProjection", "cullFaces", "flipFaces", "layers"];
    var data = {};
    properties.forEach(function(prop) {
      data[prop] = _data[prop];
    });
    if (data.layers && pc.type(data.layers) === "array") {
      data.layers = data.layers.slice(0);
    }
    if (data.clearColor && pc.type(data.clearColor) === "array") {
      var c = data.clearColor;
      data.clearColor = new pc.Color(c[0], c[1], c[2], c[3]);
    }
    if (data.rect && pc.type(data.rect) === "array") {
      var rect = data.rect;
      data.rect = new pc.Vec4(rect[0], rect[1], rect[2], rect[3]);
    }
    if (data.scissorRect && pc.type(data.scissorRect) === "array") {
      var scissorRect = data.scissorRect;
      data.scissorRect = new pc.Vec4(scissorRect[0], scissorRect[1], scissorRect[2], scissorRect[3]);
    }
    if (data.activate) {
      console.warn("WARNING: activate: Property is deprecated. Set enabled property instead.");
      data.enabled = data.activate;
    }
    data.camera = new pc.Camera;
    data._node = component.entity;
    data.camera._component = component;
    var self = component;
    data.camera.calculateTransform = function(mat, mode) {
      if (!self._calculateTransform) {
        return null;
      }
      return self._calculateTransform(mat, mode);
    };
    data.camera.calculateProjection = function(mat, mode) {
      if (!self._calculateProjection) {
        return null;
      }
      return self._calculateProjection(mat, mode);
    };
    data.postEffects = new pc.PostEffectQueue(this.app, component);
    CameraComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, onBeforeRemove:function(entity, component) {
    this.removeCamera(component);
  }, onRemove:function(entity, data) {
    data.camera = null;
  }, onUpdate:function(dt) {
    var components = this.store;
    var component, componentData, cam, vrDisplay;
    if (this.app.vr) {
      for (var id in components) {
        component = components[id];
        componentData = component.data;
        cam = componentData.camera;
        vrDisplay = cam.vrDisplay;
        if (componentData.enabled && component.entity.enabled && vrDisplay) {
          vrDisplay.setClipPlanes(cam._nearClip, cam._farClip);
          if (cam._node) {
            cam._node.localTransform.copy(vrDisplay.combinedViewInv);
            cam._node._dirtyLocal = false;
            cam._node._dirtify();
          }
        }
      }
    }
  }, addCamera:function(camera) {
    this.cameras.push(camera);
    this.sortCamerasByPriority();
  }, removeCamera:function(camera) {
    var index = this.cameras.indexOf(camera);
    if (index >= 0) {
      this.cameras.splice(index, 1);
      this.sortCamerasByPriority();
    }
  }, sortCamerasByPriority:function() {
    this.cameras.sort(function(a, b) {
      return a.priority - b.priority;
    });
  }});
  return {CameraComponentSystem:CameraComponentSystem};
}());
pc.extend(pc, function() {
  var CameraComponentData = function() {
    this.clearColor = new pc.Color(0.722, 0.722, 0.722, 1);
    this.clearColorBuffer = true;
    this.clearDepthBuffer = true;
    this.clearStencilBuffer = true;
    this.nearClip = 0.1;
    this.farClip = 1000;
    this.fov = 45;
    this.orthoHeight = 100;
    this.projection = pc.PROJECTION_PERSPECTIVE;
    this.priority = 0;
    this.rect = new pc.Vec4(0, 0, 1, 1);
    this.scissorRect = new pc.Vec4(0, 0, 1, 1);
    this.enabled = true;
    this.frustumCulling = false;
    this.cullFaces = true;
    this.flipFaces = false;
    this.layers = [pc.LAYERID_WORLD, pc.LAYERID_DEPTH, pc.LAYERID_SKYBOX, pc.LAYERID_UI, pc.LAYERID_IMMEDIATE];
    this.camera = null;
    this.aspectRatio = 16 / 9;
    this.aspectRatioMode = pc.ASPECT_AUTO;
    this.renderTarget = null;
    this.postEffects = null;
    this.isRendering = false;
    this.calculateTransform = null;
    this.calculateProjection = null;
  };
  CameraComponentData = pc.inherits(CameraComponentData, pc.ComponentData);
  return {CameraComponentData:CameraComponentData};
}());
pc.extend(pc, function() {
  function PostEffectQueue(app, camera) {
    var self = this;
    this.app = app;
    this.camera = camera;
    this.effects = [];
    this.enabled = false;
    this.depthTarget = null;
    this.renderTargetScale = 1;
    this.resizeTimeout = null;
    this.resizeLast = 0;
    this._resizeTimeoutCallback = function() {
      self.resizeRenderTargets();
    };
    camera.on("set_rect", this.onCameraRectChanged, this);
  }
  PostEffectQueue.prototype = {_createOffscreenTarget:function(useDepth, hdr) {
    var rect = this.camera.rect;
    var width = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);
    var height = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);
    var device = this.app.graphicsDevice;
    var format = hdr ? device.getHdrFormat() : pc.PIXELFORMAT_R8_G8_B8_A8;
    var colorBuffer = new pc.Texture(device, {format:format, width:width, height:height});
    colorBuffer.minFilter = pc.FILTER_NEAREST;
    colorBuffer.magFilter = pc.FILTER_NEAREST;
    colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
    colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
    return new pc.RenderTarget(this.app.graphicsDevice, colorBuffer, {depth:useDepth});
  }, _resizeOffscreenTarget:function(rt) {
    var rect = this.camera.rect;
    var width = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);
    var height = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);
    var device = this.app.graphicsDevice;
    var format = rt.colorBuffer.format;
    rt._colorBuffer.destroy();
    var colorBuffer = new pc.Texture(device, {format:format, width:width, height:height});
    colorBuffer.minFilter = pc.FILTER_NEAREST;
    colorBuffer.magFilter = pc.FILTER_NEAREST;
    colorBuffer.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
    colorBuffer.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
    rt._colorBuffer = colorBuffer;
    rt.destroy();
  }, setRenderTargetScale:function(scale) {
    this.renderTargetScale = scale;
    this.resizeRenderTargets();
  }, addEffect:function(effect) {
    var isFirstEffect = this.effects.length === 0;
    var effects = this.effects;
    var newEntry = {effect:effect, inputTarget:this._createOffscreenTarget(isFirstEffect, effect.hdr), outputTarget:null};
    if (!this.layer) {
      this.layer = new pc.Layer({opaqueSortMode:pc.SORTMODE_NONE, transparentSortMode:pc.SORTMODE_NONE, passThrough:true, name:"PostEffectQueue", renderTarget:this.camera.renderTarget, clear:false, onPostRender:function() {
        for (var i = 0; i < this._commandList.length; i++) {
          this._commandList[i]();
        }
      }});
      var layerList = this.app.scene.layers.layerList;
      var order = 0;
      var i;
      var start = layerList.length - 1;
      for (i = start; i >= 0; i--) {
        if (layerList[i].id === pc.LAYERID_UI) {
          start = i - 1;
          layerList[i].overrideClear = true;
          layerList[i].clearColorBuffer = false;
          layerList[i].clearDepthBuffer = this.camera.clearDepthBuffer;
          layerList[i].clearStencilBuffer = this.camera.clearStencilBuffer;
          break;
        }
      }
      for (i = start; i >= 0; i--) {
        if (layerList[i].cameras.indexOf(this.camera) >= 0) {
          if (order === 0) {
            order = i + 1;
          }
          layerList[i].renderTarget = newEntry.inputTarget;
        }
      }
      this.app.scene.layers.insertOpaque(this.layer, order);
      this.layer._commandList = [];
      this.layer.isPostEffect = true;
    }
    effects.push(newEntry);
    var len = effects.length;
    if (len > 1) {
      effects[len - 2].outputTarget = newEntry.inputTarget;
    }
    this.enable();
  }, removeEffect:function(effect) {
    var index = -1;
    for (var i = 0, len = this.effects.length; i < len; i++) {
      if (this.effects[i].effect === effect) {
        index = i;
        break;
      }
    }
    if (index >= 0) {
      if (index > 0) {
        this.effects[index - 1].outputTarget = index + 1 < this.effects.length ? this.effects[index + 1].inputTarget : null;
      } else {
        if (this.effects.length > 1) {
          if (!this.effects[1].inputTarget._depth) {
            this.effects[1].inputTarget.destroy();
            this.effects[1].inputTarget = this._createOffscreenTarget(true, this.effects[1].hdr);
          }
          this.camera.renderTarget = this.effects[1].inputTarget;
        }
      }
      this.effects[index].inputTarget.destroy();
      this.effects.splice(index, 1);
    }
    if (this.enabled) {
      if (effect.needsDepthBuffer) {
        this.camera.releaseDepthMap();
      }
    }
    if (this.effects.length === 0) {
      this.disable();
    }
  }, requestDepthMap:function() {
    for (var i = 0, len = this.effects.length; i < len; i++) {
      var effect = this.effects[i].effect;
      if (effect.needsDepthBuffer) {
        this.camera.camera.requestDepthMap();
      }
    }
  }, releaseDepthMap:function() {
    for (var i = 0, len = this.effects.length; i < len; i++) {
      var effect = this.effects[i].effect;
      if (effect.needsDepthBuffer) {
        this.camera.releaseDepthMap();
      }
    }
  }, destroy:function() {
    for (var i = 0, len = this.effects.length; i < len; i++) {
      this.effects[i].inputTarget.destroy();
    }
    this.effects.length = 0;
    this.disable();
  }, enable:function() {
    if (!this.enabled && this.effects.length) {
      this.enabled = true;
      var self = this;
      this.requestDepthMap();
      this.app.graphicsDevice.on("resizecanvas", this._onCanvasResized, this);
      this.command = function() {
        if (self.enabled) {
          var rect = null;
          var len = self.effects.length;
          if (len) {
            self.layer.renderTarget = self.effects[0].inputTarget;
            for (var i = 0; i < len; i++) {
              var fx = self.effects[i];
              if (i === len - 1) {
                rect = self.camera.rect;
              }
              fx.effect.render(fx.inputTarget, fx.outputTarget, rect);
            }
          }
        }
      };
      this.layer._commandList.push(this.command);
    }
  }, disable:function() {
    if (this.enabled) {
      this.enabled = false;
      this.app.graphicsDevice.off("resizecanvas", this._onCanvasResized, this);
      this.camera.renderTarget = null;
      this.releaseDepthMap();
      var rect = this.camera.rect;
      var i = this.layer._commandList.indexOf(this.command);
      if (i >= 0) {
        this.layer._commandList.splice(i, 1);
      }
    }
  }, _onCanvasResized:function(width, height) {
    var rect = this.camera.rect;
    var device = this.app.graphicsDevice;
    this.camera.camera.aspectRatio = device.width * rect.z / (device.height * rect.w);
    if (this.resizeTimeout) {
      return;
    }
    if (pc.now() - this.resizeLast > 100) {
      this.resizeRenderTargets();
    } else {
      this.resizeTimeout = setTimeout(this._resizeTimeoutCallback, 100);
    }
  }, resizeRenderTargets:function() {
    if (this.resizeTimeout) {
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = null;
    }
    this.resizeLast = pc.now();
    var rect = this.camera.rect;
    var desiredWidth = Math.floor(rect.z * this.app.graphicsDevice.width * this.renderTargetScale);
    var desiredHeight = Math.floor(rect.w * this.app.graphicsDevice.height * this.renderTargetScale);
    var effects = this.effects;
    for (var i = 0, len = effects.length; i < len; i++) {
      var fx = effects[i];
      if (fx.inputTarget.width !== desiredWidth || fx.inputTarget.height !== desiredHeight) {
        this._resizeOffscreenTarget(fx.inputTarget);
      }
    }
  }, onCameraRectChanged:function(name, oldValue, newValue) {
    if (this.enabled) {
      this.resizeRenderTargets();
    }
  }};
  return {PostEffectQueue:PostEffectQueue};
}());
pc.extend(pc, function() {
  var _backbufferRt = [null, null];
  var _constInput = null;
  var _constScreenSize;
  var _constScreenSizeValue = new pc.Vec4;
  var _postEffectChain = [];
  var _backbufferRtUsed = false;
  var _backbufferRt2Used = false;
  var _backbufferRtWrittenByPost = false;
  var _regexUniforms = /uniform[ \t\n\r]+\S+[ \t\n\r]+\S+[ \t\n\r]*;/g;
  var _regexUniformStart = /\S+[ \t\n\r]*;/;
  var _regexUniformEnd = /[ \t\n\r]*;/;
  var _regexVariables = /(float|int|bool|vec2|vec3|vec4|struct)([ \t\n\r]+[^;]+[ \t\n\r]*,*)+;/g;
  var _regexVariableSurroundings = /(float|int|bool|vec2|vec3|vec4|struct|,|;|\{|\})/g;
  var _regexIrrelevantVariables = /(uniform|varying|in|out)[ \t\n\r]+(float|int|bool|vec2|vec3|vec4|struct)([ \t\n\r]+[^;]+[ \t\n\r]*,*)+;/g;
  var _regexIrrelevantVariableSurroundings = /(float|int|bool|vec2|vec3|vec4|struct|uniform|varying|in|out|,|;|\{|\})/g;
  var _regexVersion = /#version/g;
  var _regexFragColor = /out highp vec4 pc_fragColor;/g;
  var _regexFragColor2 = /#define gl_FragColor/g;
  var _regexFragColor3 = /gl_FragColor/g;
  var _regexColorBuffer = /uniform[ \t\n\r]+sampler2D[ \t\n\r]+uColorBuffer;/g;
  var _regexUv = /(varying|in)[ \t\n\r]+vec2[ \t\n\r]+vUv0;/g;
  var _regexColorBufferSample = /(texture2D|texture)[ \t\n\r]*\([ \t\n\r]*uColorBuffer/g;
  var _regexMain = /void[ \t\n\r]+main/g;
  var _createBackbufferRt = function(id, device, format) {
    var tex = new pc.Texture(device, {format:format, width:device.width, height:device.height});
    tex.minFilter = pc.FILTER_NEAREST;
    tex.magFilter = pc.FILTER_NEAREST;
    tex.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
    tex.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
    _backbufferRt[id]._colorBuffer = tex;
  };
  var _destroyBackbufferRt = function(id) {
    _backbufferRt[id].colorBuffer.destroy();
    _backbufferRt[id].destroy();
  };
  var _collectUniforms = function(code) {
    var strs = code.match(_regexUniforms) || [];
    var start, end, uname;
    var uniforms = [];
    for (var i = 0; i < strs.length; i++) {
      start = strs[i].search(_regexUniformStart);
      end = strs[i].search(_regexUniformEnd);
      uname = strs[i].substr(start, end - start);
      if (uname !== "uColorBuffer") {
        uniforms.push(uname);
      }
    }
    return uniforms;
  };
  var _uniformsCollide = function(layers, chain, count, shader) {
    var uniforms = _collectUniforms(shader.definition.fshader);
    if (uniforms.length === 0) {
      return false;
    }
    var i, j, k, uniforms2;
    var uname;
    for (i = 0; i < count; i++) {
      for (j = 0; j < uniforms.length; j++) {
        uname = uniforms[j];
        uniforms2 = _collectUniforms(layers[chain[i]].shader.definition.fshader);
        for (k = 0; k < uniforms2.length; k++) {
          if (uniforms2[k] === uname) {
            return true;
          }
        }
      }
    }
    return false;
  };
  var _collectGlobalTempVars = function(code, list) {
    var len = code.length;
    var chr;
    var scopeStart = 0;
    var scopeEnd = 0;
    var scopeDepth = 0;
    var codeStart = 0;
    var codeWithoutScopes = "";
    var i, j;
    for (i = 0; i < len; i++) {
      chr = code.charAt(i);
      if (chr === "{") {
        if (scopeDepth === 0) {
          scopeStart = i;
        }
        scopeDepth++;
      } else {
        if (chr === "}") {
          if (scopeDepth === 1) {
            scopeEnd = i;
            codeWithoutScopes += code.substr(codeStart, scopeStart - codeStart + 1);
            codeStart = scopeEnd;
          }
          scopeDepth--;
        }
      }
    }
    codeWithoutScopes += code.substr(codeStart, code.length - codeStart + 1);
    var collisions = null;
    var decls = codeWithoutScopes.match(_regexVariables) || [];
    var vars, varName;
    for (i = 0; i < decls.length; i++) {
      vars = decls[i].split(",");
      for (j = 0; j < vars.length; j++) {
        varName = vars[j].replace(_regexVariableSurroundings, "").trim();
        if (list.indexOf(varName) >= 0) {
          if (!collisions) {
            collisions = [];
          }
          collisions.push(varName);
        } else {
          list.push(varName);
        }
      }
    }
    var irrelevantDecls = codeWithoutScopes.match(_regexIrrelevantVariables) || [];
    var index;
    for (i = 0; i < irrelevantDecls.length; i++) {
      vars = irrelevantDecls[i].split(",");
      for (j = 0; j < vars.length; j++) {
        varName = vars[j].replace(_regexIrrelevantVariableSurroundings, "").trim();
        index = list.indexOf(varName);
        if (index >= 0) {
          list.splice(index, 1);
        }
      }
    }
    return collisions;
  };
  function PostEffectPass(app, options) {
    this.app = app;
    this.srcRenderTarget = options.srcRenderTarget;
    this.hdr = options.hdr;
    this.blending = options.blending;
    this.shader = options.shader;
    this.setup = options.setup;
    var self = this;
    var device = app.graphicsDevice;
    this.layer = new pc.Layer({opaqueSortMode:pc.SORTMODE_NONE, transparentSortMode:pc.SORTMODE_NONE, passThrough:true, name:options.name, onPostRender:function() {
      if (self.srcRenderTarget) {
        _constScreenSizeValue.x = self.srcRenderTarget.width;
        _constScreenSizeValue.y = self.srcRenderTarget.height;
        _constScreenSizeValue.z = 1.0 / self.srcRenderTarget.width;
        _constScreenSizeValue.w = 1.0 / self.srcRenderTarget.height;
      } else {
        _constScreenSizeValue.x = device.width;
        _constScreenSizeValue.y = device.height;
        _constScreenSizeValue.z = 1.0 / device.width;
        _constScreenSizeValue.w = 1.0 / device.height;
      }
      _constScreenSize.setValue(_constScreenSizeValue.data);
      if (this._postEffectCombined && this._postEffectCombined < 0) {
        if (self.setup) {
          self.setup(device, self, _constScreenSizeValue, null, this.renderTarget);
        }
        return;
      }
      var src;
      if (this._postEffectCombinedSrc) {
        src = this._postEffectCombinedSrc;
      } else {
        src = self.srcRenderTarget ? self.srcRenderTarget : _backbufferRt[this._backbufferRtId];
      }
      if (src._samples > 1) {
        src.resolve(true, false);
      }
      var tex = src._colorBuffer;
      tex.magFilter = (this._postEffectCombinedShader ? this._postEffectCombinedBilinear : this.postEffectBilinear) ? pc.FILTER_LINEAR : pc.FILTER_NEAREST;
      _constInput.setValue(tex);
      if (self.setup) {
        self.setup(device, self, _constScreenSizeValue, src, this.renderTarget);
      }
      var shader = this._postEffectCombinedShader ? this._postEffectCombinedShader : this.shader;
      if (shader) {
        pc.drawQuadWithShader(device, this.renderTarget, shader, null, null, self.blending);
      }
      if (self.srcRenderTarget) {
        return;
      }
      var layers = app.scene.layers.layerList;
      for (var i = 0; i < layers.length; i++) {
        if (layers[i] === self.layer) {
          break;
        }
        if (layers[i].renderTarget === _backbufferRt[0] || layers[i].renderTarget === _backbufferRt[1]) {
          layers[i].renderTarget = null;
        }
      }
    }});
    this.layer._generateCameraHash();
    this.layer.isPostEffect = true;
    this.layer.unmodifiedUvs = options.unmodifiedUvs;
    this.layer.postEffectBilinear = options.bilinear;
    this.layer.postEffect = this;
    this.layer.shader = options.shader;
    this.layer.renderTarget = options.destRenderTarget;
    if (!_constInput) {
      _constInput = device.scope.resolve("uColorBuffer");
      _constScreenSize = device.scope.resolve("uScreenSize");
      var _backbufferMsaa = device.supportsMsaa ? 4 : 1;
      for (var i = 0; i < 2; i++) {
        _backbufferRt[i] = new pc.RenderTarget({depth:true, stencil:device.supportsStencil, samples:_backbufferMsaa, autoResolve:false});
        _backbufferRt[i].name = "backbuffer" + i;
      }
      app.on("prerender", function() {
        var layers = app.scene.layers.layerList;
        var i, j;
        var offset = 0;
        var rtId = 0;
        _backbufferRtUsed = false;
        _backbufferRt2Used = false;
        _backbufferRtWrittenByPost = false;
        var backbufferRtFormat = pc.PIXELFORMAT_R8_G8_B8_A8;
        if (app.scene.layers._dirty) {
          var iterator = 0;
          var breakChain = false;
          var collisions, k;
          for (i = 0; i < layers.length; i++) {
            breakChain = false;
            if (layers[i].isPostEffect && (iterator === 0 || layers[i].unmodifiedUvs && layers[i].shader && !_uniformsCollide(layers, _postEffectChain, iterator, layers[i].shader))) {
              _postEffectChain[iterator] = i;
              iterator++;
              if (i === layers.length - 1) {
                breakChain = true;
              }
            } else {
              if (iterator > 0) {
                breakChain = true;
              }
            }
            if (breakChain) {
              if (iterator > 1) {
                var cachedName = "post_";
                var layer;
                for (j = 0; j < iterator; j++) {
                  layer = layers[_postEffectChain[j]];
                  cachedName += layer.name ? layer.name : layer.id;
                  if (j < iterator - 1) {
                    cachedName += "_";
                  }
                }
                var shader = device.programLib._cache[cachedName];
                if (!shader) {
                  var subCode;
                  var code = "vec4 shaderOutput;\n";
                  var mainCode = "void main() {\n";
                  var globalTempVars = [];
                  for (j = 0; j < iterator; j++) {
                    subCode = layers[_postEffectChain[j]].shader.definition.fshader + "\n";
                    subCode = subCode.replace(_regexVersion, "//").replace(_regexFragColor, "//").replace(_regexFragColor2, "//").replace(_regexFragColor3, "shaderOutput");
                    if (j > 0) {
                      subCode = subCode.replace(_regexColorBuffer, "//").replace(_regexUv, "//").replace(_regexColorBufferSample, "shaderOutput;//");
                    }
                    subCode = subCode.replace(_regexMain, "void main" + j);
                    collisions = _collectGlobalTempVars(subCode, globalTempVars);
                    if (collisions) {
                      for (k = 0; k < collisions.length; k++) {
                        subCode = subCode.replace(new RegExp("\\b" + collisions[k] + "\\b", "g"), collisions[k] + "NNNN" + j);
                      }
                    }
                    code += subCode;
                    mainCode += "main" + j + "();\n";
                  }
                  mainCode += "gl_FragColor = shaderOutput;\n}\n";
                  shader = pc.shaderChunks.createShaderFromCode(device, pc.shaderChunks.fullscreenQuadVS, code + mainCode, cachedName);
                }
                for (j = 0; j < iterator; j++) {
                  layers[_postEffectChain[j]]._postEffectCombined = j === iterator - 1 ? 1 : -1;
                }
                layers[_postEffectChain[iterator - 1]]._postEffectCombinedShader = shader;
                layers[_postEffectChain[iterator - 1]]._postEffectCombinedBilinear = layers[_postEffectChain[0]].postEffectBilinear;
                layers[_postEffectChain[iterator - 1]]._postEffectCombinedSrc = layers[_postEffectChain[0]].postEffect.srcRenderTarget;
              }
              _postEffectChain[0] = i;
              iterator = 1;
            }
          }
        }
        for (i = 0; i < layers.length; i++) {
          if (layers[i].isPostEffect && (!layers[i].postEffect.srcRenderTarget && !layers[i]._postEffectCombined || !layers[i].postEffect._postEffectCombinedSrc && layers[i]._postEffectCombined >= 0)) {
            for (j = i - 1; j >= offset; j--) {
              if (!layers[j].renderTarget) {
                layers[j].renderTarget = _backbufferRt[rtId];
              }
            }
            layers[i]._backbufferRtId = rtId;
            offset = i;
            _backbufferRtUsed = true;
            if (rtId === 1) {
              _backbufferRt2Used = true;
            }
            if (layers[i].postEffect.hdr) {
              if (device.webgl2 && device.extTextureFloatRenderable) {
                backbufferRtFormat = pc.PIXELFORMAT_111110F;
              } else {
                if (device.extTextureHalfFloatLinear && device.extTextureHalfFloatRenderable) {
                  backbufferRtFormat = pc.PIXELFORMAT_RGBA16F;
                } else {
                  backbufferRtFormat = pc.PIXELFORMAT_R8_G8_B8_A8;
                }
              }
            }
            if (layers[i].postEffect.shader && !layers[i].renderTarget) {
              rtId = 1 - rtId;
            }
          } else {
            if (!layers[i].isPostEffect && !layers[i].renderTarget && _backbufferRtUsed) {
              layers[i].renderTarget = _backbufferRt[rtId];
            }
          }
          if (layers[i].isPostEffect && !layers[i].renderTarget) {
            _backbufferRtWrittenByPost = true;
          }
        }
        if (_backbufferRtUsed) {
          if (!_backbufferRt[0].colorBuffer) {
            _createBackbufferRt(0, device, backbufferRtFormat);
          } else {
            if (_backbufferRt[0].width !== device.width || _backbufferRt[0].height !== device.height || _backbufferRt[0]._colorBuffer._format !== backbufferRtFormat) {
              _destroyBackbufferRt(0);
              _createBackbufferRt(0, device, backbufferRtFormat);
            }
          }
        }
        if (_backbufferRt2Used) {
          if (!_backbufferRt[1].colorBuffer) {
            _createBackbufferRt(1, device, backbufferRtFormat);
          } else {
            if (_backbufferRt[1].width !== device.width || _backbufferRt[1].height !== device.height || _backbufferRt[1]._colorBuffer._format !== backbufferRtFormat) {
              _destroyBackbufferRt(1);
              _createBackbufferRt(1, device, backbufferRtFormat);
            }
          }
        }
      }, this);
      app.on("postrender", function() {
        var device = app.graphicsDevice;
        if (_backbufferRtUsed && !_backbufferRtWrittenByPost) {
          var layers = app.scene.layers.layerList;
          var rt;
          for (var i = layers.length - 1; i >= 0; i--) {
            rt = layers[i].renderTarget;
            if (rt === _backbufferRt[0] || rt === _backbufferRt[1]) {
              break;
            }
          }
          if (rt) {
            if (rt._samples > 1) {
              rt.resolve(true, false);
            }
            device.copyRenderTarget(rt, null, true, false);
          }
        }
      }, this);
    }
  }
  PostEffectPass.prototype.addToComposition = function(order) {
    this.app.scene.layers.insertTransparent(this.layer, order);
  };
  return {PostEffectPass:PostEffectPass};
}());
pc.extend(pc, function() {
  var _props = [];
  var _propsDefault = [];
  function _defineProperty(name, defaultValue, setFunc, skipEqualsCheck) {
    var c = LightComponent.prototype;
    _props.push(name);
    _propsDefault.push(defaultValue);
    Object.defineProperty(c, name, {get:function() {
      return this.data[name];
    }, set:function(value) {
      var data = this.data;
      var oldValue = data[name];
      if (!skipEqualsCheck && oldValue === value) {
        return;
      }
      data[name] = value;
      if (setFunc) {
        setFunc.call(this, value, oldValue);
      }
    }, configurable:true});
  }
  var LightComponent = function LightComponent(system, entity) {
    this._cookieAsset = null;
    this._cookieAssetId = null;
    this._cookieAssetAdd = false;
    this._cookieMatrix = null;
  };
  LightComponent = pc.inherits(LightComponent, pc.Component);
  var _defineProps = function(c, d, s) {
    _defineProperty("enabled", true, function(newValue, oldValue) {
      this.onSetEnabled(null, oldValue, newValue);
    });
    _defineProperty("light", null);
    _defineProperty("type", "directional", function(newValue, oldValue) {
      this.system.changeType(this, oldValue, newValue);
      this.refreshProperties();
    });
    _defineProperty("color", new pc.Color(1, 1, 1), function(newValue, oldValue) {
      this.light.setColor(newValue);
    }, true);
    _defineProperty("intensity", 1, function(newValue, oldValue) {
      this.light.intensity = newValue;
    });
    _defineProperty("castShadows", false, function(newValue, oldValue) {
      this.light.castShadows = newValue;
    });
    _defineProperty("shadowDistance", 40, function(newValue, oldValue) {
      this.light.shadowDistance = newValue;
    });
    _defineProperty("shadowResolution", 1024, function(newValue, oldValue) {
      this.light.shadowResolution = newValue;
    });
    _defineProperty("shadowBias", 0.05, function(newValue, oldValue) {
      this.light.shadowBias = -0.01 * newValue;
    });
    _defineProperty("normalOffsetBias", 0, function(newValue, oldValue) {
      this.light.normalOffsetBias = newValue;
    });
    _defineProperty("range", 10, function(newValue, oldValue) {
      this.light.attenuationEnd = newValue;
    });
    _defineProperty("innerConeAngle", 40, function(newValue, oldValue) {
      this.light.innerConeAngle = newValue;
    });
    _defineProperty("outerConeAngle", 45, function(newValue, oldValue) {
      this.light.outerConeAngle = newValue;
    });
    _defineProperty("falloffMode", pc.LIGHTFALLOFF_LINEAR, function(newValue, oldValue) {
      this.light.falloffMode = newValue;
    });
    _defineProperty("shadowType", pc.SHADOW_PCF3, function(newValue, oldValue) {
      this.light.shadowType = newValue;
    });
    _defineProperty("vsmBlurSize", 11, function(newValue, oldValue) {
      this.light.vsmBlurSize = newValue;
    });
    _defineProperty("vsmBlurMode", pc.BLUR_GAUSSIAN, function(newValue, oldValue) {
      this.light.vsmBlurMode = newValue;
    });
    _defineProperty("vsmBias", 0.01 * 0.25, function(newValue, oldValue) {
      this.light.vsmBias = newValue;
    });
    _defineProperty("cookieAsset", null, function(newValue, oldValue) {
      if (this._cookieAssetId && (newValue instanceof pc.Asset && newValue.id === this._cookieAssetId || newValue === this._cookieAssetId)) {
        return;
      }
      this.onCookieAssetRemove();
      this._cookieAssetId = null;
      if (newValue instanceof pc.Asset) {
        this.data.cookieAsset = newValue.id;
        this._cookieAssetId = newValue.id;
        this.onCookieAssetAdd(newValue);
      } else {
        if (typeof newValue === "number") {
          this._cookieAssetId = newValue;
          var asset = this.system.app.assets.get(newValue);
          if (asset) {
            this.onCookieAssetAdd(asset);
          } else {
            this._cookieAssetAdd = true;
            this.system.app.assets.on("add:" + this._cookieAssetId, this.onCookieAssetAdd, this);
          }
        }
      }
    });
    _defineProperty("cookie", null, function(newValue, oldValue) {
      this.light.cookie = newValue;
    });
    _defineProperty("cookieIntensity", 1, function(newValue, oldValue) {
      this.light.cookieIntensity = newValue;
    });
    _defineProperty("cookieFalloff", true, function(newValue, oldValue) {
      this.light.cookieFalloff = newValue;
    });
    _defineProperty("cookieChannel", "rgb", function(newValue, oldValue) {
      this.light.cookieChannel = newValue;
    });
    _defineProperty("cookieAngle", 0, function(newValue, oldValue) {
      if (newValue !== 0 || this.cookieScale !== null) {
        if (!this._cookieMatrix) {
          this._cookieMatrix = new pc.Vec4;
        }
        var scx = 1;
        var scy = 1;
        if (this.cookieScale) {
          scx = this.cookieScale.x;
          scy = this.cookieScale.y;
        }
        var c = Math.cos(newValue * pc.math.DEG_TO_RAD);
        var s = Math.sin(newValue * pc.math.DEG_TO_RAD);
        this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);
        this.light.cookieTransform = this._cookieMatrix;
      } else {
        this.light.cookieTransform = null;
      }
    });
    _defineProperty("cookieScale", null, function(newValue, oldValue) {
      if (newValue !== null || this.cookieAngle !== 0) {
        if (!this._cookieMatrix) {
          this._cookieMatrix = new pc.Vec4;
        }
        var scx = newValue.x;
        var scy = newValue.y;
        var c = Math.cos(this.cookieAngle * pc.math.DEG_TO_RAD);
        var s = Math.sin(this.cookieAngle * pc.math.DEG_TO_RAD);
        this._cookieMatrix.set(c / scx, -s / scx, s / scy, c / scy);
        this.light.cookieTransform = this._cookieMatrix;
      } else {
        this.light.cookieTransform = null;
      }
    }, true);
    _defineProperty("cookieOffset", null, function(newValue, oldValue) {
      this.light.cookieOffset = newValue;
    }, true);
    _defineProperty("shadowUpdateMode", pc.SHADOWUPDATE_REALTIME, function(newValue, oldValue) {
      this.light.shadowUpdateMode = newValue;
    });
    _defineProperty("mask", 1, function(newValue, oldValue) {
      this.light.mask = newValue;
    });
    _defineProperty("affectDynamic", true, function(newValue, oldValue) {
      if (newValue) {
        this.light.mask |= pc.MASK_DYNAMIC;
      } else {
        this.light.mask &= ~pc.MASK_DYNAMIC;
      }
      this.light.mask = this.light._mask;
    });
    _defineProperty("affectLightmapped", false, function(newValue, oldValue) {
      if (newValue) {
        this.light.mask |= pc.MASK_BAKED;
        if (this.bake) {
          this.light.mask &= ~pc.MASK_LIGHTMAP;
        }
      } else {
        this.light.mask &= ~pc.MASK_BAKED;
        if (this.bake) {
          this.light.mask |= pc.MASK_LIGHTMAP;
        }
      }
      this.light.mask = this.light._mask;
    });
    _defineProperty("bake", false, function(newValue, oldValue) {
      if (newValue) {
        this.light.mask |= pc.MASK_LIGHTMAP;
        if (this.affectLightmapped) {
          this.light.mask &= ~pc.MASK_BAKED;
        }
      } else {
        this.light.mask &= ~pc.MASK_LIGHTMAP;
        if (this.affectLightmapped) {
          this.light.mask |= pc.MASK_BAKED;
        }
      }
      this.light.mask = this.light._mask;
    });
    _defineProperty("bakeDir", true, function(newValue, oldValue) {
      this.light.bakeDir = newValue;
    });
    _defineProperty("isStatic", false, function(newValue, oldValue) {
      this.light.isStatic = newValue;
    });
    _defineProperty("layers", [pc.LAYERID_WORLD], function(newValue, oldValue) {
      var i, layer;
      for (i = 0; i < oldValue.length; i++) {
        layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
        if (!layer) {
          continue;
        }
        layer.removeLight(this);
      }
      for (i = 0; i < newValue.length; i++) {
        layer = this.system.app.scene.layers.getLayerById(newValue[i]);
        if (!layer) {
          continue;
        }
        if (this.enabled && this.entity.enabled) {
          layer.addLight(this);
        }
      }
    });
  };
  _defineProps();
  Object.defineProperty(LightComponent.prototype, "enable", {get:function() {
    console.warn("WARNING: enable: Property is deprecated. Query enabled property instead.");
    return this.enabled;
  }, set:function(value) {
    console.warn("WARNING: enable: Property is deprecated. Set enabled property instead.");
    this.enabled = value;
  }});
  pc.extend(LightComponent.prototype, {addLightToLayers:function() {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.addLight(this);
    }
  }, removeLightFromLayers:function() {
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.removeLight(this);
    }
  }, onLayersChanged:function(oldComp, newComp) {
    if (this.enabled && this.entity.enabled) {
      this.addLightToLayers();
    }
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
  }, onLayerAdded:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    if (this.enabled && this.entity.enabled) {
      layer.addLight(this);
    }
  }, onLayerRemoved:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.removeLight(this);
  }, refreshProperties:function() {
    var name;
    for (var i = 0; i < _props.length; i++) {
      name = _props[i];
      this[name] = this[name];
    }
    if (this.enabled && this.entity.enabled) {
      this.onEnable();
    }
  }, updateShadow:function() {
    this.light.updateShadow();
  }, onCookieAssetSet:function() {
    var forceLoad = false;
    if (this._cookieAsset.type === "cubemap" && !this._cookieAsset.loadFaces) {
      this._cookieAsset.loadFaces = true;
      forceLoad = true;
    }
    if (!this._cookieAsset.resource || forceLoad) {
      this.system.app.assets.load(this._cookieAsset);
    }
    if (this._cookieAsset.resource) {
      this.onCookieAssetLoad();
    }
  }, onCookieAssetAdd:function(asset) {
    if (this._cookieAssetId !== asset.id) {
      return;
    }
    this._cookieAsset = asset;
    if (this.light._enabled) {
      this.onCookieAssetSet();
    }
    this._cookieAsset.on("load", this.onCookieAssetLoad, this);
    this._cookieAsset.on("remove", this.onCookieAssetRemove, this);
  }, onCookieAssetLoad:function() {
    if (!this._cookieAsset || !this._cookieAsset.resource) {
      return;
    }
    this.cookie = this._cookieAsset.resource;
  }, onCookieAssetRemove:function() {
    if (!this._cookieAssetId) {
      return;
    }
    if (this._cookieAssetAdd) {
      this.system.app.assets.off("add:" + this._cookieAssetId, this.onCookieAssetAdd, this);
      this._cookieAssetAdd = false;
    }
    if (this._cookieAsset) {
      this._cookieAsset.off("load", this.onCookieAssetLoad, this);
      this._cookieAsset.off("remove", this.onCookieAssetRemove, this);
      this._cookieAsset = null;
    }
    this.cookie = null;
  }, onEnable:function() {
    LightComponent._super.onEnable.call(this);
    this.light.enabled = true;
    this.system.app.scene.on("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this.onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this.onLayerRemoved, this);
    }
    if (this.enabled && this.entity.enabled) {
      this.addLightToLayers();
    }
    if (this._cookieAsset && !this.cookie) {
      this.onCookieAssetSet();
    }
  }, onDisable:function() {
    LightComponent._super.onDisable.call(this);
    this.light.enabled = false;
    this.system.app.scene.off("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this.onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this.onLayerRemoved, this);
    }
    this.removeLightFromLayers();
  }});
  return {LightComponent:LightComponent, _lightProps:_props, _lightPropsDefault:_propsDefault};
}());
pc.extend(pc, function() {
  var lightTypes = {"directional":pc.LIGHTTYPE_DIRECTIONAL, "point":pc.LIGHTTYPE_POINT, "spot":pc.LIGHTTYPE_SPOT};
  var LightComponentSystem = function(app) {
    this.id = "light";
    this.description = "Enables the Entity to emit light.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.LightComponent;
    this.DataType = pc.LightComponentData;
    this.on("remove", this.onRemove, this);
  };
  LightComponentSystem = pc.inherits(LightComponentSystem, pc.ComponentSystem);
  pc.extend(LightComponentSystem.prototype, {initializeComponentData:function(component, _data) {
    var data = {};
    var _props = pc._lightProps;
    var name;
    for (var i = 0; i < _props.length; i++) {
      name = _props[i];
      data[name] = _data[name];
    }
    if (!data.type) {
      data.type = component.data.type;
    }
    component.data.type = data.type;
    if (data.layers && pc.type(data.layers) === "array") {
      data.layers = data.layers.slice(0);
    }
    if (data.color && pc.type(data.color) === "array") {
      data.color = new pc.Color(data.color[0], data.color[1], data.color[2]);
    }
    if (data.cookieOffset && data.cookieOffset instanceof Array) {
      data.cookieOffset = new pc.Vec2(data.cookieOffset[0], data.cookieOffset[1]);
    }
    if (data.cookieScale && data.cookieScale instanceof Array) {
      data.cookieScale = new pc.Vec2(data.cookieScale[0], data.cookieScale[1]);
    }
    if (data.enable) {
      console.warn("WARNING: enable: Property is deprecated. Set enabled property instead.");
      data.enabled = data.enable;
    }
    var light = new pc.Light;
    light.type = lightTypes[data.type];
    light._node = component.entity;
    light._scene = this.app.scene;
    component.data.light = light;
    LightComponentSystem._super.initializeComponentData.call(this, component, data, _props);
  }, cloneComponent:function(entity, clone) {
    var light = entity.light;
    var data = [];
    var name;
    var _props = pc._lightProps;
    for (var i = 0; i < _props.length; i++) {
      name = _props[i];
      if (name === "light") {
        continue;
      }
      if (light[name] && light[name].clone) {
        data[name] = light[name].clone();
      } else {
        data[name] = light[name];
      }
    }
    this.addComponent(clone, data);
  }, changeType:function(component, oldValue, newValue) {
    if (oldValue !== newValue) {
      component.light.type = lightTypes[newValue];
    }
  }});
  return {LightComponentSystem:LightComponentSystem};
}());
pc.extend(pc, function() {
  var LightComponentData = function() {
    var _props = pc._lightProps;
    var _propsDefault = pc._lightPropsDefault;
    var value;
    for (var i = 0; i < _props.length; i++) {
      value = _propsDefault[i];
      if (value && value.clone) {
        this[_props[i]] = value.clone();
      } else {
        this[_props[i]] = value;
      }
    }
  };
  LightComponentData = pc.inherits(LightComponentData, pc.ComponentData);
  return {LightComponentData:LightComponentData};
}());
pc.extend(pc, function() {
  var ScriptComponent = function ScriptComponent(system, entity) {
    this._scripts = [];
    this._scriptsIndex = {};
    this._scriptsData = null;
    this._oldState = true;
    this._beingEnabled = false;
    this.on("set_enabled", this._onSetEnabled, this);
  };
  ScriptComponent = pc.inherits(ScriptComponent, pc.Component);
  ScriptComponent.scriptMethods = {initialize:"initialize", postInitialize:"postInitialize", update:"update", postUpdate:"postUpdate", swap:"swap"};
  pc.extend(ScriptComponent.prototype, {onEnable:function() {
    ScriptComponent._super.onEnable.call(this);
    this._beingEnabled = true;
    this._checkState();
    if (!this.entity._beingEnabled) {
      this.onPostStateChange();
    }
    this._beingEnabled = false;
  }, onDisable:function() {
    ScriptComponent._super.onDisable.call(this);
    this._checkState();
  }, onPostStateChange:function() {
    var script;
    for (var i = 0, len = this.scripts.length; i < len; i++) {
      script = this.scripts[i];
      if (script._initialized && !script._postInitialized && script.enabled) {
        script._postInitialized = true;
        if (script.postInitialize) {
          this._scriptMethod(script, ScriptComponent.scriptMethods.postInitialize);
        }
      }
    }
  }, _onSetEnabled:function(prop, old, value) {
    this._beingEnabled = true;
    this._checkState();
    this._beingEnabled = false;
  }, _checkState:function() {
    var state = this.enabled && this.entity.enabled;
    if (state === this._oldState) {
      return;
    }
    this._oldState = state;
    this.fire(state ? "enable" : "disable");
    this.fire("state", state);
    var script;
    for (var i = 0, len = this.scripts.length; i < len; i++) {
      script = this.scripts[i];
      script.enabled = script._enabled;
    }
  }, _onBeforeRemove:function() {
    this.fire("remove");
    var destroyed = true;
    while (this.scripts.length > 0 && destroyed) {
      destroyed = this.destroy(this.scripts[0].__scriptType.__name);
    }
  }, _onInitializeAttributes:function() {
    for (var i = 0, len = this.scripts.length; i < len; i++) {
      this.scripts[i].__initializeAttributes();
    }
  }, _scriptMethod:function(script, method, arg) {
    try {
      script[method](arg);
    } catch (ex) {
      script.enabled = false;
      if (!script._callbacks || !script._callbacks.error) {
        console.warn('unhandled exception while calling "' + method + '" for "' + script.__scriptType.__name + '" script: ', ex);
        console.error(ex);
      }
      script.fire("error", ex, method);
      this.fire("error", script, ex, method);
    }
  }, _onInitialize:function() {
    var script, scripts = this._scripts;
    for (var i = 0, len = scripts.length; i < len; i++) {
      script = scripts[i];
      if (!script._initialized && script.enabled) {
        script._initialized = true;
        if (script.initialize) {
          this._scriptMethod(script, ScriptComponent.scriptMethods.initialize);
        }
      }
    }
  }, _onPostInitialize:function() {
    this.onPostStateChange();
  }, _onUpdate:function(dt) {
    var script, scripts = this._scripts;
    for (var i = 0, len = scripts.length; i < len; i++) {
      script = scripts[i];
      if (script.update && script.enabled) {
        this._scriptMethod(script, ScriptComponent.scriptMethods.update, dt);
      }
    }
  }, _onPostUpdate:function(dt) {
    var script, scripts = this._scripts;
    for (var i = 0, len = scripts.length; i < len; i++) {
      script = scripts[i];
      if (script.postUpdate && script.enabled) {
        this._scriptMethod(script, ScriptComponent.scriptMethods.postUpdate, dt);
      }
    }
  }, has:function(name) {
    var scriptType = name;
    if (typeof scriptType === "string") {
      scriptType = this.system.app.scripts.get(scriptType);
    }
    return !!this._scriptsIndex[scriptType.__name];
  }, create:function(name, args) {
    var self = this;
    args = args || {};
    var scriptType = name;
    var scriptName = name;
    if (typeof scriptType === "string") {
      scriptType = this.system.app.scripts.get(scriptType);
    } else {
      if (scriptType) {
        scriptName = scriptType.__name;
      }
    }
    if (scriptType) {
      if (!this._scriptsIndex[scriptType.__name] || !this._scriptsIndex[scriptType.__name].instance) {
        var scriptInstance = new scriptType({app:this.system.app, entity:this.entity, enabled:args.hasOwnProperty("enabled") ? args.enabled : true, attributes:args.attributes || null});
        var ind = -1;
        if (typeof args.ind === "number" && args.ind !== -1 && this._scripts.length > args.ind) {
          ind = args.ind;
        }
        if (ind === -1) {
          this._scripts.push(scriptInstance);
        } else {
          this._scripts.splice(ind, 0, scriptInstance);
        }
        this._scriptsIndex[scriptType.__name] = {instance:scriptInstance, onSwap:function() {
          self.swap(scriptType.__name);
        }};
        this[scriptType.__name] = scriptInstance;
        if (!args.preloading) {
          scriptInstance.__initializeAttributes();
        }
        this.fire("create", scriptType.__name, scriptInstance);
        this.fire("create:" + scriptType.__name, scriptInstance);
        this.system.app.scripts.on("swap:" + scriptType.__name, this._scriptsIndex[scriptType.__name].onSwap);
        if (!args.preloading) {
          if (scriptInstance.enabled && !scriptInstance._initialized) {
            scriptInstance._initialized = true;
            if (scriptInstance.initialize) {
              this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.initialize);
            }
          }
          if (scriptInstance.enabled && !scriptInstance._postInitialized) {
            scriptInstance._postInitialized = true;
            if (scriptInstance.postInitialize) {
              this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.postInitialize);
            }
          }
        }
        return scriptInstance;
      } else {
        console.warn("script '" + scriptName + "' is already added to entity '" + this.entity.name + "'");
      }
    } else {
      this._scriptsIndex[scriptName] = {awaiting:true, ind:this._scripts.length};
      console.warn("script '" + scriptName + "' is not found, awaiting it to be added to registry");
    }
    return null;
  }, destroy:function(name) {
    var scriptName = name;
    var scriptType = name;
    if (typeof scriptType === "string") {
      scriptType = this.system.app.scripts.get(scriptType);
      if (scriptType) {
        scriptName = scriptType.__name;
      }
    }
    var scriptData = this._scriptsIndex[scriptName];
    delete this._scriptsIndex[scriptName];
    if (!scriptData) {
      return false;
    }
    if (scriptData.instance) {
      var ind = this._scripts.indexOf(scriptData.instance);
      this._scripts.splice(ind, 1);
    }
    this.system.app.scripts.off("swap:" + scriptName, scriptData.onSwap);
    delete this[scriptName];
    this.fire("destroy", scriptName, scriptData.instance || null);
    this.fire("destroy:" + scriptName, scriptData.instance || null);
    if (scriptData.instance) {
      scriptData.instance.fire("destroy");
    }
    return true;
  }, swap:function(script) {
    var scriptType = script;
    if (typeof scriptType === "string") {
      scriptType = this.system.app.scripts.get(scriptType);
    }
    var old = this._scriptsIndex[scriptType.__name];
    if (!old || !old.instance) {
      return false;
    }
    var scriptInstanceOld = old.instance;
    var ind = this._scripts.indexOf(scriptInstanceOld);
    var scriptInstance = new scriptType({app:this.system.app, entity:this.entity, enabled:scriptInstanceOld.enabled, attributes:scriptInstanceOld.__attributes});
    if (!scriptInstance.swap) {
      return false;
    }
    scriptInstance.__initializeAttributes();
    this._scripts[ind] = scriptInstance;
    this._scriptsIndex[scriptType.__name].instance = scriptInstance;
    this[scriptType.__name] = scriptInstance;
    this._scriptMethod(scriptInstance, ScriptComponent.scriptMethods.swap, scriptInstanceOld);
    this.fire("swap", scriptType.__name, scriptInstance);
    this.fire("swap:" + scriptType.__name, scriptInstance);
    return true;
  }, move:function(name, ind) {
    if (ind >= this._scripts.length) {
      return false;
    }
    var scriptName = name;
    if (typeof scriptName !== "string") {
      scriptName = name.__name;
    }
    var scriptData = this._scriptsIndex[scriptName];
    if (!scriptData || !scriptData.instance) {
      return false;
    }
    var indOld = this._scripts.indexOf(scriptData.instance);
    if (indOld === -1 || indOld === ind) {
      return false;
    }
    this._scripts.splice(ind, 0, this._scripts.splice(indOld, 1)[0]);
    this.fire("move", scriptName, scriptData.instance, ind, indOld);
    this.fire("move:" + scriptName, scriptData.instance, ind, indOld);
    return true;
  }});
  Object.defineProperty(ScriptComponent.prototype, "scripts", {get:function() {
    return this._scripts;
  }, set:function(value) {
    this._scriptsData = value;
    for (var key in value) {
      if (!value.hasOwnProperty(key)) {
        continue;
      }
      var script = this._scriptsIndex[key];
      if (script) {
        if (typeof value[key].enabled === "boolean") {
          script.enabled = !!value[key].enabled;
        }
        if (typeof value[key].attributes === "object") {
          for (var attr in value[key].attributes) {
            if (pc.createScript.reservedAttributes[attr]) {
              continue;
            }
            if (!script.__attributes.hasOwnProperty(attr)) {
              var scriptType = this.system.app.scripts.get(key);
              if (scriptType) {
                scriptType.attributes.add(attr, {});
              }
            }
            script[attr] = value[key].attributes[attr];
          }
        }
      } else {
        console.log(this.order);
      }
    }
  }});
  return {ScriptComponent:ScriptComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var ScriptComponentSystem = function ScriptComponentSystem(app) {
    this.id = "script";
    this.app = app;
    app.systems.add(this.id, this);
    this.ComponentType = pc.ScriptComponent;
    this.DataType = pc.ScriptComponentData;
    this.schema = _schema;
    this._components = [];
    this.preloading = true;
    this.on("beforeremove", this._onBeforeRemove, this);
    pc.ComponentSystem.on("initialize", this._onInitialize, this);
    pc.ComponentSystem.on("postInitialize", this._onPostInitialize, this);
    pc.ComponentSystem.on("update", this._onUpdate, this);
    pc.ComponentSystem.on("postUpdate", this._onPostUpdate, this);
  };
  ScriptComponentSystem = pc.inherits(ScriptComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ScriptComponent.prototype, _schema);
  pc.extend(ScriptComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    this._components.push(component);
    component.enabled = data.hasOwnProperty("enabled") ? !!data.enabled : true;
    if (data.hasOwnProperty("order") && data.hasOwnProperty("scripts")) {
      component._scriptsData = data.scripts;
      for (var i = 0; i < data.order.length; i++) {
        component.create(data.order[i], {enabled:data.scripts[data.order[i]].enabled, attributes:data.scripts[data.order[i]].attributes, preloading:this.preloading});
      }
    }
  }, cloneComponent:function(entity, clone) {
    var i, key;
    var order = [];
    var scripts = {};
    for (i = 0; i < entity.script._scripts.length; i++) {
      var scriptInstance = entity.script._scripts[i];
      var scriptName = scriptInstance.__scriptType.__name;
      order.push(scriptName);
      var attributes = {};
      for (key in scriptInstance.__attributes) {
        attributes[key] = scriptInstance.__attributes[key];
      }
      scripts[scriptName] = {enabled:scriptInstance._enabled, attributes:attributes};
    }
    for (key in entity.script._scriptsIndex) {
      if (key.awayting) {
        order.splice(key.ind, 0, key);
      }
    }
    var data = {enabled:entity.script.enabled, order:order, scripts:scripts};
    return this.addComponent(clone, data);
  }, _callComponentMethod:function(name, dt) {
    for (var i = 0; i < this._components.length; i++) {
      if (!this._components[i].entity.enabled || !this._components[i].enabled) {
        continue;
      }
      this._components[i][name](dt);
    }
  }, _onInitialize:function() {
    this.preloading = false;
    for (var i = 0; i < this._components.length; i++) {
      this._components[i]._onInitializeAttributes();
    }
    this._callComponentMethod("_onInitialize");
  }, _onPostInitialize:function() {
    this._callComponentMethod("_onPostInitialize");
  }, _onUpdate:function(dt) {
    this._callComponentMethod("_onUpdate", dt);
  }, _onPostUpdate:function(dt) {
    this._callComponentMethod("_onPostUpdate", dt);
  }, _onBeforeRemove:function(entity, component) {
    var ind = this._components.indexOf(component);
    if (ind === -1) {
      return;
    }
    component._onBeforeRemove();
    this._components.splice(ind, 1);
  }});
  return {ScriptComponentSystem:ScriptComponentSystem};
}());
pc.extend(pc, function() {
  var ScriptComponentData = function() {
    this.enabled = true;
  };
  ScriptComponentData = pc.inherits(ScriptComponentData, pc.ComponentData);
  return {ScriptComponentData:ScriptComponentData};
}());
pc.extend(pc, function() {
  var ScriptLegacyComponent = function ScriptLegacyComponent(system, entity) {
    this.on("set_scripts", this.onSetScripts, this);
  };
  ScriptLegacyComponent = pc.inherits(ScriptLegacyComponent, pc.Component);
  pc.extend(ScriptLegacyComponent.prototype, {send:function(name, functionName) {
    console.warn("DEPRECATED: ScriptLegacyComponent.send() is deprecated and will be removed soon. Please use: http://developer.playcanvas.com/user-manual/scripting/communication/");
    var args = pc.makeArray(arguments).slice(2);
    var instances = this.entity.script.instances;
    var fn;
    if (instances && instances[name]) {
      fn = instances[name].instance[functionName];
      if (fn) {
        return fn.apply(instances[name].instance, args);
      }
    }
  }, onEnable:function() {
    ScriptLegacyComponent._super.onEnable.call(this);
    if (this.data.areScriptsLoaded && !this.system.preloading) {
      if (!this.data.initialized) {
        this.system._initializeScriptComponent(this);
      } else {
        this.system._enableScriptComponent(this);
      }
      if (!this.data.postInitialized) {
        this.system._postInitializeScriptComponent(this);
      }
    }
  }, onDisable:function() {
    ScriptLegacyComponent._super.onDisable.call(this);
    this.system._disableScriptComponent(this);
  }, onSetScripts:function(name, oldValue, newValue) {
    if (!this.system._inTools || this.runInTools) {
      if (this._updateScriptAttributes(oldValue, newValue)) {
        return;
      }
      if (this.enabled) {
        this.system._disableScriptComponent(this);
      }
      this.system._destroyScriptComponent(this);
      this.data.areScriptsLoaded = false;
      var scripts = newValue;
      var urls = scripts.map(function(s) {
        return s.url;
      });
      if (this._loadFromCache(urls)) {
        return;
      }
      this._loadScripts(urls);
    }
  }, _updateScriptAttributes:function(oldValue, newValue) {
    var onlyUpdateAttributes = true;
    if (oldValue.length !== newValue.length) {
      onlyUpdateAttributes = false;
    } else {
      var i, len = newValue.length;
      for (i = 0; i < len; i++) {
        if (oldValue[i].url !== newValue[i].url) {
          onlyUpdateAttributes = false;
          break;
        }
      }
    }
    if (onlyUpdateAttributes) {
      for (var key in this.instances) {
        if (this.instances.hasOwnProperty(key)) {
          this.system._updateAccessors(this.entity, this.instances[key]);
        }
      }
    }
    return onlyUpdateAttributes;
  }, _loadFromCache:function(urls) {
    var i, len;
    var cached = [];
    var prefix = this.system.app._scriptPrefix || "";
    var regex = /^http(s)?:\/\//i;
    for (i = 0, len = urls.length; i < len; i++) {
      var url = urls[i];
      if (!regex.test(url)) {
        url = pc.path.join(prefix, url);
      }
      var type = this.system.app.loader.getFromCache(url, "script");
      if (!type) {
        return false;
      } else {
        cached.push(type);
      }
    }
    for (i = 0, len = cached.length; i < len; i++) {
      var ScriptType = cached[i];
      if (ScriptType === true) {
        continue;
      }
      if (ScriptType && this.entity.script) {
        if (!this.entity.script.instances[ScriptType._pcScriptName]) {
          var instance = new ScriptType(this.entity);
          this.system._preRegisterInstance(this.entity, urls[i], ScriptType._pcScriptName, instance);
        }
      }
    }
    if (this.data) {
      this.data.areScriptsLoaded = true;
    }
    if (!this.system.preloading) {
      this.system.onInitialize(this.entity);
      this.system.onPostInitialize(this.entity);
    }
    return true;
  }, _loadScripts:function(urls) {
    var count = urls.length;
    var prefix = this.system.app._scriptPrefix || "";
    urls.forEach(function(url) {
      var _url = null;
      var _unprefixed = null;
      if (url.toLowerCase().startsWith("http://") || url.toLowerCase().startsWith("https://")) {
        _unprefixed = url;
        _url = url;
      } else {
        _unprefixed = url;
        _url = pc.path.join(prefix, url);
      }
      this.system.app.loader.load(_url, "script", function(err, ScriptType) {
        count--;
        if (!err) {
          if (ScriptType && this.entity.script) {
            if (!this.entity.script.instances[ScriptType._pcScriptName]) {
              var instance = new ScriptType(this.entity);
              this.system._preRegisterInstance(this.entity, _unprefixed, ScriptType._pcScriptName, instance);
            }
          }
        } else {
          console.error(err);
        }
        if (count === 0) {
          this.data.areScriptsLoaded = true;
          if (!this.system.preloading) {
            this.system.onInitialize(this.entity);
            this.system.onPostInitialize(this.entity);
          }
        }
      }.bind(this));
    }.bind(this));
  }});
  return {ScriptLegacyComponent:ScriptLegacyComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "scripts", "instances", "runInTools"];
  var INITIALIZE = "initialize";
  var POST_INITIALIZE = "postInitialize";
  var UPDATE = "update";
  var POST_UPDATE = "postUpdate";
  var FIXED_UPDATE = "fixedUpdate";
  var TOOLS_UPDATE = "toolsUpdate";
  var ON_ENABLE = "onEnable";
  var ON_DISABLE = "onDisable";
  var ScriptLegacyComponentSystem = function ScriptLegacyComponentSystem(app) {
    this.id = "script";
    this.description = "Allows the Entity to run JavaScript fragments to implement custom behavior.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.ScriptLegacyComponent;
    this.DataType = pc.ScriptLegacyComponentData;
    this.schema = _schema;
    this.preloading = false;
    this.instancesWithUpdate = [];
    this.instancesWithFixedUpdate = [];
    this.instancesWithPostUpdate = [];
    this.instancesWithToolsUpdate = [];
    this.on("beforeremove", this.onBeforeRemove, this);
    pc.ComponentSystem.on(INITIALIZE, this.onInitialize, this);
    pc.ComponentSystem.on(POST_INITIALIZE, this.onPostInitialize, this);
    pc.ComponentSystem.on(UPDATE, this.onUpdate, this);
    pc.ComponentSystem.on(FIXED_UPDATE, this.onFixedUpdate, this);
    pc.ComponentSystem.on(POST_UPDATE, this.onPostUpdate, this);
    pc.ComponentSystem.on(TOOLS_UPDATE, this.onToolsUpdate, this);
  };
  ScriptLegacyComponentSystem = pc.inherits(ScriptLegacyComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ScriptLegacyComponent.prototype, _schema);
  pc.extend(ScriptLegacyComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    properties = ["runInTools", "enabled", "scripts"];
    if (data.scripts && data.scripts.length) {
      data.scripts.forEach(function(script) {
        if (script.attributes && pc.type(script.attributes) === "array") {
          var dict = {};
          for (var i = 0; i < script.attributes.length; i++) {
            dict[script.attributes[i].name] = script.attributes[i];
          }
          script.attributes = dict;
        }
      });
    }
    ScriptLegacyComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, cloneComponent:function(entity, clone) {
    var src = this.dataStore[entity._guid];
    var data = {runInTools:src.data.runInTools, scripts:[], enabled:src.data.enabled};
    var scripts = src.data.scripts;
    for (var i = 0, len = scripts.length; i < len; i++) {
      var attributes = scripts[i].attributes;
      if (attributes) {
        delete scripts[i].attributes;
      }
      data.scripts.push(pc.extend({}, scripts[i]));
      if (attributes) {
        data.scripts[i].attributes = this._cloneAttributes(attributes);
        scripts[i].attributes = attributes;
      }
    }
    return this.addComponent(clone, data);
  }, onBeforeRemove:function(entity, component) {
    if (component.enabled) {
      this._disableScriptComponent(component);
    }
    this._destroyScriptComponent(component);
  }, onInitialize:function(root) {
    this._registerInstances(root);
    if (root.enabled) {
      if (root.script && root.script.enabled) {
        this._initializeScriptComponent(root.script);
      }
      var children = root._children;
      var i, len = children.length;
      for (i = 0; i < len; i++) {
        if (children[i] instanceof pc.Entity) {
          this.onInitialize(children[i]);
        }
      }
    }
  }, onPostInitialize:function(root) {
    if (root.enabled) {
      if (root.script && root.script.enabled) {
        this._postInitializeScriptComponent(root.script);
      }
      var children = root._children;
      var i, len = children.length;
      for (i = 0; i < len; i++) {
        if (children[i] instanceof pc.Entity) {
          this.onPostInitialize(children[i]);
        }
      }
    }
  }, _callInstancesMethod:function(script, method) {
    var instances = script.data.instances;
    for (var name in instances) {
      if (instances.hasOwnProperty(name)) {
        var instance = instances[name].instance;
        if (instance[method]) {
          instance[method].call(instance);
        }
      }
    }
  }, _initializeScriptComponent:function(script) {
    this._callInstancesMethod(script, INITIALIZE);
    script.data.initialized = true;
    if (script.enabled && script.entity.enabled) {
      this._enableScriptComponent(script);
    }
  }, _enableScriptComponent:function(script) {
    this._callInstancesMethod(script, ON_ENABLE);
  }, _disableScriptComponent:function(script) {
    this._callInstancesMethod(script, ON_DISABLE);
  }, _destroyScriptComponent:function(script) {
    var index;
    var instances = script.data.instances;
    for (var name in instances) {
      if (instances.hasOwnProperty(name)) {
        var instance = instances[name].instance;
        if (instance.destroy) {
          instance.destroy();
        }
        if (instance.update) {
          index = this.instancesWithUpdate.indexOf(instance);
          if (index >= 0) {
            this.instancesWithUpdate.splice(index, 1);
          }
        }
        if (instance.fixedUpdate) {
          index = this.instancesWithFixedUpdate.indexOf(instance);
          if (index >= 0) {
            this.instancesWithFixedUpdate.splice(index, 1);
          }
        }
        if (instance.postUpdate) {
          index = this.instancesWithPostUpdate.indexOf(instance);
          if (index >= 0) {
            this.instancesWithPostUpdate.splice(index, 1);
          }
        }
        if (instance.toolsUpdate) {
          index = this.instancesWithToolsUpdate.indexOf(instance);
          if (index >= 0) {
            this.instancesWithToolsUpdate.splice(index, 1);
          }
        }
        if (script.instances[name].instance === script[name]) {
          delete script[name];
        }
        delete script.instances[name];
      }
    }
  }, _postInitializeScriptComponent:function(script) {
    this._callInstancesMethod(script, POST_INITIALIZE);
    script.data.postInitialized = true;
  }, _updateInstances:function(method, updateList, dt) {
    var item;
    for (var i = 0, len = updateList.length; i < len; i++) {
      item = updateList[i];
      if (item && item.entity && item.entity.enabled && item.entity.script.enabled) {
        item[method].call(item, dt);
      }
    }
  }, onUpdate:function(dt) {
    this._updateInstances(UPDATE, this.instancesWithUpdate, dt);
  }, onFixedUpdate:function(dt) {
    this._updateInstances(FIXED_UPDATE, this.instancesWithFixedUpdate, dt);
  }, onPostUpdate:function(dt) {
    this._updateInstances(POST_UPDATE, this.instancesWithPostUpdate, dt);
  }, onToolsUpdate:function(dt) {
    this._updateInstances(TOOLS_UPDATE, this.instancesWithToolsUpdate, dt);
  }, broadcast:function(name, functionName) {
    console.warn("DEPRECATED: ScriptLegacyComponentSystem.broadcast() is deprecated and will be removed soon. Please use: http://developer.playcanvas.com/user-manual/scripting/communication/");
    var args = pc.makeArray(arguments).slice(2);
    var id, data, fn;
    var dataStore = this.store;
    for (id in dataStore) {
      if (dataStore.hasOwnProperty(id)) {
        data = dataStore[id].data;
        if (data.instances[name]) {
          fn = data.instances[name].instance[functionName];
          if (fn) {
            fn.apply(data.instances[name].instance, args);
          }
        }
      }
    }
  }, _preRegisterInstance:function(entity, url, name, instance) {
    if (entity.script) {
      entity.script.data._instances = entity.script.data._instances || {};
      if (entity.script.data._instances[name]) {
        throw Error(pc.string.format("Script name collision '{0}'. Scripts from '{1}' and '{2}' {{3}}", name, url, entity.script.data._instances[name].url, entity._guid));
      }
      entity.script.data._instances[name] = {url:url, name:name, instance:instance};
    }
  }, _registerInstances:function(entity) {
    var preRegistered, instance, instanceName;
    if (entity.script) {
      if (entity.script.data._instances) {
        entity.script.instances = entity.script.data._instances;
        for (instanceName in entity.script.instances) {
          preRegistered = entity.script.instances[instanceName];
          instance = preRegistered.instance;
          pc.events.attach(instance);
          if (instance.update) {
            this.instancesWithUpdate.push(instance);
          }
          if (instance.fixedUpdate) {
            this.instancesWithFixedUpdate.push(instance);
          }
          if (instance.postUpdate) {
            this.instancesWithPostUpdate.push(instance);
          }
          if (instance.toolsUpdate) {
            this.instancesWithToolsUpdate.push(instance);
          }
          if (entity.script.scripts) {
            this._createAccessors(entity, preRegistered);
          }
          if (entity.script[instanceName]) {
            throw Error(pc.string.format("Script with name '{0}' is already attached to Script Component", instanceName));
          } else {
            entity.script[instanceName] = instance;
          }
        }
        delete entity.script.data._instances;
      }
    }
    var children = entity._children;
    var i, len = children.length;
    for (i = 0; i < len; i++) {
      if (children[i] instanceof pc.Entity) {
        this._registerInstances(children[i]);
      }
    }
  }, _cloneAttributes:function(attributes) {
    var result = {};
    for (var key in attributes) {
      if (!attributes.hasOwnProperty(key)) {
        continue;
      }
      if (attributes[key].type !== "entity") {
        result[key] = pc.extend({}, attributes[key]);
      } else {
        var val = attributes[key].value;
        delete attributes[key].value;
        result[key] = pc.extend({}, attributes[key]);
        result[key].value = val;
        attributes[key].value = val;
      }
    }
    return result;
  }, _createAccessors:function(entity, instance) {
    var self = this;
    var i;
    var len = entity.script.scripts.length;
    var url = instance.url;
    for (i = 0; i < len; i++) {
      var script = entity.script.scripts[i];
      if (script.url === url) {
        var attributes = script.attributes;
        if (script.name && attributes) {
          for (var key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              self._createAccessor(attributes[key], instance);
            }
          }
          entity.script.data.attributes[script.name] = self._cloneAttributes(attributes);
        }
        break;
      }
    }
  }, _createAccessor:function(attribute, instance) {
    var self = this;
    attribute = {name:attribute.name, value:attribute.value, type:attribute.type};
    self._convertAttributeValue(attribute);
    Object.defineProperty(instance.instance, attribute.name, {get:function() {
      return attribute.value;
    }, set:function(value) {
      var oldValue = attribute.value;
      attribute.value = value;
      self._convertAttributeValue(attribute);
      instance.instance.fire("set", attribute.name, oldValue, attribute.value);
    }, configurable:true});
  }, _updateAccessors:function(entity, instance) {
    var self = this;
    var i;
    var len = entity.script.scripts.length;
    var key;
    var url = instance.url;
    var scriptComponent, script, name, attributes;
    var previousAttributes;
    var oldAttribute;
    for (i = 0; i < len; i++) {
      scriptComponent = entity.script;
      script = scriptComponent.scripts[i];
      if (script.url === url) {
        name = script.name;
        attributes = script.attributes;
        if (name) {
          if (attributes) {
            for (key in attributes) {
              if (attributes.hasOwnProperty(key)) {
                self._createAccessor(attributes[key], instance);
              }
            }
          }
          previousAttributes = scriptComponent.data.attributes[name];
          if (previousAttributes) {
            for (key in previousAttributes) {
              oldAttribute = previousAttributes[key];
              if (!(key in attributes)) {
                delete instance.instance[oldAttribute.name];
              } else {
                if (attributes[key].value !== oldAttribute.value) {
                  if (instance.instance.onAttributeChanged) {
                    instance.instance.onAttributeChanged(oldAttribute.name, oldAttribute.value, attributes[key].value);
                  }
                }
              }
            }
          }
          if (attributes) {
            scriptComponent.data.attributes[name] = self._cloneAttributes(attributes);
          } else {
            delete scriptComponent.data.attributes[name];
          }
        }
        break;
      }
    }
  }, _convertAttributeValue:function(attribute) {
    if (attribute.type === "rgb" || attribute.type === "rgba") {
      if (pc.type(attribute.value) === "array") {
        attribute.value = attribute.value.length === 3 ? new pc.Color(attribute.value[0], attribute.value[1], attribute.value[2]) : new pc.Color(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);
      }
    } else {
      if (attribute.type === "vec2") {
        if (pc.type(attribute.value) === "array") {
          attribute.value = new pc.Vec2(attribute.value[0], attribute.value[1]);
        }
      } else {
        if (attribute.type === "vec3" || attribute.type === "vector") {
          if (pc.type(attribute.value) === "array") {
            attribute.value = new pc.Vec3(attribute.value[0], attribute.value[1], attribute.value[2]);
          }
        } else {
          if (attribute.type === "vec4") {
            if (pc.type(attribute.value) === "array") {
              attribute.value = new pc.Vec4(attribute.value[0], attribute.value[1], attribute.value[2], attribute.value[3]);
            }
          } else {
            if (attribute.type === "entity") {
              if (attribute.value !== null && typeof attribute.value === "string") {
                attribute.value = this.app.root.findByGuid(attribute.value);
              }
            } else {
              if (attribute.type === "curve" || attribute.type === "colorcurve") {
                var curveType = attribute.value.keys[0] instanceof Array ? pc.CurveSet : pc.Curve;
                attribute.value = new curveType(attribute.value.keys);
                attribute.value.type = attribute.value.type;
              }
            }
          }
        }
      }
    }
  }});
  return {ScriptLegacyComponentSystem:ScriptLegacyComponentSystem};
}());
pc.extend(pc, function() {
  var ScriptLegacyComponentData = function() {
    this.scripts = [];
    this.enabled = true;
    this.instances = {};
    this._instances = {};
    this.runInTools = false;
    this.attributes = {};
    this.initialized = false;
    this.postInitialized = false;
    this.areScriptsLoaded = false;
  };
  ScriptLegacyComponentData = pc.inherits(ScriptLegacyComponentData, pc.ComponentData);
  return {ScriptLegacyComponentData:ScriptLegacyComponentData};
}());
pc.extend(pc, {DISTANCE_LINEAR:"linear", DISTANCE_INVERSE:"inverse", DISTANCE_EXPONENTIAL:"exponential"});
pc.extend(pc, function() {
  var instanceOptions = {volume:0, pitch:0, loop:false, startTime:0, duration:0, position:new pc.Vec3, maxDistance:0, refDistance:0, rollOffFactor:0, distanceModel:0, onPlay:null, onPause:null, onResume:null, onStop:null, onEnd:null};
  var SoundSlot = function(component, name, options) {
    options = options || {};
    this._component = component;
    this._assets = component.system.app.assets;
    this._manager = component.system.manager;
    this._name = name || "Untitled";
    this._volume = options.volume !== undefined ? pc.math.clamp(Number(options.volume) || 0, 0, 1) : 1;
    this._pitch = options.pitch !== undefined ? Math.max(0.01, Number(options.pitch) || 0) : 1;
    this._loop = !!(options.loop !== undefined ? options.loop : false);
    this._duration = options.duration > 0 ? options.duration : null;
    this._startTime = Math.max(0, Number(options.startTime) || 0);
    this._overlap = !!options.overlap;
    this._autoPlay = !!options.autoPlay;
    this._firstNode = null;
    this._lastNode = null;
    this._asset = options.asset;
    if (this._asset instanceof pc.Asset) {
      this._asset = this._asset.id;
    }
    this._onInstancePlayHandler = this._onInstancePlay.bind(this);
    this._onInstancePauseHandler = this._onInstancePause.bind(this);
    this._onInstanceResumeHandler = this._onInstanceResume.bind(this);
    this._onInstanceStopHandler = this._onInstanceStop.bind(this);
    this._onInstanceEndHandler = this._onInstanceEnd.bind(this);
    this.instances = [];
    pc.events.attach(this);
  };
  SoundSlot.prototype = {play:function() {
    if (!this.overlap && (this.isPlaying || this.isPaused)) {
      this.stop();
    }
    var instance = this._createInstance();
    this.instances.push(instance);
    if (!this.isLoaded) {
      var onLoad = function(sound) {
        var playWhenLoaded = instance._playWhenLoaded;
        instance.sound = sound;
        if (playWhenLoaded) {
          instance.play();
        }
      };
      this.off("load", onLoad);
      this.once("load", onLoad);
      this.load();
    } else {
      instance.play();
    }
    return instance;
  }, pause:function() {
    var paused = false;
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      if (instances[i].pause()) {
        paused = true;
      }
    }
    return paused;
  }, resume:function() {
    var resumed = false;
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      if (instances[i].resume()) {
        resumed = true;
      }
    }
    return resumed;
  }, stop:function() {
    var stopped = false;
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      if (instances[i].stop()) {
        stopped = true;
      }
    }
    instances.length = 0;
    return stopped;
  }, load:function() {
    if (!this._hasAsset()) {
      return;
    }
    var asset = this._assets.get(this._asset);
    if (!asset) {
      this._assets.off("add:" + this._asset, this._onAssetAdd, this);
      this._assets.once("add:" + this._asset, this._onAssetAdd, this);
      return;
    }
    asset.off("remove", this._onAssetRemoved, this);
    asset.on("remove", this._onAssetRemoved, this);
    if (!asset.resource) {
      asset.off("load", this._onAssetLoad, this);
      asset.once("load", this._onAssetLoad, this);
      this._assets.load(asset);
      return;
    }
    this.fire("load", asset.resource);
  }, setExternalNodes:function(firstNode, lastNode) {
    if (!firstNode) {
      console.error("The firstNode must have a valid AudioNode");
      return;
    }
    if (!lastNode) {
      lastNode = firstNode;
    }
    this._firstNode = firstNode;
    this._lastNode = lastNode;
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].setExternalNodes(firstNode, lastNode);
      }
    }
  }, clearExternalNodes:function() {
    this._firstNode = null;
    this._lastNode = null;
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].clearExternalNodes();
      }
    }
  }, getExternalNodes:function() {
    return [this._firstNode, this._lastNode];
  }, _hasAsset:function() {
    return this._asset != null;
  }, _createInstance:function() {
    var instance = null;
    var component = this._component;
    var sound = null;
    if (this._hasAsset()) {
      var asset = this._assets.get(this._asset);
      if (asset) {
        sound = asset.resource;
      }
    }
    var data = instanceOptions;
    data.volume = this._volume * component.volume;
    data.pitch = this._pitch * component.pitch;
    data.loop = this._loop;
    data.startTime = this._startTime;
    data.duration = this._duration;
    data.onPlay = this._onInstancePlayHandler;
    data.onPause = this._onInstancePauseHandler;
    data.onResume = this._onInstanceResumeHandler;
    data.onStop = this._onInstanceStopHandler;
    data.onEnd = this._onInstanceEndHandler;
    if (component.positional) {
      data.position.copy(component.entity.getPosition());
      data.maxDistance = component.maxDistance;
      data.refDistance = component.refDistance;
      data.rollOffFactor = component.rollOffFactor;
      data.distanceModel = component.distanceModel;
      instance = new pc.SoundInstance3d(this._manager, sound, data);
    } else {
      instance = new pc.SoundInstance(this._manager, sound, data);
    }
    if (this._firstNode) {
      instance.setExternalNodes(this._firstNode, this._lastNode);
    }
    return instance;
  }, _onInstancePlay:function(instance) {
    this.fire("play", instance);
    this._component.fire("play", this, instance);
  }, _onInstancePause:function(instance) {
    this.fire("pause", instance);
    this._component.fire("pause", this, instance);
  }, _onInstanceResume:function(instance) {
    this.fire("resume", instance);
    this._component.fire("resume", this, instance);
  }, _onInstanceStop:function(instance) {
    this.fire("stop", instance);
    this._component.fire("stop", this, instance);
  }, _onInstanceEnd:function(instance) {
    var idx = this.instances.indexOf(instance);
    if (idx !== -1) {
      this.instances.splice(idx, 1);
    }
    this.fire("end", instance);
    this._component.fire("end", this, instance);
  }, _onAssetAdd:function(asset) {
    this.load();
  }, _onAssetLoad:function(asset) {
    this.load();
  }, _onAssetRemoved:function(asset) {
    asset.off("remove", this._onAssetRemoved, this);
    this._assets.off("add:" + asset.id, this._onAssetAdd, this);
    this.stop();
  }, updatePosition:function(position) {
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      instances[i].position = position;
    }
  }};
  Object.defineProperty(SoundSlot.prototype, "name", {get:function() {
    return this._name;
  }, set:function(value) {
    this._name = value;
  }});
  Object.defineProperty(SoundSlot.prototype, "volume", {get:function() {
    return this._volume;
  }, set:function(value) {
    this._volume = pc.math.clamp(Number(value) || 0, 0, 1);
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].volume = this._volume * this._component.volume;
      }
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "pitch", {get:function() {
    return this._pitch;
  }, set:function(value) {
    this._pitch = Math.max(Number(value) || 0, 0.01);
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].pitch = this.pitch * this._component.pitch;
      }
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "loop", {get:function() {
    return this._loop;
  }, set:function(value) {
    this._loop = !!value;
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      instances[i].loop = this._loop;
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "autoPlay", {get:function() {
    return this._autoPlay;
  }, set:function(value) {
    this._autoPlay = !!value;
  }});
  Object.defineProperty(SoundSlot.prototype, "overlap", {get:function() {
    return this._overlap;
  }, set:function(value) {
    this._overlap = !!value;
  }});
  Object.defineProperty(SoundSlot.prototype, "startTime", {get:function() {
    return this._startTime;
  }, set:function(value) {
    this._startTime = Math.max(0, Number(value) || 0);
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].startTime = this._startTime;
      }
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "duration", {get:function() {
    var assetDuration = 0;
    if (this._hasAsset()) {
      var asset = this._assets.get(this._asset);
      assetDuration = asset.resource ? asset.resource.duration : 0;
    }
    if (this._duration != null) {
      return this._duration % (assetDuration || 1);
    } else {
      return assetDuration;
    }
  }, set:function(value) {
    this._duration = Math.max(0, Number(value) || 0) || null;
    if (!this._overlap) {
      var instances = this.instances;
      for (var i = 0, len = instances.length; i < len; i++) {
        instances[i].duration = this._duration;
      }
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "asset", {get:function() {
    return this._asset;
  }, set:function(value) {
    var old = this._asset;
    if (old) {
      this._assets.off("add:" + old, this._onAssetAdd, this);
      var oldAsset = this._assets.get(old);
      if (oldAsset) {
        oldAsset.off("remove", this._onAssetRemoved, this);
      }
    }
    this._asset = value;
    if (this._asset instanceof pc.Asset) {
      this._asset = this._asset.id;
    }
    if (this._hasAsset() && this._component.enabled && this._component.entity.enabled) {
      this.load();
    }
  }});
  Object.defineProperty(SoundSlot.prototype, "isLoaded", {get:function() {
    if (this._hasAsset()) {
      var asset = this._assets.get(this._asset);
      if (asset) {
        return !!asset.resource;
      }
    }
    return false;
  }});
  Object.defineProperty(SoundSlot.prototype, "isPlaying", {get:function() {
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      if (instances[i].isPlaying) {
        return true;
      }
    }
    return false;
  }});
  Object.defineProperty(SoundSlot.prototype, "isPaused", {get:function() {
    var instances = this.instances;
    var len = instances.length;
    if (len === 0) {
      return false;
    }
    for (var i = 0; i < len; i++) {
      if (!instances[i].isPaused) {
        return false;
      }
    }
    return true;
  }});
  Object.defineProperty(SoundSlot.prototype, "isStopped", {get:function() {
    var instances = this.instances;
    for (var i = 0, len = instances.length; i < len; i++) {
      if (!instances[i].isStopped) {
        return false;
      }
    }
    return true;
  }});
  return {SoundSlot:SoundSlot};
}());
pc.extend(pc, function() {
  var SoundComponent = function(system, entity) {
    this.on("set_slots", this.onSetSlots, this);
    this.on("set_volume", this.onSetVolume, this);
    this.on("set_pitch", this.onSetPitch, this);
    this.on("set_refDistance", this.onSetRefDistance, this);
    this.on("set_maxDistance", this.onSetMaxDistance, this);
    this.on("set_rollOffFactor", this.onSetRollOffFactor, this);
    this.on("set_distanceModel", this.onSetDistanceModel, this);
    this.on("set_positional", this.onSetPositional, this);
  };
  SoundComponent = pc.inherits(SoundComponent, pc.Component);
  pc.extend(SoundComponent.prototype, {onSetSlots:function(name, oldValue, newValue) {
    var key;
    if (oldValue) {
      for (key in oldValue) {
        oldValue[key].stop();
      }
    }
    var slots = {};
    for (key in newValue) {
      if (!(newValue[key] instanceof pc.SoundSlot)) {
        if (newValue[key].name) {
          slots[newValue[key].name] = new pc.SoundSlot(this, newValue[key].name, newValue[key]);
        }
      } else {
        slots[newValue[key].name] = newValue[key];
      }
    }
    this.data.slots = slots;
    if (this.enabled && this.entity.enabled) {
      this.onEnable();
    }
  }, onSetVolume:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].volume = slot.volume * newValue;
        }
      }
    }
  }, onSetPitch:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].pitch = slot.pitch * newValue;
        }
      }
    }
  }, onSetRefDistance:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].refDistance = newValue;
        }
      }
    }
  }, onSetMaxDistance:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].maxDistance = newValue;
        }
      }
    }
  }, onSetRollOffFactor:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].rollOffFactor = newValue;
        }
      }
    }
  }, onSetDistanceModel:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          instances[i].distanceModel = newValue;
        }
      }
    }
  }, onSetPositional:function(name, oldValue, newValue) {
    var slots = this.data.slots;
    for (var key in slots) {
      var slot = slots[key];
      if (!slot.overlap) {
        var instances = slot.instances;
        for (var i = 0, len = instances.length; i < len; i++) {
          var isPlaying = instances[i].isPlaying || instances[i].isSuspended;
          var currentTime = instances[i].currentTime;
          if (isPlaying) {
            instances[i].stop();
          }
          instances[i] = slot._createInstance();
          if (isPlaying) {
            instances[i].play();
            instances[i].currentTime = currentTime;
          }
        }
      }
    }
  }, onEnable:function() {
    SoundComponent._super.onEnable.call(this);
    if (this.system._inTools) {
      return;
    }
    var slots = this.data.slots;
    var playingBeforeDisable = this.data.playingBeforeDisable;
    for (var key in slots) {
      var slot = slots[key];
      if (slot.autoPlay && slot.isStopped) {
        slot.play();
      } else {
        if (playingBeforeDisable[key]) {
          slot.resume();
        } else {
          if (!slot.isLoaded) {
            slot.load();
          }
        }
      }
    }
  }, onDisable:function() {
    SoundComponent._super.onDisable.call(this);
    var slots = this.data.slots;
    var playingBeforeDisable = {};
    for (var key in slots) {
      if (!slots[key].overlap) {
        if (slots[key].isPlaying) {
          slots[key].pause();
          playingBeforeDisable[key] = true;
        }
      }
    }
    this.data.playingBeforeDisable = playingBeforeDisable;
  }, addSlot:function(name, options) {
    var slots = this.data.slots;
    if (slots[name]) {
      logWARNING("A sound slot with name " + name + " already exists on Entity " + this.entity.getPath());
      return null;
    }
    var slot = new pc.SoundSlot(this, name, options);
    slots[name] = slot;
    if (slot.autoPlay && this.enabled && this.entity.enabled) {
      slot.play();
    }
    return slot;
  }, removeSlot:function(name) {
    var slots = this.data.slots;
    if (slots[name]) {
      slots[name].stop();
      delete slots[name];
    }
  }, slot:function(name) {
    return this.data.slots[name];
  }, play:function(name) {
    if (!this.enabled || !this.entity.enabled) {
      return null;
    }
    var slot = this.slots[name];
    if (!slot) {
      logWARNING("Trying to play sound slot with name " + name + " which does not exist");
      return null;
    }
    return slot.play();
  }, pause:function(name) {
    var slot;
    var slots = this.data.slots;
    if (name) {
      slot = slots[name];
      if (!slot) {
        logWARNING("Trying to pause sound slot with name " + name + " which does not exist");
        return;
      }
      slot.pause();
    } else {
      for (var key in slots) {
        slots[key].pause();
      }
    }
  }, resume:function(name) {
    var slot;
    var slots = this.data.slots;
    if (name) {
      slot = slots[name];
      if (!slot) {
        logWARNING("Trying to resume sound slot with name " + name + " which does not exist");
        return;
      }
      if (slot.isPaused) {
        slot.resume();
      }
    } else {
      for (var key in slots) {
        slots[key].resume();
      }
    }
  }, stop:function(name) {
    var slot;
    var slots = this.data.slots;
    if (name) {
      slot = slots[name];
      if (!slot) {
        logWARNING("Trying to stop sound slot with name " + name + " which does not exist");
        return;
      }
      slot.stop();
    } else {
      for (var key in slots) {
        slots[key].stop();
      }
    }
  }});
  return {SoundComponent:SoundComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "volume", "pitch", "positional", "refDistance", "maxDistance", "rollOffFactor", "distanceModel", "slots"];
  var SoundComponentSystem = function(app, manager) {
    this.id = "sound";
    this.description = "Allows an Entity to play sounds";
    app.systems.add(this.id, this);
    this.ComponentType = pc.SoundComponent;
    this.DataType = pc.SoundComponentData;
    this.schema = _schema;
    this.manager = manager;
    pc.ComponentSystem.on("update", this.onUpdate, this);
    this.on("beforeremove", this.onBeforeRemove, this);
  };
  SoundComponentSystem = pc.inherits(SoundComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.SoundComponent.prototype, _schema);
  pc.extend(SoundComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    properties = ["volume", "pitch", "positional", "refDistance", "maxDistance", "rollOffFactor", "distanceModel", "slots", "enabled"];
    SoundComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, cloneComponent:function(entity, clone) {
    var key;
    var oldData = entity.sound.data;
    var newData = {};
    for (key in oldData) {
      if (oldData.hasOwnProperty(key)) {
        newData[key] = oldData[key];
      }
    }
    newData.slots = {};
    for (key in oldData.slots) {
      var oldSlot = oldData.slots[key];
      if (oldSlot instanceof pc.SoundSlot) {
        newData.slots[key] = {name:oldSlot.name, volume:oldSlot.volume, pitch:oldSlot.pitch, loop:oldSlot.loop, duration:oldSlot.duration, startTime:oldSlot.startTime, overlap:oldSlot.overlap, autoPlay:oldSlot.autoPlay, asset:oldSlot.asset};
      } else {
        newData.slots[key] = oldSlot;
      }
    }
    newData.playingBeforeDisable = {};
    return this.addComponent(clone, newData);
  }, onUpdate:function(dt) {
    var store = this.store;
    for (var id in store) {
      if (store.hasOwnProperty(id)) {
        var item = store[id];
        var entity = item.entity;
        var componentData = item.data;
        if (componentData.enabled && entity.enabled && componentData.positional) {
          var position = entity.getPosition();
          var slots = componentData.slots;
          for (var key in slots) {
            slots[key].updatePosition(position);
          }
        }
      }
    }
  }, onBeforeRemove:function(entity, component) {
    var slots = component.slots;
    for (var key in slots) {
      if (!slots[key].overlap) {
        slots[key].stop();
      }
    }
  }});
  Object.defineProperty(SoundComponentSystem.prototype, "volume", {get:function() {
    return this.manager.volume;
  }, set:function(volume) {
    this.manager.volume = volume;
  }});
  Object.defineProperty(SoundComponentSystem.prototype, "context", {get:function() {
    if (!pc.SoundManager.hasAudioContext()) {
      console.warn("WARNING: Audio context is not supported on this browser");
      return null;
    }
    return this.manager.context;
  }});
  return {SoundComponentSystem:SoundComponentSystem};
}());
pc.SoundComponentData = function SoundComponentData() {
  this.enabled = true;
  this.volume = 1;
  this.pitch = 1;
  this.positional = true;
  this.refDistance = 1;
  this.maxDistance = 10000;
  this.rollOffFactor = 1;
  this.distanceModel = pc.DISTANCE_LINEAR;
  this.slots = {};
  this.playingBeforeDisable = {};
};
pc.extend(pc, function() {
  var AudioSourceComponent = function(system, entity) {
    this.on("set_assets", this.onSetAssets, this);
    this.on("set_loop", this.onSetLoop, this);
    this.on("set_volume", this.onSetVolume, this);
    this.on("set_pitch", this.onSetPitch, this);
    this.on("set_minDistance", this.onSetMinDistance, this);
    this.on("set_maxDistance", this.onSetMaxDistance, this);
    this.on("set_rollOffFactor", this.onSetRollOffFactor, this);
    this.on("set_distanceModel", this.onSetDistanceModel, this);
    this.on("set_3d", this.onSet3d, this);
  };
  AudioSourceComponent = pc.inherits(AudioSourceComponent, pc.Component);
  pc.extend(AudioSourceComponent.prototype, {play:function(name) {
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    if (this.channel) {
      this.stop();
    }
    var channel;
    var componentData = this.data;
    if (componentData.sources[name]) {
      if (!componentData["3d"]) {
        channel = this.system.manager.playSound(componentData.sources[name], componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      } else {
        var pos = this.entity.getPosition();
        channel = this.system.manager.playSound3d(componentData.sources[name], pos, componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      }
    }
  }, pause:function() {
    if (this.channel) {
      this.channel.pause();
    }
  }, unpause:function() {
    if (this.channel && this.channel.paused) {
      this.channel.unpause();
    }
  }, stop:function() {
    if (this.channel) {
      this.channel.stop();
      this.channel = null;
    }
  }, onSetAssets:function(name, oldValue, newValue) {
    var newAssets = [];
    var i, len = newValue.length;
    if (oldValue && oldValue.length) {
      for (i = 0; i < oldValue.length; i++) {
        if (oldValue[i]) {
          var asset = this.system.app.assets.get(oldValue[i]);
          if (asset) {
            asset.off("change", this.onAssetChanged, this);
            asset.off("remove", this.onAssetRemoved, this);
            if (this.currentSource === asset.name) {
              this.stop();
            }
          }
        }
      }
    }
    if (len) {
      for (i = 0; i < len; i++) {
        if (oldValue.indexOf(newValue[i]) < 0) {
          if (newValue[i] instanceof pc.Asset) {
            newAssets.push(newValue[i].id);
          } else {
            newAssets.push(newValue[i]);
          }
        }
      }
    }
    if (!this.system._inTools && newAssets.length) {
      this.loadAudioSourceAssets(newAssets);
    }
  }, onAssetChanged:function(asset, attribute, newValue, oldValue) {
    if (attribute === "resource") {
      var sources = this.data.sources;
      if (sources) {
        this.data.sources[asset.name] = newValue;
        if (this.data.currentSource === asset.name) {
          if (this.channel) {
            if (this.channel.paused) {
              this.play(asset.name);
              this.pause();
            } else {
              this.play(asset.name);
            }
          }
        }
      }
    }
  }, onAssetRemoved:function(asset) {
    asset.off("remove", this.onAssetRemoved, this);
    if (this.data.sources[asset.name]) {
      delete this.data.sources[asset.name];
      if (this.data.currentSource === asset.name) {
        this.stop();
        this.data.currentSource = null;
      }
    }
  }, onSetLoop:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel) {
        this.channel.setLoop(newValue);
      }
    }
  }, onSetVolume:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel) {
        this.channel.setVolume(newValue);
      }
    }
  }, onSetPitch:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel) {
        this.channel.setPitch(newValue);
      }
    }
  }, onSetMaxDistance:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel instanceof pc.Channel3d) {
        this.channel.setMaxDistance(newValue);
      }
    }
  }, onSetMinDistance:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel instanceof pc.Channel3d) {
        this.channel.setMinDistance(newValue);
      }
    }
  }, onSetRollOffFactor:function(name, oldValue, newValue) {
    if (oldValue != newValue) {
      if (this.channel instanceof pc.Channel3d) {
        this.channel.setRollOffFactor(newValue);
      }
    }
  }, onSetDistanceModel:function(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof pc.Channel3d) {
        this.channel.setDistanceModel(newValue);
      }
    }
  }, onSet3d:function(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.system.initialized && this.currentSource) {
        var paused = false;
        var suspended = false;
        if (this.channel) {
          paused = this.channel.paused;
          suspended = this.channel.suspended;
        }
        this.play(this.currentSource);
        if (this.channel) {
          this.channel.paused = paused;
          this.channel.suspended = suspended;
        }
      }
    }
  }, onEnable:function() {
    AudioSourceComponent._super.onEnable.call(this);
    var assets = this.data.assets;
    if (assets) {
      var registry = this.system.app.assets;
      for (var i = 0, len = assets.length; i < len; i++) {
        var asset = assets[i];
        if (!(asset instanceof pc.Asset)) {
          asset = registry.get(asset);
        }
        if (asset && !asset.resource) {
          registry.load(asset);
        }
      }
    }
    if (this.system.initialized) {
      if (this.data.activate && !this.channel) {
        this.play(this.currentSource);
      } else {
        this.unpause();
      }
    }
  }, onDisable:function() {
    AudioSourceComponent._super.onDisable.call(this);
    this.pause();
  }, loadAudioSourceAssets:function(ids) {
    var self = this;
    var assets = ids.map(function(id) {
      return this.system.app.assets.get(id);
    }, this);
    var sources = {};
    var currentSource = null;
    var count = assets.length;
    var _error = function(e) {
      count--;
    };
    var _done = function() {
      this.data.sources = sources;
      this.data.currentSource = currentSource;
      if (this.enabled && this.activate && currentSource) {
        this.onEnable();
      }
    }.bind(this);
    assets.forEach(function(asset, index) {
      if (asset) {
        currentSource = currentSource || asset.name;
        asset.off("change", this.onAssetChanged, this);
        asset.on("change", this.onAssetChanged, this);
        asset.off("remove", this.onAssetRemoved, this);
        asset.on("remove", this.onAssetRemoved, this);
        asset.off("error", _error, this);
        asset.on("error", _error, this);
        asset.ready(function(asset) {
          sources[asset.name] = asset.resource;
          count--;
          if (count === 0) {
            _done();
          }
        });
        if (!asset.resource && self.enabled && self.entity.enabled) {
          this.system.app.assets.load(asset);
        }
      } else {
        count--;
        if (count === 0) {
          _done();
        }
        this.system.app.assets.on("add:" + ids[index], function(asset) {
          asset.ready(function(asset) {
            self.data.sources[asset.name] = asset.resource;
          });
          if (!asset.resource) {
            self.system.app.assets.load(asset);
          }
        });
      }
    }, this);
  }});
  return {AudioSourceComponent:AudioSourceComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "assets", "volume", "pitch", "loop", "activate", "3d", "minDistance", "maxDistance", "rollOffFactor", "distanceModel", "sources", "currentSource", "channel"];
  var AudioSourceComponentSystem = function(app, manager) {
    this.id = "audiosource";
    this.description = "Specifies audio assets that can be played at the position of the Entity.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.AudioSourceComponent;
    this.DataType = pc.AudioSourceComponentData;
    this.schema = _schema;
    this.manager = manager;
    this.initialized = false;
    pc.ComponentSystem.on("initialize", this.onInitialize, this);
    pc.ComponentSystem.on("update", this.onUpdate, this);
    this.on("remove", this.onRemove, this);
  };
  AudioSourceComponentSystem = pc.inherits(AudioSourceComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.AudioSourceComponent.prototype, _schema);
  pc.extend(AudioSourceComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    properties = ["activate", "volume", "pitch", "loop", "3d", "minDistance", "maxDistance", "rollOffFactor", "distanceModel", "enabled", "assets"];
    AudioSourceComponentSystem._super.initializeComponentData.call(this, component, data, properties);
    component.paused = !(component.enabled && component.activate);
  }, onInitialize:function(root) {
    if (root.audiosource && root.enabled && root.audiosource.enabled && root.audiosource.activate) {
      root.audiosource.play(root.audiosource.currentSource);
    }
    var children = root._children;
    var i, len = children.length;
    for (i = 0; i < len; i++) {
      if (children[i] instanceof pc.Entity) {
        this.onInitialize(children[i]);
      }
    }
    this.initialized = true;
  }, onUpdate:function(dt) {
    var components = this.store;
    for (var id in components) {
      if (components.hasOwnProperty(id)) {
        var component = components[id];
        var entity = component.entity;
        var componentData = component.data;
        if (componentData.enabled && entity.enabled && componentData.channel instanceof pc.Channel3d) {
          var pos = entity.getPosition();
          componentData.channel.setPosition(pos);
        }
      }
    }
  }, onRemove:function(entity, data) {
    if (data.channel) {
      data.channel.stop();
      data.channel = null;
    }
  }, setVolume:function(volume) {
    this.manager.setVolume(volume);
  }});
  return {AudioSourceComponentSystem:AudioSourceComponentSystem};
}());
pc.AudioSourceComponentData = function AudioSourceComponentData() {
  this.enabled = true;
  this.assets = [];
  this.activate = true;
  this.volume = 1;
  this.pitch = 1;
  this.loop = false;
  this["3d"] = true;
  this.minDistance = 1;
  this.maxDistance = 10000;
  this.rollOffFactor = 1;
  this.distanceModel = pc.DISTANCE_INVERSE;
  this.paused = true;
  this.sources = {};
  this.currentSource = null;
  this.channel = null;
};
pc.extend(pc, function() {
  var AudioListenerComponent = function(system, entity) {
  };
  AudioListenerComponent = pc.inherits(AudioListenerComponent, pc.Component);
  pc.extend(AudioListenerComponent.prototype, {setCurrentListener:function() {
    if (this.enabled && this.entity.audiolistener && this.entity.enabled) {
      this.system.current = this.entity;
      var position = this.system.current.getPosition();
      this.system.manager.listener.setPosition(position);
    }
  }, onEnable:function() {
    AudioListenerComponent._super.onEnable.call(this);
    this.setCurrentListener();
  }, onDisable:function() {
    AudioListenerComponent._super.onDisable.call(this);
    if (this.system.current === this.entity) {
      this.system.current = null;
    }
  }});
  return {AudioListenerComponent:AudioListenerComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var AudioListenerComponentSystem = function(app, manager) {
    this.id = "audiolistener";
    this.description = "Specifies the location of the listener for 3D audio playback.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.AudioListenerComponent;
    this.DataType = pc.AudioListenerComponentData;
    this.schema = _schema;
    this.manager = manager;
    this.current = null;
    pc.ComponentSystem.on("update", this.onUpdate, this);
  };
  AudioListenerComponentSystem = pc.inherits(AudioListenerComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.AudioListenerComponent.prototype, _schema);
  pc.extend(AudioListenerComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    properties = ["enabled"];
    AudioListenerComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, onUpdate:function(dt) {
    if (this.current) {
      var position = this.current.getPosition();
      this.manager.listener.setPosition(position);
      var wtm = this.current.getWorldTransform();
      this.manager.listener.setOrientation(wtm);
    }
  }});
  return {AudioListenerComponentSystem:AudioListenerComponentSystem};
}());
pc.extend(pc, function() {
  var AudioListenerComponentData = function() {
    this.enabled = true;
  };
  AudioListenerComponentData = pc.inherits(AudioListenerComponentData, pc.ComponentData);
  return {AudioListenerComponentData:AudioListenerComponentData};
}());
pc.extend(pc, {BODYTYPE_STATIC:"static", BODYTYPE_DYNAMIC:"dynamic", BODYTYPE_KINEMATIC:"kinematic", BODYFLAG_STATIC_OBJECT:1, BODYFLAG_KINEMATIC_OBJECT:2, BODYFLAG_NORESPONSE_OBJECT:4, BODYSTATE_ACTIVE_TAG:1, BODYSTATE_ISLAND_SLEEPING:2, BODYSTATE_WANTS_DEACTIVATION:3, BODYSTATE_DISABLE_DEACTIVATION:4, BODYSTATE_DISABLE_SIMULATION:5, BODYGROUP_NONE:0, BODYGROUP_DEFAULT:1, BODYGROUP_DYNAMIC:1, BODYGROUP_STATIC:2, BODYGROUP_KINEMATIC:4, BODYGROUP_ENGINE_1:8, BODYGROUP_TRIGGER:16, BODYGROUP_ENGINE_2:32, 
BODYGROUP_ENGINE_3:64, BODYGROUP_USER_1:128, BODYGROUP_USER_2:256, BODYGROUP_USER_3:512, BODYGROUP_USER_4:1024, BODYGROUP_USER_5:2048, BODYGROUP_USER_6:4096, BODYGROUP_USER_7:8192, BODYGROUP_USER_8:16384, BODYMASK_NONE:0, BODYMASK_ALL:65535, BODYMASK_STATIC:2, BODYMASK_NOT_STATIC:65535 ^ 2, BODYMASK_NOT_STATIC_KINEMATIC:65535 ^ (2 | 4)});
pc.extend(pc, function() {
  var ammoTransform;
  var ammoVec1, ammoVec2, ammoQuat, ammoOrigin;
  var RigidBodyComponent = function RigidBodyComponent(system, entity) {
    if (typeof Ammo !== "undefined" && !ammoTransform) {
      ammoTransform = new Ammo.btTransform;
      ammoVec1 = new Ammo.btVector3;
      ammoVec2 = new Ammo.btVector3;
      ammoQuat = new Ammo.btQuaternion;
      ammoOrigin = new Ammo.btVector3(0, 0, 0);
    }
    this.on("set_mass", this.onSetMass, this);
    this.on("set_linearDamping", this.onSetLinearDamping, this);
    this.on("set_angularDamping", this.onSetAngularDamping, this);
    this.on("set_linearFactor", this.onSetLinearFactor, this);
    this.on("set_angularFactor", this.onSetAngularFactor, this);
    this.on("set_friction", this.onSetFriction, this);
    this.on("set_restitution", this.onSetRestitution, this);
    this.on("set_type", this.onSetType, this);
    this.on("set_group", this.onSetGroupOrMask, this);
    this.on("set_mask", this.onSetGroupOrMask, this);
    this.on("set_body", this.onSetBody, this);
    this._displacement = new pc.Vec3(0, 0, 0);
    this._linearVelocity = new pc.Vec3(0, 0, 0);
    this._angularVelocity = new pc.Vec3(0, 0, 0);
  };
  RigidBodyComponent = pc.inherits(RigidBodyComponent, pc.Component);
  Object.defineProperty(RigidBodyComponent.prototype, "bodyType", {get:function() {
    console.warn("WARNING: bodyType: Function is deprecated. Query type property instead.");
    return this.type;
  }, set:function(type) {
    console.warn("WARNING: bodyType: Function is deprecated. Set type property instead.");
    this.type = type;
  }});
  Object.defineProperty(RigidBodyComponent.prototype, "linearVelocity", {get:function() {
    if (!this.isKinematic()) {
      if (this.body) {
        var vel = this.body.getLinearVelocity();
        this._linearVelocity.set(vel.x(), vel.y(), vel.z());
      }
    }
    return this._linearVelocity;
  }, set:function(lv) {
    this.activate();
    if (!this.isKinematic()) {
      if (this.body) {
        ammoVec1.setValue(lv.x, lv.y, lv.z);
        this.body.setLinearVelocity(ammoVec1);
      }
    }
    this._linearVelocity.copy(lv);
  }});
  Object.defineProperty(RigidBodyComponent.prototype, "angularVelocity", {get:function() {
    if (!this.isKinematic()) {
      if (this.body) {
        var vel = this.body.getAngularVelocity();
        this._angularVelocity.set(vel.x(), vel.y(), vel.z());
      }
    }
    return this._angularVelocity;
  }, set:function(av) {
    this.activate();
    if (!this.isKinematic()) {
      if (this.body) {
        ammoVec1.setValue(av.x, av.y, av.z);
        this.body.setAngularVelocity(ammoVec1);
      }
    }
    this._angularVelocity.copy(av);
  }});
  pc.extend(RigidBodyComponent.prototype, {createBody:function() {
    var entity = this.entity;
    var shape;
    if (entity.collision) {
      shape = entity.collision.shape;
      if (entity.trigger) {
        entity.trigger.destroy();
        delete entity.trigger;
      }
    }
    if (shape) {
      if (this.body) {
        this.system.removeBody(this.body);
        Ammo.destroy(this.body);
      }
      var isStaticOrKinematic = this.isStaticOrKinematic();
      var mass = isStaticOrKinematic ? 0 : this.mass;
      var localInertia = new Ammo.btVector3(0, 0, 0);
      if (!isStaticOrKinematic) {
        shape.calculateLocalInertia(mass, localInertia);
      }
      var pos = entity.getPosition();
      var rot = entity.getRotation();
      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
      var startTransform = new Ammo.btTransform;
      startTransform.setIdentity();
      startTransform.getOrigin().setValue(pos.x, pos.y, pos.z);
      startTransform.setRotation(ammoQuat);
      var motionState = new Ammo.btDefaultMotionState(startTransform);
      var bodyInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);
      var body = new Ammo.btRigidBody(bodyInfo);
      body.setRestitution(this.restitution);
      body.setFriction(this.friction);
      body.setDamping(this.linearDamping, this.angularDamping);
      var v;
      v = this.linearFactor;
      ammoVec1.setValue(v.x, v.y, v.z);
      body.setLinearFactor(ammoVec1);
      v = this.angularFactor;
      ammoVec1.setValue(v.x, v.y, v.z);
      body.setAngularFactor(ammoVec1);
      body.entity = entity;
      if (this.isKinematic()) {
        body.setCollisionFlags(body.getCollisionFlags() | pc.BODYFLAG_KINEMATIC_OBJECT);
        body.setActivationState(pc.BODYSTATE_DISABLE_DEACTIVATION);
      }
      entity.rigidbody.body = body;
      if (this.enabled && this.entity.enabled) {
        this.enableSimulation();
      }
    }
  }, isActive:function() {
    if (this.body) {
      return this.body.isActive();
    }
    return false;
  }, activate:function() {
    if (this.body) {
      this.body.activate();
    }
  }, enableSimulation:function() {
    if (this.entity.collision && this.entity.collision.enabled && !this.data.simulationEnabled) {
      var body = this.body;
      if (body) {
        this.system.addBody(body, this.group, this.mask);
        if (this.isKinematic()) {
          body.forceActivationState(pc.BODYSTATE_DISABLE_DEACTIVATION);
          body.activate();
        } else {
          body.forceActivationState(pc.BODYFLAG_ACTIVE_TAG);
          this.syncEntityToBody();
        }
        this.data.simulationEnabled = true;
      }
    }
  }, disableSimulation:function() {
    var body = this.body;
    if (body && this.data.simulationEnabled) {
      this.system.removeBody(body);
      body.forceActivationState(pc.BODYSTATE_DISABLE_SIMULATION);
      this.data.simulationEnabled = false;
    }
  }, applyForce:function() {
    var x, y, z;
    var px, py, pz;
    switch(arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;
      case 2:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        px = arguments[1].x;
        py = arguments[1].y;
        pz = arguments[1].z;
        break;
      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;
      case 6:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        px = arguments[3];
        py = arguments[4];
        pz = arguments[5];
        break;
    }
    var body = this.body;
    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      if (px !== undefined) {
        ammoVec2.setValue(px, py, pz);
        body.applyForce(ammoVec1, ammoVec2);
      } else {
        body.applyForce(ammoVec1, ammoOrigin);
      }
    }
  }, applyTorque:function() {
    var x, y, z;
    switch(arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;
      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;
      default:
        console.error("ERROR: applyTorque: function takes 1 or 3 arguments");
        return;
    }
    var body = this.body;
    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      body.applyTorque(ammoVec1);
    }
  }, applyImpulse:function() {
    var x, y, z;
    var px, py, pz;
    switch(arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;
      case 2:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        px = arguments[1].x;
        py = arguments[1].y;
        pz = arguments[1].z;
        break;
      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;
      case 6:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        px = arguments[0];
        py = arguments[1];
        pz = arguments[2];
        break;
    }
    var body = this.body;
    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      if (px !== undefined) {
        ammoVec2.setValue(px, py, pz);
        body.applyImpulse(ammoVec1, ammoVec2);
      } else {
        body.applyImpulse(ammoVec1, ammoOrigin);
      }
    }
  }, applyTorqueImpulse:function() {
    var x, y, z;
    switch(arguments.length) {
      case 1:
        x = arguments[0].x;
        y = arguments[0].y;
        z = arguments[0].z;
        break;
      case 3:
        x = arguments[0];
        y = arguments[1];
        z = arguments[2];
        break;
      default:
        console.error("ERROR: applyTorqueImpulse: function takes 1 or 3 arguments");
        return;
    }
    var body = this.body;
    if (body) {
      body.activate();
      ammoVec1.setValue(x, y, z);
      body.applyTorqueImpulse(ammoVec1);
    }
  }, isStatic:function() {
    return this.type === pc.BODYTYPE_STATIC;
  }, isStaticOrKinematic:function() {
    return this.type === pc.BODYTYPE_STATIC || this.type === pc.BODYTYPE_KINEMATIC;
  }, isKinematic:function() {
    return this.type === pc.BODYTYPE_KINEMATIC;
  }, syncEntityToBody:function() {
    var body = this.body;
    if (body) {
      var pos = this.entity.getPosition();
      var rot = this.entity.getRotation();
      var transform = body.getWorldTransform();
      transform.getOrigin().setValue(pos.x, pos.y, pos.z);
      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
      transform.setRotation(ammoQuat);
      if (this.isKinematic()) {
        var motionState = this.body.getMotionState();
        if (motionState) {
          motionState.setWorldTransform(transform);
        }
      }
      body.activate();
    }
  }, syncBodyToEntity:function() {
    var body = this.body;
    if (body.isActive()) {
      var motionState = body.getMotionState();
      if (motionState) {
        motionState.getWorldTransform(ammoTransform);
        var p = ammoTransform.getOrigin();
        var q = ammoTransform.getRotation();
        this.entity.setPosition(p.x(), p.y(), p.z());
        this.entity.setRotation(q.x(), q.y(), q.z(), q.w());
      }
    }
  }, teleport:function() {
    if (arguments.length < 3) {
      if (arguments[0]) {
        this.entity.setPosition(arguments[0]);
      }
      if (arguments[1]) {
        if (arguments[1] instanceof pc.Quat) {
          this.entity.setRotation(arguments[1]);
        } else {
          this.entity.setEulerAngles(arguments[1]);
        }
      }
    } else {
      if (arguments.length === 6) {
        this.entity.setEulerAngles(arguments[3], arguments[4], arguments[5]);
      }
      this.entity.setPosition(arguments[0], arguments[1], arguments[2]);
    }
    this.syncEntityToBody();
  }, _updateKinematic:function(dt) {
    this._displacement.copy(this._linearVelocity).scale(dt);
    this.entity.translate(this._displacement);
    this._displacement.copy(this._angularVelocity).scale(dt);
    this.entity.rotate(this._displacement.x, this._displacement.y, this._displacement.z);
    if (this.body.getMotionState()) {
      var pos = this.entity.getPosition();
      var rot = this.entity.getRotation();
      ammoTransform.getOrigin().setValue(pos.x, pos.y, pos.z);
      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
      ammoTransform.setRotation(ammoQuat);
      this.body.getMotionState().setWorldTransform(ammoTransform);
    }
  }, onEnable:function() {
    RigidBodyComponent._super.onEnable.call(this);
    if (!this.body) {
      this.createBody();
    }
    this.enableSimulation();
  }, onDisable:function() {
    RigidBodyComponent._super.onDisable.call(this);
    this.disableSimulation();
  }, onSetMass:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      var isEnabled = this.enabled && this.entity.enabled;
      if (isEnabled) {
        this.disableSimulation();
      }
      var mass = newValue;
      var localInertia = new Ammo.btVector3(0, 0, 0);
      body.getCollisionShape().calculateLocalInertia(mass, localInertia);
      body.setMassProps(mass, localInertia);
      body.updateInertiaTensor();
      if (isEnabled) {
        this.enableSimulation();
      }
    }
  }, onSetLinearDamping:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      body.setDamping(newValue, this.data.angularDamping);
    }
  }, onSetAngularDamping:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      body.setDamping(this.data.linearDamping, newValue);
    }
  }, onSetLinearFactor:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      ammoVec1.setValue(newValue.x, newValue.y, newValue.z);
      body.setLinearFactor(ammoVec1);
    }
  }, onSetAngularFactor:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      ammoVec1.setValue(newValue.x, newValue.y, newValue.z);
      body.setAngularFactor(ammoVec1);
    }
  }, onSetFriction:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      body.setFriction(newValue);
    }
  }, onSetRestitution:function(name, oldValue, newValue) {
    var body = this.data.body;
    if (body) {
      body.setRestitution(newValue);
    }
  }, onSetType:function(name, oldValue, newValue) {
    if (newValue !== oldValue) {
      this.disableSimulation();
      if (newValue === pc.BODYTYPE_DYNAMIC) {
        this.data.group = pc.BODYGROUP_DYNAMIC;
        this.data.mask = pc.BODYMASK_ALL;
      } else {
        if (newValue === pc.BODYTYPE_KINEMATIC) {
          this.data.group = pc.BODYGROUP_KINEMATIC;
          this.data.mask = pc.BODYMASK_ALL;
        } else {
          this.data.group = pc.BODYGROUP_STATIC;
          this.data.mask = pc.BODYMASK_NOT_STATIC;
        }
      }
      this.createBody();
    }
  }, onSetGroupOrMask:function(name, oldValue, newValue) {
    if (newValue !== oldValue) {
      var isEnabled = this.enabled && this.entity.enabled;
      if (isEnabled) {
        this.disableSimulation();
        this.enableSimulation();
      }
    }
  }, onSetBody:function(name, oldValue, newValue) {
    if (this.body && this.data.simulationEnabled) {
      this.body.activate();
    }
  }});
  return {RigidBodyComponent:RigidBodyComponent};
}());
pc.extend(pc, function() {
  var ammoRayStart, ammoRayEnd;
  var collisions = {};
  var frameCollisions = {};
  var WARNED_RAYCAST_CALLBACK = false;
  var RaycastResult = function RaycastResult(entity, point, normal) {
    this.entity = entity;
    this.point = point;
    this.normal = normal;
  };
  var SingleContactResult = function SingleContactResult(a, b, contactPoint) {
    if (arguments.length === 0) {
      this.a = null;
      this.b = null;
      this.localPointA = new pc.Vec3;
      this.localPointB = new pc.Vec3;
      this.pointA = new pc.Vec3;
      this.pointB = new pc.Vec3;
      this.normal = new pc.Vec3;
    } else {
      this.a = a;
      this.b = b;
      this.localPointA = contactPoint.localPoint;
      this.localPointB = contactPoint.localPointOther;
      this.pointA = contactPoint.point;
      this.pointB = contactPoint.pointOther;
      this.normal = contactPoint.normal;
    }
  };
  var ContactPoint = function ContactPoint(localPoint, localPointOther, point, pointOther, normal) {
    if (arguments.length === 0) {
      this.localPoint = new pc.Vec3;
      this.localPointOther = new pc.Vec3;
      this.point = new pc.Vec3;
      this.pointOther = new pc.Vec3;
      this.normal = new pc.Vec3;
    } else {
      this.localPoint = localPoint;
      this.localPointOther = localPointOther;
      this.point = point;
      this.pointOther = pointOther;
      this.normal = normal;
    }
  };
  var ContactResult = function ContactResult(other, contacts) {
    this.other = other;
    this.contacts = contacts;
  };
  var _schema = ["enabled", "type", "mass", "linearDamping", "angularDamping", "linearFactor", "angularFactor", "friction", "restitution", "group", "mask", "body"];
  var RigidBodyComponentSystem = function RigidBodyComponentSystem(app) {
    this.id = "rigidbody";
    this.description = "Adds the entity to the scene's physical simulation.";
    app.systems.add(this.id, this);
    this._stats = app.stats.frame;
    this.ComponentType = pc.RigidBodyComponent;
    this.DataType = pc.RigidBodyComponentData;
    this.contactPointPool = new pc.AllocatePool(ContactPoint, 1);
    this.contactResultPool = new pc.AllocatePool(ContactResult, 1);
    this.singleContactResultPool = new pc.AllocatePool(SingleContactResult, 1);
    this.schema = _schema;
    this.maxSubSteps = 10;
    this.fixedTimeStep = 1 / 60;
    this.on("remove", this.onRemove, this);
  };
  RigidBodyComponentSystem = pc.inherits(RigidBodyComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.RigidBodyComponent.prototype, _schema);
  pc.extend(RigidBodyComponentSystem.prototype, {onLibraryLoaded:function() {
    if (typeof Ammo !== "undefined") {
      var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration;
      var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
      var overlappingPairCache = new Ammo.btDbvtBroadphase;
      var solver = new Ammo.btSequentialImpulseConstraintSolver;
      this.dynamicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
      this._ammoGravity = new Ammo.btVector3(0, -9.82, 0);
      this.dynamicsWorld.setGravity(this._ammoGravity);
      ammoRayStart = new Ammo.btVector3;
      ammoRayEnd = new Ammo.btVector3;
      pc.ComponentSystem.on("update", this.onUpdate, this);
    } else {
      pc.ComponentSystem.off("update", this.onUpdate, this);
    }
  }, initializeComponentData:function(component, _data, properties) {
    properties = ["enabled", "mass", "linearDamping", "angularDamping", "linearFactor", "angularFactor", "friction", "restitution", "type", "group", "mask"];
    var data = {};
    properties.forEach(function(prop) {
      data[prop] = _data[prop];
    });
    if (_data.bodyType) {
      data.type = _data.bodyType;
      console.warn("WARNING: rigidbody.bodyType: Property is deprecated. Use type instead.");
    }
    if (data.linearFactor && pc.type(data.linearFactor) === "array") {
      data.linearFactor = new pc.Vec3(data.linearFactor[0], data.linearFactor[1], data.linearFactor[2]);
    }
    if (data.angularFactor && pc.type(data.angularFactor) === "array") {
      data.angularFactor = new pc.Vec3(data.angularFactor[0], data.angularFactor[1], data.angularFactor[2]);
    }
    RigidBodyComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, cloneComponent:function(entity, clone) {
    var data = {enabled:entity.rigidbody.enabled, mass:entity.rigidbody.mass, linearDamping:entity.rigidbody.linearDamping, angularDamping:entity.rigidbody.angularDamping, linearFactor:[entity.rigidbody.linearFactor.x, entity.rigidbody.linearFactor.y, entity.rigidbody.linearFactor.z], angularFactor:[entity.rigidbody.angularFactor.x, entity.rigidbody.angularFactor.y, entity.rigidbody.angularFactor.z], friction:entity.rigidbody.friction, restitution:entity.rigidbody.restitution, type:entity.rigidbody.type, 
    group:entity.rigidbody.group, mask:entity.rigidbody.mask};
    this.addComponent(clone, data);
  }, onRemove:function(entity, data) {
    if (data.body) {
      this.removeBody(data.body);
      Ammo.destroy(data.body);
    }
    data.body = null;
  }, addBody:function(body, group, mask) {
    if (group !== undefined && mask !== undefined) {
      this.dynamicsWorld.addRigidBody(body, group, mask);
    } else {
      this.dynamicsWorld.addRigidBody(body);
    }
    return body;
  }, removeBody:function(body) {
    this.dynamicsWorld.removeRigidBody(body);
  }, addConstraint:function(constraint) {
    this.dynamicsWorld.addConstraint(constraint);
    return constraint;
  }, removeConstraint:function(constraint) {
    this.dynamicsWorld.removeConstraint(constraint);
  }, setGravity:function() {
    var x, y, z;
    if (arguments.length === 1) {
      x = arguments[0].x;
      y = arguments[0].y;
      z = arguments[0].z;
    } else {
      x = arguments[0];
      y = arguments[1];
      z = arguments[2];
    }
    this._ammoGravity.setValue(x, y, z);
    this.dynamicsWorld.setGravity(this._ammoGravity);
  }, raycastFirst:function(start, end, callback) {
    var result = null;
    ammoRayStart.setValue(start.x, start.y, start.z);
    ammoRayEnd.setValue(end.x, end.y, end.z);
    var rayCallback = new Ammo.ClosestRayResultCallback(ammoRayStart, ammoRayEnd);
    this.dynamicsWorld.rayTest(ammoRayStart, ammoRayEnd, rayCallback);
    if (rayCallback.hasHit()) {
      var collisionObj = rayCallback.get_m_collisionObject();
      var body = Ammo.castObject(collisionObj, Ammo.btRigidBody);
      if (body) {
        var point = rayCallback.get_m_hitPointWorld();
        var normal = rayCallback.get_m_hitNormalWorld();
        result = new RaycastResult(body.entity, new pc.Vec3(point.x(), point.y(), point.z()), new pc.Vec3(normal.x(), normal.y(), normal.z()));
        if (callback) {
          callback(result);
          if (!WARNED_RAYCAST_CALLBACK) {
            console.warn("[DEPRECATED]: pc.RigidBodyComponentSystem#rayCastFirst no longer requires a callback. The result of the raycast is returned by the function instead.");
            WARNED_RAYCAST_CALLBACK = true;
          }
        }
      }
    }
    Ammo.destroy(rayCallback);
    return result;
  }, _storeCollision:function(entity, other) {
    var isNewCollision = false;
    var guid = entity._guid;
    collisions[guid] = collisions[guid] || {others:[], entity:entity};
    if (collisions[guid].others.indexOf(other) < 0) {
      collisions[guid].others.push(other);
      isNewCollision = true;
    }
    frameCollisions[guid] = frameCollisions[guid] || {others:[], entity:entity};
    frameCollisions[guid].others.push(other);
    return isNewCollision;
  }, _createContactPointFromAmmo:function(contactPoint) {
    var contact = this.contactPointPool.allocate();
    contact.localPoint.set(contactPoint.get_m_localPointA().x(), contactPoint.get_m_localPointA().y(), contactPoint.get_m_localPointA().z());
    contact.localPointOther.set(contactPoint.get_m_localPointB().x(), contactPoint.get_m_localPointB().y(), contactPoint.get_m_localPointB().z());
    contact.point.set(contactPoint.getPositionWorldOnA().x(), contactPoint.getPositionWorldOnA().y(), contactPoint.getPositionWorldOnA().z());
    contact.pointOther.set(contactPoint.getPositionWorldOnB().x(), contactPoint.getPositionWorldOnB().y(), contactPoint.getPositionWorldOnB().z());
    contact.normal.set(contactPoint.get_m_normalWorldOnB().x(), contactPoint.get_m_normalWorldOnB().y(), contactPoint.get_m_normalWorldOnB().z());
    return contact;
  }, _createReverseContactPointFromAmmo:function(contactPoint) {
    var contact = this.contactPointPool.allocate();
    contact.localPointOther.set(contactPoint.get_m_localPointA().x(), contactPoint.get_m_localPointA().y(), contactPoint.get_m_localPointA().z());
    contact.localPoint.set(contactPoint.get_m_localPointB().x(), contactPoint.get_m_localPointB().y(), contactPoint.get_m_localPointB().z());
    contact.pointOther.set(contactPoint.getPositionWorldOnA().x(), contactPoint.getPositionWorldOnA().y(), contactPoint.getPositionWorldOnA().z());
    contact.point.set(contactPoint.getPositionWorldOnB().x(), contactPoint.getPositionWorldOnB().y(), contactPoint.getPositionWorldOnB().z());
    contact.normal.set(contactPoint.get_m_normalWorldOnB().x(), contactPoint.get_m_normalWorldOnB().y(), contactPoint.get_m_normalWorldOnB().z());
    return contact;
  }, _createSingleContactResult:function(a, b, contactPoint) {
    var result = this.singleContactResultPool.allocate();
    result.a = a;
    result.b = b;
    result.localPointA = contactPoint.localPoint;
    result.localPointB = contactPoint.localPointOther;
    result.pointA = contactPoint.point;
    result.pointB = contactPoint.pointOther;
    result.normal = contactPoint.normal;
    return result;
  }, _createContactResult:function(other, contacts) {
    var result = this.contactResultPool.allocate();
    result.other = other;
    result.contacts = contacts;
    return result;
  }, _cleanOldCollisions:function() {
    for (var guid in collisions) {
      if (collisions.hasOwnProperty(guid)) {
        var entity = collisions[guid].entity;
        var entityCollision = entity.collision;
        var others = collisions[guid].others;
        var length = others.length;
        var i = length;
        while (i--) {
          var other = others[i];
          if (!frameCollisions[guid] || frameCollisions[guid].others.indexOf(other) < 0) {
            others.splice(i, 1);
            if (entityCollision && other.collision) {
              if (entity.rigidbody && other.rigidbody) {
                entityCollision.fire("collisionend", other);
              } else {
                if (entity.trigger) {
                  entityCollision.fire("triggerleave", other);
                }
              }
            }
          }
        }
        if (others.length === 0) {
          delete collisions[guid];
        }
      }
    }
  }, onUpdate:function(dt) {
    this.dynamicsWorld.stepSimulation(dt, this.maxSubSteps, this.fixedTimeStep);
    var components = this.store;
    for (var id in components) {
      if (components.hasOwnProperty(id)) {
        var entity = components[id].entity;
        var componentData = components[id].data;
        if (componentData.body && componentData.body.isActive() && componentData.enabled && entity.enabled) {
          if (componentData.type === pc.BODYTYPE_DYNAMIC) {
            entity.rigidbody.syncBodyToEntity();
          } else {
            if (componentData.type === pc.BODYTYPE_KINEMATIC) {
              entity.rigidbody._updateKinematic(dt);
            }
          }
        }
      }
    }
    var dispatcher = this.dynamicsWorld.getDispatcher();
    var numManifolds = dispatcher.getNumManifolds();
    var i, j;
    frameCollisions = {};
    for (i = 0; i < numManifolds; i++) {
      var manifold = dispatcher.getManifoldByIndexInternal(i);
      var body0 = manifold.getBody0();
      var body1 = manifold.getBody1();
      var wb0 = Ammo.castObject(body0, Ammo.btRigidBody);
      var wb1 = Ammo.castObject(body1, Ammo.btRigidBody);
      var e0 = wb0.entity;
      var e1 = wb1.entity;
      if (!e0 || !e1) {
        continue;
      }
      var flags0 = body0.getCollisionFlags();
      var flags1 = body1.getCollisionFlags();
      var numContacts = manifold.getNumContacts();
      var forwardContacts = [];
      var reverseContacts = [];
      var newCollision, e0Events, e1Events;
      if (numContacts > 0) {
        if (flags0 & pc.BODYFLAG_NORESPONSE_OBJECT || flags1 & pc.BODYFLAG_NORESPONSE_OBJECT) {
          e0Events = e0.collision ? e0.collision.hasEvent("triggerenter") || e0.collision.hasEvent("triggerleave") : false;
          e1Events = e1.collision ? e1.collision.hasEvent("triggerenter") || e1.collision.hasEvent("triggerleave") : false;
          if (e0Events) {
            newCollision = this._storeCollision(e0, e1);
            if (newCollision) {
              if (e0.collision && !(flags1 & pc.BODYFLAG_NORESPONSE_OBJECT)) {
                e0.collision.fire("triggerenter", e1);
              }
            }
          }
          if (e1Events) {
            newCollision = this._storeCollision(e1, e0);
            if (newCollision) {
              if (e1.collision && !(flags0 & pc.BODYFLAG_NORESPONSE_OBJECT)) {
                e1.collision.fire("triggerenter", e0);
              }
            }
          }
        } else {
          e0Events = e0.collision ? e0.collision.hasEvent("collisionstart") || e0.collision.hasEvent("collisionend") || e0.collision.hasEvent("contact") : false;
          e1Events = e1.collision ? e1.collision.hasEvent("collisionstart") || e1.collision.hasEvent("collisionend") || e1.collision.hasEvent("contact") : false;
          var globalEvents = this.hasEvent("contact");
          if (globalEvents || e0Events || e1Events) {
            for (j = 0; j < numContacts; j++) {
              var btContactPoint = manifold.getContactPoint(j);
              var contactPoint = this._createContactPointFromAmmo(btContactPoint);
              var reverseContactPoint = null;
              if (e0Events || e1Events) {
                reverseContactPoint = this._createReverseContactPointFromAmmo(btContactPoint);
                forwardContacts.push(contactPoint);
                reverseContacts.push(reverseContactPoint);
              }
              if (globalEvents) {
                var result = this._createSingleContactResult(e0, e1, contactPoint);
                this.fire("contact", result);
              }
            }
            if (e0Events) {
              var forwardResult = this._createContactResult(e1, forwardContacts);
              if (e0.collision) {
                e0.collision.fire("contact", forwardResult);
              }
              newCollision = this._storeCollision(e0, e1);
              if (newCollision && e0.collision) {
                e0.collision.fire("collisionstart", forwardResult);
              }
            }
            if (e1Events) {
              var reverseResult = this._createContactResult(e0, reverseContacts);
              if (e1.collision) {
                e1.collision.fire("contact", reverseResult);
              }
              newCollision = this._storeCollision(e1, e0);
              if (newCollision && e1.collision) {
                e1.collision.fire("collisionstart", reverseResult);
              }
            }
          }
        }
      }
    }
    this._cleanOldCollisions();
    this.contactPointPool.freeAll();
    this.contactResultPool.freeAll();
    this.singleContactResultPool.freeAll();
  }});
  return {RIGIDBODY_TYPE_STATIC:"static", RIGIDBODY_TYPE_DYNAMIC:"dynamic", RIGIDBODY_TYPE_KINEMATIC:"kinematic", RIGIDBODY_CF_STATIC_OBJECT:1, RIGIDBODY_CF_KINEMATIC_OBJECT:2, RIGIDBODY_CF_NORESPONSE_OBJECT:4, RIGIDBODY_ACTIVE_TAG:1, RIGIDBODY_ISLAND_SLEEPING:2, RIGIDBODY_WANTS_DEACTIVATION:3, RIGIDBODY_DISABLE_DEACTIVATION:4, RIGIDBODY_DISABLE_SIMULATION:5, RigidBodyComponentSystem:RigidBodyComponentSystem};
}());
pc.extend(pc, function() {
  var RigidBodyComponentData = function() {
    this.enabled = true;
    this.mass = 1;
    this.linearDamping = 0;
    this.angularDamping = 0;
    this.linearFactor = new pc.Vec3(1, 1, 1);
    this.angularFactor = new pc.Vec3(1, 1, 1);
    this.friction = 0.5;
    this.restitution = 0;
    this.type = pc.BODYTYPE_STATIC;
    this.group = pc.BODYGROUP_STATIC;
    this.mask = pc.BODYMASK_NOT_STATIC;
    this.body = null;
    this.simulationEnabled = false;
  };
  RigidBodyComponentData = pc.inherits(RigidBodyComponentData, pc.ComponentData);
  return {RigidBodyComponentData:RigidBodyComponentData};
}());
pc.extend(pc, function() {
  var ammoVec1, ammoQuat;
  var Trigger = function Trigger(app, component, data) {
    this.entity = component.entity;
    this.component = component;
    this.app = app;
    if (typeof Ammo !== "undefined") {
      ammoVec1 = new Ammo.btVector3;
      ammoQuat = new Ammo.btQuaternion;
    }
    this.initialize(data);
  };
  Trigger.prototype = {initialize:function(data) {
    var entity = this.entity;
    var shape = data.shape;
    if (shape && typeof Ammo !== "undefined") {
      if (entity.trigger) {
        entity.trigger.destroy();
      }
      var mass = 1;
      var localInertia = new Ammo.btVector3(0, 0, 0);
      shape.calculateLocalInertia(mass, localInertia);
      var pos = entity.getPosition();
      var rot = entity.getRotation();
      ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
      var startTransform = new Ammo.btTransform;
      startTransform.setIdentity();
      startTransform.getOrigin().setValue(pos.x, pos.y, pos.z);
      startTransform.setRotation(ammoQuat);
      var motionState = new Ammo.btDefaultMotionState(startTransform);
      var bodyInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);
      var body = new Ammo.btRigidBody(bodyInfo);
      this.body = body;
      body.setRestitution(0);
      body.setFriction(0);
      body.setDamping(0, 0);
      ammoVec1.setValue(0, 0, 0);
      body.setLinearFactor(ammoVec1);
      body.setAngularFactor(ammoVec1);
      body.setCollisionFlags(body.getCollisionFlags() | pc.BODYFLAG_NORESPONSE_OBJECT);
      body.entity = entity;
      if (this.component.enabled && entity.enabled) {
        this.enable();
      }
    }
  }, destroy:function() {
    if (this.body) {
      this.app.systems.rigidbody.removeBody(this.body);
    }
  }, syncEntityToBody:function() {
    var body = this.body;
    if (body) {
      var position = this.entity.getPosition();
      var rotation = this.entity.getRotation();
      var transform = body.getWorldTransform();
      transform.getOrigin().setValue(position.x, position.y, position.z);
      ammoQuat.setValue(rotation.x, rotation.y, rotation.z, rotation.w);
      transform.setRotation(ammoQuat);
      body.activate();
    }
  }, enable:function() {
    var body = this.body;
    if (!body) {
      return;
    }
    this.app.systems.rigidbody.addBody(body, pc.BODYGROUP_TRIGGER, pc.BODYMASK_NOT_STATIC ^ pc.BODYGROUP_TRIGGER);
    body.forceActivationState(pc.BODYSTATE_ACTIVE_TAG);
    body.activate();
    this.syncEntityToBody();
  }, disable:function() {
    var body = this.body;
    if (!body) {
      return;
    }
    this.app.systems.rigidbody.removeBody(body);
    body.forceActivationState(pc.BODYSTATE_DISABLE_SIMULATION);
  }};
  return {Trigger:Trigger};
}());
pc.extend(pc, function() {
  var CollisionComponent = function CollisionComponent(system, entity) {
    this.on("set_type", this.onSetType, this);
    this.on("set_halfExtents", this.onSetHalfExtents, this);
    this.on("set_radius", this.onSetRadius, this);
    this.on("set_height", this.onSetHeight, this);
    this.on("set_axis", this.onSetAxis, this);
    this.on("set_asset", this.onSetAsset, this);
    this.on("set_model", this.onSetModel, this);
  };
  CollisionComponent = pc.inherits(CollisionComponent, pc.Component);
  pc.extend(CollisionComponent.prototype, {onSetType:function(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      this.system.changeType(this, oldValue, newValue);
    }
  }, onSetHalfExtents:function(name, oldValue, newValue) {
    if (this.data.initialized && this.data.type === "box") {
      this.system.recreatePhysicalShapes(this);
    }
  }, onSetRadius:function(name, oldValue, newValue) {
    if (this.data.initialized && (this.data.type === "sphere" || this.data.type === "capsule" || this.data.type === "cylinder")) {
      this.system.recreatePhysicalShapes(this);
    }
  }, onSetHeight:function(name, oldValue, newValue) {
    if (this.data.initialized && (this.data.type === "capsule" || this.data.type === "cylinder")) {
      this.system.recreatePhysicalShapes(this);
    }
  }, onSetAxis:function(name, oldValue, newValue) {
    if (this.data.initialized && (this.data.type === "capsule" || this.data.type === "cylinder")) {
      this.system.recreatePhysicalShapes(this);
    }
  }, onSetAsset:function(name, oldValue, newValue) {
    var asset;
    var assets = this.system.app.assets;
    if (oldValue) {
      asset = assets.get(oldValue);
      if (asset) {
        asset.off("remove", this.onAssetRemoved, this);
      }
    }
    if (newValue) {
      if (newValue instanceof pc.Asset) {
        this.data.asset = newValue.id;
      }
      asset = assets.get(this.data.asset);
      if (asset) {
        asset.off("remove", this.onAssetRemoved, this);
        asset.on("remove", this.onAssetRemoved, this);
      }
    }
    if (this.data.initialized && this.data.type === "mesh") {
      if (!newValue) {
        this.data.model = null;
      }
      this.system.recreatePhysicalShapes(this);
    }
  }, onSetModel:function(name, oldValue, newValue) {
    if (this.data.initialized && this.data.type === "mesh") {
      this.system.implementations.mesh.doRecreatePhysicalShape(this);
    }
  }, onAssetRemoved:function(asset) {
    asset.off("remove", this.onAssetRemoved, this);
    if (this.data.asset === asset.id) {
      this.asset = null;
    }
  }, onEnable:function() {
    CollisionComponent._super.onEnable.call(this);
    if (this.data.type === "mesh" && this.data.asset && this.data.initialized) {
      var asset = this.system.app.assets.get(this.data.asset);
      if (asset && (!asset.resource || !this.data.shape)) {
        this.system.recreatePhysicalShapes(this);
        return;
      }
    }
    if (this.entity.trigger) {
      this.entity.trigger.enable();
    } else {
      if (this.entity.rigidbody) {
        if (this.entity.rigidbody.enabled) {
          this.entity.rigidbody.enableSimulation();
        }
      }
    }
  }, onDisable:function() {
    CollisionComponent._super.onDisable.call(this);
    if (this.entity.trigger) {
      this.entity.trigger.disable();
    } else {
      if (this.entity.rigidbody) {
        this.entity.rigidbody.disableSimulation();
      }
    }
  }});
  return {CollisionComponent:CollisionComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "type", "halfExtents", "radius", "axis", "height", "asset", "shape", "model"];
  var CollisionComponentSystem = function CollisionComponentSystem(app) {
    this.id = "collision";
    this.description = "Specifies a collision volume.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.CollisionComponent;
    this.DataType = pc.CollisionComponentData;
    this.schema = _schema;
    this.implementations = {};
    this.on("remove", this.onRemove, this);
    pc.ComponentSystem.on("update", this.onUpdate, this);
  };
  CollisionComponentSystem = pc.inherits(CollisionComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.CollisionComponent.prototype, _schema);
  CollisionComponentSystem.prototype = pc.extend(CollisionComponentSystem.prototype, {onLibraryLoaded:function() {
    if (typeof Ammo !== "undefined") {
    } else {
      pc.ComponentSystem.off("update", this.onUpdate, this);
    }
  }, initializeComponentData:function(component, _data, properties) {
    var idx;
    var data = {};
    properties = ["type", "halfExtents", "radius", "axis", "height", "shape", "model", "asset", "enabled"];
    properties.forEach(function(prop) {
      data[prop] = _data[prop];
    });
    if (_data.hasOwnProperty("asset")) {
      idx = properties.indexOf("model");
      if (idx !== -1) {
        properties.splice(idx, 1);
      }
    } else {
      if (_data.hasOwnProperty("model")) {
        idx = properties.indexOf("asset");
        if (idx !== -1) {
          properties.splice(idx, 1);
        }
      }
    }
    if (!data.type) {
      data.type = component.data.type;
    }
    component.data.type = data.type;
    if (data.halfExtents && pc.type(data.halfExtents) === "array") {
      data.halfExtents = new pc.Vec3(data.halfExtents[0], data.halfExtents[1], data.halfExtents[2]);
    }
    var impl = this._createImplementation(data.type);
    impl.beforeInitialize(component, data);
    CollisionComponentSystem._super.initializeComponentData.call(this.system, component, data, properties);
    impl.afterInitialize(component, data);
  }, _createImplementation:function(type) {
    if (this.implementations[type] === undefined) {
      var impl;
      switch(type) {
        case "box":
          impl = new CollisionBoxSystemImpl(this);
          break;
        case "sphere":
          impl = new CollisionSphereSystemImpl(this);
          break;
        case "capsule":
          impl = new CollisionCapsuleSystemImpl(this);
          break;
        case "cylinder":
          impl = new CollisionCylinderSystemImpl(this);
          break;
        case "mesh":
          impl = new CollisionMeshSystemImpl(this);
          break;
        default:
          throw "Invalid collision system type: " + type;
      }
      this.implementations[type] = impl;
    }
    return this.implementations[type];
  }, _getImplementation:function(entity) {
    return this.implementations[entity.collision.data.type];
  }, cloneComponent:function(entity, clone) {
    return this._getImplementation(entity).clone(entity, clone);
  }, onRemove:function(entity, data) {
    this.implementations[data.type].remove(entity, data);
  }, onUpdate:function(dt) {
    var id, entity, data;
    var components = this.store;
    for (id in components) {
      entity = components[id].entity;
      data = components[id].data;
      if (data.enabled && entity.enabled) {
        if (!entity.rigidbody && entity.trigger) {
          entity.trigger.syncEntityToBody();
        }
      }
    }
  }, onTransformChanged:function(component, position, rotation, scale) {
    this.implementations[component.data.type].updateTransform(component, position, rotation, scale);
  }, changeType:function(component, previousType, newType) {
    this.implementations[previousType].remove(component.entity, component.data);
    this._createImplementation(newType).reset(component, component.data);
  }, recreatePhysicalShapes:function(component) {
    this.implementations[component.data.type].recreatePhysicalShapes(component);
  }});
  var CollisionSystemImpl = function(system) {
    this.system = system;
  };
  CollisionSystemImpl.prototype = {beforeInitialize:function(component, data) {
    data.shape = this.createPhysicalShape(component.entity, data);
    data.model = new pc.Model;
    data.model.graph = new pc.GraphNode;
  }, afterInitialize:function(component, data) {
    this.recreatePhysicalShapes(component);
    component.data.initialized = true;
  }, reset:function(component, data) {
    this.beforeInitialize(component, data);
    this.afterInitialize(component, data);
  }, recreatePhysicalShapes:function(component) {
    var entity = component.entity;
    var data = component.data;
    if (typeof Ammo !== "undefined") {
      data.shape = this.createPhysicalShape(component.entity, data);
      if (entity.rigidbody) {
        entity.rigidbody.disableSimulation();
        entity.rigidbody.createBody();
      } else {
        if (!entity.trigger) {
          entity.trigger = new pc.Trigger(this.system.app, component, data);
        } else {
          entity.trigger.initialize(data);
        }
      }
    }
  }, createPhysicalShape:function(entity, data) {
    return undefined;
  }, updateTransform:function(component, position, rotation, scale) {
    if (component.entity.trigger) {
      component.entity.trigger.syncEntityToBody();
    }
  }, remove:function(entity, data) {
    var app = this.system.app;
    if (entity.rigidbody && entity.rigidbody.body) {
      app.systems.rigidbody.removeBody(entity.rigidbody.body);
      entity.rigidbody.disableSimulation();
    }
    if (entity.trigger) {
      entity.trigger.destroy();
      delete entity.trigger;
    }
    if (app.scene.containsModel(data.model)) {
      app.root.removeChild(data.model.graph);
      app.scene.removeModel(data.model);
    }
  }, clone:function(entity, clone) {
    var src = this.system.dataStore[entity._guid];
    var data = {enabled:src.data.enabled, type:src.data.type, halfExtents:[src.data.halfExtents.x, src.data.halfExtents.y, src.data.halfExtents.z], radius:src.data.radius, axis:src.data.axis, height:src.data.height, asset:src.data.asset, model:src.data.model};
    return this.system.addComponent(clone, data);
  }};
  var CollisionBoxSystemImpl = function(system) {
  };
  CollisionBoxSystemImpl = pc.inherits(CollisionBoxSystemImpl, CollisionSystemImpl);
  CollisionBoxSystemImpl.prototype = pc.extend(CollisionBoxSystemImpl.prototype, {createPhysicalShape:function(entity, data) {
    if (typeof Ammo !== "undefined") {
      var he = data.halfExtents;
      var ammoHe = new Ammo.btVector3(he ? he.x : 0.5, he ? he.y : 0.5, he ? he.z : 0.5);
      return new Ammo.btBoxShape(ammoHe);
    } else {
      return undefined;
    }
  }});
  var CollisionSphereSystemImpl = function(system) {
  };
  CollisionSphereSystemImpl = pc.inherits(CollisionSphereSystemImpl, CollisionSystemImpl);
  CollisionSphereSystemImpl.prototype = pc.extend(CollisionSphereSystemImpl.prototype, {createPhysicalShape:function(entity, data) {
    if (typeof Ammo !== "undefined") {
      return new Ammo.btSphereShape(data.radius);
    } else {
      return undefined;
    }
  }});
  var CollisionCapsuleSystemImpl = function(system) {
  };
  CollisionCapsuleSystemImpl = pc.inherits(CollisionCapsuleSystemImpl, CollisionSystemImpl);
  CollisionCapsuleSystemImpl.prototype = pc.extend(CollisionCapsuleSystemImpl.prototype, {createPhysicalShape:function(entity, data) {
    var shape = null;
    var axis = data.axis !== undefined ? data.axis : 1;
    var radius = data.radius || 0.5;
    var height = Math.max((data.height || 2) - 2 * radius, 0);
    if (typeof Ammo !== "undefined") {
      switch(axis) {
        case 0:
          shape = new Ammo.btCapsuleShapeX(radius, height);
          break;
        case 1:
          shape = new Ammo.btCapsuleShape(radius, height);
          break;
        case 2:
          shape = new Ammo.btCapsuleShapeZ(radius, height);
          break;
      }
    }
    return shape;
  }});
  var CollisionCylinderSystemImpl = function(system) {
  };
  CollisionCylinderSystemImpl = pc.inherits(CollisionCylinderSystemImpl, CollisionSystemImpl);
  CollisionCylinderSystemImpl.prototype = pc.extend(CollisionCylinderSystemImpl.prototype, {createPhysicalShape:function(entity, data) {
    var halfExtents = null;
    var shape = null;
    var axis = data.axis !== undefined ? data.axis : 1;
    var radius = data.radius !== undefined ? data.radius : 0.5;
    var height = data.height !== undefined ? data.height : 1;
    if (typeof Ammo !== "undefined") {
      switch(axis) {
        case 0:
          halfExtents = new Ammo.btVector3(height * 0.5, radius, radius);
          shape = new Ammo.btCylinderShapeX(halfExtents);
          break;
        case 1:
          halfExtents = new Ammo.btVector3(radius, height * 0.5, radius);
          shape = new Ammo.btCylinderShape(halfExtents);
          break;
        case 2:
          halfExtents = new Ammo.btVector3(radius, radius, height * 0.5);
          shape = new Ammo.btCylinderShapeZ(halfExtents);
          break;
      }
    }
    return shape;
  }});
  var CollisionMeshSystemImpl = function(system) {
  };
  CollisionMeshSystemImpl = pc.inherits(CollisionMeshSystemImpl, CollisionSystemImpl);
  CollisionMeshSystemImpl.prototype = pc.extend(CollisionMeshSystemImpl.prototype, {beforeInitialize:function(component, data) {
  }, createPhysicalShape:function(entity, data) {
    if (typeof Ammo !== "undefined" && data.model) {
      var model = data.model;
      var shape = new Ammo.btCompoundShape;
      var i, j;
      for (i = 0; i < model.meshInstances.length; i++) {
        var meshInstance = model.meshInstances[i];
        var mesh = meshInstance.mesh;
        var ib = mesh.indexBuffer[pc.RENDERSTYLE_SOLID];
        var vb = mesh.vertexBuffer;
        var format = vb.getFormat();
        var stride = format.size / 4;
        var positions;
        for (j = 0; j < format.elements.length; j++) {
          var element = format.elements[j];
          if (element.name === pc.SEMANTIC_POSITION) {
            positions = new Float32Array(vb.lock(), element.offset);
          }
        }
        var indices = new Uint16Array(ib.lock());
        var numTriangles = mesh.primitive[0].count / 3;
        var v1 = new Ammo.btVector3;
        var v2 = new Ammo.btVector3;
        var v3 = new Ammo.btVector3;
        var i1, i2, i3;
        var base = mesh.primitive[0].base;
        var triMesh = new Ammo.btTriangleMesh;
        for (j = 0; j < numTriangles; j++) {
          i1 = indices[base + j * 3] * stride;
          i2 = indices[base + j * 3 + 1] * stride;
          i3 = indices[base + j * 3 + 2] * stride;
          v1.setValue(positions[i1], positions[i1 + 1], positions[i1 + 2]);
          v2.setValue(positions[i2], positions[i2 + 1], positions[i2 + 2]);
          v3.setValue(positions[i3], positions[i3 + 1], positions[i3 + 2]);
          triMesh.addTriangle(v1, v2, v3, true);
        }
        var useQuantizedAabbCompression = true;
        var triMeshShape = new Ammo.btBvhTriangleMeshShape(triMesh, useQuantizedAabbCompression);
        var wtm = meshInstance.node.getWorldTransform();
        var scl = wtm.getScale();
        triMeshShape.setLocalScaling(new Ammo.btVector3(scl.x, scl.y, scl.z));
        var pos = meshInstance.node.getPosition();
        var rot = meshInstance.node.getRotation();
        var transform = new Ammo.btTransform;
        transform.setIdentity();
        transform.getOrigin().setValue(pos.x, pos.y, pos.z);
        var ammoQuat = new Ammo.btQuaternion;
        ammoQuat.setValue(rot.x, rot.y, rot.z, rot.w);
        transform.setRotation(ammoQuat);
        shape.addChildShape(transform, triMeshShape);
      }
      var entityTransform = entity.getWorldTransform();
      var scale = entityTransform.getScale();
      var vec = new Ammo.btVector3;
      vec.setValue(scale.x, scale.y, scale.z);
      shape.setLocalScaling(vec);
      return shape;
    } else {
      return undefined;
    }
  }, recreatePhysicalShapes:function(component) {
    var data = component.data;
    if (data.asset !== null && component.enabled && component.entity.enabled) {
      this.loadModelAsset(component);
    } else {
      this.doRecreatePhysicalShape(component);
    }
  }, loadModelAsset:function(component) {
    var self = this;
    var id = component.data.asset;
    var data = component.data;
    var assets = this.system.app.assets;
    var asset = assets.get(id);
    if (asset) {
      asset.ready(function(asset) {
        data.model = asset.resource;
        self.doRecreatePhysicalShape(component);
      });
      assets.load(asset);
    } else {
      assets.once("add:" + id, function(asset) {
        asset.ready(function(asset) {
          data.model = asset.resource;
          self.doRecreatePhysicalShape(component);
        });
        assets.load(asset);
      });
    }
  }, doRecreatePhysicalShape:function(component) {
    var entity = component.entity;
    var data = component.data;
    if (data.model) {
      if (data.shape) {
        Ammo.destroy(data.shape);
      }
      data.shape = this.createPhysicalShape(entity, data);
      if (entity.rigidbody) {
        entity.rigidbody.createBody();
      } else {
        if (!entity.trigger) {
          entity.trigger = new pc.Trigger(this.system.app, component, data);
        } else {
          entity.trigger.initialize(data);
        }
      }
    } else {
      this.remove(entity, data);
    }
  }, updateTransform:function(component, position, rotation, scale) {
    if (component.shape) {
      var entityTransform = component.entity.getWorldTransform();
      var worldScale = entityTransform.getScale();
      var previousScale = component.shape.getLocalScaling();
      if (worldScale.x !== previousScale.x() || worldScale.y !== previousScale.y() || worldScale.z !== previousScale.z()) {
        this.doRecreatePhysicalShape(component);
      }
    }
    CollisionMeshSystemImpl._super.updateTransform.call(this, component, position, rotation, scale);
  }});
  return {CollisionComponentSystem:CollisionComponentSystem};
}());
pc.extend(pc, function() {
  var CollisionComponentData = function() {
    this.enabled = true;
    this.type = "box";
    this.halfExtents = new pc.Vec3(0.5, 0.5, 0.5);
    this.radius = 0.5;
    this.axis = 1;
    this.height = 2;
    this.asset = null;
    this.shape = null;
    this.model = null;
    this.initialized = false;
  };
  CollisionComponentData = pc.inherits(CollisionComponentData, pc.ComponentData);
  return {CollisionComponentData:CollisionComponentData};
}());
pc.extend(pc, function() {
  var SIMPLE_PROPERTIES = ["emitterExtents", "emitterRadius", "loop", "initialVelocity", "animSpeed", "normalMap"];
  var COMPLEX_PROPERTIES = ["numParticles", "lifetime", "rate", "rate2", "startAngle", "startAngle2", "lighting", "halfLambert", "intensity", "wrap", "wrapBounds", "depthWrite", "noFog", "sort", "stretch", "alignToMotion", "preWarm", "emitterShape", "animTilesX", "animTilesY", "animFrames", "animLoop", "colorMap", "localSpace"];
  var GRAPH_PROPERTIES = ["scaleGraph", "scaleGraph2", "colorGraph", "colorGraph2", "alphaGraph", "alphaGraph2", "velocityGraph", "velocityGraph2", "localVelocityGraph", "localVelocityGraph2", "rotationSpeedGraph", "rotationSpeedGraph2"];
  var ASSET_PROPERTIES = ["colorMapAsset", "normalMapAsset", "mesh"];
  var depthLayer;
  var ParticleSystemComponent = function ParticleSystemComponent(system, entity) {
    this.on("set_colorMapAsset", this.onSetColorMapAsset, this);
    this.on("set_normalMapAsset", this.onSetNormalMapAsset, this);
    this.on("set_mesh", this.onSetMesh, this);
    this.on("set_loop", this.onSetLoop, this);
    this.on("set_blendType", this.onSetBlendType, this);
    this.on("set_depthSoftening", this.onSetDepthSoftening, this);
    this.on("set_layers", this.onSetLayers, this);
    SIMPLE_PROPERTIES.forEach(function(prop) {
      this.on("set_" + prop, this.onSetSimpleProperty, this);
    }.bind(this));
    COMPLEX_PROPERTIES.forEach(function(prop) {
      this.on("set_" + prop, this.onSetComplexProperty, this);
    }.bind(this));
    GRAPH_PROPERTIES.forEach(function(prop) {
      this.on("set_" + prop, this.onSetGraphProperty, this);
    }.bind(this));
    this._requestedDepth = false;
  };
  ParticleSystemComponent = pc.inherits(ParticleSystemComponent, pc.Component);
  pc.extend(ParticleSystemComponent.prototype, {addModelToLayers:function() {
    if (!this.data.model) {
      return;
    }
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.addMeshInstances(this.data.model.meshInstances);
      this.emitter._layer = layer;
    }
  }, removeModelFromLayers:function(model) {
    if (!this.data.model) {
      return;
    }
    var layer;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.removeMeshInstances(this.data.model.meshInstances);
    }
  }, onSetLayers:function(name, oldValue, newValue) {
    if (!this.data.model) {
      return;
    }
    var i, layer;
    for (i = 0; i < oldValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(oldValue[i]);
      if (!layer) {
        continue;
      }
      layer.removeMeshInstances(this.data.model.meshInstances);
    }
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    for (i = 0; i < newValue.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(newValue[i]);
      if (!layer) {
        continue;
      }
      layer.addMeshInstances(this.data.model.meshInstances);
    }
  }, onLayersChanged:function(oldComp, newComp) {
    this.addModelToLayers();
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
  }, onLayerAdded:function(layer) {
    if (!this.data.model) {
      return;
    }
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.addMeshInstances(this.data.model.meshInstances);
  }, onLayerRemoved:function(layer) {
    if (!this.data.model) {
      return;
    }
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.removeMeshInstances(this.data.model.meshInstances);
  }, onSetColorMapAsset:function(name, oldValue, newValue) {
    var self = this;
    var asset;
    var assets = this.system.app.assets;
    if (oldValue) {
      asset = assets.get(oldValue);
      if (asset) {
        asset.off("remove", this.onColorMapRemoved, this);
      }
    }
    if (newValue) {
      if (newValue instanceof pc.Asset) {
        this.data.colorMapAsset = newValue.id;
        newValue = newValue.id;
      }
      asset = assets.get(newValue);
      if (asset) {
        asset.on("remove", this.onColorMapRemoved, this);
        asset.ready(function(asset) {
          self.colorMap = asset.resource;
        });
        if (self.enabled && self.entity.enabled) {
          assets.load(asset);
        }
      } else {
        assets.once("add:" + newValue, function(asset) {
          asset.on("remove", this.onColorMapRemoved, this);
          asset.ready(function(asset) {
            self.colorMap = asset.resource;
          });
          if (self.enabled && self.entity.enabled) {
            assets.load(asset);
          }
        });
      }
    } else {
      this.colorMap = null;
    }
  }, onColorMapRemoved:function(asset) {
    asset.off("remove", this.onColorMapRemoved, this);
    this.colorMapAsset = null;
  }, onSetNormalMapAsset:function(name, oldValue, newValue) {
    var self = this;
    var asset;
    var assets = this.system.app.assets;
    if (oldValue) {
      asset = assets.get(oldValue);
      if (asset) {
        asset.off("remove", this.onNormalMapRemoved, this);
      }
    }
    if (newValue) {
      if (newValue instanceof pc.Asset) {
        this.data.normalMapAsset = newValue.id;
        newValue = newValue.id;
      }
      asset = assets.get(newValue);
      if (asset) {
        asset.on("remove", this.onNormalMapRemoved, this);
        asset.ready(function(asset) {
          self.normalMap = asset.resource;
        });
        if (self.enabled && self.entity.enabled) {
          assets.load(asset);
        }
      } else {
        assets.once("add:" + newValue, function(asset) {
          asset.on("remove", this.onNormalMapRemoved, this);
          asset.ready(function(asset) {
            self.normalMap = asset.resource;
          });
          if (self.enabled && self.entity.enabled) {
            assets.load(asset);
          }
        });
      }
    } else {
      this.normalMap = null;
    }
  }, onNormalMapRemoved:function(asset) {
    asset.off("remove", this.onNormalMapRemoved, this);
    this.normalMapAsset = null;
  }, onSetMesh:function(name, oldValue, newValue) {
    var self = this;
    var asset;
    var assets = this.system.app.assets;
    if (oldValue && typeof oldValue === "number") {
      asset = assets.get(oldValue);
      if (asset) {
        asset.off("remove", this.onMeshRemoved, this);
      }
    }
    if (newValue) {
      if (newValue instanceof pc.Asset) {
        this.data.mesh = newValue.id;
        newValue = newValue.id;
      }
      if (typeof newValue === "number") {
        asset = assets.get(newValue);
        if (asset) {
          asset.on("remove", this.onMeshRemoved, this);
          asset.ready(function(asset) {
            self._onMeshChanged(asset.resource);
          });
          if (self.enabled && self.entity.enabled) {
            assets.load(asset);
          }
        } else {
          assets.once("add:" + newValue, function(asset) {
            asset.on("remove", this.onMeshRemoved, this);
            asset.ready(function(asset) {
              self._onMeshChanged(asset.resource);
            });
            if (self.enabled && self.entity.enabled) {
              assets.load(asset);
            }
          });
        }
      } else {
        this._onMeshChanged(newValue);
      }
    } else {
      this._onMeshChanged(null);
    }
  }, _onMeshChanged:function(mesh) {
    if (mesh && !(mesh instanceof pc.Mesh)) {
      if (mesh.meshInstances[0]) {
        mesh = mesh.meshInstances[0].mesh;
      } else {
        mesh = null;
      }
    }
    this.data.mesh = mesh;
    if (this.emitter) {
      this.emitter.mesh = mesh;
      this.emitter.resetMaterial();
      this.rebuild();
    }
  }, onMeshRemoved:function(asset) {
    asset.off("remove", this.onMeshRemoved, this);
    this.mesh = null;
  }, onSetLoop:function(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.resetTime();
    }
  }, onSetBlendType:function(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.material.blendType = newValue;
      this.emitter.resetMaterial();
      this.rebuild();
    }
  }, _requestDepth:function() {
    if (this._requestedDepth) {
      return;
    }
    if (!depthLayer) {
      depthLayer = this.system.app.scene.layers.getLayerById(pc.LAYERID_DEPTH);
    }
    if (depthLayer) {
      depthLayer.incrementCounter();
      this._requestedDepth = true;
    }
  }, _releaseDepth:function() {
    if (!this._requestedDepth) {
      return;
    }
    if (depthLayer) {
      depthLayer.decrementCounter();
      this._requestedDepth = false;
    }
  }, onSetDepthSoftening:function(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (newValue) {
        if (this.enabled && this.entity.enabled) {
          this._requestDepth();
        }
        if (this.emitter) {
          this.emitter[name] = newValue;
        }
      } else {
        if (this.enabled && this.entity.enabled) {
          this._releaseDepth();
        }
        if (this.emitter) {
          this.emitter[name] = newValue;
        }
      }
      if (this.emitter) {
        this.reset();
        this.emitter.resetMaterial();
        this.rebuild();
      }
    }
  }, onSetSimpleProperty:function(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.resetMaterial();
    }
  }, onSetComplexProperty:function(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.reset();
      this.emitter.resetMaterial();
      this.rebuild();
    }
  }, onSetGraphProperty:function(name, oldValue, newValue) {
    if (this.emitter) {
      this.emitter[name] = newValue;
      this.emitter.rebuildGraphs();
      this.emitter.resetMaterial();
    }
  }, onEnable:function() {
    for (var i = 0, len = ASSET_PROPERTIES.length; i < len; i++) {
      var asset = this.data[ASSET_PROPERTIES[i]];
      if (asset) {
        if (!(asset instanceof pc.Asset)) {
          var id = parseInt(asset, 10);
          if (id >= 0) {
            asset = this.system.app.assets.get(asset);
          } else {
            continue;
          }
        }
        if (asset && !asset.resource) {
          this.system.app.assets.load(asset);
        }
      }
    }
    var firstRun = false;
    if (!this.emitter) {
      var mesh = this.data.mesh;
      if (!(mesh instanceof pc.Mesh)) {
        mesh = null;
      }
      firstRun = true;
      this.emitter = new pc.ParticleEmitter(this.system.app.graphicsDevice, {numParticles:this.data.numParticles, emitterExtents:this.data.emitterExtents, emitterRadius:this.data.emitterRadius, emitterShape:this.data.emitterShape, initialVelocity:this.data.initialVelocity, wrap:this.data.wrap, localSpace:this.data.localSpace, wrapBounds:this.data.wrapBounds, lifetime:this.data.lifetime, rate:this.data.rate, rate2:this.data.rate2, animTilesX:this.data.animTilesX, animTilesY:this.data.animTilesY, animNumFrames:this.data.animNumFrames, 
      animSpeed:this.data.animSpeed, animLoop:this.data.animLoop, startAngle:this.data.startAngle, startAngle2:this.data.startAngle2, scaleGraph:this.data.scaleGraph, scaleGraph2:this.data.scaleGraph2, colorGraph:this.data.colorGraph, colorGraph2:this.data.colorGraph2, alphaGraph:this.data.alphaGraph, alphaGraph2:this.data.alphaGraph2, localVelocityGraph:this.data.localVelocityGraph, localVelocityGraph2:this.data.localVelocityGraph2, velocityGraph:this.data.velocityGraph, velocityGraph2:this.data.velocityGraph2, 
      rotationSpeedGraph:this.data.rotationSpeedGraph, rotationSpeedGraph2:this.data.rotationSpeedGraph2, colorMap:this.data.colorMap, normalMap:this.data.normalMap, loop:this.data.loop, preWarm:this.data.preWarm, sort:this.data.sort, stretch:this.data.stretch, alignToMotion:this.data.alignToMotion, lighting:this.data.lighting, halfLambert:this.data.halfLambert, intensity:this.data.intensity, depthSoftening:this.data.depthSoftening, scene:this.system.app.scene, mesh:mesh, depthWrite:this.data.depthWrite, 
      noFog:this.data.noFog, node:this.entity, blendType:this.data.blendType});
      this.emitter.meshInstance.node = this.entity;
      this.psys = new pc.Model;
      this.psys.graph = this.entity;
      this.psys.emitter = this.emitter;
      this.psys.meshInstances = [this.emitter.meshInstance];
      this.data.model = this.psys;
      this.emitter.psys = this.psys;
      if (!this.data.autoPlay) {
        this.pause();
        this.emitter.meshInstance.visible = false;
      }
    }
    if (this.data.model && this.emitter.colorMap) {
      this.addModelToLayers();
    }
    this.system.app.scene.on("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this.onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this.onLayerRemoved, this);
    }
    if (this.enabled && this.entity.enabled) {
      this._requestDepth();
    }
    ParticleSystemComponent._super.onEnable.call(this);
  }, onDisable:function() {
    ParticleSystemComponent._super.onDisable.call(this);
    this.system.app.scene.off("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this.onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this.onLayerRemoved, this);
    }
    if (this.data.model) {
      this.removeModelFromLayers();
      if (this.data.depthSoftening) {
        this._releaseDepth();
      }
    }
  }, reset:function() {
    if (this.emitter) {
      this.emitter.reset();
    }
  }, stop:function() {
    if (this.emitter) {
      this.emitter.loop = false;
      this.emitter.resetTime();
      this.emitter.addTime(0, true);
    }
  }, pause:function() {
    this.data.paused = true;
  }, unpause:function() {
    this.data.paused = false;
  }, play:function() {
    this.data.paused = false;
    if (this.emitter) {
      this.emitter.meshInstance.visible = true;
      this.emitter.loop = this.data.loop;
      this.emitter.resetTime();
    }
  }, isPlaying:function() {
    if (this.data.paused) {
      return false;
    } else {
      if (this.emitter && this.emitter.loop) {
        return true;
      } else {
        return Date.now() <= this.emitter.endTime;
      }
    }
  }, rebuild:function() {
    var enabled = this.enabled;
    this.enabled = false;
    if (this.emitter) {
      this.emitter.rebuild();
      this.emitter.meshInstance.node = this.entity;
      this.data.model.meshInstances = [this.emitter.meshInstance];
    }
    this.enabled = enabled;
  }});
  return {ParticleSystemComponent:ParticleSystemComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled", "autoPlay", "numParticles", "lifetime", "rate", "rate2", "startAngle", "startAngle2", "loop", "preWarm", "lighting", "halfLambert", "intensity", "depthWrite", "noFog", "depthSoftening", "sort", "blendType", "stretch", "alignToMotion", "emitterShape", "emitterExtents", "emitterRadius", "initialVelocity", "wrap", "wrapBounds", "localSpace", "colorMapAsset", "normalMapAsset", "mesh", "localVelocityGraph", "localVelocityGraph2", "velocityGraph", "velocityGraph2", "rotationSpeedGraph", 
  "rotationSpeedGraph2", "scaleGraph", "scaleGraph2", "colorGraph", "colorGraph2", "alphaGraph", "alphaGraph2", "colorMap", "normalMap", "animTilesX", "animTilesY", "animNumFrames", "animSpeed", "animLoop", "layers"];
  var ParticleSystemComponentSystem = function ParticleSystemComponentSystem(app) {
    this.id = "particlesystem";
    this.description = "Updates and renders particle system in the scene.";
    app.systems.add(this.id, this);
    this.ComponentType = pc.ParticleSystemComponent;
    this.DataType = pc.ParticleSystemComponentData;
    this.schema = _schema;
    this.propertyTypes = {emitterExtents:"vec3", wrapBounds:"vec3", localVelocityGraph:"curveset", localVelocityGraph2:"curveset", velocityGraph:"curveset", velocityGraph2:"curveset", colorGraph:"curveset", colorGraph2:"curveset", alphaGraph:"curve", alphaGraph2:"curve", rotationSpeedGraph:"curve", rotationSpeedGraph2:"curve", scaleGraph:"curve", scaleGraph2:"curve"};
    this.on("beforeremove", this.onRemove, this);
    pc.ComponentSystem.on("update", this.onUpdate, this);
  };
  ParticleSystemComponentSystem = pc.inherits(ParticleSystemComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ParticleSystemComponent.prototype, _schema);
  pc.extend(ParticleSystemComponentSystem.prototype, {initializeComponentData:function(component, _data, properties) {
    var data = {};
    properties = [];
    var types = this.propertyTypes;
    var type;
    for (var prop in _data) {
      if (_data.hasOwnProperty(prop)) {
        properties.push(prop);
        data[prop] = _data[prop];
      }
      if (types[prop] === "vec3") {
        if (pc.type(data[prop]) === "array") {
          data[prop] = new pc.Vec3(data[prop][0], data[prop][1], data[prop][2]);
        }
      } else {
        if (types[prop] === "curve") {
          if (!(data[prop] instanceof pc.Curve)) {
            type = data[prop].type;
            data[prop] = new pc.Curve(data[prop].keys);
            data[prop].type = type;
          }
        } else {
          if (types[prop] === "curveset") {
            if (!(data[prop] instanceof pc.CurveSet)) {
              type = data[prop].type;
              data[prop] = new pc.CurveSet(data[prop].keys);
              data[prop].type = type;
            }
          }
        }
      }
      if (data.layers && pc.type(data.layers) === "array") {
        data.layers = data.layers.slice(0);
      }
    }
    ParticleSystemComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, cloneComponent:function(entity, clone) {
    var source = entity.particlesystem.data;
    var schema = this.schema;
    var data = {};
    for (var i = 0, len = schema.length; i < len; i++) {
      var prop = schema[i];
      var sourceProp = source[prop];
      if (sourceProp instanceof pc.Vec3 || sourceProp instanceof pc.Curve || sourceProp instanceof pc.CurveSet) {
        sourceProp = sourceProp.clone();
        data[prop] = sourceProp;
      } else {
        if (prop === "layers") {
          data.layers = source.layers.slice(0);
        } else {
          if (sourceProp !== null && sourceProp !== undefined) {
            data[prop] = sourceProp;
          }
        }
      }
    }
    return this.addComponent(clone, data);
  }, onUpdate:function(dt) {
    var components = this.store;
    var numSteps, i, j, c;
    var stats = this.app.stats.particles;
    for (var id in components) {
      if (components.hasOwnProperty(id)) {
        c = components[id];
        var entity = c.entity;
        var data = c.data;
        if (data.enabled && entity.enabled) {
          var emitter = data.model.emitter;
          if (!emitter.meshInstance.visible) {
            continue;
          }
          if (emitter.lighting) {
            var layer, lightCube;
            var layers = data.layers;
            for (i = 0; i < layers.length; i++) {
              layer = this.app.scene.layers.getLayerById(layers[i]);
              if (!layer) {
                continue;
              }
              if (!layer._lightCube) {
                layer._lightCube = new Float32Array(6 * 3);
              }
              lightCube = layer._lightCube;
              for (i = 0; i < 6; i++) {
                lightCube[i * 3] = this.app.scene.ambientLight.data[0];
                lightCube[i * 3 + 1] = this.app.scene.ambientLight.data[1];
                lightCube[i * 3 + 2] = this.app.scene.ambientLight.data[2];
              }
              var dirs = layer._sortedLights[pc.LIGHTTYPE_DIRECTIONAL];
              for (j = 0; j < dirs.length; j++) {
                for (c = 0; c < 6; c++) {
                  var weight = Math.max(emitter.lightCubeDir[c].dot(dirs[j]._direction), 0) * dirs[j]._intensity;
                  lightCube[c * 3] += dirs[j]._color.data[0] * weight;
                  lightCube[c * 3 + 1] += dirs[j]._color.data[1] * weight;
                  lightCube[c * 3 + 2] += dirs[j]._color.data[2] * weight;
                }
              }
            }
            emitter.constantLightCube.setValue(lightCube);
          }
          if (!data.paused) {
            emitter.simTime += dt;
            numSteps = 0;
            if (emitter.simTime > emitter.fixedTimeStep) {
              numSteps = Math.floor(emitter.simTime / emitter.fixedTimeStep);
              emitter.simTime -= numSteps * emitter.fixedTimeStep;
            }
            if (numSteps) {
              numSteps = Math.min(numSteps, emitter.maxSubSteps);
              for (i = 0; i < numSteps; i++) {
                emitter.addTime(emitter.fixedTimeStep);
              }
              stats._updatesPerFrame += numSteps;
              stats._frameTime += emitter._addTimeTime;
              emitter._addTimeTime = 0;
            }
            emitter.finishFrame();
          }
        }
      }
    }
  }, onRemove:function(entity, component) {
    var data = component.data;
    if (data.model) {
      entity.removeChild(data.model.getGraph());
      data.model = null;
    }
    if (component.emitter) {
      component.emitter.destroy();
      component.emitter = null;
    }
  }});
  return {ParticleSystemComponentSystem:ParticleSystemComponentSystem};
}());
pc.extend(pc, function() {
  var ParticleSystemComponentData = function() {
    this.numParticles = 1;
    this.rate = 1;
    this.rate2 = null;
    this.startAngle = 0;
    this.startAngle2 = null;
    this.lifetime = 50;
    this.emitterExtents = new pc.Vec3;
    this.emitterRadius = 0;
    this.emitterShape = pc.EMITTERSHAPE_BOX;
    this.initialVelocity = 0;
    this.wrapBounds = new pc.Vec3;
    this.localSpace = false;
    this.colorMap = null;
    this.colorMapAsset = null;
    this.normalMap = null;
    this.normalMapAsset = null;
    this.loop = true;
    this.preWarm = false;
    this.sort = 0;
    this.mode = pc.PARTICLEMODE_GPU;
    this.scene = null;
    this.lighting = false;
    this.halfLambert = false;
    this.intensity = 1;
    this.stretch = 0.0;
    this.alignToMotion = false;
    this.depthSoftening = 0;
    this.mesh = null;
    this.depthWrite = false;
    this.noFog = false;
    this.animTilesX = 1;
    this.animTilesY = 1;
    this.animNumFrames = 1;
    this.animSpeed = 1;
    this.animLoop = true;
    this.scaleGraph = null;
    this.scaleGraph2 = null;
    this.colorGraph = null;
    this.colorGraph2 = null;
    this.alphaGraph = null;
    this.alphaGraph2 = null;
    this.localVelocityGraph = null;
    this.localVelocityGraph2 = null;
    this.velocityGraph = null;
    this.velocityGraph2 = null;
    this.rotationSpeedGraph = null;
    this.rotationSpeedGraph2 = null;
    this.blendType = pc.BLEND_NORMAL;
    this.model = null;
    this.enabled = true;
    this.paused = false;
    this.autoPlay = true;
    this.layers = [pc.LAYERID_WORLD];
  };
  ParticleSystemComponentData = pc.inherits(ParticleSystemComponentData, pc.ComponentData);
  return {ParticleSystemComponentData:ParticleSystemComponentData};
}());
pc.extend(pc, function() {
  var SpriteAnimationClip = function(component, data) {
    this._component = component;
    this._frame = 0;
    this._sprite = null;
    this._spriteAsset = null;
    this.spriteAsset = data.spriteAsset;
    this.name = data.name;
    this.fps = data.fps || 0;
    this.loop = data.loop || false;
    this._playing = false;
    this._paused = false;
    this._time = 0;
    pc.events.attach(this);
  };
  SpriteAnimationClip.prototype = {_onSpriteAssetAdded:function(asset) {
    this._component.system.app.assets.off("add:" + asset.id, this._onSpriteAssetAdded, this);
    if (this._spriteAsset === asset.id) {
      this._bindSpriteAsset(asset);
    }
  }, _bindSpriteAsset:function(asset) {
    asset.on("load", this._onSpriteAssetLoad, this);
    asset.on("remove", this._onSpriteAssetRemove, this);
    if (asset.resource) {
      this._onSpriteAssetLoad(asset);
    } else {
      this._component.system.app.assets.load(asset);
    }
  }, _onSpriteAssetLoad:function(asset) {
    if (!asset.resource) {
      this.sprite = null;
    } else {
      if (!asset.resource.atlas) {
        var atlasAssetId = asset.data.textureAtlasAsset;
        var assets = this._component.system.app.assets;
        assets.off("load:" + atlasAssetId, this._onTextureAtlasLoad, this);
        assets.once("load:" + atlasAssetId, this._onTextureAtlasLoad, this);
      } else {
        this.sprite = asset.resource;
      }
    }
  }, _onTextureAtlasLoad:function(atlasAsset) {
    var spriteAsset = this._spriteAsset;
    if (spriteAsset instanceof pc.Asset) {
      this._onSpriteAssetLoad(spriteAsset);
    } else {
      this._onSpriteAssetLoad(this._component.system.app.assets.get(spriteAsset));
    }
  }, _onSpriteAssetRemove:function(asset) {
    this.sprite = null;
  }, _onSpriteMeshesChange:function() {
    if (this._component.currentClip === this) {
      this._component._showFrame(this.frame);
    }
  }, _onSpritePpuChanged:function() {
    if (this._component.currentClip === this) {
      if (this.sprite.renderMode !== pc.SPRITE_RENDERMODE_SIMPLE) {
        this._component._showFrame(this.frame);
      }
    }
  }, _update:function(dt) {
    if (this.fps === 0) {
      return;
    }
    if (!this._playing || this._paused || !this._sprite) {
      return;
    }
    var dir = this.fps < 0 ? -1 : 1;
    var time = this._time + dt * this._component.speed * dir;
    var duration = this.duration;
    var end = time > duration || time < 0;
    this._setTime(time);
    var frame = this.frame;
    if (this._sprite) {
      frame = Math.floor(this._sprite.frameKeys.length * this._time / duration);
    } else {
      frame = 0;
    }
    if (frame !== this._frame) {
      this._setFrame(frame);
    }
    if (end) {
      if (this.loop) {
        this.fire("loop");
        this._component.fire("loop", this);
      } else {
        this._playing = false;
        this._paused = false;
        this.fire("end");
        this._component.fire("end", this);
      }
    }
  }, _setTime:function(value) {
    this._time = value;
    var duration = this.duration;
    if (this._time < 0) {
      if (this.loop) {
        this._time = this._time % duration + duration;
      } else {
        this._time = 0;
      }
    } else {
      if (this._time > duration) {
        if (this.loop) {
          this._time = this._time % duration;
        } else {
          this._time = duration;
        }
      }
    }
  }, _setFrame:function(value) {
    if (this._sprite) {
      this._frame = pc.math.clamp(value, 0, this._sprite.frameKeys.length - 1);
    } else {
      this._frame = value;
    }
    if (this._component.currentClip === this) {
      this._component._showFrame(this._frame);
    }
  }, _destroy:function() {
    if (this._sprite) {
      this._sprite = null;
    }
    if (this._spriteAsset) {
      this._spriteAsset = null;
    }
  }, play:function() {
    if (this._playing) {
      return;
    }
    this._playing = true;
    this._paused = false;
    this.frame = 0;
    this.fire("play");
    this._component.fire("play", this);
  }, pause:function() {
    if (!this._playing || this._paused) {
      return;
    }
    this._paused = true;
    this.fire("pause");
    this._component.fire("pause", this);
  }, resume:function() {
    if (!this._paused) {
      return;
    }
    this._paused = false;
    this.fire("resume");
    this._component.fire("resume", this);
  }, stop:function() {
    if (!this._playing) {
      return;
    }
    this._playing = false;
    this._paused = false;
    this._time = 0;
    this.frame = 0;
    this.fire("stop");
    this._component.fire("stop", this);
  }};
  Object.defineProperty(SpriteAnimationClip.prototype, "spriteAsset", {get:function() {
    return this._spriteAsset;
  }, set:function(value) {
    var assets = this._component.system.app.assets;
    var id = value;
    if (value instanceof pc.Asset) {
      id = value.id;
    }
    if (this._spriteAsset !== id) {
      if (this._spriteAsset) {
        var prev = assets.get(this._spriteAsset);
        if (prev) {
          prev.off("load", this._onSpriteAssetLoad, this);
          prev.off("remove", this._onSpriteAssetRemove, this);
          var atlasAssetId = prev.data && prev.data.textureAtlasAsset;
          if (atlasAssetId) {
            assets.off("load:" + atlasAssetId, this._onTextureAtlasLoad, this);
          }
        }
      }
      this._spriteAsset = id;
      if (this._spriteAsset) {
        var asset = assets.get(this._spriteAsset);
        if (!asset) {
          this.sprite = null;
          assets.on("add:" + this._spriteAsset, this._onSpriteAssetAdded, this);
        } else {
          this._bindSpriteAsset(asset);
        }
      } else {
        this.sprite = null;
      }
    }
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "sprite", {get:function() {
    return this._sprite;
  }, set:function(value) {
    if (this._sprite) {
      this._sprite.off("set:meshes", this._onSpriteMeshesChange, this);
      this._sprite.off("set:pixelsPerUnit", this._onSpritePpuChanged, this);
      this._sprite.off("set:atlas", this._onSpriteMeshesChange, this);
      if (this._sprite.atlas) {
        this._sprite.atlas.off("set:texture", this._onSpriteMeshesChange, this);
      }
    }
    this._sprite = value;
    if (this._sprite) {
      this._sprite.on("set:meshes", this._onSpriteMeshesChange, this);
      this._sprite.on("set:pixelsPerUnit", this._onSpritePpuChanged, this);
      this._sprite.on("set:atlas", this._onSpriteMeshesChange, this);
      if (this._sprite.atlas) {
        this._sprite.atlas.on("set:texture", this._onSpriteMeshesChange, this);
      }
    }
    if (this._component.currentClip === this) {
      var mi;
      if (!value || !value.atlas) {
        mi = this._component._meshInstance;
        if (mi) {
          mi.deleteParameter("texture_emissiveMap");
          mi.deleteParameter("texture_opacityMap");
        }
        this._component._hideModel();
      } else {
        if (value.atlas.texture) {
          mi = this._component._meshInstance;
          if (mi) {
            mi.setParameter("texture_emissiveMap", value.atlas.texture);
            mi.setParameter("texture_opacityMap", value.atlas.texture);
          }
          if (this._component.enabled && this._component.entity.enabled) {
            this._component._showModel();
          }
        }
        if (this.time && this.fps) {
          this.time = this.time;
        } else {
          this.frame = this.frame;
        }
      }
    }
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "frame", {get:function() {
    return this._frame;
  }, set:function(value) {
    this._setFrame(value);
    var fps = this.fps || Number.MIN_VALUE;
    this._setTime(this._frame / fps);
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "isPlaying", {get:function() {
    return this._playing;
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "isPaused", {get:function() {
    return this._paused;
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "duration", {get:function() {
    if (this._sprite) {
      var fps = this.fps || Number.MIN_VALUE;
      return this._sprite.frameKeys.length / Math.abs(fps);
    } else {
      return 0;
    }
  }});
  Object.defineProperty(SpriteAnimationClip.prototype, "time", {get:function() {
    return this._time;
  }, set:function(value) {
    this._setTime(value);
    if (this._sprite) {
      this.frame = Math.min(this._sprite.frameKeys.length - 1, Math.floor(this._time * Math.abs(this.fps)));
    } else {
      this.frame = 0;
    }
  }});
  return {SpriteAnimationClip:SpriteAnimationClip};
}());
pc.extend(pc, function() {
  pc.SPRITETYPE_SIMPLE = "simple";
  pc.SPRITETYPE_ANIMATED = "animated";
  var PARAM_EMISSIVE_MAP = "texture_emissiveMap";
  var PARAM_OPACITY_MAP = "texture_opacityMap";
  var PARAM_EMISSIVE = "material_emissive";
  var PARAM_OPACITY = "material_opacity";
  var PARAM_INNER_OFFSET = "innerOffset";
  var PARAM_OUTER_SCALE = "outerScale";
  var PARAM_ATLAS_RECT = "atlasRect";
  var SpriteComponent = function SpriteComponent(system, entity) {
    this._type = pc.SPRITETYPE_SIMPLE;
    this._material = system.defaultMaterial;
    this._color = new pc.Color(1, 1, 1, 1);
    this._speed = 1;
    this._flipX = false;
    this._flipY = false;
    this._width = 1;
    this._height = 1;
    this._drawOrder = 0;
    this._layers = [pc.LAYERID_WORLD];
    this._outerScale = new pc.Vec2(1, 1);
    this._innerOffset = new pc.Vec4;
    this._atlasRect = new pc.Vec4;
    this._batchGroupId = -1;
    this._batchGroup = null;
    this._node = new pc.GraphNode;
    this._model = new pc.Model;
    this._model.graph = this._node;
    this._meshInstance = null;
    entity.addChild(this._model.graph);
    this._model._entity = entity;
    this._updateAabbFunc = this._updateAabb.bind(this);
    this._addedModel = false;
    this._autoPlayClip = null;
    this._clips = {};
    this._defaultClip = new pc.SpriteAnimationClip(this, {name:this.entity.name, fps:0, loop:false, spriteAsset:null});
    this._currentClip = this._defaultClip;
  };
  SpriteComponent = pc.inherits(SpriteComponent, pc.Component);
  pc.extend(SpriteComponent.prototype, {onEnable:function() {
    SpriteComponent._super.onEnable.call(this);
    this.system.app.scene.on("set:layers", this._onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this._onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this._onLayerRemoved, this);
    }
    this._showModel();
    if (this._autoPlayClip) {
      this._tryAutoPlay();
    }
  }, onDisable:function() {
    SpriteComponent._super.onDisable.call(this);
    this.system.app.scene.off("set:layers", this._onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this._onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this._onLayerRemoved, this);
    }
    this.stop();
    this._hideModel();
  }, onDestroy:function() {
    this._currentClip = null;
    if (this._defaultClip) {
      this._defaultClip._destroy();
      this._defaultClip = null;
    }
    for (var key in this._clips) {
      this._clips[key]._destroy();
    }
    this._clips = null;
    this._hideModel();
    this._model = null;
    if (this._node) {
      if (this._node.parent) {
        this._node.parent.removeChild(this._node);
      }
      this._node = null;
    }
    if (this._meshInstance) {
      this._meshInstance.material = null;
      this._meshInstance.mesh = null;
      this._meshInstance = null;
    }
  }, _showModel:function() {
    if (this._addedModel) {
      return;
    }
    if (!this._meshInstance) {
      return;
    }
    var i;
    var len;
    var meshInstances = [this._meshInstance];
    for (i = 0, len = this._layers.length; i < len; i++) {
      var layer = this.system.app.scene.layers.getLayerById(this._layers[i]);
      if (layer) {
        layer.addMeshInstances(meshInstances);
      }
    }
    this._addedModel = true;
  }, _hideModel:function() {
    if (!this._addedModel || !this._meshInstance) {
      return;
    }
    var i;
    var len;
    var meshInstances = [this._meshInstance];
    for (i = 0, len = this._layers.length; i < len; i++) {
      var layer = this.system.app.scene.layers.getLayerById(this._layers[i]);
      if (layer) {
        layer.removeMeshInstances(meshInstances);
      }
    }
    this._addedModel = false;
  }, _showFrame:function(frame) {
    if (!this.sprite) {
      return;
    }
    var mesh = this.sprite.meshes[frame];
    if (!mesh) {
      if (this._meshInstance) {
        this._meshInstance.mesh = null;
        this._meshInstance.visible = false;
      }
      return;
    }
    var material = this.system.defaultMaterial;
    if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {
      material = this.system.default9SlicedMaterialSlicedMode;
    } else {
      if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {
        material = this.system.default9SlicedMaterialTiledMode;
      }
    }
    if (!this._meshInstance) {
      this._meshInstance = new pc.MeshInstance(this._node, mesh, this._material);
      this._meshInstance.castShadow = false;
      this._meshInstance.receiveShadow = false;
      this._meshInstance.drawOrder = this._drawOrder;
      this._model.meshInstances.push(this._meshInstance);
      this._meshInstance.setParameter(PARAM_EMISSIVE, this._color.data3);
      this._meshInstance.setParameter(PARAM_OPACITY, this._color.data[3]);
      if (this.enabled && this.entity.enabled) {
        this._showModel();
      }
    }
    if (this._meshInstance.material !== material) {
      this._meshInstance.material = material;
    }
    if (this._meshInstance.mesh !== mesh) {
      this._meshInstance.mesh = mesh;
      this._meshInstance.visible = true;
      this._meshInstance._aabbVer = -1;
    }
    if (this.sprite.atlas && this.sprite.atlas.texture) {
      this._meshInstance.setParameter(PARAM_EMISSIVE_MAP, this.sprite.atlas.texture);
      this._meshInstance.setParameter(PARAM_OPACITY_MAP, this.sprite.atlas.texture);
    } else {
      this._meshInstance.deleteParameter(PARAM_EMISSIVE_MAP);
      this._meshInstance.deleteParameter(PARAM_OPACITY_MAP);
    }
    if (this.sprite.atlas && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {
      this._meshInstance._updateAabbFunc = this._updateAabbFunc;
      var frameData = this.sprite.atlas.frames[this.sprite.frameKeys[frame]];
      if (frameData) {
        var borderWidthScale = 2 / frameData.rect.z;
        var borderHeightScale = 2 / frameData.rect.w;
        this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);
        var tex = this.sprite.atlas.texture;
        this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);
      } else {
        this._innerOffset.set(0, 0, 0, 0);
      }
      this._meshInstance.setParameter(PARAM_INNER_OFFSET, this._innerOffset.data);
      this._meshInstance.setParameter(PARAM_ATLAS_RECT, this._atlasRect.data);
    } else {
      this._meshInstance._updateAabbFunc = null;
    }
    this._updateTransform();
  }, _updateTransform:function() {
    var scaleX = this.flipX ? -1 : 1;
    var scaleY = this.flipY ? -1 : 1;
    var posX = 0;
    var posY = 0;
    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {
      var w = 1;
      var h = 1;
      if (this.sprite.atlas) {
        var frameData = this.sprite.atlas.frames[this.sprite.frameKeys[this.frame]];
        if (frameData) {
          w = frameData.rect.z;
          h = frameData.rect.w;
          posX = (0.5 - frameData.pivot.x) * this._width;
          posY = (0.5 - frameData.pivot.y) * this._height;
        }
      }
      var scaleMulX = w / this.sprite.pixelsPerUnit;
      var scaleMulY = h / this.sprite.pixelsPerUnit;
      this._outerScale.set(Math.max(this._width, this._innerOffset.x * scaleMulX), Math.max(this._height, this._innerOffset.y * scaleMulY));
      scaleX *= scaleMulX;
      scaleY *= scaleMulY;
      this._outerScale.x /= scaleMulX;
      this._outerScale.y /= scaleMulY;
      scaleX *= pc.math.clamp(this._width / (this._innerOffset.x * scaleMulX), 0.0001, 1);
      scaleY *= pc.math.clamp(this._height / (this._innerOffset.y * scaleMulY), 0.0001, 1);
      if (this._meshInstance) {
        this._meshInstance.setParameter(PARAM_OUTER_SCALE, this._outerScale.data, 4294967295);
      }
    }
    this._node.setLocalScale(scaleX, scaleY, 1);
    this._node.setLocalPosition(posX, posY, 0);
  }, _updateAabb:function(aabb) {
    aabb.center.set(0, 0, 0);
    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);
    aabb.setFromTransformedAabb(aabb, this._node.getWorldTransform());
    return aabb;
  }, _tryAutoPlay:function() {
    if (!this._autoPlayClip) {
      return;
    }
    if (this.type !== pc.SPRITETYPE_ANIMATED) {
      return;
    }
    var clip = this._clips[this._autoPlayClip];
    if (clip && !clip.isPlaying && (!this._currentClip || !this._currentClip.isPlaying)) {
      if (this.enabled && this.entity.enabled) {
        this.play(clip.name);
      }
    }
  }, _onLayersChanged:function(oldComp, newComp) {
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
    if (this.enabled && this.entity.enabled) {
      this._showModel();
    }
  }, _onLayerAdded:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    if (this._addedModel && this.enabled && this.entity.enabled && this._meshInstance) {
      layer.addMeshInstances([this._meshInstance]);
    }
  }, _onLayerRemoved:function(layer) {
    if (!this._meshInstance) {
      return;
    }
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    layer.removeMeshInstances([this._meshInstance]);
  }, addClip:function(data) {
    var clip = new pc.SpriteAnimationClip(this, {name:data.name, fps:data.fps, loop:data.loop, spriteAsset:data.spriteAsset});
    this._clips[data.name] = clip;
    if (clip.name && clip.name === this._autoPlayClip) {
      this._tryAutoPlay();
    }
    return clip;
  }, removeClip:function(name) {
    delete this._clips[name];
  }, clip:function(name) {
    return this._clips[name];
  }, play:function(name) {
    var clip = this._clips[name];
    var current = this._currentClip;
    if (current && current !== clip) {
      current._playing = false;
    }
    this._currentClip = clip;
    if (this._currentClip) {
      this._currentClip = clip;
      this._currentClip.play();
    } else {
      logWARNING("Trying to play sprite animation " + name + " which does not exist.");
    }
    return clip;
  }, pause:function() {
    if (this._currentClip === this._defaultClip) {
      return;
    }
    if (this._currentClip.isPlaying) {
      this._currentClip.pause();
    }
  }, resume:function() {
    if (this._currentClip === this._defaultClip) {
      return;
    }
    if (this._currentClip.isPaused) {
      this._currentClip.resume();
    }
  }, stop:function() {
    if (this._currentClip === this._defaultClip) {
      return;
    }
    this._currentClip.stop();
  }});
  Object.defineProperty(SpriteComponent.prototype, "type", {get:function() {
    return this._type;
  }, set:function(value) {
    if (this._type === value) {
      return;
    }
    this._type = value;
    if (this._type === pc.SPRITETYPE_SIMPLE) {
      this.stop();
      this._currentClip = this._defaultClip;
      if (this.enabled && this.entity.enabled) {
        this._currentClip.frame = this.frame;
        if (this._currentClip.sprite) {
          this._showModel();
        } else {
          this._hideModel();
        }
      }
    } else {
      if (this._type === pc.SPRITETYPE_ANIMATED) {
        this.stop();
        if (this._autoPlayClip) {
          this._tryAutoPlay();
        }
        if (this._currentClip && this._currentClip.isPlaying && this.enabled && this.entity.enabled) {
          this._showModel();
        } else {
          this._hideModel();
        }
      }
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "frame", {get:function() {
    return this._currentClip.frame;
  }, set:function(value) {
    this._currentClip.frame = value;
  }});
  Object.defineProperty(SpriteComponent.prototype, "spriteAsset", {get:function() {
    return this._defaultClip._spriteAsset;
  }, set:function(value) {
    this._defaultClip.spriteAsset = value;
  }});
  Object.defineProperty(SpriteComponent.prototype, "sprite", {get:function() {
    return this._currentClip.sprite;
  }, set:function(value) {
    this._currentClip.sprite = value;
  }});
  Object.defineProperty(SpriteComponent.prototype, "material", {get:function() {
    return this._material;
  }, set:function(value) {
    this._material = value;
    if (this._meshInstance) {
      this._meshInstance.material = value;
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "color", {get:function() {
    return this._color;
  }, set:function(value) {
    this._color.data[0] = value.data[0];
    this._color.data[1] = value.data[1];
    this._color.data[2] = value.data[2];
    if (this._meshInstance) {
      this._meshInstance.setParameter(PARAM_EMISSIVE, this._color.data3);
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "opacity", {get:function() {
    return this._color.data[3];
  }, set:function(value) {
    this._color.data[3] = value;
    if (this._meshInstance) {
      this._meshInstance.setParameter(PARAM_OPACITY, value);
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "clips", {get:function() {
    return this._clips;
  }, set:function(value) {
    var name, key;
    if (!value) {
      for (name in this._clips) {
        this.removeClip(name);
      }
      return;
    }
    for (name in this._clips) {
      var found = false;
      for (key in value) {
        if (value[key].name === name) {
          found = true;
          this._clips[name].fps = value[key].fps;
          this._clips[name].loop = value[key].loop;
          if (value[key].hasOwnProperty("sprite")) {
            this._clips[name].sprite = value[key].sprite;
          } else {
            if (value[key].hasOwnProperty("spriteAsset")) {
              this._clips[name].spriteAsset = value[key].spriteAsset;
            }
          }
          break;
        }
      }
      if (!found) {
        this.removeClip(name);
      }
    }
    for (key in value) {
      if (this._clips[value[key].name]) {
        continue;
      }
      this.addClip(value[key]);
    }
    if (this._autoPlayClip) {
      this._tryAutoPlay();
    }
    if (!this._currentClip || !this._currentClip.sprite) {
      this._hideModel();
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "currentClip", {get:function() {
    return this._currentClip;
  }});
  Object.defineProperty(SpriteComponent.prototype, "speed", {get:function() {
    return this._speed;
  }, set:function(value) {
    this._speed = value;
  }});
  Object.defineProperty(SpriteComponent.prototype, "flipX", {get:function() {
    return this._flipX;
  }, set:function(value) {
    if (this._flipX === value) {
      return;
    }
    this._flipX = value;
    this._updateTransform();
  }});
  Object.defineProperty(SpriteComponent.prototype, "flipY", {get:function() {
    return this._flipY;
  }, set:function(value) {
    if (this._flipY === value) {
      return;
    }
    this._flipY = value;
    this._updateTransform();
  }});
  Object.defineProperty(SpriteComponent.prototype, "width", {get:function() {
    return this._width;
  }, set:function(value) {
    if (value === this._width) {
      return;
    }
    this._width = value;
    this._outerScale.x = this._width;
    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED)) {
      this._updateTransform();
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "height", {get:function() {
    return this._height;
  }, set:function(value) {
    if (value === this._height) {
      return;
    }
    this._height = value;
    this._outerScale.y = this.height;
    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED)) {
      this._updateTransform();
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "batchGroupId", {get:function() {
    return this._batchGroupId;
  }, set:function(value) {
    if (this._batchGroupId === value) {
      return;
    }
    var prev = this._batchGroupId;
    this._batchGroupId = value;
    if (prev >= 0) {
      this.system.app.batcher._markGroupDirty(prev);
    }
    if (this._batchGroupId >= 0) {
      this.system.app.batcher._markGroupDirty(this._batchGroupId);
    } else {
      if (prev >= 0) {
        if (this._currentClip && this._currentClip.sprite && this.enabled && this.entity.enabled) {
          this._showModel();
        }
      }
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "autoPlayClip", {get:function() {
    return this._autoPlayClip;
  }, set:function(value) {
    this._autoPlayClip = value instanceof pc.SpriteAnimationClip ? value.name : value;
    this._tryAutoPlay();
  }});
  Object.defineProperty(SpriteComponent.prototype, "drawOrder", {get:function() {
    return this._drawOrder;
  }, set:function(value) {
    this._drawOrder = value;
    if (this._meshInstance) {
      this._meshInstance.drawOrder = value;
    }
  }});
  Object.defineProperty(SpriteComponent.prototype, "layers", {get:function() {
    return this._layers;
  }, set:function(value) {
    var i;
    var len;
    if (this._addedModel) {
      this._hideModel();
    }
    var prev = this._layers;
    this._layers = value;
    if (!this._meshInstance) {
      return;
    }
    if (this.enabled && this.entity.enabled) {
      this._showModel();
    }
  }});
  return {SpriteComponent:SpriteComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var warningShown = false;
  var nineSliceBasePS = ["varying vec2 vMask;", "varying vec2 vTiledUv;", "uniform vec4 innerOffset;", "uniform vec2 outerScale;", "uniform vec4 atlasRect;", "vec2 nineSlicedUv;"].join("\n");
  var nineSliceUvPs = ["vec2 tileMask = step(vMask, vec2(0.99999));", "vec2 clampedUv = mix(innerOffset.xy*0.5, vec2(1.0) - innerOffset.zw*0.5, fract(vTiledUv));", "clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;", "nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);"].join("\n");
  var SpriteComponentSystem = function SpriteComponentSystem(app) {
    this.id = "sprite";
    this.app = app;
    app.systems.add(this.id, this);
    this.ComponentType = pc.SpriteComponent;
    this.DataType = pc.SpriteComponentData;
    this.schema = _schema;
    this._defaultTexture = new pc.Texture(app.graphicsDevice, {width:1, height:1, format:pc.PIXELFORMAT_R8_G8_B8_A8});
    var pixels = this._defaultTexture.lock();
    var pixelData = new Uint8Array(4);
    pixelData[0] = 255.0;
    pixelData[1] = 255.0;
    pixelData[2] = 255.0;
    pixelData[3] = 255.0;
    pixels.set(pixelData);
    this._defaultTexture.unlock();
    this.defaultMaterial = new pc.StandardMaterial;
    this.defaultMaterial.diffuse = new pc.Color(0, 0, 0, 1);
    this.defaultMaterial.emissive = new pc.Color(0.5, 0.5, 0.5, 1);
    this.defaultMaterial.emissiveMap = this._defaultTexture;
    this.defaultMaterial.emissiveMapTint = true;
    this.defaultMaterial.opacityMap = this._defaultTexture;
    this.defaultMaterial.opacityMapChannel = "a";
    this.defaultMaterial.opacityTint = true;
    this.defaultMaterial.opacity = 0;
    this.defaultMaterial.useLighting = false;
    this.defaultMaterial.useGammaTonemap = false;
    this.defaultMaterial.useFog = false;
    this.defaultMaterial.useSkybox = false;
    this.defaultMaterial.blendType = pc.BLEND_PREMULTIPLIED;
    this.defaultMaterial.depthWrite = false;
    this.defaultMaterial.pixelSnap = false;
    this.defaultMaterial.cull = pc.CULLFACE_NONE;
    this.defaultMaterial.update();
    this.default9SlicedMaterialSlicedMode = this.defaultMaterial.clone();
    this.default9SlicedMaterialSlicedMode.chunks.basePS = pc.shaderChunks.basePS + nineSliceBasePS;
    this.default9SlicedMaterialSlicedMode.chunks.startPS = pc.shaderChunks.startPS + "nineSlicedUv = vUv0;\n";
    this.default9SlicedMaterialSlicedMode.chunks.emissivePS = pc.shaderChunks.emissivePS.replace("$UV", "nineSlicedUv");
    this.default9SlicedMaterialSlicedMode.chunks.opacityPS = pc.shaderChunks.opacityPS.replace("$UV", "nineSlicedUv");
    this.default9SlicedMaterialSlicedMode.chunks.transformVS = "#define NINESLICED\n" + pc.shaderChunks.transformVS;
    this.default9SlicedMaterialSlicedMode.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;
    this.default9SlicedMaterialSlicedMode.update();
    this.default9SlicedMaterialTiledMode = this.defaultMaterial.clone();
    this.default9SlicedMaterialTiledMode.chunks.basePS = pc.shaderChunks.basePS + "#define NINESLICETILED\n" + nineSliceBasePS;
    this.default9SlicedMaterialTiledMode.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;
    this.default9SlicedMaterialTiledMode.chunks.emissivePS = pc.shaderChunks.emissivePS.replace("$UV", "nineSlicedUv, -1000.0");
    this.default9SlicedMaterialTiledMode.chunks.opacityPS = pc.shaderChunks.opacityPS.replace("$UV", "nineSlicedUv, -1000.0");
    this.default9SlicedMaterialTiledMode.chunks.transformVS = "#define NINESLICED\n" + pc.shaderChunks.transformVS;
    this.default9SlicedMaterialTiledMode.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;
    this.default9SlicedMaterialTiledMode.update();
    pc.ComponentSystem.on("update", this.onUpdate, this);
    this.on("beforeremove", this.onBeforeRemove, this);
  };
  SpriteComponentSystem = pc.inherits(SpriteComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.SpriteComponent.prototype, _schema);
  pc.extend(SpriteComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    if (data.enabled !== undefined) {
      component.enabled = data.enabled;
    }
    component.type = data.type;
    if (data.layers && pc.type(data.layers) === "array") {
      component.layers = data.layers.slice(0);
    }
    if (data.drawOrder !== undefined) {
      component.drawOrder = data.drawOrder;
    }
    if (data.color !== undefined) {
      if (data.color instanceof pc.Color) {
        component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);
      } else {
        component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);
      }
      component.color = component.color;
    }
    if (data.opacity !== undefined) {
      component.opacity = data.opacity;
    }
    if (data.flipX !== undefined) {
      component.flipX = data.flipX;
    }
    if (data.flipY !== undefined) {
      component.flipY = data.flipY;
    }
    if (data.width !== undefined) {
      component.width = data.width;
    }
    if (data.height !== undefined) {
      component.height = data.height;
    }
    if (data.spriteAsset !== undefined) {
      component.spriteAsset = data.spriteAsset;
    }
    if (data.sprite) {
      component.sprite = data.sprite;
    }
    if (data.frame !== undefined) {
      component.frame = data.frame;
    }
    if (data.clips) {
      for (var name in data.clips) {
        component.addClip(data.clips[name]);
      }
    }
    if (data.speed !== undefined) {
      component.speed = data.speed;
    }
    if (data.autoPlayClip) {
      component.autoPlayClip = data.autoPlayClip;
    }
    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;
    SpriteComponentSystem._super.initializeComponentData.call(this, component, data, properties);
    if (!warningShown) {
      console.warn("The Sprite component is in beta and might change without notice.");
      warningShown = true;
    }
  }, cloneComponent:function(entity, clone) {
    var source = entity.sprite;
    return this.addComponent(clone, {enabled:source.enabled, type:source.type, spriteAsset:source.spriteAsset, sprite:source.sprite, frame:source.frame, color:source.color.clone(), opacity:source.opacity, flipX:source.flipX, flipY:source.flipY, speed:source.speed, clips:source.clips, batchGroupId:source.batchGroupId});
  }, onUpdate:function(dt) {
    var components = this.store;
    for (var id in components) {
      if (components.hasOwnProperty(id)) {
        var component = components[id];
        if (component.data.enabled && component.entity.enabled) {
          var sprite = component.entity.sprite;
          if (sprite._currentClip) {
            sprite._currentClip._update(dt);
          }
        }
      }
    }
  }, onBeforeRemove:function(entity, component) {
    component.onDestroy();
  }});
  return {SpriteComponentSystem:SpriteComponentSystem};
}());
pc.extend(pc, function() {
  var SpriteComponentData = function() {
    this.enabled = true;
  };
  SpriteComponentData = pc.inherits(SpriteComponentData, pc.ComponentData);
  return {SpriteComponentData:SpriteComponentData};
}());
pc.extend(pc, function() {
  pc.SCALEMODE_NONE = "none";
  pc.SCALEMODE_BLEND = "blend";
  var ScreenComponent = function ScreenComponent(system, entity) {
    this._resolution = new pc.Vec2(640, 320);
    this._referenceResolution = new pc.Vec2(640, 320);
    this._scaleMode = pc.SCALEMODE_NONE;
    this.scale = 1;
    this._scaleBlend = 0.5;
    this._screenSpace = false;
    this._screenMatrix = new pc.Mat4;
    system.app.graphicsDevice.on("resizecanvas", this._onResize, this);
  };
  ScreenComponent = pc.inherits(ScreenComponent, pc.Component);
  var _transform = new pc.Mat4;
  pc.extend(ScreenComponent.prototype, {syncDrawOrder:function() {
    var i = 1;
    var recurse = function(e) {
      if (e.element) {
        e.element.drawOrder = i++;
      }
      var children = e.getChildren();
      for (var j = 0; j < children.length; j++) {
        recurse(children[j]);
      }
    };
    recurse(this.entity);
  }, _calcProjectionMatrix:function() {
    var left;
    var right;
    var bottom;
    var top;
    var near = 1;
    var far = -1;
    var w = this._resolution.x / this.scale;
    var h = this._resolution.y / this.scale;
    left = 0;
    right = w;
    bottom = -h;
    top = 0;
    this._screenMatrix.setOrtho(left, right, bottom, top, near, far);
    if (!this._screenSpace) {
      _transform.setScale(0.5 * w, 0.5 * h, 1);
      this._screenMatrix.mul2(_transform, this._screenMatrix);
    }
  }, _updateScale:function() {
    this.scale = this._calcScale(this._resolution, this.referenceResolution);
  }, _calcScale:function(resolution, referenceResolution) {
    var lx = Math.log2(resolution.x / referenceResolution.x);
    var ly = Math.log2(resolution.y / referenceResolution.y);
    return Math.pow(2, lx * (1 - this._scaleBlend) + ly * this._scaleBlend);
  }, _onResize:function(width, height) {
    if (this._screenSpace) {
      this._resolution.set(width, height);
      this.resolution = this._resolution;
    }
  }, onRemove:function() {
    this.system.app.graphicsDevice.off("resizecanvas", this._onResize, this);
    this.fire("remove");
  }});
  Object.defineProperty(ScreenComponent.prototype, "resolution", {set:function(value) {
    if (!this._screenSpace) {
      this._resolution.set(value.x, value.y);
    } else {
      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);
    }
    this._updateScale();
    this._calcProjectionMatrix();
    if (!this.entity._dirtyLocal) {
      this.entity._dirtify(true);
    }
    this.fire("set:resolution", this._resolution);
  }, get:function() {
    return this._resolution;
  }});
  Object.defineProperty(ScreenComponent.prototype, "referenceResolution", {set:function(value) {
    this._referenceResolution.set(value.x, value.y);
    this._updateScale();
    this._calcProjectionMatrix();
    if (!this.entity._dirtyLocal) {
      this.entity._dirtify(true);
    }
    this.fire("set:referenceresolution", this._resolution);
  }, get:function() {
    if (this._scaleMode === pc.SCALEMODE_NONE) {
      return this._resolution;
    } else {
      return this._referenceResolution;
    }
  }});
  Object.defineProperty(ScreenComponent.prototype, "screenSpace", {set:function(value) {
    this._screenSpace = value;
    if (this._screenSpace) {
      this._resolution.set(this.system.app.graphicsDevice.width, this.system.app.graphicsDevice.height);
    }
    this.resolution = this._resolution;
    if (!this.entity._dirtyLocal) {
      this.entity._dirtify(true);
    }
    this.fire("set:screenspace", this._screenSpace);
  }, get:function() {
    return this._screenSpace;
  }});
  Object.defineProperty(ScreenComponent.prototype, "scaleMode", {set:function(value) {
    if (value !== pc.SCALEMODE_NONE && value !== pc.SCALEMODE_BLEND) {
      value = pc.SCALEMODE_NONE;
    }
    if (!this._screenSpace && value !== pc.SCALEMODE_NONE) {
      value = pc.SCALEMODE_NONE;
    }
    this._scaleMode = value;
    this.resolution = this._resolution;
    this.fire("set:scalemode", this._scaleMode);
  }, get:function() {
    return this._scaleMode;
  }});
  Object.defineProperty(ScreenComponent.prototype, "scaleBlend", {set:function(value) {
    this._scaleBlend = value;
    this._updateScale();
    this._calcProjectionMatrix();
    if (!this.entity._dirtyLocal) {
      this.entity._dirtify(true);
    }
    this.fire("set:scaleblend", this._scaleBlend);
  }, get:function() {
    return this._scaleBlend;
  }});
  return {ScreenComponent:ScreenComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var ScreenComponentSystem = function ScreenComponentSystem(app) {
    this.id = "screen";
    this.app = app;
    app.systems.add(this.id, this);
    this.ComponentType = pc.ScreenComponent;
    this.DataType = pc.ScreenComponentData;
    this.schema = _schema;
    this.windowResolution = new pc.Vec2;
    this.app.graphicsDevice.on("resizecanvas", this._onResize, this);
    pc.ComponentSystem.on("update", this._onUpdate, this);
    this.on("beforeremove", this.onRemoveComponent, this);
  };
  ScreenComponentSystem = pc.inherits(ScreenComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ScreenComponent.prototype, _schema);
  pc.extend(ScreenComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    if (data.screenSpace !== undefined) {
      component.screenSpace = data.screenSpace;
    }
    if (data.scaleMode !== undefined) {
      component.scaleMode = data.scaleMode;
    }
    if (data.scaleBlend !== undefined) {
      component.scaleBlend = data.scaleBlend;
    }
    if (data.resolution !== undefined) {
      if (data.resolution instanceof pc.Vec2) {
        component._resolution.copy(data.resolution);
      } else {
        component._resolution.set(data.resolution[0], data.resolution[1]);
      }
      component.resolution = component._resolution;
    }
    if (data.referenceResolution !== undefined) {
      if (data.referenceResolution instanceof pc.Vec2) {
        component._referenceResolution.copy(data.referenceResolution);
      } else {
        component._referenceResolution.set(data.referenceResolution[0], data.referenceResolution[1]);
      }
      component.referenceResolution = component._referenceResolution;
    }
    ScreenComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, _onUpdate:function(dt) {
    var components = this.store;
    for (var id in components) {
      if (components[id].entity.screen.update) {
        components[id].entity.screen.update(dt);
      }
    }
  }, _onResize:function(width, height) {
    this.windowResolution.x = width;
    this.windowResolution.y = height;
  }, cloneComponent:function(entity, clone) {
    var screen = entity.screen;
    return this.addComponent(clone, {enabled:screen.enabled, screenSpace:screen.screenSpace, scaleMode:screen.scaleMode, resolution:screen.resolution.clone(), referenceResolution:screen.referenceResolution.clone()});
  }, onRemoveComponent:function(entity, component) {
    component.onRemove();
  }});
  return {ScreenComponentSystem:ScreenComponentSystem};
}());
pc.extend(pc, function() {
  var ScreenComponentData = function() {
    this.enabled = true;
  };
  ScreenComponentData = pc.inherits(ScreenComponentData, pc.ComponentData);
  return {ScreenComponentData:ScreenComponentData};
}());
pc.extend(pc, function() {
  var topMasks = [];
  var _debugLogging = false;
  pc.ELEMENTTYPE_GROUP = "group";
  pc.ELEMENTTYPE_IMAGE = "image";
  pc.ELEMENTTYPE_TEXT = "text";
  var vecA = new pc.Vec3;
  var vecB = new pc.Vec3;
  var matA = new pc.Mat4;
  var matB = new pc.Mat4;
  var matC = new pc.Mat4;
  var matD = new pc.Mat4;
  var ElementComponent = function ElementComponent(system, entity) {
    this._anchor = new pc.Vec4;
    this._localAnchor = new pc.Vec4;
    this._pivot = new pc.Vec2;
    this._width = 32;
    this._height = 32;
    this._margin = new pc.Vec4(0, 0, -32, -32);
    this._modelTransform = new pc.Mat4;
    this._screenToWorld = new pc.Mat4;
    this._anchorTransform = new pc.Mat4;
    this._anchorDirty = true;
    this._parentWorldTransform = new pc.Mat4;
    this._screenTransform = new pc.Mat4;
    this._screenCorners = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];
    this._canvasCorners = [new pc.Vec2, new pc.Vec2, new pc.Vec2, new pc.Vec2];
    this._worldCorners = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];
    this._cornersDirty = true;
    this._canvasCornersDirty = true;
    this._worldCornersDirty = true;
    this.entity.on("insert", this._onInsert, this);
    this._patch();
    this.screen = null;
    this._type = pc.ELEMENTTYPE_GROUP;
    this._image = null;
    this._text = null;
    this._group = null;
    this._useInput = false;
    this._layers = [pc.LAYERID_UI];
    this._addedModel = null;
    this._batchGroupId = -1;
  };
  ElementComponent = pc.inherits(ElementComponent, pc.Component);
  pc.extend(ElementComponent.prototype, {_patch:function() {
    this.entity._sync = this._sync;
    this.entity.setPosition = this._setPosition;
    this.entity.setLocalPosition = this._setLocalPosition;
  }, _unpatch:function() {
    this.entity._sync = pc.Entity.prototype._sync;
    this.entity.setPosition = pc.Entity.prototype.setPosition;
    this.entity.setLocalPosition = pc.Entity.prototype.setLocalPosition;
  }, _setPosition:function() {
    var position = new pc.Vec3;
    var invParentWtm = new pc.Mat4;
    return function(x, y, z) {
      if (!this.element.screen) {
        return pc.Entity.prototype.setPosition.call(this, x, y, z);
      }
      if (x instanceof pc.Vec3) {
        position.copy(x);
      } else {
        position.set(x, y, z);
      }
      this.getWorldTransform();
      invParentWtm.copy(this.element._screenToWorld).invert();
      invParentWtm.transformPoint(position, this.localPosition);
      if (!this._dirtyLocal) {
        this._dirtify(true);
      }
    };
  }(), _setLocalPosition:function(x, y, z) {
    if (x instanceof pc.Vec3) {
      this.localPosition.copy(x);
    } else {
      this.localPosition.set(x, y, z);
    }
    var element = this.element;
    var p = this.localPosition.data;
    var pvt = element._pivot.data;
    element._margin.data[0] = p[0] - element._width * pvt[0];
    element._margin.data[2] = element._localAnchor.data[2] - element._localAnchor.data[0] - element._width - element._margin.data[0];
    element._margin.data[1] = p[1] - element._height * pvt[1];
    element._margin.data[3] = element._localAnchor.data[3] - element._localAnchor.data[1] - element._height - element._margin.data[1];
    if (!this._dirtyLocal) {
      this._dirtify(true);
    }
  }, _sync:function() {
    var element = this.element;
    var screen = element.screen;
    if (screen) {
      if (element._anchorDirty) {
        var resx = 0;
        var resy = 0;
        var px = 0;
        var py = 1;
        if (this._parent && this._parent.element) {
          resx = this._parent.element.width;
          resy = this._parent.element.height;
          px = this._parent.element.pivot.x;
          py = this._parent.element.pivot.y;
        } else {
          if (screen) {
            var resolution = screen.screen.resolution;
            resx = resolution.x / screen.screen.scale;
            resy = resolution.y / screen.screen.scale;
          }
        }
        element._anchorTransform.setTranslate(resx * (element.anchor.x - px), -(resy * (py - element.anchor.y)), 0);
        element._anchorDirty = false;
        element._calculateLocalAnchors();
      }
      if (element._sizeDirty) {
        element._calculateSize();
      }
    }
    if (this._dirtyLocal) {
      this.localTransform.setTRS(this.localPosition, this.localRotation, this.localScale);
      var p = this.localPosition.data;
      var pvt = element._pivot.data;
      element._margin.data[0] = p[0] - element._width * pvt[0];
      element._margin.data[2] = element._localAnchor.data[2] - element._localAnchor.data[0] - element._width - element._margin.data[0];
      element._margin.data[1] = p[1] - element._height * pvt[1];
      element._margin.data[3] = element._localAnchor.data[3] - element._localAnchor.data[1] - element._height - element._margin.data[1];
      this._dirtyLocal = false;
    }
    if (!screen) {
      if (this._dirtyWorld) {
        element._cornersDirty = true;
        element._canvasCornersDirty = true;
        element._worldCornersDirty = true;
      }
      return pc.Entity.prototype._sync.call(this);
    }
    if (this._dirtyWorld) {
      if (this._parent === null) {
        this.worldTransform.copy(this.localTransform);
      } else {
        if (this._parent.element) {
          element._screenToWorld.mul2(this._parent.element._modelTransform, element._anchorTransform);
        } else {
          element._screenToWorld.copy(element._anchorTransform);
        }
        element._modelTransform.mul2(element._screenToWorld, this.localTransform);
        if (screen) {
          element._screenToWorld.mul2(screen.screen._screenMatrix, element._screenToWorld);
          if (!screen.screen.screenSpace) {
            element._screenToWorld.mul2(screen.worldTransform, element._screenToWorld);
          }
          this.worldTransform.mul2(element._screenToWorld, this.localTransform);
          var parentWorldTransform = element._parentWorldTransform;
          parentWorldTransform.setIdentity();
          var parent = this._parent;
          if (parent && parent.element && parent !== screen) {
            matA.setTRS(pc.Vec3.ZERO, parent.getLocalRotation(), parent.getLocalScale());
            parentWorldTransform.mul2(parent.element._parentWorldTransform, matA);
          }
          var depthOffset = vecA;
          depthOffset.set(0, 0, this.localPosition.z);
          var pivotOffset = vecB;
          pivotOffset.set(element._absLeft + element._pivot.x * element.width, element._absBottom + element._pivot.y * element.height, 0);
          matA.setTranslate(-pivotOffset.x, -pivotOffset.y, -pivotOffset.z);
          matB.setTRS(depthOffset, this.getLocalRotation(), this.getLocalScale());
          matC.setTranslate(pivotOffset.x, pivotOffset.y, pivotOffset.z);
          element._screenTransform.mul2(element._parentWorldTransform, matC).mul(matB).mul(matA);
          element._cornersDirty = true;
          element._canvasCornersDirty = true;
          element._worldCornersDirty = true;
        } else {
          this.worldTransform.copy(element._modelTransform);
        }
      }
      this._dirtyWorld = false;
    }
  }, _onInsert:function(parent) {
    var result = this._parseUpToScreen();
    this.entity._dirtify();
    this._updateScreen(result.screen);
    this._dirtifyMask();
  }, _dirtifyMask:function() {
    var parent = this.entity;
    while (parent) {
      var next = parent.getParent();
      if ((next === null || next.screen) && parent.element) {
        if (!this.system._prerender || !this.system._prerender.length) {
          this.system._prerender = [];
          this.system.app.once("prerender", this._onPrerender, this);
          if (_debugLogging) {
            console.log("register prerender");
          }
        }
        var i = this.system._prerender.indexOf(this.entity);
        if (i >= 0) {
          this.system._prerender.splice(i, 1);
        }
        var j = this.system._prerender.indexOf(parent);
        if (j < 0) {
          this.system._prerender.push(parent);
        }
        if (_debugLogging) {
          console.log("set prerender root to: " + parent.name);
        }
      }
      parent = next;
    }
  }, _onPrerender:function() {
    var ref = 0;
    for (var i = 0; i < this.system._prerender.length; i++) {
      var mask = this.system._prerender[i];
      if (_debugLogging) {
        console.log("prerender from: " + mask.name);
      }
      ref = mask.element.syncMask(ref) + 1;
    }
    this.system._prerender.length = 0;
  }, _updateScreen:function(screen) {
    if (this.screen && this.screen !== screen) {
      this.screen.screen.off("set:resolution", this._onScreenResize, this);
      this.screen.screen.off("set:referenceresolution", this._onScreenResize, this);
      this.screen.screen.off("set:scaleblend", this._onScreenResize, this);
      this.screen.screen.off("set:screenspace", this._onScreenSpaceChange, this);
      this.screen.screen.off("remove", this._onScreenRemove, this);
    }
    this.screen = screen;
    if (this.screen) {
      this.screen.screen.on("set:resolution", this._onScreenResize, this);
      this.screen.screen.on("set:referenceresolution", this._onScreenResize, this);
      this.screen.screen.on("set:scaleblend", this._onScreenResize, this);
      this.screen.screen.on("set:screenspace", this._onScreenSpaceChange, this);
      this.screen.screen.on("remove", this._onScreenRemove, this);
    }
    this._calculateSize();
    this.fire("set:screen", this.screen);
    this._anchorDirty = true;
    var children = this.entity.getChildren();
    for (var i = 0, l = children.length; i < l; i++) {
      if (children[i].element) {
        children[i].element._updateScreen(screen);
      }
    }
    if (this.screen) {
      this.screen.screen.syncDrawOrder();
    }
  }, syncMask:function(ref) {
    var result = this._parseUpToScreen();
    return this._updateMask(result.mask, ref);
  }, _setMaskedBy:function(mask) {
    var i, mi, len;
    var elem = this._image || this._text;
    if (!elem) {
      return;
    }
    if (mask) {
      var ref = mask.element._image._maskRef;
      if (_debugLogging) {
        console.log("masking: " + this.entity.name + " with " + ref);
      }
      var sp = new pc.StencilParameters({ref:ref, func:pc.FUNC_EQUAL});
      for (i = 0, len = elem._model.meshInstances.length; i < len; i++) {
        mi = elem._model.meshInstances[i];
        mi.stencilFront = mi.stencilBack = sp;
      }
      elem._maskedBy = mask;
    } else {
      if (_debugLogging) {
        console.log("no masking on: " + this.entity.name);
      }
      for (i = 0, len = elem._model.meshInstances.length; i < len; i++) {
        mi = elem._model.meshInstances[i];
        mi.stencilFront = mi.stencilBack = null;
      }
      elem._maskedBy = null;
    }
  }, _getMaskDepth:function() {
    var depth = 1;
    var parent = this.entity;
    while (parent) {
      parent = parent.getParent();
      if (parent && parent.element && parent.element.mask) {
        depth++;
      }
    }
    return depth;
  }, _updateMask:function(mask, ref) {
    var i, l, sp, children;
    if (!ref) {
      ref = 1;
    }
    if (mask) {
      this._setMaskedBy(mask);
      if (this.mask) {
        if (_debugLogging) {
          console.log("masking: " + this.entity.name + " with " + ref);
        }
        sp = new pc.StencilParameters({ref:ref++, func:pc.FUNC_EQUAL, zpass:pc.STENCILOP_INCREMENT});
        this._image._meshInstance.stencilFront = sp;
        this._image._meshInstance.stencilBack = sp;
        this._image._maskRef = ref;
        if (_debugLogging) {
          console.log("masking from: " + this.entity.name + " with " + ref);
        }
        mask = this.entity;
      }
      children = this.entity.getChildren();
      for (i = 0, l = children.length; i < l; i++) {
        if (children[i].element) {
          children[i].element._updateMask(mask, ref);
        }
      }
    } else {
      this._setMaskedBy(null);
      if (this.mask) {
        sp = new pc.StencilParameters({func:pc.FUNC_ALWAYS, zpass:pc.STENCILOP_REPLACE, ref:ref});
        this._image._meshInstance.stencilFront = sp;
        this._image._meshInstance.stencilBack = sp;
        this._image._maskRef = ref;
        if (_debugLogging) {
          console.log("masking from: " + this.entity.name + " with " + ref);
        }
        mask = this.entity;
      }
      children = this.entity.getChildren();
      for (i = 0, l = children.length; i < l; i++) {
        if (children[i].element) {
          children[i].element._updateMask(mask, ref);
        }
      }
    }
    return ref;
  }, _parseUpToScreen:function() {
    var result = {screen:null, mask:null};
    var parent = this.entity._parent;
    while (parent && !parent.screen) {
      if (parent.element && parent.element.mask) {
        if (!result.mask) {
          result.mask = parent;
        }
      }
      parent = parent.parent;
    }
    if (parent && parent.screen) {
      result.screen = parent;
    }
    return result;
  }, _onScreenResize:function(res) {
    this._anchorDirty = true;
    this._cornersDirty = true;
    this._worldCornersDirty = true;
    this._calculateSize();
    this.fire("screen:set:resolution", res);
  }, _onScreenSpaceChange:function() {
    this.fire("screen:set:screenspace", this.screen.screen.screenSpace);
  }, _onScreenRemove:function() {
    this._updateScreen(null);
  }, _calculateLocalAnchors:function() {
    var resx = 1000;
    var resy = 1000;
    var parent = this.entity._parent;
    if (parent && parent.element) {
      resx = parent.element.width;
      resy = parent.element.height;
    } else {
      if (this.screen) {
        var res = this.screen.screen.resolution;
        var scale = this.screen.screen.scale;
        resx = res.x / scale;
        resy = res.y / scale;
      }
    }
    this._localAnchor.set(this._anchor.x * resx, this._anchor.y * resy, this._anchor.z * resx, this._anchor.w * resy);
  }, getOffsetPosition:function(x, y) {
    var p = this.entity.getLocalPosition().clone();
    p.x += x;
    p.y += y;
    this._screenToWorld.transformPoint(p, p);
    return p;
  }, onLayersChanged:function(oldComp, newComp) {
    this.addModelToLayers(this._image ? this._image._model : this._text._model);
    oldComp.off("add", this.onLayerAdded, this);
    oldComp.off("remove", this.onLayerRemoved, this);
    newComp.on("add", this.onLayerAdded, this);
    newComp.on("remove", this.onLayerRemoved, this);
  }, onLayerAdded:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    if (this._image) {
      layer.addMeshInstances(this._image._model.meshInstances);
    } else {
      if (this._text) {
        layer.addMeshInstances(this._text._model.meshInstances);
      }
    }
  }, onLayerRemoved:function(layer) {
    var index = this.layers.indexOf(layer.id);
    if (index < 0) {
      return;
    }
    if (this._image) {
      layer.removeMeshInstances(this._image._model.meshInstances);
    } else {
      if (this._text) {
        layer.removeMeshInstances(this._text._model.meshInstances);
      }
    }
  }, onEnable:function() {
    ElementComponent._super.onEnable.call(this);
    if (this._image) {
      this._image.onEnable();
    }
    if (this._text) {
      this._text.onEnable();
    }
    if (this._group) {
      this._group.onEnable();
    }
    if (this.useInput && this.system.app.elementInput) {
      this.system.app.elementInput.addElement(this);
    }
    if (this.mask) {
      var maskDepth = this._getMaskDepth();
      if (maskDepth === 1) {
        this._topMask = true;
        if (topMasks.indexOf(this) < 0) {
          topMasks.push(this);
        }
      }
    }
    this.system.app.scene.on("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.on("add", this.onLayerAdded, this);
      this.system.app.scene.layers.on("remove", this.onLayerRemoved, this);
    }
  }, onDisable:function() {
    ElementComponent._super.onDisable.call(this);
    this.system.app.scene.off("set:layers", this.onLayersChanged, this);
    if (this.system.app.scene.layers) {
      this.system.app.scene.layers.off("add", this.onLayerAdded, this);
      this.system.app.scene.layers.off("remove", this.onLayerRemoved, this);
    }
    if (this._image) {
      this._image.onDisable();
    }
    if (this._text) {
      this._text.onDisable();
    }
    if (this._group) {
      this._group.onDisable();
    }
    if (this.system.app.elementInput && this.useInput) {
      this.system.app.elementInput.removeElement(this);
    }
    if (this._topMask) {
      var index = topMasks.indexOf(this);
      if (index >= 0) {
        topMasks.splice(index, 1);
      }
      this._topMask = false;
    }
  }, onRemove:function() {
    this.entity.off("insert", this._onInsert, this);
    this._unpatch();
    if (this._image) {
      this._image.destroy();
    }
    if (this._text) {
      this._text.destroy();
    }
    if (this.system.app.elementInput && this.useInput) {
      this.system.app.elementInput.removeElement(this);
    }
    if (this._topMask) {
      var index = topMasks.indexOf(this);
      if (index >= 0) {
        topMasks.splice(index, 1);
      }
      this._topMask = false;
    }
  }, _calculateSize:function() {
    if (!this.entity._parent && !this.screen) {
      return;
    }
    this._calculateLocalAnchors();
    var p = this.entity.getLocalPosition();
    this._setWidth(this._absRight - this._absLeft);
    this._setHeight(this._absTop - this._absBottom);
    p.x = this._margin.data[0] + this._width * this._pivot.data[0];
    p.y = this._margin.data[1] + this._height * this._pivot.data[1];
    this.entity.setLocalPosition(p);
    this._sizeDirty = false;
  }, _setWidth:function(w) {
    this._width = w;
    var i, l;
    var c = this.entity._children;
    for (i = 0, l = c.length; i < l; i++) {
      if (c[i].element) {
        c[i].element._anchorDirty = true;
        c[i].element._sizeDirty = true;
      }
    }
    this.fire("set:width", this._width);
    this.fire("resize", this._width, this._height);
  }, _setHeight:function(h) {
    this._height = h;
    var i, l;
    var c = this.entity._children;
    for (i = 0, l = c.length; i < l; i++) {
      if (c[i].element) {
        c[i].element._anchorDirty = true;
        c[i].element._sizeDirty = true;
      }
    }
    this.fire("set:height", this._height);
    this.fire("resize", this._width, this._height);
  }, addModelToLayers:function(model) {
    var layer;
    this._addedModel = model;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.addMeshInstances(model.meshInstances);
    }
  }, removeModelFromLayers:function(model) {
    var layer;
    this._addedModel = null;
    for (var i = 0; i < this.layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this.layers[i]);
      if (!layer) {
        continue;
      }
      layer.removeMeshInstances(model.meshInstances);
    }
  }});
  Object.defineProperty(ElementComponent.prototype, "type", {get:function() {
    return this._type;
  }, set:function(value) {
    if (value !== this._type) {
      this._type = value;
      if (this._image) {
        this._image.destroy();
        this._image = null;
      }
      if (this._text) {
        this._text.destroy();
        this._text = null;
      }
      if (value === pc.ELEMENTTYPE_IMAGE) {
        this._image = new pc.ImageElement(this);
      } else {
        if (value === pc.ELEMENTTYPE_TEXT) {
          this._text = new pc.TextElement(this);
        }
      }
    }
  }});
  Object.defineProperty(ElementComponent.prototype, "layers", {get:function() {
    return this._layers;
  }, set:function(value) {
    var i, layer;
    if (this._addedModel) {
      for (i = 0; i < this._layers.length; i++) {
        layer = this.system.app.scene.layers.getLayerById(this._layers[i]);
        if (layer) {
          layer.removeMeshInstances(this._addedModel.meshInstances);
        }
      }
    }
    this._layers = value;
    if (!this.enabled || !this.entity.enabled || !this._addedModel) {
      return;
    }
    for (i = 0; i < this._layers.length; i++) {
      layer = this.system.app.scene.layers.getLayerById(this._layers[i]);
      if (layer) {
        layer.addMeshInstances(this._addedModel.meshInstances);
      }
    }
  }});
  Object.defineProperty(ElementComponent.prototype, "drawOrder", {get:function() {
    return this._drawOrder;
  }, set:function(value) {
    this._drawOrder = value;
    this.fire("set:draworder", this._drawOrder);
  }});
  Object.defineProperty(ElementComponent.prototype, "_absLeft", {get:function() {
    return this._localAnchor.data[0] + this._margin.data[0];
  }});
  Object.defineProperty(ElementComponent.prototype, "_absRight", {get:function() {
    return this._localAnchor.data[2] - this._margin.data[2];
  }});
  Object.defineProperty(ElementComponent.prototype, "_absTop", {get:function() {
    return this._localAnchor.data[3] - this._margin.data[3];
  }});
  Object.defineProperty(ElementComponent.prototype, "_absBottom", {get:function() {
    return this._localAnchor.data[1] + this._margin.data[1];
  }});
  Object.defineProperty(ElementComponent.prototype, "margin", {get:function() {
    return this._margin;
  }, set:function(value) {
    this._margin.copy(value);
    this._calculateSize();
  }});
  Object.defineProperty(ElementComponent.prototype, "left", {get:function() {
    return this._margin.data[0];
  }, set:function(value) {
    this._margin.data[0] = value;
    var p = this.entity.getLocalPosition();
    var wr = this._absRight;
    var wl = this._localAnchor.data[0] + value;
    this._setWidth(wr - wl);
    p.x = value + this._width * this._pivot.data[0];
    this.entity.setLocalPosition(p);
  }});
  Object.defineProperty(ElementComponent.prototype, "right", {get:function() {
    return this._margin.data[2];
  }, set:function(value) {
    this._margin.data[2] = value;
    var p = this.entity.getLocalPosition();
    var wl = this._absLeft;
    var wr = this._localAnchor.data[2] - value;
    this._setWidth(wr - wl);
    p.x = this._localAnchor.data[2] - this._localAnchor.data[0] - value - this._width * (1 - this._pivot.data[0]);
    this.entity.setLocalPosition(p);
  }});
  Object.defineProperty(ElementComponent.prototype, "top", {get:function() {
    return this._margin.data[3];
  }, set:function(value) {
    this._margin.data[3] = value;
    var p = this.entity.getLocalPosition();
    var wb = this._absBottom;
    var wt = this._localAnchor.data[3] - value;
    this._setHeight(wt - wb);
    p.y = this._localAnchor.data[3] - this._localAnchor.data[1] - value - this._height * (1 - this._pivot.data[1]);
    this.entity.setLocalPosition(p);
  }});
  Object.defineProperty(ElementComponent.prototype, "bottom", {get:function() {
    return this._margin.data[1];
  }, set:function(value) {
    this._margin.data[1] = value;
    var p = this.entity.getLocalPosition();
    var wt = this._absTop;
    var wb = this._localAnchor.data[1] + value;
    this._setHeight(wt - wb);
    p.y = value + this._height * this._pivot.data[1];
    this.entity.setLocalPosition(p);
  }});
  Object.defineProperty(ElementComponent.prototype, "width", {get:function() {
    return this._width;
  }, set:function(value) {
    this._width = value;
    var p = this.entity.getLocalPosition().data;
    var pvt = this._pivot.data;
    this._margin.data[0] = p[0] - this._width * pvt[0];
    this._margin.data[2] = this._localAnchor.data[2] - this._localAnchor.data[0] - this._width - this._margin.data[0];
    var i, l;
    var c = this.entity._children;
    for (i = 0, l = c.length; i < l; i++) {
      if (c[i].element) {
        c[i].element._anchorDirty = true;
        c[i].element._sizeDirty = true;
      }
    }
    this.fire("set:width", this._width);
    this.fire("resize", this._width, this._height);
  }});
  Object.defineProperty(ElementComponent.prototype, "height", {get:function() {
    return this._height;
  }, set:function(value) {
    this._height = value;
    var p = this.entity.getLocalPosition().data;
    var pvt = this._pivot.data;
    this._margin.data[1] = p[1] - this._height * pvt[1];
    this._margin.data[3] = this._localAnchor.data[3] - this._localAnchor.data[1] - this._height - this._margin.data[1];
    var i, l;
    var c = this.entity._children;
    for (i = 0, l = c.length; i < l; i++) {
      if (c[i].element) {
        c[i].element._anchorDirty = true;
        c[i].element._sizeDirty = true;
      }
    }
    this.fire("set:height", this._height);
    this.fire("resize", this._width, this._height);
  }});
  Object.defineProperty(ElementComponent.prototype, "pivot", {get:function() {
    return this._pivot;
  }, set:function(value) {
    var prevX = this._pivot.x;
    var prevY = this._pivot.y;
    if (value instanceof pc.Vec2) {
      this._pivot.set(value.x, value.y);
    } else {
      this._pivot.set(value[0], value[1]);
    }
    var mx = this._margin.data[0] + this._margin.data[2];
    var dx = this._pivot.x - prevX;
    this._margin.data[0] += mx * dx;
    this._margin.data[2] -= mx * dx;
    var my = this._margin.data[1] + this._margin.data[3];
    var dy = this._pivot.y - prevY;
    this._margin.data[1] += my * dy;
    this._margin.data[3] -= my * dy;
    this._onScreenResize();
    this.fire("set:pivot", this._pivot);
  }});
  Object.defineProperty(ElementComponent.prototype, "anchor", {get:function() {
    return this._anchor;
  }, set:function(value) {
    if (value instanceof pc.Vec4) {
      this._anchor.set(value.x, value.y, value.z, value.w);
    } else {
      this._anchor.set(value[0], value[1], value[2], value[3]);
    }
    if (!this.entity._parent && !this.screen) {
      this._calculateLocalAnchors();
    } else {
      this._calculateSize();
    }
    this._anchorDirty = true;
    if (!this.entity._dirtyLocal) {
      this.entity._dirtify(true);
    }
    this.fire("set:anchor", this._anchor);
  }});
  Object.defineProperty(ElementComponent.prototype, "screenCorners", {get:function() {
    if (!this._cornersDirty || !this.screen) {
      return this._screenCorners;
    }
    var parentBottomLeft = this.entity.parent && this.entity.parent.element && this.entity.parent.element.screenCorners[0];
    this._screenCorners[0].set(this._absLeft, this._absBottom, 0);
    this._screenCorners[1].set(this._absRight, this._absBottom, 0);
    this._screenCorners[2].set(this._absRight, this._absTop, 0);
    this._screenCorners[3].set(this._absLeft, this._absTop, 0);
    var screenSpace = this.screen.screen.screenSpace;
    for (var i = 0; i < 4; i++) {
      this._screenTransform.transformPoint(this._screenCorners[i], this._screenCorners[i]);
      if (screenSpace) {
        this._screenCorners[i].scale(this.screen.screen.scale);
      }
      if (parentBottomLeft) {
        this._screenCorners[i].add(parentBottomLeft);
      }
    }
    this._cornersDirty = false;
    this._canvasCornersDirty = true;
    this._worldCornersDirty = true;
    return this._screenCorners;
  }});
  Object.defineProperty(ElementComponent.prototype, "canvasCorners", {get:function() {
    if (!this._canvasCornersDirty || !this.screen || !this.screen.screen.screenSpace) {
      return this._canvasCorners;
    }
    var device = this.system.app.graphicsDevice;
    var screenCorners = this.screenCorners;
    var sx = device.canvas.clientWidth / device.width;
    var sy = device.canvas.clientHeight / device.height;
    for (var i = 0; i < 4; i++) {
      this._canvasCorners[i].set(screenCorners[i].x * sx, (device.height - screenCorners[i].y) * sy);
    }
    this._canvasCornersDirty = false;
    return this._canvasCorners;
  }});
  Object.defineProperty(ElementComponent.prototype, "worldCorners", {get:function() {
    if (!this._worldCornersDirty) {
      return this._worldCorners;
    }
    if (this.screen) {
      var screenCorners = this.screenCorners;
      if (!this.screen.screen.screenSpace) {
        matA.copy(this.screen.screen._screenMatrix);
        matA.data[13] = -matA.data[13];
        matA.mul2(this.screen.getWorldTransform(), matA);
        for (var i = 0; i < 4; i++) {
          matA.transformPoint(screenCorners[i], this._worldCorners[i]);
        }
      }
    } else {
      var localPos = this.entity.getLocalPosition();
      matA.setTranslate(-localPos.x, -localPos.y, -localPos.z);
      matB.setTRS(pc.Vec3.ZERO, this.entity.getLocalRotation(), this.entity.getLocalScale());
      matC.setTranslate(localPos.x, localPos.y, localPos.z);
      matD.copy(this.entity.parent.getWorldTransform());
      matD.mul(matC).mul(matB).mul(matA);
      vecA.set(localPos.x - this.pivot.x * this.width, localPos.y - this.pivot.y * this.height, localPos.z);
      matD.transformPoint(vecA, this._worldCorners[0]);
      vecA.set(localPos.x + (1 - this.pivot.x) * this.width, localPos.y - this.pivot.y * this.height, localPos.z);
      matD.transformPoint(vecA, this._worldCorners[1]);
      vecA.set(localPos.x + (1 - this.pivot.x) * this.width, localPos.y + (1 - this.pivot.y) * this.height, localPos.z);
      matD.transformPoint(vecA, this._worldCorners[2]);
      vecA.set(localPos.x - this.pivot.x * this.width, localPos.y + (1 - this.pivot.y) * this.height, localPos.z);
      matD.transformPoint(vecA, this._worldCorners[3]);
    }
    this._worldCornersDirty = false;
    return this._worldCorners;
  }});
  Object.defineProperty(ElementComponent.prototype, "textWidth", {get:function() {
    return this._text ? this._text.width : 0;
  }});
  Object.defineProperty(ElementComponent.prototype, "textHeight", {get:function() {
    return this._text ? this._text.height : 0;
  }});
  Object.defineProperty(ElementComponent.prototype, "useInput", {get:function() {
    return this._useInput;
  }, set:function(value) {
    if (this._useInput === value) {
      return;
    }
    this._useInput = value;
    if (this.system.app.elementInput) {
      if (value) {
        if (this.enabled && this.entity.enabled) {
          this.system.app.elementInput.addElement(this);
        }
      } else {
        this.system.app.elementInput.removeElement(this);
      }
    }
    this.fire("set:useInput", value);
  }});
  Object.defineProperty(ElementComponent.prototype, "batchGroupId", {get:function() {
    return this._batchGroupId;
  }, set:function(value) {
    if (this._batchGroupId === value) {
      return;
    }
    if (this._batchGroupId >= 0) {
      this.system.app.batcher._markGroupDirty(this._batchGroupId);
    }
    if (value >= 0) {
      this.system.app.batcher._markGroupDirty(value);
    }
    if (value < 0 && this._batchGroupId >= 0 && this.enabled && this.entity.enabled) {
      if (this._image._model) {
        this.addModelToLayers(this._image._model);
      } else {
        if (this._text._model) {
          this.addModelToLayers(this._text._model);
        }
      }
    }
    this._batchGroupId = value;
  }});
  var _define = function(name) {
    Object.defineProperty(ElementComponent.prototype, name, {get:function() {
      if (this._text) {
        return this._text[name];
      } else {
        if (this._image) {
          return this._image[name];
        } else {
          return null;
        }
      }
    }, set:function(value) {
      if (this._text) {
        this._text[name] = value;
      } else {
        if (this._image) {
          this._image[name] = value;
        }
      }
    }});
  };
  _define("fontSize");
  _define("color");
  _define("font");
  _define("fontAsset");
  _define("spacing");
  _define("lineHeight");
  _define("wrapLines");
  _define("lines");
  _define("alignment");
  _define("autoWidth");
  _define("autoHeight");
  _define("text");
  _define("texture");
  _define("textureAsset");
  _define("material");
  _define("materialAsset");
  _define("sprite");
  _define("spriteAsset");
  _define("spriteFrame");
  _define("pixelsPerUnit");
  _define("opacity");
  _define("rect");
  _define("mask");
  return {ElementComponent:ElementComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var nineSliceBasePS = ["varying vec2 vMask;", "varying vec2 vTiledUv;", "uniform vec4 innerOffset;", "uniform vec2 outerScale;", "uniform vec4 atlasRect;", "vec2 nineSlicedUv;"].join("\n");
  var nineSliceUvPs = ["vec2 tileMask = step(vMask, vec2(0.99999));", "vec2 clampedUv = mix(innerOffset.xy*0.5, vec2(1.0) - innerOffset.zw*0.5, fract(vTiledUv));", "clampedUv = clampedUv * atlasRect.zw + atlasRect.xy;", "nineSlicedUv = vUv0 * tileMask + clampedUv * (vec2(1.0) - tileMask);"].join("\n");
  var ElementComponentSystem = function ElementComponentSystem(app) {
    this.id = "element";
    this.app = app;
    app.systems.add(this.id, this);
    this.ComponentType = pc.ElementComponent;
    this.DataType = pc.ElementComponentData;
    this.schema = _schema;
    this._defaultTexture = new pc.Texture(app.graphicsDevice, {width:1, height:1, format:pc.PIXELFORMAT_R8_G8_B8_A8});
    var pixels = this._defaultTexture.lock();
    var pixelData = new Uint8Array(4);
    pixelData[0] = 255.0;
    pixelData[1] = 255.0;
    pixelData[2] = 255.0;
    pixelData[3] = 255.0;
    pixels.set(pixelData);
    this._defaultTexture.unlock();
    this._maskMaterials = {};
    this.defaultImageMaterial = new pc.StandardMaterial;
    this.defaultImageMaterial.diffuse.set(0, 0, 0);
    this.defaultImageMaterial.emissive.set(0.5, 0.5, 0.5);
    this.defaultImageMaterial.emissiveMap = this._defaultTexture;
    this.defaultImageMaterial.emissiveTint = true;
    this.defaultImageMaterial.opacityMap = this._defaultTexture;
    this.defaultImageMaterial.opacityMapChannel = "a";
    this.defaultImageMaterial.opacityTint = true;
    this.defaultImageMaterial.opacity = 0;
    this.defaultImageMaterial.useLighting = false;
    this.defaultImageMaterial.useGammaTonemap = false;
    this.defaultImageMaterial.useFog = false;
    this.defaultImageMaterial.useSkybox = false;
    this.defaultImageMaterial.blendType = pc.BLEND_PREMULTIPLIED;
    this.defaultImageMaterial.depthWrite = false;
    this.defaultImageMaterial.update();
    this.defaultImageMaskMaterial = this.defaultImageMaterial.clone();
    this.defaultImageMaskMaterial.alphaTest = 1;
    this.defaultImageMaskMaterial.redWrite = false;
    this.defaultImageMaskMaterial.greenWrite = false;
    this.defaultImageMaskMaterial.blueWrite = false;
    this.defaultImageMaskMaterial.alphaWrite = false;
    this.defaultImageMaskMaterial.update();
    this.defaultImage9SlicedMaterial = this.defaultImageMaterial.clone();
    this.defaultImage9SlicedMaterial.chunks.basePS = pc.shaderChunks.basePS + nineSliceBasePS;
    this.defaultImage9SlicedMaterial.chunks.startPS = pc.shaderChunks.startPS + "nineSlicedUv = vUv0;\n";
    this.defaultImage9SlicedMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace("$UV", "nineSlicedUv");
    this.defaultImage9SlicedMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace("$UV", "nineSlicedUv");
    this.defaultImage9SlicedMaterial.chunks.transformVS = "#define NINESLICED\n" + pc.shaderChunks.transformVS;
    this.defaultImage9SlicedMaterial.chunks.uv0VS = pc.shaderChunks.uv9SliceVS;
    this.defaultImage9SlicedMaterial.update();
    this.defaultImage9TiledMaterial = this.defaultImage9SlicedMaterial.clone();
    this.defaultImage9TiledMaterial.chunks.basePS = pc.shaderChunks.basePS + "#define NINESLICETILED\n" + nineSliceBasePS;
    this.defaultImage9TiledMaterial.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;
    this.defaultImage9TiledMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace("$UV", "nineSlicedUv, -1000.0");
    this.defaultImage9TiledMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace("$UV", "nineSlicedUv, -1000.0");
    this.defaultImage9TiledMaterial.update();
    this.defaultImage9SlicedMaskMaterial = this.defaultImage9SlicedMaterial.clone();
    this.defaultImage9SlicedMaskMaterial.alphaTest = 1;
    this.defaultImage9SlicedMaskMaterial.redWrite = false;
    this.defaultImage9SlicedMaskMaterial.greenWrite = false;
    this.defaultImage9SlicedMaskMaterial.blueWrite = false;
    this.defaultImage9SlicedMaskMaterial.alphaWrite = false;
    this.defaultImage9SlicedMaskMaterial.update();
    this.defaultImage9TiledMaskMaterial = this.defaultImage9TiledMaterial.clone();
    this.defaultImage9TiledMaskMaterial.alphaTest = 1;
    this.defaultImage9TiledMaskMaterial.redWrite = false;
    this.defaultImage9TiledMaskMaterial.greenWrite = false;
    this.defaultImage9TiledMaskMaterial.blueWrite = false;
    this.defaultImage9TiledMaskMaterial.alphaWrite = false;
    this.defaultImage9TiledMaskMaterial.update();
    this.defaultScreenSpaceImageMaterial = this.defaultImageMaterial.clone();
    this.defaultScreenSpaceImageMaterial.depthTest = false;
    this.defaultScreenSpaceImageMaterial.update();
    this.defaultScreenSpaceImage9SlicedMaterial = this.defaultImage9SlicedMaterial.clone();
    this.defaultScreenSpaceImage9SlicedMaterial.depthTest = false;
    this.defaultScreenSpaceImage9SlicedMaterial.update();
    this.defaultScreenSpaceImage9TiledMaterial = this.defaultScreenSpaceImage9SlicedMaterial.clone();
    this.defaultScreenSpaceImage9TiledMaterial.chunks.basePS = pc.shaderChunks.basePS + "#define NINESLICETILED\n" + nineSliceBasePS;
    this.defaultScreenSpaceImage9TiledMaterial.chunks.startPS = pc.shaderChunks.startPS + nineSliceUvPs;
    this.defaultScreenSpaceImage9TiledMaterial.chunks.emissivePS = pc.shaderChunks.emissivePS.replace("$UV", "nineSlicedUv, -1000.0");
    this.defaultScreenSpaceImage9TiledMaterial.chunks.opacityPS = pc.shaderChunks.opacityPS.replace("$UV", "nineSlicedUv, -1000.0");
    this.defaultScreenSpaceImage9TiledMaterial.update();
    this.defaultScreenSpaceImageMask9SlicedMaterial = this.defaultScreenSpaceImage9SlicedMaterial.clone();
    this.defaultScreenSpaceImageMask9SlicedMaterial.alphaTest = 1;
    this.defaultScreenSpaceImageMask9SlicedMaterial.redWrite = false;
    this.defaultScreenSpaceImageMask9SlicedMaterial.greenWrite = false;
    this.defaultScreenSpaceImageMask9SlicedMaterial.blueWrite = false;
    this.defaultScreenSpaceImageMask9SlicedMaterial.alphaWrite = false;
    this.defaultScreenSpaceImageMask9SlicedMaterial.update();
    this.defaultScreenSpaceImageMask9TiledMaterial = this.defaultScreenSpaceImage9TiledMaterial.clone();
    this.defaultScreenSpaceImageMask9TiledMaterial.alphaTest = 1;
    this.defaultScreenSpaceImageMask9TiledMaterial.redWrite = false;
    this.defaultScreenSpaceImageMask9TiledMaterial.greenWrite = false;
    this.defaultScreenSpaceImageMask9TiledMaterial.blueWrite = false;
    this.defaultScreenSpaceImageMask9TiledMaterial.alphaWrite = false;
    this.defaultScreenSpaceImageMask9TiledMaterial.update();
    this.defaultScreenSpaceImageMaskMaterial = this.defaultScreenSpaceImageMaterial.clone();
    this.defaultScreenSpaceImageMaskMaterial.alphaTest = 1;
    this.defaultScreenSpaceImageMaskMaterial.redWrite = false;
    this.defaultScreenSpaceImageMaskMaterial.greenWrite = false;
    this.defaultScreenSpaceImageMaskMaterial.blueWrite = false;
    this.defaultScreenSpaceImageMaskMaterial.alphaWrite = false;
    this.defaultScreenSpaceImageMaskMaterial.update();
    this.defaultTextMaterial = new pc.StandardMaterial;
    this.defaultTextMaterial.msdfMap = this._defaultTexture;
    this.defaultTextMaterial.useLighting = false;
    this.defaultTextMaterial.useGammaTonemap = false;
    this.defaultTextMaterial.useFog = false;
    this.defaultTextMaterial.useSkybox = false;
    this.defaultTextMaterial.diffuse.set(0, 0, 0);
    this.defaultTextMaterial.emissive.set(1, 1, 1);
    this.defaultTextMaterial.opacity = 0.5;
    this.defaultTextMaterial.blendType = pc.BLEND_PREMULTIPLIED;
    this.defaultTextMaterial.depthWrite = false;
    this.defaultTextMaterial.update();
    this.defaultScreenSpaceTextMaterial = this.defaultTextMaterial.clone();
    this.defaultScreenSpaceTextMaterial.depthTest = false;
    this.defaultScreenSpaceTextMaterial.update();
    this.defaultImageMaterials = [this.defaultImageMaterial, this.defaultImageMaskMaterial, this.defaultImage9SlicedMaterial, this.defaultImage9TiledMaterial, this.defaultImage9SlicedMaskMaterial, this.defaultImage9TiledMaskMaterial, this.defaultScreenSpaceImageMaterial, this.defaultScreenSpaceImage9SlicedMaterial, this.defaultScreenSpaceImage9TiledMaterial, this.defaultScreenSpaceImageMask9SlicedMaterial, this.defaultScreenSpaceImageMask9TiledMaterial, this.defaultScreenSpaceImageMaskMaterial];
    this.on("beforeremove", this.onRemoveComponent, this);
  };
  ElementComponentSystem = pc.inherits(ElementComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ElementComponent.prototype, _schema);
  pc.extend(ElementComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    if (data.anchor !== undefined) {
      if (data.anchor instanceof pc.Vec4) {
        component.anchor.copy(data.anchor);
      } else {
        component.anchor.set(data.anchor[0], data.anchor[1], data.anchor[2], data.anchor[3]);
      }
    }
    if (data.pivot !== undefined) {
      if (data.pivot instanceof pc.Vec2) {
        component.pivot.copy(data.pivot);
      } else {
        component.pivot.set(data.pivot[0], data.pivot[1]);
      }
    }
    var splitHorAnchors = Math.abs(component.anchor.x - component.anchor.z) > 0.001;
    var splitVerAnchors = Math.abs(component.anchor.y - component.anchor.w) > 0.001;
    var _marginChange = false;
    if (data.margin !== undefined) {
      if (data.margin instanceof pc.Vec4) {
        component.margin.copy(data.margin);
      } else {
        component._margin.set(data.margin[0], data.margin[1], data.margin[2], data.margin[3]);
      }
      _marginChange = true;
    }
    if (data.left !== undefined) {
      component._margin.x = data.left;
      _marginChange = true;
    }
    if (data.bottom !== undefined) {
      component._margin.y = data.bottom;
      _marginChange = true;
    }
    if (data.right !== undefined) {
      component._margin.z = data.right;
      _marginChange = true;
    }
    if (data.top !== undefined) {
      component._margin.w = data.top;
      _marginChange = true;
    }
    if (_marginChange) {
      component.margin = component._margin;
    }
    if (data.width !== undefined && !splitHorAnchors) {
      component.width = data.width;
    }
    if (data.height !== undefined && !splitVerAnchors) {
      component.height = data.height;
    }
    if (data.enabled !== undefined) {
      component.enabled = data.enabled;
    }
    if (data.useInput !== undefined) {
      component.useInput = data.useInput;
    }
    component.batchGroupId = data.batchGroupId === undefined || data.batchGroupId === null ? -1 : data.batchGroupId;
    if (data.layers && pc.type(data.layers) === "array") {
      component.layers = data.layers.slice(0);
    }
    component.type = data.type;
    if (component.type === pc.ELEMENTTYPE_IMAGE) {
      if (data.rect !== undefined) {
        if (data.rect instanceof pc.Vec4) {
          component.rect.copy(data.rect);
        } else {
          component.rect.set(data.rect[0], data.rect[1], data.rect[2], data.rect[3]);
        }
      }
      if (data.color !== undefined) {
        if (data.color instanceof pc.Color) {
          component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);
        } else {
          component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);
        }
        component.color = component.color;
      } else {
        var opacity = data.opacity || 1;
        component.color.set(1, 1, 1, opacity);
        component.color = component.color;
      }
      if (data.opacity !== undefined) {
        component.opacity = data.opacity;
      } else {
        component.opacity = 1;
      }
      if (data.textureAsset !== undefined) {
        component.textureAsset = data.textureAsset;
      }
      if (data.texture) {
        component.texture = data.texture;
      }
      if (data.spriteAsset !== undefined) {
        component.spriteAsset = data.spriteAsset;
      }
      if (data.sprite) {
        component.sprite = data.sprite;
      }
      if (data.spriteFrame !== undefined) {
        component.spriteFrame = data.spriteFrame;
      }
      if (data.pixelsPerUnit !== undefined && data.pixelsPerUnit !== null) {
        component.pixelsPerUnit = data.pixelsPerUnit;
      }
      if (data.materialAsset !== undefined) {
        component.materialAsset = data.materialAsset;
      }
      if (data.material) {
        component.material = data.material;
      }
      if (data.mask !== undefined) {
        component.mask = data.mask;
      }
    } else {
      if (component.type === pc.ELEMENTTYPE_TEXT) {
        if (data.autoWidth !== undefined) {
          component.autoWidth = data.autoWidth;
        }
        if (data.autoHeight !== undefined) {
          component.autoHeight = data.autoHeight;
        }
        if (data.text !== undefined) {
          component.text = data.text;
        }
        if (data.color !== undefined) {
          if (data.color instanceof pc.Color) {
            component.color.set(data.color.data[0], data.color.data[1], data.color.data[2], data.opacity !== undefined ? data.opacity : 1);
          } else {
            component.color.set(data.color[0], data.color[1], data.color[2], data.opacity !== undefined ? data.opacity : 1);
          }
          component.color = component.color;
        }
        if (data.opacity !== undefined) {
          component.opacity = data.opacity;
        }
        if (data.spacing !== undefined) {
          component.spacing = data.spacing;
        }
        if (data.fontSize !== undefined) {
          component.fontSize = data.fontSize;
          if (!data.lineHeight) {
            component.lineHeight = data.fontSize;
          }
        }
        if (data.lineHeight !== undefined) {
          component.lineHeight = data.lineHeight;
        }
        if (data.wrapLines !== undefined) {
          component.wrapLines = data.wrapLines;
        }
        if (data.fontAsset !== undefined) {
          component.fontAsset = data.fontAsset;
        }
        if (data.font !== undefined) {
          component.font = data.font;
        }
        if (data.alignment !== undefined) {
          component.alignment = data.alignment;
        }
      } else {
      }
    }
    var result = component._parseUpToScreen();
    if (result.screen) {
      component._updateScreen(result.screen);
    }
    ElementComponentSystem._super.initializeComponentData.call(this, component, data, properties);
  }, onRemoveComponent:function(entity, component) {
    component.onRemove();
  }, cloneComponent:function(entity, clone) {
    var source = entity.element;
    return this.addComponent(clone, {enabled:source.enabled, width:source.width, height:source.height, anchor:source.anchor.clone(), pivot:source.pivot.clone(), margin:source.margin.clone(), alignment:source.alignment && source.alignment.clone() || source.alignment, autoWidth:source.autoWidth, autoHeight:source.autoHeight, type:source.type, rect:source.rect && source.rect.clone() || source.rect, materialAsset:source.materialAsset, material:source.material, color:source.color && source.color.clone() || 
    source.color, opacity:source.opacity, textureAsset:source.textureAsset, texture:source.texture, spriteAsset:source.spriteAsset, sprite:source.sprite, spriteFrame:source.spriteFrame, pixelsPerUnit:source.pixelsPerUnit, text:source.text, spacing:source.spacing, lineHeight:source.lineHeight, wrapLines:source.wrapLines, layers:source.layers, fontSize:source.fontSize, fontAsset:source.fontAsset, font:source.font, useInput:source.useInput, batchGroupId:source.batchGroupId, mask:source.mask});
  }});
  return {ElementComponentSystem:ElementComponentSystem};
}());
pc.extend(pc, function() {
  var ElementComponentData = function() {
    this.enabled = true;
  };
  ElementComponentData = pc.inherits(ElementComponentData, pc.ComponentData);
  return {ElementComponentData:ElementComponentData};
}());
pc.extend(pc, function() {
  var ImageElement = function ImageElement(element) {
    this._element = element;
    this._entity = element.entity;
    this._system = element.system;
    this._textureAsset = null;
    this._texture = null;
    this._materialAsset = null;
    this._material = null;
    this._spriteAsset = null;
    this._sprite = null;
    this._spriteFrame = 0;
    this._pixelsPerUnit = null;
    this._rect = new pc.Vec4(0, 0, 1, 1);
    this._color = new pc.Color(1, 1, 1, 1);
    this._mask = false;
    this._maskRef = 0;
    this._positions = [];
    this._normals = [];
    this._uvs = [];
    this._indices = [];
    this._outerScale = new pc.Vec2;
    this._innerOffset = new pc.Vec4;
    this._atlasRect = new pc.Vec4;
    this._defaultMesh = this._createMesh();
    this._mesh = this._defaultMesh;
    this._node = new pc.GraphNode;
    this._model = new pc.Model;
    this._model.graph = this._node;
    this._meshInstance = new pc.MeshInstance(this._node, this._mesh, this._material);
    this._meshInstance.castShadow = false;
    this._meshInstance.receiveShadow = false;
    this._model.meshInstances.push(this._meshInstance);
    this._drawOrder = 0;
    this._updateAabbFunc = this._updateAabb.bind(this);
    this._entity.addChild(this._model.graph);
    this._model._entity = this._entity;
    this._onScreenChange(this._element.screen);
    this._element.on("resize", this._onParentResize, this);
    this._element.on("screen:set:screenspace", this._onScreenSpaceChange, this);
    this._element.on("set:screen", this._onScreenChange, this);
    this._element.on("set:draworder", this._onDrawOrderChange, this);
    this._element.on("screen:set:resolution", this._onResolutionChange, this);
  };
  pc.extend(ImageElement.prototype, {destroy:function() {
    if (this._model) {
      this._element.removeModelFromLayers(this._model);
      this._meshInstance.mesh = this._defaultMesh;
      this._model.destroy();
      this._model = null;
    }
    this._element.off("resize", this._onParentResize, this);
    this._element.off("screen:set:screenspace", this._onScreenSpaceChange, this);
    this._element.off("set:screen", this._onScreenChange, this);
    this._element.off("set:draworder", this._onDrawOrderChange, this);
    this._element.off("screen:set:resolution", this._onResolutionChange, this);
  }, _onResolutionChange:function(res) {
  }, _onParentResize:function() {
    if (this._mesh) {
      this._updateMesh(this._mesh);
    }
  }, _onScreenSpaceChange:function(value) {
    this._updateMaterial(value);
  }, _onScreenChange:function(screen) {
    if (screen) {
      this._updateMaterial(screen.screen.screenSpace);
    } else {
      this._updateMaterial(false);
    }
  }, _onDrawOrderChange:function(order) {
    this._drawOrder = order;
    if (this._meshInstance) {
      this._meshInstance.drawOrder = order;
    }
  }, _hasUserMaterial:function() {
    return !!this._materialAsset || !!this._material && this._system.defaultImageMaterials.indexOf(this._material) === -1;
  }, _use9Slicing:function() {
    return this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED);
  }, _updateMaterial:function(screenSpace) {
    if (screenSpace) {
      if (!this._hasUserMaterial()) {
        if (this._mask) {
          if (this.sprite) {
            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {
              this._material = this._system.defaultScreenSpaceImageMask9SlicedMaterial;
            } else {
              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {
                this._material = this._system.defaultScreenSpaceImageMask9TiledMaterial;
              } else {
                this._material = this._system.defaultScreenSpaceImageMaskMaterial;
              }
            }
          } else {
            this._material = this._system.defaultScreenSpaceImageMaskMaterial;
          }
        } else {
          if (this.sprite) {
            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {
              this._material = this._system.defaultScreenSpaceImage9SlicedMaterial;
            } else {
              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {
                this._material = this._system.defaultScreenSpaceImage9TiledMaterial;
              } else {
                this._material = this._system.defaultScreenSpaceImageMaterial;
              }
            }
          } else {
            this._material = this._system.defaultScreenSpaceImageMaterial;
          }
        }
      }
      if (this._meshInstance) {
        this._meshInstance.cull = false;
      }
    } else {
      if (!this._hasUserMaterial()) {
        if (this._mask) {
          if (this.sprite) {
            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {
              this._material = this._system.defaultImage9SlicedMaskMaterial;
            } else {
              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {
                this._material = this._system.defaultImage9TiledMaskMaterial;
              } else {
                this._material = this._system.defaultImageMaskMaterial;
              }
            }
          } else {
            this._material = this._system.defaultImageMaskMaterial;
          }
        } else {
          if (this.sprite) {
            if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED) {
              this._material = this._system.defaultImage9SlicedMaterial;
            } else {
              if (this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED) {
                this._material = this._system.defaultImage9TiledMaterial;
              } else {
                this._material = this._system.defaultImageMaterial;
              }
            }
          } else {
            this._material = this._system.defaultImageMaterial;
          }
        }
      }
      if (this._meshInstance) {
        this._meshInstance.cull = true;
      }
    }
    if (this._meshInstance) {
      this._meshInstance.material = this._material;
      this._meshInstance.screenSpace = screenSpace;
      this._meshInstance.layer = screenSpace ? pc.scene.LAYER_HUD : pc.scene.LAYER_WORLD;
    }
  }, _createMesh:function() {
    var w = this._element.width;
    var h = this._element.height;
    this._positions[0] = 0;
    this._positions[1] = 0;
    this._positions[2] = 0;
    this._positions[3] = w;
    this._positions[4] = 0;
    this._positions[5] = 0;
    this._positions[6] = w;
    this._positions[7] = h;
    this._positions[8] = 0;
    this._positions[9] = 0;
    this._positions[10] = h;
    this._positions[11] = 0;
    for (var i = 0; i < 12; i += 3) {
      this._normals[i] = 0;
      this._normals[i + 1] = 0;
      this._normals[i + 2] = 1;
    }
    this._uvs[0] = this._rect.data[0];
    this._uvs[1] = this._rect.data[1];
    this._uvs[2] = this._rect.data[0] + this._rect.data[2];
    this._uvs[3] = this._rect.data[1];
    this._uvs[4] = this._rect.data[0] + this._rect.data[2];
    this._uvs[5] = this._rect.data[1] + this._rect.data[3];
    this._uvs[6] = this._rect.data[0];
    this._uvs[7] = this._rect.data[1] + this._rect.data[3];
    this._indices[0] = 0;
    this._indices[1] = 1;
    this._indices[2] = 3;
    this._indices[3] = 2;
    this._indices[4] = 3;
    this._indices[5] = 1;
    var mesh = pc.createMesh(this._system.app.graphicsDevice, this._positions, {uvs:this._uvs, normals:this._normals, indices:this._indices});
    this._updateMesh(mesh);
    return mesh;
  }, _updateMesh:function(mesh) {
    var i;
    var w = this._element.width;
    var h = this._element.height;
    if (this._element.screen) {
      this._updateMaterial(this._element.screen.screen.screenSpace);
    } else {
      this._updateMaterial();
    }
    if (this._meshInstance) {
      this._meshInstance._aabbVer = -1;
    }
    if (this.sprite && (this.sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this.sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {
      var frameData = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];
      var borderWidthScale = 2 / frameData.rect.z;
      var borderHeightScale = 2 / frameData.rect.w;
      this._innerOffset.set(frameData.border.x * borderWidthScale, frameData.border.y * borderHeightScale, frameData.border.z * borderWidthScale, frameData.border.w * borderHeightScale);
      var tex = this.sprite.atlas.texture;
      this._atlasRect.set(frameData.rect.x / tex.width, frameData.rect.y / tex.height, frameData.rect.z / tex.width, frameData.rect.w / tex.height);
      var ppu = this._pixelsPerUnit !== null ? this._pixelsPerUnit : this.sprite.pixelsPerUnit;
      var scaleMulX = frameData.rect.z / ppu;
      var scaleMulY = frameData.rect.w / ppu;
      this._outerScale.set(Math.max(w, this._innerOffset.x * scaleMulX), Math.max(h, this._innerOffset.y * scaleMulY));
      var scaleX = scaleMulX;
      var scaleY = scaleMulY;
      this._outerScale.x /= scaleMulX;
      this._outerScale.y /= scaleMulY;
      scaleX *= pc.math.clamp(w / (this._innerOffset.x * scaleMulX), 0.0001, 1);
      scaleY *= pc.math.clamp(h / (this._innerOffset.y * scaleMulY), 0.0001, 1);
      if (this._meshInstance) {
        this._meshInstance.setParameter("innerOffset", this._innerOffset.data);
        this._meshInstance.setParameter("atlasRect", this._atlasRect.data);
        this._meshInstance.setParameter("outerScale", this._outerScale.data, 4294967295);
        this._meshInstance._updateAabbFunc = this._updateAabbFunc;
      }
      if (this._node) {
        this._node.setLocalScale(scaleX, scaleY, 1);
        this._node.setLocalPosition((0.5 - this._element.pivot.x) * w, (0.5 - this._element.pivot.y) * h, 0);
      }
    } else {
      this._positions[0] = 0;
      this._positions[1] = 0;
      this._positions[2] = 0;
      this._positions[3] = w;
      this._positions[4] = 0;
      this._positions[5] = 0;
      this._positions[6] = w;
      this._positions[7] = h;
      this._positions[8] = 0;
      this._positions[9] = 0;
      this._positions[10] = h;
      this._positions[11] = 0;
      var hp = this._element.pivot.data[0];
      var vp = this._element.pivot.data[1];
      for (i = 0; i < this._positions.length; i += 3) {
        this._positions[i] -= hp * w;
        this._positions[i + 1] -= vp * h;
      }
      w = 1;
      h = 1;
      var rect = this._rect;
      if (this._sprite && this._sprite.frameKeys[this._spriteFrame] && this._sprite.atlas) {
        var frame = this._sprite.atlas.frames[this._sprite.frameKeys[this._spriteFrame]];
        if (frame) {
          rect = frame.rect;
          w = this._sprite.atlas.texture.width;
          h = this._sprite.atlas.texture.height;
        }
      }
      this._uvs[0] = rect.data[0] / w;
      this._uvs[1] = rect.data[1] / h;
      this._uvs[2] = (rect.data[0] + rect.data[2]) / w;
      this._uvs[3] = rect.data[1] / h;
      this._uvs[4] = (rect.data[0] + rect.data[2]) / w;
      this._uvs[5] = (rect.data[1] + rect.data[3]) / h;
      this._uvs[6] = rect.data[0] / w;
      this._uvs[7] = (rect.data[1] + rect.data[3]) / h;
      var vb = mesh.vertexBuffer;
      var it = new pc.VertexIterator(vb);
      var numVertices = 4;
      for (i = 0; i < numVertices; i++) {
        it.element[pc.SEMANTIC_POSITION].set(this._positions[i * 3 + 0], this._positions[i * 3 + 1], this._positions[i * 3 + 2]);
        it.element[pc.SEMANTIC_NORMAL].set(this._normals[i * 3 + 0], this._normals[i * 3 + 1], this._normals[i * 3 + 2]);
        it.element[pc.SEMANTIC_TEXCOORD0].set(this._uvs[i * 2 + 0], this._uvs[i * 2 + 1]);
        it.next();
      }
      it.end();
      mesh.aabb.compute(this._positions);
      if (this._node) {
        this._node.setLocalScale(1, 1, 1);
        this._node.setLocalPosition(0, 0, 0);
      }
      if (this._meshInstance) {
        this._meshInstance._updateAabbFunc = null;
      }
    }
  }, _updateAabb:function(aabb) {
    aabb.center.set(0, 0, 0);
    aabb.halfExtents.set(this._outerScale.x * 0.5, this._outerScale.y * 0.5, 0.001);
    aabb.setFromTransformedAabb(aabb, this._node.getWorldTransform());
    return aabb;
  }, _getHigherMask:function() {
    var parent = this._entity;
    while (parent) {
      parent = parent.getParent();
      if (parent && parent.element && parent.element.mask) {
        return parent;
      }
    }
    return null;
  }, _toggleMask:function() {
    this._element._dirtifyMask();
    var screenSpace = this._element.screen ? this._element.screen.screen.screenSpace : false;
    this._updateMaterial(screenSpace);
  }, _onMaterialLoad:function(asset) {
    this.material = asset.resource;
  }, _onMaterialAdded:function(asset) {
    this._system.app.assets.off("add:" + asset.id, this._onMaterialAdded, this);
    if (this._materialAsset === asset.id) {
      this._bindMaterialAsset(asset);
    }
  }, _bindMaterialAsset:function(asset) {
    asset.on("load", this._onMaterialLoad, this);
    asset.on("change", this._onMaterialChange, this);
    asset.on("remove", this._onMaterialRemove, this);
    if (asset.resource) {
      this._onMaterialLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }, _onMaterialChange:function() {
  }, _onMaterialRemove:function() {
  }, _onTextureAdded:function(asset) {
    this._system.app.assets.off("add:" + asset.id, this._onTextureAdded, this);
    if (this._textureAsset === asset.id) {
      this._bindTextureAsset(asset);
    }
  }, _bindTextureAsset:function(asset) {
    asset.on("load", this._onTextureLoad, this);
    asset.on("change", this._onTextureChange, this);
    asset.on("remove", this._onTextureRemove, this);
    if (asset.resource) {
      this._onTextureLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }, _onTextureLoad:function(asset) {
    this.texture = asset.resource;
  }, _onTextureChange:function(asset) {
  }, _onTextureRemove:function(asset) {
  }, _onSpriteAssetAdded:function(asset) {
    this._system.app.assets.off("add:" + asset.id, this._onSpriteAssetAdded, this);
    if (this._spriteAsset === asset.id) {
      this._bindSpriteAsset(asset);
    }
  }, _bindSpriteAsset:function(asset) {
    asset.on("load", this._onSpriteAssetLoad, this);
    asset.on("change", this._onSpriteAssetChange, this);
    asset.on("remove", this._onSpriteAssetRemove, this);
    if (asset.resource) {
      this._onSpriteAssetLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }, _onSpriteAssetLoad:function(asset) {
    if (!asset.resource) {
      this.sprite = null;
    } else {
      if (!asset.resource.atlas) {
        var atlasAssetId = asset.data.textureAtlasAsset;
        var assets = this._system.app.assets;
        assets.off("load:" + atlasAssetId, this._onTextureAtlasLoad, this);
        assets.once("load:" + atlasAssetId, this._onTextureAtlasLoad, this);
      } else {
        this.sprite = asset.resource;
      }
    }
  }, _onSpriteMeshesChange:function() {
    this.spriteFrame = this.spriteFrame;
  }, _onSpritePpuChange:function() {
    if (this.sprite.renderMode !== pc.SPRITE_RENDERMODE_SIMPLE && this._pixelsPerUnit === null) {
      this.spriteFrame = this.spriteFrame;
    }
  }, _onAtlasTextureChange:function() {
    if (this.sprite && this.sprite.atlas && this.sprite.atlas.texture) {
      this._meshInstance.setParameter("texture_emissiveMap", this._sprite.atlas.texture);
      this._meshInstance.setParameter("texture_opacityMap", this._sprite.atlas.texture);
    } else {
      this._meshInstance.deleteParameter("texture_emissiveMap");
      this._meshInstance.deleteParameter("texture_opacityMap");
    }
  }, _onTextureAtlasLoad:function(atlasAsset) {
    var spriteAsset = this._spriteAsset;
    if (spriteAsset instanceof pc.Asset) {
      this._onSpriteAssetLoad(spriteAsset);
    } else {
      this._onSpriteAssetLoad(this._system.app.assets.get(spriteAsset));
    }
  }, _onSpriteAssetChange:function(asset) {
    this._onSpriteAssetLoad(asset);
  }, _onSpriteAssetRemove:function(asset) {
  }, onEnable:function() {
    if (this._model) {
      this._element.addModelToLayers(this._model);
    }
  }, onDisable:function() {
    if (this._model) {
      this._element.removeModelFromLayers(this._model);
    }
  }});
  Object.defineProperty(ImageElement.prototype, "color", {get:function() {
    return this._color;
  }, set:function(value) {
    this._color.data[0] = value.data[0];
    this._color.data[1] = value.data[1];
    this._color.data[2] = value.data[2];
    if (this._meshInstance) {
      this._meshInstance.setParameter("material_emissive", this._color.data3);
    }
  }});
  Object.defineProperty(ImageElement.prototype, "opacity", {get:function() {
    return this._color.data[3];
  }, set:function(value) {
    this._color.data[3] = value;
    this._meshInstance.setParameter("material_opacity", value);
  }});
  Object.defineProperty(ImageElement.prototype, "rect", {get:function() {
    return this._rect;
  }, set:function(value) {
    if (value instanceof pc.Vec4) {
      this._rect.set(value.x, value.y, value.z, value.w);
    } else {
      this._rect.set(value[0], value[1], value[2], value[3]);
    }
    if (this._mesh) {
      this._updateMesh(this._mesh);
    }
  }});
  Object.defineProperty(ImageElement.prototype, "material", {get:function() {
    return this._material;
  }, set:function(value) {
    if (!value) {
      var screenSpace = this._element.screen ? this._element.screen.screen.screenSpace : false;
      value = screenSpace ? this._system.defaultScreenSpaceImageMaterial : this._system.defaultImageMaterial;
      value = this._mask ? this._system.defaultScreenSpaceImageMaskMaterial : this._system.defaultImageMaskMaterial;
    }
    this._material = value;
    if (value) {
      this._meshInstance.material = value;
      if (value !== this._system.defaultScreenSpaceImageMaterial && value !== this._system.defaultImageMaterial && value !== this._system.defaultImageMaskMaterial && value !== this._system.defaultScreenSpaceImageMaskMaterial) {
        this._meshInstance.deleteParameter("material_opacity");
        this._meshInstance.deleteParameter("material_emissive");
      } else {
        this._meshInstance.setParameter("material_emissive", this._color.data3);
        this._meshInstance.setParameter("material_opacity", this._color.data[3]);
      }
    }
  }});
  Object.defineProperty(ImageElement.prototype, "materialAsset", {get:function() {
    return this._materialAsset;
  }, set:function(value) {
    var assets = this._system.app.assets;
    var _id = value;
    if (value instanceof pc.Asset) {
      _id = value.id;
    }
    if (this._materialAsset !== _id) {
      if (this._materialAsset) {
        var _prev = assets.get(this._materialAsset);
        if (_prev) {
          _prev.off("load", this._onMaterialLoad, this);
          _prev.off("change", this._onMaterialChange, this);
          _prev.off("remove", this._onMaterialRemove, this);
        }
      }
      this._materialAsset = _id;
      if (this._materialAsset) {
        var asset = assets.get(this._materialAsset);
        if (!asset) {
          this.material = null;
          assets.on("add:" + this._materialAsset, this._onMaterialAdded, this);
        } else {
          this._bindMaterialAsset(asset);
        }
      } else {
        this.material = null;
      }
    }
  }});
  Object.defineProperty(ImageElement.prototype, "texture", {get:function() {
    return this._texture;
  }, set:function(value) {
    this._texture = value;
    if (value) {
      this._meshInstance.setParameter("texture_emissiveMap", this._texture);
      this._meshInstance.setParameter("texture_opacityMap", this._texture);
      this._meshInstance.setParameter("material_emissive", this._color.data3);
      this._meshInstance.setParameter("material_opacity", this._color.data[3]);
    } else {
      this._meshInstance.deleteParameter("texture_emissiveMap");
      this._meshInstance.deleteParameter("texture_opacityMap");
    }
  }});
  Object.defineProperty(ImageElement.prototype, "textureAsset", {get:function() {
    return this._textureAsset;
  }, set:function(value) {
    var assets = this._system.app.assets;
    var _id = value;
    if (value instanceof pc.Asset) {
      _id = value.id;
    }
    if (this._textureAsset !== _id) {
      if (this._textureAsset) {
        var _prev = assets.get(this._textureAsset);
        if (_prev) {
          _prev.off("load", this._onTextureLoad, this);
          _prev.off("change", this._onTextureChange, this);
          _prev.off("remove", this._onTextureRemove, this);
        }
      }
      this._textureAsset = _id;
      if (this._textureAsset) {
        var asset = assets.get(this._textureAsset);
        if (!asset) {
          this.texture = null;
          assets.on("add:" + this._textureAsset, this._onTextureAdded, this);
        } else {
          this._bindTextureAsset(asset);
        }
      } else {
        this.texture = null;
      }
    }
  }});
  Object.defineProperty(ImageElement.prototype, "spriteAsset", {get:function() {
    return this._spriteAsset;
  }, set:function(value) {
    var assets = this._system.app.assets;
    var _id = value;
    if (value instanceof pc.Asset) {
      _id = value.id;
    }
    if (this._spriteAsset !== _id) {
      if (this._spriteAsset) {
        var _prev = assets.get(this._spriteAsset);
        if (_prev) {
          _prev.off("load", this._onSpriteAssetLoad, this);
          _prev.off("change", this._onSpriteAssetChange, this);
          _prev.off("remove", this._onSpriteAssetRemove, this);
        }
      }
      this._spriteAsset = _id;
      if (this._spriteAsset) {
        var asset = assets.get(this._spriteAsset);
        if (!asset) {
          this.sprite = null;
          assets.on("add:" + this._spriteAsset, this._onSpriteAssetAdded, this);
        } else {
          this._bindSpriteAsset(asset);
        }
      } else {
        this.sprite = null;
      }
    }
  }});
  Object.defineProperty(ImageElement.prototype, "sprite", {get:function() {
    return this._sprite;
  }, set:function(value) {
    if (this._sprite) {
      this._sprite.off("set:meshes", this._onSpriteMeshesChange, this);
      this._sprite.off("set:pixelsPerUnit", this._onSpritePpuChange, this);
      this._sprite.off("set:atlas", this._onAtlasTextureChange, this);
      if (this._sprite.atlas) {
        this._sprite.atlas.off("set:texture", this._onAtlasTextureChange, this);
      }
    }
    this._sprite = value;
    if (this._sprite) {
      this._sprite.on("set:meshes", this._onSpriteMeshesChange, this);
      this._sprite.on("set:pixelsPerUnit", this._onSpritePpuChange, this);
      this._sprite.on("set:atlas", this._onAtlasTextureChange, this);
      if (this._sprite.atlas) {
        this._sprite.atlas.on("set:texture", this._onAtlasTextureChange, this);
      }
    }
    if (this._meshInstance) {
      if (this._sprite && this._sprite.atlas && this._sprite.atlas.texture) {
        this._meshInstance.setParameter("texture_emissiveMap", this._sprite.atlas.texture);
        this._meshInstance.setParameter("texture_opacityMap", this._sprite.atlas.texture);
      } else {
        this._meshInstance.deleteParameter("texture_emissiveMap");
        this._meshInstance.deleteParameter("texture_opacityMap");
      }
    }
    this.spriteFrame = this.spriteFrame;
  }});
  Object.defineProperty(ImageElement.prototype, "spriteFrame", {get:function() {
    return this._spriteFrame;
  }, set:function(value) {
    if (this._sprite) {
      this._spriteFrame = pc.math.clamp(value, 0, this._sprite.frameKeys.length - 1);
    } else {
      this._spriteFrame = value;
    }
    var nineSlice = false;
    var mesh = null;
    if (this._sprite && this._sprite.atlas) {
      mesh = this._sprite.meshes[this.spriteFrame];
      nineSlice = this._sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === pc.SPRITE_RENDERMODE_TILED;
    }
    this.mesh = nineSlice ? mesh : this._defaultMesh;
    if (this.mesh) {
      this._updateMesh(this.mesh);
    }
  }});
  Object.defineProperty(ImageElement.prototype, "mesh", {get:function() {
    return this._mesh;
  }, set:function(value) {
    this._mesh = value;
    if (this._meshInstance) {
      this._meshInstance.mesh = this._mesh;
      this._meshInstance.visible = !!this._mesh;
      this._meshInstance._aabbVer = -1;
      if (this._mesh === this._defaultMesh) {
        this._meshInstance._updateAabbFunc = null;
      } else {
        this._meshInstance._updateAabbFunc = this._updateAabbFunc;
      }
    }
  }});
  Object.defineProperty(ImageElement.prototype, "mask", {get:function() {
    return this._mask;
  }, set:function(value) {
    if (this._mask !== value) {
      this._mask = value;
      this._toggleMask();
    }
  }});
  Object.defineProperty(ImageElement.prototype, "pixelsPerUnit", {get:function() {
    return this._pixelsPerUnit;
  }, set:function(value) {
    if (this._pixelsPerUnit === value) {
      return;
    }
    this._pixelsPerUnit = value;
    if (this._sprite && (this._sprite.renderMode === pc.SPRITE_RENDERMODE_SLICED || this._sprite.renderMode === pc.SPRITE_RENDERMODE_TILED)) {
      this.spriteFrame = this.spriteFrame;
    }
  }});
  return {ImageElement:ImageElement};
}());
pc.extend(pc, function() {
  var TextElement = function TextElement(element) {
    this._element = element;
    this._system = element.system;
    this._entity = element.entity;
    this._text = "";
    this._fontAsset = null;
    this._font = null;
    this._color = new pc.Color(1, 1, 1, 1);
    this._spacing = 1;
    this._fontSize = 32;
    this._lineHeight = 32;
    this._wrapLines = false;
    this._drawOrder = 0;
    this._alignment = new pc.Vec2(0.5, 0.5);
    this._autoWidth = true;
    this._autoHeight = true;
    this.width = 0;
    this.height = 0;
    this._node = new pc.GraphNode;
    this._model = new pc.Model;
    this._model.graph = this._node;
    this._entity.addChild(this._node);
    this._meshInfo = [];
    this._material = null;
    this._noResize = false;
    this._currentMaterialType = null;
    this._maskedMaterialSrc = null;
    this._onScreenChange(this._element.screen);
    element.on("resize", this._onParentResize, this);
    this._element.on("set:screen", this._onScreenChange, this);
    element.on("screen:set:screenspace", this._onScreenSpaceChange, this);
    element.on("set:draworder", this._onDrawOrderChange, this);
    element.on("set:pivot", this._onPivotChange, this);
  };
  var LINE_BREAK_CHAR = /^[\r\n]$/;
  var WHITESPACE_CHAR = /^[ \t]$/;
  var WORD_BOUNDARY_CHAR = /^[ \t\-]$/;
  pc.extend(TextElement.prototype, {destroy:function() {
    if (this._model) {
      this._element.removeModelFromLayers(this._model);
      this._model.destroy();
      this._model = null;
    }
    this._element.off("resize", this._onParentResize, this);
    this._element.off("set:screen", this._onScreenChange, this);
    this._element.off("screen:set:screenspace", this._onScreenSpaceChange, this);
    this._element.off("set:draworder", this._onDrawOrderChange, this);
    this._element.off("set:pivot", this._onPivotChange, this);
  }, _onParentResize:function(width, height) {
    if (this._noResize) {
      return;
    }
    if (this._font) {
      this._updateText(this._text);
    }
  }, _onScreenChange:function(screen) {
    if (screen) {
      this._updateMaterial(screen.screen.screenSpace);
    } else {
      this._updateMaterial(false);
    }
  }, _onScreenSpaceChange:function(value) {
    this._updateMaterial(value);
  }, _onDrawOrderChange:function(order) {
    this._drawOrder = order;
    if (this._model) {
      var i;
      var len;
      for (i = 0, len = this._model.meshInstances.length; i < len; i++) {
        this._model.meshInstances[i].drawOrder = order;
      }
    }
  }, _onPivotChange:function(pivot) {
    if (this._font) {
      this._updateText();
    }
  }, _updateText:function(text) {
    var i;
    var len;
    if (text === undefined) {
      text = this._text;
    }
    var textLength = text.length;
    if (textLength === 0) {
      textLength = 1;
      text = " ";
    }
    var charactersPerTexture = {};
    for (i = 0; i < textLength; i++) {
      var code = text.charCodeAt(i);
      var info = this._font.data.chars[code];
      if (!info) {
        continue;
      }
      var map = info.map;
      if (!charactersPerTexture[map]) {
        charactersPerTexture[map] = 0;
      }
      charactersPerTexture[map]++;
    }
    var removedModel = false;
    var screenSpace = this._element.screen && this._element.screen.screen.screenSpace;
    for (i = 0, len = this._meshInfo.length; i < len; i++) {
      var l = charactersPerTexture[i] || 0;
      var meshInfo = this._meshInfo[i];
      if (meshInfo.count !== l) {
        if (!removedModel) {
          this._element.removeModelFromLayers(this._model);
          removedModel = true;
        }
        meshInfo.count = l;
        meshInfo.positions.length = meshInfo.normals.length = l * 3 * 4;
        meshInfo.indices.length = l * 3 * 2;
        meshInfo.uvs.length = l * 2 * 4;
        if (meshInfo.meshInstance) {
          this._removeMeshInstance(meshInfo.meshInstance);
        }
        if (l === 0) {
          meshInfo.meshInstance = null;
          continue;
        }
        for (var v = 0; v < l; v++) {
          meshInfo.indices[v * 3 * 2 + 0] = v * 4;
          meshInfo.indices[v * 3 * 2 + 1] = v * 4 + 1;
          meshInfo.indices[v * 3 * 2 + 2] = v * 4 + 3;
          meshInfo.indices[v * 3 * 2 + 3] = v * 4 + 2;
          meshInfo.indices[v * 3 * 2 + 4] = v * 4 + 3;
          meshInfo.indices[v * 3 * 2 + 5] = v * 4 + 1;
          meshInfo.normals[v * 4 * 3 + 0] = 0;
          meshInfo.normals[v * 4 * 3 + 1] = 0;
          meshInfo.normals[v * 4 * 3 + 2] = -1;
          meshInfo.normals[v * 4 * 3 + 3] = 0;
          meshInfo.normals[v * 4 * 3 + 4] = 0;
          meshInfo.normals[v * 4 * 3 + 5] = -1;
          meshInfo.normals[v * 4 * 3 + 6] = 0;
          meshInfo.normals[v * 4 * 3 + 7] = 0;
          meshInfo.normals[v * 4 * 3 + 8] = -1;
          meshInfo.normals[v * 4 * 3 + 9] = 0;
          meshInfo.normals[v * 4 * 3 + 10] = 0;
          meshInfo.normals[v * 4 * 3 + 11] = -1;
        }
        var mesh = pc.createMesh(this._system.app.graphicsDevice, meshInfo.positions, {uvs:meshInfo.uvs, normals:meshInfo.normals, indices:meshInfo.indices});
        var mi = new pc.MeshInstance(this._node, mesh, this._material);
        mi.castShadow = false;
        mi.receiveShadow = false;
        mi.drawOrder = this._drawOrder;
        if (screenSpace) {
          mi.cull = false;
        }
        mi.screenSpace = screenSpace;
        mi.setParameter("texture_msdfMap", this._font.textures[i]);
        mi.setParameter("material_emissive", this._color.data3);
        mi.setParameter("material_opacity", this._color.data[3]);
        mi.setParameter("font_sdfIntensity", this._font.intensity);
        mi.setParameter("font_pxrange", this._getPxRange(this._font));
        mi.setParameter("font_textureWidth", this._font.data.info.maps[i].width);
        meshInfo.meshInstance = mi;
        this._model.meshInstances.push(mi);
      }
    }
    if (this._maskedBy) {
      this._element._setMaskedBy(this._maskedBy);
    }
    if (removedModel && this._element.enabled && this._entity.enabled) {
      this._element.addModelToLayers(this._model);
    }
    this._updateMeshes(text);
  }, _removeMeshInstance:function(meshInstance) {
    var ib;
    var iblen;
    var oldMesh = meshInstance.mesh;
    if (oldMesh) {
      if (oldMesh.vertexBuffer) {
        oldMesh.vertexBuffer.destroy();
      }
      if (oldMesh.indexBuffer) {
        for (ib = 0, iblen = oldMesh.indexBuffer.length; ib < iblen; ib++) {
          oldMesh.indexBuffer[ib].destroy();
        }
      }
    }
    var idx = this._model.meshInstances.indexOf(meshInstance);
    if (idx !== -1) {
      this._model.meshInstances.splice(idx, 1);
    }
  }, _setMaterial:function(material) {
    var i;
    var len;
    this._material = material;
    if (this._model) {
      for (i = 0, len = this._model.meshInstances.length; i < len; i++) {
        var mi = this._model.meshInstances[i];
        mi.material = material;
      }
    }
  }, _updateMaterial:function(screenSpace) {
    var cull;
    if (screenSpace) {
      this._material = this._system.defaultScreenSpaceTextMaterial;
      cull = false;
    } else {
      this._material = this._system.defaultTextMaterial;
      cull = true;
    }
    if (this._model) {
      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {
        var mi = this._model.meshInstances[i];
        mi.cull = cull;
        mi.material = this._material;
        mi.screenSpace = screenSpace;
      }
    }
  }, _updateMeshes:function(text) {
    var json = this._font.data;
    var self = this;
    this.width = 0;
    this.height = 0;
    this._lineWidths = [];
    this._lineContents = [];
    var l = text.length;
    var _x = 0;
    var _xMinusTrailingWhitespace = 0;
    var _y = 0;
    var _z = 0;
    var lines = 1;
    var wordStartX = 0;
    var wordStartIndex = 0;
    var lineStartIndex = 0;
    var numWordsThisLine = 0;
    var numCharsThisLine = 0;
    var splitHorizontalAnchors = Math.abs(this._element.anchor.x - this._element.anchor.z) >= 0.0001;
    var maxLineWidth = this._element.width;
    if (this.autoWidth && !splitHorizontalAnchors || !this._wrapLines) {
      maxLineWidth = Number.POSITIVE_INFINITY;
    }
    var fontMinY = 0;
    var fontMaxY = 0;
    var scale = 1;
    var MAGIC = 32;
    var char, charCode, data, i, quad;
    for (charCode in json.chars) {
      data = json.chars[charCode];
      scale = data.height / MAGIC * this._fontSize / data.height;
      if (data.bounds) {
        fontMinY = Math.min(fontMinY, data.bounds[1] * scale);
        fontMaxY = Math.max(fontMaxY, data.bounds[3] * scale);
      }
    }
    for (i = 0; i < this._meshInfo.length; i++) {
      this._meshInfo[i].quad = 0;
      this._meshInfo[i].lines = {};
    }
    function breakLine(lineBreakIndex, lineBreakX) {
      self._lineWidths.push(lineBreakX);
      self._lineContents.push(text.substring(lineStartIndex, lineBreakIndex));
      _x = 0;
      _y -= self._lineHeight;
      lines++;
      numWordsThisLine = 0;
      numCharsThisLine = 0;
      wordStartX = 0;
      lineStartIndex = lineBreakIndex;
    }
    for (i = 0; i < l; i++) {
      char = text.charAt(i);
      charCode = text.charCodeAt(i);
      var x = 0;
      var y = 0;
      var advance = 0;
      var quadsize = 1;
      var glyphMinX = 0;
      var glyphWidth = 0;
      data = json.chars[charCode];
      if (data && data.scale) {
        var size = (data.width + data.height) / 2;
        scale = size / MAGIC * this._fontSize / size;
        quadsize = size / MAGIC * this._fontSize / data.scale;
        advance = data.xadvance * scale;
        x = data.xoffset * scale;
        y = data.yoffset * scale;
        if (data.bounds) {
          glyphWidth = (data.bounds[2] - data.bounds[0]) * scale;
          glyphMinX = data.bounds[0] * scale;
        } else {
          glyphWidth = x;
          glyphMinX = 0;
        }
      } else {
        advance = 1;
        x = 0;
        y = 0;
        quadsize = this._fontSize;
      }
      var isLineBreak = LINE_BREAK_CHAR.test(char);
      var isWordBoundary = WORD_BOUNDARY_CHAR.test(char);
      var isWhitespace = WHITESPACE_CHAR.test(char);
      if (isLineBreak) {
        breakLine(i, _xMinusTrailingWhitespace);
        wordStartIndex = i + 1;
        lineStartIndex = i + 1;
        continue;
      }
      var meshInfo = this._meshInfo[data && data.map || 0];
      var candidateLineWidth = _x + glyphWidth + glyphMinX;
      if (candidateLineWidth >= maxLineWidth && numCharsThisLine > 0 && !isWhitespace) {
        if (numWordsThisLine === 0) {
          wordStartIndex = i;
          breakLine(i, _xMinusTrailingWhitespace);
        } else {
          var backtrack = Math.max(i - wordStartIndex, 0);
          i -= backtrack + 1;
          meshInfo.lines[lines - 1] -= backtrack;
          meshInfo.quad -= backtrack;
          breakLine(wordStartIndex, wordStartX);
          continue;
        }
      }
      quad = meshInfo.quad;
      meshInfo.lines[lines - 1] = quad;
      meshInfo.positions[quad * 4 * 3 + 0] = _x - x;
      meshInfo.positions[quad * 4 * 3 + 1] = _y - y;
      meshInfo.positions[quad * 4 * 3 + 2] = _z;
      meshInfo.positions[quad * 4 * 3 + 3] = _x - x + quadsize;
      meshInfo.positions[quad * 4 * 3 + 4] = _y - y;
      meshInfo.positions[quad * 4 * 3 + 5] = _z;
      meshInfo.positions[quad * 4 * 3 + 6] = _x - x + quadsize;
      meshInfo.positions[quad * 4 * 3 + 7] = _y - y + quadsize;
      meshInfo.positions[quad * 4 * 3 + 8] = _z;
      meshInfo.positions[quad * 4 * 3 + 9] = _x - x;
      meshInfo.positions[quad * 4 * 3 + 10] = _y - y + quadsize;
      meshInfo.positions[quad * 4 * 3 + 11] = _z;
      this.width = Math.max(this.width, _x + glyphWidth + glyphMinX);
      this.height = Math.max(this.height, fontMaxY - (_y + fontMinY));
      _x = _x + this._spacing * advance;
      if (!isWhitespace && !isLineBreak) {
        _xMinusTrailingWhitespace = _x;
      }
      if (isWordBoundary) {
        numWordsThisLine++;
        wordStartX = _xMinusTrailingWhitespace;
        wordStartIndex = i + 1;
      }
      numCharsThisLine++;
      var uv = this._getUv(charCode);
      meshInfo.uvs[quad * 4 * 2 + 0] = uv[0];
      meshInfo.uvs[quad * 4 * 2 + 1] = uv[1];
      meshInfo.uvs[quad * 4 * 2 + 2] = uv[2];
      meshInfo.uvs[quad * 4 * 2 + 3] = uv[1];
      meshInfo.uvs[quad * 4 * 2 + 4] = uv[2];
      meshInfo.uvs[quad * 4 * 2 + 5] = uv[3];
      meshInfo.uvs[quad * 4 * 2 + 6] = uv[0];
      meshInfo.uvs[quad * 4 * 2 + 7] = uv[3];
      meshInfo.quad++;
    }
    if (lineStartIndex < l) {
      breakLine(l, _x);
    }
    this._noResize = true;
    this.autoWidth = this._autoWidth;
    this.autoHeight = this._autoHeight;
    this._noResize = false;
    var hp = this._element.pivot.data[0];
    var vp = this._element.pivot.data[1];
    var ha = this._alignment.x;
    var va = this._alignment.y;
    for (i = 0; i < this._meshInfo.length; i++) {
      if (this._meshInfo[i].count === 0) {
        continue;
      }
      var prevQuad = 0;
      for (var line in this._meshInfo[i].lines) {
        var index = this._meshInfo[i].lines[line];
        var hoffset = -hp * this._element.width + ha * (this._element.width - this._lineWidths[parseInt(line, 10)]);
        var voffset = (1 - vp) * this._element.height - fontMaxY - (1 - va) * (this._element.height - this.height);
        for (quad = prevQuad; quad <= index; quad++) {
          this._meshInfo[i].positions[quad * 4 * 3] += hoffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 3] += hoffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 6] += hoffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 9] += hoffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 1] += voffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 4] += voffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 7] += voffset;
          this._meshInfo[i].positions[quad * 4 * 3 + 10] += voffset;
        }
        prevQuad = index + 1;
      }
      var numVertices = this._meshInfo[i].quad * 4;
      var it = new pc.VertexIterator(this._meshInfo[i].meshInstance.mesh.vertexBuffer);
      for (var v = 0; v < numVertices; v++) {
        it.element[pc.SEMANTIC_POSITION].set(this._meshInfo[i].positions[v * 3 + 0], this._meshInfo[i].positions[v * 3 + 1], this._meshInfo[i].positions[v * 3 + 2]);
        it.element[pc.SEMANTIC_TEXCOORD0].set(this._meshInfo[i].uvs[v * 2 + 0], this._meshInfo[i].uvs[v * 2 + 1]);
        it.next();
      }
      it.end();
      this._meshInfo[i].meshInstance.mesh.aabb.compute(this._meshInfo[i].positions);
      this._meshInfo[i].meshInstance._aabbVer = -1;
    }
  }, _onFontAdded:function(asset) {
    this._system.app.assets.off("add:" + asset.id, this._onFontAdded, this);
    if (asset.id === this._fontAsset) {
      this._bindFont(asset);
    }
  }, _bindFont:function(asset) {
    asset.on("load", this._onFontLoad, this);
    asset.on("change", this._onFontChange, this);
    asset.on("remove", this._onFontRemove, this);
    if (asset.resource) {
      this._onFontLoad(asset);
    } else {
      this._system.app.assets.load(asset);
    }
  }, _onFontLoad:function(asset) {
    if (this.font !== asset.resource) {
      this.font = asset.resource;
    }
  }, _onFontChange:function(asset, name, _new, _old) {
    if (name === "data") {
      this._font.data = _new;
      var maps = this._font.data.info.maps.length;
      for (var i = 0; i < maps; i++) {
        if (!this._meshInfo[i]) {
          continue;
        }
        var mi = this._meshInfo[i].meshInstance;
        if (mi) {
          mi.setParameter("font_sdfIntensity", this._font.intensity);
          mi.setParameter("font_pxrange", this._getPxRange(this._font));
          mi.setParameter("font_textureWidth", this._font.data.info.maps[i].width);
        }
      }
    }
  }, _onFontRemove:function(asset) {
  }, _getPxRange:function(font) {
    var keys = Object.keys(this._font.data.chars);
    for (var i = 0; i < keys.length; i++) {
      var char = this._font.data.chars[keys[i]];
      if (char.scale && char.range) {
        return char.scale * char.range;
      }
    }
    return 2;
  }, _getUv:function(char) {
    var data = this._font.data;
    if (!data.chars[char]) {
      if (data.chars[32]) {
        return this._getUv(32);
      }
      return [0, 0, 1, 1];
    }
    var map = data.chars[char].map;
    var width = data.info.maps[map].width;
    var height = data.info.maps[map].height;
    var x = data.chars[char].x;
    var y = data.chars[char].y;
    var x1 = x;
    var y1 = y;
    var x2 = x + data.chars[char].width;
    var y2 = y - data.chars[char].height;
    var edge = 1 - data.chars[char].height / height;
    return [x1 / width, edge - y1 / height, x2 / width, edge - y2 / height];
  }, onEnable:function() {
    if (this._model) {
      this._element.addModelToLayers(this._model);
    }
  }, onDisable:function() {
    if (this._model) {
      this._element.removeModelFromLayers(this._model);
    }
  }});
  Object.defineProperty(TextElement.prototype, "text", {get:function() {
    return this._text;
  }, set:function(value) {
    var str = value.toString();
    if (this._text !== str) {
      if (this._font) {
        this._updateText(str);
      }
      this._text = str;
    }
  }});
  Object.defineProperty(TextElement.prototype, "color", {get:function() {
    return this._color;
  }, set:function(value) {
    this._color.data[0] = value.data[0];
    this._color.data[1] = value.data[1];
    this._color.data[2] = value.data[2];
    if (this._model) {
      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {
        var mi = this._model.meshInstances[i];
        mi.setParameter("material_emissive", this._color.data3);
      }
    }
  }});
  Object.defineProperty(TextElement.prototype, "opacity", {get:function() {
    return this._color.data[3];
  }, set:function(value) {
    this._color.data[3] = value;
    if (this._model) {
      for (var i = 0, len = this._model.meshInstances.length; i < len; i++) {
        var mi = this._model.meshInstances[i];
        mi.setParameter("material_opacity", value);
      }
    }
  }});
  Object.defineProperty(TextElement.prototype, "lineHeight", {get:function() {
    return this._lineHeight;
  }, set:function(value) {
    var _prev = this._lineHeight;
    this._lineHeight = value;
    if (_prev !== value && this._font) {
      this._updateText();
    }
  }});
  Object.defineProperty(TextElement.prototype, "wrapLines", {get:function() {
    return this._wrapLines;
  }, set:function(value) {
    var _prev = this._wrapLines;
    this._wrapLines = value;
    if (_prev !== value && this._font) {
      this._updateText();
    }
  }});
  Object.defineProperty(TextElement.prototype, "lines", {get:function() {
    return this._lineContents;
  }});
  Object.defineProperty(TextElement.prototype, "spacing", {get:function() {
    return this._spacing;
  }, set:function(value) {
    var _prev = this._spacing;
    this._spacing = value;
    if (_prev !== value && this._font) {
      this._updateText();
    }
  }});
  Object.defineProperty(TextElement.prototype, "fontSize", {get:function() {
    return this._fontSize;
  }, set:function(value) {
    var _prev = this._fontSize;
    this._fontSize = value;
    if (_prev !== value && this._font) {
      this._updateText();
    }
  }});
  Object.defineProperty(TextElement.prototype, "fontAsset", {get function() {
    return this._fontAsset;
  }, set:function(value) {
    var assets = this._system.app.assets;
    var _id = value;
    if (value instanceof pc.Asset) {
      _id = value.id;
    }
    if (this._fontAsset !== _id) {
      if (this._fontAsset) {
        var _prev = assets.get(this._fontAsset);
        if (_prev) {
          _prev.off("load", this._onFontLoad, this);
          _prev.off("change", this._onFontChange, this);
          _prev.off("remove", this._onFontRemove, this);
        }
      }
      this._fontAsset = _id;
      if (this._fontAsset) {
        var asset = assets.get(this._fontAsset);
        if (!asset) {
          assets.on("add:" + this._fontAsset, this._onFontAdded, this);
        } else {
          this._bindFont(asset);
        }
      }
    }
  }});
  Object.defineProperty(TextElement.prototype, "font", {get:function() {
    return this._font;
  }, set:function(value) {
    var i;
    var len;
    this._font = value;
    if (!value) {
      return;
    }
    for (i = 0, len = this._font.textures.length; i < len; i++) {
      if (!this._meshInfo[i]) {
        this._meshInfo[i] = {count:0, quad:0, lines:{}, positions:[], normals:[], uvs:[], indices:[], meshInstance:null};
      } else {
        var mi = this._meshInfo[i].meshInstance;
        if (mi) {
          mi.setParameter("font_sdfIntensity", this._font.intensity);
          mi.setParameter("font_pxrange", this._getPxRange(this._font));
          mi.setParameter("font_textureWidth", this._font.data.info.maps[i].width);
          mi.setParameter("texture_msdfMap", this._font.textures[i]);
        }
      }
    }
    var removedModel = false;
    for (i = this._font.textures.length; i < this._meshInfo.length; i++) {
      if (this._meshInfo[i].meshInstance) {
        if (!removedModel) {
          this._element.removeModelFromLayers(this._model);
          removedModel = true;
        }
        this._removeMeshInstance(this._meshInfo[i].meshInstance);
      }
    }
    if (this._meshInfo.length > this._font.textures.length) {
      this._meshInfo.length = this._font.textures.length;
    }
    this._updateText();
  }});
  Object.defineProperty(TextElement.prototype, "alignment", {get:function() {
    return this._alignment;
  }, set:function(value) {
    if (value instanceof pc.Vec2) {
      this._alignment.set(value.x, value.y);
    } else {
      this._alignment.set(value[0], value[1]);
    }
    if (this._font) {
      this._updateText();
    }
  }});
  Object.defineProperty(TextElement.prototype, "autoWidth", {get:function() {
    return this._autoWidth;
  }, set:function(value) {
    this._autoWidth = value;
    if (value && Math.abs(this._element.anchor.x - this._element.anchor.z) < 0.0001) {
      this._element.width = this.width;
    }
  }});
  Object.defineProperty(TextElement.prototype, "autoHeight", {get:function() {
    return this._autoHeight;
  }, set:function(value) {
    this._autoHeight = value;
    if (value && Math.abs(this._element.anchor.y - this._element.anchor.w) < 0.0001) {
      this._element.height = this.height;
    }
  }});
  return {TextElement:TextElement};
}());
pc.extend(pc, function() {
  pc.FONT_MSDF = "msdf";
  var Font = function(textures, data) {
    this.type = pc.FONT_MSDF;
    this.em = 1;
    this.textures = textures;
    this.intensity = 0.0;
    this._data = null;
    this.data = data;
  };
  Font.prototype = {};
  Object.defineProperty(Font.prototype, "data", {get:function() {
    return this._data;
  }, set:function(value) {
    this._data = value;
    if (!value) {
      return;
    }
    if (this._data.intensity !== undefined) {
      this.intensity = this._data.intensity;
    }
    if (!this._data.info) {
      this._data.info = {};
    }
    if (!this._data.version || this._data.version < 2) {
      this._data.info.maps = [{width:this._data.info.width, height:this._data.info.height}];
      if (this._data.chars) {
        for (var key in this._data.chars) {
          this._data.chars[key].map = 0;
        }
      }
    }
  }});
  return {FONT_MSDF:pc.FONT_MSDF, Font:Font};
}());
pc.extend(pc, function() {
  var ZoneComponent = function ZoneComponent(system, entity) {
    this._oldState = true;
    this._size = new pc.Vec3;
    this.on("set_enabled", this._onSetEnabled, this);
  };
  ZoneComponent = pc.inherits(ZoneComponent, pc.Component);
  pc.extend(ZoneComponent.prototype, {onEnable:function() {
    ZoneComponent._super.onEnable.call(this);
    this._checkState();
  }, onDisable:function() {
    ZoneComponent._super.onDisable.call(this);
    this._checkState();
  }, _onSetEnabled:function(prop, old, value) {
    this._checkState();
  }, _checkState:function() {
    var state = this.enabled && this.entity.enabled;
    if (state === this._oldState) {
      return;
    }
    this._oldState = state;
    this.fire("enable");
    this.fire("state", this.enabled);
  }, _onBeforeRemove:function() {
    this.fire("remove");
  }});
  Object.defineProperty(ZoneComponent.prototype, "size", {set:function(data) {
    if (data instanceof pc.Vec3) {
      this._size.copy(data);
    } else {
      if (data instanceof Array && data.length >= 3) {
        this.size.set(data[0], data[1], data[2]);
      }
    }
  }, get:function() {
    return this._size;
  }});
  return {ZoneComponent:ZoneComponent};
}());
pc.extend(pc, function() {
  var _schema = ["enabled"];
  var ZoneComponentSystem = function ZoneComponentSystem(app) {
    this.id = "zone";
    this.app = app;
    app.systems.add(this.id, this);
    this.ComponentType = pc.ZoneComponent;
    this.DataType = pc.ZoneComponentData;
    this.schema = _schema;
    this.on("beforeremove", this._onBeforeRemove, this);
  };
  ZoneComponentSystem = pc.inherits(ZoneComponentSystem, pc.ComponentSystem);
  pc.Component._buildAccessors(pc.ZoneComponent.prototype, _schema);
  pc.extend(ZoneComponentSystem.prototype, {initializeComponentData:function(component, data, properties) {
    component.enabled = data.hasOwnProperty("enabled") ? !!data.enabled : true;
    if (data.size) {
      if (data.size instanceof pc.Vec3) {
        component.size.copy(data.size);
      } else {
        if (data.size instanceof Array && data.size.length >= 3) {
          component.size.set(data.size[0], data.size[1], data.size[2]);
        }
      }
    }
  }, cloneComponent:function(entity, clone) {
    var data = {size:entity.zone.size};
    return this.addComponent(clone, data);
  }, _onBeforeRemove:function(entity, component) {
    component._onBeforeRemove();
  }});
  return {ZoneComponentSystem:ZoneComponentSystem};
}());
pc.extend(pc, function() {
  var ZoneComponentData = function() {
    this.enabled = true;
  };
  ZoneComponentData = pc.inherits(ZoneComponentData, pc.ComponentData);
  return {ZoneComponentData:ZoneComponentData};
}());
pc.extend(pc, function() {
  var Entity = function(name, app) {
    if (name instanceof pc.Application) {
      app = name;
    }
    this._guid = pc.guid.create();
    this._batchHandle = null;
    this.c = {};
    this._app = app;
    if (!app) {
      this._app = pc.Application.getApplication();
      if (!this._app) {
        console.error("Couldn't find current application");
      }
    }
    pc.events.attach(this);
  };
  Entity = pc.inherits(Entity, pc.GraphNode);
  Entity.prototype.addComponent = function(type, data) {
    var system = this._app.systems[type];
    if (system) {
      if (!this.c[type]) {
        return system.addComponent(this, data);
      } else {
        logERROR(pc.string.format("Entity already has {0} Component", type));
      }
    } else {
      logERROR(pc.string.format("System: '{0}' doesn't exist", type));
      return null;
    }
  };
  Entity.prototype.removeComponent = function(type) {
    var system = this._app.systems[type];
    if (system) {
      if (this.c[type]) {
        system.removeComponent(this);
      } else {
        logERROR(pc.string.format("Entity doesn't have {0} Component", type));
      }
    } else {
      logERROR(pc.string.format("System: '{0}' doesn't exist", type));
    }
  };
  Entity.prototype.getGuid = function() {
    return this._guid;
  };
  Entity.prototype.setGuid = function(guid) {
    this._guid = guid;
  };
  Entity.prototype._notifyHierarchyStateChanged = function(node, enabled) {
    var enableFirst = false;
    if (node === this && this._app._enableList.length === 0) {
      enableFirst = true;
    }
    node._beingEnabled = true;
    node._onHierarchyStateChanged(enabled);
    if (node._onHierarchyStatePostChanged) {
      this._app._enableList.push(node);
    }
    var i, len;
    var c = node._children;
    for (i = 0, len = c.length; i < len; i++) {
      if (c[i]._enabled) {
        this._notifyHierarchyStateChanged(c[i], enabled);
      }
    }
    node._beingEnabled = false;
    if (enableFirst) {
      for (i = 0, len = this._app._enableList.length; i < len; i++) {
        this._app._enableList[i]._onHierarchyStatePostChanged();
      }
      this._app._enableList.length = 0;
    }
  };
  Entity.prototype._onHierarchyStateChanged = function(enabled) {
    pc.Entity._super._onHierarchyStateChanged.call(this, enabled);
    var component;
    var components = this.c;
    for (var type in components) {
      if (components.hasOwnProperty(type)) {
        component = components[type];
        if (component.enabled) {
          if (enabled) {
            component.onEnable();
          } else {
            component.onDisable();
          }
        }
      }
    }
  };
  Entity.prototype._onHierarchyStatePostChanged = function() {
    var components = this.c;
    for (var type in components) {
      if (components.hasOwnProperty(type)) {
        components[type].onPostStateChange();
      }
    }
  };
  Entity.prototype.setRequest = function(request) {
    this._request = request;
  };
  Entity.prototype.getRequest = function() {
    return this._request;
  };
  Entity.prototype.findByGuid = function(guid) {
    if (this._guid === guid) {
      return this;
    }
    for (var i = 0; i < this._children.length; i++) {
      if (this._children[i].findByGuid) {
        var found = this._children[i].findByGuid(guid);
        if (found !== null) {
          return found;
        }
      }
    }
    return null;
  };
  Entity.prototype.destroy = function() {
    var name;
    for (name in this.c) {
      this.c[name].enabled = false;
    }
    for (name in this.c) {
      this.c[name].system.removeComponent(this);
    }
    if (this._parent) {
      this._parent.removeChild(this);
    }
    var children = this._children;
    var child = children.shift();
    while (child) {
      if (child instanceof pc.Entity) {
        child.destroy();
      }
      child._parent = null;
      child = children.shift();
    }
    this.fire("destroy", this);
    if (this._callbacks) {
      this._callbacks = null;
    }
    if (this._callbackActive) {
      this._callbackActive = null;
    }
  };
  Entity.prototype.clone = function() {
    var type;
    var c = new pc.Entity(this._app);
    pc.Entity._super._cloneInternal.call(this, c);
    for (type in this.c) {
      var component = this.c[type];
      component.system.cloneComponent(this, c);
    }
    var i;
    for (i = 0; i < this._children.length; i++) {
      var child = this._children[i];
      if (child instanceof pc.Entity) {
        c.addChild(child.clone());
      }
    }
    return c;
  };
  return {Entity:Entity};
}());
pc.extend(pc, function() {
  var ResourceLoader = function() {
    this._handlers = {};
    this._requests = {};
    this._cache = {};
  };
  ResourceLoader.prototype = {addHandler:function(type, handler) {
    this._handlers[type] = handler;
    handler._loader = this;
  }, removeHandler:function(type) {
    delete this._handlers[type];
  }, getHandler:function(type) {
    return this._handlers[type];
  }, load:function(url, type, callback, asset) {
    var handler = this._handlers[type];
    if (!handler) {
      var err = "No handler for asset type: " + type;
      callback(err);
      return;
    }
    var key = url + type;
    if (this._cache[key] !== undefined) {
      callback(null, this._cache[key]);
    } else {
      if (this._requests[key]) {
        this._requests[key].push(callback);
      } else {
        this._requests[key] = [callback];
        handler.load(url, function(err, data, extra) {
          if (!this._requests[key]) {
            return;
          }
          var i, len = this._requests[key].length;
          if (!err) {
            var resource = handler.open(url, data, asset);
            this._cache[key] = resource;
            for (i = 0; i < len; i++) {
              this._requests[key][i](null, resource, extra);
            }
          } else {
            for (i = 0; i < len; i++) {
              this._requests[key][i](err);
            }
          }
          delete this._requests[key];
        }.bind(this), asset);
      }
    }
  }, open:function(type, data) {
    var handler = this._handlers[type];
    if (!handler) {
      console.warn("No resource handler found for: " + type);
      return data;
    }
    return handler.open(null, data);
  }, patch:function(asset, assets) {
    var handler = this._handlers[asset.type];
    if (!handler) {
      console.warn("No resource handler found for: " + asset.type);
      return;
    }
    if (handler.patch) {
      handler.patch(asset, assets);
    }
  }, clearCache:function(url, type) {
    delete this._cache[url + type];
  }, getFromCache:function(url, type) {
    if (this._cache[url + type]) {
      return this._cache[url + type];
    }
  }, destroy:function() {
    this._handlers = {};
    this._requests = {};
    this._cache = {};
  }};
  return {ResourceLoader:ResourceLoader};
}());
pc.extend(pc, function() {
  var AnimationHandler = function() {
  };
  AnimationHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (err) {
        callback(pc.string.format("Error loading animation resource: {0} [{1}]", url, err));
      } else {
        callback(null, response);
      }
    }.bind(this));
  }, open:function(url, data) {
    return this["_parseAnimationV" + data.animation.version](data);
  }, _parseAnimationV3:function(data) {
    var animData = data.animation;
    var anim = new pc.Animation;
    anim.setName(animData.name);
    anim.duration = animData.duration;
    for (var i = 0; i < animData.nodes.length; i++) {
      var node = new pc.Node;
      var n = animData.nodes[i];
      node._name = n.name;
      for (var j = 0; j < n.keys.length; j++) {
        var k = n.keys[j];
        var t = k.time;
        var p = k.pos;
        var r = k.rot;
        var s = k.scale;
        var pos = new pc.Vec3(p[0], p[1], p[2]);
        var rot = (new pc.Quat).setFromEulerAngles(r[0], r[1], r[2]);
        var scl = new pc.Vec3(s[0], s[1], s[2]);
        var key = new pc.Key(t, pos, rot, scl);
        node._keys.push(key);
      }
      anim.addNode(node);
    }
    return anim;
  }, _parseAnimationV4:function(data) {
    var animData = data.animation;
    var anim = new pc.Animation;
    anim.setName(animData.name);
    anim.duration = animData.duration;
    for (var i = 0; i < animData.nodes.length; i++) {
      var node = new pc.Node;
      var n = animData.nodes[i];
      node._name = n.name;
      var defPos = n.defaults.p;
      var defRot = n.defaults.r;
      var defScl = n.defaults.s;
      for (var j = 0; j < n.keys.length; j++) {
        var k = n.keys[j];
        var t = k.t;
        var p = defPos ? defPos : k.p;
        var r = defRot ? defRot : k.r;
        var s = defScl ? defScl : k.s;
        var pos = new pc.Vec3(p[0], p[1], p[2]);
        var rot = (new pc.Quat).setFromEulerAngles(r[0], r[1], r[2]);
        var scl = new pc.Vec3(s[0], s[1], s[2]);
        var key = new pc.Key(t, pos, rot, scl);
        node._keys.push(key);
      }
      anim.addNode(node);
    }
    return anim;
  }};
  return {AnimationHandler:AnimationHandler};
}());
pc.extend(pc, function() {
  var ie = function() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");
    if (msie > 0) {
      return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
    }
    var trident = ua.indexOf("Trident/");
    if (trident > 0) {
      var rv = ua.indexOf("rv:");
      return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
    }
    return false;
  }();
  var AudioHandler = function(manager) {
    this.manager = manager;
  };
  AudioHandler.prototype = {_isSupported:function(url) {
    var toMIME = {".ogg":"audio/ogg", ".mp3":"audio/mpeg", ".wav":"audio/x-wav", ".mp4a":"audio/mp4", ".m4a":"audio/mp4", ".mp4":"audio/mp4", ".aac":"audio/aac"};
    var ext = pc.path.getExtension(url);
    if (toMIME[ext]) {
      return true;
    } else {
      return false;
    }
  }, load:function(url, callback) {
    var success = function(resource) {
      callback(null, new pc.Sound(resource));
    };
    var error = function(msg) {
      msg = msg || "Error loading audio url: " + url;
      console.warn(msg);
      callback(msg);
    };
    if (this._createSound) {
      if (!this._isSupported(url)) {
        error(pc.string.format("Audio format for {0} not supported", url));
        return;
      }
      this._createSound(url, success, error);
    } else {
      error(null);
    }
  }, open:function(url, data) {
    return data;
  }};
  if (pc.SoundManager.hasAudioContext()) {
    AudioHandler.prototype._createSound = function(url, success, error) {
      var manager = this.manager;
      if (!manager.context) {
        error("Audio manager has no audio context");
        return;
      }
      pc.http.get(url, function(err, response) {
        if (err) {
          error(err);
          return;
        }
        manager.context.decodeAudioData(response, success, error);
      });
    };
  } else {
    if (pc.SoundManager.hasAudio()) {
      AudioHandler.prototype._createSound = function(url, success, error) {
        var audio = null;
        try {
          audio = new Audio;
        } catch (e) {
          error("No support for Audio element");
          return;
        }
        if (ie) {
          document.body.appendChild(audio);
        }
        var onReady = function() {
          audio.removeEventListener("canplaythrough", onReady);
          if (ie) {
            document.body.removeChild(audio);
          }
          success(audio);
        };
        audio.onerror = function() {
          audio.onerror = null;
          if (ie) {
            document.body.removeChild(audio);
          }
          error();
        };
        audio.addEventListener("canplaythrough", onReady);
        audio.src = url;
      };
    }
  }
  return {AudioHandler:AudioHandler};
}());
pc.extend(pc, function() {
  var CubemapHandler = function(device, assets, loader) {
    this._device = device;
    this._assets = assets;
    this._loader = loader;
  };
  CubemapHandler.prototype = {load:function(url, callback) {
  }, open:function(url, data) {
  }, patch:function(assetCubeMap, assets) {
    var self = this;
    var loaded = false;
    if (!assetCubeMap.resources[0]) {
      assetCubeMap.resources[0] = new pc.Texture(this._device, {format:pc.PIXELFORMAT_R8_G8_B8_A8, cubemap:true, mipmaps:true, fixCubemapSeams:!!assetCubeMap._dds});
      loaded = true;
    }
    if (!assetCubeMap.file) {
      delete assetCubeMap._dds;
    } else {
      if (assetCubeMap.file && !assetCubeMap._dds) {
        var url = assetCubeMap.getFileUrl();
        assets._loader.load(url + "?t=" + assetCubeMap.file.hash, "texture", function(err, texture) {
          if (!err) {
            assets._loader.patch({resource:texture, type:"texture", data:assetCubeMap.data}, assets);
            assetCubeMap._dds = texture;
            self.patch(assetCubeMap, assets);
          } else {
            assets.fire("error", err, assetCubeMap);
            assets.fire("error:" + assetCubeMap.id, err, assetCubeMap);
            assetCubeMap.fire("error", err, assetCubeMap);
          }
        });
      }
    }
    if ((!assetCubeMap.file || !assetCubeMap._dds) && assetCubeMap.resources[1]) {
      assetCubeMap.resources = [assetCubeMap.resources[0]];
      loaded = true;
    } else {
      if (assetCubeMap._dds && !assetCubeMap.resources[1]) {
        assetCubeMap.resources = [assetCubeMap.resources[0]];
        assetCubeMap._dds.fixCubemapSeams = true;
        assetCubeMap._dds.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
        assetCubeMap._dds.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
        var startIndex = 0;
        if (this._device.useTexCubeLod) {
          assetCubeMap.resources.push(assetCubeMap._dds);
          startIndex = 1;
        }
        for (var i = startIndex; i < 6; i++) {
          var mip = new pc.Texture(this._device, {cubemap:true, fixCubemapSeams:true, mipmaps:true, format:assetCubeMap._dds.format, rgbm:assetCubeMap._dds.rgbm, width:Math.pow(2, 7 - i), height:Math.pow(2, 7 - i)});
          mip._levels[0] = assetCubeMap._dds._levels[i];
          mip.upload();
          assetCubeMap.resources.push(mip);
        }
        loaded = true;
      }
    }
    var cubemap = assetCubeMap.resource;
    if (cubemap.name !== assetCubeMap.name) {
      cubemap.name = assetCubeMap.name;
    }
    var rgbm = !!assetCubeMap.data.rgbm;
    if (assetCubeMap.data.hasOwnProperty("rgbm") && cubemap.rgbm !== rgbm) {
      cubemap.rgbm = rgbm;
    }
    cubemap.fixCubemapSeams = !!assetCubeMap._dds;
    if (assetCubeMap.data.hasOwnProperty("minFilter") && cubemap.minFilter !== assetCubeMap.data.minFilter) {
      cubemap.minFilter = assetCubeMap.data.minFilter;
    }
    if (assetCubeMap.data.hasOwnProperty("magFilter") && cubemap.magFilter !== assetCubeMap.data.magFilter) {
      cubemap.magFilter = assetCubeMap.data.magFilter;
    }
    if (assetCubeMap.data.hasOwnProperty("anisotropy") && cubemap.anisotropy !== assetCubeMap.data.anisotropy) {
      cubemap.anisotropy = assetCubeMap.data.anisotropy;
    }
    if (cubemap.addressU !== pc.ADDRESS_CLAMP_TO_EDGE) {
      cubemap.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
    }
    if (cubemap.addressV !== pc.ADDRESS_CLAMP_TO_EDGE) {
      cubemap.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
    }
    this._patchTextureFaces(assetCubeMap, assets);
    if (loaded) {
      assets.fire("load", assetCubeMap);
      assets.fire("load:" + assetCubeMap.id, assetCubeMap);
      assetCubeMap.fire("load", assetCubeMap);
    }
  }, _patchTexture:function() {
    this.registry._loader._handlers.cubemap._patchTextureFaces(this, this.registry);
  }, _patchTextureFaces:function(assetCubeMap, assets) {
    if (!assetCubeMap.loadFaces && assetCubeMap.file) {
      return;
    }
    var cubemap = assetCubeMap.resource;
    var sources = [];
    var count = 0;
    var levelsUpdated = false;
    var self = this;
    if (!assetCubeMap._levelsEvents) {
      assetCubeMap._levelsEvents = [null, null, null, null, null, null];
    }
    assetCubeMap.data.textures.forEach(function(id, index) {
      var assetAdded = function(asset) {
        asset.ready(assetReady);
        assets.load(asset);
      };
      var assetReady = function(asset) {
        count++;
        sources[index] = asset && asset.resource.getSource() || null;
        var evtAsset = assetCubeMap._levelsEvents[index];
        if (evtAsset !== asset) {
          if (evtAsset) {
            evtAsset.off("load", self._patchTexture, assetCubeMap);
          }
          if (asset) {
            asset.on("load", self._patchTexture, assetCubeMap);
          }
          assetCubeMap._levelsEvents[index] = asset || null;
        }
        if (sources[index] !== cubemap._levels[0][index]) {
          levelsUpdated = true;
        }
        if (count === 6 && levelsUpdated) {
          cubemap.setSource(sources);
          assets.fire("load", assetCubeMap);
          assets.fire("load:" + assetCubeMap.id, assetCubeMap);
          assetCubeMap.fire("load", assetCubeMap);
        }
      };
      var asset = assets.get(id);
      if (asset) {
        asset.ready(assetReady);
        assets.load(asset);
      } else {
        if (id) {
          assets.once("load:" + id, assetReady);
          assets.once("add:" + id, assetAdded);
        } else {
          assetReady(null);
        }
      }
    });
  }};
  return {CubemapHandler:CubemapHandler};
}());
pc.extend(pc, function() {
  var JsonHandler = function() {
  };
  JsonHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading JSON resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  return {JsonHandler:JsonHandler};
}());
pc.extend(pc, function() {
  var PARAMETER_TYPES = {ambient:"vec3", ambientTnumber:"boolean", aoMap:"texture", aoVertexColor:"boolean", aoVertexColorChannel:"string", aoMapChannel:"string", aoMapUv:"number", aoMapTiling:"vec2", aoMapOffset:"vec2", occludeSpecular:"boolean", diffuse:"vec3", diffuseMap:"texture", diffuseTint:"boolean", diffuseVertexColor:"boolean", diffuseVertexColorChannel:"string", diffuseMapChannel:"string", diffuseMapUv:"number", diffuseMapTiling:"vec2", diffuseMapOffset:"vec2", diffuseMapTnumber:"boolean", 
  specular:"vec3", specularVertexColor:"boolean", specularVertexColorChannel:"string", specularMapChannel:"string", specularMapUv:"number", specularMap:"texture", specularTint:"boolean", specularMapTiling:"vec2", specularMapOffset:"vec2", specularMapTnumber:"boolean", specularAntialias:"boolean", useMetalness:"boolean", metalnessMap:"texture", metalnessVertexColor:"boolean", metalnessVertexColorChannel:"string", metalnessMapChannel:"string", metalnessMapUv:"number", metalnessMapTiling:"vec2", metalnessMapOffset:"vec2", 
  metalnessMapTnumber:"boolean", metalness:"number", conserveEnergy:"boolean", shininess:"number", glossMap:"texture", glossVertexColor:"boolean", glossVertexColorChannel:"string", glossMapChannel:"string", glossMapUv:"number", glossMapTiling:"vec2", glossMapOffset:"vec2", fresnelModel:"number", fresnelFactor:"float", emissive:"vec3", emissiveMap:"texture", emissiveVertexColor:"boolean", emissiveVertexColorChannel:"string", emissiveMapChannel:"string", emissiveMapUv:"number", emissiveMapTiling:"vec2", 
  emissiveMapOffset:"vec2", emissiveTint:"boolean", emissiveIntensity:"number", normalMap:"texture", normalMapTiling:"vec2", normalMapOffset:"vec2", normalMapUv:"number", bumpMapFactor:"number", heightMap:"texture", heightMapChannel:"string", heightMapUv:"number", heightMapTiling:"vec2", heightMapOffset:"vec2", heightMapFactor:"number", alphaTest:"number", opacity:"number", opacityMap:"texture", opacityVertexColor:"boolean", opacityVertexColorChannel:"string", opacityMapChannel:"string", opacityMapUv:"number", 
  opacityMapTiling:"vec2", opacityMapOffset:"vec2", reflectivity:"number", refraction:"number", refractionIndex:"number", sphereMap:"texture", cubeMap:"cubemap", cubeMapProjection:"number", cubeMapProjectionBox:"boundingbox", lightMap:"texture", lightVertexColor:"boolean", lightVertexColorChannel:"string", lightMapChannel:"string", lightMapUv:"number", lightMapTiling:"vec2", lightMapOffset:"vec2", depthTest:"boolean", depthWrite:"boolean", depthBias:"number", slopeDepthBias:"number", cull:"number", 
  blendType:"number", shadingModel:"number"};
  var placeholders = {};
  var placeholdersMapping = {aoMap:"white", diffuseMap:"gray", specularMap:"gray", metalnessMap:"black", glossMap:"gray", emissiveMap:"gray", normalMap:"normal", heightMap:"gray", opacityMap:"gray", sphereMap:"gray", lightMap:"white"};
  var onCubemapAssetLoad = function(asset, attribute, newValue, oldValue) {
    var props = ["cubeMap", "prefilteredCubeMap128", "prefilteredCubeMap64", "prefilteredCubeMap32", "prefilteredCubeMap16", "prefilteredCubeMap8", "prefilteredCubeMap4"];
    for (var i = 0; i < props.length; i++) {
      if (this[props[i]] !== asset.resources[i]) {
        this[props[i]] = asset.resources[i];
      }
    }
    this.update();
  };
  var MaterialHandler = function(app) {
    this._assets = app.assets;
    this._device = app.graphicsDevice;
    this._createPlaceholders();
  };
  MaterialHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        if (callback) {
          callback(null, response);
        }
      } else {
        if (callback) {
          callback(pc.string.format("Error loading material: {0} [{1}]", url, err));
        }
      }
    });
  }, open:function(url, data) {
    var material = new pc.StandardMaterial;
    if (!data.parameters) {
      this._createParameters(data);
    }
    material.init(data);
    material._data = data;
    return material;
  }, _createPlaceholders:function() {
    var textures = {white:[255, 255, 255, 255], gray:[128, 128, 128, 255], black:[0, 0, 0, 255], normal:[128, 128, 255, 255]};
    for (var key in textures) {
      if (!textures.hasOwnProperty(key)) {
        continue;
      }
      var texture = placeholders[key] = new pc.Texture(this._device, {width:2, height:2, format:pc.PIXELFORMAT_R8_G8_B8_A8});
      var pixels = texture.lock();
      for (var i = 0; i < 4; i++) {
        for (var c = 0; c < 4; c++) {
          pixels[i * 4 + c] = textures[key][c];
        }
      }
      texture.unlock();
    }
  }, _createParameters:function(data) {
    var parameters = [];
    if (!data.shadingModel) {
      data.shadingModel = data.shader === "blinn" ? pc.SPECULAR_BLINN : pc.SPECULAR_PHONG;
    }
    var shader = data.shader;
    delete data.shader;
    for (var key in data) {
      if (!data.hasOwnProperty(key)) {
        continue;
      }
      parameters.push({name:key, type:PARAMETER_TYPES[key], data:data[key]});
    }
    data.shader = shader;
    data.parameters = parameters;
  }, patch:function(asset, assets) {
    if (asset.data.shader === undefined) {
      asset.data = asset.resource._data;
      delete asset.resource._data;
    }
    this._updateStandardMaterial(asset, asset.data, assets);
    asset.off("change", this._onAssetChange, this);
    asset.on("change", this._onAssetChange, this);
    asset.on("unload", this._onAssetUnload, this);
  }, _onAssetChange:function(asset, attribute, value) {
    if (attribute === "data") {
      this._updateStandardMaterial(asset, value, this._assets);
    }
  }, _onAssetUnload:function(asset) {
    delete asset.data.parameters;
    delete asset.data.chunks;
    delete asset.data.name;
  }, _updateStandardMaterial:function(asset, data, assets) {
    var material = asset.resource;
    var dir;
    if (asset.file) {
      dir = pc.path.getDirectory(asset.getFileUrl());
    }
    data.name = asset.name;
    if (!data.parameters) {
      this._createParameters(data);
    }
    var pathMapping = data.mapping_format === "path";
    data.chunks = asset.resource.chunks;
    data.parameters.forEach(function(param, i) {
      var id;
      if (param.type === "texture") {
        if (!material._assetHandlers) {
          material._assetHandlers = {};
        }
        var handler = material._assetHandlers[param.name];
        if (param.data && !(param.data instanceof pc.Texture)) {
          if (pathMapping) {
            asset = assets.getByUrl(pc.path.join(dir, param.data));
          } else {
            id = param.data;
            asset = assets.get(param.data);
          }
          if (handler) {
            assets.off("load:" + handler.id, handler.bind);
            assets.off("add:" + handler.id, handler.add);
            assets.off("remove:" + handler.id, handler.remove);
            if (handler.url) {
              assets.off("add:url:" + handler.url, handler.add);
              assets.off("remove:url:" + handler.url, handler.remove);
            }
            material._assetHandlers[param.name] = null;
          }
          handler = material._assetHandlers[param.name] = {id:id, url:pathMapping ? pc.path.join(dir, param.data) : "", bind:function(asset) {
            data.parameters[i].data = asset.resource;
            material[data.parameters[i].name] = asset.resource;
            material.update();
          }, add:function(asset) {
            assets.load(asset);
          }, remove:function(asset) {
            if (material[data.parameters[i].name] === asset.resource) {
              data.parameters[i].data = null;
              material[data.parameters[i].name] = null;
              material.update();
            }
          }};
          if (id) {
            assets.on("load:" + id, handler.bind);
            assets.on("remove:" + id, handler.remove);
          } else {
            if (pathMapping) {
              assets.on("load:url:" + pc.path.join(dir, param.data), handler.bind);
              assets.on("remove:url:" + pc.path.join(dir, param.data), handler.remove);
            }
          }
          if (asset) {
            if (asset.resource) {
              handler.bind(asset);
            } else {
              if (placeholdersMapping[data.parameters[i].name]) {
                var texture = placeholders[placeholdersMapping[data.parameters[i].name]];
                if (texture) {
                  data.parameters[i].data = texture;
                  material[data.parameters[i].name] = texture;
                }
              }
            }
            assets.load(asset);
          } else {
            if (id) {
              assets.once("add:" + id, handler.add);
            } else {
              if (pathMapping) {
                assets.once("add:url:" + handler.url, handler.add);
              }
            }
          }
        } else {
          if (handler && !param.data) {
            assets.off("load:" + handler.id, handler.bind);
            assets.off("add:" + handler.id, handler.add);
            assets.off("remove:" + handler.id, handler.remove);
            if (handler.url) {
              assets.off("add:url:" + handler.url, handler.add);
              assets.off("remove:url:" + handler.url, handler.remove);
            }
            material._assetHandlers[param.name] = null;
          }
        }
      } else {
        if (param.type === "cubemap" && param.data && !(param.data instanceof pc.Texture)) {
          if (pathMapping) {
            asset = assets.getByUrl(pc.path.join(dir, param.data));
          } else {
            id = param.data;
            asset = assets.get(param.data);
          }
          var onAdd = function(asset) {
            if (data.shadingModel === pc.SPECULAR_PHONG) {
              asset.loadFaces = true;
            }
            asset.ready(onReady);
            assets.load(asset);
          };
          var onReady = function(asset) {
            param.data = asset.resource;
            if (asset.resources.length > 1) {
              data.parameters.push({name:"prefilteredCubeMap128", data:asset.resources[1]});
              data.parameters.push({name:"prefilteredCubeMap64", data:asset.resources[2]});
              data.parameters.push({name:"prefilteredCubeMap32", data:asset.resources[3]});
              data.parameters.push({name:"prefilteredCubeMap16", data:asset.resources[4]});
              data.parameters.push({name:"prefilteredCubeMap8", data:asset.resources[5]});
              data.parameters.push({name:"prefilteredCubeMap4", data:asset.resources[6]});
            }
            material.init(data);
            asset.off("load", onCubemapAssetLoad, material);
            asset.on("load", onCubemapAssetLoad, material);
          };
          if (asset) {
            onAdd(asset);
          } else {
            if (id) {
              assets.once("add:" + id, onAdd);
            } else {
              if (pathMapping) {
                assets.once("add:url:" + pc.path.join(dir, param.data), function(asset) {
                  asset.ready(function(asset) {
                    data.parameters[i].data = asset.resource;
                    material.init(data);
                    asset.off("load", onCubemapAssetLoad, material);
                    asset.on("load", onCubemapAssetLoad, material);
                  });
                  assets.load(asset);
                });
              }
            }
          }
        }
      }
    });
    material.init(data);
  }};
  return {MaterialHandler:MaterialHandler, getMaterialParamType:function(name) {
    return PARAMETER_TYPES[name];
  }};
}());
pc.extend(pc, function() {
  var ModelHandler = function(device) {
    this._device = device;
    this._parsers = [];
    this.addParser(new pc.JsonModelParser(this._device), function(url, data) {
      return pc.path.getExtension(url) === ".json";
    });
  };
  ModelHandler.DEFAULT_MATERIAL = pc.Scene.defaultMaterial;
  ModelHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!callback) {
        return;
      }
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading model: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    for (var i = 0; i < this._parsers.length; i++) {
      var p = this._parsers[i];
      if (p.decider(url, data)) {
        return p.parser.parse(data);
      }
    }
    logWARNING(pc.string.format("No model parser found for: {0}", url));
    return null;
  }, patch:function(asset, assets) {
    if (!asset.resource) {
      return;
    }
    var data = asset.data;
    asset.resource.meshInstances.forEach(function(meshInstance, i) {
      if (data.mapping) {
        var handleMaterial = function(asset) {
          if (asset.resource) {
            meshInstance.material = asset.resource;
          } else {
            asset.once("load", handleMaterial);
            assets.load(asset);
          }
          asset.once("remove", function(asset) {
            if (meshInstance.material === asset.resource) {
              meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
            }
          });
        };
        if (!data.mapping[i]) {
          meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
          return;
        }
        var id = data.mapping[i].material;
        var url = data.mapping[i].path;
        var material;
        if (id !== undefined) {
          if (!id) {
            meshInstance.material = pc.ModelHandler.DEFAULT_MATERIAL;
          } else {
            material = assets.get(id);
            if (material) {
              handleMaterial(material);
            } else {
              assets.once("add:" + id, handleMaterial);
            }
          }
        } else {
          if (url) {
            var fileUrl = asset.getFileUrl();
            var dirUrl = pc.path.getDirectory(fileUrl);
            var path = pc.path.join(dirUrl, data.mapping[i].path);
            material = assets.getByUrl(path);
            if (material) {
              handleMaterial(material);
            } else {
              assets.once("add:url:" + path, handleMaterial);
            }
          }
        }
      }
    });
  }, addParser:function(parser, decider) {
    this._parsers.push({parser:parser, decider:decider});
  }};
  return {ModelHandler:ModelHandler};
}());
pc.extend(pc, function() {
  var ScriptHandler = function(app) {
    this._app = app;
    this._scripts = {};
    this._cache = {};
  };
  ScriptHandler._types = [];
  ScriptHandler._push = function(Type) {
    if (pc.script.legacy && ScriptHandler._types.length > 0) {
      console.assert("Script Ordering Error. Contact support@playcanvas.com");
    } else {
      ScriptHandler._types.push(Type);
    }
  };
  ScriptHandler.prototype = {load:function(url, callback) {
    var self = this;
    pc.script.app = this._app;
    this._loadScript(url, function(err, url, extra) {
      if (!err) {
        if (pc.script.legacy) {
          var Type = null;
          if (ScriptHandler._types.length) {
            Type = ScriptHandler._types.pop();
          }
          if (Type) {
            this._scripts[url] = Type;
          } else {
            Type = null;
          }
          callback(null, Type, extra);
        } else {
          var obj = {};
          for (var i = 0; i < ScriptHandler._types.length; i++) {
            obj[ScriptHandler._types[i].name] = ScriptHandler._types[i];
          }
          ScriptHandler._types.length = 0;
          callback(null, obj, extra);
          delete self._loader._cache[url + "script"];
        }
      } else {
        callback(err);
      }
    }.bind(this));
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }, _loadScript:function(url, callback) {
    var head = document.head;
    var element = document.createElement("script");
    this._cache[url] = element;
    element.async = false;
    element.addEventListener("error", function(e) {
      callback(pc.string.format("Script: {0} failed to load", e.target.src));
    }, false);
    var done = false;
    element.onload = element.onreadystatechange = function() {
      if (!done && (!this.readyState || (this.readyState == "loaded" || this.readyState == "complete"))) {
        done = true;
        callback(null, url, element);
      }
    };
    element.src = url;
    head.appendChild(element);
  }};
  return {ScriptHandler:ScriptHandler};
}());
pc.extend(pc, function() {
  var TextHandler = function() {
  };
  TextHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading text resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  return {TextHandler:TextHandler};
}());
pc.extend(pc, function() {
  var BinaryHandler = function() {
  };
  BinaryHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, {responseType:pc.Http.ResponseType.ARRAY_BUFFER}, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading binary resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  return {BinaryHandler:BinaryHandler};
}());
pc.extend(pc, function() {
  var JSON_ADDRESS_MODE = {"repeat":pc.ADDRESS_REPEAT, "clamp":pc.ADDRESS_CLAMP_TO_EDGE, "mirror":pc.ADDRESS_MIRRORED_REPEAT};
  var JSON_FILTER_MODE = {"nearest":pc.FILTER_NEAREST, "linear":pc.FILTER_LINEAR, "nearest_mip_nearest":pc.FILTER_NEAREST_MIPMAP_NEAREST, "linear_mip_nearest":pc.FILTER_LINEAR_MIPMAP_NEAREST, "nearest_mip_linear":pc.FILTER_NEAREST_MIPMAP_LINEAR, "linear_mip_linear":pc.FILTER_LINEAR_MIPMAP_LINEAR};
  function arrayBufferCopy(src, dst, dstByteOffset, numBytes) {
    var i;
    var dst32Offset = dstByteOffset / 4;
    var tail = numBytes % 4;
    var src32 = new Uint32Array(src.buffer, 0, (numBytes - tail) / 4);
    var dst32 = new Uint32Array(dst.buffer);
    for (i = 0; i < src32.length; i++) {
      dst32[dst32Offset + i] = src32[i];
    }
    for (i = numBytes - tail; i < numBytes; i++) {
      dst[dstByteOffset + i] = src[i];
    }
  }
  var TextureHandler = function(device, assets, loader) {
    this._device = device;
    this._assets = assets;
    this._loader = loader;
    this.crossOrigin = undefined;
    if (assets.prefix) {
      this.crossOrigin = "anonymous";
    }
  };
  TextureHandler.prototype = {load:function(url, callback) {
    var self = this;
    var image;
    var urlWithoutParams = url.indexOf("?") >= 0 ? url.split("?")[0] : url;
    var ext = pc.path.getExtension(urlWithoutParams).toLowerCase();
    if (ext === ".dds" || ext === ".crn") {
      var options = {cache:true, responseType:"arraybuffer"};
      pc.http.get(url, options, function(err, response) {
        if (!err) {
          callback(null, response);
        } else {
          callback(err);
        }
      });
    } else {
      if (ext === ".jpg" || ext === ".jpeg" || ext === ".gif" || ext === ".png") {
        image = new Image;
        if (self.crossOrigin !== undefined && pc.ABSOLUTE_URL.test(url)) {
          image.crossOrigin = self.crossOrigin;
        }
        image.onload = function() {
          callback(null, image);
        };
        image.onerror = function(event) {
          callback(pc.string.format("Error loading Texture from: '{0}'", url));
        };
        image.src = url;
      } else {
        var blobStart = urlWithoutParams.indexOf("blob:");
        if (blobStart >= 0) {
          urlWithoutParams = urlWithoutParams.substr(blobStart);
          url = urlWithoutParams;
          image = new Image;
          image.onload = function() {
            callback(null, image);
          };
          image.onerror = function(event) {
            callback(pc.string.format("Error loading Texture from: '{0}'", url));
          };
          image.src = url;
        } else {
          setTimeout(function() {
            callback(pc.string.format("Error loading Texture: format not supported: '{0}'", ext));
          }, 0);
        }
      }
    }
  }, open:function(url, data) {
    if (!url) {
      return;
    }
    var texture;
    var ext = pc.path.getExtension(url).toLowerCase();
    var format = null;
    if (data instanceof Image || data instanceof HTMLImageElement) {
      var img = data;
      format = ext === ".jpg" || ext === ".jpeg" ? pc.PIXELFORMAT_R8_G8_B8 : pc.PIXELFORMAT_R8_G8_B8_A8;
      texture = new pc.Texture(this._device, {width:img.width, height:img.height, format:format});
      texture.setSource(img);
    } else {
      if (data instanceof ArrayBuffer) {
        if (ext === ".crn") {
          var srcSize = data.byteLength;
          var bytes = new Uint8Array(data);
          var src = Module._malloc(srcSize);
          arrayBufferCopy(bytes, Module.HEAPU8, src, srcSize);
          var dst = Module._crn_decompress_get_data(src, srcSize);
          var dstSize = Module._crn_decompress_get_size(src, srcSize);
          data = Module.HEAPU8.buffer.slice(dst, dst + dstSize);
        }
        var header = new Uint32Array(data, 0, 128 / 4);
        var width = header[4];
        var height = header[3];
        var mips = Math.max(header[7], 1);
        var isFourCc = header[20] === 4;
        var fcc = header[21];
        var bpp = header[22];
        var isCubemap = header[28] === 65024;
        var FCC_DXT1 = 827611204;
        var FCC_DXT5 = 894720068;
        var FCC_FP32 = 116;
        var FCC_ETC1 = 826496069;
        var FCC_PVRTC_2BPP_RGB_1 = 825438800;
        var FCC_PVRTC_2BPP_RGBA_1 = 825504336;
        var FCC_PVRTC_4BPP_RGB_1 = 825439312;
        var FCC_PVRTC_4BPP_RGBA_1 = 825504848;
        var compressed = false;
        var floating = false;
        var etc1 = false;
        var pvrtc2 = false;
        var pvrtc4 = false;
        if (isFourCc) {
          if (fcc === FCC_DXT1) {
            format = pc.PIXELFORMAT_DXT1;
            compressed = true;
          } else {
            if (fcc === FCC_DXT5) {
              format = pc.PIXELFORMAT_DXT5;
              compressed = true;
            } else {
              if (fcc === FCC_FP32) {
                format = pc.PIXELFORMAT_RGBA32F;
                floating = true;
              } else {
                if (fcc === FCC_ETC1) {
                  format = pc.PIXELFORMAT_ETC1;
                  compressed = true;
                  etc1 = true;
                } else {
                  if (fcc === FCC_PVRTC_2BPP_RGB_1 || fcc === FCC_PVRTC_2BPP_RGBA_1) {
                    format = fcc === FCC_PVRTC_2BPP_RGB_1 ? pc.PIXELFORMAT_PVRTC_2BPP_RGB_1 : pc.PIXELFORMAT_PVRTC_2BPP_RGBA_1;
                    compressed = true;
                    pvrtc2 = true;
                  } else {
                    if (fcc === FCC_PVRTC_4BPP_RGB_1 || fcc === FCC_PVRTC_4BPP_RGBA_1) {
                      format = fcc === FCC_PVRTC_4BPP_RGB_1 ? pc.PIXELFORMAT_PVRTC_4BPP_RGB_1 : pc.PIXELFORMAT_PVRTC_4BPP_RGBA_1;
                      compressed = true;
                      pvrtc4 = true;
                    }
                  }
                }
              }
            }
          }
        } else {
          if (bpp === 32) {
            format = pc.PIXELFORMAT_R8_G8_B8_A8;
          }
        }
        if (!format) {
          texture = new pc.Texture(this._device, {width:4, height:4, format:pc.PIXELFORMAT_R8_G8_B8});
          return texture;
        }
        var texOptions = {width:width, height:height, format:format, cubemap:isCubemap};
        texture = new pc.Texture(this._device, texOptions);
        if (isCubemap) {
          texture.addressU = pc.ADDRESS_CLAMP_TO_EDGE;
          texture.addressV = pc.ADDRESS_CLAMP_TO_EDGE;
        }
        var offset = 128;
        var faces = isCubemap ? 6 : 1;
        var mipSize;
        var DXT_BLOCK_WIDTH = 4;
        var DXT_BLOCK_HEIGHT = 4;
        var blockSize = fcc === FCC_DXT1 ? 8 : 16;
        var numBlocksAcross, numBlocksDown, numBlocks;
        for (var face = 0; face < faces; face++) {
          var mipWidth = width;
          var mipHeight = height;
          for (var i = 0; i < mips; i++) {
            if (compressed) {
              if (etc1) {
                mipSize = Math.floor((mipWidth + 3) / 4) * Math.floor((mipHeight + 3) / 4) * 8;
              } else {
                if (pvrtc2) {
                  mipSize = Math.max(mipWidth, 16) * Math.max(mipHeight, 8) / 4;
                } else {
                  if (pvrtc4) {
                    mipSize = Math.max(mipWidth, 8) * Math.max(mipHeight, 8) / 2;
                  } else {
                    numBlocksAcross = Math.floor((mipWidth + DXT_BLOCK_WIDTH - 1) / DXT_BLOCK_WIDTH);
                    numBlocksDown = Math.floor((mipHeight + DXT_BLOCK_HEIGHT - 1) / DXT_BLOCK_HEIGHT);
                    numBlocks = numBlocksAcross * numBlocksDown;
                    mipSize = numBlocks * blockSize;
                  }
                }
              }
            } else {
              mipSize = mipWidth * mipHeight * 4;
            }
            var mipBuff = floating ? new Float32Array(data, offset, mipSize) : new Uint8Array(data, offset, mipSize);
            if (!isCubemap) {
              texture._levels[i] = mipBuff;
            } else {
              if (!texture._levels[i]) {
                texture._levels[i] = [];
              }
              texture._levels[i][face] = mipBuff;
            }
            offset += floating ? mipSize * 4 : mipSize;
            mipWidth = Math.max(mipWidth * 0.5, 1);
            mipHeight = Math.max(mipHeight * 0.5, 1);
          }
        }
        texture.upload();
      }
    }
    return texture;
  }, patch:function(asset, assets) {
    var texture = asset.resource;
    if (!texture) {
      return;
    }
    if (texture.name !== asset.name) {
      texture.name = asset.name;
    }
    if (asset.data.hasOwnProperty("minfilter") && texture.minFilter !== JSON_FILTER_MODE[asset.data.minfilter]) {
      texture.minFilter = JSON_FILTER_MODE[asset.data.minfilter];
    }
    if (asset.data.hasOwnProperty("magfilter") && texture.magFilter !== JSON_FILTER_MODE[asset.data.magfilter]) {
      texture.magFilter = JSON_FILTER_MODE[asset.data.magfilter];
    }
    if (asset.data.hasOwnProperty("addressu") && texture.addressU !== JSON_ADDRESS_MODE[asset.data.addressu]) {
      texture.addressU = JSON_ADDRESS_MODE[asset.data.addressu];
    }
    if (asset.data.hasOwnProperty("addressv") && texture.addressV !== JSON_ADDRESS_MODE[asset.data.addressv]) {
      texture.addressV = JSON_ADDRESS_MODE[asset.data.addressv];
    }
    if (asset.data.hasOwnProperty("mipmaps") && texture.mipmaps !== asset.data.mipmaps) {
      texture.mipmaps = asset.data.mipmaps;
    }
    if (asset.data.hasOwnProperty("anisotropy") && texture.anisotropy !== asset.data.anisotropy) {
      texture.anisotropy = asset.data.anisotropy;
    }
    var rgbm = !!asset.data.rgbm;
    if (asset.data.hasOwnProperty("rgbm") && texture.rgbm !== rgbm) {
      texture.rgbm = rgbm;
    }
  }};
  return {TextureHandler:TextureHandler};
}());
pc.extend(pc, function() {
  var HtmlHandler = function() {
  };
  HtmlHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading html resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  return {HtmlHandler:HtmlHandler};
}());
pc.extend(pc, function() {
  var CssHandler = function() {
  };
  CssHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading css resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  var createStyle = function(cssString) {
    var result = document.createElement("style");
    result.type = "text/css";
    if (result.styleSheet) {
      result.styleSheet.cssText = cssString;
    } else {
      result.appendChild(document.createTextNode(cssString));
    }
    return result;
  };
  return {CssHandler:CssHandler, createStyle:createStyle};
}());
pc.extend(pc, function() {
  var ShaderHandler = function() {
  };
  ShaderHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback(pc.string.format("Error loading shader resource: {0} [{1}]", url, err));
      }
    });
  }, open:function(url, data) {
    return data;
  }, patch:function(asset, assets) {
  }};
  return {ShaderHandler:ShaderHandler};
}());
pc.extend(pc, function() {
  var SceneHandler = function(app) {
    this._app = app;
  };
  SceneHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback("Error requesting scene: " + url);
      }
    });
  }, open:function(url, data) {
    this._app.systems.script.preloading = true;
    var parser = new pc.SceneParser(this._app);
    var parent = parser.parse(data);
    var scene = this._app.scene;
    scene.root = parent;
    this._app.applySceneSettings(data.settings);
    this._app.systems.script.preloading = false;
    return scene;
  }, patch:function(asset, assets) {
  }};
  return {SceneHandler:SceneHandler};
}());
pc.extend(pc, function() {
  var HierarchyHandler = function(app) {
    this._app = app;
  };
  HierarchyHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback("Error requesting scene: " + url);
      }
    });
  }, open:function(url, data) {
    this._app.systems.script.preloading = true;
    var parser = new pc.SceneParser(this._app);
    var parent = parser.parse(data);
    this._app.systems.script.preloading = false;
    return parent;
  }};
  return {HierarchyHandler:HierarchyHandler};
}());
pc.extend(pc, function() {
  var SceneSettingsHandler = function(app) {
    this._app = app;
  };
  SceneSettingsHandler.prototype = {load:function(url, callback) {
    pc.http.get(url, function(err, response) {
      if (!err) {
        callback(null, response);
      } else {
        callback("Error requesting scene: " + url);
      }
    });
  }, open:function(url, data) {
    return data.settings;
  }};
  return {SceneSettingsHandler:SceneSettingsHandler};
}());
pc.extend(pc, function() {
  var FolderHandler = function() {
  };
  FolderHandler.prototype = {load:function(url, callback) {
    callback(null, null);
  }, open:function(url, data) {
    return data;
  }};
  return {FolderHandler:FolderHandler};
}());
pc.extend(pc, function() {
  var FontHandler = function(loader) {
    this._loader = loader;
  };
  FontHandler.prototype = {load:function(url, callback, asset) {
    var self = this;
    if (pc.path.getExtension(url) === ".json") {
      pc.http.get(url, function(err, response) {
        if (!err) {
          self._loadTextures(url.replace(".json", ".png"), response, function(err, textures) {
            if (err) {
              return callback(err);
            }
            callback(null, {data:response, textures:textures});
          });
        } else {
          callback(pc.string.format("Error loading font resource: {0} [{1}]", url, err));
        }
      });
    } else {
      this._loadTextures(url, asset && asset.data, callback);
    }
  }, _loadTextures:function(url, data, callback) {
    var numTextures = 1;
    var numLoaded = 0;
    var error = null;
    if (data && data.version >= 2) {
      numTextures = data.info.maps.length;
    }
    var textures = new Array(numTextures);
    var loader = this._loader;
    var loadTexture = function(index) {
      var onLoaded = function(err, texture) {
        if (error) {
          return;
        }
        if (err) {
          error = err;
          return callback(err);
        }
        texture.upload();
        textures[index] = texture;
        numLoaded++;
        if (numLoaded === numTextures) {
          callback(null, textures);
        }
      };
      if (index === 0) {
        loader.load(url, "texture", onLoaded);
      } else {
        loader.load(url.replace(".png", index + ".png"), "texture", onLoaded);
      }
    };
    for (var i = 0; i < numTextures; i++) {
      loadTexture(i);
    }
  }, open:function(url, data, asset) {
    var font;
    if (data.textures) {
      font = new pc.Font(data.textures, data.data);
    } else {
      font = new pc.Font(data, null);
    }
    return font;
  }, patch:function(asset, assets) {
    var font = asset.resource;
    if (!font.data && asset.data) {
      font.data = asset.data;
    } else {
      if (!asset.data && font.data) {
        asset.data = font.data;
      }
    }
  }};
  return {FontHandler:FontHandler};
}());
pc.extend(pc, function() {
  var JSON_ADDRESS_MODE = {"repeat":pc.ADDRESS_REPEAT, "clamp":pc.ADDRESS_CLAMP_TO_EDGE, "mirror":pc.ADDRESS_MIRRORED_REPEAT};
  var JSON_FILTER_MODE = {"nearest":pc.FILTER_NEAREST, "linear":pc.FILTER_LINEAR, "nearest_mip_nearest":pc.FILTER_NEAREST_MIPMAP_NEAREST, "linear_mip_nearest":pc.FILTER_LINEAR_MIPMAP_NEAREST, "nearest_mip_linear":pc.FILTER_NEAREST_MIPMAP_LINEAR, "linear_mip_linear":pc.FILTER_LINEAR_MIPMAP_LINEAR};
  var regexFrame = /^data\.frames\.(\d+)$/;
  var TextureAtlasHandler = function(loader) {
    this._loader = loader;
  };
  TextureAtlasHandler.prototype = {load:function(url, callback) {
    var self = this;
    var handler = this._loader.getHandler("texture");
    if (pc.path.getExtension(url) === ".json") {
      pc.http.get(url, function(err, response) {
        if (!err) {
          var textureUrl = url.replace(".json", ".png");
          self._loader.load(textureUrl, "texture", function(err, texture) {
            if (err) {
              callback(err);
            } else {
              callback(null, {data:response, texture:texture});
            }
          });
        } else {
          callback(err);
        }
      });
    } else {
      return handler.load(url, callback);
    }
  }, open:function(url, data) {
    var resource = new pc.TextureAtlas;
    if (data.texture && data.data) {
      resource.texture = data.texture;
      resource.__data = data.data;
    } else {
      var handler = this._loader.getHandler("texture");
      var texture = handler.open(url, data);
      if (!texture) {
        return null;
      }
      resource.texture = texture;
    }
    return resource;
  }, patch:function(asset, assets) {
    if (asset.resource.__data) {
      if (asset.resource.__data.minfilter !== undefined) {
        asset.data.minfilter = asset.resource.__data.minfilter;
      }
      if (asset.resource.__data.magfilter !== undefined) {
        asset.data.magfilter = asset.resource.__data.magfilter;
      }
      if (asset.resource.__data.addressu !== undefined) {
        asset.data.addressu = asset.resource.__data.addressu;
      }
      if (asset.resource.__data.addressv !== undefined) {
        asset.data.addressv = asset.resource.__data.addressv;
      }
      if (asset.resource.__data.mipmaps !== undefined) {
        asset.data.mipmaps = asset.resource.__data.mipmaps;
      }
      if (asset.resource.__data.anisotropy !== undefined) {
        asset.data.anisotropy = asset.resource.__data.anisotropy;
      }
      if (asset.resource.__data.rgbm !== undefined) {
        asset.data.rgbm = !!asset.resource.__data.rgbm;
      }
      asset.data.frames = asset.resource.__data.frames;
      delete asset.resource.__data;
    }
    var texture = asset.resource.texture;
    if (texture) {
      texture.name = asset.name;
      if (asset.data.hasOwnProperty("minfilter") && texture.minFilter !== JSON_FILTER_MODE[asset.data.minfilter]) {
        texture.minFilter = JSON_FILTER_MODE[asset.data.minfilter];
      }
      if (asset.data.hasOwnProperty("magfilter") && texture.magFilter !== JSON_FILTER_MODE[asset.data.magfilter]) {
        texture.magFilter = JSON_FILTER_MODE[asset.data.magfilter];
      }
      if (asset.data.hasOwnProperty("addressu") && texture.addressU !== JSON_ADDRESS_MODE[asset.data.addressu]) {
        texture.addressU = JSON_ADDRESS_MODE[asset.data.addressu];
      }
      if (asset.data.hasOwnProperty("addressv") && texture.addressV !== JSON_ADDRESS_MODE[asset.data.addressv]) {
        texture.addressV = JSON_ADDRESS_MODE[asset.data.addressv];
      }
      if (asset.data.hasOwnProperty("mipmaps") && texture.mipmaps !== asset.data.mipmaps) {
        texture.mipmaps = asset.data.mipmaps;
      }
      if (asset.data.hasOwnProperty("anisotropy") && texture.anisotropy !== asset.data.anisotropy) {
        texture.anisotropy = asset.data.anisotropy;
      }
      var rgbm = !!asset.data.rgbm;
      if (asset.data.hasOwnProperty("rgbm") && texture.rgbm !== rgbm) {
        texture.rgbm = rgbm;
      }
    }
    asset.resource.texture = texture;
    var frames = {};
    for (var key in asset.data.frames) {
      var frame = asset.data.frames[key];
      frames[key] = {rect:new pc.Vec4(frame.rect), pivot:new pc.Vec2(frame.pivot), border:new pc.Vec4(frame.border)};
    }
    asset.resource.frames = frames;
    asset.off("change", this._onAssetChange, this);
    asset.on("change", this._onAssetChange, this);
  }, _onAssetChange:function(asset, attribute, value) {
    if (attribute === "data" || attribute === "data.frames") {
      var frames = {};
      for (var key in value.frames) {
        var frame = value.frames[key];
        frames[key] = {rect:new pc.Vec4(frame.rect), pivot:new pc.Vec2(frame.pivot), border:new pc.Vec4(frame.border)};
      }
      asset.resource.frames = frames;
    } else {
      var match = attribute.match(regexFrame);
      if (match) {
        var frameKey = match[1];
        if (value) {
          if (!asset.resource.frames[frameKey]) {
            asset.resource.frames[frameKey] = {rect:new pc.Vec4(value.rect), pivot:new pc.Vec2(value.pivot), border:new pc.Vec4(value.border)};
          } else {
            var frame = asset.resource.frames[frameKey];
            frame.rect.set(value.rect[0], value.rect[1], value.rect[2], value.rect[3]);
            frame.pivot.set(value.pivot[0], value.pivot[1]);
            frame.border.set(value.border[0], value.border[1], value.border[2], value.border[3]);
          }
          asset.resource.fire("set:frame", frameKey, asset.resource.frames[frameKey]);
        } else {
          if (asset.resource.frames[frameKey]) {
            delete asset.resource.frames[frameKey];
            asset.resource.fire("remove:frame", frameKey);
          }
        }
      }
    }
  }};
  return {TextureAtlasHandler:TextureAtlasHandler};
}());
pc.extend(pc, function() {
  var SpriteHandler = function(assets, device) {
    this._assets = assets;
    this._device = device;
  };
  var onTextureAtlasLoaded = function(atlasAsset) {
    var spriteAsset = this;
    if (spriteAsset.resource) {
      spriteAsset.resource.atlas = atlasAsset.resource;
    }
  };
  var onTextureAtlasAdded = function(atlasAsset) {
    var spriteAsset = this;
    spriteAsset.registry.load(atlasAsset);
  };
  SpriteHandler.prototype = {load:function(url, callback) {
    if (pc.path.getExtension(url) === ".json") {
      pc.http.get(url, function(err, response) {
        if (!err) {
          callback(null, response);
        } else {
          callback(err);
        }
      });
    }
  }, open:function(url, data) {
    var sprite = new pc.Sprite(this._device);
    if (data) {
      sprite.__data = data;
    }
    return sprite;
  }, patch:function(asset, assets) {
    var sprite = asset.resource;
    if (sprite.__data) {
      asset.data.pixelsPerUnit = sprite.__data.pixelsPerUnit;
      asset.data.renderMode = sprite.__data.renderMode;
      asset.data.frameKeys = sprite.__data.frameKeys;
      var atlas = assets.getByUrl(sprite.__data.textureAtlasAsset);
      if (atlas) {
        asset.data.textureAtlasAsset = atlas.id;
      }
      delete sprite.__data;
    }
    sprite.startUpdate();
    sprite.renderMode = asset.data.renderMode;
    sprite.pixelsPerUnit = asset.data.pixelsPerUnit;
    sprite.frameKeys = asset.data.frameKeys;
    this._updateAtlas(asset);
    sprite.endUpdate();
    asset.off("change", this._onAssetChange, this);
    asset.on("change", this._onAssetChange, this);
  }, _updateAtlas:function(asset) {
    var sprite = asset.resource;
    if (!asset.data.textureAtlasAsset) {
      sprite.atlas = null;
      return;
    }
    this._assets.off("load:" + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);
    this._assets.on("load:" + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);
    var atlasAsset = this._assets.get(asset.data.textureAtlasAsset);
    if (atlasAsset && atlasAsset.resource) {
      sprite.atlas = atlasAsset.resource;
    } else {
      if (!atlasAsset) {
        this._assets.off("add:" + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);
        this._assets.on("add:" + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);
      } else {
        this._assets.load(atlasAsset);
      }
    }
  }, _onAssetChange:function(asset, attribute, value, oldValue) {
    if (attribute === "data") {
      if (value && value.textureAtlasAsset && oldValue && value.textureAtlasAsset !== oldValue.textureAtlasAsset) {
        this._assets.off("load:" + oldValue.textureAtlasAsset, onTextureAtlasLoaded, asset);
        this._assets.off("add:" + oldValue.textureAtlasAsset, onTextureAtlasAdded, asset);
      }
    }
  }};
  return {SpriteHandler:SpriteHandler};
}());
pc.extend(pc, function() {
  var JSON_PRIMITIVE_TYPE = {"points":pc.PRIMITIVE_POINTS, "lines":pc.PRIMITIVE_LINES, "lineloop":pc.PRIMITIVE_LINELOOP, "linestrip":pc.PRIMITIVE_LINESTRIP, "triangles":pc.PRIMITIVE_TRIANGLES, "trianglestrip":pc.PRIMITIVE_TRISTRIP, "trianglefan":pc.PRIMITIVE_TRIFAN};
  var JSON_VERTEX_ELEMENT_TYPE = {"int8":pc.TYPE_INT8, "uint8":pc.TYPE_UINT8, "int16":pc.TYPE_INT16, "uint16":pc.TYPE_UINT16, "int32":pc.TYPE_INT32, "uint32":pc.TYPE_UINT32, "float32":pc.TYPE_FLOAT32};
  var JsonModelParser = function(device) {
    this._device = device;
  };
  JsonModelParser.prototype = {parse:function(data) {
    var modelData = data.model;
    if (!modelData) {
      return null;
    }
    if (modelData.version <= 1) {
      logERROR(pc.string.format("Trying to parse unsupported model format."));
      return null;
    }
    var nodes = this._parseNodes(data);
    var skins = this._parseSkins(data, nodes);
    var morphs = this._parseMorphs(data, nodes);
    var vertexBuffers = this._parseVertexBuffers(data);
    var indices = this._parseIndexBuffers(data, vertexBuffers);
    var meshes = this._parseMeshes(data, skins.skins, morphs.morphs, vertexBuffers, indices.buffer, indices.data);
    this._initMorphs(data, morphs.morphs, vertexBuffers, meshes);
    var meshInstances = this._parseMeshInstances(data, nodes, meshes, skins.skins, skins.instances, morphs.morphs, morphs.instances);
    var model = new pc.Model;
    model.graph = nodes[0];
    model.meshInstances = meshInstances;
    model.skinInstances = skins.instances;
    model.morphInstances = morphs.instances;
    model.getGraph().syncHierarchy();
    return model;
  }, _parseNodes:function(data) {
    var modelData = data.model;
    var nodes = [];
    var i;
    for (i = 0; i < modelData.nodes.length; i++) {
      var nodeData = modelData.nodes[i];
      var node = new pc.GraphNode;
      node.setName(nodeData.name);
      node.setLocalPosition(nodeData.position[0], nodeData.position[1], nodeData.position[2]);
      node.setLocalEulerAngles(nodeData.rotation[0], nodeData.rotation[1], nodeData.rotation[2]);
      node.setLocalScale(nodeData.scale[0], nodeData.scale[1], nodeData.scale[2]);
      node.scaleCompensation = !!nodeData.scaleCompensation;
      nodes.push(node);
    }
    for (i = 1; i < modelData.parents.length; i++) {
      nodes[modelData.parents[i]].addChild(nodes[i]);
    }
    return nodes;
  }, _parseSkins:function(data, nodes) {
    var modelData = data.model;
    var skins = [];
    var skinInstances = [];
    var i, j;
    if (!this._device.supportsBoneTextures && modelData.skins.length > 0) {
      var boneLimit = this._device.getBoneLimit();
      pc.partitionSkin(modelData, null, boneLimit);
    }
    for (i = 0; i < modelData.skins.length; i++) {
      var skinData = modelData.skins[i];
      var inverseBindMatrices = [];
      for (j = 0; j < skinData.inverseBindMatrices.length; j++) {
        var ibm = skinData.inverseBindMatrices[j];
        inverseBindMatrices[j] = new pc.Mat4(ibm[0], ibm[1], ibm[2], ibm[3], ibm[4], ibm[5], ibm[6], ibm[7], ibm[8], ibm[9], ibm[10], ibm[11], ibm[12], ibm[13], ibm[14], ibm[15]);
      }
      var skin = new pc.Skin(this._device, inverseBindMatrices, skinData.boneNames);
      skins.push(skin);
      var skinInstance = new pc.SkinInstance(skin);
      var bones = [];
      for (j = 0; j < skin.boneNames.length; j++) {
        var boneName = skin.boneNames[j];
        var bone = nodes[0].findByName(boneName);
        bones.push(bone);
      }
      skinInstance.bones = bones;
      skinInstances.push(skinInstance);
    }
    return {skins:skins, instances:skinInstances};
  }, _parseMorphs:function(data, nodes) {
    var modelData = data.model;
    var morphs = [];
    var morphInstances = [];
    var i, j;
    var targets, morphTarget, morphTargetArray;
    if (modelData.morphs) {
      for (i = 0; i < modelData.morphs.length; i++) {
        targets = modelData.morphs[i].targets;
        morphTargetArray = [];
        for (j = 0; j < targets.length; j++) {
          var targetAabb = targets[j].aabb;
          var min = targetAabb.min;
          var max = targetAabb.max;
          var aabb = new pc.BoundingBox(new pc.Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new pc.Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));
          morphTarget = new pc.MorphTarget({indices:targets[j].indices, deltaPositions:targets[j].deltaPositions, deltaNormals:targets[j].deltaNormals, name:targets[j].name, aabb:aabb});
          morphTargetArray.push(morphTarget);
        }
        var morph = new pc.Morph(morphTargetArray);
        morphs.push(morph);
        var morphInstance = new pc.MorphInstance(morph);
        morphInstances.push(morphInstance);
      }
    }
    return {morphs:morphs, instances:morphInstances};
  }, _calculateTangentsMorphTarget:function(positions, normals, uvs, indices, tan1, tan2, mtIndices, tangents) {
    var sdirx, sdiry, sdirz;
    var tdirx, tdiry, tdirz;
    var v1x, v1y, v1z;
    var v2x, v2y, v2z;
    var v3x, v3y, v3z;
    var w1x, w1y;
    var w2x, w2y;
    var w3x, w3y;
    var t1x, t1y, t1z;
    var t2x, t2y, t2z;
    var nx, ny, nz;
    var triangleCount;
    var i1, i2, i3;
    var x1, x2, y1, y2, z1, z2, s1, s2, t1, t2, r;
    var i, j;
    var area, ndott, mtIndexCount, len;
    triangleCount = indices.length / 3;
    area = 0.0;
    for (i = 0; i < triangleCount; i++) {
      i1 = indices[i * 3];
      i2 = indices[i * 3 + 1];
      i3 = indices[i * 3 + 2];
      v1x = positions[i1 * 3];
      v1y = positions[i1 * 3 + 1];
      v1z = positions[i1 * 3 + 2];
      v2x = positions[i2 * 3];
      v2y = positions[i2 * 3 + 1];
      v2z = positions[i2 * 3 + 2];
      v3x = positions[i3 * 3];
      v3y = positions[i3 * 3 + 1];
      v3z = positions[i3 * 3 + 2];
      w1x = uvs[i1 * 2];
      w1y = uvs[i1 * 2 + 1];
      w2x = uvs[i2 * 2];
      w2y = uvs[i2 * 2 + 1];
      w3x = uvs[i3 * 2];
      w3y = uvs[i3 * 2 + 1];
      x1 = v2x - v1x;
      x2 = v3x - v1x;
      y1 = v2y - v1y;
      y2 = v3y - v1y;
      z1 = v2z - v1z;
      z2 = v3z - v1z;
      s1 = w2x - w1x;
      s2 = w3x - w1x;
      t1 = w2y - w1y;
      t2 = w3y - w1y;
      area = s1 * t2 - s2 * t1;
      if (area == 0.0) {
        sdirx = 0;
        sdiry = 1;
        sdirz = 0;
        tdirx = 1;
        tdiry = 0;
        tdirz = 0;
      } else {
        r = 1.0 / area;
        sdirx = (t2 * x1 - t1 * x2) * r;
        sdiry = (t2 * y1 - t1 * y2) * r;
        sdirz = (t2 * z1 - t1 * z2) * r;
        tdirx = (s1 * x2 - s2 * x1) * r;
        tdiry = (s1 * y2 - s2 * y1) * r;
        tdirz = (s1 * z2 - s2 * z1) * r;
      }
      tan1[i1 * 3 + 0] += sdirx;
      tan1[i1 * 3 + 1] += sdiry;
      tan1[i1 * 3 + 2] += sdirz;
      tan1[i2 * 3 + 0] += sdirx;
      tan1[i2 * 3 + 1] += sdiry;
      tan1[i2 * 3 + 2] += sdirz;
      tan1[i3 * 3 + 0] += sdirx;
      tan1[i3 * 3 + 1] += sdiry;
      tan1[i3 * 3 + 2] += sdirz;
      tan2[i1 * 3 + 0] += tdirx;
      tan2[i1 * 3 + 1] += tdiry;
      tan2[i1 * 3 + 2] += tdirz;
      tan2[i2 * 3 + 0] += tdirx;
      tan2[i2 * 3 + 1] += tdiry;
      tan2[i2 * 3 + 2] += tdirz;
      tan2[i3 * 3 + 0] += tdirx;
      tan2[i3 * 3 + 1] += tdiry;
      tan2[i3 * 3 + 2] += tdirz;
    }
    mtIndexCount = mtIndices.length;
    for (j = 0; j < mtIndexCount; j++) {
      i = mtIndices[j];
      nx = normals[i * 3];
      ny = normals[i * 3 + 1];
      nz = normals[i * 3 + 2];
      t1x = tan1[i * 3];
      t1y = tan1[i * 3 + 1];
      t1z = tan1[i * 3 + 2];
      t2x = tan2[i * 3];
      t2y = tan2[i * 3 + 1];
      t2z = tan2[i * 3 + 2];
      ndott = nx * t1x + ny * t1y + nz * t1z;
      v1x = nx * ndott;
      v1y = ny * ndott;
      v1z = nz * ndott;
      v2x = ny * t1z - t1y * nz;
      v2y = nz * t1x - t1z * nx;
      v2z = nx * t1y - t1x * ny;
      t1x -= v1x;
      t1y -= v1y;
      t1z -= v1z;
      len = 1.0 / Math.sqrt(t1x * t1x + t1y * t1y + t1z * t1z);
      t1x *= len;
      t1y *= len;
      t1z *= len;
      tangents[i * 4] = t1x;
      tangents[i * 4 + 1] = t1y;
      tangents[i * 4 + 2] = t1z;
      tangents[i * 4 + 3] = v2x * t2x + v2y * t2y + v2z * t2z < 0.0 ? -1.0 : 1.0;
    }
    return tangents;
  }, _initMorphs:function(data, morphs, vertexBuffers, meshes) {
    var modelData = data.model;
    var i, j;
    var target, k, l, index;
    var triA, triB, triC;
    var flagged;
    var basePos;
    var baseNorm;
    var baseUv;
    var numVerts;
    var numIndices;
    var tpos, tnorm;
    var vertexData;
    var mtTriIndices = [];
    var processed = [];
    var vid;
    for (i = 0; i < meshes.length; i++) {
      vid = modelData.meshes[i].vertices;
      if (processed[vid]) {
        continue;
      }
      vertexData = modelData.vertices[vid];
      if (!vertexData.tangent) {
        continue;
      }
      var tangents = new Float32Array(vertexData.tangent.data);
      processed[vid] = true;
      if (vertexData.position && vertexData.normal && vertexData.texCoord0) {
        var indices = [];
        for (j = 0; j < modelData.meshes.length; j++) {
          if (modelData.meshes[j].vertices === vid) {
            indices = indices.concat(modelData.meshes[j].indices);
          }
        }
        basePos = vertexData.position.data;
        baseNorm = vertexData.normal.data;
        baseUv = vertexData.texCoord0.data;
        numVerts = basePos.length / 3;
        numIndices = indices.length;
        var targetTangents = new Float32Array(numVerts * 4);
        var tan1 = new Float32Array(numVerts * 3);
        var tan2 = new Float32Array(numVerts * 3);
        tpos = new Float32Array(numVerts * 3);
        tpos.set(basePos);
        tnorm = new Float32Array(numVerts * 3);
        tnorm.set(baseNorm);
        for (j = 0; j < morphs.length; j++) {
          if (modelData.meshes[i].morph !== j) {
            continue;
          }
          for (k = 0; k < morphs[j]._targets.length; k++) {
            target = morphs[j]._targets[k];
            var mtIndices = target.indices;
            var numMtIndices = mtIndices.length;
            if (numMtIndices === 0) {
              continue;
            }
            target.deltaTangents = new Float32Array(numMtIndices * 4);
            if (!flagged || flagged.length < numVerts) {
              flagged = new Uint8Array(numVerts);
            } else {
              for (l = 0; l > numVerts; l++) {
                flagged[l] = 0;
              }
            }
            for (l = 0; l < numMtIndices; l++) {
              index = mtIndices[l];
              flagged[index] = 1;
            }
            var numMtTriIndices = 0;
            for (l = 0; l < numIndices; l += 3) {
              triA = indices[l];
              triB = indices[l + 1];
              triC = indices[l + 2];
              if (flagged[triA] || flagged[triB] || flagged[triC]) {
                mtTriIndices[numMtTriIndices] = triA;
                mtTriIndices[numMtTriIndices + 1] = triB;
                mtTriIndices[numMtTriIndices + 2] = triC;
                numMtTriIndices += 3;
              }
            }
            mtTriIndices.length = numMtTriIndices;
            var deltaPos = target.deltaPositions;
            var deltaNorm = target.deltaNormals;
            for (l = 0; l < numMtIndices; l++) {
              index = mtIndices[l];
              tpos[index * 3] += deltaPos[l * 3];
              tpos[index * 3 + 1] += deltaPos[l * 3 + 1];
              tpos[index * 3 + 2] += deltaPos[l * 3 + 2];
              tnorm[index * 3] += deltaNorm[l * 3];
              tnorm[index * 3 + 1] += deltaNorm[l * 3 + 1];
              tnorm[index * 3 + 2] += deltaNorm[l * 3 + 2];
            }
            this._calculateTangentsMorphTarget(tpos, tnorm, baseUv, mtTriIndices, tan1, tan2, mtIndices, targetTangents);
            var deltaTangents = target.deltaTangents;
            for (l = 0; l < numMtIndices; l++) {
              index = mtIndices[l];
              deltaTangents[l * 4] = targetTangents[l * 4] - tangents[index * 4];
              deltaTangents[l * 4 + 1] = targetTangents[l * 4 + 1] - tangents[index * 4 + 1];
              deltaTangents[l * 4 + 2] = targetTangents[l * 4 + 2] - tangents[index * 4 + 2];
              deltaTangents[l * 4 + 3] = targetTangents[l * 4 + 3] - tangents[index * 4 + 3];
            }
            if (k === morphs[j]._targets.length - 1) {
              continue;
            }
            for (l = 0; l < numIndices; l += 3) {
              triA = indices[l];
              triB = indices[l + 1];
              triC = indices[l + 2];
              tan1[triA * 3 + 0] = 0;
              tan1[triA * 3 + 1] = 0;
              tan1[triA * 3 + 2] = 0;
              tan1[triB * 3 + 0] = 0;
              tan1[triB * 3 + 1] = 0;
              tan1[triB * 3 + 2] = 0;
              tan1[triC * 3 + 0] = 0;
              tan1[triC * 3 + 1] = 0;
              tan1[triC * 3 + 2] = 0;
              tan2[triA * 3 + 0] = 0;
              tan2[triA * 3 + 1] = 0;
              tan2[triA * 3 + 2] = 0;
              tan2[triB * 3 + 0] = 0;
              tan2[triB * 3 + 1] = 0;
              tan2[triB * 3 + 2] = 0;
              tan2[triC * 3 + 0] = 0;
              tan2[triC * 3 + 1] = 0;
              tan2[triC * 3 + 2] = 0;
            }
            for (l = 0; l < numMtIndices; l++) {
              index = target.indices[l];
              tpos[index * 3] = basePos[index * 3];
              tpos[index * 3 + 1] = basePos[index * 3 + 1];
              tpos[index * 3 + 2] = basePos[index * 3 + 2];
              tnorm[index * 3] = baseNorm[index * 3];
              tnorm[index * 3 + 1] = baseNorm[index * 3 + 1];
              tnorm[index * 3 + 2] = baseNorm[index * 3 + 2];
            }
          }
        }
      }
    }
  }, _parseVertexBuffers:function(data) {
    var modelData = data.model;
    var vertexBuffers = [];
    var attribute, attributeName;
    var attributeMap = {position:pc.SEMANTIC_POSITION, normal:pc.SEMANTIC_NORMAL, tangent:pc.SEMANTIC_TANGENT, blendWeight:pc.SEMANTIC_BLENDWEIGHT, blendIndices:pc.SEMANTIC_BLENDINDICES, color:pc.SEMANTIC_COLOR, texCoord0:pc.SEMANTIC_TEXCOORD0, texCoord1:pc.SEMANTIC_TEXCOORD1, texCoord2:pc.SEMANTIC_TEXCOORD2, texCoord3:pc.SEMANTIC_TEXCOORD3, texCoord4:pc.SEMANTIC_TEXCOORD4, texCoord5:pc.SEMANTIC_TEXCOORD5, texCoord6:pc.SEMANTIC_TEXCOORD6, texCoord7:pc.SEMANTIC_TEXCOORD7};
    var i, j;
    for (i = 0; i < modelData.vertices.length; i++) {
      var vertexData = modelData.vertices[i];
      if (!vertexData.tangent && vertexData.position && vertexData.normal && vertexData.texCoord0) {
        var indices = [];
        for (j = 0; j < modelData.meshes.length; j++) {
          if (modelData.meshes[j].vertices === i) {
            indices = indices.concat(modelData.meshes[j].indices);
          }
        }
        var tangents = pc.calculateTangents(vertexData.position.data, vertexData.normal.data, vertexData.texCoord0.data, indices);
        vertexData.tangent = {type:"float32", components:4, data:tangents};
      }
      var formatDesc = [];
      for (attributeName in vertexData) {
        attribute = vertexData[attributeName];
        var attribType = attribute.type;
        if (!this._device.supportsUnsignedByte) {
          if (attribType === "uint8") {
            attribType = "float32";
          }
          if (attribType === "int8") {
            attribType = "float32";
          }
        }
        formatDesc.push({semantic:attributeMap[attributeName], components:attribute.components, type:JSON_VERTEX_ELEMENT_TYPE[attribType], normalize:attributeMap[attributeName] === pc.SEMANTIC_COLOR});
      }
      var vertexFormat = new pc.VertexFormat(this._device, formatDesc);
      var numVertices = vertexData.position.data.length / vertexData.position.components;
      var vertexBuffer = new pc.VertexBuffer(this._device, vertexFormat, numVertices);
      var iterator = new pc.VertexIterator(vertexBuffer);
      for (j = 0; j < numVertices; j++) {
        for (attributeName in vertexData) {
          attribute = vertexData[attributeName];
          switch(attribute.components) {
            case 1:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j]);
              break;
            case 2:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 2], attribute.data[j * 2 + 1]);
              break;
            case 3:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 3], attribute.data[j * 3 + 1], attribute.data[j * 3 + 2]);
              break;
            case 4:
              iterator.element[attributeMap[attributeName]].set(attribute.data[j * 4], attribute.data[j * 4 + 1], attribute.data[j * 4 + 2], attribute.data[j * 4 + 3]);
              break;
          }
        }
        iterator.next();
      }
      iterator.end();
      vertexBuffers.push(vertexBuffer);
    }
    return vertexBuffers;
  }, _parseIndexBuffers:function(data, vertexBuffers) {
    var modelData = data.model;
    var indexBuffer = null;
    var indexData = null;
    var i;
    var numIndices = 0;
    for (i = 0; i < modelData.meshes.length; i++) {
      var meshData = modelData.meshes[i];
      if (meshData.indices !== undefined) {
        numIndices += meshData.indices.length;
      }
    }
    var maxVerts = 0;
    for (i = 0; i < vertexBuffers.length; i++) {
      maxVerts = Math.max(maxVerts, vertexBuffers[i].numVertices);
    }
    if (numIndices > 0) {
      if (maxVerts > 65535 && this._device.extUintElement) {
        indexBuffer = new pc.IndexBuffer(this._device, pc.INDEXFORMAT_UINT32, numIndices);
        indexData = new Uint32Array(indexBuffer.lock());
      } else {
        indexBuffer = new pc.IndexBuffer(this._device, pc.INDEXFORMAT_UINT16, numIndices);
        indexData = new Uint16Array(indexBuffer.lock());
      }
    }
    return {buffer:indexBuffer, data:indexData};
  }, _parseMeshes:function(data, skins, morphs, vertexBuffers, indexBuffer, indexData) {
    var modelData = data.model;
    var meshes = [];
    var indexBase = 0;
    var i;
    for (i = 0; i < modelData.meshes.length; i++) {
      var meshData = modelData.meshes[i];
      var meshAabb = meshData.aabb;
      var min = meshAabb.min;
      var max = meshAabb.max;
      var aabb = new pc.BoundingBox(new pc.Vec3((max[0] + min[0]) * 0.5, (max[1] + min[1]) * 0.5, (max[2] + min[2]) * 0.5), new pc.Vec3((max[0] - min[0]) * 0.5, (max[1] - min[1]) * 0.5, (max[2] - min[2]) * 0.5));
      var indexed = meshData.indices !== undefined;
      var mesh = new pc.Mesh;
      mesh.vertexBuffer = vertexBuffers[meshData.vertices];
      mesh.indexBuffer[0] = indexed ? indexBuffer : null;
      mesh.primitive[0].type = JSON_PRIMITIVE_TYPE[meshData.type];
      mesh.primitive[0].base = indexed ? meshData.base + indexBase : meshData.base;
      mesh.primitive[0].count = meshData.count;
      mesh.primitive[0].indexed = indexed;
      mesh.skin = meshData.skin !== undefined ? skins[meshData.skin] : null;
      mesh.morph = meshData.morph !== undefined ? morphs[meshData.morph] : null;
      mesh.aabb = aabb;
      if (indexed) {
        indexData.set(meshData.indices, indexBase);
        indexBase += meshData.indices.length;
      }
      meshes.push(mesh);
    }
    if (indexBuffer !== null) {
      indexBuffer.unlock();
    }
    return meshes;
  }, _parseMeshInstances:function(data, nodes, meshes, skins, skinInstances, morphs, morphInstances) {
    var modelData = data.model;
    var meshInstances = [];
    var i;
    for (i = 0; i < modelData.meshInstances.length; i++) {
      var meshInstanceData = modelData.meshInstances[i];
      var node = nodes[meshInstanceData.node];
      var mesh = meshes[meshInstanceData.mesh];
      var meshInstance = new pc.MeshInstance(node, mesh, pc.ModelHandler.DEFAULT_MATERIAL);
      if (mesh.skin) {
        var skinIndex = skins.indexOf(mesh.skin);
        meshInstance.skinInstance = skinInstances[skinIndex];
      }
      if (mesh.morph) {
        var morphIndex = morphs.indexOf(mesh.morph);
        meshInstance.morphInstance = morphInstances[morphIndex];
      }
      meshInstances.push(meshInstance);
    }
    return meshInstances;
  }};
  return {JsonModelParser:JsonModelParser};
}());
pc.extend(pc, function() {
  var SceneParser = function(app) {
    this._app = app;
  };
  SceneParser.prototype = {parse:function(data) {
    var entities = {};
    var id, i;
    var parent = null;
    for (id in data.entities) {
      entities[id] = this._createEntity(data.entities[id]);
      if (data.entities[id].parent === null) {
        parent = entities[id];
      }
    }
    for (id in data.entities) {
      var l = data.entities[id].children.length;
      for (i = 0; i < l; i++) {
        var resource_id = data.entities[id].children[i];
        if (entities[resource_id]) {
          entities[id].addChild(entities[resource_id]);
        }
      }
    }
    this._openComponentData(parent, data.entities);
    return parent;
  }, _createEntity:function(data) {
    var entity = new pc.Entity;
    var p = data.position;
    var r = data.rotation;
    var s = data.scale;
    entity.name = data.name;
    entity._guid = data.resource_id;
    entity.setLocalPosition(p[0], p[1], p[2]);
    entity.setLocalEulerAngles(r[0], r[1], r[2]);
    entity.setLocalScale(s[0], s[1], s[2]);
    entity._enabled = data.enabled !== undefined ? data.enabled : true;
    entity._enabledInHierarchy = entity._enabled;
    entity.template = data.template;
    if (data.tags) {
      for (var i = 0; i < data.tags.length; i++) {
        entity.tags.add(data.tags[i]);
      }
    }
    if (data.labels) {
      data.labels.forEach(function(label) {
        entity.addLabel(label);
      });
    }
    return entity;
  }, _openComponentData:function(entity, entities) {
    var systems = this._app.systems.list();
    var i, len = systems.length;
    var edata = entities[entity._guid];
    for (i = 0; i < len; i++) {
      var componentData = edata.components[systems[i].id];
      if (componentData) {
        this._app.systems[systems[i].id].addComponent(entity, componentData);
      }
    }
    var length = edata.children.length;
    var children = entity._children;
    for (i = 0; i < length; i++) {
      children[i] = this._openComponentData(children[i], entities);
    }
    return entity;
  }};
  return {SceneParser:SceneParser};
}());
pc.extend(pc, function() {
  var assetIdCounter = 0;
  var ABSOLUTE_URL = new RegExp("^" + "\\s*" + "(?:" + "[a-z]+[a-z0-9\\-\\+\\.]*" + ":" + ")?" + "//", "i");
  var Asset = function(name, type, file, data) {
    this._id = ++assetIdCounter;
    this.name = name || "";
    this.type = type;
    this.tags = new pc.Tags(this);
    this._preload = false;
    this.variants = new pc.AssetVariants(this);
    this._file = null;
    this._data = data || {};
    this._resources = [];
    this.loaded = false;
    this.loading = false;
    this.registry = null;
    pc.events.attach(this);
    if (file) {
      this.file = file;
    }
  };
  Asset.prototype = {getFileUrl:function() {
    var file = this.getPreferredFile();
    if (!file || !file.url) {
      return null;
    }
    var url = file.url;
    if (this.registry && this.registry.prefix && !ABSOLUTE_URL.test(url)) {
      url = this.registry.prefix + url;
    }
    if (this.type !== "script" && file.hash) {
      var separator = url.indexOf("?") !== -1 ? "&" : "?";
      url += separator + "t=" + file.hash;
    }
    return url;
  }, getPreferredFile:function() {
    if (!this.file) {
      return null;
    }
    if (this.type === "texture" || this.type === "textureatlas") {
      var device = this.registry._loader.getHandler("texture")._device;
      if (this.variants.pvr && device.extCompressedTexturePVRTC) {
        return this.variants.pvr;
      } else {
        if (this.variants.dxt && device.extCompressedTextureS3TC) {
          return this.variants.dxt;
        } else {
          if (this.variants.etc1 && device.extCompressedTextureETC1) {
            return this.variants.etc1;
          }
        }
      }
    }
    return this.file;
  }, ready:function(callback, scope) {
    scope = scope || this;
    if (this.resource) {
      callback.call(scope, this);
    } else {
      this.once("load", function(asset) {
        callback.call(scope, asset);
      });
    }
  }, reload:function() {
    if (!this.loaded) {
      return;
    }
    if (this.type === "cubemap") {
      this.registry._loader.patch(this, this.registry);
    } else {
      this.loaded = false;
      this.registry.load(this);
    }
  }, unload:function() {
    if (!this.loaded && !this.resource) {
      return;
    }
    this.fire("unload", this);
    this.registry.fire("unload:" + this.id, this);
    if (this.resource && this.resource.destroy) {
      this.resource.destroy();
    }
    this.resource = null;
    this.loaded = false;
    if (this.file) {
      this.registry._loader.clearCache(this.getFileUrl(), this.type);
    }
  }};
  Object.defineProperty(Asset.prototype, "id", {get:function() {
    return this._id;
  }, set:function(value) {
    this._id = value;
    if (value > assetIdCounter) {
      assetIdCounter = value;
    }
  }});
  Object.defineProperty(Asset.prototype, "file", {get:function() {
    return this._file;
  }, set:function(value) {
    var key;
    var valueAsBool = !!value;
    var fileAsBool = !!this._file;
    if (valueAsBool !== fileAsBool || value && this._file && value.hash !== this._file) {
      if (value) {
        if (!this._file) {
          this._file = {};
        }
        this._file.url = value.url;
        this._file.filename = value.filename;
        this._file.hash = value.hash;
        this._file.size = value.size;
        this._file.variants = this.variants;
        if (value.hasOwnProperty("variants")) {
          this.variants.clear();
          if (value.variants) {
            for (key in value.variants) {
              if (!value.variants[key]) {
                continue;
              }
              this.variants[key] = value.variants[key];
            }
          }
        }
        this.fire("change", this, "file", this._file, this._file);
        this.reload();
      } else {
        this._file = null;
        this.variants.clear();
      }
    } else {
      if (value && this._file && value.hasOwnProperty("variants")) {
        this.variants.clear();
        if (value.variants) {
          for (key in value.variants) {
            if (!value.variants[key]) {
              continue;
            }
            this.variants[key] = value.variants[key];
          }
        }
      }
    }
  }});
  Object.defineProperty(Asset.prototype, "data", {get:function() {
    return this._data;
  }, set:function(value) {
    var old = this._data;
    this._data = value;
    if (value !== old) {
      this.fire("change", this, "data", value, old);
      if (this.loaded) {
        this.registry._loader.patch(this, this.registry);
      }
    }
  }});
  Object.defineProperty(Asset.prototype, "resource", {get:function() {
    return this._resources[0];
  }, set:function(value) {
    var _old = this._resources[0];
    this._resources[0] = value;
    this.fire("change", this, "resource", value, _old);
  }});
  Object.defineProperty(Asset.prototype, "resources", {get:function() {
    return this._resources;
  }, set:function(value) {
    var _old = this._resources;
    this._resources = value;
    this.fire("change", this, "resources", value, _old);
  }});
  Object.defineProperty(Asset.prototype, "preload", {get:function() {
    return this._preload;
  }, set:function(value) {
    value = !!value;
    if (this._preload === value) {
      return;
    }
    this._preload = value;
    if (this._preload && !this.loaded && !this.loading && this.registry) {
      this.registry.load(this);
    }
  }});
  return {Asset:Asset, ASSET_ANIMATION:"animation", ASSET_AUDIO:"audio", ASSET_IMAGE:"image", ASSET_JSON:"json", ASSET_MODEL:"model", ASSET_MATERIAL:"material", ASSET_TEXT:"text", ASSET_TEXTURE:"texture", ASSET_CUBEMAP:"cubemap", ASSET_SHADER:"shader", ASSET_CSS:"css", ASSET_HTML:"html", ASSET_SCRIPT:"script", ABSOLUTE_URL:ABSOLUTE_URL};
}());
pc.extend(pc, function() {
  var properties = [];
  var AssetVariants = function(asset) {
    this.asset = asset;
  };
  var defineVariantProperty = function(name) {
    var field = "_" + name;
    properties.push(field);
    Object.defineProperty(AssetVariants.prototype, name, {get:function() {
      return this[field] || null;
    }, set:function(value) {
      var fieldAsBool = !!this[field];
      var valueAsBool = !!value;
      if (fieldAsBool !== valueAsBool || this[field] && value && this[field].hash !== value.hash) {
        if (value) {
          this[field] = {url:value.url, filename:value.filename, size:value.size, hash:value.hash, opt:value.opt || 0};
        } else {
          this[field] = null;
        }
        if (this.asset.file) {
          this.asset.fire("change", this.asset, "file", this.asset._file, this.asset._file);
          this.asset.reload();
        }
      }
    }});
  };
  defineVariantProperty("dxt");
  defineVariantProperty("pvr");
  defineVariantProperty("etc1");
  AssetVariants.prototype.clear = function() {
    for (var i = 0; i < properties.length; i++) {
      this[properties[i]] = null;
    }
  };
  return {AssetVariants:AssetVariants};
}());
pc.extend(pc, function() {
  var AssetRegistry = function(loader) {
    this._loader = loader;
    this._assets = [];
    this._cache = {};
    this._names = {};
    this._tags = new pc.TagsCache("_id");
    this._urls = {};
    this.prefix = null;
    pc.extend(this, pc.events);
  };
  AssetRegistry.prototype = {list:function(filters) {
    filters = filters || {};
    return this._assets.filter(function(asset) {
      var include = true;
      if (filters.preload !== undefined) {
        include = asset.preload === filters.preload;
      }
      return include;
    });
  }, add:function(asset) {
    var index = this._assets.push(asset) - 1;
    var url;
    this._cache[asset.id] = index;
    if (!this._names[asset.name]) {
      this._names[asset.name] = [];
    }
    this._names[asset.name].push(index);
    if (asset.file) {
      url = asset.file.url;
      this._urls[url] = index;
    }
    asset.registry = this;
    this._tags.addItem(asset);
    asset.tags.on("add", this._onTagAdd, this);
    asset.tags.on("remove", this._onTagRemove, this);
    this.fire("add", asset);
    this.fire("add:" + asset.id, asset);
    if (url) {
      this.fire("add:url:" + url, asset);
    }
    if (asset.preload) {
      this.load(asset);
    }
  }, remove:function(asset) {
    delete this._cache[asset.id];
    delete this._names[asset.name];
    var url = asset.file ? asset.file.url : null;
    if (url) {
      delete this._urls[url];
    }
    this._tags.removeItem(asset);
    asset.tags.off("add", this._onTagAdd, this);
    asset.tags.off("remove", this._onTagRemove, this);
    asset.fire("remove", asset);
    this.fire("remove", asset);
    this.fire("remove:" + asset.id, asset);
    if (url) {
      this.fire("remove:url:" + url, asset);
    }
  }, get:function(id) {
    var idx = this._cache[id];
    return this._assets[idx];
  }, getByUrl:function(url) {
    var idx = this._urls[url];
    return this._assets[idx];
  }, load:function(asset) {
    if (asset.loading) {
      return;
    }
    var self = this;
    if (asset.loaded) {
      if (asset.type === "cubemap") {
        self._loader.patch(asset, this);
      }
      return;
    }
    var load = !!asset.file;
    var file = asset.getPreferredFile();
    var _load = function() {
      var url = asset.getFileUrl();
      asset.loading = true;
      self._loader.load(url, asset.type, function(err, resource, extra) {
        asset.loaded = true;
        asset.loading = false;
        if (err) {
          self.fire("error", err, asset);
          self.fire("error:" + asset.id, err, asset);
          asset.fire("error", err, asset);
          return;
        }
        if (resource instanceof Array) {
          asset.resources = resource;
        } else {
          asset.resource = resource;
        }
        if (!pc.script.legacy && asset.type === "script") {
          var loader = self._loader.getHandler("script");
          if (loader._cache[asset.id] && loader._cache[asset.id].parentNode === document.head) {
            document.head.removeChild(loader._cache[asset.id]);
          }
          loader._cache[asset.id] = extra;
        }
        self._loader.patch(asset, self);
        self.fire("load", asset);
        self.fire("load:" + asset.id, asset);
        if (file && file.url) {
          self.fire("load:url:" + file.url, asset);
        }
        asset.fire("load", asset);
      }, asset);
    };
    var _open = function() {
      var resource = self._loader.open(asset.type, asset.data);
      if (resource instanceof Array) {
        asset.resources = resource;
      } else {
        asset.resource = resource;
      }
      asset.loaded = true;
      self._loader.patch(asset, self);
      self.fire("load", asset);
      self.fire("load:" + asset.id, asset);
      if (file && file.url) {
        self.fire("load:url:" + file.url, asset);
      }
      asset.fire("load", asset);
    };
    if (file && asset.type === "cubemap") {
      load = false;
      var url = asset.getFileUrl();
      this._loader.load(url, "texture", function(err, texture) {
        if (!err) {
          self._loader.patch({resource:texture, type:"texture", data:asset.data}, self);
          asset._dds = texture;
          _open();
        } else {
          self.fire("error", err, asset);
          self.fire("error:" + asset.id, err, asset);
          asset.fire("error", err, asset);
        }
      });
    }
    if (!file) {
      _open();
    } else {
      if (load) {
        this.fire("load:start", asset);
        this.fire("load:" + asset.id + ":start", asset);
        _load();
      }
    }
  }, loadFromUrl:function(url, type, callback) {
    var self = this;
    var name = pc.path.getBasename(url);
    var file = {url:url};
    var data = {};
    var asset = self.getByUrl(url);
    if (!asset) {
      asset = new pc.Asset(name, type, file, data);
      self.add(asset);
    }
    if (type === "model") {
      self._loadModel(asset, callback);
      return;
    }
    asset.once("load", function(asset) {
      callback(null, asset);
    });
    asset.once("error", function(err) {
      callback(err);
    });
    self.load(asset);
  }, _loadModel:function(asset, callback) {
    var self = this;
    var url = asset.getFileUrl();
    var dir = pc.path.getDirectory(url);
    var basename = pc.path.getBasename(url);
    var ext = pc.path.getExtension(url);
    var _loadAsset = function(asset) {
      asset.once("load", function(asset) {
        callback(null, asset);
      });
      asset.once("error", function(err) {
        callback(err);
      });
      self.load(asset);
    };
    if (ext === ".json") {
      var mappingUrl = pc.path.join(dir, basename.replace(".json", ".mapping.json"));
      this._loader.load(mappingUrl, "json", function(err, data) {
        if (err) {
          asset.data = {mapping:[]};
          _loadAsset(asset);
          return;
        }
        self._loadMaterials(dir, data, function(err, materials) {
          asset.data = data;
          _loadAsset(asset);
        });
      });
    } else {
      _loadAsset(asset);
    }
  }, _loadMaterials:function(dir, mapping, callback) {
    var self = this;
    var i;
    var count = mapping.mapping.length;
    var materials = [];
    var done = function(err, materials) {
      self._loadTextures(materials, function(err, textures) {
        callback(null, materials);
      });
    };
    if (count === 0) {
      callback(null, materials);
    }
    var onLoadAsset = function(err, asset) {
      materials.push(asset);
      count--;
      if (count === 0) {
        done(null, materials);
      }
    };
    for (i = 0; i < mapping.mapping.length; i++) {
      var path = mapping.mapping[i].path;
      if (path) {
        self.loadFromUrl(pc.path.join(dir, path), "material", onLoadAsset);
      } else {
        count--;
      }
    }
  }, _loadTextures:function(materials, callback) {
    var self = this;
    var i, j;
    var used = {};
    var urls = [];
    var textures = [];
    var count = 0;
    for (i = 0; i < materials.length; i++) {
      if (materials[i].data.parameters) {
        var params = materials[i].data.parameters;
        for (j = 0; j < params.length; j++) {
          if (params[j].type === "texture") {
            var url = materials[i].getFileUrl();
            var dir = pc.path.getDirectory(url);
            url = pc.path.join(dir, params[j].data);
            if (!used[url]) {
              used[url] = true;
              urls.push(url);
              count++;
            }
          }
        }
      } else {
        console.warn("Update material asset loader to support new material format");
      }
    }
    if (!count) {
      callback(null, textures);
      return;
    }
    var onLoadAsset = function(err, texture) {
      textures.push(texture);
      count--;
      if (err) {
        console.error(err);
      }
      if (count === 0) {
        callback(null, textures);
      }
    };
    for (i = 0; i < urls.length; i++) {
      self.loadFromUrl(urls[i], "texture", onLoadAsset);
    }
  }, findAll:function(name, type) {
    var self = this;
    var idxs = this._names[name];
    var assets;
    if (idxs) {
      assets = idxs.map(function(idx) {
        return self._assets[idx];
      });
      if (type) {
        return assets.filter(function(asset) {
          return asset.type === type;
        });
      } else {
        return assets;
      }
    } else {
      return [];
    }
  }, _onTagAdd:function(tag, asset) {
    this._tags.add(tag, asset);
  }, _onTagRemove:function(tag, asset) {
    this._tags.remove(tag, asset);
  }, findByTag:function() {
    return this._tags.find(arguments);
  }, filter:function(callback) {
    var items = [];
    for (var i = 0, len = this._assets.length; i < len; i++) {
      if (callback(this._assets[i])) {
        items.push(this._assets[i]);
      }
    }
    return items;
  }, find:function(name, type) {
    var asset = this.findAll(name, type);
    return asset ? asset[0] : null;
  }, getAssetById:function(id) {
    console.warn("DEPRECATED: getAssetById() use get() instead");
    return this.get(id);
  }};
  return {AssetRegistry:AssetRegistry};
}());
pc.anim = {Animation:pc.Animation, Key:pc.Key, Node:pc.Node, Skeleton:pc.Skeleton};
pc.asset = {ASSET_ANIMATION:"animation", ASSET_AUDIO:"audio", ASSET_IMAGE:"image", ASSET_JSON:"json", ASSET_MODEL:"model", ASSET_MATERIAL:"material", ASSET_TEXT:"text", ASSET_TEXTURE:"texture", ASSET_CUBEMAP:"cubemap", ASSET_SCRIPT:"script"};
pc.audio = {AudioManager:pc.SoundManager, Channel:pc.Channel, Channel3d:pc.Channel3d, Listener:pc.Listener, Sound:pc.Sound};
pc.fw = {Application:pc.Application, Component:pc.Component, ComponentData:pc.ComponentData, ComponentSystem:pc.ComponentSystem, Entity:pc.Entity, FillMode:{NONE:pc.FILLMODE_NONE, FILL_WINDOW:pc.FILLMODE_FILL_WINDOW, KEEP_ASPECT:pc.FILLMODE_KEEP_ASPECT}, ResolutionMode:{AUTO:pc.RESOLUTION_AUTO, FIXED:pc.RESOLUTION_FIXED}};
pc.extend(pc.gfx, {drawQuadWithShader:pc.drawQuadWithShader, precalculatedTangents:pc.precalculatedTangents, programlib:pc.programlib, shaderChunks:pc.shaderChunks, ContextCreationError:pc.ContextCreationError, Device:pc.GraphicsDevice, IndexBuffer:pc.IndexBuffer, ProgramLibrary:pc.ProgramLibrary, RenderTarget:pc.RenderTarget, ScopeId:pc.ScopeId, Shader:pc.Shader, ShaderInput:pc.ShaderInput, Texture:pc.Texture, UnsupportedBrowserError:pc.UnsupportedBrowserError, VertexBuffer:pc.VertexBuffer, VertexFormat:pc.VertexFormat, 
VertexIterator:pc.VertexIterator});
pc.extend(pc.input, {getTouchTargetCoords:pc.getTouchTargetCoords, Controller:pc.Controller, GamePads:pc.GamePads, Keyboard:pc.Keyboard, KeyboardEvent:pc.KeyboardEvent, Mouse:pc.Mouse, MouseEvent:pc.MouseEvent, Touch:pc.Touch, TouchDevice:pc.TouchDevice, TouchEvent:pc.TouchEvent});
pc.posteffect = {createFullscreenQuad:pc.createFullscreenQuad, drawFullscreenQuad:pc.drawFullscreenQuad, PostEffect:pc.PostEffect, PostEffectQueue:pc.PostEffectQueue};
pc.extend(pc.scene, {partitionSkin:pc.partitionSkin, procedural:{calculateTangents:pc.calculateTangents, createMesh:pc.createMesh, createTorus:pc.createTorus, createCylinder:pc.createCylinder, createCapsule:pc.createCapsule, createCone:pc.createCone, createSphere:pc.createSphere, createPlane:pc.createPlane, createBox:pc.createBox}, BasicMaterial:pc.BasicMaterial, DepthMaterial:pc.DepthMaterial, ForwardRenderer:pc.ForwardRenderer, GraphNode:pc.GraphNode, Material:pc.Material, Command:pc.Command, Mesh:pc.Mesh, 
MeshInstance:pc.MeshInstance, Model:pc.Model, ParticleEmitter:pc.ParticleEmitter, PhongMaterial:pc.StandardMaterial, Picker:pc.Picker, PickMaterial:pc.PickMaterial, Projection:{ORTHOGRAPHIC:pc.PROJECTION_ORTHOGRAPHIC, PERSPECTIVE:pc.PROJECTION_PERSPECTIVE}, Scene:pc.Scene, Skin:pc.Skin, SkinInstance:pc.SkinInstance});
pc.shape = {Aabb:pc.BoundingBox, Sphere:pc.BoundingSphere, Plane:pc.Plane};
pc.time = {now:pc.now, Timer:pc.Timer};
pc.PhongMaterial = pc.StandardMaterial;
pc.BoundingSphere.prototype.intersectRay = pc.BoundingSphere.prototype.intersectsRay;
pc.ELEMENTTYPE_INT8 = pc.TYPE_INT8;
pc.ELEMENTTYPE_UINT8 = pc.TYPE_UINT8;
pc.ELEMENTTYPE_INT16 = pc.TYPE_INT16;
pc.ELEMENTTYPE_UINT16 = pc.TYPE_UINT16;
pc.ELEMENTTYPE_INT32 = pc.TYPE_INT32;
pc.ELEMENTTYPE_UINT32 = pc.TYPE_UINT32;
pc.ELEMENTTYPE_FLOAT32 = pc.TYPE_FLOAT32;
Object.defineProperty(pc.shaderChunks, "transformSkinnedVS", {get:function() {
  return "#define SKIN\n" + pc.shaderChunks.transformVS;
}});
pc.extend(pc.Application.prototype, function() {
  var tempGraphNode = new pc.GraphNode;
  var identityGraphNode = new pc.GraphNode;
  var meshInstanceArray = [];
  var _deprecationWarning = false;
  var ImmediateData = function(device) {
    this.lineVertexFormat = new pc.VertexFormat(device, [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}, {semantic:pc.SEMANTIC_COLOR, components:4, type:pc.TYPE_UINT8, normalize:true}]);
    this.lineBatches = [];
    this.layers = [];
    this.layerToBatch = {};
    this.quadMesh = null;
    this.cubeLocalPos = null;
    this.cubeWorldPos = null;
    this.identityGraphNode = new pc.GraphNode;
  };
  ImmediateData.prototype.addLayer = function(layer) {
    var id = layer.id;
    if (this.layers.indexOf(layer) < 0) {
      this.layers.push(layer);
    }
  };
  ImmediateData.prototype.getLayerIdx = function(layer) {
    return this.layerToBatch[layer.id];
  };
  ImmediateData.prototype.addLayerIdx = function(idx, layer) {
    this.layerToBatch[layer.id] = idx;
  };
  var LineBatch = function() {
    this.numLinesAllocated = 128;
    this.vb = null;
    this.vbRam = null;
    this.mesh = null;
    this.linesUsed = 0;
    this.material = null;
    this.meshInstance = null;
    this.layer = null;
  };
  LineBatch.prototype = {init:function(device, vertexFormat, layer, linesToAdd) {
    if (!this.mesh) {
      this.mesh = new pc.Mesh;
      this.mesh.primitive[0].type = pc.PRIMITIVE_LINES;
      this.mesh.primitive[0].base = 0;
      this.mesh.primitive[0].indexed = false;
      this.material = new pc.BasicMaterial;
      this.material.vertexColors = true;
      this.material.blend = true;
      this.material.blendType = pc.BLEND_NORMAL;
      this.material.update();
    }
    this.layer = layer;
    while (this.linesUsed + linesToAdd > this.numLinesAllocated) {
      this.vb = null;
      this.numLinesAllocated *= 2;
    }
    this.vertexFormat = vertexFormat;
    if (!this.vb) {
      this.vb = new pc.VertexBuffer(device, vertexFormat, this.numLinesAllocated * 2, pc.BUFFER_DYNAMIC);
      this.mesh.vertexBuffer = this.vb;
      this.vbRam = new DataView(this.vb.lock());
      if (!this.meshInstance) {
        identityGraphNode.worldTransform = pc.Mat4.IDENTITY;
        identityGraphNode._dirtyWorld = identityGraphNode._dirtyNormal = false;
        this.meshInstance = new pc.MeshInstance(identityGraphNode, this.mesh, this.material);
        this.meshInstance.cull = false;
      }
    }
  }, addLines:function(position, color) {
    var multiColor = !!color.length;
    var offset = this.linesUsed * 2 * this.vertexFormat.size;
    var clr;
    for (var i = 0; i < position.length; i++) {
      this.vbRam.setFloat32(offset, position[i].x, true);
      offset += 4;
      this.vbRam.setFloat32(offset, position[i].y, true);
      offset += 4;
      this.vbRam.setFloat32(offset, position[i].z, true);
      offset += 4;
      clr = multiColor ? color[i] : color;
      this.vbRam.setUint8(offset, clr.r * 255);
      offset += 1;
      this.vbRam.setUint8(offset, clr.g * 255);
      offset += 1;
      this.vbRam.setUint8(offset, clr.b * 255);
      offset += 1;
      this.vbRam.setUint8(offset, clr.a * 255);
      offset += 1;
    }
    this.linesUsed += position.length / 2;
  }, finalize:function() {
    if (this.linesUsed > 0) {
      this.vb.setData(this.vbRam.buffer);
      this.mesh.primitive[0].count = this.linesUsed * 2;
      meshInstanceArray[0] = this.meshInstance;
      this.layer.addMeshInstances(meshInstanceArray, true);
      this.linesUsed = 0;
    }
  }};
  function _initImmediate() {
    if (!this._immediateData) {
      this._immediateData = new ImmediateData(this.graphicsDevice);
      this.on("prerender", this._preRenderImmediate, this);
      this.on("postrender", this._postRenderImmediate, this);
    }
  }
  function _addLines(position, color, options) {
    if (options.layer === undefined) {
      options.layer = this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE);
    }
    if (options.depthTest === undefined) {
      options.depthTest = true;
    }
    this._initImmediate();
    var layer = options.layer;
    this._immediateData.addLayer(layer);
    var idx = this._immediateData.getLayerIdx(layer);
    if (idx === undefined) {
      var batch = new LineBatch;
      batch.init(this.graphicsDevice, this._immediateData.lineVertexFormat, layer, position.length / 2);
      batch.material.depthTest = options.depthTest;
      if (options.mask) {
        batch.meshInstance.mask = options.mask;
      }
      idx = this._immediateData.lineBatches.push(batch) - 1;
      this._immediateData.addLayerIdx(idx, layer);
    } else {
      this._immediateData.lineBatches[idx].init(this.graphicsDevice, this._immediateData.lineVertexFormat, layer, position.length / 2);
      this._immediateData.lineBatches[idx].material.depthTest = options.depthTest;
      if (options.mask) {
        this._immediateData.lineBatches[idx].meshInstance.mask = options.mask;
      }
    }
    this._immediateData.lineBatches[idx].addLines(position, color);
  }
  function renderLine(start, end, color, arg3, arg4) {
    var endColor = color;
    var options;
    if (arg3 instanceof pc.Color) {
      endColor = arg3;
      if (typeof arg4 === "number") {
        if (!_deprecationWarning) {
          console.warn("lineBatch argument is deprecated for renderLine. Use options.layer instead");
          _deprecationWarning = true;
        }
        if (arg4 === pc.LINEBATCH_OVERLAY) {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};
        } else {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};
        }
      } else {
        options = arg4;
      }
    } else {
      if (typeof arg3 === "number") {
        if (!_deprecationWarning) {
          console.warn("lineBatch argument is deprecated for renderLine. Use options.layer instead");
          _deprecationWarning = true;
        }
        endColor = color;
        if (arg3 === pc.LINEBATCH_OVERLAY) {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};
        } else {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};
        }
      } else {
        if (arg3) {
          options = arg3;
        } else {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};
        }
      }
    }
    this._addLines([start, end], [color, endColor], options);
  }
  function renderLines(position, color, options) {
    if (!options) {
      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};
    } else {
      if (typeof options === "number") {
        if (!_deprecationWarning) {
          console.warn("lineBatch argument is deprecated for renderLine. Use options.layer instead");
          _deprecationWarning = true;
        }
        if (options === pc.LINEBATCH_OVERLAY) {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:false};
        } else {
          options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE), depthTest:true};
        }
      }
    }
    var multiColor = !!color.length;
    if (multiColor) {
      if (position.length !== color.length) {
        pc.log.error("renderLines: position/color arrays have different lengths");
        return;
      }
    }
    if (position.length % 2 !== 0) {
      pc.log.error("renderLines: array length is not divisible by 2");
      return;
    }
    this._addLines(position, color, options);
  }
  function renderWireCube(matrix, color, options) {
    var i;
    this._initImmediate();
    if (!this._immediateData.cubeLocalPos) {
      var x = 0.5;
      this._immediateData.cubeLocalPos = [new pc.Vec3(-x, -x, -x), new pc.Vec3(-x, x, -x), new pc.Vec3(x, x, -x), new pc.Vec3(x, -x, -x), new pc.Vec3(-x, -x, x), new pc.Vec3(-x, x, x), new pc.Vec3(x, x, x), new pc.Vec3(x, -x, x)];
      this._immediateData.cubeWorldPos = [new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3, new pc.Vec3];
    }
    var cubeLocalPos = this._immediateData.cubeLocalPos;
    var cubeWorldPos = this._immediateData.cubeWorldPos;
    for (i = 0; i < 8; i++) {
      matrix.transformPoint(cubeLocalPos[i], cubeWorldPos[i]);
    }
    this.renderLines([cubeWorldPos[0], cubeWorldPos[1], cubeWorldPos[1], cubeWorldPos[2], cubeWorldPos[2], cubeWorldPos[3], cubeWorldPos[3], cubeWorldPos[0], cubeWorldPos[4], cubeWorldPos[5], cubeWorldPos[5], cubeWorldPos[6], cubeWorldPos[6], cubeWorldPos[7], cubeWorldPos[7], cubeWorldPos[4], cubeWorldPos[0], cubeWorldPos[4], cubeWorldPos[1], cubeWorldPos[5], cubeWorldPos[2], cubeWorldPos[6], cubeWorldPos[3], cubeWorldPos[7]], color, options);
  }
  function _preRenderImmediate() {
    for (var i = 0; i < this._immediateData.lineBatches.length; i++) {
      if (this._immediateData.lineBatches[i]) {
        this._immediateData.lineBatches[i].finalize();
      }
    }
  }
  function _postRenderImmediate() {
    for (var i = 0; i < this._immediateData.layers.length; i++) {
      this._immediateData.layers[i].clearMeshInstances(true);
    }
    this._immediateData.layers.length = 0;
  }
  function renderMeshInstance(meshInstance, options) {
    if (!options) {
      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};
    }
    this._initImmediate();
    this._immediateData.addLayer(options.layer);
    meshInstanceArray[0] = meshInstance;
    options.layer.addMeshInstances(meshInstanceArray, true);
  }
  function renderMesh(mesh, material, matrix, options) {
    if (!options) {
      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};
    }
    this._initImmediate();
    tempGraphNode.worldTransform = matrix;
    tempGraphNode._dirtyWorld = tempGraphNode._dirtyNormal = false;
    var instance = new pc.MeshInstance(tempGraphNode, mesh, material);
    instance.cull = false;
    if (options.mask) {
      instance.mask = options.mask;
    }
    this._immediateData.addLayer(options.layer);
    meshInstanceArray[0] = instance;
    options.layer.addMeshInstances(meshInstanceArray, true);
  }
  function renderQuad(matrix, material, options) {
    if (!options) {
      options = {layer:this.scene.layers.getLayerById(pc.LAYERID_IMMEDIATE)};
    }
    this._initImmediate();
    if (!this._immediateData.quadMesh) {
      var format = new pc.VertexFormat(this.graphicsDevice, [{semantic:pc.SEMANTIC_POSITION, components:3, type:pc.TYPE_FLOAT32}]);
      var quadVb = new pc.VertexBuffer(this.graphicsDevice, format, 4);
      var iterator = new pc.VertexIterator(quadVb);
      iterator.element[pc.SEMANTIC_POSITION].set(-0.5, -0.5, 0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(0.5, -0.5, 0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(-0.5, 0.5, 0);
      iterator.next();
      iterator.element[pc.SEMANTIC_POSITION].set(0.5, 0.5, 0);
      iterator.end();
      this._immediateData.quadMesh = new pc.Mesh;
      this._immediateData.quadMesh.vertexBuffer = quadVb;
      this._immediateData.quadMesh.primitive[0].type = pc.PRIMITIVE_TRISTRIP;
      this._immediateData.quadMesh.primitive[0].base = 0;
      this._immediateData.quadMesh.primitive[0].count = 4;
      this._immediateData.quadMesh.primitive[0].indexed = false;
    }
    tempGraphNode.worldTransform = matrix;
    tempGraphNode._dirtyWorld = tempGraphNode._dirtyNormal = false;
    var quad = new pc.MeshInstance(tempGraphNode, this._immediateData.quadMesh, material);
    quad.cull = false;
    meshInstanceArray[0] = quad;
    this._immediateData.addLayer(options.layer);
    options.layer.addMeshInstances(meshInstanceArray, true);
  }
  return {renderMeshInstance:renderMeshInstance, renderMesh:renderMesh, renderLine:renderLine, renderLines:renderLines, renderQuad:renderQuad, renderWireCube:renderWireCube, _addLines:_addLines, _initImmediate:_initImmediate, _preRenderImmediate:_preRenderImmediate, _postRenderImmediate:_postRenderImmediate};
}());
pc.extend(pc, function() {
  var maxSize = 2048;
  var maskDynamic = 1;
  var maskBaked = 2;
  var maskLightmap = 4;
  var sceneLightmaps = [];
  var sceneLightmapsNode = [];
  var lmCamera;
  var tempVec = new pc.Vec3;
  var bounds = new pc.BoundingBox;
  var lightBounds = new pc.BoundingBox;
  var tempSphere = {};
  var PASS_COLOR = 0;
  var PASS_DIR = 1;
  var passTexName = ["texture_lightMap", "texture_dirLightMap"];
  var passMaterial = [];
  function collectModels(node, nodes, nodesMeshInstances, allNodes) {
    if (!node.enabled) {
      return;
    }
    var i;
    if (node.model && node.model.model && node.model.enabled) {
      if (allNodes) {
        allNodes.push(node);
      }
      if (node.model.data.lightmapped) {
        if (nodes) {
          var hasUv1 = true;
          var meshInstances = node.model.model.meshInstances;
          for (i = 0; i < meshInstances.length; i++) {
            if (!meshInstances[i].mesh.vertexBuffer.format.hasUv1) {
              hasUv1 = false;
              break;
            }
          }
          if (hasUv1) {
            var j;
            var isInstance;
            var notInstancedMeshInstances = [];
            for (i = 0; i < meshInstances.length; i++) {
              isInstance = false;
              for (j = 0; j < meshInstances.length; j++) {
                if (i !== j) {
                  if (meshInstances[i].mesh === meshInstances[j].mesh) {
                    isInstance = true;
                  }
                }
              }
              if (isInstance) {
                nodes.push(node);
                nodesMeshInstances.push([meshInstances[i]]);
              } else {
                notInstancedMeshInstances.push(meshInstances[i]);
              }
            }
            if (notInstancedMeshInstances.length > 0) {
              nodes.push(node);
              nodesMeshInstances.push(notInstancedMeshInstances);
            }
          }
        }
      }
    }
    for (i = 0; i < node._children.length; i++) {
      collectModels(node._children[i], nodes, nodesMeshInstances, allNodes);
    }
  }
  var Lightmapper = function(device, root, scene, renderer, assets) {
    this.device = device;
    this.root = root;
    this.scene = scene;
    this.renderer = renderer;
    this.assets = assets;
  };
  Lightmapper.prototype = {calculateLightmapSize:function(node) {
    var data, parent;
    var sizeMult = this.scene.lightmapSizeMultiplier || 16;
    var scale = tempVec;
    var area = {x:1, y:1, z:1, uv:1};
    if (node.model.asset) {
      data = this.assets.get(node.model.asset).data;
      if (data.area) {
        area.x = data.area.x;
        area.y = data.area.y;
        area.z = data.area.z;
        area.uv = data.area.uv;
      }
    } else {
      if (node.model._area) {
        data = node.model;
        if (data._area) {
          area.x = data._area.x;
          area.y = data._area.y;
          area.z = data._area.z;
          area.uv = data._area.uv;
        }
      }
    }
    var areaMult = node.model.lightmapSizeMultiplier || 1;
    area.x *= areaMult;
    area.y *= areaMult;
    area.z *= areaMult;
    scale.copy(node.localScale);
    parent = node._parent;
    while (parent) {
      scale.mul(parent.localScale);
      parent = parent._parent;
    }
    scale.x = Math.abs(scale.x);
    scale.y = Math.abs(scale.y);
    scale.z = Math.abs(scale.z);
    var totalArea = area.x * scale.y * scale.z + area.y * scale.x * scale.z + area.z * scale.x * scale.y;
    totalArea /= area.uv;
    totalArea = Math.sqrt(totalArea);
    return Math.min(pc.math.nextPowerOfTwo(totalArea * sizeMult), this.scene.lightmapMaxResolution || maxSize);
  }, bake:function(nodes, mode) {
    var i, j;
    var device = this.device;
    var scene = this.scene;
    var passCount = 1;
    if (mode === undefined) {
      mode = pc.BAKE_COLORDIR;
    }
    if (mode === pc.BAKE_COLORDIR) {
      passCount = 2;
    }
    var pass;
    var allNodes = [];
    var nodesMeshInstances = [];
    if (!nodes) {
      for (i = 0; i < sceneLightmaps.length; i++) {
        for (j = 0; j < sceneLightmaps[i].length; j++) {
          sceneLightmaps[i][j].destroy();
        }
      }
      sceneLightmaps = [];
      sceneLightmapsNode = [];
      nodes = [];
      collectModels(this.root, nodes, nodesMeshInstances, allNodes);
    } else {
      var k;
      for (i = sceneLightmapsNode.length - 1; i >= 0; i--) {
        for (j = 0; j < nodes.length; j++) {
          if (sceneLightmapsNode[i] === nodes[j]) {
            for (k = 0; k < sceneLightmaps[i].length; k++) {
              sceneLightmaps[i][k].destroy();
            }
            sceneLightmaps.splice(i, 1);
            sceneLightmapsNode.splice(i, 1);
          }
        }
      }
      var _nodes = [];
      for (i = 0; i < nodes.length; i++) {
        collectModels(nodes[i], _nodes, nodesMeshInstances);
      }
      nodes = _nodes;
      collectModels(this.root, null, null, allNodes);
    }
    if (nodes.length === 0) {
      device.fire("lightmapper:end", {timestamp:pc.now(), target:this});
      return;
    }
    var revertStatic = false;
    if (scene._needsStaticPrepare) {
      scene._needsStaticPrepare = false;
      revertStatic = true;
    }
    var texSize = [];
    var lmaps = [[], []];
    var texPool = {};
    var size;
    var tex;
    var blackTex = new pc.Texture(this.device, {width:4, height:4, format:pc.PIXELFORMAT_R8_G8_B8_A8, rgbm:true});
    for (i = 0; i < nodes.length; i++) {
      size = this.calculateLightmapSize(nodes[i]);
      texSize.push(size);
      for (pass = 0; pass < passCount; pass++) {
        tex = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_R8_G8_B8_A8, mipmaps:false, rgbm:pass === PASS_COLOR, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
        lmaps[pass].push(tex);
      }
      if (!texPool[size]) {
        var tex2 = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_R8_G8_B8_A8, mipmaps:false, rgbm:true, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
        var targ2 = new pc.RenderTarget(device, tex2, {depth:false});
        texPool[size] = targ2;
      }
    }
    var activeComp = scene.layers;
    activeComp._update();
    var lights = [];
    var origMask = [];
    var origShadowMode = [];
    var origEnabled = [];
    var sceneLights = activeComp._lights;
    var mask;
    for (i = 0; i < sceneLights.length; i++) {
      if (sceneLights[i]._enabled) {
        mask = sceneLights[i]._mask;
        if ((mask & maskLightmap) !== 0) {
          origMask.push(mask);
          origShadowMode.push(sceneLights[i].shadowUpdateMode);
          sceneLights[i]._mask = 4294967295;
          sceneLights[i].shadowUpdateMode = sceneLights[i]._type === pc.LIGHTTYPE_DIRECTIONAL ? pc.SHADOWUPDATE_REALTIME : pc.SHADOWUPDATE_THISFRAME;
          lights.push(sceneLights[i]);
          sceneLights[i].isStatic = false;
        }
      }
      origEnabled.push(sceneLights[i]._enabled);
      sceneLights[i].enabled = false;
    }
    var chunks = pc.shaderChunks;
    var xformUv1 = "#define UV1LAYOUT\n" + chunks.transformVS;
    var bakeLmEnd = chunks.bakeLmEndPS;
    var dilate = chunks.dilatePS;
    var dilateShader = chunks.createShaderFromCode(device, chunks.fullscreenQuadVS, dilate, "lmDilate");
    var constantTexSource = device.scope.resolve("source");
    var constantPixelOffset = device.scope.resolve("pixelOffset");
    var constantBakeDir = device.scope.resolve("bakeDir");
    var pixelOffset = new pc.Vec2;
    var drawCalls = activeComp._meshInstances;
    for (i = 0; i < drawCalls.length; i++) {
      if (drawCalls[i].node) {
        drawCalls[i].node.getWorldTransform();
      }
    }
    var origFog = scene.fog;
    var origAmbientR = scene.ambientLight.data[0];
    var origAmbientG = scene.ambientLight.data[1];
    var origAmbientB = scene.ambientLight.data[2];
    scene.fog = pc.FOG_NONE;
    scene.ambientLight.data[0] = 0;
    scene.ambientLight.data[1] = 0;
    scene.ambientLight.data[2] = 0;
    if (!lmCamera) {
      lmCamera = new pc.Camera;
      lmCamera._node = new pc.GraphNode;
      lmCamera.clearColor[0] = 0;
      lmCamera.clearColor[1] = 0;
      lmCamera.clearColor[2] = 0;
      lmCamera.clearColor[3] = 0;
      lmCamera.clearDepth = 1;
      lmCamera.clearFlags = pc.CLEARFLAG_COLOR;
      lmCamera.clearStencil = null;
      lmCamera.frustumCulling = false;
    }
    var node;
    var lm, rcv, mat, m;
    var origShaderDefs = [];
    origShaderDefs.length = sceneLightmapsNode.length;
    var shaderDefs;
    for (node = 0; node < allNodes.length; node++) {
      rcv = allNodes[node].model.model.meshInstances;
      shaderDefs = [];
      for (i = 0; i < rcv.length; i++) {
        shaderDefs.push(rcv[i]._shaderDefs);
        rcv[i]._shaderDefs &= ~(pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);
      }
      for (i = 0; i < sceneLightmapsNode.length; i++) {
        if (sceneLightmapsNode[i] === allNodes[node]) {
          origShaderDefs[i] = shaderDefs;
          break;
        }
      }
    }
    var origCastShadows = [];
    var casters = [];
    var meshes;
    for (node = 0; node < allNodes.length; node++) {
      origCastShadows[node] = allNodes[node].model.castShadows;
      allNodes[node].model.castShadows = allNodes[node].model.data.castShadowsLightmap;
      if (allNodes[node].model.data.castShadowsLightmap) {
        meshes = allNodes[node].model.meshInstances;
        for (i = 0; i < meshes.length; i++) {
          meshes[i].visibleThisFrame = true;
          casters.push(meshes[i]);
        }
      }
    }
    this.renderer.updateCpuSkinMatrices(casters);
    this.renderer.gpuUpdate(casters);
    var origMat = [];
    var nodeBounds = [];
    var nodeTarg = [[], []];
    var targ, targTmp, texTmp;
    var light, shadowCam;
    var nodeLightCount = [];
    nodeLightCount.length = nodes.length;
    var lmMaterial;
    for (pass = 0; pass < passCount; pass++) {
      if (!passMaterial[pass]) {
        lmMaterial = new pc.StandardMaterial;
        lmMaterial.chunks.transformVS = xformUv1;
        if (pass === PASS_COLOR) {
          lmMaterial.chunks.endPS = bakeLmEnd;
          lmMaterial.ambient = new pc.Color(0, 0, 0);
          lmMaterial.ambientTint = true;
          lmMaterial.lightMap = blackTex;
        } else {
          lmMaterial.chunks.basePS = chunks.basePS + "\nuniform sampler2D texture_dirLightMap;\nuniform float bakeDir;\n";
          lmMaterial.chunks.endPS = chunks.bakeDirLmEndPS;
        }
        lmMaterial.chunks.outputAlphaPS = "\n";
        lmMaterial.chunks.outputAlphaOpaquePS = "\n";
        lmMaterial.chunks.outputAlphaPremulPS = "\n";
        lmMaterial.cull = pc.CULLFACE_NONE;
        lmMaterial.forceUv1 = true;
        lmMaterial.update();
        lmMaterial.updateShader(device, scene);
        lmMaterial.name = "lmMaterial" + pass;
        passMaterial[pass] = lmMaterial;
      }
    }
    for (node = 0; node < nodes.length; node++) {
      rcv = nodesMeshInstances[node];
      nodeLightCount[node] = 0;
      if (rcv.length > 0) {
        bounds.copy(rcv[0].aabb);
        for (i = 0; i < rcv.length; i++) {
          rcv[i].node.getWorldTransform();
          bounds.add(rcv[i].aabb);
        }
      }
      var nbounds = new pc.BoundingBox;
      nbounds.copy(bounds);
      nodeBounds.push(nbounds);
      for (i = 0; i < rcv.length; i++) {
        m = rcv[i];
        m._shaderDefs &= ~(pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);
        m.mask = maskLightmap;
        m.deleteParameter("texture_lightMap");
        m.deleteParameter("texture_dirLightMap");
        m.setParameter("texture_lightMap", m.material.lightMap ? m.material.lightMap : blackTex);
        m.setParameter("texture_dirLightMap", blackTex);
      }
      for (pass = 0; pass < passCount; pass++) {
        lm = lmaps[pass][node];
        targ = new pc.RenderTarget(device, lm, {depth:false});
        nodeTarg[pass].push(targ);
      }
    }
    for (j = 0; j < lights.length; j++) {
      lights[j].enabled = false;
    }
    var drawCallArray = [];
    var lightArray = [[], [], []];
    var shadersUpdatedOn1stPass = false;
    var shadowMapRendered;
    for (i = 0; i < lights.length; i++) {
      lights[i].enabled = true;
      shadowMapRendered = false;
      lights[i]._cacheShadowMap = true;
      if (lights[i]._type !== pc.LIGHTTYPE_DIRECTIONAL) {
        lights[i]._node.getWorldTransform();
        lights[i].getBoundingSphere(tempSphere);
        lightBounds.center = tempSphere.center;
        lightBounds.halfExtents.x = tempSphere.radius;
        lightBounds.halfExtents.y = tempSphere.radius;
        lightBounds.halfExtents.z = tempSphere.radius;
      }
      if (lights[i]._type === pc.LIGHTTYPE_SPOT) {
        light = lights[i];
        shadowCam = this.renderer.getShadowCamera(device, light);
        shadowCam._node.setPosition(light._node.getPosition());
        shadowCam._node.setRotation(light._node.getRotation());
        shadowCam._node.rotateLocal(-90, 0, 0);
        shadowCam.projection = pc.PROJECTION_PERSPECTIVE;
        shadowCam.nearClip = light.attenuationEnd / 1000;
        shadowCam.farClip = light.attenuationEnd;
        shadowCam.aspectRatio = 1;
        shadowCam.fov = light._outerConeAngle * 2;
        this.renderer.updateCameraFrustum(shadowCam);
      }
      if (nodesMeshInstances.length > 0) {
        this.renderer.updateShaders(nodesMeshInstances[0]);
      }
      for (node = 0; node < nodes.length; node++) {
        rcv = nodesMeshInstances[node];
        bounds = nodeBounds[node];
        if (lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL) {
          tempVec.copy(bounds.center);
          tempVec.y += bounds.halfExtents.y;
          lmCamera._node.setPosition(tempVec);
          lmCamera._node.setEulerAngles(-90, 0, 0);
          var frustumSize = Math.max(bounds.halfExtents.x, bounds.halfExtents.z);
          lmCamera.projection = pc.PROJECTION_ORTHOGRAPHIC;
          lmCamera.nearClip = 0;
          lmCamera.farClip = bounds.halfExtents.y * 2;
          lmCamera.aspectRatio = 1;
          lmCamera.orthoHeight = frustumSize;
        } else {
          if (!lightBounds.intersects(bounds)) {
            continue;
          }
        }
        if (lights[i]._type === pc.LIGHTTYPE_SPOT) {
          var nodeVisible = false;
          for (j = 0; j < rcv.length; j++) {
            if (this.renderer._isVisible(shadowCam, rcv[j])) {
              nodeVisible = true;
              break;
            }
          }
          if (!nodeVisible) {
            continue;
          }
        }
        if (lights[i]._type === pc.LIGHTTYPE_DIRECTIONAL) {
          lightArray[pc.LIGHTTYPE_DIRECTIONAL][0] = lights[i];
          lightArray[pc.LIGHTTYPE_POINT].length = 0;
          lightArray[pc.LIGHTTYPE_SPOT].length = 0;
          if (!shadowMapRendered && lights[i].castShadows) {
            this.renderer.cullDirectionalShadowmap(lights[i], casters, lmCamera, 0);
            this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_DIRECTIONAL], 0);
            shadowMapRendered = true;
          }
        } else {
          lightArray[pc.LIGHTTYPE_DIRECTIONAL].length = 0;
          if (lights[i]._type === pc.LIGHTTYPE_POINT) {
            lightArray[pc.LIGHTTYPE_POINT][0] = lights[i];
            lightArray[pc.LIGHTTYPE_SPOT].length = 0;
            if (!shadowMapRendered && lights[i].castShadows) {
              this.renderer.cullLocalShadowmap(lights[i], casters);
              this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_POINT]);
              shadowMapRendered = true;
            }
          } else {
            lightArray[pc.LIGHTTYPE_POINT].length = 0;
            lightArray[pc.LIGHTTYPE_SPOT][0] = lights[i];
            if (!shadowMapRendered && lights[i].castShadows) {
              this.renderer.cullLocalShadowmap(lights[i], casters);
              this.renderer.renderShadows(lightArray[pc.LIGHTTYPE_SPOT]);
              shadowMapRendered = true;
            }
          }
        }
        for (j = 0; j < rcv.length; j++) {
          origMat[j] = rcv[j].material;
        }
        for (pass = 0; pass < passCount; pass++) {
          lm = lmaps[pass][node];
          targ = nodeTarg[pass][node];
          targTmp = texPool[lm.width];
          texTmp = targTmp.colorBuffer;
          if (pass === 0) {
            shadersUpdatedOn1stPass = scene.updateShaders;
          } else {
            if (shadersUpdatedOn1stPass) {
              scene.updateShaders = true;
            }
          }
          for (j = 0; j < rcv.length; j++) {
            rcv[j].material = passMaterial[pass];
          }
          if (passCount > 1) {
            this.renderer.updateShaders(rcv);
          }
          this.renderer.setCamera(lmCamera, targTmp, true);
          if (pass === PASS_DIR) {
            constantBakeDir.setValue(lights[i].bakeDir ? 1 : 0);
          }
          this.renderer._forwardTime = 0;
          this.renderer._shadowMapTime = 0;
          this.renderer.renderForward(lmCamera, rcv, rcv.length, lightArray, pc.SHADER_FORWARDHDR);
          lmaps[pass][node] = texTmp;
          nodeTarg[pass][node] = targTmp;
          texPool[lm.width] = targ;
          for (j = 0; j < rcv.length; j++) {
            m = rcv[j];
            m.setParameter(passTexName[pass], texTmp);
            m._shaderDefs |= pc.SHADERDEF_LM;
          }
        }
        nodeLightCount[node]++;
        for (j = 0; j < rcv.length; j++) {
          rcv[j].material = origMat[j];
        }
      }
      lights[i].enabled = false;
      lights[i]._cacheShadowMap = false;
      if (lights[i]._isCachedShadowMap) {
        lights[i]._destroyShadowMap();
      }
    }
    var sceneLmaps;
    for (node = 0; node < nodes.length; node++) {
      rcv = nodesMeshInstances[node];
      sceneLmaps = [];
      for (pass = 0; pass < passCount; pass++) {
        lm = lmaps[pass][node];
        targ = nodeTarg[pass][node];
        targTmp = texPool[lm.width];
        texTmp = targTmp.colorBuffer;
        var numDilates2x = 4;
        pixelOffset.set(1 / lm.width, 1 / lm.height);
        constantPixelOffset.setValue(pixelOffset.data);
        for (i = 0; i < numDilates2x; i++) {
          constantTexSource.setValue(lm);
          pc.drawQuadWithShader(device, targTmp, dilateShader);
          constantTexSource.setValue(texTmp);
          pc.drawQuadWithShader(device, targ, dilateShader);
        }
        for (i = 0; i < rcv.length; i++) {
          m = rcv[i];
          m.mask = maskBaked;
          rcv[i].setParameter(passTexName[pass], lm);
          if (pass === PASS_DIR) {
            rcv[i]._shaderDefs |= pc.SHADERDEF_DIRLM;
          }
        }
        sceneLmaps[pass] = lm;
        if (pass === passCount - 1) {
          targ.destroy();
        }
      }
      sceneLightmaps.push(sceneLmaps);
      sceneLightmapsNode.push(nodes[node]);
    }
    for (var key in texPool) {
      if (texPool.hasOwnProperty(key)) {
        texPool[key].colorBuffer.destroy();
        texPool[key].destroy();
      }
    }
    for (i = 0; i < sceneLightmaps.length; i++) {
      for (j = 0; j < sceneLightmaps[i].length; j++) {
        tex = sceneLightmaps[i][j];
        tex.minFilter = pc.FILTER_LINEAR;
        tex.magFilter = pc.FILTER_LINEAR;
      }
    }
    for (node = 0; node < allNodes.length; node++) {
      allNodes[node].model.castShadows = origCastShadows[node];
    }
    for (i = 0; i < origShaderDefs.length; i++) {
      if (origShaderDefs[i]) {
        rcv = sceneLightmapsNode[i].model.model.meshInstances;
        for (j = 0; j < rcv.length; j++) {
          rcv[j]._shaderDefs |= origShaderDefs[i][j] & (pc.SHADERDEF_LM | pc.SHADERDEF_DIRLM);
        }
      }
    }
    for (i = 0; i < lights.length; i++) {
      lights[i]._mask = origMask[i];
      lights[i].shadowUpdateMode = origShadowMode[i];
    }
    for (i = 0; i < sceneLights.length; i++) {
      sceneLights[i].enabled = origEnabled[i];
    }
    scene.fog = origFog;
    scene.ambientLight.data[0] = origAmbientR;
    scene.ambientLight.data[1] = origAmbientG;
    scene.ambientLight.data[2] = origAmbientB;
    if (revertStatic) {
      scene._needsStaticPrepare = true;
    }
  }};
  return {Lightmapper:Lightmapper};
}());
pc.extend(pc, function() {
  var Batch = function(meshInstances, dynamic, batchGroupId) {
    this.origMeshInstances = meshInstances;
    this._aabb = new pc.BoundingBox;
    this.meshInstance = null;
    this.model = null;
    this.dynamic = dynamic;
    this.batchGroupId = batchGroupId;
  };
  var BatchGroup = function(id, name, dynamic, maxAabbSize, layers) {
    this.dynamic = dynamic;
    this.maxAabbSize = maxAabbSize;
    this.id = id;
    this.name = name;
    this.layers = layers === undefined ? [pc.LAYERID_WORLD] : layers;
  };
  var SkinBatchInstance = function(device, nodes, rootNode) {
    this.device = device;
    this.rootNode = rootNode;
    this._dirty = true;
    this.bones = nodes;
    var numBones = nodes.length;
    if (device.supportsBoneTextures) {
      var size;
      if (numBones > 256) {
        size = 64;
      } else {
        if (numBones > 64) {
          size = 32;
        } else {
          if (numBones > 16) {
            size = 16;
          } else {
            size = 8;
          }
        }
      }
      this.boneTexture = new pc.Texture(device, {width:size, height:size, format:pc.PIXELFORMAT_RGBA32F, mipmaps:false, minFilter:pc.FILTER_NEAREST, magFilter:pc.FILTER_NEAREST});
      this.matrixPalette = this.boneTexture.lock();
    } else {
      this.matrixPalette = new Float32Array(numBones * 16);
    }
  };
  SkinBatchInstance.prototype = {updateMatrices:function() {
  }, updateMatrixPalette:function() {
    var pe;
    var mp = this.matrixPalette;
    var base;
    for (var i = this.bones.length - 1; i >= 0; i--) {
      pe = this.bones[i].getWorldTransform().data;
      base = i * 16;
      mp[base] = pe[0];
      mp[base + 1] = pe[1];
      mp[base + 2] = pe[2];
      mp[base + 3] = pe[3];
      mp[base + 4] = pe[4];
      mp[base + 5] = pe[5];
      mp[base + 6] = pe[6];
      mp[base + 7] = pe[7];
      mp[base + 8] = pe[8];
      mp[base + 9] = pe[9];
      mp[base + 10] = pe[10];
      mp[base + 11] = pe[11];
      mp[base + 12] = pe[12];
      mp[base + 13] = pe[13];
      mp[base + 14] = pe[14];
      mp[base + 15] = pe[15];
    }
    if (this.device.supportsBoneTextures) {
      this.boneTexture.lock();
      this.boneTexture.unlock();
    }
  }};
  var BatchManager = function(device, root, scene) {
    this.device = device;
    this.rootNode = root;
    this.scene = scene;
    this._init = false;
    this._batchGroups = {};
    this._batchGroupCounter = 0;
    this._batchList = [];
    this._dirtyGroups = [];
  };
  BatchManager.prototype.addGroup = function(name, dynamic, maxAabbSize, id, layers) {
    if (id === undefined) {
      id = this._batchGroupCounter;
      this._batchGroupCounter++;
    }
    if (this._batchGroups[id]) {
      return;
    }
    var group;
    this._batchGroups[id] = group = new pc.BatchGroup(id, name, dynamic, maxAabbSize, layers);
    return group;
  };
  BatchManager.prototype.removeGroup = function(id) {
    if (!this._batchGroups[id]) {
      return;
    }
    var newBatchList = [];
    for (var i = 0; i < this._batchList.length; i++) {
      if (this._batchList[i].batchGroupId !== id) {
        newBatchList.push(this._batchList[i]);
        continue;
      }
      this._batchList[i].refCounter = 1;
      this.destroy(this._batchList[i]);
    }
    this._batchList = newBatchList;
    this._removeModelsFromBatchGroup(this.rootNode, id);
    delete this._batchGroups[id];
  };
  BatchManager.prototype._removeModelsFromBatchGroup = function(node, id) {
    if (!node.enabled) {
      return;
    }
    if (node.model && node.model.batchGroupId === id) {
      node.model.batchGroupId = -1;
    }
    if (node.element && node.element.batchGroupId === id) {
      node.element.batchGroupId = -1;
    }
    if (node.sprite && node.sprite.batchGroupId === id) {
      node.sprite.batchGroupId = -1;
    }
    for (var i = 0; i < node._children.length; i++) {
      this._removeModelsFromBatchGroup(node._children[i], id);
    }
  };
  BatchManager.prototype._collectAndRemoveModels = function(node, groupMeshInstances, groupIds) {
    if (!node.enabled) {
      return;
    }
    var i;
    if (node.model && node.model.batchGroupId >= 0 && node.model.model && node.model.enabled) {
      if (!groupIds || groupIds && groupIds.indexOf(node.model.batchGroupId) >= 0) {
        var arr = groupMeshInstances[node.model.batchGroupId];
        if (!arr) {
          arr = groupMeshInstances[node.model.batchGroupId] = [];
        }
        if (node.model.isStatic) {
          var drawCalls = this.scene.drawCalls;
          var nodeMeshInstances = node.model.meshInstances;
          for (i = 0; i < drawCalls.length; i++) {
            if (!drawCalls[i]._staticSource) {
              continue;
            }
            if (nodeMeshInstances.indexOf(drawCalls[i]._staticSource) < 0) {
              continue;
            }
            groupMeshInstances[node.model.batchGroupId].push(drawCalls[i]);
          }
          for (i = 0; i < nodeMeshInstances.length; i++) {
            if (drawCalls.indexOf(nodeMeshInstances[i]) >= 0) {
              groupMeshInstances[node.model.batchGroupId].push(nodeMeshInstances[i]);
            }
          }
        } else {
          groupMeshInstances[node.model.batchGroupId] = arr.concat(node.model.meshInstances);
        }
        node.model.removeModelFromLayers(node.model.model);
      }
    }
    if (node.element && node.element.batchGroupId >= 0 && node.element.enabled) {
      if (!groupIds || groupIds && groupIds.indexOf(node.element.batchGroupId) >= 0) {
        var arr = groupMeshInstances[node.element.batchGroupId];
        if (!arr) {
          arr = groupMeshInstances[node.element.batchGroupId] = [];
        }
        var valid = false;
        if (node.element._text) {
          groupMeshInstances[node.element.batchGroupId].push(node.element._text._model.meshInstances[0]);
          node.element.removeModelFromLayers(node.element._text._model);
          valid = true;
        } else {
          if (node.element._image) {
            groupMeshInstances[node.element.batchGroupId].push(node.element._image._model.meshInstances[0]);
            node.element.removeModelFromLayers(node.element._image._model);
            valid = true;
          }
        }
      }
    }
    if (node.sprite && node.sprite.batchGroupId >= 0 && node.sprite.enabled) {
      if (!groupIds || groupIds && groupIds.indexOf(node.sprite.batchGroupId) >= 0) {
        var arr = groupMeshInstances[node.sprite.batchGroupId];
        if (!arr) {
          arr = groupMeshInstances[node.sprite.batchGroupId] = [];
        }
        if (node.sprite._meshInstance) {
          groupMeshInstances[node.sprite.batchGroupId].push(node.sprite._meshInstance);
          this.scene.removeModel(node.sprite._model);
          node.sprite._batchGroup = this._batchGroups[node.sprite.batchGroupId];
        }
      }
    }
    for (i = 0; i < node._children.length; i++) {
      this._collectAndRemoveModels(node._children[i], groupMeshInstances, groupIds);
    }
  };
  BatchManager.prototype._markGroupDirty = function(id) {
    if (this._dirtyGroups.indexOf(id) < 0) {
      this._dirtyGroups.push(id);
    }
  };
  BatchManager.prototype._registerEntities = function(batch, meshInstances) {
    var node;
    var ents = [];
    for (var i = 0; i < meshInstances.length; i++) {
      node = meshInstances[i].node;
      while (!node._app && node._parent) {
        node = node._parent;
      }
      if (!node._app) {
        continue;
      }
      ents.push(node);
    }
    this.register(batch, ents);
  };
  BatchManager.prototype.generate = function(groupIds) {
    var i, j;
    var groupMeshInstances = {};
    if (!groupIds) {
      for (i = 0; i < this._batchList.length; i++) {
        this._batchList[i].refCounter = 1;
        this.destroy(this._batchList[i]);
      }
      this._batchList.length = 0;
      this._collectAndRemoveModels(this.rootNode, groupMeshInstances);
      this._dirtyGroups.length = 0;
    } else {
      var newBatchList = [];
      for (i = 0; i < this._batchList.length; i++) {
        if (groupIds.indexOf(this._batchList[i].batchGroupId) < 0) {
          newBatchList.push(this._batchList[i]);
          continue;
        }
        this._batchList[i].refCounter = 1;
        this.destroy(this._batchList[i]);
      }
      this._batchList = newBatchList;
      this._collectAndRemoveModels(this.rootNode, groupMeshInstances, groupIds);
      if (groupIds === this._dirtyGroups) {
        this._dirtyGroups.length = 0;
      } else {
        var newDirtyGroups = [];
        for (i = 0; i < this._dirtyGroups.length; i++) {
          if (groupIds.indexOf(this._dirtyGroups[i]) < 0) {
            newDirtyGroups.push(this._dirtyGroups[i]);
          }
        }
        this._dirtyGroups = newDirtyGroups;
      }
    }
    var group, lists, groupData, batch;
    for (var groupId in groupMeshInstances) {
      if (!groupMeshInstances.hasOwnProperty(groupId)) {
        continue;
      }
      group = groupMeshInstances[groupId];
      groupData = this._batchGroups[groupId];
      if (!groupData) {
        continue;
      }
      lists = this.prepare(group, groupData.dynamic, groupData.maxAabbSize);
      for (i = 0; i < lists.length; i++) {
        batch = this.create(lists[i], groupData.dynamic, parseInt(groupId));
        for (j = 0; j < groupData.layers.length; j++) {
          this.scene.layers.getLayerById(groupData.layers[j]).addMeshInstances(batch.model.meshInstances);
        }
        this._registerEntities(batch, lists[i]);
      }
    }
  };
  BatchManager.prototype.getGroupByName = function(name) {
    var groups = this._batchGroups;
    for (var group in groups) {
      if (!groups.hasOwnProperty(group)) {
        continue;
      }
      if (groups[group].name === name) {
        return groups[group];
      }
    }
    return null;
  };
  function paramsIdentical(a, b) {
    if (a && !b) {
      return false;
    }
    if (!a && b) {
      return false;
    }
    a = a.data;
    b = b.data;
    if (a === b) {
      return true;
    }
    if (a instanceof Float32Array && b instanceof Float32Array) {
      if (a.length !== b.length) {
        return false;
      }
      for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  BatchManager.prototype.prepare = function(meshInstances, dynamic, maxAabbSize) {
    if (meshInstances.length === 0) {
      return [];
    }
    if (maxAabbSize === undefined) {
      maxAabbSize = Number.POSITIVE_INFINITY;
    }
    var halfMaxAabbSize = maxAabbSize * 0.5;
    var maxInstanceCount = this.device.supportsBoneTextures ? 1024 : this.device.boneLimit;
    var i;
    var material, layer, vertCount, params, params2, param, paramFailed, lightList, defs;
    var aabb = new pc.BoundingBox;
    var testAabb = new pc.BoundingBox;
    var lists = [];
    var j = 0;
    var meshInstancesLeftA = meshInstances;
    var meshInstancesLeftB;
    var k;
    while (meshInstancesLeftA.length > 0) {
      lists[j] = [];
      meshInstancesLeftB = [];
      material = meshInstancesLeftA[0].material;
      layer = meshInstancesLeftA[0].layer;
      defs = meshInstancesLeftA[0]._shaderDefs;
      params = meshInstancesLeftA[0].parameters;
      lightList = meshInstancesLeftA[0]._staticLightList;
      vertCount = meshInstancesLeftA[0].mesh.vertexBuffer.getNumVertices();
      aabb.copy(meshInstancesLeftA[0].aabb);
      for (i = 0; i < meshInstancesLeftA.length; i++) {
        if (i > 0) {
          if (material !== meshInstancesLeftA[i].material) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          if (layer !== meshInstancesLeftA[i].layer) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          if (defs !== meshInstancesLeftA[i]._shaderDefs) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          if (vertCount + meshInstancesLeftA[i].mesh.vertexBuffer.getNumVertices() > 65535) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          testAabb.copy(aabb);
          testAabb.add(meshInstancesLeftA[i].aabb);
          if (testAabb.halfExtents.x > halfMaxAabbSize || testAabb.halfExtents.y > halfMaxAabbSize || testAabb.halfExtents.z > halfMaxAabbSize) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          params2 = meshInstancesLeftA[i].parameters;
          paramFailed = false;
          for (param in params) {
            if (!params.hasOwnProperty(param)) {
              continue;
            }
            if (!paramsIdentical(params[param], params2[param])) {
              paramFailed = true;
              break;
            }
          }
          if (!paramFailed) {
            for (param in params2) {
              if (!params2.hasOwnProperty(param)) {
                continue;
              }
              if (!paramsIdentical(params2[param], params[param])) {
                paramFailed = true;
                break;
              }
            }
          }
          if (paramFailed) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          params2 = meshInstancesLeftA[i]._staticLightList;
          if (lightList && !params2 || !lightList && params2) {
            meshInstancesLeftB.push(meshInstancesLeftA[i]);
            continue;
          }
          if (lightList && params2) {
            paramFailed = false;
            for (k = 0; k < lightList.length; k++) {
              if (params2.indexOf(lightList[k]) < 0) {
                paramFailed = true;
                break;
              }
            }
            for (k = 0; k < params2.length; k++) {
              if (lightList.indexOf(params2[k]) < 0) {
                paramFailed = true;
                break;
              }
            }
            if (paramFailed) {
              meshInstancesLeftB.push(meshInstancesLeftA[i]);
              continue;
            }
          }
        }
        aabb.add(meshInstancesLeftA[i].aabb);
        vertCount += meshInstancesLeftA[i].mesh.vertexBuffer.getNumVertices();
        lists[j].push(meshInstancesLeftA[i]);
        if (dynamic && lists[j].length === maxInstanceCount) {
          if (i === meshInstancesLeftA.length) {
            meshInstancesLeftB = [];
          } else {
            meshInstancesLeftB = meshInstancesLeftA.slice(i + 1);
          }
          break;
        }
      }
      j++;
      meshInstancesLeftA = meshInstancesLeftB;
    }
    return lists;
  };
  BatchManager.prototype.create = function(meshInstances, dynamic, batchGroupId) {
    if (!this._init) {
      var boneLimit = "#define BONE_LIMIT " + this.device.getBoneLimit() + "\n";
      this.transformVS = boneLimit + "#define DYNAMICBATCH\n" + pc.shaderChunks.transformVS;
      this.skinTexVS = pc.shaderChunks.skinBatchTexVS;
      this.skinConstVS = pc.shaderChunks.skinBatchConstVS;
      this.vertexFormats = {};
      this._init = true;
    }
    var i, j;
    var batch = new pc.Batch(meshInstances, dynamic, batchGroupId);
    this._batchList.push(batch);
    var material = null;
    var mesh, elems, numVerts, vertSize;
    var hasPos, hasNormal, hasUv, hasUv2, hasTangent, hasColor;
    var batchNumVerts = 0;
    var batchNumIndices = 0;
    for (i = 0; i < meshInstances.length; i++) {
      if (!material) {
        material = meshInstances[i].material;
      } else {
        if (material !== meshInstances[i].material) {
          return;
        }
      }
      mesh = meshInstances[i].mesh;
      elems = mesh.vertexBuffer.format.elements;
      numVerts = mesh.vertexBuffer.numVertices;
      batchNumVerts += numVerts;
      for (j = 0; j < elems.length; j++) {
        if (elems[j].name === pc.SEMANTIC_POSITION) {
          hasPos = true;
        } else {
          if (elems[j].name === pc.SEMANTIC_NORMAL) {
            hasNormal = true;
          } else {
            if (elems[j].name === pc.SEMANTIC_TEXCOORD0) {
              hasUv = true;
            } else {
              if (elems[j].name === pc.SEMANTIC_TEXCOORD1) {
                hasUv2 = true;
              } else {
                if (elems[j].name === pc.SEMANTIC_TANGENT) {
                  hasTangent = true;
                } else {
                  if (elems[j].name === pc.SEMANTIC_COLOR) {
                    hasColor = true;
                  }
                }
              }
            }
          }
        }
      }
      batchNumIndices += mesh.primitive[0].count;
    }
    if (!hasPos) {
      return;
    }
    var entityIndexSizeF = dynamic ? 1 : 0;
    var batchVertSizeF = 3 + (hasNormal ? 3 : 0) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0) + (hasColor ? 1 : 0) + entityIndexSizeF;
    var batchOffsetNF = 3;
    var batchOffsetUF = hasNormal ? 3 * 2 : 3;
    var batchOffsetU2F = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0);
    var batchOffsetTF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0);
    var batchOffsetCF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0);
    var batchOffsetEF = (hasNormal ? 3 * 2 : 3) + (hasUv ? 2 : 0) + (hasUv2 ? 2 : 0) + (hasTangent ? 4 : 0) + (hasColor ? 1 : 0);
    var arrayBuffer = new ArrayBuffer(batchNumVerts * batchVertSizeF * 4);
    var batchData = new Float32Array(arrayBuffer);
    var batchData8 = new Uint8Array(arrayBuffer);
    var indexBuffer = new pc.IndexBuffer(this.device, pc.INDEXFORMAT_UINT16, batchNumIndices, pc.BUFFER_STATIC);
    var batchIndexData = new Uint16Array(indexBuffer.lock());
    var vertSizeF;
    var data, data8, indexBase, numIndices, indexData;
    var verticesOffset = 0;
    var indexOffset = 0;
    var vbOffset = 0;
    var offsetPF, offsetNF, offsetUF, offsetU2F, offsetTF, offsetCF;
    var transform, vec, vecData;
    if (!dynamic) {
      vec = new pc.Vec3;
      vecData = vec.data;
    }
    for (i = 0; i < meshInstances.length; i++) {
      mesh = meshInstances[i].mesh;
      elems = mesh.vertexBuffer.format.elements;
      numVerts = mesh.vertexBuffer.numVertices;
      vertSize = mesh.vertexBuffer.format.size;
      vertSizeF = vertSize / 4;
      for (j = 0; j < elems.length; j++) {
        if (elems[j].name === pc.SEMANTIC_POSITION) {
          offsetPF = elems[j].offset / 4;
        } else {
          if (elems[j].name === pc.SEMANTIC_NORMAL) {
            offsetNF = elems[j].offset / 4;
          } else {
            if (elems[j].name === pc.SEMANTIC_TEXCOORD0) {
              offsetUF = elems[j].offset / 4;
            } else {
              if (elems[j].name === pc.SEMANTIC_TEXCOORD1) {
                offsetU2F = elems[j].offset / 4;
              } else {
                if (elems[j].name === pc.SEMANTIC_TANGENT) {
                  offsetTF = elems[j].offset / 4;
                } else {
                  if (elems[j].name === pc.SEMANTIC_COLOR) {
                    offsetCF = elems[j].offset / 4;
                  }
                }
              }
            }
          }
        }
      }
      data = new Float32Array(mesh.vertexBuffer.storage);
      data8 = new Uint8Array(mesh.vertexBuffer.storage);
      if (dynamic) {
        for (j = 0; j < numVerts; j++) {
          batchData[j * batchVertSizeF + vbOffset] = data[j * vertSizeF + offsetPF];
          batchData[j * batchVertSizeF + vbOffset + 1] = data[j * vertSizeF + offsetPF + 1];
          batchData[j * batchVertSizeF + vbOffset + 2] = data[j * vertSizeF + offsetPF + 2];
          if (hasNormal) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF] = data[j * vertSizeF + offsetNF];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 1] = data[j * vertSizeF + offsetNF + 1];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 2] = data[j * vertSizeF + offsetNF + 2];
          }
          if (hasUv) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF] = data[j * vertSizeF + offsetUF];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF + 1] = data[j * vertSizeF + offsetUF + 1];
          }
          if (hasUv2) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F] = data[j * vertSizeF + offsetU2F];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F + 1] = data[j * vertSizeF + offsetU2F + 1];
          }
          if (hasTangent) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF] = data[j * vertSizeF + offsetTF];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 1] = data[j * vertSizeF + offsetTF + 1];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 2] = data[j * vertSizeF + offsetTF + 2];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 3] = data[j * vertSizeF + offsetTF + 3];
          }
          if (hasColor) {
            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4] = data8[j * vertSizeF * 4 + offsetCF * 4];
            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 1] = data8[j * vertSizeF * 4 + offsetCF * 4 + 1];
            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 2] = data8[j * vertSizeF * 4 + offsetCF * 4 + 2];
            batchData8[j * batchVertSizeF * 4 + vbOffset * 4 + batchOffsetCF * 4 + 3] = data8[j * vertSizeF * 4 + offsetCF * 4 + 3];
          }
          batchData[j * batchVertSizeF + batchOffsetEF + vbOffset] = i;
        }
      } else {
        transform = meshInstances[i].node.getWorldTransform();
        for (j = 0; j < numVerts; j++) {
          vec.set(data[j * vertSizeF + offsetPF], data[j * vertSizeF + offsetPF + 1], data[j * vertSizeF + offsetPF + 2]);
          transform.transformPoint(vec, vec);
          batchData[j * batchVertSizeF + vbOffset] = vecData[0];
          batchData[j * batchVertSizeF + vbOffset + 1] = vecData[1];
          batchData[j * batchVertSizeF + vbOffset + 2] = vecData[2];
          if (hasNormal) {
            vec.set(data[j * vertSizeF + offsetNF], data[j * vertSizeF + offsetNF + 1], data[j * vertSizeF + offsetNF + 2]);
            transform.transformVector(vec, vec);
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF] = vecData[0];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 1] = vecData[1];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetNF + 2] = vecData[2];
          }
          if (hasUv) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF] = data[j * vertSizeF + offsetUF];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetUF + 1] = data[j * vertSizeF + offsetUF + 1];
          }
          if (hasUv2) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F] = data[j * vertSizeF + offsetU2F];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetU2F + 1] = data[j * vertSizeF + offsetU2F + 1];
          }
          if (hasTangent) {
            vec.set(data[j * vertSizeF + offsetTF], data[j * vertSizeF + offsetTF + 1], data[j * vertSizeF + offsetTF + 2]);
            transform.transformVector(vec, vec);
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF] = vecData[0];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 1] = vecData[1];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 2] = vecData[2];
            batchData[j * batchVertSizeF + vbOffset + batchOffsetTF + 3] = data[j * vertSizeF + offsetTF + 3];
          }
          if (hasColor) {
            batchData[j * batchVertSizeF + vbOffset + batchOffsetCF] = data[j * vertSizeF + offsetCF];
          }
        }
      }
      indexBase = mesh.primitive[0].base;
      numIndices = mesh.primitive[0].count;
      indexData = new Uint16Array(mesh.indexBuffer[0].storage);
      for (j = 0; j < numIndices; j++) {
        batchIndexData[j + indexOffset] = indexData[indexBase + j] + verticesOffset;
      }
      indexOffset += numIndices;
      verticesOffset += numVerts;
      vbOffset = verticesOffset * batchVertSizeF;
    }
    var vertexFormatId = 0;
    if (hasNormal) {
      vertexFormatId |= 1 << 1;
    }
    if (hasUv) {
      vertexFormatId |= 1 << 2;
    }
    if (hasUv2) {
      vertexFormatId |= 1 << 3;
    }
    if (hasTangent) {
      vertexFormatId |= 1 << 4;
    }
    if (hasColor) {
      vertexFormatId |= 1 << 5;
    }
    if (dynamic) {
      vertexFormatId |= 1 << 6;
    }
    var vertexFormat = this.vertexFormats[vertexFormatId];
    if (!vertexFormat) {
      var formatDesc = [];
      formatDesc.push({semantic:pc.SEMANTIC_POSITION, components:3, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      if (hasNormal) {
        formatDesc.push({semantic:pc.SEMANTIC_NORMAL, components:3, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      }
      if (hasUv) {
        formatDesc.push({semantic:pc.SEMANTIC_TEXCOORD0, components:2, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      }
      if (hasUv2) {
        formatDesc.push({semantic:pc.SEMANTIC_TEXCOORD1, components:2, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      }
      if (hasTangent) {
        formatDesc.push({semantic:pc.SEMANTIC_TANGENT, components:4, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      }
      if (hasColor) {
        formatDesc.push({semantic:pc.SEMANTIC_COLOR, components:4, type:pc.ELEMENTTYPE_UINT8, normalize:true});
      }
      if (dynamic) {
        formatDesc.push({semantic:pc.SEMANTIC_BLENDINDICES, components:1, type:pc.ELEMENTTYPE_FLOAT32, normalize:false});
      }
      vertexFormat = this.vertexFormats[vertexFormatId] = new pc.VertexFormat(this.device, formatDesc);
    }
    var vertexBuffer = new pc.VertexBuffer(this.device, vertexFormat, batchNumVerts, pc.BUFFER_STATIC, batchData.buffer);
    indexBuffer.unlock();
    mesh = new pc.Mesh;
    mesh.vertexBuffer = vertexBuffer;
    mesh.indexBuffer[0] = indexBuffer;
    mesh.primitive[0].type = batch.origMeshInstances[0].mesh.primitive[0].type;
    mesh.primitive[0].base = 0;
    mesh.primitive[0].count = batchNumIndices;
    mesh.primitive[0].indexed = true;
    mesh.cull = false;
    if (dynamic) {
      material = material.clone();
      material.chunks.transformVS = this.transformVS;
      material.chunks.skinTexVS = this.skinTexVS;
      material.chunks.skinConstVS = this.skinConstVS;
      material.update();
    }
    var meshInstance = new pc.MeshInstance(this.rootNode, mesh, material);
    meshInstance.castShadow = batch.origMeshInstances[0].castShadow;
    meshInstance.parameters = batch.origMeshInstances[0].parameters;
    meshInstance.isStatic = batch.origMeshInstances[0].isStatic;
    meshInstance.cull = batch.origMeshInstances[0].cull;
    meshInstance.layer = batch.origMeshInstances[0].layer;
    meshInstance._staticLightList = batch.origMeshInstances[0]._staticLightList;
    meshInstance._shaderDefs = batch.origMeshInstances[0]._shaderDefs;
    if (dynamic) {
      var nodes = [];
      for (i = 0; i < batch.origMeshInstances.length; i++) {
        nodes.push(batch.origMeshInstances[i].node);
      }
      meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);
    }
    meshInstance._updateAabb = false;
    batch.meshInstance = meshInstance;
    this.update(batch);
    var newModel = new pc.Model;
    newModel.meshInstances = [batch.meshInstance];
    newModel.castShadows = batch.origMeshInstances[0].castShadows;
    batch.model = newModel;
    return batch;
  };
  BatchManager.prototype.update = function(batch) {
    batch._aabb.copy(batch.origMeshInstances[0].aabb);
    for (var i = 0; i < batch.origMeshInstances.length; i++) {
      if (i > 0) {
        batch._aabb.add(batch.origMeshInstances[i].aabb);
      }
    }
    batch.meshInstance.aabb = batch._aabb;
    batch._aabb._radiusVer = -1;
    batch.meshInstance._aabbVer = 0;
  };
  BatchManager.prototype.updateAll = function() {
    if (this._dirtyGroups.length > 0) {
      this.generate(this._dirtyGroups);
    }
    for (var i = 0; i < this._batchList.length; i++) {
      if (!this._batchList[i].dynamic) {
        continue;
      }
      this.update(this._batchList[i]);
    }
  };
  BatchManager.prototype.clone = function(batch, clonedMeshInstances) {
    var batch2 = new pc.Batch(clonedMeshInstances, batch.dynamic, batch.batchGroupId);
    this._batchList.push(batch2);
    var nodes = [];
    for (var i = 0; i < clonedMeshInstances.length; i++) {
      nodes.push(clonedMeshInstances[i].node);
    }
    batch2.meshInstance = new pc.MeshInstance(batch.meshInstance.node, batch.meshInstance.mesh, batch.meshInstance.material);
    batch2.meshInstance._updateAabb = false;
    batch2.meshInstance.parameters = clonedMeshInstances[0].parameters;
    batch2.meshInstance.isStatic = clonedMeshInstances[0].isStatic;
    batch2.meshInstance.cull = clonedMeshInstances[0].cull;
    batch2.meshInstance.layer = clonedMeshInstances[0].layer;
    batch2.meshInstance._staticLightList = clonedMeshInstances[0]._staticLightList;
    if (batch.dynamic) {
      batch2.meshInstance.skinInstance = new SkinBatchInstance(this.device, nodes, this.rootNode);
    }
    batch2.meshInstance.castShadow = batch.meshInstance.castShadow;
    batch2.meshInstance._shader = batch.meshInstance._shader;
    var newModel = new pc.Model;
    newModel.meshInstances = [batch2.meshInstance];
    newModel.castShadows = batch.origMeshInstances[0].castShadows;
    batch2.model = newModel;
    return batch2;
  };
  BatchManager.prototype.destroy = function(batch) {
    batch.refCounter--;
    if (batch.refCounter === 0) {
      var layers = this._batchGroups[batch.batchGroupId].layers;
      for (var i = 0; i < layers.length; i++) {
        this.scene.layers.getLayerById(layers[i]).removeMeshInstances(batch.model.meshInstances);
      }
      batch.model.destroy();
    }
  };
  BatchManager.prototype.register = function(batch, entities) {
    batch.refCounter = entities.length;
    var self = this;
    var callback = function() {
      self.destroy(batch);
    };
    for (var i = 0; i < entities.length; i++) {
      entities[i].once("destroy", callback);
    }
  };
  return {Batch:Batch, BatchGroup:BatchGroup, BatchManager:BatchManager};
}());
  window.pc=pc;
  return pc;
}));



/***/ }),

/***/ "./node_modules/hypergl/lib/render.js":
/*!********************************************!*\
  !*** ./node_modules/hypergl/lib/render.js ***!
  \********************************************/
/*! exports provided: render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./run */ "./node_modules/hypergl/lib/run.js");

function render(root, canvas, options) {
    var app = Object(_run__WEBPACK_IMPORTED_MODULE_0__["run"])(root, {
        mouse: new pc.Mouse(canvas),
        keyboard: new pc.Keyboard(window),
        canvas: canvas,
        app: null
    }, {}, null);
    console.log('application init');
}
;
//# sourceMappingURL=render.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/run.js":
/*!*****************************************!*\
  !*** ./node_modules/hypergl/lib/run.js ***!
  \*****************************************/
/*! exports provided: run, runChildren, addScriptComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "run", function() { return run; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "runChildren", function() { return runChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addScriptComponent", function() { return addScriptComponent; });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ "./node_modules/hypergl/lib/node.js");
/* harmony import */ var _string_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string_component */ "./node_modules/hypergl/lib/string_component.js");
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony import */ var _script_commponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./script_commponent */ "./node_modules/hypergl/lib/script_commponent.js");




var stringToComponent = Object(_string_component__WEBPACK_IMPORTED_MODULE_1__["getAllStringToComponent"])();
var i = 0;
function run(node, innerContext, context, parent, cb) {
    if (node instanceof _node__WEBPACK_IMPORTED_MODULE_0__["Node"]) {
        var Ctor = node.type;
        if (typeof Ctor === 'string') {
            Ctor = stringToComponent[Ctor];
        }
        var props = Object.assign({}, Ctor.defaultProps, node.props);
        var c;
        c = new Ctor(props, context, innerContext, parent);
        props.ref && props.ref(c);
        var children = void 0;
        if (c instanceof _script_commponent__WEBPACK_IMPORTED_MODULE_3__["HpcComponent"]) {
            c.initialize();
            if (props.ref) {
                props.ref(c);
            }
            var node_1 = c.render();
            if (Array.isArray(node_1)) {
                children = runChildren(node_1, innerContext, context, parent);
            }
            else {
                children = runChildren([node_1], innerContext, context, parent);
            }
            c._children = children;
            c.componentLoaded();
            _application_tag__WEBPACK_IMPORTED_MODULE_2__["updateQuene"].push(c.update.bind(c));
        }
        else {
            children = runChildren(c.render && c.render(), innerContext, context, c);
            c.children = children;
        }
        return c;
    }
    else {
        console.error('e');
    }
}
;
function runChildren(nodes, innerContext, context, parent, isAppend) {
    if (isAppend === void 0) { isAppend = false; }
    if (nodes == null) {
        return;
    }
    ;
    var arr = [];
    for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var c = run(node, innerContext, context, parent);
        c.parent = parent;
        arr.push(c);
        if (isAppend) {
            parent.children.push(c);
        }
    }
    return arr;
}
;
function addScriptComponent(entity, name, init, update) {
    var script = pc.createScript(name);
    script.prototype.initialize = function () {
        init();
    };
    script.prototype.update = function (dt) {
        update(dt);
    };
    entity.addComponent('script');
    entity.script.create(name);
}
//# sourceMappingURL=run.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/script_commponent.js":
/*!*******************************************************!*\
  !*** ./node_modules/hypergl/lib/script_commponent.js ***!
  \*******************************************************/
/*! exports provided: HpcComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HpcComponent", function() { return HpcComponent; });
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./component */ "./node_modules/hypergl/lib/component.js");
/* harmony import */ var _run__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./run */ "./node_modules/hypergl/lib/run.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./node_modules/hypergl/lib/util.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var HpcComponent = /** @class */ (function (_super) {
    __extends(HpcComponent, _super);
    function HpcComponent(props, context, innerContext) {
        var _this = _super.call(this, props, context, innerContext) || this;
        _this._children = [];
        _this.app = Object(_application_tag__WEBPACK_IMPORTED_MODULE_0__["getApplicationInstance"])();
        return _this;
    }
    HpcComponent.prototype.next = function (cb) {
    };
    HpcComponent.prototype.append = function (parent) {
        var children = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            children[_i - 1] = arguments[_i];
        }
        return Object(_run__WEBPACK_IMPORTED_MODULE_2__["runChildren"])(children, this.innerContext, this.context, Object(_util__WEBPACK_IMPORTED_MODULE_3__["getHpc"])(parent), true);
        // res.forEach((x) => {
        //     parent.addChild(x.pc);
        // })
    };
    Object.defineProperty(HpcComponent.prototype, "children", {
        get: function () {
            if (this._children.length === 0) {
                return null;
            }
            else if (this._children.length === 1) {
                return this._children[0];
            }
            else if (this._children.length > 1) {
                return this._children;
            }
        },
        enumerable: true,
        configurable: true
    });
    HpcComponent.prototype.initialize = function () { };
    ;
    HpcComponent.prototype.componentLoaded = function () { };
    ;
    HpcComponent.prototype.applicationLoaded = function () { };
    ;
    HpcComponent.prototype.update = function (dt) { };
    ;
    HpcComponent.isHpcComponent = true;
    return HpcComponent;
}(_component__WEBPACK_IMPORTED_MODULE_1__["Component"]));

//# sourceMappingURL=script_commponent.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/string_component.js":
/*!******************************************************!*\
  !*** ./node_modules/hypergl/lib/string_component.js ***!
  \******************************************************/
/*! exports provided: getAllStringToComponent, stringToComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllStringToComponent", function() { return getAllStringToComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringToComponent", function() { return stringToComponent; });
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony import */ var _entity_tag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./entity.tag */ "./node_modules/hypergl/lib/entity.tag.js");
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components */ "./node_modules/hypergl/lib/components/index.js");



var stringToComponent = {};
for (var x in _components__WEBPACK_IMPORTED_MODULE_2__) {
    stringToComponent[_components__WEBPACK_IMPORTED_MODULE_2__[x].basename] = _components__WEBPACK_IMPORTED_MODULE_2__[x];
}
function getAllStringToComponent() {
    stringToComponent[_application_tag__WEBPACK_IMPORTED_MODULE_0__["Application"].basename] = _application_tag__WEBPACK_IMPORTED_MODULE_0__["Application"];
    stringToComponent[_entity_tag__WEBPACK_IMPORTED_MODULE_1__["Entity"].basename] = _entity_tag__WEBPACK_IMPORTED_MODULE_1__["Entity"];
    return stringToComponent;
}

//# sourceMappingURL=string_component.js.map

/***/ }),

/***/ "./node_modules/hypergl/lib/util.js":
/*!******************************************!*\
  !*** ./node_modules/hypergl/lib/util.js ***!
  \******************************************/
/*! exports provided: loadAssetsFromUrl, createMaterial, addUpdateListen, randomRange, randomEnum, once, onceTime, getVertexArr, getHpc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadAssetsFromUrl", function() { return loadAssetsFromUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMaterial", function() { return createMaterial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addUpdateListen", function() { return addUpdateListen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomRange", function() { return randomRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomEnum", function() { return randomEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "once", function() { return once; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onceTime", function() { return onceTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVertexArr", function() { return getVertexArr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHpc", function() { return getHpc; });
/* harmony import */ var _application_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./application.tag */ "./node_modules/hypergl/lib/application.tag.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ "./node_modules/hypergl/lib/config.js");



function loadAssetsFromUrl(url, type) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            Object(_application_tag__WEBPACK_IMPORTED_MODULE_0__["getApplicationInstance"])().assets.loadFromUrl(url, type, function (err, asset) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(asset);
                }
            });
        });
    });
}
function createMaterial(colors) {
    var material = new pc.StandardMaterial();
    for (var param in colors) {
        material[param] = colors[param];
    }
    material.update();
    return material;
}
function addUpdateListen(cb) {
    _application_tag__WEBPACK_IMPORTED_MODULE_0__["updateQuene"].push(cb);
}
function randomRange(a, b) {
    var min = a, max = b;
    if (a > b) {
        max = a;
        min = b;
    }
    var subtraction = max - min;
    return min + subtraction * Math.random();
}
function randomEnum() {
    var arg = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arg[_i] = arguments[_i];
    }
    var len = arg.length;
    var random = Math.random() * len;
    for (var i = 0; i < len; i++) {
        if (random >= i && random < i + 1) {
            return arg[i];
        }
    }
}
function once(target, key, descriptor) {
    var oldValue = descriptor.value;
    var cout = 0;
    var newValue = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var res;
        if (cout === 0) {
            res = oldValue.apply(this, args);
        }
        cout++;
        return res;
    };
    descriptor.value = newValue;
}
function onceTime(time) {
    return function (target, key, descriptor) {
        var oldValue = descriptor.value;
        var cout = 0;
        var newValue = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var res;
            if (cout === 0) {
                res = oldValue.apply(this, args);
            }
            setTimeout(function () { cout = 0; }, time);
            cout++;
            return res;
        };
        descriptor.value = newValue;
    };
}
function getVertexArr(mesh) {
    var buffer = mesh.vertexBuffer;
    var iterator = new pc.VertexIterator(buffer);
    var arr = [];
    // Iterate though all verticles 
    for (var i = 0; i < buffer.getNumVertices(); i++) {
        // Current vertex's position
        var posSem = iterator.element[pc.SEMANTIC_POSITION];
        // Get position
        var posX = posSem.array[posSem.index];
        var posY = posSem.array[posSem.index + 1];
        var posZ = posSem.array[posSem.index + 2];
        arr.push({ x: posX, y: posY, z: posZ });
        // Move to the next vertex
        iterator.next();
    }
    iterator.end();
    return arr;
}
function getHpc(pc) {
    return pc[_config__WEBPACK_IMPORTED_MODULE_1__["KEY"]];
}
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status === undefined ? 200 : options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);


/***/ }),

/***/ "./src/demo/index.tsx":
/*!****************************!*\
  !*** ./src/demo/index.tsx ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var hypergl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hypergl */ "./node_modules/hypergl/lib/index.js");
/* harmony import */ var hypergl_lib_playcanvas_ammo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hypergl/lib/playcanvas/ammo.js */ "./node_modules/hypergl/lib/playcanvas/ammo.js");
/* harmony import */ var hypergl_lib_playcanvas_ammo_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hypergl_lib_playcanvas_ammo_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _loading_scene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading_scene */ "./src/demo/loading_scene.tsx");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
/**
 * @author dadigua
 */



var canvas = document.getElementById("root");
var App = /** @class */ (function (_super) {
    __extends(App, _super);
    function App() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    App.prototype.render = function () {
        return hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("application", { gravity: new pc.Vec3(0, -9.8, 0) },
            hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h(_loading_scene__WEBPACK_IMPORTED_MODULE_2__["LoadingScene"], null),
            hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("entity", __assign({}, { rotation: new pc.Vec3(0, 0, 10) }),
                hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("light", __assign({}, {
                    type: "directional",
                    color: new pc.Color(1, 1, 1),
                    castShadows: true,
                    intensity: 1,
                    shadowBias: 0.2,
                    normalOffsetBias: 0.2,
                    shadowResolution: 1024,
                    shadowDistance: 16,
                    shadowType: pc.SHADOW_PCF3
                }))));
    };
    return App;
}(hypergl__WEBPACK_IMPORTED_MODULE_0__["HpcComponent"]));
Object(hypergl__WEBPACK_IMPORTED_MODULE_0__["render"])(hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h(App, null), canvas, { debugger: true });


/***/ }),

/***/ "./src/demo/loading_scene.tsx":
/*!************************************!*\
  !*** ./src/demo/loading_scene.tsx ***!
  \************************************/
/*! exports provided: LoadingScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingScene", function() { return LoadingScene; });
/* harmony import */ var hypergl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hypergl */ "./node_modules/hypergl/lib/index.js");
/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");
/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(whatwg_fetch__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tweenjs/tween.js */ "./node_modules/@tweenjs/tween.js/src/Tween.js");
/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @author dadigua
 */



var material = Object(hypergl__WEBPACK_IMPORTED_MODULE_0__["createMaterial"])({
    diffuse: new pc.Color(.3, .9, .3)
});
function formatThreeJsonVertices(json) {
    if (json.data !== undefined) {
        json = json.data;
    }
    if (json.scale !== undefined) {
        json.scale = 1.0 / json.scale;
    }
    else {
        json.scale = 10.0;
    }
    var scale = json.scale;
    var vertices = json.vertices, offset = 0;
    var zLength = vertices.length;
    var positions = [];
    var i = 0;
    while (offset < zLength) {
        var vertex = { x: 0, y: 0, z: 0 };
        vertex.x = vertices[offset++] * scale;
        vertex.y = vertices[offset++] * scale;
        vertex.z = vertices[offset++] * scale;
        i++;
        // if (i % 2 !== 0) { continue; }
        positions.push(vertex);
    }
    return positions;
}
// pc.calculateNormals()
function animate(time) {
    requestAnimationFrame(animate);
    _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["update"](time);
}
requestAnimationFrame(animate);
// let assets = loadAssetsFromUrl<pc.Asset>('./assets/models/statue/Statue_1.json', 'model')
var LoadingScene = /** @class */ (function (_super) {
    __extends(LoadingScene, _super);
    function LoadingScene() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.vertices = [];
        _this.containerposition = { x: 0, y: 0, z: 0 };
        _this.tweenArr = [];
        _this.positions = [];
        return _this;
    }
    LoadingScene.prototype.componentLoaded = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var modelVertices, modelVertices2, modelVertices3, modelVertices4, modelVertices5, modelVertices6, arr, maxCount, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.loadingScene = this.app.root.findByName('loadingScene');
                        return [4 /*yield*/, fetch('./assets/models/cpac5.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 1:
                        modelVertices = _a.sent();
                        return [4 /*yield*/, fetch('./assets/models/cpbook2.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 2:
                        modelVertices2 = _a.sent();
                        return [4 /*yield*/, fetch('./assets/models/cpgame3.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 3:
                        modelVertices3 = _a.sent();
                        return [4 /*yield*/, fetch('./assets/models/cpkv3.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 4:
                        modelVertices4 = _a.sent();
                        return [4 /*yield*/, fetch('./assets/models/cpmovie4.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 5:
                        modelVertices5 = _a.sent();
                        return [4 /*yield*/, fetch('./assets/models/qr.json').then(function (rssponse) { return rssponse.json(); }).then(function (res) { return formatThreeJsonVertices(res); })];
                    case 6:
                        modelVertices6 = _a.sent();
                        arr = [modelVertices4, modelVertices, modelVertices3, modelVertices6];
                        maxCount = Math.max.apply(Math, arr.map(function (x) { return x.length; }));
                        console.log('maxCount', maxCount);
                        this.generate(maxCount);
                        this.container = this.app.root.findByName('container');
                        this.containerTween = new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["Tween"](this.containerposition).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["Easing"].Exponential.InOut);
                        index = 0;
                        setInterval(function () {
                            console.log(index % 3);
                            var duration = 2000;
                            _this.transform(arr[index % 3], duration);
                            // let target = new pc.Vec3(randomRange(-10, 10), randomRange(-10, 10), randomRange(-10, 10));
                            // this.containerTween.to({ x: target.x, y: target.y, z: target.z }, Math.random() * duration + duration).start()
                            index++;
                        }, 4000);
                        return [2 /*return*/];
                }
            });
        });
    };
    LoadingScene.prototype.generate = function (maxCount) {
        var temp = [];
        for (var i = 0; i < maxCount; i++) {
            var position = new pc.Vec3(Object(hypergl__WEBPACK_IMPORTED_MODULE_0__["randomRange"])(-10, 10), Object(hypergl__WEBPACK_IMPORTED_MODULE_0__["randomRange"])(-10, 10), Object(hypergl__WEBPACK_IMPORTED_MODULE_0__["randomRange"])(-10, 10));
            this.positions.push(position);
            temp.push(hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("entity", { position: position, scale: new pc.Vec3(.1, .1, .1) },
                hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("model", { type: 'sphere', material: material, isStatic: true })));
            this.tweenArr.push(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["Tween"](position).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["Easing"].Exponential.InOut));
        }
        var res = this.append(this.loadingScene, hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("entity", { name: 'container', scale: new pc.Vec3(1, 1, 1) }, temp))[0].pc.children;
        this.vertices = res;
    };
    LoadingScene.prototype.transform = function (targets, duration) {
        _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__["removeAll"]();
        for (var i = 0; i < this.vertices.length; i++) {
            var object = this.vertices[i];
            var target = targets[i];
            if (!target) {
                object.enabled = false;
                this.move(new pc.Vec3(0, 0, 0), object, duration, i);
            }
            else {
                object.enabled = true;
                this.move(target, object, duration, i);
            }
            // object.setLocalPosition(target.x, target.y, target.z)
        }
    };
    LoadingScene.prototype.move = function (target, object, duration, index) {
        this.tweenArr[index].to({ x: target.x, y: target.y, z: target.z }, Math.random() * duration + duration)
            // .onUpdate(function (position) { // Called after tween.js updates 'coords'.
            //     // Move 'box' to the position described by 'coords' with a CSS translation.
            //     // console.log(arguments)
            //     object.setLocalPosition(position.x, position.y, position.z)
            // })
            .start();
    };
    LoadingScene.prototype.update = function () {
        for (var i = 0; i < this.vertices.length; i++) {
            var object = this.vertices[i];
            var position = this.positions[i];
            object.setLocalPosition(position.x, position.y, position.z);
            // object.setLocalPosition(target.x, target.y, target.z)
        }
        this.container && this.container.setLocalPosition(this.containerposition.x, this.containerposition.y, this.containerposition.z);
    };
    LoadingScene.prototype.render = function () {
        return hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("entity", { name: 'loadingScene' },
            hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("entity", { name: 'camera', position: new pc.Vec3(0, 0, 100), rotation: new pc.Vec3(0, 0, 0) },
                hypergl__WEBPACK_IMPORTED_MODULE_0__["default"].h("camera", null)));
    };
    return LoadingScene;
}(hypergl__WEBPACK_IMPORTED_MODULE_0__["HpcComponent"]));



/***/ })

/******/ });
//# sourceMappingURL=index.js.map